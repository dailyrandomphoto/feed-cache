<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is PyTorch: a Summary  Guide for Beginners</title>
      <author>images.cv</author>
      <pubDate>Wed, 15 Dec 2021 10:11:47 +0000</pubDate>
      <link>https://dev.to/imagescv/what-is-pytorch-a-summary-guide-for-beginners-3eeb</link>
      <guid>https://dev.to/imagescv/what-is-pytorch-a-summary-guide-for-beginners-3eeb</guid>
      <description>&lt;p&gt;&lt;a href="https://pytorch.org/"&gt;PyTorch&lt;/a&gt; is a deep learning framework that was created by Facebook. It allows you to use &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; as your main programming language, which provides flexibility and speed for many programmers who work with machine learning tasks. PyTorch is also GPU-accelerated, which makes it preferable for many users. This blog post will provide an overview of what PyTorch is and how to get started using this powerful tool.&lt;/p&gt;

&lt;p&gt;What Are Some Key Features of PyTorch?&lt;br&gt;
PyTorch has several key features that make it stand out as a deep learning framework. Some of these include:&lt;/p&gt;

&lt;p&gt;üî• &lt;u&gt;&lt;strong&gt;It's Python based&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;PyTorch uses Python as its main programming language, which is an extremely popular choice for programmers who work with machine learning tasks every day. This gives you the flexibility and speed you need to get your tasks done quickly. However, if python isn't your preferred language then another great feature comes into play...&lt;/p&gt;

&lt;p&gt;üéöÔ∏è &lt;u&gt;&lt;strong&gt;GPU accelerated&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;GPU acceleration makes PyTorch preferable for many users because this allows them to run their code much faster than they would be able to without using GPUs. If this doesn't sound like something you'll use or care about right now then keep reading because there are still several other reasons why PyTorch is a great choice for you.&lt;/p&gt;

&lt;p&gt;ü™¢ &lt;u&gt;&lt;strong&gt;The use of Tensors&lt;/strong&gt;&lt;/u&gt;&lt;br&gt;
Tensors are at the heart of PyTorch, and this allows you to easily create and manipulate your data in ways that other frameworks don't always allow. This makes PyTorch an extremely powerful tool for many different tasks.&lt;/p&gt;

&lt;p&gt;üíé &lt;u&gt;&lt;strong&gt;PyTorch Modules&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;PyTorch also has several modules that you can use to expand its functionality. These include &lt;a href="https://pytorch.org/vision/stable/index.html"&gt;torchvision&lt;/a&gt; for image processing, &lt;a href="https://pytorch.org/audio/stable/index.html"&gt;torchaudio&lt;/a&gt; for audio processing, and more. Having these modules available makes it possible to do a wide range of deep learning tasks with ease.&lt;/p&gt;

&lt;p&gt;üìà &lt;u&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;PyTorch is flexible in the sense that you can use it for many different deep learning applications. Whether your data comes from python or an external source like Caffe, PyTorch has a way to handle and work with this data in order to get results quickly and effectively. This makes it possible to solve problems fast when they arise on the job site which keeps everyone happy!&lt;/p&gt;

&lt;p&gt;‚è±Ô∏è &lt;u&gt;&lt;strong&gt;Speed&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;PyTorch is known for its speed, which makes it great for researchers and data scientists who need to get their work done quickly. The python interface combined with GPU acceleration means you can do all this without having to worry about spending hours trying to figure out how something works or getting stuck on tasks that should be simple. This lets your team focus on the important things instead of wasting time debugging code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-can-benefit-from-using-pytorch"&gt;
  &lt;/a&gt;
  Who Can Benefit From Using PyTorch?
&lt;/h2&gt;

&lt;p&gt;There are many different people who could benefit from using PyTorch including Data Scientists, Researchers, Software Engineers/Developers, and QA Testers because there isn't anyone particular industry where it wouldn't be useful! If you're looking at machine learning as a possible solution to a problem you're facing then PyTorch is definitely worth taking a look at.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;In conclusion&lt;/strong&gt;, PyTorch is a deep learning framework that was created by Facebook. It allows you to use Python as your main programming language, which provides flexibility and speed for many programmers who work with machine learning tasks. PyTorch is also GPU-accelerated, which makes it preferable for many users. It has several key features that make it stand out as a deep learning framework, including python-based, GPU accelerated, tensors, modules, flexibility, and speed. PyTorch can be used by many different people in a wide range of industries to solve machine learning problems quickly and effectively. If you're looking for a deep learning framework that has all the features you need, then PyTorch is definitely worth taking a look at.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

&lt;p&gt;üëâVisit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Widget Driven Development</title>
      <author>Alexey Antipov</author>
      <pubDate>Wed, 15 Dec 2021 10:02:48 +0000</pubDate>
      <link>https://dev.to/aantipov/widget-driven-development-1n5m</link>
      <guid>https://dev.to/aantipov/widget-driven-development-1n5m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  Preface
&lt;/h2&gt;

&lt;p&gt;When developing UI applications, we compose them from components. Each UI component is essentially a combination of markup, scoped styles, and some UI logic. Data Management is frequently left out of components control, resulting in a complicated architecture with convoluted data flows.&lt;/p&gt;

&lt;p&gt;In this article, I'll demonstrate how we can transform components into autonomous isolated widgets with complete control over both Data Logic and UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-history-of-components"&gt;
  &lt;/a&gt;
  The History of Components
&lt;/h2&gt;

&lt;p&gt;Widgets, in my opinion, are the natural successors of Components. To see this, I suggest going back in time and look at how our approaches to building UI have evolved over time.&lt;/p&gt;

&lt;p&gt;Many remember the times when all application styles were defined in a single global CSS file. Styles definitions used complex combinations of different &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors"&gt;CSS selectors&lt;/a&gt;. Style collisions were common in apps. The size and complexity of those styles sometimes affected even the performance of websites.&lt;/p&gt;

&lt;p&gt;In 2009 &lt;a href="https://en.bem.info/methodology/"&gt;BEM&lt;/a&gt; was born. BEM provided a set of guidelines for defining styles and naming classes. These rules were intended to address the problem of style collisions and inefficient selectors. BEM encouraged to think of UI in terms of blocks, elements, and modifiers.&lt;/p&gt;

&lt;p&gt;2013-2015 marked the rise of &lt;strong&gt;Components&lt;/strong&gt; approach. React made it simple to divide UI into components that were a combination of markup (HTML) and UI logic (JavaScript). It was a game changer in application development. Other frameworks soon followed suit, adopting a components-based approach as well.&lt;/p&gt;

&lt;p&gt;With the rise of build tools, CSS preprocessors, and techniques like CSS-in-JS and &lt;a href="https://github.com/css-modules/css-modules"&gt;CSS Modules&lt;/a&gt;, it became feasible to make Styling a part of Components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ies03oYW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zh3opup6i4335y20e5x0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ies03oYW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zh3opup6i4335y20e5x0.png" alt="a combination of Markup, Styles and UI Logic" width="880" height="593"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Components playgrounds such as Storybook emerged to help developers build components in an isolated environment and ensure proper styles scoping. They encouraged developers to think of UI as &lt;a href="https://www.kn8.lt/blog/ui-is-a-function-of-data/"&gt;a function of state&lt;/a&gt;: components props values defined the look and behaviour of components.&lt;/p&gt;

&lt;p&gt;Collections of reusable high-quality components became a thing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-unresolved-hurdles"&gt;
  &lt;/a&gt;
  The unresolved hurdles
&lt;/h2&gt;

&lt;p&gt;Component-driven approach helped break UI into isolated reusable pieces and enabled building large-scale applications using collections of pre-built components.&lt;/p&gt;

&lt;p&gt;What was missing, though, is a way of supplying UI components with data.&lt;/p&gt;

&lt;p&gt;Data management became one of the most difficult tasks in Frontend Engineering and the primary contributor to the complexity of UI apps.&lt;/p&gt;

&lt;p&gt;We learned to split components into two types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Presentational&lt;/em&gt; components, which are responsible for UI representation and are usually stateless and side-effect free&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Container&lt;/em&gt; components, which deal with data-related logic and pass data down to Presentational components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All that remains is to define how Container components should work with data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gmOxeBWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbbvb9ncnr6bvhcozu5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gmOxeBWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbbvb9ncnr6bvhcozu5i.png" alt="an image of Container component that includes a Presentational component and Data logic" width="880" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-naive-approach"&gt;
  &lt;/a&gt;
  The Naive approach
&lt;/h2&gt;

&lt;p&gt;The naive approach would be for each Container component to simply fetch data needed by underlying Presentational components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fp5VQ1R2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq10jejpvyf61rjendjb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fp5VQ1R2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq10jejpvyf61rjendjb.png" alt="an image of Frontend and Backend interaction" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because the same data is usually needed by multiple different components, implementing such an approach in practice would bring a bunch of problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;duplicated requests and data over-fetching. Slow UI and overloaded server as a result.&lt;/li&gt;
&lt;li&gt;possible data inconsistency between components when requests to the same endpoint result in different data&lt;/li&gt;
&lt;li&gt;complicated data invalidation (think of a case when the data has changed on Backend and you need to make sure every dependent component refetches the data)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-common-parent-approach"&gt;
  &lt;/a&gt;
  The Common parent approach
&lt;/h2&gt;

&lt;p&gt;We learnt to overcome the problem by moving data-fetching (and mutation) functionality up to common parent components which pass data down to all underlying components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ycFa3c8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efp3s243lqvo1xyykyy2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ycFa3c8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efp3s243lqvo1xyykyy2.png" alt="an image of Frontend and Backend interaction + Prop Drilling between Components" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We solved the problem of requests duplication and data invalidation. However, we did face new challenges:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the whole application logic became more complex and more coupled&lt;/li&gt;
&lt;li&gt;we were forced to pass data down through multiple components. This issue became notorious and got a name &lt;a href="https://kentcdodds.com/blog/prop-drilling"&gt;‚ÄúProp Drilling‚Äù&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-state-management-approach"&gt;
  &lt;/a&gt;
  The State Management approach
&lt;/h2&gt;

&lt;p&gt;To bypass the Prop Drilling problem, we learnt to use State Management libraries and techniques: instead of propagating data down to underlying components, we place data in some Store that is accessible to all the components down the tree, letting them obtain the data directly from there. Components subscribe to the changes in the Store to have the data always up-to-date.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rWjmuJfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcimiwli8pey0xk4c6gw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rWjmuJfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcimiwli8pey0xk4c6gw.png" alt="an image of Frontend and Backend interaction + Global Store" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Prop Drilling issue was resolved, but not for free:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;we now have to deal with a completely new concept, the Store, and care about a bunch of new things, such as designing and maintaining Store structure, appropriately updating data in the Store, data normalization, mutable vs immutable, a single store vs multiple stores, and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;state management libraries require us to learn a new vocabulary: &lt;em&gt;Actions&lt;/em&gt;, &lt;em&gt;Action Creators&lt;/em&gt;, &lt;em&gt;Reducers&lt;/em&gt;, &lt;em&gt;Middlewares&lt;/em&gt;, &lt;em&gt;Thunks&lt;/em&gt;, and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the introduced complexity and lack of clarity forced developers to create &lt;a href="https://redux.js.org/style-guide/style-guide"&gt;styleguides&lt;/a&gt; on how to work with the Store, what to do and what to avoid.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;as a result, our applications became very tangled and coupled. Frustrated developers try to mitigate the issues by inventing new state management libraries with different syntax.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-naive-approach-reimagined"&gt;
  &lt;/a&gt;
  The Naive approach reimagined
&lt;/h2&gt;

&lt;p&gt;Can we do better? Is there an easier way to approach data management? Can we have the data flows transparent and easy to understand? Can we untangle our apps and boost &lt;a href="https://www.freecodecamp.org/news/orthogonality-in-software-engineering/"&gt;orthogonality&lt;/a&gt;? Can we bring Data Logic under control of Components in the same way that we have done with Markup, Styles and UI Logic?&lt;/p&gt;

&lt;p&gt;We must have gotten too far into the woods and &lt;em&gt;can't see the forest for the trees&lt;/em&gt;. Let's go back to the starting point, to the Naive approach, and see if we can solve its problems differently.&lt;/p&gt;

&lt;p&gt;The main bummers there were requests duplication and data inconsistency.&lt;/p&gt;

&lt;p&gt;What if we could have an intermediate player between our components and Backend, say an API wrapper or interceptor, solving all those problems under the hood:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;deduplicate all the requests&lt;/li&gt;
&lt;li&gt;ensure data consistency: all the components should always have the same data when using the same request&lt;/li&gt;
&lt;li&gt;provide data invalidation ability: if a component changes data on the server, other components that rely on that data should receive the new data&lt;/li&gt;
&lt;li&gt;be transparent to components and not affect their logic in any way (make components think they communicate to Backend directly)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cKhUdzDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyhk7wq6t9vw6t72zp7n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cKhUdzDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyhk7wq6t9vw6t72zp7n.png" alt="Frontend and Backend interaction using an API Wrapper" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The good news is that we can have it, and there are already libraries providing such solutions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;some GraphQL clients, e.g. &lt;a href="https://relay.dev/"&gt;Relay&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://react-query.tanstack.com/"&gt;React-Query&lt;/a&gt;, &lt;a href="https://swr.vercel.app/"&gt;SWR&lt;/a&gt;, &lt;a href="https://redux-toolkit.js.org/rtk-query/overview"&gt;Redux Toolkit Query&lt;/a&gt;, &lt;a href="https://vue-query.vercel.app/"&gt;Vue Query&lt;/a&gt; for RESTful APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All we basically need to do is to wrap every API call with such an API Wrapper. The rest is handled automatically for us.&lt;/p&gt;

&lt;p&gt;The huge benefit of such an approach is that we can finally untangle our applications' data logic, put Data Logic under control of Components, and achieve better orthogonality by combining all pieces together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-rrvbIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgfzyv0h6wd0hjjlmbdw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-rrvbIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgfzyv0h6wd0hjjlmbdw.png" alt="a triangle including Data Logic, Styles, Markup and UI Logic" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#widget-driven-development"&gt;
  &lt;/a&gt;
  Widget driven development
&lt;/h2&gt;

&lt;p&gt;In my team, we started to use the described above Naive approach together with React Query and we love it. It enabled us to approach building our application differently. Let me call it &lt;em&gt;"Widget Driven Development"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The idea is that we split every page into so-called &lt;em&gt;widgets&lt;/em&gt;, which behave autonomously and are self-contained.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4lCIbhJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z42221shfvhv142e0ji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4lCIbhJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z42221shfvhv142e0ji.png" alt="a Page separated into Widgets" width="880" height="1000"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every widget is responsible for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fetching and providing all the required data to its UI&lt;/li&gt;
&lt;li&gt;mutating the related data on server if needed&lt;/li&gt;
&lt;li&gt;data representation in the UI&lt;/li&gt;
&lt;li&gt;UI for Loading state&lt;/li&gt;
&lt;li&gt;(optional) UI for Error state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Speaking of code organization, we co-locate all the widgets related files:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dLNzDKTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uietsdgrqj2bavtvoc9d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dLNzDKTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uietsdgrqj2bavtvoc9d.png" alt="an image of files grouped into widgets" width="880" height="889"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usually, the same API endpoint is used across multiple widgets. So we decided to keep all of them in a separate shared folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HTzyg2kj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmhjdnzzbw5xskb2f36x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HTzyg2kj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmhjdnzzbw5xskb2f36x.png" alt='an image of queries hooks grouped under "queries" folder' width="880" height="513"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use React Query library and each file in the &lt;code&gt;queries/&lt;/code&gt; folder exposes fetch and mutation methods wrapped into React Query.&lt;/p&gt;

&lt;p&gt;All Container components have a similar code structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useBookQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;queries/useBookQuery&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useAuthorQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;queries/useAuthorQuery&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Presentation&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Presentation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;BookDetailsContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;bookId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isBookError&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useBookQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bookId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isAuthorError&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuthorQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Presentation&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isBookError&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isAuthorError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how easy and declaratively dependant queries are handled. Also the only dependency of our widget is the presence of &lt;code&gt;bookId&lt;/code&gt; in the URL.&lt;/p&gt;

&lt;p&gt;Most of our widgets‚Äô container components have no props and rely on no external state except for URL data.&lt;/p&gt;

&lt;p&gt;Such an approach makes it transparent what API queries our widget relies upon. That transparency combined with near to zero external dependencies makes it easy to test widgets and gives us confidence in our code.&lt;/p&gt;

&lt;p&gt;Usually, changes to a widget are limited by modifications to files under that widget's folder. It significantly limits the risk of breaking any other parts of the application.&lt;/p&gt;

&lt;p&gt;Adding new widgets is also very straightforward: create a new folder for the widget with all required files in it and, if necessary, create a new query in the &lt;code&gt;/queries&lt;/code&gt; folder. Again, the risk of breaking any other parts of the application is very limited.&lt;/p&gt;

&lt;p&gt;Every widget can also be easily reused on different pages thanks to the limited dependency on the context. We usually just need to make sure the URLs of those pages contain the data identifiers needed for the widget.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The Components approach made easy and straightforward creation of reusable independent pieces of UI.&lt;br&gt;
It didn't solve all the problems though and Frontend applications often suffer from convoluted Data Management.&lt;/p&gt;

&lt;p&gt;There are libraries that enable approaching Data Management differently and significantly reduce the complexity of our applications.&lt;/p&gt;

&lt;p&gt;Leveraging those libraries, we can put data logic under control of components and convert an application into a set of reusable self-contained widgets. It makes the data flows transparent, architecture flexible, the code resilient and easy to test.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>statemanagement</category>
    </item>
    <item>
      <title>Blazingly fast Preview Environments for NextJS, NodeJS, and MongoDB on AWS</title>
      <author>Patryk Jeziorowski</author>
      <pubDate>Wed, 15 Dec 2021 10:00:59 +0000</pubDate>
      <link>https://dev.to/pjeziorowski/blazingly-fast-preview-environments-for-nextjs-nodejs-and-mongodb-on-aws-o1k</link>
      <guid>https://dev.to/pjeziorowski/blazingly-fast-preview-environments-for-nextjs-nodejs-and-mongodb-on-aws-o1k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Have you ever dreamed of deploying your applications on the cloud without any hassle? Imagine a platform where all you need to do is to sign in with your AWS credentials, and automagically the platform does all the hard work of configuration of the cloud for you, and, on top of that, provides some extra features that do not exist out of the box anywhere else.&lt;/p&gt;

&lt;p&gt;Qovery is this platform - not only does it allow you to deploy your infrastructure and applications on your own cloud account, but also provides extra cool features, one of which we will see in this article.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don't take our words for granted - 14000 developers from more than 100 countries use Qovery to deploy their apps on AWS.&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview-environments"&gt;
  &lt;/a&gt;
  Preview Environments
&lt;/h3&gt;

&lt;p&gt;Imagine working on a new feature. You're dealing with a full-stack application - you have a frontend, backend, and a database. You introduce a change to your backend app - how do you test all of it? It would be great if there was a service that could deploy everything for you so you can test your changes quickly and in separation with all the components...&lt;/p&gt;

&lt;p&gt;Qovery Preview Environments are designed to help you with exactly this.&lt;/p&gt;

&lt;p&gt;It not only deploys the app you changed but all other related applications and databases as well in the cloud so that you can test your new features and collaborate with reviewers of your code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPdtVKP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvhsaudl4xqvxuw3rmnn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPdtVKP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvhsaudl4xqvxuw3rmnn.png" alt="Image description" width="880" height="617"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Preview environments feature is available on other platforms as well. Vercel and Netlify allows you to test your changes before merging code into production. It‚Äôs perfect for single frontend applications, but the concept of Preview Environments on Qovery goes far beyond this.&lt;/p&gt;

&lt;p&gt;Qovery is able not only to create a preview environment for your frontend, but also for the backend and databases - the whole stack is supported. Running a set of backend microservices? No worries, Qovery got you covered. All services will be replicated in the new environment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview-environments-benefits"&gt;
  &lt;/a&gt;
  Preview environments benefits
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Time-saving&lt;/strong&gt; - You don't have to set up a fresh environment to test changes in isolation - Qovery does it all for you&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Productivity&lt;/strong&gt; - Faster changes, quicker review, better feedback loop - the productivity and quality of your application increases dramatically&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Better tests&lt;/strong&gt; - It's best to test apps in isolation, but it's almost impossible with a complicated stack if you have to prepare the testing environment manually - Qovery does it all "automagically" for you&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Independence&lt;/strong&gt; - Each environment is completely separate, meaning more people can work flawlessly on the project, testing the changes they introduce in parallel, not blocking each other&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deliver quickly&lt;/strong&gt; - Faster feedback loop, independent developers, fewer bugs, meaning the product is delivered more quickly&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reduce friction&lt;/strong&gt; - Waiting for others to test your changes is frustrating - with preview envs everyone has his own testing environment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#aws-infrastructure"&gt;
  &lt;/a&gt;
  AWS Infrastructure
&lt;/h3&gt;

&lt;p&gt;Before we start with the deployments, we need to have our AWS infrastructure ready and deployed. It can be done as simply as by providing credentials to your cloud account, you can see how to configure the credentials in this article - &lt;a href="https://hub.qovery.com/docs/using-qovery/configuration/cloud-service-provider/amazon-web-services/"&gt;https://hub.qovery.com/docs/using-qovery/configuration/cloud-service-provider/amazon-web-services/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iGWwz16k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04ilry028dda5tk13pu3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iGWwz16k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04ilry028dda5tk13pu3.png" alt="Image description" width="880" height="403"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The initial setup takes about 15 min, and your cluster is ready to host your applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#full-stack-application"&gt;
  &lt;/a&gt;
  Full Stack Application
&lt;/h3&gt;

&lt;p&gt;In this example, we will use a Next.js frontend, Node.js backend, and MongoDB as a database. The app will display an image gallery with images fetched from the backend. Preview Environments feature will help us introduce a new change in the backend - moving away from a hardcoded POC list of images to a list fetched from our database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h3&gt;

&lt;p&gt;Our simple image gallery will look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---NVyKyVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k56v3eqfatdm7zkim24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---NVyKyVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k56v3eqfatdm7zkim24.png" alt="Image description" width="880" height="691"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To generate the application, we used &lt;code&gt;npx create-next-app@latest&lt;/code&gt;, but the source code can be found here - &lt;a href="https://github.com/pjeziorowski/gallery-demo/tree/master/frontend"&gt;https://github.com/pjeziorowski/gallery-demo/tree/master/frontend&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main changes introduced to the generated application scaffolding are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding a &lt;code&gt;Dockerfile&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:alpine&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /usr/src
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /usr/src&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm run build

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; npm run start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Adding a query to our backend (which we will be built soon in the next steps) that fetches a list of images to display in our gallery&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useImages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;images&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;apiRoot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/v1/images`&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plus, we adjusted the HTML and styling for the demo purpose of showing a list of images&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  Backend
&lt;/h3&gt;

&lt;p&gt;Our backend is the main star of the demo. In its first version, the backend is displaying a hardcoded list of images. In the next step, we will gradually expand its capabilities. It will connect to a database and fetch the list from MongoDB instead. To make sure the changes are correct, we will use &lt;code&gt;Preview Environment&lt;/code&gt; feature before merging the pull request to our production environment&lt;/p&gt;

&lt;p&gt;The backend was generated using Express &lt;code&gt;npx express-generator --no-view&lt;/code&gt;, and the source code can be found here - &lt;a href="https://github.com/pjeziorowski/gallery-demo/tree/master/frontend"&gt;https://github.com/pjeziorowski/gallery-demo/tree/master/backend&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Changes that we introduced to the generated app scaffolding are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Adding a Dockerfile&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:16&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package*.json ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8080&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "node", "src/index.js" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating a &lt;code&gt;/api/v1/images&lt;/code&gt; endpoint that returns a hardcoded array of images&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/images&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IMG_4985.HEIC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3.9 MB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://images.unsplash.com/photo-1582053433976-25c00369fc93?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=512&amp;amp;q=80&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;In the next step we will improve the function to use a Mongo database instead.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h3&gt;

&lt;p&gt;After creating a new project, let's now set up our &lt;code&gt;production&lt;/code&gt; environment.&lt;/p&gt;

&lt;p&gt;First, let's deploy our frontend. Click &lt;code&gt;Add my first application&lt;/code&gt;, select a correct repository, &lt;code&gt;Docker&lt;/code&gt; as build mode and expose port &lt;code&gt;3000&lt;/code&gt;. The application root path is &lt;code&gt;/frontend&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next step: add a &lt;code&gt;MongoDB&lt;/code&gt; database - it will be used by our backend later on. You can do so by clicking on &lt;code&gt;Add&lt;/code&gt; button in Qovery Console in Environment.&lt;/p&gt;

&lt;p&gt;Now let's deploy our backend. Click &lt;code&gt;Add&lt;/code&gt; ‚Üí &lt;code&gt;Application&lt;/code&gt;, pick up &lt;code&gt;/backend&lt;/code&gt; as application root path, &lt;code&gt;8080&lt;/code&gt; port, and &lt;code&gt;Docker&lt;/code&gt; build mode.&lt;/p&gt;

&lt;p&gt;For the future connection to DB, let's add an alias named &lt;code&gt;DATABASE_URL&lt;/code&gt; that points to our Mongo database internal URL in our backend &lt;code&gt;Environment Variable&lt;/code&gt; settings:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YHggJGZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjh1gf92i7feako2fpig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YHggJGZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjh1gf92i7feako2fpig.png" alt="Image description" width="880" height="479"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Additionally, let's create an alias called &lt;code&gt;API_ROOT&lt;/code&gt; in our frontend application that points to our backend external URL:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N6Zcci13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuf8ugubrao052hz48nq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N6Zcci13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuf8ugubrao052hz48nq.png" alt="Image description" width="880" height="270"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This is it! Now we can deploy our production environment. After a few minutes, navigate to the frontend app, click on &lt;code&gt;Open&lt;/code&gt; - you should be redirected to the image gallery&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tk1lSS4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uyy1wn6aao02wx6wevn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tk1lSS4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uyy1wn6aao02wx6wevn.png" alt="Image description" width="880" height="691"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enable-preview-environments"&gt;
  &lt;/a&gt;
  Enable Preview Environments
&lt;/h3&gt;

&lt;p&gt;The next step to see the preview environment feature in action is to enable it for our backend application.&lt;/p&gt;

&lt;p&gt;To do so, navigate to &lt;code&gt;Environment&lt;/code&gt; ‚Üí &lt;code&gt;Settings&lt;/code&gt; ‚Üí &lt;code&gt;Preview Env&lt;/code&gt; and tick it for the backend app&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y-7l5ove--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aalevwhxkrxm8th41f28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y-7l5ove--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aalevwhxkrxm8th41f28.png" alt="Image description" width="880" height="646"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Great! The feature is enabled. To see it in action, let's edit our code in the backend app so that the list of images is fetched from the database instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-preview-environments"&gt;
  &lt;/a&gt;
  Testing Preview Environments
&lt;/h3&gt;

&lt;p&gt;Let's make a small update of our backend - let's connect to MongoDB and fetch images from there. Here are changes to the function we could introduce to make it happen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;databaseUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DATABASE_URL&lt;/span&gt;
    &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongodb://localhost:27017/test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imageSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;databaseUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;imageSchema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now create a new branch in our repository and create a pull request to our production (master branch) environment. Preview Environments feature will spin up a new environment for us so that we can safely test changes we just introduced!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7uSCLtnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8z9a6unj4zgjgj9atbe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7uSCLtnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8z9a6unj4zgjgj9atbe.png" alt="Image description" width="880" height="774"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now, when we display environments in our project, we will see that a new environment for the pull request is being deployed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1dZ4EThI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdg8dtj44r9vk0do92cv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1dZ4EThI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdg8dtj44r9vk0do92cv.png" alt="Image description" width="880" height="606"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;with all the resources we need! A database, backend, frontend - we can now test our changes in complete separation from the production without any manual setting up work:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pc1QzYw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pteka2uluhf2pgy9rxf8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pc1QzYw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pteka2uluhf2pgy9rxf8.png" alt="Image description" width="880" height="606"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview-environment-explained"&gt;
  &lt;/a&gt;
  Preview Environment Explained
&lt;/h3&gt;

&lt;p&gt;The Preview Environment feature can be enabled or disabled per app. It creates a complete copy of your environment so that you can test new changes from pull requests in separation. It deploys your databases, backend, and frontend applications to a  completely new environment once a pull request is opened. If you update your pull request, all new changes are also reflected in the new environment so that you can test them or fix problems during the review. What is great is that Qovery takes care of managing all environment variables for you as well, creates new aliases just as you had in your prod environment, so that everything is really tested separately and it all happens automagically. After the pull request is merged, Qovery automatically cleans up the preview environment to save your money.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-preview-environments-pt-ii"&gt;
  &lt;/a&gt;
  Testing Preview Environments PT II
&lt;/h3&gt;

&lt;p&gt;After a few minutes, your preview environment should be up and running. You can now navigate to the frontend app and click &lt;code&gt;Open&lt;/code&gt; - in the image gallery, you will see an empty list because we don't yet have any images in the database.&lt;/p&gt;

&lt;p&gt;You can add a few images manually by connecting to your mongo instance via CLI. The credentials can be found in the database overview:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x0164xD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqfhonsonx6yipnzfhfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x0164xD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqfhonsonx6yipnzfhfl.png" alt="Image description" width="590" height="412"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;After connecting, let's add images by executing the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;images&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
       &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IMG_4985.HEIC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3.9 MB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://images.unsplash.com/photo-1582053433976-25c00369fc93?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=512&amp;amp;q=80&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;},&lt;/span&gt;
       &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IMG_4985.HEIC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3.9 MB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://images.unsplash.com/photo-1582053433976-25c00369fc93?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=512&amp;amp;q=80&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;},&lt;/span&gt;
       &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IMG_4985.HEIC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3.9 MB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://images.unsplash.com/photo-1582053433976-25c00369fc93?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=512&amp;amp;q=80&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, after opening the frontend app in our preview environment, we will see all the images we put in the database! It looks like the feature is working well, so let's merge the PR:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kd2L02MA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xubg6kpwcx9qnal66g9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kd2L02MA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xubg6kpwcx9qnal66g9z.png" alt="Image description" width="880" height="585"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;What now happens is automatically after the PR merge, the preview environment is automatically cleaned up:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M9E1qSiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8mcqtug1mnj4ck8ztba4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M9E1qSiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8mcqtug1mnj4ck8ztba4.png" alt="Image description" width="880" height="607"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Great job! Thanks to Qovery Preview Environments, we managed to develop a new feature in a complete separation from our production, we tested it in a real environment deployed in the cloud, and we didn't have to spend any time preparing our environment for tests at all.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In the article, we quickly went through the process of creating a full-stack application with frontend, backend, and database. We enabled the Preview Environment feature to develop new features more quickly. We learned what the benefits of Preview Environments are, how to use them, and how to integrate them to day to day development workflow.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>node</category>
      <category>mongodb</category>
      <category>react</category>
    </item>
    <item>
      <title>Luos Get Startedd: tuto #3</title>
      <author>Emanuel Allely</author>
      <pubDate>Wed, 15 Dec 2021 09:08:17 +0000</pubDate>
      <link>https://dev.to/luos/luos-get-startedd-tuto-3-4537</link>
      <guid>https://dev.to/luos/luos-get-startedd-tuto-3-4537</guid>
      <description>&lt;p&gt;After the tutorials #1 and #2 of the Luos Get Started (&lt;a href="https://youtu.be/VcK-LJ-gnDo"&gt;https://youtu.be/VcK-LJ-gnDo&lt;/a&gt;). Here is the final one ‚Üí &lt;a href="https://youtu.be/3NsDadp1IYM"&gt;https://youtu.be/3NsDadp1IYM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Luos is an open-source and real-time orchestrator for distributed architectures, to easily design, test and deploy embedded applications (like Tesla, SpaceX and Dyson do!).&lt;/p&gt;

&lt;p&gt;If you have questions, join the Community: &lt;a href="https://www.luos.io"&gt;https://www.luos.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3NsDadp1IYM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>opensource</category>
      <category>embedded</category>
      <category>luos</category>
    </item>
    <item>
      <title>Why Every Developer should Learn Docker in 2022</title>
      <author>javinpaul</author>
      <pubDate>Wed, 15 Dec 2021 08:39:56 +0000</pubDate>
      <link>https://dev.to/javinpaul/why-every-developer-should-learn-docker-in-2022-2ndi</link>
      <guid>https://dev.to/javinpaul/why-every-developer-should-learn-docker-in-2022-2ndi</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/working-with-containers-docker-docker-compose?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3zoaZNWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.educative.io/cdn-cgi/image/f%3Dauto%2Cfit%3Dcover%2Cw%3D620/v2api/collection/10370001/6445473125629952/image/5769023684870144" alt="Working with Containers: Docker &amp;amp;amp; Docker Compose - Learn Interactively" width="620" height="310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello Devs, if you are wondering whether you should learn Docker in 2022 or not then you have come to the right place. I have been asking my readers to learn Docker since last year and also shared &lt;a href="(https://www.java67.com/2018/02/5-free-docker-courses-for-java-and-DevOps-engineers.html)"&gt;free Docker courses&lt;/a&gt; and &lt;a href="https://javarevisited.blogspot.com/2020/04/top-5-books-to-learn-docker-for-beginners.html"&gt;best Docker books&lt;/a&gt; to encourage them to learn Docker. &lt;/p&gt;

&lt;p&gt;Why have I been doing this? Because Docker is not just another tool, it's a game-changer, and I firmly believe that every Programmer, be it a Java developer, a C++ developer, or a Web Developer coding in JavaScript, all should learn Docker. &lt;/p&gt;

&lt;p&gt;The first and foremost reason is that Docker simplifies both the development and Deployment of Software projects, for example, you can deploy a &lt;a href="https://javarevisited.blogspot.com/2018/02/top-5-spring-microservices-courses-with-spring-boot-and-spring-cloud.html"&gt;Java Microservice&lt;/a&gt; in the same way as a node application once you wrap them in a container. &lt;/p&gt;

&lt;p&gt;Just like &lt;a href="https://medium.com/javarevisited/6-best-maven-courses-for-beginners-in-2020-23ea3cba89"&gt;Maven&lt;/a&gt; made it easy to maintain project dependencies, Docker takes it to another level by building applications and shipping them into containers.&lt;/p&gt;

&lt;p&gt;When you ship applications into the container, you don't need to deploy your application, OS, database, runtimes separately, instead you use them together as a container. &lt;/p&gt;

&lt;p&gt;This makes deployment and scaling easier. If you want to scale further, you can deploy more containers very quickly instead of setting up a whole new environment.&lt;/p&gt;

&lt;p&gt;Similarly, if you want to scale down, you can destroy containers quickly, and the best thing is you don't need to do that yourself, there are tools like &lt;a href="https://javarevisited.blogspot.com/2019/05/top-5-courses-to-learn-docker-and-kubernetes-for-devops.html#axzz6ehrUZiIN"&gt;Kubernetes&lt;/a&gt; which can manage and scale your Docker containers automatically.&lt;/p&gt;

&lt;p&gt;Docker is also a big help for programmers, especially when you are starting on a new application. It is often troublesome to set up your application in IDE and run it from your Windows or &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-linux-command-line-in-2020-best-and-free-f3ee4a78d0c0"&gt;Linux machine&lt;/a&gt; where you are doing development because of dependencies like on OS or a particular library, which is only available in specific versions of OS.&lt;/p&gt;

&lt;p&gt;With &lt;a href="https://medium.com/javarevisited/10-free-courses-to-learn-docker-and-devops-for-frontend-developers-691ac7652cee"&gt;Docker&lt;/a&gt;, you don't need that, you can just ship your application as a Docker image, and your team member can start and debug the application by running Docker images as a container. &lt;/p&gt;

&lt;p&gt;This makes the Developer's life easy. Docker also helps with &lt;a href="https://medium.com/javarevisited/13-best-courses-to-learn-devops-for-senior-developers-in-2020-a2997ff7c33c"&gt;DevOps&lt;/a&gt; because it simplifies deployment and scaling, and that's why Every DevOps engineer should learn Docker in 2022.&lt;/p&gt;

&lt;p&gt;These simplification of development, deployment, scalability, and DevOps are significant reasons to learn Docker in 2022, now that you know the crux of it let's go into a little bit more detail to understand why &lt;a href="https://javarevisited.blogspot.com/2018/02/10-free-docker-container-courses-for-Java-Developers.html"&gt;Docker&lt;/a&gt; is such an essential tool for programmers and DevOps professionals.&lt;/p&gt;

&lt;p&gt;With every organization going towards the Cloud, the container model is going to be even more critical in the coming years, and Docker and Kubernetes will play a significant role in deploying and running software from Cloud.&lt;/p&gt;

&lt;p&gt;That's why it's very, very important for both programmers and DevOps engineers to learn Docker and Kubernetes to do well on their current job and add an in-demand technical skill into their colorful resume.&lt;/p&gt;

&lt;p&gt;And if you are serious about learning Docker in 2022 then I highly recommend you to check out Maximilian Schwarzmuller's  &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdocker-kubernetes-the-practical-guide%2F"&gt;Docker &amp;amp; Kubernetes: The Practical Guide&lt;/a&gt;&lt;/strong&gt; course on Udemy This 23 course is now available for just $10 only on Udemy sale, which is like free considering its value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdocker-kubernetes-the-practical-guide%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9sgMsdAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/1mzlOUyPkzU/maxresdefault.jpg" alt="Docker &amp;amp;amp; Kubernetes: The Practical Guide best course" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-what-is-a-docker-image"&gt;
  &lt;/a&gt;
  1. &lt;strong&gt;What is a Docker image?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Docker image is like a snapshot of your application. It is an executable file (like a big tarball) that contains everything your application needs to run, including operating systems, third-party libraries, configuration, and any other dependencies you need to execute your application.&lt;/p&gt;

&lt;p&gt;You create a docker image by running the docker build command which takes your Dockerfile and creates a Docker image.&lt;/p&gt;

&lt;p&gt;`` $ docker build -t myapp:v1.0 .&lt;/p&gt;

&lt;p&gt;This command is building a Docker image from the docker file **myapp **which is present in the current directory. It has multiple layers stacked on top of each other and is represented as a single object. A docker image is created using a docker file, we will get to that in a bit.&lt;/p&gt;

&lt;p&gt;You can also see all the images using the docker image command.  You can further see &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdocker-mastery%2F"&gt;Docker Mastery: with Kubernetes +Swarm from a Docker Captain &lt;/a&gt;&lt;/strong&gt; course to learn more about essential Docker concepts and commands. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdocker-kubernetes-the-practical-guide%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RoIIg6o0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-XdysovKSUNs/XuW3jYV8uCI/AAAAAAAAf5w/0rCx4qYFT8UswPckI6WBYwxLpU1HPWEGQCLcBGAsYHQ/w400-h211/Docker%252Bimage%252Band%252BDocker%252Bcontainer%252BPluralsight%252Bcourse.png" alt="Why Developer should learn Docker" width="394" height="211"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-what-is-a-docker-container"&gt;
  &lt;/a&gt;
  2. &lt;strong&gt;What is a Docker container?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Docker Container is a running instance of your docker image. When you run your docker image using the $ docker run command then these containers are created. Y*ou can run as many containers as you want using the same docker image.*&lt;/p&gt;

&lt;p&gt;You can even run them on the same host as they are completely &lt;em&gt;separated&lt;/em&gt; from each other. This is truly great and allows you to run any command from the web as the effect will be isolated to only that Docker container. Many online interactive courses platform like &lt;a href="https://javarevisited.blogspot.com/2020/05/top-10-educative-courses-for-programmers.html"&gt;Educative&lt;/a&gt;, use Docker containers to allow users to run code from the browser.&lt;/p&gt;

&lt;p&gt;So, you can see that it's straightforward to use Docker. All you need is to make a start, download &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;, create a Docker image by reusing an existing one from the &lt;a href="https://hub.docker.com/"&gt;Docker hub&lt;/a&gt;, and start running your application inside Docker container.&lt;/p&gt;

&lt;p&gt;``$ docker run -p 8084:8084 -d myapp:v1.0&lt;/p&gt;

&lt;p&gt;This command will start the docker container which will listen on port 8084. It will also be running in the background because we started the container in detached mode ( -d  option).&lt;/p&gt;

&lt;p&gt;Now when you run the docker ps command you can see this container running on the host/&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.java67.com/2019/03/5-free-devops-courses-to-learn-jenkins.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6kAg9_QK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-rKWkeYq8B8o/XuW2fmcM9pI/AAAAAAAAf5Y/a_i_O5jtx5MeyXW1YDUyf1V2i_6MS2bSQCLcBGAsYHQ/w400-h308/Docker%252Bcontainer%252Bon%252BLinux%252BUdemy%252BCourse.png" alt="why Java developer should learn Docker" width="398" height="308"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-what-is-difference-between-virtual-machine-and-docker"&gt;
  &lt;/a&gt;
  3. What is difference between Virtual Machine and Docker?
&lt;/h3&gt;

&lt;p&gt;Many developers often confuse between a VM and a Docker container. Let me tell you that both of them are different things.&lt;/p&gt;

&lt;p&gt;They may look similar, but the most crucial difference between a Virtual Machine and Docker is that the underlying physical host and its resources are shared in containers but not in a Virtual Machine.&lt;/p&gt;

&lt;p&gt;Since a picture is worth a thousand words, here is a diagram that clearly shows the difference between a Virtual machine and a &lt;a href="https://medium.com/javarevisited/top-15-online-courses-to-learn-docker-kubernetes-and-aws-for-fullstack-developers-and-devops-d8cc4f16e773"&gt;Docker&lt;/a&gt; or any other container:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.java67.com/2018/02/5-free-docker-courses-for-java-and-DevOps-engineers.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2rMJTbJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-7LLnVOvSriY/XuW0iPFjJjI/AAAAAAAAf5I/yYICo2gtsMcjidkSYsLH6IxSejWuOU7CwCLcBGAsYHQ/w400-h200/Docker%252BContainer%252Bvs%252BVirtual%252BMachines.png" alt="Docker vs Virtual Machine" width="395" height="200"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-how-do-you-use-docker"&gt;
  &lt;/a&gt;
  4. &lt;strong&gt;How do you use Docker?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Now the question comes, how can programmers use Docker? Well, to use Docker you need to install it. Once you install Docker, you can execute docker commands to create a Docker file that contains the instructor to create a Docker image.&lt;/p&gt;

&lt;p&gt;Once you have a Docker image you can run them using the $ docker run command and it will create Docker containers running your application.&lt;/p&gt;

&lt;p&gt;I use Docker to run our apps which can only be run on Linux servers, earlier I used Virtual Box but with Docker I don't really need it. &lt;/p&gt;

&lt;p&gt;You can further see &lt;a href="https://www.educative.io/courses/docker-for-developers?affiliate_id=5073518643380224"&gt;Docker for Developers&lt;/a&gt; course on Educative to learn more about how developers can use Docker to make their life simple. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/docker-for-developers?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJ8FYBIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.educative.io/cdn-cgi/image/f%3Dauto%2Cfit%3Dcover%2Cw%3D620/v2api/collection/10370001/6598398019371008/image/5016866440871936" alt="Docker for Developers - Learn Interactively course" width="620" height="310"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-why-do-developers-and-devops-use-docker"&gt;
  &lt;/a&gt;
  5. Why do Developers and DevOps use Docker?
&lt;/h3&gt;

&lt;p&gt;A couple of years back, when the business needed other applications, the &lt;a href="https://javarevisited.blogspot.com/2018/09/10-devops-courses-for-experienced-java-developers.html"&gt;DevOps&lt;/a&gt; or infra team would raise a request to purchase new servers and buy a server without knowing the performance requirements of the new application.&lt;/p&gt;

&lt;p&gt;This often results in a wastage of money and resources, which could be used for other apps. They try to solve this problem by sharing a single host with multiple applications by running them on different participation, but that also put some management and operational overhead.&lt;/p&gt;

&lt;p&gt;Then comes a wave of Virtualization and Virtual machines or VM, which allowed &lt;a href="https://medium.com/javarevisited/top-5-online-courses-to-become-a-devops-engineer-in-2020-764f5e60c2b"&gt;DevOps engineers&lt;/a&gt; to run multiple applications on the same physical resource but as a completely different server like you have separate runtime space and name, but there was a potential drawback.&lt;/p&gt;

&lt;p&gt;Every Virtual machine required an entire OS to run. Every OS needs its own CPU, RAM, etc. to run, it needs patching and licensing, which in turn increases cost and resiliency. &lt;/p&gt;

&lt;p&gt;Then comes the container model or Docker model, which was aimed to address the shortcomings of the Virtual Machine and mitigate the wastage of resources by sharing OS, CPU, and RAM and so far its most successful model.&lt;/p&gt;

&lt;p&gt;It helps you scale your application on-demand as Docker makes the deployment easy and Kubernetes makes the deployment of Docker container at scale easier (see **&lt;a href="https://www.educative.io/courses/practical-guide-to-kubernetes?affiliate_id=5073518643380224"&gt;A Practical Guide to Kubernetes&lt;/a&gt; **course) on Cloud Platforms like AWS, Azure, and Google Cloud Platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Flearn-docker%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--po9esdJj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-ecK4k9DB_AU/X_G9JaF68MI/AAAAAAAAlYg/pLse1PgHc3kkRjs00MBb_6EF0PS-QZoHgCLcBGAsYHQ/w400-h259/Why%252Bevery%252Bprogrammer%252Bshould%252Blearn%252BDocker.png" alt="why every developer should learn Docker" width="400" height="259"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-how-does-docker-helps-developers"&gt;
  &lt;/a&gt;
  6. How does Docker helps Developers?
&lt;/h3&gt;

&lt;p&gt;The most significant benefit of Docker from a programmer's or developer's perspective is that it makes sure that the execution environment is the same for all developers and all servers I mean, including UAT, QA, Production.&lt;/p&gt;

&lt;p&gt;The good thing is that any member of the team can set up the project quickly, with no need to mess with config, install libraries, set up dependencies, etc. In simple language, Docker is a platform that enables us to develop, deploy, and run applications with containers.&lt;/p&gt;

&lt;p&gt;You can further check &lt;strong&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fdocker-getting-started"&gt;Getting Started with Docker&lt;/a&gt;&lt;/strong&gt; By Nigel Poulton on Pluralsight to learn more about what benefits Docker offers to web developers. This diagram highlights some of the major benefits Docker offers to programmers and developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fdocker-getting-started"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S7ZLR1my--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-B01GYFxVm84/XuW3jQICFCI/AAAAAAAAf50/oFzEIcZPlKoG7n6N7kzwuW-EDzZ5-GnhgCLcBGAsYHQ/w400-h187/Docker%252Bbenefit%252Bfor%252BWeb%252Bdevelopers%252Bpluralsight%252Bcourse.png" alt="best Pluralsight course to learn Docker" width="391" height="187"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By the way, you will need a Pluralsight membership to join this course which costs around $29 per month or $199 per year &lt;strong&gt;(40% discount now&lt;/strong&gt;). I highly recommend this subscription to all programmers as it provides instant access to more than 7000+ online courses to learn any tech skill. Alternatively, you can also use their &lt;strong&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Flearn"&gt;10-day-free-trial&lt;/a&gt;&lt;/strong&gt; to watch this course for FREE.&lt;/p&gt;




&lt;p&gt;That's all about &lt;strong&gt;why a developer should learn Docker in 2022.&lt;/strong&gt; As I said, Docker really simplifies how you develop and deploy your code, and run your application. Shipping your application into a container makes deployment and scaling smooth and drives automation. It makes DevOps easy and makes your production environment robust.&lt;/p&gt;

&lt;p&gt;With a more significant push to Cloud every year, the container model is going to be the default model for software development, and Docker and Kubernetes will play an essential role in the near future. &lt;/p&gt;

&lt;p&gt;That's why every Developer and DevOps engineer should learn Docker to do well in their current job and also add an in-demand skill on their resume to get a better job.&lt;/p&gt;

&lt;p&gt;Other &lt;strong&gt;DevOps Articles and Courses&lt;/strong&gt; you may like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://dev.to/javinpaul/top-10-courses-to-learn-docker-and-kubernetes-for-programmers-4lg0"&gt;10 Docker and Kubernetes Courses for Programmers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/hackernoon/the-2018-devops-roadmap-31588d8670cb"&gt;The DevOps Developer RoadMap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-devops-for-experienced-programmers-d93b666db151"&gt;My favorite courses to learn DevOps for experienced&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-amazon-web-services-aws-cloud-in-2020-best-and-free-317f10d7c21d"&gt;10 Free Courses to learn AWS and Cloud for Programmers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-7-courses-to-learn-selenium-for-java-and-c-developers-to-learn-automation-testing-free-and-e91637cd9622"&gt;7 Free Courses to learn Selenium for DevOps&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.sg/2018/02/10-free-docker-container-courses-for-Java-Developers.html"&gt;10 Free Docker Courses for Java and DevOps Professionals&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/09/top-5-jenkins-courses-for-java-and-DevOps-Programmers.html"&gt;Top 5 Courses to Learn Jenkins for Automation and DevOps&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/7-free-online-courses-to-learn-kubernetes-in-2020-3b8a68ec7abc"&gt;7 Free Online Courses to learn Kubernetes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/05/top-5-amazon-web-services-aws-courses-for-beginners-and-experienced-programmers.html"&gt;My favorite courses to learn Amazon Web Service&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/13-best-courses-to-learn-devops-for-senior-developers-in-2020-a2997ff7c33c"&gt;13 Best DevOps Courses for Senior Developers &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/top-5-books-to-learn-devops-for-developers.html"&gt;Top 5 Books to learn DevOps for Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-15-online-courses-to-learn-docker-kubernetes-and-aws-for-fullstack-developers-and-devops-d8cc4f16e773"&gt;15 online Courses to learn Docker, Kubernetes, and AWS &lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you also think that &lt;em&gt;every developer or Programmer should learn Docker in 2022&lt;/em&gt;, then please share it with your friends and colleagues. Together we'll help each other to become better programmers and developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you are want to learn Docker and Kubernetes in-depth and looking for the best online courses then you can also check out Stephen Grider's &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fdocker-and-kubernetes-the-complete-guide%2F"&gt;Docker and Kubernetes: The Complete Guide&lt;/a&gt;&lt;/strong&gt; course on Udemy. It's a great course to learn both of these tools in 2022.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>programming</category>
      <category>developer</category>
    </item>
    <item>
      <title>ES6 - A beginners guide - Promises and Fetch</title>
      <author>Stefan Wright</author>
      <pubDate>Wed, 15 Dec 2021 08:00:48 +0000</pubDate>
      <link>https://dev.to/stefanwrightcodes/es6-a-beginners-guide-promises-and-fetch-24ln</link>
      <guid>https://dev.to/stefanwrightcodes/es6-a-beginners-guide-promises-and-fetch-24ln</guid>
      <description>&lt;h2&gt;
  &lt;a href="#promises-and-fetch"&gt;
  &lt;/a&gt;
  Promises and Fetch
&lt;/h2&gt;

&lt;p&gt;This time I am going to cover ES6's introduction of Promise and Fetch as native JavaScript functionality in the browser. A lot of dev's will use 3rd party libraries such as Axios, SuperAgent, or jQuery although it might not always be necessary to do so and it may just add bloat to your projects. We'll start by looking at ES6 Promises, before heading on over to details about Fetch&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#promises"&gt;
  &lt;/a&gt;
  Promises
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-promise"&gt;
  &lt;/a&gt;
  What is a Promise?
&lt;/h3&gt;

&lt;p&gt;Much like in the real world, a promise is the result of saying we will do something and give something back. Let's say we wanted to run this piece of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://www.json.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above, our console.log will result in showing undefined because we will simply be executing line 3 immediately after line 2, regardless of how quick that makeRequest function runs, it will never be quicker than the execution of the following line. JavaScript Promises give us a method of using 3 different states whilst waiting for something to complete, such as an AJAX request. The three states were can use are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;unresolved&lt;/code&gt; - This is out "waiting" phase, if we were to check in on the value of a Promise periodically using a setTimeout() or similar we would see this until the promise either completed or failed&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;resolved&lt;/code&gt; - This is our "finished" state, we have finished getting the data, the promise is fulfilled and something is ready to be returned.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rejected&lt;/code&gt; - This is our "error" state, something went wrong, this would be used to trigger some form of error handling.
Off the back of these states we have two possible callbacks that we can use:&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;then&lt;/code&gt; - This can be used after a &lt;code&gt;resolved&lt;/code&gt; state is triggered, it tells our code what to do next&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;catch&lt;/code&gt; - Much like with a try/catch loop, this is where we perform our error handling
### How about an example?
The following examples, can easily be plugged straight into the Dev Tools of your browser and run from the Console screen. Let's get started:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Uh oh! we got an error, but why? well, if you run the above code you should see an error similar to &lt;code&gt;Uncaught TypeError: Promise resolver undefined is not a function&lt;/code&gt;. This error response is telling us that the browser knows what a Promise is, but we haven't told it what to do in order to resolve the promise. It's actually really simple to fix. Let's fix it now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have created a promise, if you run the above code you'll see that it gives a response similar to this:&lt;br&gt;
&lt;code&gt;Promise¬†{&amp;lt;pending&amp;gt;}[[Prototype]]: Promise[[PromiseState]]: "pending"[[PromiseResult]]: undefined&lt;/code&gt;. So now we have created a promise, it doesn't do much right now though. When we define a promise we need to handle how/when its resolved and rejected, luckily the &lt;code&gt;Promise&lt;/code&gt; had two built in arguments that we can use, these are &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt;. Let's have a look at that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promiseResolve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above you'll see we create a new &lt;code&gt;Promise&lt;/code&gt;, we include our two arguments in our inner function. We then call &lt;code&gt;resolve()&lt;/code&gt; inside our function in order to complete the execution. If you run the code above the browser will output something like: &lt;code&gt;Promise¬†{&amp;lt;fulfilled&amp;gt;: undefined}&lt;/code&gt;. Likewise we can do the same with &lt;code&gt;reject()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promiseReject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait! we got a warning, we have the following returned &lt;code&gt;Promise¬†{&amp;lt;rejected&amp;gt;: undefined}&lt;/code&gt; this is expected, however we also got &lt;code&gt;Uncaught (in promise) undefined&lt;/code&gt; because we didn't handle the rejection properly. Let's look at our callbacks, they'll help us handle both state calls above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-callbacks"&gt;
  &lt;/a&gt;
  Using callbacks
&lt;/h3&gt;

&lt;p&gt;ES6 Promises give us two built in callback methods as mentioned above they are &lt;code&gt;.then()&lt;/code&gt; and &lt;code&gt;.catch()&lt;/code&gt;. We can use &lt;code&gt;.then()&lt;/code&gt; when we resolve a promise to instruct our code on the next action, and the parameter in the function will automatically take the value that was returned in our promise. Let's look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promiseResolve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Promise resolved&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;promiseResolve&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolvedValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolvedValue&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Still resolved&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how in our first &lt;code&gt;.then()&lt;/code&gt; we have a parameter for our function, we then use that parameter in the return of the arrow function, however rather than giving us an error about the variable being undefined the above code will actually give use the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise resolved
Still resolved
Promise¬†{&amp;lt;fulfilled&amp;gt;: undefined}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So as we can see &lt;code&gt;resolvedValue&lt;/code&gt; actually gives us the value we passed back in the resolve. We're going to revisit this later in the article when we look at using &lt;code&gt;fetch&lt;/code&gt; to pull remote data. Now on to error handling, let's jump straight into an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promiseReject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Promise rejected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;promiseReject&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Promise resolved&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Still resolved&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As with the above, we can now see that our catch is including a parameter and our console.log message contains &lt;code&gt;Promise rejected&lt;/code&gt; but we do not output &lt;code&gt;Promise resolved&lt;/code&gt; or &lt;code&gt;Still resolved&lt;/code&gt; and this is because we fired the &lt;code&gt;reject()&lt;/code&gt; line in out promise.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-asyncronous-callbacks"&gt;
  &lt;/a&gt;
  Using asyncronous callbacks
&lt;/h3&gt;

&lt;p&gt;We can use asyncronous callback in our ES6 Promises, this can help to simulate what would happen when making an AJAX call or similar to pull data. In the example below we will wait for 5 seconds before resolving our promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promiseAsync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Starting Promise...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Promise resolved&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;promiseAsync&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Promise rejected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use a library like jQuery to make a request and using a promise we can then take an action when it completes, take a look below, we will add a log to say we have started, then we'll fetch a JSON sample of blog posts in a promise, and then log that response&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promiseAsync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Starting promise&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/posts/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;promiseAsync&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Promise rejected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the code above gives us &lt;code&gt;Starting promise&lt;/code&gt; and then &lt;code&gt;Array(100)&lt;/code&gt; in the dev tools. I ran this on JSFiddle so that I could ensure jQuery was included.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-about-fetch"&gt;
  &lt;/a&gt;
  So what about Fetch?
&lt;/h2&gt;

&lt;p&gt;Fetch is a new feature included with ES6, it provides us to combine a network request with a promise in a super simple form! It does have its limitations though, and i'll go into them in a bit, but first...you know what's coming...an example!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above will simply give us a pending Promise in the browser, that's no use to us in this state. With a Promise, as above, we would have to supply a function to handle the resolve/reject conditions, fetch does this for us though. All we need to do is supply callbacks&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, we're getting there, we now get the following output when we use this in the Console window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise¬†{&amp;lt;pending&amp;gt;}
Response¬†{type: 'cors', url: 'https://jsonplaceholder.typicode.com/posts/', redirected: false, status: 200, ok: true,¬†‚Ä¶}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This doesn't give us the actual response data, just some metadata. If we want to extract the actual information from jsonplaceholder we are going to pass this through a different function first, let's take a look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we are first using &lt;code&gt;.json()&lt;/code&gt; in order to take the response stream and render the response body text as JSON (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/json"&gt;MDN Documentation&lt;/a&gt;), we then call &lt;code&gt;.then()&lt;/code&gt; again, this time taking in the return value from &lt;code&gt;response.json()&lt;/code&gt; and then passing that to &lt;code&gt;console.log&lt;/code&gt;. This gives us the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise¬†{&amp;lt;pending&amp;gt;}
(100)¬†[{‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#but-stefan-you-mentioned-some-downfalls-of-fetch"&gt;
  &lt;/a&gt;
  But Stefan, you mentioned some downfalls of Fetch??
&lt;/h2&gt;

&lt;p&gt;That's right, I did. I mentioned that we can use &lt;code&gt;.then()&lt;/code&gt; and &lt;code&gt;.catch()&lt;/code&gt; with Fetch, however the &lt;code&gt;.catch()&lt;/code&gt; handler isn't always triggered when you expect it. For example, if you go to a page/endpoint that does not exist and gives you an HTTP404 response you won't actually hit the &lt;code&gt;.catch()&lt;/code&gt; code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;badUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts1321654646186/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;badUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SUCCESS: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ERROR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above will give ue the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise¬†{&amp;lt;pending&amp;gt;}
GET https://jsonplaceholder.typicode.com/posts1321654646186/ 404 (Not Found)
SUCCESS: Response¬†{type: 'cors', url: 'https://jsonplaceholder.typicode.com/posts1321654646186/', redirected: false, status: 404, ok: false,¬†‚Ä¶}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see we got a 404 response, but the output is from our &lt;code&gt;.then()&lt;/code&gt; callback. Fetch is designed in such a way that you would only hit the &lt;code&gt;.catch()&lt;/code&gt; callback is there was a network level error (such as a failed DNS lookup). The following example would actually go to the &lt;code&gt;.catch()&lt;/code&gt; callback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;badUrlHost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode12345.com/posts/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;badUrlHost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SUCCESS: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ERROR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time our console gives us:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise¬†{&amp;lt;pending&amp;gt;}
GET https://jsonplaceholder.typicode12345.com/posts/ net::ERR_TUNNEL_CONNECTION_FAILED
ERROR TypeError: Failed to fetch at &amp;lt;anonymous&amp;gt;:2:1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is ok, but we still want to handle HTTP4XX or HTTP5XX errors gracefully&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#there-is-a-way-around-this"&gt;
  &lt;/a&gt;
  There is a way around this
&lt;/h3&gt;

&lt;p&gt;There are generally a couple of suggested "workarounds" for working with these kinds of requests. If you NEED to use the Fetch API, then the following kind of code construction would be better for you:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;badUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts1321654646186/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;badUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm an error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Response Data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ERROR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above we are now throwing an exception because the response metadatas property for &lt;code&gt;ok&lt;/code&gt; was false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise¬†{&amp;lt;pending&amp;gt;}
GET https://jsonplaceholder.typicode.com/posts1321654646186/ 404 (Not Found)
ERROR Error: I'm an error
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the metadata we could use either &lt;code&gt;.ok&lt;/code&gt; or &lt;code&gt;.status&lt;/code&gt; if we wanted to handle errors differently for HTTP4xx errors as opposed to HTTP5XX errors (for example), or we could use both for generic error handling, such as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;badUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts1321654646186/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;badUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Response Data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ERROR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we see the following error output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise¬†{&amp;lt;pending&amp;gt;}
GET https://jsonplaceholder.typicode.com/posts1321654646186/ 404 (Not Found)
ERROR Error: 404 - Not Found
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I mentioned that there were a couple of suggestions for workarounds, alternatives to the above would be using 3rd Party Libraries/Tools such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jQuery (&lt;a href="https://jquery.com"&gt;https://jquery.com&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Axios (&lt;a href="https://axios-http.com/docs/intro"&gt;https://axios-http.com/docs/intro&lt;/a&gt;) - This is my personal favourite and I use it in my own projects&lt;/li&gt;
&lt;li&gt;SuperAgent (&lt;a href="https://github.com/visionmedia/superagent"&gt;https://github.com/visionmedia/superagent&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You could also just use XMLHttpRequest which has long been baked into browsers as default functionality, information on that can be found on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"&gt;MDN here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Creating markdown blog or docs generator with js (serverless).</title>
      <author>SHUBHAM </author>
      <pubDate>Wed, 15 Dec 2021 07:55:20 +0000</pubDate>
      <link>https://dev.to/shubham_ingale/creating-markdown-blog-or-docs-generator-with-js-serverless-2e6b</link>
      <guid>https://dev.to/shubham_ingale/creating-markdown-blog-or-docs-generator-with-js-serverless-2e6b</guid>
      <description>&lt;p&gt;Hey there everyone ,&lt;br&gt;
If you've created blog on dev.to , you're might be familiar with blog generator with md.&lt;br&gt;
I'll share how you can create that type of generator with only js.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#libraries-to-use"&gt;
  &lt;/a&gt;
  libraries to use.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/showdownjs/showdown"&gt;Showdown.js&lt;/a&gt; @showdownjs&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sgi-capp-at2.github.io/"&gt;Markdown.css by sindresorhus&lt;/a&gt; @markdown-css&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#showdownjs"&gt;
  &lt;/a&gt;
  showdown.js
&lt;/h2&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hbOe4h0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/showdownjs/logo/master/dist/logo.readme.png" class="article-body-image-wrapper"&gt;&lt;img alt="showdownjs-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hbOe4h0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/showdownjs/logo/master/dist/logo.readme.png" width="251" height="49"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Showdownjs is a library which converts markdown code into HTML code.&lt;br&gt;
From&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# header&lt;/span&gt;
&lt;span class="gs"&gt;**Bold**&lt;/span&gt;
&lt;span class="ge"&gt;_italic_&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;header&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;bold&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;italic&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-use-showdownjs"&gt;
  &lt;/a&gt;
  How to use showdown.js
&lt;/h3&gt;

&lt;p&gt;You should visit to &lt;a href="https://github.com/showdownjs/showdown"&gt;official docs&lt;/a&gt; for advanced level tools of library.&lt;br&gt;
I'll show you how you can convert the md into html with GitHub flavour of markdown.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;my_markdown_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#mdinput&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;converter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;showdown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;converter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;converted_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;converter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;my_markdown_input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// converted_text will be variable having html code &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#markdown-css"&gt;
  &lt;/a&gt;
  Markdown css
&lt;/h2&gt;

&lt;p&gt;The style created by sindresorhus which looks like github markdown body.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-markdown-css-"&gt;
  &lt;/a&gt;
  How to use markdown css ?
&lt;/h3&gt;

&lt;p&gt;The markdown css by sindresorhus is very simple to use. You just have to add classname "markdown-body" and it will convert html into GitHub like markdown styled html.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"markdown-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://sgi-capp-at2.github.io/blogs/Creating%20markdown%20blog%20or%20docs%20generator%20with%20js%20(serverless)./#how-to-use-markdown-css-"&gt;..Read More&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>markdown</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>GitHub Students Developer Pack: Get $10000+ benefits</title>
      <author>Nomadevüíªüî±</author>
      <pubDate>Wed, 15 Dec 2021 07:34:15 +0000</pubDate>
      <link>https://dev.to/thenomadevel/github-students-developer-pack-get-10000-benefits-2i84</link>
      <guid>https://dev.to/thenomadevel/github-students-developer-pack-get-10000-benefits-2i84</guid>
      <description>&lt;p&gt;Hello, techies  &lt;a href="https://twitter.com/thenomadevel"&gt;Nomadev &lt;/a&gt; here, back with another blog on tech. Today I will share what is possibly the best deal in tech, the  &lt;a href="https://education.github.com/pack"&gt;&lt;strong&gt;GitHub Student Developer Pack&lt;/strong&gt;&lt;/a&gt;. If you are wondering it's clickbait, the answer is a big no. GitHub Student Developer Pack is one of the most underrated and the most useful free developer pack of tools and resources a student can have. Before moving further first let's know about GitHub first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-github"&gt;
  &lt;/a&gt;
  What is GitHub?
&lt;/h2&gt;

&lt;p&gt;It is a web-based version-control and collaboration platform for software developers. GitHub facilitates social coding by providing a web interface to the Git code repository and management tools for collaboration. GitHub is owned by &lt;strong&gt;Microsoft&lt;/strong&gt; and it is well known for being the best code hosting platform for version control and collaboration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-student-developer-pack"&gt;
  &lt;/a&gt;
  GitHub Student Developer Pack
&lt;/h2&gt;

&lt;p&gt;GitHub Student Developer Pack is a super collection of all the things you need to learn how to code. This is made for the student developers to help them to have hands-on experience in various technologies. As for most students, real-world tools can be cost-prohibitive. GitHub created Student Developer Pack with some of their partners to help students to learn to code effectively for &lt;strong&gt;free&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2tyy4RVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639552850180/_5p_LFPZWD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2tyy4RVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639552850180/_5p_LFPZWD.png" alt="gsdp.png" width="880" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-it"&gt;
  &lt;/a&gt;
  How to get it?
&lt;/h2&gt;

&lt;p&gt;You have to go to GitHub Education and select the Students section, there you will find an option named Get your Student Developer Pack.&lt;br&gt;
Or you can get there directly -  &lt;a href="https://education.github.com/pack"&gt;GitHub Student Developer Pack&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;To be eligible for the GitHub Student Developer Pack, you must:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be currently enrolled in a degree or diploma-granting course of studies such as a high school, secondary school, college, university, homeschool, or similar educational institution&lt;/li&gt;
&lt;li&gt;Have a verifiable school-issued email address or upload documents that prove your current student status&lt;/li&gt;
&lt;li&gt;Have a GitHub user account&lt;/li&gt;
&lt;li&gt;Be at least 13 years old&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;In most of the cases, they will only ask your student email id&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-the-pack"&gt;
  &lt;/a&gt;
  What's in the pack?
&lt;/h2&gt;

&lt;p&gt;GitHub Student Developers Pack contains many real-world tools and numerous benefits. Here are some top offers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canva"&gt;
  &lt;/a&gt;
  Canva
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FhNOk9_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639554822848/1iWwoPHed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FhNOk9_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639554822848/1iWwoPHed.png" alt="canva.png" width="300" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Canva, anyone can create professional-looking graphics and designs. Featuring thousands of templates and an easy-to-use editor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Free 12 month subscription of Canva's Pro tier.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jetbrains"&gt;
  &lt;/a&gt;
  JETBRAINS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---6WNWK0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559300103/k7pRLwlyX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---6WNWK0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559300103/k7pRLwlyX.png" alt="jet.png" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;About JetBrains - &lt;/p&gt;

&lt;p&gt;Professional desktop IDEs: IntelliJ IDEA, PyCharm, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benifit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A free subscription for students, to be renewed annually.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#microsoft-azure"&gt;
  &lt;/a&gt;
  Microsoft Azure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AuZZQXCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559287643/Qq-IcKSgk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AuZZQXCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559287643/Qq-IcKSgk.png" alt="azure.png" width="284" height="178"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Access to Microsoft Azure cloud services and learning resources ‚Äì no credit card required&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benifit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Free access to 25+ Microsoft Azure cloud services plus $100 in Azure credit.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bootstrap-studio"&gt;
  &lt;/a&gt;
  Bootstrap Studio
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7QfVZr4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559425415/Y2dvsWsyE.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7QfVZr4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559425415/Y2dvsWsyE.jpeg" alt="boot.jfif" width="389" height="129"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bootstrap Studio is a powerful desktop app for creating responsive websites using the Bootstrap framework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benifit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A free license for Bootstrap Studio while you are a student.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#digitalocean"&gt;
  &lt;/a&gt;
  DigitalOcean
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DlJze93---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559439674/rnqahzlx0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DlJze93---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559439674/rnqahzlx0.png" alt="digi.png" width="323" height="156"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simple cloud hosting, built for developers&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benifit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;$100 in platform credit for new users.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  GitHub
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--brLy1oR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559462347/0qyCG_tRrp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--brLy1oR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559462347/0qyCG_tRrp.png" alt="github.png" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Powerful collaboration, code review, and code management&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benifit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Free GitHub Pro while you are a student.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#datacamp"&gt;
  &lt;/a&gt;
  DataCamp
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f9nqRgVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559494167/iBXTW8QPs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f9nqRgVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559494167/iBXTW8QPs.png" alt="datacamp.png" width="367" height="137"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DataCamp helps companies and individuals make better use of data. Our users build data fluency while learning from the world‚Äôs top data scientists.&lt;/p&gt;

&lt;p&gt;Benefit&lt;/p&gt;

&lt;p&gt;Free 3-month individual subscription for students.&lt;/p&gt;




&lt;p&gt;and much more in the list, you can see explore them from here -  &lt;a href="https://education.github.com/pack"&gt;GitHub Education&lt;/a&gt; and get your real-time tools ready.&lt;/p&gt;

&lt;p&gt;I hope you liked it and for other such information make sure to follow me on  &lt;a href="https://twitter.com/thenomadevel"&gt;Twitter&lt;/a&gt; and here also.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/thenomadevel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oXBZZGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638859846607/CmXZ9RBvb.jpeg" alt="Twitter.jpg" width="880" height="418"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And if you want to appreciate my work you can  &lt;a href="https://www.buymeacoffee.com/nomadevel"&gt;buy me a coffee&lt;/a&gt;, &lt;strong&gt;Your appreciation is my motivation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/nomadevel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Vno0upf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637869195331/r4SfPP57h.jpeg" alt="coffee.jfif" width="880" height="441"&gt;&lt;/a&gt; &lt;/p&gt;

</description>
      <category>github</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top Reasons to Choose React as a Frontend</title>
      <author>Bhavik Sadhu</author>
      <pubDate>Wed, 15 Dec 2021 07:21:16 +0000</pubDate>
      <link>https://dev.to/bhaviksadhu/top-reasons-to-choose-react-as-a-frontend-47ml</link>
      <guid>https://dev.to/bhaviksadhu/top-reasons-to-choose-react-as-a-frontend-47ml</guid>
      <description>&lt;p&gt;Do you have a question about whether choose React for your project? Here's a brief review of the Top Reasons to Choose React as a Frontend. This is enough to make a choice.&lt;/p&gt;

&lt;p&gt;There are a lot of frameworks and libraries that may be used to develop frontend applications. Some are not excellent. &lt;a href="https://www.techavidus.com/react-js-development?utm_source=referral&amp;amp;utm_devto=devto&amp;amp;utm_campaign=content_sharing"&gt;React&lt;/a&gt; is among the most well-known and extensively utilized libraries (it's not an actual framework) for front-end development. React, among the fastest-growing and most well-known frontend library has been steadily growing in popularity in the world of developers and business owners. Due to many of its advantages, it could soon be the most popular web development tool.&lt;/p&gt;

&lt;p&gt;What are the reasons to choose React? The most important thing is when is the right time to utilize React? Let's take an overview of the benefits of React and its use cases.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-reactjs"&gt;
  &lt;/a&gt;
  What is ReactJS?
&lt;/h1&gt;

&lt;p&gt;React can be described as a declarative, efficient, and adaptable JavaScript library that is used by software developers to create user interfaces. It allows you to build a speedy simple, scalable, and simple frontend for web-based applications.&lt;/p&gt;

&lt;p&gt;The development of React becomes a strategy to problems that have been typically encountered whilst developing JavaScript applications. As applications grew in both complexity and size the issues became more frequent. The fact that React was designed and heavily utilized by Facebook to solve their own problems only adds to the library's reliability and effectiveness in tackling similar issues encountered by other projects. The React team is dedicated to making changes that are positive to ease the lives of the programmers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-reasons-to-choose-reactjs"&gt;
  &lt;/a&gt;
  The Reasons to choose ReactJS
&lt;/h1&gt;

&lt;p&gt;If you were to ask us which front-end technology would be the most to develop software in 2021, we'd most likely say React! It's comparable to Angular with regard to speed, flexibility in development, and its popularity. Vue.js is lighter than its competitors, but it's not a huge benefit in actual use. It sounds great, however, but there may be lots greater to React beyond this!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-easy-to-learn"&gt;
  &lt;/a&gt;
  1. Easy to learn
&lt;/h2&gt;

&lt;p&gt;The reason, as compared with different famous front-end frameworks, consisting of Angular and Vue is much greater easy to learn. If technology is tough to learn, you will probably discover it tough to begin. As it is in our human nature. We tend to avoid things that are difficult to learn.&lt;/p&gt;

&lt;p&gt;Since react is a straightforward framework that is simple to learn and begin using with, big brands and large companies tend to prefer it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-rich-userinterfaces"&gt;
  &lt;/a&gt;
  2. Rich user-interfaces
&lt;/h2&gt;

&lt;p&gt;The design inside the interface for users of the application performs a vital characteristic. If the interface for users is not well-designed, it reduces the chance of an application achieving success.&lt;/p&gt;

&lt;p&gt;If your app's web interface is groovy and excellent that users love, they'll be thrilled to make use of your app. Therefore, creating excellent user interfaces is vital for business success.&lt;/p&gt;

&lt;p&gt;Thus, creating user interfaces with rich features is kind of required for an application to be able to survive and flourish.&lt;br&gt;
There's good news that React is able to create such top-quality, rich user interfaces by using its declarative components. This is the reason we are at our next step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-faster-development"&gt;
  &lt;/a&gt;
  3. Faster development
&lt;/h2&gt;

&lt;p&gt;Increase your productivity by making use of reused parts and developing tools. The efficiency of developers is crucial since if you are able to complete tasks quickly you will earn more money in a shorter time is not unusual to place to target startups and businesses.&lt;/p&gt;

&lt;p&gt;If it takes a long quantity of time to create something simple and you're losing money, it's a waste of time. However, if you can get your product out quickly, you will make money quickly and your customers will be satisfied.&lt;/p&gt;

&lt;p&gt;There are numerous tools for development available in React that can speed the process. For instance, it's a browser extension known as React Developer Tools, which will make your programming significantly simpler.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-stability-and-reliability-of-the-code"&gt;
  &lt;/a&gt;
  4. Stability and reliability of the code
&lt;/h2&gt;

&lt;p&gt;React uses the downward flow of data so that it is certain that the structure of the parent doesn't be affected by any changes in the child's structure.&lt;/p&gt;

&lt;p&gt;Therefore, when a developer modifies an object, they just need to alter its state and make the appropriate changes. In this way, only a specific component is updated.&lt;/p&gt;

&lt;p&gt;This is a way to improve the flow of data and its structure, in turn, resulting in more stability to the code and better execution of your application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-trusted-by-great-companies"&gt;
  &lt;/a&gt;
  5. Trusted by great companies
&lt;/h2&gt;

&lt;p&gt;Still, are you unsure whether you should use React instead?&lt;/p&gt;

&lt;p&gt;Take a look at some of the most inspiring instances that illustrate the power of React solutions. React is utilized by top startups and companies like Facebook, Dropbox, Khan Academy, Code Academy, Netflix, Airbnb, PayPal, Walmart, Tesla Motors, IMDb, and so on.&lt;/p&gt;

&lt;p&gt;What is the reason so many great startups and agencies use this software? An answer is truly a top-first-class tool for front-end development.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h1&gt;

&lt;p&gt;This article will come up with the Top Reasons to Choose React as a Frontend. Like Angular, React is an excellent framework that is worth your time. However, there is a drawback with Angular that is what makes React superior in my opinion. The issue lies in the fact that Angular is difficult to master since it's not a straightforward framework. It's a complicated framework for front-end development. However, react is a user-friendly, simple technology.&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Regular Expressions in JavaScript - Day 18 of 100</title>
      <author>Arif Iqbal</author>
      <pubDate>Wed, 15 Dec 2021 07:05:03 +0000</pubDate>
      <link>https://dev.to/arifiqbal/regular-expressions-in-javascript-day-18-of-100-4o2e</link>
      <guid>https://dev.to/arifiqbal/regular-expressions-in-javascript-day-18-of-100-4o2e</guid>
      <description>&lt;p&gt;This post is a part of the &lt;a href="https://dev.to/arifiqbal/series/15795"&gt;Week X of 100DaysOfCode JavaScript Challenge&lt;/a&gt; series.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Match Whitespace:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;\s&lt;/code&gt; the lowercase &lt;code&gt;s&lt;/code&gt; can match white space and white space between other characters. It includes white space, tab, form feed, new line, carriage return and vertical tab. You can consider it equivalent to the character class &lt;code&gt;[\t\n\r\f\v]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;whitespace. whitespace everywhere!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will return &lt;code&gt;[" ", " "]&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Match Non-Whitespace Characters:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;\S&lt;/code&gt; the uppercase &lt;code&gt;S&lt;/code&gt; will match everything but not whitespace. It will not match tab character, newline, form feed, carriage return, and vertical tab. You can consider it an equivalent to the character class &lt;code&gt;[^\t\n\r\f\v]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;whitespace. whitespace everywhere!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will return &lt;code&gt;32&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Specify Upper and Lower Number of Matches:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Previously we learned how to match the letter &lt;em&gt;one or more times&lt;/em&gt; with the &lt;code&gt;+&lt;/code&gt; character and match &lt;em&gt;zero or more times&lt;/em&gt; with the asterisk &lt;code&gt;*&lt;/code&gt; characters. But sometimes you would want to specify a lower and upper bound number for the match. You do this with the help of the &lt;em&gt;quantity specifier&lt;/em&gt;. You specify the upper and lower bound numbers in the curly brackets &lt;code&gt;{}&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aaaah&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aah&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;multipleA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="se"&gt;{3,5}&lt;/span&gt;&lt;span class="sr"&gt;h/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;multipleA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;multipleA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Specify Only the Lower Number of Matches:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you specify only the lower bound number in the quantity specifier with the following comma and omit the upper bound number, it will mean a minimum number match.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aaaah&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aah&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;multipleA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="se"&gt;{3,}&lt;/span&gt;&lt;span class="sr"&gt;h/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// minimum three times&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;multipleA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;multipleA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Specify Exact Number of Matches:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you specify only one number in the curly brackets &lt;code&gt;{X}&lt;/code&gt;, only that number of times will be matched.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;haaaah&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;haah&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;haaah&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;threeA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/ha&lt;/span&gt;&lt;span class="se"&gt;{3}&lt;/span&gt;&lt;span class="sr"&gt;h/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// minimum three times&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;threeA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;threeA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;threeA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Check for All or None:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Previously we used the &lt;code&gt;?&lt;/code&gt; mark to &lt;em&gt;lazy&lt;/em&gt; match a string. Another use of this character is to make a character match optional.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/colou&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;r/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/colou&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;r/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;colour&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Create your own social media with JavaScript.</title>
      <author>Vik üìà</author>
      <pubDate>Wed, 15 Dec 2021 07:04:31 +0000</pubDate>
      <link>https://dev.to/heyvik/create-your-own-social-media-with-javascript-1fbc</link>
      <guid>https://dev.to/heyvik/create-your-own-social-media-with-javascript-1fbc</guid>
      <description>&lt;p&gt;Using Social media is amazing, and if you are a developer, you might have thought about making your own social media. If the answer is yes then this blog is for you.&lt;/p&gt;

&lt;p&gt;There will be a lot of skills that you will learn after completing this, like, firebase, react native, custom hooks in react native, react navigation, react-native-pages, and much much more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Table of Content&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Create-React-App&lt;/li&gt;
&lt;li&gt;Installing Libraries&lt;/li&gt;
&lt;li&gt;Using react-navigation&lt;/li&gt;
&lt;li&gt;Adding fonts to our app&lt;/li&gt;
&lt;li&gt;Adding Firebase to our project&lt;/li&gt;
&lt;li&gt;Creating an onBoarding Screen&lt;/li&gt;
&lt;li&gt;Creating a Signup and Login Screen&lt;/li&gt;
&lt;li&gt;Create and Display tweets&lt;/li&gt;
&lt;li&gt;Profile Page with info&lt;/li&gt;
&lt;li&gt;Edit Profile&lt;/li&gt;
&lt;li&gt;Search Feature&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#installing-libraries"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Installing Libraries:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We will be needing some libraries/packages to complete this project, let's install it one by one. So first, what are those libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;firebase &lt;/li&gt;
&lt;li&gt;react-navigation &lt;/li&gt;
&lt;li&gt;react-native-pages &lt;/li&gt;
&lt;li&gt;expo-font &lt;/li&gt;
&lt;li&gt;expo-app-loading &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So lets then install it like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add firebase @react-navigation/native @react-navigation/native-stack @react-navigation/bottom-tabs @react-navigation/drawer react-native-safe-area-context react-native-screens react-native-pages expo-font expo-app-loading&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So these were the libraries we are going to install. You can use npm install instead of yarn add too.&lt;/p&gt;

&lt;p&gt;Using react-navigation&lt;br&gt;
React navigation is used to ( as you can see ) navigate between screens. Just like we do href in html. We will be adding Screens to react-navigation code when we make one. But first let's setup it:&lt;/p&gt;

&lt;p&gt;First let's import the stuff we need to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NavigationContainer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@react-navigation/native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createNativeStackNavigator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@react-navigation/native-stack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all the imports used to make a Stack Navigation. Now let's make it work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createNativeStackNavigator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NavigationContainer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Screen&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Boarding&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;BoardingScreen&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Stack.Navigator&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/NavigationContainer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will have to import the Boarding Screen to make it work. So if you run this app right now, it will cause an error. We will fix it later.&lt;/p&gt;

&lt;p&gt;That is all for this blog, if you want to create your fully function social media you can pre-order the book, right now, for only $3. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pre-order-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://thevik.gumroad.com/l/your-own-twitter"&gt;Pre Order Now&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4zDqu6Le--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy42fcdqg3k4uevkwtmg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4zDqu6Le--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy42fcdqg3k4uevkwtmg.jpg" alt="Image description" width="880" height="616"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Who is a Freelance Web Developer?</title>
      <author>Ethan Taylor</author>
      <pubDate>Wed, 15 Dec 2021 07:00:13 +0000</pubDate>
      <link>https://dev.to/ethantaylordeveloper/who-is-a-freelance-web-developer-59nf</link>
      <guid>https://dev.to/ethantaylordeveloper/who-is-a-freelance-web-developer-59nf</guid>
      <description>&lt;p&gt;At first, a web developer may appear to be someone who develops a website in a vague term. However, the web developer job description needs more understanding beyond the assumed meaning. A programmer specializing in World Web Applications based on the client-server model, using in hand expertise of HTML, CSS, JAVAScript, PHP, and many more, is termed as a Web developer. The simple website we see on the screens has hands-on expertise behind it. &lt;/p&gt;

&lt;p&gt;Majorly all the industries, namely service industry or e-commerce industry, very much rely on web development, since it caters to the need of reaching out to the customers, far and wide. Since every business is now at the click of a button, the need for the websites to be both user-friendly as well as mobile-friendly has increased. The revolutionary shift of the users from personal computers to mobile users has increased the demand for mobile UI design and app design. The process and demand both have become complex over the period. A large number of potential web developers work with Eiliana, which cater to the needs of almost every sector of the economy.&lt;/p&gt;

&lt;p&gt;Some of the core responsibilities of a web developer to ensure career growth and generate good business include:&lt;/p&gt;

&lt;p&gt;Deep knowledge and hands-on expertise rise in the field of web applications and programming languages.&lt;/p&gt;

&lt;p&gt;Strong understanding of the security principles and their e-commerce application.&lt;/p&gt;

&lt;p&gt;Regular update on changing market demands and be adjusting to it in terms of expertise needed.&lt;/p&gt;

&lt;p&gt;Deep functional knowledge of UI, cross-browser compatibility, and changing dynamics.&lt;/p&gt;

&lt;p&gt;Stress Management and compatibility in complying with the deadlines.&lt;/p&gt;

&lt;p&gt;Smart enough to apply expertise to solve technical problems.&lt;/p&gt;

&lt;p&gt;Being a web developer at Eiliana you have the complete choice of working as a freelancer.&lt;/p&gt;

&lt;p&gt;How To Become A Web Developer?&lt;/p&gt;

&lt;p&gt;Not many formal certifications are needed as a  Web Developer Prerequisite, but an in-depth and advanced understanding of the skill takes one beyond boundaries. We should be familiar with the web development jobs offered to become one. In general, there are three choices to choose &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
