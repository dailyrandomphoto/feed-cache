<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Things you should know to develop a website like Binance-Binance clone script</title>
      <author>hassan mahmoodi</author>
      <pubDate>Mon, 06 Sep 2021 12:28:20 +0000</pubDate>
      <link>https://dev.to/hassanm22668408/things-you-should-know-to-develop-a-website-like-binance-binance-clone-script-1e8n</link>
      <guid>https://dev.to/hassanm22668408/things-you-should-know-to-develop-a-website-like-binance-binance-clone-script-1e8n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-clone-script"&gt;
  &lt;/a&gt;
  what is Clone script
&lt;/h2&gt;

&lt;p&gt;Clone script is a tested architecture of the existing app that we can use to develop your customized software. With the help of &lt;strong&gt;&lt;a href="https://radindev.com/binance-clone-script/"&gt;Binance clone script&lt;/a&gt;&lt;/strong&gt; you will be able to launch your exchange platform with all the binance features, but you can add the extra features that you want to the platform and build your customized website. Binance clone script, enables the customers to trade directly in a p2p method. With binance clone script you can develop a hassle-free, user-friendly and secure website like Binance in a short time. Stay with us to read about the Binance clone script.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--obSe8hKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/binance-pic-1-1.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--obSe8hKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/binance-pic-1-1.svg" alt="binance clone  script"&gt;&lt;/a&gt;   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-binance-clone-script"&gt;
  &lt;/a&gt;
  What is Binance clone script?
&lt;/h2&gt;

&lt;p&gt;Cryptocurrency is being more and more accepted by people day by day. A large value of assets are being traded every day and a significant amount of the trading traffic belongs to the Binance exchange. It shows that Binance is popular among traders because of its high security, low transaction fees, and some other advanced features that it has. Binance is a successful, reliable, and secure cryptocurrency exchange platform. This company was founded in 2017 and climbed up the stairs of success so fast as its revenue in 2020 was about $800 M. Based on the reports its &lt;br&gt;
Website Visits was about 251.3 m on May 2021.        This company was established in China in Sep 2017. Binance is a marketplace that supports the exchange of coins like bitcoin, litecoin, ethereum, and more. Traders use Binance to do different tasks on the platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-premium-features-of-binance-that-cause-people-to-choose-binance-exchange"&gt;
  &lt;/a&gt;
  The premium features of binance that cause people to choose binance exchange:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Low fees&lt;/strong&gt;: Binance is one of the exchange websites that costs lower transaction fees than its competitors. Binance charges a fee of 0.1% for transactions.&lt;br&gt;
&lt;strong&gt;Accepts new cryptocurrencies:&lt;/strong&gt; new cryptocurrencies can be added to the list on binance after the completion of the initial coin offerings.&lt;br&gt;
&lt;strong&gt;Bonuses and rewards:&lt;/strong&gt; traders will gain rewards such as free crypto coins. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-binance-exchange"&gt;
  &lt;/a&gt;
  Features of binance exchange
&lt;/h2&gt;

&lt;p&gt;Multilingual support &lt;br&gt;
Live trade chart &lt;br&gt;
Referral program&lt;br&gt;
Powerful trade match engine &lt;br&gt;
Multicurrency support &lt;br&gt;
Perfect UI/UX design &lt;br&gt;
Different trading orders: market, limit , stop, and stop-limit order &lt;br&gt;
P2p trading&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#binance-clone-app"&gt;
  &lt;/a&gt;
  Binance clone app   &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ypmFeqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/binance-app-1.svg" alt="binance clone app script"&gt;
&lt;/h2&gt;

&lt;p&gt;Binance clone app development is the process of creating a fast performing, trading mobile app compatible with ios or android, with similar features to Binance app. Nowadays that each person has a personal smartphone, you can see that they do almost every task via their smartphones. So developing a binance clone app will enable clients to trade anywhere and easily through their smartphones.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-binance-clone-app"&gt;
  &lt;/a&gt;
  Features of binance clone app
&lt;/h3&gt;

&lt;p&gt;• Compatible with IOS and android &lt;br&gt;
• Pin lock features &lt;br&gt;
• Multilingual support &lt;br&gt;
• Real time updates of the assets’ value&lt;br&gt;
• Transaction history &lt;br&gt;
• Live chat&lt;br&gt;
• Faster chat&lt;br&gt;
• Trading orders&lt;br&gt;
• Referral bonuses&lt;br&gt;
• Instant buying and selling &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-binance-clone-script"&gt;
  &lt;/a&gt;
  Features of binance clone script
&lt;/h3&gt;

&lt;p&gt;• Liquid swap &lt;br&gt;
• Smartchain&lt;br&gt;
• Trust wallet integration&lt;br&gt;
• DEX development &lt;br&gt;
• Launchpad&lt;br&gt;
• Launchpool staking &lt;br&gt;
• Bonous and rewards &lt;br&gt;
• Token listing &lt;br&gt;
• Low transaction fee&lt;br&gt;
• Matching trade &lt;br&gt;
• Multi payment method&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--60oq0gFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/binance-white-label.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--60oq0gFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/binance-white-label.svg" alt="white label binance clone script"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-using-a-white-label-binance-clone-script"&gt;
  &lt;/a&gt;
  Benefits of using a white label binance clone script
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://radindev.com/white-label-crypto-exchange-software/"&gt;White label crypto exchange platform&lt;/a&gt;&lt;/strong&gt;reduces the development time and energy needed to develop a website or write script from scratch&lt;/li&gt;
&lt;li&gt;  The white label binance clone script is a pre-made script which doesn’t need that much money to develop a software from zero.&lt;/li&gt;
&lt;li&gt; The clone scripts have the high success rate because these scripts are powerful. The fact that some other successful websites are using this script and they are working properly are a testament to the good performance of these scripts.&lt;/li&gt;
&lt;li&gt; Various altcoins are available in this exchange platform. The exchange supports hundreds of cryptocurrency coins and tokens.&lt;/li&gt;
&lt;li&gt; It is completely customizable, if you want to add some additional features to white label binance clone script it’s possible. &lt;/li&gt;
&lt;li&gt; It is a bug-free and hassle-free platform and you will not face new problems during the process of deployment. And you can be sure that the platform will work properly because the script is working on other websites.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#white-label-binance-clone-script-feature-for-users-and-admin"&gt;
  &lt;/a&gt;
  White label binance clone script feature for users and admin
&lt;/h2&gt;

&lt;p&gt;White label binance clone script is a ready-made cryptocurrency exchange clone script of a successful exchange platform named binance. Like other clones, it holds all the features of binance platform. Binance white label clone is completely tested. By using a white label clone script you can start your branding faster. And catch the attention of traders to your exchange platform.&lt;/p&gt;

&lt;p&gt;Also, it will help you to enter the market sooner than developing a website from scratch.&lt;br&gt;
Here is the list of the features the white label Binance clone script offers to its users:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Admin:&lt;/strong&gt;&lt;br&gt;
List tokens and crypto pairs as available trading pairs.&lt;br&gt;
Enable number of liquidity APIs based on the market changes.&lt;br&gt;
Trading fee and withdrawal fee on exchange can be updated any time.&lt;br&gt;
Admin URL  login is available with the http access.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User:&lt;/strong&gt;&lt;br&gt;
The trading order only will be placed after the 2fa and sms  verification.&lt;br&gt;
IP address verification to disable multiple logins&lt;br&gt;
Transaction history &lt;br&gt;
User friendly User dashboard&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-you-start-a-website-like-binance"&gt;
  &lt;/a&gt;
  Why should you start a website like Binance?
&lt;/h2&gt;

&lt;p&gt;Brand reputation &lt;br&gt;
Potential customer &lt;br&gt;
High amount of transactions&lt;br&gt;
High market cap for users &lt;br&gt;
Users can learn and earn&lt;br&gt;
 the clone script is a replica of a famous website that exist before , which is an assurance that there is already a “demand” for that website. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security-features-of-binance-clone-script"&gt;
  &lt;/a&gt;
  Security features of Binance clone script
&lt;/h2&gt;

&lt;p&gt;• Email verification &lt;br&gt;
• Users authentication &lt;br&gt;
• Two factor authentication &lt;br&gt;
• Multi sig wallet integration&lt;br&gt;
• Secure cold wallet storage &lt;br&gt;
• Registry lock&lt;br&gt;
• SMS verifications&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-buy-bitcoin-on-the-binance-platform"&gt;
  &lt;/a&gt;
  How to buy Bitcoin on the Binance platform?
&lt;/h3&gt;

&lt;p&gt;The user  must log in to the Binance account &lt;br&gt;
The user must choose the exchange interface either basic or advanced.&lt;br&gt;
Different types of cryptocurrencies such as BNB, USDT, BTC, and ETH are available that user has to select among them. &lt;br&gt;
After choosing the desired bitcoins user must choose the coin that wants to exchange with&lt;br&gt;
As a result, a trading graph will appear for the user that shows how coins are being exchanged with each other. &lt;br&gt;
The user can set conditions for the order types such as limit order, stop-limit order, and more.&lt;br&gt;
The number of coins to be traded can be specified by the user.&lt;br&gt;
 Binance DEX clone script &lt;br&gt;
In the DEX Binance clone script, there is no need for a central authority to control the trade.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-binance-dex-clone-script"&gt;
  &lt;/a&gt;
  Features of Binance DEX Clone Script
&lt;/h2&gt;

&lt;p&gt;Decentralized Order Book&lt;/p&gt;

&lt;p&gt;150+ Cryptocurrencies Support&lt;/p&gt;

&lt;p&gt;Instant Buy &amp;amp; Sell Bitcoins&lt;/p&gt;

&lt;p&gt;Two Factor authentication&lt;/p&gt;

&lt;p&gt;Crypto Wallet Support&lt;/p&gt;

&lt;p&gt;Fiat-Crypto Exchange&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yOUnyOS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/like-binance.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yOUnyOS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/like-binance.svg" alt="clone a website like binance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#steps-for-creating-a-successful-exchange-platform"&gt;
  &lt;/a&gt;
  Steps for creating a successful exchange platform
&lt;/h3&gt;

&lt;p&gt;You know that you can add extra features and customize your exchange website.so use this possibility in the best way you can for developing a user friendly and popular exchange website. &lt;/p&gt;

&lt;p&gt;Read and test all the Binance features&lt;br&gt;
Understand the weakness and strengths of the platform to improve the weakness.&lt;br&gt;
Try to add some extra features to the platform that are useful for users ( you can find these features by asking users opinions )&lt;br&gt;
Search the social Media and users’ feedback to understand the users’ opinions. The features that they like and some extra features that they prefer to be added to the platform understand are the things users don’t like about the platform and solve it in your exchange.&lt;br&gt;
Check your competitors’ websites. Provide new features and updates for your exchange platform users. &lt;br&gt;
Keep updating your security features of the website and the speed of the transaction because these two factors are so important in exchange platforms.&lt;br&gt;
Find a trustworthy company to clone a website like OKEx for you.&lt;br&gt;
Check out the other popular websites and figure out what features do they have that attract the traders.&lt;br&gt;
Think of some rewarding system to attract more users to the platform, like setting some prizes for the first transaction, welcoming prizes for registration, and some other ways.&lt;br&gt;
Add an educational part to the platform. And make it possible for traders to learn and gain. This factor may attract new traders because they are interested in learning about the crypto exchange.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-choose-the-best-company-to-develop-a-website-like-binance"&gt;
  &lt;/a&gt;
  How to choose the best company to develop a website like Binance?
&lt;/h2&gt;

&lt;p&gt;Support Period.&lt;br&gt;
Customization Option.&lt;br&gt;
Data Backup.&lt;br&gt;
100% Source Code.&lt;br&gt;
Maintenance Cost.&lt;br&gt;
Free Addons&lt;br&gt;
Their customers feed backs&lt;br&gt;
We recommend you request binance clone script from your chosen company before purchasing the script.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>webdev</category>
      <category>cryptocurrency</category>
      <category>binance</category>
    </item>
    <item>
      <title>Best coding practices part 2</title>
      <author>Aatmaj</author>
      <pubDate>Mon, 06 Sep 2021 12:12:03 +0000</pubDate>
      <link>https://dev.to/aatmaj/best-coding-practices-part-2-2bkk</link>
      <guid>https://dev.to/aatmaj/best-coding-practices-part-2-2bkk</guid>
      <description>&lt;h3&gt;
  &lt;a href="#best-coding-practices-to-remember"&gt;
  &lt;/a&gt;
  Best coding practices to remember.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Be sure to understand your problem before you decide how to solve it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be sure you understand the algorithmic method before you start the program&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In case of difficulty, divide the problem into pieces and think of each part separately. (Divide and conquer)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keep your functions short and simple; rarely should a single function be more than a page long.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use techniques like "scaffolding" to simplify debugging. Scaffolding is a technique used to localize errors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keep your programs well formatted as you write them. This makes debugging easier.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keep your documentation consistent with your code, and when reading a program make sure you debug he code and not just the comments.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explain your program to someone else: Doing so will help you understand it better yourself.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Adapted from the book &lt;a href="https://www.amazon.in/Data-Structures-Program-Design-2e/dp/8177584235"&gt;Data Structures and Program Design in C&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What did you teach this week? Happy teacher's day!</title>
      <author>Aatmaj</author>
      <pubDate>Mon, 06 Sep 2021 12:11:45 +0000</pubDate>
      <link>https://dev.to/aatmaj/what-did-you-teach-this-week-happy-teacher-s-day-45mb</link>
      <guid>https://dev.to/aatmaj/what-did-you-teach-this-week-happy-teacher-s-day-45mb</guid>
      <description>&lt;p&gt;Happy Teacher's Day! &lt;br&gt;
So this week did you too become a teacher? Comment below and encourage others to teach!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xuAcUaSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2cceii78wc9nq5yc26w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xuAcUaSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2cceii78wc9nq5yc26w.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>teachingthisweek</category>
      <category>discuss</category>
      <category>teaching</category>
    </item>
    <item>
      <title>Today's Daily Humor For Devs - Daily Developer Jokes</title>
      <author>Daily Developer Jokes</author>
      <pubDate>Mon, 06 Sep 2021 12:00:25 +0000</pubDate>
      <link>https://dev.to/dailydeveloperjokes/today-s-daily-humor-for-devs-daily-developer-jokes-5ak1</link>
      <guid>https://dev.to/dailydeveloperjokes/today-s-daily-humor-for-devs-daily-developer-jokes-5ak1</guid>
      <description>&lt;p&gt;Hi there! Here's today's Daily Developer Joke. We hope you enjoy it; it's a good one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GJYYedWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e1258fbc6e41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GJYYedWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e1258fbc6e41.png" alt="Joke Image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;For more jokes, and to submit your own joke to get featured, check out the &lt;a href="https://dailydeveloperjokes.github.io/"&gt;Daily Developer Jokes Website&lt;/a&gt;. We're also open sourced, so feel free to view &lt;a href="https://github.com/dailydeveloperjokes"&gt;our GitHub Profile&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leave-this-post-a-if-you-liked-todays-joke-and-stay-tuned-for-tomorrows-joke-too"&gt;
  &lt;/a&gt;
  Leave this post a ❤️ if you liked today's joke, and stay tuned for tomorrow's joke too!
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This joke comes from &lt;a href="https://github.com/wesbos/dad-jokes"&gt;Dad-Jokes GitHub Repo by Wes Bos&lt;/a&gt; (thank you!), whose owner has given me permission to use this joke with credit.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>jokes</category>
      <category>dailydeveloperjokes</category>
    </item>
    <item>
      <title>Loading web workers using Webpack 5</title>
      <author>Matteo Mazzarolo</author>
      <pubDate>Mon, 06 Sep 2021 11:58:00 +0000</pubDate>
      <link>https://dev.to/mmazzarolo/loading-web-workers-using-webpack-5-4gcj</link>
      <guid>https://dev.to/mmazzarolo/loading-web-workers-using-webpack-5-4gcj</guid>
      <description>&lt;p&gt;Just wanted to share a few notes around the currently available options for loading web workers using webpack 5.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-workers-overview"&gt;
  &lt;/a&gt;
  Web Workers overview
&lt;/h2&gt;

&lt;p&gt;Web workers allow you to push work outside of main execution thread of JavaScript, making them convenient for lengthy computations and background work.&lt;/p&gt;

&lt;p&gt;Web workers are delivered as scripts that are loaded asynchronously using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker"&gt;Web Worker API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A worker is an object created using a constructor (e.g., &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker"&gt;&lt;code&gt;Worker()&lt;/code&gt;&lt;/a&gt;) that runs a named JavaScript file.&lt;/p&gt;

&lt;p&gt;To create a new worker, all you need to do is call the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker"&gt;&lt;code&gt;Worker()&lt;/code&gt;&lt;/a&gt; constructor, specifying the URI of a script to execute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Assuming we're in a JavaScript script that runs in your main thread and that&lt;/span&gt;
&lt;span class="c1"&gt;// the worker script is available at yourdomain.com/worker.js, this will take&lt;/span&gt;
&lt;span class="c1"&gt;// care of spawning a new worker:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myWorker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;worker.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since they’re loaded as separate scripts, web workers can’t be “bundled” within the code that runs in the main thread. This means that if you’re using a module bundler to bundle your code (e.g., Webpack, Rollup) you’ll have to maintain two separate build processes, which can be pretty annoying.&lt;/p&gt;

&lt;p&gt;The good news is that, if you’re using webpack, there are a couple of tools you can use to simplify the loading process of web workers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-workers-in-webpack-5"&gt;
  &lt;/a&gt;
  Web Workers in webpack 5
&lt;/h2&gt;

&lt;p&gt;Since webpack 5, &lt;a href="https://webpack.js.org/guides/web-workers/"&gt;web workers are first-class citizens&lt;/a&gt;, and you can use a specific syntax to let webpack automatically handle the creation of two separate bundles.&lt;br&gt;&lt;br&gt;
To do so, you must use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import.meta"&gt;&lt;code&gt;import.meta&lt;/code&gt; object&lt;/a&gt; (an object that exposes context-specific metadata) to provide the module URL to the &lt;code&gt;Worker()&lt;/code&gt; constructor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myWorker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./worker.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that the &lt;code&gt;import.meta.url&lt;/code&gt; construct is available only available in ESM. Worker in CommonJS syntax is not supported.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As of today, there’s not much documentation around webpack 5’s web worker supports. It indeed works pretty well for the most common use-cases and it’s a future-proof way to load web worker, but, for now, if you’re looking for a more flexible way to load web workers, you might want to take a look at &lt;a href="https://github.com/webpack-contrib/worker-loader"&gt;&lt;code&gt;worker-loader&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#webpack-5-and-worker-loader"&gt;
  &lt;/a&gt;
  Webpack 5 and Worker Loader
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/webpack-contrib/worker-loader"&gt;&lt;code&gt;worker-loader&lt;/code&gt;&lt;/a&gt; is the pre-webpack-5 way to load web workers, and its documentation highlights how it’s &lt;strong&gt;not&lt;/strong&gt; compatible with webpack 5 (&lt;em&gt;“Worker Loader is a loader for webpack 4”&lt;/em&gt;).&lt;br&gt;&lt;br&gt;
Still, in my experience, besides a few quirks, &lt;code&gt;worker-loader&lt;/code&gt; &lt;strong&gt;can&lt;/strong&gt; be used with webpack 5, and it offers &lt;a href="https://github.com/webpack-contrib/worker-loader#options"&gt;several more customization options&lt;/a&gt; than webpack 5’s built-in web worker support.&lt;/p&gt;

&lt;p&gt;The most important ones are probably the support for inlining web workers as &lt;code&gt;BLOB&lt;/code&gt; and specifying a custom &lt;code&gt;publicPath&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#inlining-web-workers"&gt;
  &lt;/a&gt;
  Inlining web workers
&lt;/h3&gt;

&lt;p&gt;Web workers are restricted by a &lt;a href="https://en.wikipedia.org/wiki/Same-origin_policy"&gt;same-origin policy&lt;/a&gt;, so if your webpack assets are not being served from the same origin as your application, their download may be blocked by your browser.&lt;/p&gt;

&lt;p&gt;This scenario can commonly occur if you are serving the web worker from localhost during local development (e.g., with &lt;code&gt;webpack-dev-server&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// If the origin of your application is available at a different origin than&lt;/span&gt;
&lt;span class="c1"&gt;// localhost:8080, you won't be able to load the following web worker:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myWorker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:8080/worker.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;worker-loader&lt;/code&gt; solves the local development issue by allowing you to inlining the web worker as a &lt;code&gt;BLOB&lt;/code&gt; (instead of pointing it to localhost) on development builds by specifying an &lt;code&gt;inline: "fallback"&lt;/code&gt; option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// webpack.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;worker-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isDevelopment&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fallback&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;no-fallback&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setting-a-workerspecific-raw-publicpath-endraw-"&gt;
  &lt;/a&gt;
  Setting a worker-specific &lt;code&gt;publicPath&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Another scenario where the same-origin policy might need some accommodations is if you’re hosting your main bundle code on a static CDN.&lt;br&gt;&lt;br&gt;
In this case, you’re probably going to set the &lt;code&gt;publicPath&lt;/code&gt; of your webpack &lt;code&gt;output&lt;/code&gt; to the CDN domain (e.g., &lt;code&gt;https://my-static-cdn&lt;/code&gt;), so that all the assets will reference it in production. Unfortunately, this pattern doesn’t work well when using web workers because you can’t reference a web worker that is hosted on a CDN (because of the same-origin policy):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Since the origin of the application (e.g., https://example.com) is different&lt;/span&gt;
&lt;span class="c1"&gt;// from the CDN one, you won't be able to load the following web worker:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myWorker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://my-static-cdn/worker.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What’s great about &lt;code&gt;worker-loader&lt;/code&gt;, is that you can solve this issue by setting a worker-specific &lt;code&gt;publicPath&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Set the publicPath of all assets generated by this webpack build to&lt;/span&gt;
    &lt;span class="c1"&gt;// https://my-static-cdn/.&lt;/span&gt;
    &lt;span class="na"&gt;publicPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://my-static-cdn/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;worker-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// Overrides the publicPath just for the web worker, marking it as&lt;/span&gt;
        &lt;span class="c1"&gt;// available on the same origin used by the app (notice that this is&lt;/span&gt;
        &lt;span class="c1"&gt;// a relative path).&lt;/span&gt;
        &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;publicPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/workers/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#a-note-on-setting-workerloaders-raw-publicpath-endraw-with-webpack-5"&gt;
  &lt;/a&gt;
  A note on setting worker-loader’s &lt;code&gt;publicPath&lt;/code&gt; with webpack 5
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://webpack.js.org/guides/public-path/#automatic-publicpath"&gt;Webpack 5 introduced a mechanism to detect the &lt;code&gt;publicPath&lt;/code&gt; that should be used automatically&lt;/a&gt;. Sadly, the new automatic detection seems to be incompatible with &lt;code&gt;worker-loader&lt;/code&gt;’s &lt;code&gt;publicPath&lt;/code&gt;… but there are a couple of (hacky) ways you can solve this issue ;)&lt;/p&gt;

&lt;p&gt;The first one is to by setting the &lt;code&gt;publicPath&lt;/code&gt; on the fly.&lt;br&gt;&lt;br&gt;
Webpack 5 exposes a global variable called &lt;code&gt;__webpack_public_path__&lt;/code&gt; that allows you to do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Updates the `publicPath` at runtime, overriding whatever was set in the&lt;/span&gt;
&lt;span class="c1"&gt;// webpack's `output` section.&lt;/span&gt;
&lt;span class="nx"&gt;__webpack_public_path__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/workers/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myWorker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/workers/worker.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Eventually, restore the `publicPath` to whatever was set in output.&lt;/span&gt;
&lt;span class="nx"&gt;__webpack_public_path__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://my-static-cdn/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;I recommend using webpack’s &lt;a href="https://webpack.js.org/plugins/define-plugin/"&gt;&lt;code&gt;DefinePlugin&lt;/code&gt;&lt;/a&gt; to pass the public path as environment variables instead of hardcoding them in the source code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The other (even more hacky) option is to apply the following patch to &lt;code&gt;worker-loader&lt;/code&gt; (using &lt;a href="https://www.npmjs.com/package/patch-package"&gt;&lt;code&gt;patch-package&lt;/code&gt;&lt;/a&gt;, for example):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt; worker-loader+3.0.8.patch
&lt;span class="err"&gt;#&lt;/span&gt; Compatible only with worker-loader 3.0.8.
&lt;span class="gh"&gt;diff --git a/node_modules/worker-loader/dist/utils.js b/node_modules/worker-loader/dist/utils.js
index 5910165..2f2d16e 100644
&lt;/span&gt;&lt;span class="gd"&gt;-------- a/node_modules/worker-loader/dist/utils.js
&lt;/span&gt;&lt;span class="gi"&gt;+++ b/node_modules/worker-loader/dist/utils.js
&lt;/span&gt;&lt;span class="p"&gt;@@ -63,12 +63,14 @@&lt;/span&gt; function workerGenerator(loaderContext, workerFilename, workerSource, options) {
   const esModule = typeof options.esModule !== "undefined" ? options.esModule : true;
   const fnName = `${workerConstructor}_fn`;

+ const publicPath = options.publicPath ? `"${options.publicPath}"` : ' __webpack_public_path__';
&lt;span class="gi"&gt;+
&lt;/span&gt;   if (options.inline) {
     const InlineWorkerPath = (0, _loaderUtils.stringifyRequest)(loaderContext, `!!${require.resolve("./runtime/inline.js")}`);
     let fallbackWorkerPath;

     if (options.inline === "fallback") {
&lt;span class="gd"&gt;- fallbackWorkerPath = ` __webpack_public_path__ + ${JSON.stringify(workerFilename)}`;
&lt;/span&gt;&lt;span class="gi"&gt;+ fallbackWorkerPath = `${publicPath} + ${JSON.stringify(workerFilename)}`;
&lt;/span&gt;     }

     return `
&lt;span class="p"&gt;@@ -77,7 +79,7 @@&lt;/span&gt; ${esModule ? `import worker from ${InlineWorkerPath};` : `var worker = require($
 ${esModule ? "export default" : "module.exports ="} function ${fnName}() {\n return worker(${JSON.stringify(workerSource)}, ${JSON.stringify(workerConstructor)}, ${JSON.stringify(workerOptions)}, ${fallbackWorkerPath});\n}\n`;
   }

- return `${esModule ? "export default" : "module.exports ="} function ${fnName}() {\n return new ${workerConstructor}( __webpack_public_path__ + ${JSON.stringify(workerFilename)}${workerOptions ? `, ${JSON.stringify(workerOptions)}` : ""});\n}\n`;
&lt;span class="gi"&gt;+ return `${esModule ? "export default" : "module.exports ="} function ${fnName}() {\n return new ${workerConstructor}(${publicPath} + ${JSON.stringify(workerFilename)}${workerOptions ? `, ${JSON.stringify(workerOptions)}` : ""});\n}\n`;
&lt;/span&gt; } // Matches only the last occurrence of sourceMappingURL
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more info, check this &lt;a href="https://github.com/webpack-contrib/worker-loader/issues/281"&gt;GitHub issue&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Originally published at &lt;a href="https://mmazzarolo.com/blog/2021-09-03-loading-web-workers-using-webpack-5/"&gt;mmazzarolo.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>development</category>
      <category>webpack</category>
    </item>
    <item>
      <title>5 steps to build a crypto exchange like WazirX- WazirX clone script</title>
      <author>reyhanas</author>
      <pubDate>Mon, 06 Sep 2021 11:57:07 +0000</pubDate>
      <link>https://dev.to/reyhanas007/5-steps-to-build-a-crypto-exchange-like-wazirx-wazirx-clone-script-2ljc</link>
      <guid>https://dev.to/reyhanas007/5-steps-to-build-a-crypto-exchange-like-wazirx-wazirx-clone-script-2ljc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-quick-glance-at-wazirx"&gt;
  &lt;/a&gt;
  A Quick Glance at WazirX
&lt;/h2&gt;

&lt;p&gt;Recently, WazirX is one such cryptocurrency exchange which has been very much liked by Indians. This is because in a very short time, it’s amazing features have made everyone’s interest and together it is very easy to use it or its services. The basic objective of this company is how it can become India’s most trusted Bitcoin exchange. most of companies like to launch &lt;strong&gt;&lt;a href="https://radindev.com/wazirx-clone-script/"&gt;wazirx clone script&lt;/a&gt;&lt;/strong&gt; similar to wazirx.&lt;br&gt;
WazirX has now started its own token, which they named WRX Coin. Is kept, and which can be used by users in their platform. &lt;br&gt;
So today I thought that why should you be provided information about what Wazirx is and how it works so that you too can get some information about it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-nj6YcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhi5s7zre4t5jykn2616.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-nj6YcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhi5s7zre4t5jykn2616.png" alt="features of wazirx exchange clone software"&gt;&lt;/a&gt;&lt;br&gt;
Part of the Malta-based Binance group, which has users in 180 countries, WazirX claimed $2.3 billion monthly volume and 1.75 million registered users on its platform. As per CoinMarketCap, WazirX was the 27th top crypto exchange globally based on traffic, liquidity, trading volumes, and confidence in the legitimacy of trading volumes. Its 24-hour trading volume stood at $218 million with 137 coins available for trading to customers.&lt;br&gt;
Global bitcoin exchange Binance-owned Indian cryptocurrency exchange WazirX has crossed $200 million in daily trading volume since its launch in March 2018. This is the highest trading volume by any crypto exchange in the Indian market, according to the company, amid the regulatory uncertainty over the use and adoption of cryptos by businesses and individuals in the country. “Daily trading volume shows the scale at which an exchange is operating. More volume leads to more liquidity and more liquidity ensures that traders get the best prices with the minimum spread between buying and selling. WazirX has the highest liquidity and trading volume in the INR market in India,” Nischal Shetty, Founder, WazirX told Financial Express Online. &lt;br&gt;
The startup had last year in March launched a $50 million ‘Blockchain for India’ fund to invest in crypto/blockchain startups in India. According to WazirX, there are more than 7 million people associated with over 7,500 crore crypto assets whose fate hangs in the balance until India regulates the crypto market. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bLPu2SYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d71cqmnvdalxeo0a40ff.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bLPu2SYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d71cqmnvdalxeo0a40ff.jpeg" alt="wazirx exchange stats"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-wazirx-exchange-platform"&gt;
  &lt;/a&gt;
  Features of Wazirx exchange platform
&lt;/h2&gt;

&lt;p&gt;Here are some of the noticeable features of the WazirX exchange that must be considered by those who want to build a crypto exchange like Wazirx.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;WazirX uses a real-time open order book system that equivalents the exchange of cryptocurrencies between buyers and sellers.&lt;/li&gt;
&lt;li&gt;WazirX has a crypto coin named WRX which can be used by traders for buying or selling other cryptocurrencies.&lt;/li&gt;
&lt;li&gt;The value of WRX has increased considerably over time just like Bitcoin or other altcoins.&lt;/li&gt;
&lt;li&gt;WazirX provides the feature for exchanging or selling of USDT (Tether) for INR with other traders. Tether being a stable coin equalizes its value with fiat currencies.&lt;/li&gt;
&lt;li&gt;The deposit and withdrawal rates provided by WazirX are super amazing with very little input of efforts.&lt;/li&gt;
&lt;li&gt;WazirX provides a facility of a digital wallet wherein you can store your digital assets with safety and protection.&lt;/li&gt;
&lt;li&gt;WazirX inherits the bitcoin escrow trading concept and it also regularly invests in the security audits which make it the most secure exchange in India.&lt;/li&gt;
&lt;li&gt;The KYC verification process takes a limited time but WazirX is further focusing to make it minimal to develop their service base.&lt;/li&gt;
&lt;li&gt;The system infrastructure of WazirX can handle millions of trading transactions per second, which makes it a faster trading network tool.&lt;/li&gt;
&lt;li&gt;There is also a native mobile app for crypto trading named “WazirX clone App development” which assists the traders to trade through their mobile devices.&lt;/li&gt;
&lt;li&gt;WazirX has presence across all platforms such as web, iOS, and Android with a fast and safe trading experience.&lt;/li&gt;
&lt;li&gt;The model of WazirX is based on Maker-Taker Model where the maker gets a bonus.
Maker — 0.20% bonus
Taker — 0.25% transaction fees&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-use-clone-scripts-and-what-are-the-benefits-made-by-clone-scripts"&gt;
  &lt;/a&gt;
  Why do we use clone scripts and what are the benefits made by clone scripts?
&lt;/h2&gt;

&lt;p&gt;Clone scripts help the business bloomers to start their own venture easily, quickly. A non-techie entrepreneur can survive in this digital business world with it. Clone script is used to copying or alternated an existing website and app or otherwise, a script is a new software to create a website and app. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-clone-scripts-are"&gt;
  &lt;/a&gt;
  Benefits of Clone scripts are:
&lt;/h3&gt;

&lt;p&gt;• Cost-effective&lt;br&gt;
• Easy to use&lt;br&gt;
• Come with core features of popular business modules&lt;br&gt;
• Well familiar with the market&lt;br&gt;
• Customizable or scalable, that can incorporate your business ideas&lt;br&gt;
• Lesser your source and energy&lt;br&gt;
• High chances to be succeeding easily&lt;br&gt;
• Face the competitive market with well-known design &amp;amp; workable functions&lt;br&gt;
• Currently updated to the market&lt;br&gt;
• Free and Paid Add-ons&lt;br&gt;
• Free Support &amp;amp; Service.&lt;br&gt;
• Exclusive offers&lt;br&gt;
• White labeling&lt;br&gt;
• Technical support of all forms.&lt;/p&gt;

&lt;p&gt;Now that we know the benefits of wazirx and clone scripts ... it's time to learn about the wazirx clone script and its structure, features, functions, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-buying-white-label-wazirx-clone-script"&gt;
  &lt;/a&gt;
  Benefits of buying white label wazirx clone script
&lt;/h2&gt;

&lt;p&gt;The popularity of cryptocurrency is unending these days. Crypto trading has evolved itself unexpectedly in a short duration of time. A few years ago, only technicians were aware of its practical benefits. Nowadays most people are aware of this tremendous technology and wish to invest in cryptocurrencies. &lt;br&gt;
The day would come soon when the market cap of the crypto market will outperform the entire market cap of various eminent banks in the world. According to various reports published from time to time, it has been pronounced that cryptocurrency has an unbeatable potential to navigate the whole digital market.&lt;br&gt;
The white label cryptocurrency exchange like WazirX is expanding globally and it offers over 40 cryptocurrencies available for trading in all the major countries. &lt;br&gt;
 WazirX launched a P2P trading platform that allows traders to buy and sell crypto directly from each other. It is the expanding popularity of WazirX that has encouraged many people across the globe to build a crypto exchange platform like WazirX.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-develop-a-crypto-exchange-like-wazirx"&gt;
  &lt;/a&gt;
  How to develop a crypto exchange like WazirX?
&lt;/h2&gt;

&lt;p&gt;To build an exchange platform like WazirX, you need to have a WazirX clone script that portrays all the features of the exchange.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-steps-to-start-a-business-from-clone-script-are"&gt;
  &lt;/a&gt;
  The steps to start a business from clone script are:
&lt;/h3&gt;

&lt;p&gt;1.Form a business plan according to the regional needs&lt;br&gt;
Wazirx is an online marketplace where people buy and sell each other bitcoins, ether, dash and other virtual money. The platform acts as the only intermediary that brings the buyer and seller together and provides tools for an honest exchange or chat, where you can arrange a personal meeting.&lt;br&gt;
To search for counterparties, Wazirx users publish ads in which they indicate the amount of the exchange, rate (course) and acceptable (available) payment methods: cryptocurrency, PayPal, bank transfers, cash and more. Anyone can respond to such an announcement, provided that the transaction does not imply restrictions on location.&lt;br&gt;
The crypto buying and selling process is quite simple:&lt;br&gt;
A.We are looking for an ad with the right cryptocurrency and an acceptable rate.&lt;br&gt;
B.We contact the counterparty and agree on the transaction amount and method of payment. There is a possibility of escrow funds.&lt;br&gt;
C.We are making a deal. Write a comment about the second side. &lt;/p&gt;

&lt;p&gt;To guarantee an honest exchange on the website, smart contracts with escrow are used. To reduce fraud, with other methods of exchange on the site, a system of reviews and reputation ratings has been introduced.&lt;/p&gt;

&lt;p&gt;2.Look for the perfect clone script providers with good reviews&lt;br&gt;
To give wings to your dream of developing your desired business platform at an affordable price within a short while, you have to opt for clone scripts instead of building an app from scratch. All you need to know first is the significance of these Clone scripts. Once you have understood the significance of such clone scripts, the next step is to look for the exact place to find a clone script that stands out from the rest available online. Only a ready-made solution that's carefully developed would have been through a rigorous testing process and its adaptable nature can help you to modify it to fit as per your business plan. Thus, this satisfies the prime need of developing an efficiently performing website for being successful in your online business venture. To find an authentic clone script, you have to approach a notable and trustworthy app development company. This is because only a company that's committed, driven, and the one that is aware of its clientele demands can help you with materializing your business dreams. Another prime reason why you should look for an authentic clone script from a renowned and trustworthy web and mobile app development company is, you aren’t looking for a typical clone script.&lt;/p&gt;

&lt;p&gt;3.Talk with them and share the business details&lt;br&gt;
Ask your clone script developer how many parallel users can the app handle before becoming too slow. It is considered a good solution if it can handle at least 100 simultaneous users. That is if hundred people are using it at any point of time.&lt;br&gt;
4.Get the consultation from the experienced clone script providers&lt;br&gt;
The script is usually developed by well-experienced and qualified experts. They take care of everything from development, design, testing, and deployment, allowing you to focus on just the customization part. There are many advantages involved with purchasing and deploying a Wazirx clone script for your business. Let’s find out what they are:&lt;br&gt;
1.A Wazirx clone script relieves you from the long, tedious development process and the costs and resources incurred for development. It comes readily-available, enabling a quick launch at a cost-effective price. &lt;br&gt;
2.A Wazirx clone script supports multiple cryptocurrencies and multiple languages that will help you broaden your user base just like the original Wazirx model. &lt;br&gt;
3.A Wazirx clone script comes with similar advanced trading tools, technology implementations, exchange infrastructure, and features that fit both experienced and new traders. &lt;br&gt;
4.Transactions will be of low costs similar to Wazirx, therefore more trades, which means more profits for both traders and the exchange owner. &lt;br&gt;
5.Wazirx clone script will bring in more liquidity and the high capacity of handling multiple transactions per second. &lt;br&gt;
6.A Wazirx clone script offers a wide range of customization options for the users, in terms of name, logo, brand, UX/UI, color themes, etc. Also, it is completely pre-tested before being delivered hence it assures bug-free operations, more reliability, security, and sustainability. &lt;/p&gt;

&lt;p&gt;5.Tie-up after the analysis of price estimates and compare with them.&lt;br&gt;
This is how a Wazirx clone script works. With the intensely growing demand and competition, several companies around the world have started offering a Wazirx clone script for businesses. To choose the right one for yours, look if the script comprises the following features. &lt;/p&gt;

&lt;p&gt;There are a lot of remarkable and advanced security features in order to build Wazirx clone software. These features are:&lt;br&gt;
Accessible with multiple Platforms&lt;br&gt;
A wide range of cryptocurrency&lt;br&gt;
Advanced trading tools&lt;br&gt;
Fast transaction&lt;br&gt;
Advanced UI/UX &lt;br&gt;
Payment gateway integration&lt;br&gt;
Trading bot&lt;br&gt;
KYC/AML Verification&lt;br&gt;
IEO Launchpad&lt;br&gt;
Support Multiple wallets&lt;/p&gt;

&lt;p&gt;Pros and Cons of Wazirx Clone Script:&lt;/p&gt;

&lt;p&gt;Pros of Wazirx Clone Script&lt;br&gt;
• User Friendly UI&lt;br&gt;
• Flexible Payment gateways&lt;br&gt;
• Multi-lingual support&lt;br&gt;
• Reviews and Ratings&lt;br&gt;
• Security and Trustable exchange&lt;br&gt;
• Bypass the middleman &lt;br&gt;
• Probably the lowest price of all coins in India&lt;br&gt;
• Speedy transactions&lt;br&gt;
• WRX tokens&lt;br&gt;
• Cutting Edge Technology&lt;br&gt;
• QR Code Scanner&lt;br&gt;
• Operating System&lt;/p&gt;

&lt;p&gt;Cons&lt;br&gt;
The transaction fee is a little bit high.&lt;br&gt;
If you want to know further details regarding the exchange here is a link to Wazirx’s White paper.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-process-of-wazirx-clone-software-as-per-the-section"&gt;
  &lt;/a&gt;
  The process of Wazirx clone software as per the section.
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;User Registration: Users have to register their necessities details like email id, phone number, a password for signup. Once registered, they will be assigned specific wallets.&lt;/li&gt;
&lt;li&gt;Explore offer: Sellers should post their offers like cryptocurrency type, rate, and payment method for the transaction.&lt;/li&gt;
&lt;li&gt;Notify the offers: Buyers will receive notification from those selling offerings and select the suitable things as per their needs.&lt;/li&gt;
&lt;li&gt;Secure Authentication: Once the buyer confirms their transfer, a chat popup appears and negotiations between two parties.&lt;/li&gt;
&lt;li&gt;Payment option: The buyers can pay through various payment options that are available on this platform.&lt;/li&gt;
&lt;li&gt;Transfer: In time, the seller can verify the transaction, and admin escrows release the requested payment of the cryptos from their wallet to the buyer wallet.&lt;/li&gt;
&lt;li&gt;If you are a seller - Wazirx clone will not release your USDT to the buyer until you make a confirmation on the receipt of payment. &lt;/li&gt;
&lt;li&gt;If you are a buyer - Wazirx clone software will hold the seller's USDT until you make a payment to the seller. The System will detect and resolves any dispute that occurs between the buyer and a seller. KYC details can be verified for every user before allowing them to trade on the platform and thus keeps a record on each and every transaction that occurs on the exchange.&lt;/li&gt;
&lt;li&gt;Cash In - If you want to bring fiat money to trade cryptocurrencies, Buy USDT via P2P and then use that Usdt to buy other cryptocurrencies on Wazirx.&lt;/li&gt;
&lt;li&gt;Cash Out - In case you want to move Fiat money to your bank account, sell your cryptocurrencies for USDT and then sell that USDT for fiat.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rq9Jo0sP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntn1oo5t0dtnusp3w409.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rq9Jo0sP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntn1oo5t0dtnusp3w409.png" alt="wazirx p2p clone software"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wazirx-p2p"&gt;
  &lt;/a&gt;
  WazirX P2P
&lt;/h2&gt;

&lt;p&gt;Traditionally, peer-to-peer systems are classified listings where you need to go through the following steps to purchase cryptocurrencies with fiat money:&lt;br&gt;
Scroll through each order listing&lt;br&gt;
Analyse each order volume, price, and payment method to figure if it aligns with your requirements&lt;br&gt;
Choose multiple orders depending on your trade size&lt;br&gt;
Figure out the legitimacy of each trader before you deal with them&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---9kE80yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hhefyxnpnlt8ygkvpeu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---9kE80yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hhefyxnpnlt8ygkvpeu.png" alt="wazirx p2p exchange development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heres-how-wazirx-p2p-works"&gt;
  &lt;/a&gt;
  Here’s how WazirX P2P works:
&lt;/h3&gt;

&lt;p&gt;Buyer places USDT buy order, gets instantly auto-matched with a seller&lt;br&gt;
Pays directly to the seller’s bank account&lt;br&gt;
Both buyer and seller confirm sending and receiving payment respectively&lt;br&gt;
WazirX transfers the escrowed USDT to the buyer’s wallet&lt;/p&gt;

&lt;p&gt;Moreover, the &lt;strong&gt;&lt;a href="https://radindev.com/p2p-crypto-exchange-script/"&gt;p2p crypto exchange software development&lt;/a&gt;&lt;/strong&gt; has been designed in a way that matching and order-completion happen in record time. It’s hassle-free with zero learning curve, and available 24x7.&lt;/p&gt;

&lt;p&gt;Since its inception, WazirX P2P has been a game changer in the Indian cryptocurrency ecosystem. In 2018, when traditional P2P options launched in India, WazirX P2P emerged as the top choice for users.&lt;br&gt;
Multiple P2P trade matches happen every minute, and 90% of P2P trades complete within 10 minutes. P2P is growing at a rate of over 9.5% every month.&lt;br&gt;
Total P2P trades: 1.3 Million Average execution, time taken: 15 minutes&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wazirx-exchange-clone-script-security-features"&gt;
  &lt;/a&gt;
  WazirX exchange clone script Security features
&lt;/h2&gt;

&lt;p&gt;Major chunk of funds in cold storage&lt;br&gt;
Multi-signature wallet system&lt;br&gt;
Each fund withdrawal request needs a two-factor authentication&lt;br&gt;
Strong KYC/AML guidelines&lt;br&gt;
Regular security audits&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>webdev</category>
      <category>cryptocurrency</category>
      <category>p2p</category>
    </item>
    <item>
      <title>How to convert Python string to bytes?</title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 06 Sep 2021 11:50:38 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-convert-python-string-to-bytes-2d9g</link>
      <guid>https://dev.to/hrishikesh1990/how-to-convert-python-string-to-bytes-2d9g</guid>
      <description>&lt;p&gt;In this tutorial, we look at how to convert Python string to bytes. We look at all the various methods along with their limitations and caveats. &lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-python-string-to-byte"&gt;
  &lt;/a&gt;
  Table of Contents - Python String to Byte
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#python-string-to-bytes"&gt;Python String to Bytes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#method-to-convert-strings-to-bytes"&gt;Method to convert strings to bytes&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#using-bytes"&gt;Using bytes()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-encode"&gt;Using encode()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#limitations-and-caveats-python-string-to-byte"&gt;Limitations and Caveats - Python String to Byte&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#python-string-to-bytes"&gt;
  &lt;/a&gt;
  Python String to Bytes:
&lt;/h2&gt;

&lt;p&gt;Converting Python strings to Bytes has become quite popular after the release of Python 3. This is largely because a lot of file handling and Machine learning methods require you to convert them. Before we dive into how to convert them let us first understand what they are and how they are different. &lt;/p&gt;

&lt;p&gt;In Python 2, string and bytes were the same typeByte objects; however after the introduction of Python 3 Byte objects are considered as a sequence of bytes, and strings are considered as a sequence of characters. In essence, strings are human-readable and in order for them to become machine-readable, they must be converted to byte objects. This conversion also enables the data to be directly stored on the disk. &lt;/p&gt;

&lt;p&gt;The process of converting string objects to byte objects is called encoding and the inverse is called decoding. We look at methods to achieve this below. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#method-to-convert-strings-to-bytes"&gt;
  &lt;/a&gt;
  Method to convert strings to bytes:
&lt;/h2&gt;

&lt;p&gt;There are many methods that can be used to convert Python string to bytes, however, we look at the most common and simple methods that can be used. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-bytes"&gt;
  &lt;/a&gt;
  Using bytes():
&lt;/h3&gt;

&lt;p&gt;The bytes() method is an inbuilt function that can be used to convert objects to byte objects. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#syntax-of-bytes"&gt;
  &lt;/a&gt;
  Syntax of bytes():
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The bytes take in an object (a string in our case), the required encoding method, and convert it into a byte object. The bytes() method accepts a third argument on how to handle errors. &lt;/p&gt;

&lt;p&gt;Let us look at the code to convert a Python string to bytes. The encoding type we use here is “UTF-8”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Using the byte() method
&lt;/span&gt;
&lt;span class="c1"&gt;# initializing string 
&lt;/span&gt;&lt;span class="n"&gt;str_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Join our freelance network"&lt;/span&gt;

&lt;span class="n"&gt;str_1_encoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'UTF-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#printing the encode string 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_1_encoded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#printing individual bytes
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;str_1_encoded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s"&gt;'Join our freelance network'&lt;/span&gt;
&lt;span class="mi"&gt;74&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="mi"&gt;105&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="mi"&gt;117&lt;/span&gt; &lt;span class="mi"&gt;114&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="mi"&gt;102&lt;/span&gt; &lt;span class="mi"&gt;114&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="mi"&gt;108&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="mi"&gt;116&lt;/span&gt; &lt;span class="mi"&gt;119&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="mi"&gt;114&lt;/span&gt; &lt;span class="mi"&gt;107&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see this method has converted the string into a sequence of bytes. &lt;/p&gt;

&lt;p&gt;Note: This method converts objects into immutable bytes, if you are looking for a mutable method you can use the bytearray() method. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-encode"&gt;
  &lt;/a&gt;
  Using encode():
&lt;/h3&gt;

&lt;p&gt;The encode() method is the most commonly used and recommended method to convert Python strings to bytes. A major reason is that it is more readable. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#syntax-of-encode"&gt;
  &lt;/a&gt;
  Syntax of encode():
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, string refers to the string you are looking to convert. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Encoding - Optional. The encoding method you are looking to use. After Python 3, UTF-8 has become the default. &lt;/li&gt;
&lt;li&gt;Error - Optional, A string containing the error message. &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#code-to-convert-a-python-string-to-bytes"&gt;
  &lt;/a&gt;
  Code to convert a python string to bytes:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Using the encode method
&lt;/span&gt;
&lt;span class="c1"&gt;# initializing string 
&lt;/span&gt;&lt;span class="n"&gt;str_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Join our freelance network"&lt;/span&gt;

&lt;span class="n"&gt;str_1_encoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'UTF-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#printing the encode string 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_1_encoded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#printing individual bytes
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;str_1_encoded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output is the same as above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s"&gt;'Join our freelance network'&lt;/span&gt;
&lt;span class="mi"&gt;74&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="mi"&gt;105&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="mi"&gt;117&lt;/span&gt; &lt;span class="mi"&gt;114&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="mi"&gt;102&lt;/span&gt; &lt;span class="mi"&gt;114&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="mi"&gt;108&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt; &lt;span class="mi"&gt;116&lt;/span&gt; &lt;span class="mi"&gt;119&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="mi"&gt;114&lt;/span&gt; &lt;span class="mi"&gt;107&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar to the &lt;code&gt;encode()&lt;/code&gt; method, the &lt;code&gt;decode()&lt;/code&gt; method can be used to convert bytes to strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Using the encode method
&lt;/span&gt;
&lt;span class="c1"&gt;#initializing string 
&lt;/span&gt;&lt;span class="n"&gt;str_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Join our freelance network"&lt;/span&gt;

&lt;span class="n"&gt;str_1_encoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'UTF-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#printing the encode string 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_1_encoded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#decoding the string
&lt;/span&gt;&lt;span class="n"&gt;str_1_decoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str_1_encoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_1_decoded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s"&gt;'Join our freelance network'&lt;/span&gt;
&lt;span class="n"&gt;Join&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;freelance&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#limitations-and-caveats-python-string-to-byte"&gt;
  &lt;/a&gt;
  Limitations and Caveats - Python String to Byte
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Both the methods solve the same problem efficiently and choosing a particular method would boil down to one’s personal choice. However, I would recommend the second method for beginners. &lt;/li&gt;
&lt;li&gt;The byte() method returns an immutable object. Hence, consider using the bytearray() if you are looking for a mutable object.&lt;/li&gt;
&lt;li&gt;While using the byte() methods the object must have a size 0 &amp;lt;=x &amp;lt; 256.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Django REST framework introduction Part 2: Auth, Token and Permissions</title>
      <author>Eric The Coder</author>
      <pubDate>Mon, 06 Sep 2021 11:43:29 +0000</pubDate>
      <link>https://dev.to/ericchapman/django-rest-framework-introduction-part-2-auth-token-and-permissions-4aad</link>
      <guid>https://dev.to/ericchapman/django-rest-framework-introduction-part-2-auth-token-and-permissions-4aad</guid>
      <description>&lt;p&gt;A web developer worthy of the name must be able to create a REST API. &lt;/p&gt;

&lt;p&gt;In part 1 we help you understand everything there is to know to build your first API using the Python language and the Django REST Framework.&lt;/p&gt;

&lt;p&gt;In part 2 we will secure our API. After all, not every action (ex. DELETE) can be authorized. We will add REST Framework authentication, token and permissions to our API.&lt;/p&gt;

&lt;p&gt;To not miss anything, click Follow and/or follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-the-next-step-"&gt;
  &lt;/a&gt;
  What is the next step ?
&lt;/h1&gt;

&lt;p&gt;The next step is to secure our API.&lt;/p&gt;

&lt;p&gt;Until now, anyone who knows our URL can send a read, create, update, and delete request to our API. Not good!&lt;/p&gt;

&lt;p&gt;So the goal being to allow create, update and the deletion of&lt;br&gt;
a post only for authenticated user and only allow those to update and delete their own posts&lt;/p&gt;

&lt;p&gt;In order to determine what the identity of the request user is, we will also have to add an authentication (login) to our API&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#how-authentication-work-in-rest-framework"&gt;
  &lt;/a&gt;
  How authentication work in REST Framework?
&lt;/h1&gt;

&lt;p&gt;There are several ways to manage authentication with REST-Framework.&lt;/p&gt;

&lt;p&gt;In this article, I will show you one that is often used: Token Authentication&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-token-authentication"&gt;
  &lt;/a&gt;
  What is Token Authentication?
&lt;/h2&gt;

&lt;p&gt;Token authentication allows users to verify their identity, and in return receive a unique access token. During the life of the token, users then access the API that the token has been issued for, rather than having to re-enter credentials each time they go back to the same API.&lt;/p&gt;

&lt;p&gt;Auth tokens work like a stamped ticket. The user retains access as long as the token remains valid. &lt;/p&gt;

&lt;p&gt;Token-based authentication is different from traditional password-based or server-based authentication techniques. Tokens offer a second layer of security, and administrators have detailed control over each action and transaction. &lt;/p&gt;

&lt;p&gt;In short, it means that when you will make a login request (ex: api/login), our API will give you back a Token.&lt;/p&gt;

&lt;p&gt;It will then be possible to use this Token to have access to certain action protected by the API (ex: DELETE api/posts/1)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-use-the-token"&gt;
  &lt;/a&gt;
  How to use the Token?
&lt;/h3&gt;

&lt;p&gt;To use the Token, In the request header, you need to add an 'Authorization' key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'Authorization' : 'Token 622af924b5e828dd35dd6'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here a JavaScript fetch() example to delete post no 3&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR_TOKEN_HERE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;api/posts/3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DELETE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Token &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#implement-a-token-base-auth-in-restframework"&gt;
  &lt;/a&gt;
  Implement a Token base auth in REST-Framework
&lt;/h1&gt;

&lt;p&gt;To implement this pattern in our API we need 2 things:&lt;/p&gt;

&lt;p&gt;First, we need to create a login API endpoint (ex: api/login). That login will authenticate users and return the Token.&lt;/p&gt;

&lt;p&gt;Second, we need to modify our update and delete API endpoint to allow only an authenticated user to perform those actions on their own posts. This will be implemented with the Authorization  and Permissions class in REST-Framework&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-login-endpoint"&gt;
  &lt;/a&gt;
  Create a Login endpoint
&lt;/h2&gt;

&lt;p&gt;That part will be pretty easy because REST-Framework already have a login view pre-created for us.&lt;/p&gt;

&lt;p&gt;In posts application folder, open views.py and add this code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.authtoken.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ObtainAuthToken&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;api_settings&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserLoginApiView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ObtainAuthToken&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;renderer_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api_settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_RENDERER_CLASSES&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Noted, for simplicity, I only show code related to the Login view. &lt;/p&gt;

&lt;p&gt;This UserLoginAPIView inherit from ObtainAuthToken that contain all the code to create the login view and all the methods to authenticate a user and return a Token.&lt;/p&gt;

&lt;p&gt;Next we need to create a URL that point to this login view&lt;/p&gt;

&lt;p&gt;Open posts application urls.py and add this URL path:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.routers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DefaultRouter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PostViewSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UserLoginApiView&lt;/span&gt;

&lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DefaultRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'posts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PostViewSet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'login/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UserLoginApiView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, in order to use the REST-Framework auth libraries, we need to add a reference to 'rest_framework.authtoken' to our project settings.py files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.admin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.auth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.contenttypes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.sessions'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.messages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.staticfiles'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'rest_framework'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'posts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'rest_framework.authtoken'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And re-run the 'migrate' terminal command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That action will create the database table to support authtoken functionalities&lt;/p&gt;

&lt;p&gt;If everything code right, you can start your server and visit api/login&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---kQSUaIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630685480035/dM8ByXLl8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---kQSUaIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630685480035/dM8ByXLl8.png" alt="Screen Shot 2021-09-03 at 12.09.10 PM.png"&gt;&lt;/a&gt;&lt;br&gt;
You can use your superuser credentials (we create in part one) to login.&lt;/p&gt;

&lt;p&gt;You can also add users with the admin panel if needed.&lt;/p&gt;

&lt;p&gt;Once logged in, the API will return you a Token&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jA0j0aGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630685525396/6QWezrTyP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jA0j0aGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630685525396/6QWezrTyP.png" alt="Screen Shot 2021-09-03 at 12.11.01 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#add-authorization-and-permissions-to-update-and-delete-api-endpoint"&gt;
  &lt;/a&gt;
  Add Authorization and Permissions to Update and Delete API endpoint
&lt;/h2&gt;

&lt;p&gt;Here the objective is to limit access to our API. In particular, the Update and Delete actions. So only users who are authenticated will be able to perform these actions.&lt;/p&gt;

&lt;p&gt;But we also need to check if the authenticated user is the author of the post. Only author of their own posts will be able to do Update and Delete request.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#permissions-class"&gt;
  &lt;/a&gt;
  Permissions class
&lt;/h2&gt;

&lt;p&gt;REST-Framework has a class to manage permissions. We can create one and associated the permissions class to our API view&lt;/p&gt;

&lt;p&gt;Create a new file under posts application folder and name it permissions.py. Inside that file add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UpdateOwnProfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BasePermission&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_object_permission&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SAFE_METHODS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the action to be executed is considered "safe" (request.method in permissions.SAFE_METHODS), it can be executed (return True)&lt;/p&gt;

&lt;p&gt;If on the other hand, the action is not safe (Create, Update and Delete action) then it checks that the authenticated user and are the author of the post are the same (obj.user.id == request.user.id) &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bind-permissions-to-our-api"&gt;
  &lt;/a&gt;
  Bind permissions to our API
&lt;/h2&gt;

&lt;p&gt;Now that our Permission object is created, we can bind it to our API.&lt;/p&gt;

&lt;p&gt;In posts application folder, open views.py and add this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;viewsets&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.authentication&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TokenAuthentication&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.permissions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IsAuthenticatedOrReadOnly&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PostSerializer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.permissions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UpdateOwnProfile&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostViewSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewsets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelViewSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PostSerializer&lt;/span&gt;
    &lt;span class="n"&gt;authentication_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TokenAuthentication&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
    &lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;UpdateOwnProfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;IsAuthenticatedOrReadOnly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We add 2 thing here. First we set the authetification_classes to TokenAuthetification and then we set our permissions_classes to our custom permission class. The isAuthenticatedOrReadOnly will allow authenticated users to perform any request. Requests for unauthorised users will only be permitted if the request method is one of the "safe" methods like GET (read post).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#test-your-api"&gt;
  &lt;/a&gt;
  Test your API
&lt;/h1&gt;

&lt;p&gt;Our API is now secure, it's time to give it a try.&lt;/p&gt;

&lt;p&gt;This time we cannot test our API in the browser because for auth we need a way to send the Token with the request.&lt;/p&gt;

&lt;p&gt;We will use an API testing application.  Postman is one of the most use app but today I will use a VSCode extension call Thunder Client. It's a light version of Postman easy to install and use&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-thunder-client"&gt;
  &lt;/a&gt;
  Install Thunder Client
&lt;/h2&gt;

&lt;p&gt;From VSCode, go to extension, find and then install the Thunder Client application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3QG9U36w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630700311629/p3C5ldzD2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QG9U36w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630700311629/p3C5ldzD2.png" alt="Screen Shot 2021-09-03 at 1.23.35 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once install, open the app and click on 'New Request' button and type the API URL you want to test (ex: api/posts) then click 'Send' and the response would appear in the right portion of the screen&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JFxnSi0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630700423487/fs7Kk-aar.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JFxnSi0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630700423487/fs7Kk-aar.png" alt="Screen Shot 2021-09-03 at 1.26.11 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#login-and-token-example"&gt;
  &lt;/a&gt;
  Login and Token example
&lt;/h2&gt;

&lt;p&gt;To login you need to do a POST request with credentials to api/login. First, click the 'New Request' button, choose POST from the request type dropdown, type the request URL (ex: api/login/), click the Body tab and add the credential in JSON format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ericthecoder"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"yourpassword"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click 'Send' and the response section on the right should display the received Token&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iUmty7xs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630700564087/41uFQpwhn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iUmty7xs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630700564087/41uFQpwhn.png" alt="Screen Shot 2021-09-03 at 1.43.40 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-a-new-post"&gt;
  &lt;/a&gt;
  Create a new Post
&lt;/h2&gt;

&lt;p&gt;Now that we have our Token, we can do action that required permissions. So let's create a new Post.&lt;/p&gt;

&lt;p&gt;Click 'New Request', choose POST from dropdown and type the create post URL (ex: api/posts/). Click the Body tab and enter the create post JSON Content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"My First Blog Title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"My first Blog body Content"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click send, and the API will return a 401 Unauthorized message. That's normal, since we did not send the Token with the request.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qm2ALMB4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630701932795/EKLef-iqc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qm2ALMB4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630701932795/EKLef-iqc.png" alt="Screen Shot 2021-09-03 at 4.45.20 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do so, click on Headers tab and add the Authorization key and Token&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ihTlEaQ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630701832037/ApHnuluJu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ihTlEaQ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630701832037/ApHnuluJu.png" alt="Screen Shot 2021-09-03 at 1.54.49 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click 'Send' and now the Post should be created with success&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HlX9rink--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630701977930/vZLDaygrG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HlX9rink--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630701977930/vZLDaygrG.png" alt="Screen Shot 2021-09-03 at 1.54.36 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#test-all-api-endpoints"&gt;
  &lt;/a&gt;
  Test all API endpoints
&lt;/h1&gt;

&lt;p&gt;With your Token now in hand, you can now test all our API endpoint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;POST api/login/ &lt;span class="o"&gt;(&lt;/span&gt;login with credentials&lt;span class="o"&gt;)&lt;/span&gt;

GET api/posts &lt;span class="o"&gt;(&lt;/span&gt;Read all post&lt;span class="o"&gt;)&lt;/span&gt;
POST api/posts/ &lt;span class="o"&gt;(&lt;/span&gt;Create a new post&lt;span class="o"&gt;)&lt;/span&gt;

GET api/posts/1/ &lt;span class="o"&gt;(&lt;/span&gt;Read a specific Post&lt;span class="o"&gt;)&lt;/span&gt;
PUT api/posts/1/ &lt;span class="o"&gt;(&lt;/span&gt;Update a specific Post&lt;span class="o"&gt;)&lt;/span&gt;
PATCH api/posts/1/ &lt;span class="o"&gt;(&lt;/span&gt;Partial Update a specific Post&lt;span class="o"&gt;)&lt;/span&gt;
DELETE api/posts/1/ &lt;span class="o"&gt;(&lt;/span&gt;Delete a specific Post&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#end-of-part-2"&gt;
  &lt;/a&gt;
  End of part 2
&lt;/h3&gt;

&lt;p&gt;That's all for today. You now have a secure API, in the next part, we will discuss search, pagination and image upload.&lt;/p&gt;

&lt;p&gt;To not miss anything, click Follow and/or also follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>beginners</category>
      <category>turorial</category>
    </item>
    <item>
      <title>Appwrite, Android and Realtime</title>
      <author>Jake Barnby</author>
      <pubDate>Mon, 06 Sep 2021 11:32:07 +0000</pubDate>
      <link>https://dev.to/appwrite/appwrite-android-and-realtime-42jd</link>
      <guid>https://dev.to/appwrite/appwrite-android-and-realtime-42jd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-appwrite"&gt;
  &lt;/a&gt;
  🤔 What is Appwrite?
&lt;/h2&gt;

&lt;p&gt;Appwrite is a new open-source, end-to-end, backend server for web and mobile developers that allows you to build apps much faster. It abstracts and simplifies common development tasks behind REST APIs and tools, helping you build advanced apps faster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urjHK2-R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxb9c2wc0o8k4y0vbfzn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urjHK2-R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxb9c2wc0o8k4y0vbfzn.gif" alt="Social Media posts (7)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appwrite-for-android"&gt;
  &lt;/a&gt;
  🤖 Appwrite for Android
&lt;/h2&gt;

&lt;p&gt;Appwrite provides &lt;strong&gt;sleek REST APIs&lt;/strong&gt; for various common features that are required for web and mobile application development such as &lt;strong&gt;cloud functions&lt;/strong&gt;, &lt;strong&gt;database&lt;/strong&gt;, &lt;strong&gt;storage&lt;/strong&gt;, as well as &lt;strong&gt;realtime&lt;/strong&gt; support for each service so that we as developers can focus on our applications rather than on backend implementations. This makes Appwrite very suitable for those of us who want to build Android applications. In this tutorial we'll build an Android realtime product application using Appwrite and the new &lt;strong&gt;realtime&lt;/strong&gt; API, let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  📝 Prerequisites
&lt;/h2&gt;

&lt;p&gt;In order to continue with this tutorial, you need to have access to an Appwrite console, and either an existing project, or permission to create one. If you have not already installed Appwrite, please do so. Installing Appwrite is really simple following Appwrite's official &lt;a href="https://appwrite.io/docs/installation"&gt;installation docs&lt;/a&gt;. Installation should only take around 2 minutes. Once installed, login to your console and &lt;strong&gt;create a new Project&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-setup"&gt;
  &lt;/a&gt;
  💾 Database Setup
&lt;/h2&gt;

&lt;p&gt;In the Appwrite console, let's select the project that we will be using for our Android app. If you don't have a project yet, you can easily create one by clicking on the &lt;strong&gt;Create Project&lt;/strong&gt; button. Once inside, select &lt;strong&gt;Database&lt;/strong&gt; from the left sidebar. On the database page:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click on the &lt;strong&gt;Add Collection&lt;/strong&gt; button&lt;/li&gt;
&lt;li&gt;Inside the dialog:

&lt;ol&gt;
&lt;li&gt;Set the collection name to &lt;strong&gt;Products&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;Create&lt;/strong&gt; button&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will then create a collection, and you will be redirected to the new collection's page where we can define its rules. Define the following rules, then click the &lt;strong&gt;Update&lt;/strong&gt; button.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Name&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;label: Name&lt;/li&gt;
&lt;li&gt;Key: name&lt;/li&gt;
&lt;li&gt;Rule Type: Text&lt;/li&gt;
&lt;li&gt;Required: true&lt;/li&gt;
&lt;li&gt;Array: false&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Description&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;label: Description&lt;/li&gt;
&lt;li&gt;Key: description&lt;/li&gt;
&lt;li&gt;Rule Type: Text&lt;/li&gt;
&lt;li&gt;Required: true&lt;/li&gt;
&lt;li&gt;Array: false&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SKU&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;label: SKU&lt;/li&gt;
&lt;li&gt;Key: sku&lt;/li&gt;
&lt;li&gt;Rule Type: Text&lt;/li&gt;
&lt;li&gt;Required: true&lt;/li&gt;
&lt;li&gt;Array: false&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Price&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;label: Price&lt;/li&gt;
&lt;li&gt;Key: price&lt;/li&gt;
&lt;li&gt;Rule Type: Numeric&lt;/li&gt;
&lt;li&gt;Required: true&lt;/li&gt;
&lt;li&gt;Array: false&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Image URL&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;label: Image URL&lt;/li&gt;
&lt;li&gt;Key: imageUrl&lt;/li&gt;
&lt;li&gt;Rule Type: Text&lt;/li&gt;
&lt;li&gt;Required: true&lt;/li&gt;
&lt;li&gt;Array: false&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UiNuMbn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guf4hngrqboiabzkba2g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UiNuMbn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guf4hngrqboiabzkba2g.png" alt="Products Collection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that the collection is created, we can move on to setting up the Android application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-android-project-and-dependencies"&gt;
  &lt;/a&gt;
  ⚙️ Setup Android Project and Dependencies
&lt;/h2&gt;

&lt;p&gt;Using Android Studio, create a new Android Application project choosing the &lt;strong&gt;Empty Activity&lt;/strong&gt; template. Once the project is created, add the following dependencies to your app's &lt;code&gt;build.gradle(.kts)&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// Appwrite&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"io.appwrite:sdk-for-android:0.2.0"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Appcompat, LiveData, ViewModel and Activity extensions&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'androidx.appcompat:appcompat:1.3.0'&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'androidx.activity:activity-ktx:1.3.1'&lt;/span&gt;

    &lt;span class="c1"&gt;// JSON&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'com.google.code.gson:gson:2.8.7'&lt;/span&gt;

    &lt;span class="c1"&gt;// Image loading&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'com.github.bumptech.glide:glide:4.12.0'&lt;/span&gt;
    &lt;span class="n"&gt;kapt&lt;/span&gt; &lt;span class="s1"&gt;'com.github.bumptech.glide:compiler:4.12.0'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-add-android-platform"&gt;
  &lt;/a&gt;
  ➕️ Add Android Platform
&lt;/h2&gt;

&lt;p&gt;To initialize the Appwrite SDK and start interacting with Appwrite services, you first need to add a new Android platform to your project. To add a new platform, go to your Appwrite console, select your project (or create one if you haven't already), and click the &lt;strong&gt;Add Platform&lt;/strong&gt; button on the project Dashboard.&lt;/p&gt;

&lt;p&gt;From the options, choose to add a new Android platform and add your app credentials.&lt;/p&gt;

&lt;p&gt;Add your app name and package name. Your package name is generally the &lt;code&gt;applicationId&lt;/code&gt; in your app-level &lt;a href="https://github.com/abnegate/android-realtime-starter/blob/main/app/build.gradle"&gt;&lt;code&gt;build.gradle&lt;/code&gt;&lt;/a&gt; file. You may also find your package name in your &lt;a href="https://github.com/abnegate/android-realtime-starter/blob/main/app/src/main/AndroidManifest.xml"&gt;&lt;code&gt;AndroidManifest.xml&lt;/code&gt;&lt;/a&gt; file. By registering a new platform, you are allowing your app to communicate with the Appwrite API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-product-model"&gt;
  &lt;/a&gt;
  🧱 Create the Product Model
&lt;/h2&gt;

&lt;p&gt;We now need to create a model to represent a product on the Android side. Create a new Kotlin file &lt;code&gt;Product.kt&lt;/code&gt; and declare a simple data class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;sku&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;imageUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-views"&gt;
  &lt;/a&gt;
  ⚒️ Building Views
&lt;/h2&gt;

&lt;p&gt;Now, open your &lt;code&gt;app/src/main/res/layout/activity_main.xml&lt;/code&gt; and update the layout as following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;androidx.constraintlayout.widget.ConstraintLayout&lt;/span&gt;
        &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
        &lt;span class="na"&gt;xmlns:app=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res-auto"&lt;/span&gt;
        &lt;span class="na"&gt;xmlns:tools=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/tools"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="na"&gt;tools:context=&lt;/span&gt;&lt;span class="s"&gt;".MainActivity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;androidx.recyclerview.widget.RecyclerView&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/recyclerProducts"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"0dp"&lt;/span&gt;
            &lt;span class="na"&gt;app:layoutManager=&lt;/span&gt;&lt;span class="s"&gt;"androidx.recyclerview.widget.GridLayoutManager"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintBottom_toTopOf=&lt;/span&gt;&lt;span class="s"&gt;"@id/btnSubscribe"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintEnd_toEndOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintStart_toStartOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintTop_toTopOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:spanCount=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/btnSubscribe"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_margin=&lt;/span&gt;&lt;span class="s"&gt;"16dp"&lt;/span&gt;
            &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"Subscribe to products"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintBottom_toBottomOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintLeft_toLeftOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintRight_toRightOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintTop_toBottomOf=&lt;/span&gt;&lt;span class="s"&gt;"@id/recyclerProducts"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/androidx.constraintlayout.widget.ConstraintLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll notice that the activity is quite simple; we only have a &lt;code&gt;Button&lt;/code&gt; to subscribe and a &lt;code&gt;RecyclerView&lt;/code&gt;. The &lt;code&gt;RecyclerView&lt;/code&gt; will be used to display the product collection in realtime as we add new products. We'll now need to define a separate view that will be used to represent each of the individual products.&lt;/p&gt;

&lt;p&gt;Create a new layout from &lt;code&gt;File &amp;gt; New &amp;gt; Layout Resource File&lt;/code&gt;, name it &lt;code&gt;item_product.xml&lt;/code&gt; and add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;androidx.constraintlayout.widget.ConstraintLayout&lt;/span&gt;
        &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
        &lt;span class="na"&gt;xmlns:app=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res-auto"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"120dp"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_margin=&lt;/span&gt;&lt;span class="s"&gt;"2dp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;ImageView&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/imgProduct"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"120dp"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintBottom_toBottomOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintEnd_toEndOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintStart_toStartOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintTop_toTopOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;View&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"34dp"&lt;/span&gt;
            &lt;span class="na"&gt;android:alpha=&lt;/span&gt;&lt;span class="s"&gt;"0.6"&lt;/span&gt;
            &lt;span class="na"&gt;android:background=&lt;/span&gt;&lt;span class="s"&gt;"@color/black"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintBottom_toBottomOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintEnd_toEndOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintStart_toStartOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/txtName"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_margin=&lt;/span&gt;&lt;span class="s"&gt;"8dp"&lt;/span&gt;
            &lt;span class="na"&gt;android:textColor=&lt;/span&gt;&lt;span class="s"&gt;"@color/white"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintBottom_toBottomOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintStart_toStartOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/txtPrice"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_margin=&lt;/span&gt;&lt;span class="s"&gt;"8dp"&lt;/span&gt;
            &lt;span class="na"&gt;android:textColor=&lt;/span&gt;&lt;span class="s"&gt;"@color/white"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintBottom_toBottomOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
            &lt;span class="na"&gt;app:layout_constraintEnd_toEndOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/androidx.constraintlayout.widget.ConstraintLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the pieces of our &lt;code&gt;RecyclerView&lt;/code&gt; are in place, and we can move on to setting up the &lt;code&gt;ViewModel&lt;/code&gt;, where most of the heavy lifting happens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-view-model"&gt;
  &lt;/a&gt;
  👩‍🔧 Create View Model
&lt;/h2&gt;

&lt;p&gt;Create &lt;code&gt;app/src/main/java/com/example/realtimestarter/RealtimeViewModel.kt&lt;/code&gt; and update it with following code. Make sure to replace all the property values near the top of the file with your own values which can be found in your Appwrite console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.realtimestarter&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.content.Context&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.util.Log&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.lifecycle.*&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.Client&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.extensions.toJson&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.models.RealtimeResponseEvent&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.models.RealtimeSubscription&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.services.Account&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.services.Database&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.services.Realtime&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.launch&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RealtimeViewModel&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewModel&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nc"&gt;LifecycleObserver&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;endpoint&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"YOUR_ENDPOINT"&lt;/span&gt;          &lt;span class="c1"&gt;// Replace with your endpoint&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;projectId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"YOUR_PROJECT_ID"&lt;/span&gt;       &lt;span class="c1"&gt;// Replace with your project ID&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;collectionId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"YOUR_COLLECTION_ID"&lt;/span&gt; &lt;span class="c1"&gt;// Replace with your product collection ID&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;realtime&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;lazy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Realtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;account&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;lazy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;db&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;lazy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;_productStream&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;MutableLiveData&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;productStream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;LiveData&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_productStream&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;_productDeleted&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;MutableLiveData&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;productDeleted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;LiveData&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_productDeleted&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;RealtimeSubscription&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;subscribeToProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;buildClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;viewModelScope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Create a session so that we are authorized for realtime&lt;/span&gt;
            &lt;span class="nf"&gt;createSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="c1"&gt;// Attach an error logger to our realtime instance&lt;/span&gt;
            &lt;span class="n"&gt;realtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doOnError&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// Subscribe to document events for our collection and attach the handle product callback&lt;/span&gt;
            &lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;realtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;"collections.${collectionId}.documents"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;payloadType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;handleProductMessage&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;//createDummyProducts()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;handleProductMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;RealtimeResponseEvent&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="s"&gt;"database.documents.create"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"database.documents.update"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;_productStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;postValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="s"&gt;"database.documents.delete"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;_productDeleted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;postValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;createDummyProducts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// For testing; insert 100 products while subscribed&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://dummyimage.com/600x400/cde/fff"&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;until&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createDocument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;collectionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone $i"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"sku-$i"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;buildClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;createSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createAnonymousSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@OnLifecycleEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Lifecycle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ON_STOP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;closeSocket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Activity is being destroyed; close our socket connection if it's open&lt;/span&gt;
        &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;ViewModel&lt;/code&gt; contains a function to call the realtime API and subscribe to notifications for create/update/delete events relating to any documents within the collection with id &lt;code&gt;collectionId&lt;/code&gt;, that is also visible to our user.&lt;/p&gt;

&lt;p&gt;To allow observing the incoming realtime updates from outside itself, the &lt;code&gt;ViewModel&lt;/code&gt; also exposes the &lt;code&gt;LiveData&lt;/code&gt; property &lt;code&gt;productStream&lt;/code&gt;, which we'll utilize in our &lt;code&gt;Activity&lt;/code&gt; later on to get realtime updates in our &lt;code&gt;RecyclerView&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recycler-view"&gt;
  &lt;/a&gt;
  ♻️ Recycler View
&lt;/h2&gt;

&lt;p&gt;There's 2 more files we need to add to get our &lt;code&gt;RecyclerView&lt;/code&gt; working:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;ProductAdapter&lt;/code&gt;, which will handle creating and binding a view for each &lt;code&gt;Product&lt;/code&gt; as they're added to the database. The &lt;code&gt;DiffUtil.ItemCallback&lt;/code&gt; provided in the constructor will be used to calculate list update diffs on a background thread, then post any changes on the UI thread, perfect for realtime! You can find more information on &lt;code&gt;DiffUtil&lt;/code&gt; &lt;a href="https://developer.android.com/reference/androidx/recyclerview/widget/DiffUtil"&gt;here&lt;/a&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.realtimestarter&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.view.LayoutInflater&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.view.ViewGroup&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.recyclerview.widget.DiffUtil&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.recyclerview.widget.ListAdapter&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductAdapter&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nc"&gt;ListAdapter&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;ProductViewHolder&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;DiffUtil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ItemCallback&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;areItemsTheSame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oldItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="n"&gt;oldItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sku&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;newItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sku&lt;/span&gt;

        &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;areContentsTheSame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oldItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="n"&gt;oldItem&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;newItem&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreateViewHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;viewType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;ProductViewHolder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;view&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;LayoutInflater&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inflate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;item_product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;ProductViewHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onBindViewHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ProductViewHolder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;item&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProductImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imageUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;submitNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;current&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toMutableList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;index&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;indexOfFirst&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sku&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sku&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nf"&gt;submitList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;submitDeleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;submitList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;currentList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toMutableList&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;ProductViewHolder&lt;/code&gt; which describes a single &lt;code&gt;Product&lt;/code&gt; view and metadata about it's position in the &lt;code&gt;RecyclerView&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.realtimestarter&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.view.View&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.widget.ImageView&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.widget.TextView&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.recyclerview.widget.RecyclerView&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.bumptech.glide.Glide&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductViewHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;RecyclerView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ViewHolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;nameView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;TextView&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txtName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;priceView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;TextView&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txtPrice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ImageView&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imgProduct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;nameView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;setPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;priceView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"\$$price"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;setProductImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Glide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;centerCrop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;into&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#activity"&gt;
  &lt;/a&gt;
  💆 Activity
&lt;/h2&gt;

&lt;p&gt;With everything else in place, lets tie it all together in our &lt;code&gt;MainActivity&lt;/code&gt;. Open &lt;code&gt;app/src/main/java/com/example/realtimestarter/MainActivity.kt&lt;/code&gt; and update like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.realtimestarter&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.os.Bundle&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.widget.Button&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.activity.viewModels&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.appcompat.app.AppCompatActivity&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.recyclerview.widget.RecyclerView&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RealtimeActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;viewModel&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;viewModels&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RealtimeViewModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activity_realtime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;button&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;btnSubscribe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscribeToProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;adapter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ProductAdapter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;recycler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RecyclerView&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recyclerProducts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;recycler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adapter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt;

        &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productStream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;submitNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productDeleted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;submitDeleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;lifecycle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onStop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onStop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;lifecycle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;removeObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-get-realtime"&gt;
  &lt;/a&gt;
  🏎️ Let's Get Realtime
&lt;/h2&gt;

&lt;p&gt;That's it, all that's left is to run the application, then add some documents. When running on your emulator or device, click &lt;strong&gt;Subscribe&lt;/strong&gt; to start listening for realtime updates.&lt;/p&gt;

&lt;p&gt;Head back to your Appwrite console and navigate to the &lt;code&gt;Products&lt;/code&gt; collection we created earlier. From here, we can start adding new documents and see them appear in our app.&lt;/p&gt;

&lt;p&gt;As soon you add a product in the console, you'll see them appear in the UI of your app! That's the real beauty of Appwrite Realtime, as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tX7FdcC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://s9.gifyu.com/images/products-realtime90a165133e674618.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tX7FdcC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://s9.gifyu.com/images/products-realtime90a165133e674618.gif" alt="Products GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🥂 Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed building this Realtime Application with Appwrite and Android. The full source for this application is available in the &lt;a href="https://github.com/abnegate/android-realtime-starter"&gt;Demo Realtime Application&lt;/a&gt; repository. Let us know if you have any feedback or suggestions. Looking forward to seeing what the community can create with Appwrite Realtime and Android!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-more"&gt;
  &lt;/a&gt;
  🎓 Learn More
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/getting-started-with-android"&gt;Getting Started With Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/playground-for-android"&gt;Android Playground&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs"&gt;Appwrite Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>android</category>
      <category>opensource</category>
      <category>news</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>All about Functions and Scopes in JavaScript</title>
      <author>Souvik Jana</author>
      <pubDate>Mon, 06 Sep 2021 11:01:18 +0000</pubDate>
      <link>https://dev.to/sjsouvik/all-about-functions-and-scopes-in-javascript-1ac5</link>
      <guid>https://dev.to/sjsouvik/all-about-functions-and-scopes-in-javascript-1ac5</guid>
      <description>&lt;p&gt;Hello everyone, we would be covering all about JS functions, callbacks, scopes, closures in-depth here which would help you to &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;understand different types of functions declaration &lt;/li&gt;
&lt;li&gt;make better use of functions&lt;/li&gt;
&lt;li&gt;understand how different scopes and scope chain work in JS&lt;/li&gt;
&lt;li&gt;learn about closures and how to use it &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, keep reading till the end and I hope you'll learn something from it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h3&gt;

&lt;p&gt;Functions allow us to package up lines of code so that we can use (and reuse) a block of code in our programs. Sometimes, they take some values as &lt;code&gt;parameters&lt;/code&gt; to do the operation and return some value as a result of the operation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="c1"&gt;//a, b are the parameters of this function&lt;/span&gt;
     &lt;span class="c1"&gt;//code to do the operation&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//return statement&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//invoking the function; 2, 3 are arguments here &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#firstclass-citizen"&gt;
  &lt;/a&gt;
  First-Class Citizen
&lt;/h3&gt;

&lt;p&gt;Functions are considered as First-Class Citizen in JavaScript, which means we can do anything we want with functions.&lt;/p&gt;

&lt;p&gt;We can&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;store function in a variable&lt;/li&gt;
&lt;li&gt;pass a function as an argument to another function&lt;/li&gt;
&lt;li&gt;return a function from another function&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#function-expressions"&gt;
  &lt;/a&gt;
  Function Expressions
&lt;/h3&gt;

&lt;p&gt;When a function is stored inside a variable it's called a &lt;strong&gt;function expression&lt;/strong&gt;. This can be named or anonymous. If a function doesn't have any name and is stored in a variable, then it would be known as &lt;strong&gt;anonymous function expression&lt;/strong&gt;. Otherwise, it would be known as &lt;strong&gt;named function expression&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Anonymous function expression&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Named function expression&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtractResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subtractResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#callbacks"&gt;
  &lt;/a&gt;
  Callbacks
&lt;/h3&gt;

&lt;p&gt;Storing a function in a variable makes it really easy to pass a function to another function as an argument. A function that takes other functions as arguments or returns a function is known as &lt;strong&gt;higher-order function&lt;/strong&gt;. A function that is passed as an argument into another function is known as &lt;strong&gt;callback&lt;/strong&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//function expression `nameLength`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nameLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Given Name &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; chars long`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Given Name Souvik is 6 chars long&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;showLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Souvik&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nameLength&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//passing `nameLength` as a callback function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generally, we use callback function in array methods - &lt;code&gt;forEach()&lt;/code&gt;, &lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;reduce()&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scope"&gt;
  &lt;/a&gt;
  Scope
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Scope&lt;/strong&gt; in JS tells us what variables and functions are accessible and not accessible in a given part of the code. &lt;/p&gt;

&lt;p&gt;There're 3 kinds of scopes in JavaScript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Global scope&lt;/li&gt;
&lt;li&gt;Function scope&lt;/li&gt;
&lt;li&gt;Block scope&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Variables declared outside of all functions are known as global variables and in &lt;strong&gt;global scope&lt;/strong&gt;. Global variables are accessible anywhere in the program.&lt;/p&gt;

&lt;p&gt;Variables that are declared inside a function are called local variables and in &lt;strong&gt;function scope&lt;/strong&gt;. Local variables are accessible anywhere inside the function. &lt;/p&gt;

&lt;p&gt;The code inside a function has access to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the function's arguments&lt;/li&gt;
&lt;li&gt;local variables declared inside the function&lt;/li&gt;
&lt;li&gt;variables declared in its parent function's scope&lt;/li&gt;
&lt;li&gt;global variables
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Souvik&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;introduceMyself&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;audience&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;students&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     
     &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
           &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;audience&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, I am &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Hello students, I am Souvik&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;     
     &lt;span class="nx"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;introduceMyself&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Block scope&lt;/strong&gt; tells us that any variable declared inside a block ({}) can be accessed only inside that block. &lt;/p&gt;

&lt;p&gt;Now, what is &lt;strong&gt;block&lt;/strong&gt; 🤔? a block {} is used to group JavaScript statements together into 1 group so that can be used anywhere in the program where only 1 statement is expected to be written.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Block scope is related to variables declared with &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; only. Variables declared with &lt;code&gt;var&lt;/code&gt; do not have block scope.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Uncaught ReferenceError: a is not defined&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2 `as variables declared with `var` is functionally and globally scoped NOT block scoped`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scope-chain"&gt;
  &lt;/a&gt;
  Scope chain
&lt;/h3&gt;

&lt;p&gt;Whenever our code tries to access a variable during the function call, it starts the searching from local variables. And if the variable is not found, it'll continue searching in its outer scope or parent functions' scope until it reaches the global scope and completes searching for the variable there. Searching for any variable happens along the &lt;strong&gt;scope chain&lt;/strong&gt; or in different scopes until we get the variable.&lt;/p&gt;

&lt;p&gt;If the variable is not found in the global scope as well, a reference error is thrown.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Souvik&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;introduceMyself&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;audience&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;students&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
     &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
           &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;audience&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, my name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Hello students, my name is Souvik&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;     
     &lt;span class="nx"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;introduceMyself&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the given example above, when the code attempts to access variable &lt;code&gt;name&lt;/code&gt; inside the &lt;code&gt;introduce()&lt;/code&gt; function, it didn't get the variable there and tried to search in its parent function's (&lt;code&gt;introduceMyself()&lt;/code&gt;) scope. And as it was not there, it finally went up to global scope to access the variable and got the value of the variable &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variable-shadowing"&gt;
  &lt;/a&gt;
  Variable shadowing
&lt;/h3&gt;

&lt;p&gt;If we declare a variable with the same name as another variable in the scope chain, the variable with local scope will shadow the variable at the outer scope. This is known as &lt;strong&gt;variable shadowing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Example 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Abhijit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Government&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Souvik&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Private&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//as `var` is NOT block scoped(globally scoped here), it'll update the value &lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Souvik&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Private&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Abhijit&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Private&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example 2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Abhijit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Government&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showDetails&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Souvik&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Private&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//`var` is functionally scoped here, so it'll create new reference with the given value for organization&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Souvik&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Private&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;showDetails&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Abhijit&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Government&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case of example 1, the &lt;code&gt;name&lt;/code&gt; variable is shadowing the variable with the same name at the outer scope inside the block as we have used &lt;code&gt;let&lt;/code&gt; to declare the variable. But, the &lt;code&gt;sector&lt;/code&gt; variable is also updating the value at the same time as we have used &lt;code&gt;var&lt;/code&gt; to declare it. And as we know &lt;code&gt;var&lt;/code&gt; is functionally and globally scoped, the declaration with the same name(&lt;code&gt;sector&lt;/code&gt;) inside the block will update the value at the same reference.&lt;/p&gt;

&lt;p&gt;Whereas in case of example 2, the &lt;code&gt;sector&lt;/code&gt; variable inside the function is function scoped and will create a new reference which will just shadow the variable with the same name declared outside.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#closure"&gt;
  &lt;/a&gt;
  Closure
&lt;/h3&gt;

&lt;p&gt;Closure is an ability of a function to remember the variables and functions that are declared in its outer scope.&lt;/p&gt;

&lt;p&gt;MDN defines closure as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the combination of a function bundled together with references to its surrounding state or the &lt;strong&gt;lexical environment&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, if you're thinking 🤔 what's &lt;strong&gt;lexical environment&lt;/strong&gt;? function's local environment along with its parent function's environment forms lexical environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;closureDemo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt;  &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;
           &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;innerFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;closureDemo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//returns the definition of inner function&lt;/span&gt;
&lt;span class="nx"&gt;innerFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, when the &lt;code&gt;closureDemo()&lt;/code&gt; function is called, it'll return the inner function along with its lexical scope. Then when we attempt to execute the returned function, it'll try to log the value of &lt;code&gt;a&lt;/code&gt; and get the value from its lexical scope's reference. This is called &lt;strong&gt;closure&lt;/strong&gt;. Even after the outer function's execution, the returned function still holds the reference of the lexical scope.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Currying&lt;/li&gt;
&lt;li&gt;Memoization&lt;/li&gt;
&lt;li&gt;Module design pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Discussing these in detail would take another blog 😀. So, will do it later sometime to discuss problems and solutions using a closure.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Overconsumption of memory might lead up to the memory leak as the innermost function holds the reference of the lexical scope and the variables declared in its lexical scope won't be garbage collected even after the outer function has been executed. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#immediatelyinvoked-function-expressioniife"&gt;
  &lt;/a&gt;
  Immediately-Invoked Function Expression(IIFE)
&lt;/h3&gt;

&lt;p&gt;An immediately-invoked function expression or IIFE(pronounced as iify) is a function that's called immediately once it's defined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Currently writing a blog on JS functions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're basically wrapping a function in parenthesis and then adding a pair of parenthesis at the end to invoke it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#passing-arguments-into-iife"&gt;
  &lt;/a&gt;
  Passing arguments into IIFE
&lt;/h3&gt;

&lt;p&gt;We can also pass arguments into IIFE. The second pair of parenthesis not only can be used to invoke the function immediately but also can be used to pass any arguments into the IIFE.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Given name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Given name is Souvik&lt;/span&gt;
&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Souvik&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#iife-and-private-scope"&gt;
  &lt;/a&gt;
  IIFE and private scope
&lt;/h3&gt;

&lt;p&gt;If we can use IIFE along with closure, we can create a private scope and can protect some variables from being accessed externally. The same idea is used in module design pattern to keep variables private.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//module pattern&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Souvik Jana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//private variable&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi, I am &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//undefined&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Hi, I am Souvik Jana&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;IIFE helps to prevent access to the &lt;code&gt;name&lt;/code&gt; variable here. And the returned object's &lt;code&gt;introduce()&lt;/code&gt; method retains the scope of its parent function(due to closure), we got a public interface to interact with &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That's all 😀. Thanks for reading it till now🙏.&lt;/p&gt;

&lt;p&gt;If you want to read more on these, refer to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions"&gt;Functions MDN&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"&gt;Closures MDN&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE"&gt;IIFE MDN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Share this blog with your network if you found it useful and feel free to comment if you've any doubts about the topic.&lt;/p&gt;

&lt;p&gt;You can connect 👋 with me on &lt;a href="https://github.com/sjsouvik"&gt;GitHub&lt;/a&gt;, &lt;a href="https://twitter.com/sjsouvik"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/souvik-jana"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>No code - No backend Form sender for developers

Send your &lt;form&gt; without a backend</title>
      <author>Marc Garcia Torrent</author>
      <pubDate>Mon, 06 Sep 2021 10:43:15 +0000</pubDate>
      <link>https://dev.to/magarrent/no-code-no-backend-form-sender-for-developers-send-your-form-without-a-backend-3jb1</link>
      <guid>https://dev.to/magarrent/no-code-no-backend-form-sender-for-developers-send-your-form-without-a-backend-3jb1</guid>
      <description>&lt;p&gt;Welcome to @actionforms_io! 🚀&lt;/p&gt;

&lt;p&gt;No code - No backend Form sender for developers&lt;/p&gt;

&lt;p&gt;Send your &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; without a backend&lt;/p&gt;

&lt;p&gt;Join now:  &lt;a href="https://www.actionforms.io/"&gt;https://www.actionforms.io/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devlive</category>
      <category>backend</category>
      <category>forms</category>
      <category>developers</category>
    </item>
    <item>
      <title>Programming For Hours- 5 Tips To Stay Productive</title>
      <author>Jaskirat Singh</author>
      <pubDate>Mon, 06 Sep 2021 10:24:33 +0000</pubDate>
      <link>https://dev.to/jaskirat1325/programming-for-hours-5-tips-to-stay-productive-2cfk</link>
      <guid>https://dev.to/jaskirat1325/programming-for-hours-5-tips-to-stay-productive-2cfk</guid>
      <description>&lt;p&gt;There are times when you have to code like straight for hours. But is it actually practically possible to work effectively on something on which you need both Mental focus and Thought process. If you ask me I would say yes it is possible to do so. But, You do need to involve some hacks and tricks to stay productive. Here are a few very common ways to stay focused and attentive while your hands are on keyboard for a code.&lt;br&gt;&lt;br&gt;
    ## Table Of Contents&lt;br&gt;
        * &lt;a href="#Music"&gt;Use of music&lt;/a&gt;&lt;br&gt;
        * &lt;a href="#drink"&gt;Always Have Something To Drink&lt;/a&gt;&lt;br&gt;
        * &lt;a href="#desk"&gt;Have Everything On Desk&lt;/a&gt;&lt;br&gt;
        * &lt;a href="#Time"&gt;No Time Peeking&lt;/a&gt;&lt;br&gt;
        * &lt;a href="#sanitizer"&gt;carry hand sanitizer&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-music"&gt;
  &lt;/a&gt;
  1) Music&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Generally speaking this is one of the most effective methods to stay focused in long hours of continuous programming. I have seen and tried this method myself. Even if your code is not running &lt;a href="https://goscreen.in/benefits-of-music/"&gt;Music&lt;/a&gt; will make you stay calm and not lose your cool. You won't get frustrated quickly and you will just keep on trying. Every time I use to code, I carried one earpiece along with me always.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-always-have-something-to-drink"&gt;
  &lt;/a&gt;
  2) Always Have Something To Drink&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r-JtspMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbpjoggfhjyvuyquusgs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r-JtspMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbpjoggfhjyvuyquusgs.jpg" alt="A drink while we work"&gt;&lt;/a&gt;&lt;br&gt;
   Many might be thinking that If we indulge in drinking something. Eventually we need to go to the bathroom. Well the thing is I am not saying you to drink a whole bottle or soft drink or something. But, Drink when you start feeling exhausted. This will give you a sense of relaxation and freshness. Again one thing I must make clear here these are not something scientifically proven facts. They just work for me as well as many others I know. That is why I am suggesting this to you.When I code I always have my water bottle along with me. This is just how I stick with my work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-have-everything-on-desk"&gt;
  &lt;/a&gt;
  3) Have Everything On Desk&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is something which is not just applicable to those who write programs, But is for everyone around who have long sitting hours. You want to study whole sunday for test? this is how we do it. Having everything on your desk is just not good but a great practice. Because if you have to stand up from your seat after every few minutes it will eventually break the momentum you created for hours of sitting. I don't think anyone want to do that right.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-no-time-peeking"&gt;
  &lt;/a&gt;
  4) No Time Peeking&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xabES1fL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://goscreen.in/wp-content/uploads/2021/08/Confused-e1630254124717.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xabES1fL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://goscreen.in/wp-content/uploads/2021/08/Confused-e1630254124717.png" alt="girl confused"&gt;&lt;/a&gt;&lt;br&gt;
    You probably might be thinking that what do I mean with this time peeking think. It actually means that when you are Programming, Don't look at the time any way. What you should do is buy a watch in which you can set it to beep after every one hour. This will surely be very efficient way of stay up with the time. You just need to remember that with every beep that hear time is passing. You also have to do other stuff right so wind it up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-carry-a-hand-sanitizer-or-wet-wipes"&gt;
  &lt;/a&gt;
  5) carry a Hand sanitizer or wet wipes&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Now you know this already that you need to use the bathroom before you start your programming or study. But you should carry a hand sanitizer too. Sometimes you just need your hands clean for any reason. This is when hand sanitizer comes to play. Also it is suggested to have wet wipes with you. Why let's suppose you got some glue on your hands and sanitizer can't do much but wipes can.&lt;/p&gt;

&lt;p&gt;Which one of these interest you. I can't wait to see your response in the comment section. Make sure to ask questions which you have. I will love to answer them all. Or maybe you just want to share an experience that is also welcomed. With that said see you later CODERS!&lt;br&gt;
Image credits - &lt;a href="https://Goscreen.in"&gt;GoScreen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
