<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Speed up your development with Git aliases 🚀</title>
      <author>Jaakko</author>
      <pubDate>Sun, 28 Nov 2021 19:02:34 +0000</pubDate>
      <link>https://dev.to/bjakyt/speed-up-your-development-with-git-aliases-c0j</link>
      <guid>https://dev.to/bjakyt/speed-up-your-development-with-git-aliases-c0j</guid>
      <description>&lt;p&gt;Git aliases are a powerful workflow tool that creates shortcuts to frequently used Git commands. Using Git aliases will make you a faster and more efficient developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-aliases"&gt;
  &lt;/a&gt;
  Creating aliases
&lt;/h2&gt;

&lt;p&gt;Use the command below to create aliases, replacing &lt;code&gt;&amp;lt;alias&amp;gt;&lt;/code&gt; with the name of the alias and &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; with the command to be aliased:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUq1uXRV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fe18yrdgfo35yo9094bw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUq1uXRV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fe18yrdgfo35yo9094bw.png" alt="command" width="880" height="316"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, you can edit the global git configuration file and add all aliases at once, by opening the git configuration file by running &lt;code&gt;git config --global -e&lt;/code&gt; in your terminal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-aliases"&gt;
  &lt;/a&gt;
  Useful aliases
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ez8IyWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a091r6ic6d5tu0t0ax7a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ez8IyWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a091r6ic6d5tu0t0ax7a.png" alt=".gitconfig" width="880" height="1023"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm &lt;a href="https://twitter.com/bjakyt"&gt;@bjakyt&lt;/a&gt; on Twitter. Follow me for more!&lt;/p&gt;

</description>
      <category>git</category>
      <category>javascript</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Trigger Lambda Functions with event filtering</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 28 Nov 2021 18:58:26 +0000</pubDate>
      <link>https://dev.to/aws-builders/trigger-lambda-functions-with-event-filtering-2pnb</link>
      <guid>https://dev.to/aws-builders/trigger-lambda-functions-with-event-filtering-2pnb</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda functions&lt;/a&gt; recently announced an enhancement with event-triggers for &lt;a href="https://aws.amazon.com/dynamodb/"&gt;DynamoDB&lt;/a&gt;, &lt;a href="https://aws.amazon.com/sqs/"&gt;Amazon SQS&lt;/a&gt;, &lt;a href="https://aws.amazon.com/kinesis/"&gt;Amazon Kinesis&lt;/a&gt; as event sources which makes it easier for event based Lambda function triggers to get invoked only based on the filter expression.&lt;br&gt;
You can read about the official &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/aws-lambda-event-filtering-amazon-sqs-dynamodb-kinesis-sources/"&gt;announcement from AWS Blog post&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3eqXOgyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/919311122808807426/lo9aQouC_normal.jpg" alt="What’s New on AWS profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        What’s New on AWS
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @awswhatsnew
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      AWS Lambda now supports event filtering for Amazon SQS, Amazon DynamoDB, and Amazon Kinesis as event sources&lt;br&gt;&lt;br&gt;AWS Lambda now provides content filtering options for SQS, DynamoDB and Kinesis as event sources. With event pattern content filtering, cus... &lt;a href="https://t.co/U1Foai5g6p"&gt;aws.amazon.com/about-aws/what…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:51 PM - 26 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1464305840219852800" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1464305840219852800" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1464305840219852800" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;As it is known, AWS Lambda function supports for various event-sources for triggering the Lambda fn such as - DynamoDB Triggers, SQS Triggers, SNS Triggers and many more! For anyone who has worked with Lambda fn events, you would have to handle a lot of cases on your Lambda function code making it a &lt;em&gt;case&lt;/em&gt; or &lt;em&gt;execution&lt;/em&gt; handled by the developer. &lt;br&gt;
Eg. If you are working with DynamoDB Triggers/Streams, and your business logic needs the Lambda function to execute only when there is a new record &lt;em&gt;put&lt;/em&gt; into the DynamoDB table then you would have to check for the &lt;em&gt;eventName&lt;/em&gt; which has to be &lt;em&gt;INSERT&lt;/em&gt; and then proceed further otherwise, end the Lambda function execution. &lt;br&gt;
Now with the new &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/aws-lambda-event-filtering-amazon-sqs-dynamodb-kinesis-sources/"&gt;announcement&lt;/a&gt; it makes it easier to ensure the Lambda function gets invoked only based on the event source's filter which is configured. This not only enriches the developer's journey but also saves the milliseconds of Lambda function's execution making it a cost saving in the longer run.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#setting-up-eventfiltering-on-lambda-functions"&gt;
  &lt;/a&gt;
  Setting up event-filtering on Lambda functions
&lt;/h4&gt;

&lt;p&gt;The Lambda Fn triggers with event filtering can be added or updated whenever the Lambda Fn is created or updated via console, CLI, CloudFormation.&lt;br&gt;
When trying to add event-filtering from console, navigate to your Lambda function -&amp;gt; Configuration -&amp;gt; Triggers and add new. In the &lt;em&gt;additional&lt;/em&gt; settings option, &lt;em&gt;Filter criteria&lt;/em&gt; where you would have to enter a valid JSON object of your filter pattern/criteria.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PXZ-O9A4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cb4y9s22a7acw2bwyva.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PXZ-O9A4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cb4y9s22a7acw2bwyva.png" alt="Setting up event-filtering on Lambda functions" width="760" height="161"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this demo, we will add a DynamoDB trigger for filtering only &lt;code&gt;"eventName":"INSERT"&lt;/code&gt;. And to do so, we will have to add a valid JSON for the matching filter criteria.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"eventName"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"INSERT"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note, for adding DynamoDB Triggers, your Lambda fn should have the respective IAM policy which grants your Lambda fn access to DynamoDB. &lt;br&gt;
The same from CLI can be performed with the bash command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws lambda create-event-source-mapping &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--function-name&lt;/span&gt; DynamoDBEventFiltering &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--batch-size&lt;/span&gt; 100 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--starting-position&lt;/span&gt; LATEST &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--event-source-arn&lt;/span&gt; arn:aws:dynamodb:us-east-1:XXXXXXXXXX:table/cars-demo &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--filter-criteria&lt;/span&gt; &lt;span class="s1"&gt;'{"Filters": [{"Pattern": "{\"eventName\": ["INSERT"]}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The equivalent YAML template for CloudFormation or SAM is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;2010-09-09'&lt;/span&gt;
&lt;span class="na"&gt;Transform&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;AWS::Serverless-2016-10-31'&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;An Amazon DynamoDB trigger that logs the updates made to a table.&lt;/span&gt;
&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;DynamoDBEventFiltering&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;AWS::Serverless::Function'&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app.handler&lt;/span&gt;
      &lt;span class="na"&gt;Runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs14.x&lt;/span&gt;
      &lt;span class="na"&gt;CodeUri&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/&lt;/span&gt;
      &lt;span class="na"&gt;MemorySize&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;128&lt;/span&gt;
      &lt;span class="na"&gt;Timeout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
      &lt;span class="na"&gt;Events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;cars-demo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;DynamoDB&lt;/span&gt;
          &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Stream&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;CarsDemoDynamoDB.StreamArn&lt;/span&gt;
            &lt;span class="na"&gt;StartingPosition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TRIM_HORIZON&lt;/span&gt;
            &lt;span class="na"&gt;BatchSize&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;
            &lt;span class="na"&gt;Filters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Pattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;eventName"&lt;/span&gt; &lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;INSERT"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="pi"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The event filtering should follow a strict JSON format defined. You can find the rules &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html"&gt;here&lt;/a&gt;.&lt;br&gt;
To test the Lambda function, you would need to do a DynamoDB operation such as - &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; only for the DynamoDB Streams to trigger the Lambda function. If the same event JSON is used as Lambda Fn invoke JSON it would execute as the event-filtering is supported with the integration of DynamoDB, SQS, Kinesis. When performing actions such as creating an item on DynamoDB, updating it and deleting the same item, the DynamoDB Streams has triggered the Lambda fn only for the &lt;em&gt;INSERT&lt;/em&gt;/&lt;code&gt;put&lt;/code&gt; operation as defined by event-trigger filter criteria. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r09wYpDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/en33g1clqs4yp7scto0v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r09wYpDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/en33g1clqs4yp7scto0v.png" alt="Event trigger" width="770" height="187"&gt;&lt;/a&gt;&lt;br&gt;
The other operations has not even invoked the Lambda function. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;AWS Lambda functions confirms on the &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/aws-lambda-event-filtering-amazon-sqs-dynamodb-kinesis-sources/"&gt;announcement AWS Blog post&lt;/a&gt; that there is no additional cost. The takeaway cookie here is with this event-filtering it saves the millsesonds of execution as the Lambda Fn is not even invoked which is a good save when the Lambda Fn is invoked millions of times on a production environment. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;The event-filtering for sources - DynamoDB, SQS and Kinesis helps Lambda Fn developers to integrate well with event-drivern architectures. This helps the developer experience in terms of integrating with DynamoDB, SQS and Kinesis but also it helps in saving cost as the Lambda Fn would not get invoked if the filter criteria is failed.&lt;br&gt;
You can also refer to the AWS Blog about the same with &lt;a href="https://aws.amazon.com/blogs/compute/filtering-event-sources-for-aws-lambda-functions/"&gt;Kinesis event filtering implementation by Ben Smith&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>eventdriven</category>
      <category>lambdafunctions</category>
    </item>
    <item>
      <title>Weekly Digest 47/2021</title>
      <author>Marco Biedermann</author>
      <pubDate>Sun, 28 Nov 2021 18:46:40 +0000</pubDate>
      <link>https://dev.to/marcobiedermann/weekly-digest-472021-3b58</link>
      <guid>https://dev.to/marcobiedermann/weekly-digest-472021-3b58</guid>
      <description>&lt;p&gt;Welcome to my Weekly Digest #47.&lt;/p&gt;

&lt;p&gt;This weekly digest contains a lot of interesting and inspiring articles, videos, tweets, podcasts, and designs I consumed during this week.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#interesting-articles-to-read"&gt;
  &lt;/a&gt;
  Interesting articles to read
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#dynamic-color-manipulation-with-css-relative-colors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Dynamic Color Manipulation with CSS Relative Colors&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;CSS relative colors enable the dynamic color manipulation in vanilla CSS since Sass’ color functions first came on the scene.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.jim-nielsen.com/2021/css-relative-colors/"&gt;Dynamic Color Manipulation with CSS Relative Colors&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-step-over-step-into-and-step-out-actions-in-visual-studio-code-debugger-explained"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Continue, Step Over, Step Into and Step Out actions in Visual Studio Code debugger explained&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Printing the result of your program to the console is a common practice, but being familiar with a debugger opens a new world of possibilities. To use the debugger with confidence, you need to understand the basic actions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pawelgrzybek.com/continue-step-over-step-into-and-step-out-actions-in-visual-studio-code-debugger-explained/"&gt;Continue, Step Over, Step Into and Step Out actions in Visual Studio Code debugger explained | pawelgrzybek.com&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-stunning-3d-scenes-with-react-three-fiber"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to build stunning 3D scenes with React Three Fiber&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;WebGL is the magic sauce behind &lt;a href="https://solarstorm.netlify.app/"&gt;Solar Storm&lt;/a&gt; , an audio-reactive music video that renders live in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://varun.ca/modular-webgl/"&gt;How to build stunning 3D scenes with React Three Fiber&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#some-great-videos-i-watched-this-week"&gt;
  &lt;/a&gt;
  Some great videos I watched this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#swift-in-100-seconds"&gt;
  &lt;/a&gt;
  Swift in 100 Seconds
&lt;/h3&gt;

&lt;p&gt;Swift is a modern programming language developed by Apple. It is commonly used to code apps for iOS and macOS, but is open-source and can be used outside of Apple’s walled garden.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nAchMctX4YA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/fireship_dev"&gt;Fireship&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remix-is-a-new-javascript-framework-you-must-try"&gt;
  &lt;/a&gt;
  Remix is a new JavaScript framework you must try
&lt;/h3&gt;

&lt;p&gt;Remix is a new React-based JavaScript framework that supports server-side rendering. It comes from the team behind React Router and provides a fresh take on full-stack web app development.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/r4B69HAOXnA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/fireship_dev"&gt;Fireship&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remix-run-speedrun-pokemon"&gt;
  &lt;/a&gt;
  Remix Run Speedrun - Pokemon
&lt;/h3&gt;

&lt;p&gt;Is Remix Run more than just hype? Let’s find out by building out a multi-page Pokemon SPA to show you a bunch of the fundamentals: SSR data loading, Navigation, API Routes, page routes and parameters, and more.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rgZkd-RAYfE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/jherr"&gt;Jack Herrington&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useful-github-repositories"&gt;
  &lt;/a&gt;
  Useful GitHub repositories
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#html2canvas"&gt;
  &lt;/a&gt;
  &lt;strong&gt;html2canvas&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The script allows you to take "screenshots" of webpages or parts of it, directly on the user's browser.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/niklasvh"&gt;
        niklasvh
      &lt;/a&gt; / &lt;a href="https://github.com/niklasvh/html2canvas"&gt;
        html2canvas
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Screenshots with JavaScript
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
html2canvas&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://html2canvas.hertzen.com" rel="nofollow"&gt;Homepage&lt;/a&gt; | &lt;a href="https://github.com/niklasvh/html2canvas/releases"&gt;Downloads&lt;/a&gt; | &lt;a href="https://github.com/niklasvh/html2canvas/discussions/categories/q-a"&gt;Questions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitter.im/niklasvh/html2canvas?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Gitter"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/niklasvh/html2canvas/workflows/CI/badge.svg?branch=master"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_qiFQYdi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/niklasvh/html2canvas/workflows/CI/badge.svg%3Fbranch%3Dmaster" alt="CI"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.org/package/html2canvas" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ff02962102b4abe31056ca7004f80a324a34a214701f0e84aa6b8fe0a3423519/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f68746d6c3263616e7661732e737667" alt="NPM Downloads"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.org/package/html2canvas" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/37240f7e7d3aa83d472bc4a87d3e2bbf98876bb47291760f3a273872c5637ba6/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f68746d6c3263616e7661732e737667" alt="NPM Version"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
JavaScript HTML renderer&lt;/h4&gt;
&lt;p&gt;The script allows you to take "screenshots" of webpages or parts of it, directly on the users browser. The screenshot is based on the DOM and as such may not be 100% accurate to the real representation as it does not make an actual screenshot, but builds the screenshot based on the information available on the page.&lt;/p&gt;
&lt;h3&gt;
How does it work?&lt;/h3&gt;
&lt;p&gt;The script renders the current page as a canvas image, by reading the DOM and the different styles applied to the elements.&lt;/p&gt;
&lt;p&gt;It does &lt;strong&gt;not require any rendering from the server&lt;/strong&gt;, as the whole image is created on the &lt;strong&gt;client's browser&lt;/strong&gt;. However, as it is heavily dependent on the browser, this library is &lt;em&gt;not suitable&lt;/em&gt; to be used in nodejs
It doesn't magically circumvent any browser content policy restrictions either, so rendering cross-origin content will require a &lt;a href="https://github.com/niklasvh/html2canvas/wiki/Proxies"&gt;proxy&lt;/a&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/niklasvh/html2canvas"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#machine-learning-for-beginners-a-curriculum"&gt;
  &lt;/a&gt;
  Machine Learning for Beginners - A Curriculum
&lt;/h3&gt;

&lt;p&gt;12 weeks, 26 lessons, 52 quizzes, classic Machine Learning for all&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/microsoft"&gt;
        microsoft
      &lt;/a&gt; / &lt;a href="https://github.com/microsoft/ML-For-Beginners"&gt;
        ML-For-Beginners
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      12 weeks, 26 lessons, 52 quizzes, classic Machine Learning for all
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/ML-For-Beginners/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/5de80cbb57075704e04fe747ad3ad191aa6f34c131df08e56c0d64fd87abcfe8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6963726f736f66742f4d4c2d466f722d426567696e6e6572732e737667" alt="GitHub license"&gt;&lt;/a&gt;
&lt;a href="https://GitHub.com/microsoft/ML-For-Beginners/graphs/contributors/"&gt;&lt;img src="https://camo.githubusercontent.com/5928183d1e2b214910584f0a1a33cef45a70531548904b2257343e04d0b94249/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f6d6963726f736f66742f4d4c2d466f722d426567696e6e6572732e737667" alt="GitHub contributors"&gt;&lt;/a&gt;
&lt;a href="https://GitHub.com/microsoft/ML-For-Beginners/issues/"&gt;&lt;img src="https://camo.githubusercontent.com/aab9f79d64b8b1bf143c160c806b5c79f6cee50240592502c57f312113f7383f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6d6963726f736f66742f4d4c2d466f722d426567696e6e6572732e737667" alt="GitHub issues"&gt;&lt;/a&gt;
&lt;a href="https://GitHub.com/microsoft/ML-For-Beginners/pulls/"&gt;&lt;img src="https://camo.githubusercontent.com/0a604cca2c6363c6af0501543ef3a6565b7b82fd2ff894be8e417cf8db7d27c3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f6d6963726f736f66742f4d4c2d466f722d426567696e6e6572732e737667" alt="GitHub pull-requests"&gt;&lt;/a&gt;
&lt;a href="http://makeapullrequest.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0ff11ed110cfa69f703ef0dcca3cee6141c0a8ef465e8237221ae245de3deb3d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="PRs Welcome"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://GitHub.com/microsoft/ML-For-Beginners/watchers/"&gt;&lt;img src="https://camo.githubusercontent.com/de9e0a6feb4334207b106185b7867b42c3d9fc189bc4adaf0b5733c93535353d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f77617463686572732f6d6963726f736f66742f4d4c2d466f722d426567696e6e6572732e7376673f7374796c653d736f6369616c266c6162656c3d5761746368" alt="GitHub watchers"&gt;&lt;/a&gt;
&lt;a href="https://GitHub.com/microsoft/ML-For-Beginners/network/"&gt;&lt;img src="https://camo.githubusercontent.com/fd710b83bb546a380eb15d0d154fcf63736a675d1736a3cd8825e638eb882502/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f6d6963726f736f66742f4d4c2d466f722d426567696e6e6572732e7376673f7374796c653d736f6369616c266c6162656c3d466f726b" alt="GitHub forks"&gt;&lt;/a&gt;
&lt;a href="https://GitHub.com/microsoft/ML-For-Beginners/stargazers/"&gt;&lt;img src="https://camo.githubusercontent.com/cfd66469d198134664186871e4dbf0d45d4c3904e9ad51f553d55080d55b5af2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6d6963726f736f66742f4d4c2d466f722d426567696e6e6572732e7376673f7374796c653d736f6369616c266c6162656c3d53746172" alt="GitHub stars"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Machine Learning for Beginners - A Curriculum&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;🌍 Travel around the world as we explore Machine Learning by means of world cultures 🌍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Azure Cloud Advocates at Microsoft are pleased to offer a 12-week, 26-lesson curriculum all about &lt;strong&gt;Machine Learning&lt;/strong&gt;. In this curriculum, you will learn about what is sometimes called &lt;strong&gt;classic machine learning&lt;/strong&gt;, using primarily Scikit-learn as a library and avoiding deep learning, which is covered in our forthcoming 'AI for Beginners' curriculum. Pair these lessons with our &lt;a href="https://aka.ms/datascience-beginners" rel="nofollow"&gt;'Data Science for Beginners' curriculum&lt;/a&gt;, as well!&lt;/p&gt;
&lt;p&gt;Travel with us around the world as we apply these classic techniques to data from many areas of the world. Each lesson includes pre- and post-lesson quizzes, written instructions to complete the lesson, a solution, an assignment, and more. Our project-based pedagogy allows you to learn while building, a proven way for new skills to 'stick'.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;✍️ Hearty thanks to our&lt;/strong&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/microsoft/ML-For-Beginners"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#mswjsdata"&gt;
  &lt;/a&gt;
  @mswjs/data
&lt;/h3&gt;

&lt;p&gt;Data modeling and relation library for testing JavaScript applications.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mswjs"&gt;
        mswjs
      &lt;/a&gt; / &lt;a href="https://github.com/mswjs/data"&gt;
        data
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Data modeling and relation library for testing JavaScript applications.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://github.com/mswjs/datalogo.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gChELmS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/mswjs/datalogo.svg" alt="Data library logo" width="124"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
&lt;code&gt;@mswjs/data&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;Data modeling and relation library for testing JavaScript applications.&lt;/p&gt;



&lt;h2&gt;
Motivation&lt;/h2&gt;
&lt;p&gt;When testing API interactions you often need to mock data. Instead of keeping a hard-coded set of fixtures, this library provides you with must-have tools for data-driven API mocking:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An intuitive interface to model data;&lt;/li&gt;
&lt;li&gt;The ability to create relationships between models;&lt;/li&gt;
&lt;li&gt;The ability to query data in a manner similar to an actual database.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Getting started&lt;/h2&gt;
&lt;h3&gt;
Install&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;$ npm install @mswjs/data --save-dev
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
$ yarn add @mswjs/data --save-dev&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Describe data&lt;/h3&gt;
&lt;p&gt;With this library, you're modeling data using the &lt;code&gt;factory&lt;/code&gt; function. That function accepts an object where each key represents a &lt;em&gt;model name&lt;/em&gt; and the values are &lt;em&gt;model definitions&lt;/em&gt;. A model definition is an object where the keys represent model properties and the values are value getters.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;// src/mocks/db.js&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;factory&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;primaryKey&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'@mswjs/data'&lt;/span&gt;
&lt;span class="pl-k"&gt;export&lt;/span&gt; &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;db&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;factory&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-c"&gt;// Create a&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mswjs/data"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dribbble-shots"&gt;
  &lt;/a&gt;
  dribbble shots
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#food-delivery-service-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Food Delivery service app&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q8LXtuZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/600809/screenshots/16950838/media/5e46e7a599ad3a97357caee93241dfb6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q8LXtuZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/600809/screenshots/16950838/media/5e46e7a599ad3a97357caee93241dfb6.png" alt="by [Md Sakib](https://dribbble.com/shots/16950838-Food-Delivery-service-app-Food-search-Order-process)" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16950838-Food-Delivery-service-app-Food-search-Order-process"&gt;Md Sakib&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nft-marketplace"&gt;
  &lt;/a&gt;
  &lt;strong&gt;NFT Marketplace&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVmVfFiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/4458653/screenshots/16951108/media/c8d2acca8766785e24005a0bc940efe3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVmVfFiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/4458653/screenshots/16951108/media/c8d2acca8766785e24005a0bc940efe3.png" alt="by [Shaharia Hossen](https://dribbble.com/shots/16951108-NFT-Marketplace-Mobile-App)" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16951108-NFT-Marketplace-Mobile-App"&gt;Shaharia Hossen&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#streetart-berlin"&gt;
  &lt;/a&gt;
  &lt;strong&gt;StreetArt ___ Berlin&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b7MVE3g---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2514863/screenshots/16953019/media/12b4a8670590f80c8307aa8db3d4d4a0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b7MVE3g---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2514863/screenshots/16953019/media/12b4a8670590f80c8307aa8db3d4d4a0.png" alt="by [Sally Kutarashvili](https://dribbble.com/shots/16953019-StreetArt-Berlin)" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16953019-StreetArt-Berlin"&gt;Sally Kutarashvili&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tweets"&gt;
  &lt;/a&gt;
  Tweets
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
    &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6OVUzOal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FEk98LOVgAQzlUA.jpg" alt="unknown tweet media content"&gt;
    &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TTZOvLCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1332018227942019073/Jh666gw3_normal.jpg" alt="Adam Argyle profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Adam Argyle
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/argyleink"&gt;@argyleink&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Atomic CSS Keyframes&lt;br&gt;✅ smaller purpose&lt;br&gt;✅ composable&lt;br&gt;&lt;br&gt;code example: &lt;br&gt;slide fade in, wait 3s, fade out&lt;br&gt;&lt;a href="https://t.co/zIZqZezh9P"&gt;codepen.io/argyleink/pen/…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:44 PM - 20 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1462069218451542017" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1462069218451542017" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1462069218451542017" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WtqGx4H6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1414990564408262661/r6YemvF9_normal.jpg" alt="GitHub profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        GitHub
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @github
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      You can now specify which images to use for light or dark mode in your Markdown files 🌑 ☀️ 🕶️   Check out the docs for more information &lt;a href="https://t.co/9pRbdhiIBE"&gt;docs.github.com/github/writing…&lt;/a&gt; &lt;a href="https://t.co/jql278Jtv0"&gt;twitter.com/ashtom/status/…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:14 PM - 24 Nov 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Thomas Dohmke
          &lt;/span&gt;
          @ashtom
        &lt;/div&gt;
        By popular request - you can now display different images in Markdown for light ☀️ and dark 🌑 color modes. Append #gh-light-mode-only or #gh-dark-mode-only to the image URL and voilà! 🎉 Works for Markdown files in repos, gists, and your profile/org READMEs. 1/2 https://t.co/9gu83ndMbN
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1463556704436637707" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1463556704436637707" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1463556704436637707" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qNlyXtWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1464016250057674755/pu/img/B9kx_b60wQoJceVS.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--UiTl-gGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1190423128293416960/HzO-Okya_normal.jpg" alt="Neil Sardesai profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Neil Sardesai
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @neilsardesai
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Connect Four with radio buttons 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      23:40 PM - 25 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1464016279673704456" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1464016279673704456" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1464016279673704456" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tnHPvSZQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/880516403807363072/LYumJ6VI_normal.jpg" alt="TypeScript Daily profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        TypeScript Daily
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @typescriptdaily
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      TypeScript 4.5 has been released! It implements the `Awaited` type, introduces a way to override a built-in lib (similar to how `@types/` support works), and as always ships with many other improvements.&lt;br&gt;&lt;br&gt;🔗 &lt;a href="https://t.co/mKzWrl2Sju"&gt;devblogs.microsoft.com/typescript/ann…&lt;/a&gt;&lt;br&gt;✍️ by &lt;a href="https://twitter.com/drosenwasser"&gt;@drosenwasser&lt;/a&gt;&lt;br&gt;🏷 &lt;a href="https://twitter.com/hashtag/TypeScript"&gt;#TypeScript&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/JavaScript"&gt;#JavaScript&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:03 PM - 26 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1464233231247716353" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1464233231247716353" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1464233231247716353" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h2&gt;
  &lt;a href="#picked-pens"&gt;
  &lt;/a&gt;
  Picked Pens
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#harry-potter-challenge"&gt;
  &lt;/a&gt;
  Harry potter challenge
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/PoKgzmG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/ChallengesCss"&gt;CSS Challenges&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ring-of-balls"&gt;
  &lt;/a&gt;
  Ring of Balls
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/amit_sheen/embed/yLzBgaN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/amit_sheen"&gt;Amit Sheen&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#podcasts-worth-listening"&gt;
  &lt;/a&gt;
  Podcasts worth listening
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#codepen-radio-cpshots"&gt;
  &lt;/a&gt;
  CodePen Radio – &lt;strong&gt;cpshots&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We’ve been doing our own screenshotting for a long time now, but like all software, we’re always working on it for various ever-changing reasons.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/6XzBvoA0rU8RpccJMw0X0i"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-troubleshooting"&gt;
  &lt;/a&gt;
  Syntax – Troubleshooting
&lt;/h3&gt;

&lt;p&gt;In this episode of Syntax, Scott and Wes talk about ways they troubleshoot issues with their code.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/16OqVYFo9BlHfRLwnOPdwF"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Thank you for reading, talk to you next week, and stay safe! 👋&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Contribute like a Pro.            Git-branching model (Part 2)</title>
      <author>Stanley Ruheza</author>
      <pubDate>Sun, 28 Nov 2021 18:36:30 +0000</pubDate>
      <link>https://dev.to/maen/contribute-like-a-progit-branching-model-part-2-4k75</link>
      <guid>https://dev.to/maen/contribute-like-a-progit-branching-model-part-2-4k75</guid>
      <description>&lt;p&gt;&lt;strong&gt;Refresh&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From &lt;a href="https://maenblog.tech/contribute-like-a-pro"&gt;Part 1&lt;/a&gt; of this article, we discussed about &lt;code&gt;--no-ff&lt;/code&gt; flag when merging. It helps to keep track of log messages of events happened in your sub-branch (feature branch) and you can easily roll back. Now lets look something else...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#releasing-process"&gt;
  &lt;/a&gt;
  Releasing process
&lt;/h2&gt;

&lt;p&gt;Like the feature branch, it is a separate branch but created as sub-branch of &lt;code&gt;develop&lt;/code&gt; branch. It is a branch which contains all necessary environment, support and features for production of your application. It's the branch you need only during production process. Two main things can be found in this branch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Meta-data(version number - tags, build dates)&lt;/li&gt;
&lt;li&gt;Minor bug fixes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-a-release-branch"&gt;
  &lt;/a&gt;
  Create a release branch
&lt;/h2&gt;

&lt;p&gt;When do you create a &lt;code&gt;release&lt;/code&gt; branch? You should only create a release branch when all targeted features are fully developed and merged back to &lt;code&gt;develop&lt;/code&gt; branch ready for release. &lt;strong&gt;Divide and Conquer mindset&lt;/strong&gt; is very important when dealing with your software. I advise you to build your software in &lt;strong&gt;feature-wise&lt;/strong&gt;  that is, you release one feature after another until the entire software is complete. If you're building alone, you &lt;strong&gt;should not&lt;/strong&gt; start building another feature before releasing a current feature. Divide and Conquer mindset will save your time and energy too.&lt;/p&gt;

&lt;p&gt;For example, say version 0.2 is a current production release (in develop branch) and we have a new release coming up called version 0.3. We will branch off from the current state in develop branch and create a new sub-branch of the develop branch called &lt;code&gt;release-0.3&lt;/code&gt;. It's name will point to the coming release, shifting from version 0.2 to 0.3, a new release! This is how you'll do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Create a release branch
$ git checkout -b release-0.3 develop

#Bump the version from 0.2 to 0.3
$ ./bump-version.sh 0.3

#Make a commit
$ git commit -m "Bump v0.2 to v0.3"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that  &lt;code&gt;bump-version.sh&lt;/code&gt; is just a custom bash script you'll write to change version of your software (you can also use &lt;a href="https://docs.github.com/en/actions/learn-github-actions"&gt;git actions&lt;/a&gt; or CI tools) &lt;/p&gt;

&lt;p&gt;You can fix some minor bugs in this branch rather than doing it on the &lt;code&gt;develop&lt;/code&gt; branch. But it is not advised to add large new features here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#release-a-release-branch"&gt;
  &lt;/a&gt;
  Release a release branch
&lt;/h2&gt;

&lt;p&gt;Now the software is ready for production. Our sweet feature in a &lt;code&gt;release&lt;/code&gt; branch should be merged into the &lt;code&gt;master&lt;/code&gt;. Remember in &lt;a href="https://maenblog.tech/contribute-like-a-pro"&gt;Part 1&lt;/a&gt;, &lt;code&gt;master&lt;/code&gt; branch will always contain "clean codes" with no bugs at this point in time. After merging our branch, we should &lt;code&gt;tag&lt;/code&gt; it, just to mark the branch with a summary of what we've done for the future reference. And finally, updating the develop branch. In summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Merge the release branch into master branch.&lt;/li&gt;
&lt;li&gt;Tagging the branch for future reference.&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;develop&lt;/code&gt; branch with clean codes so that the future development also contain the bug fixes.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Into master branch
$ git checkout master

#Merge the release into master 
$ git merge --no-ff release-0.3

#Tag it
$ git tag -a 0.3

#Into develop branch
$ git checkout develop

$ git merge --no-ff release-0.3

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-about-hotfix-branch"&gt;
  &lt;/a&gt;
  What about hotfix branch?
&lt;/h2&gt;

&lt;p&gt;As the name suggests, this is the branch which you'll create for the purpose of fixing bugs that maybe found (or arise) in a &lt;code&gt;master&lt;/code&gt; branch. But we said, master branch must contain "clean codes" right? So why bugs in a master branch?  Well, the answer is - software becomes real when reach to a user. That's when you realize the bugs - Uncaught fish :) Here's the snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Create a hotfix branch 
$ git checkout -b hotfix-0.3 master

#Fix the bugs and commit
$ ./hotfix-version.sh 0.3
$ git commit -m "Fixed bugs in production"

#Update the master branch
$ git checkout master
$ git merge --no-ff hotfix-0.3

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also update the &lt;code&gt;develop&lt;/code&gt; branch with this fix just to contain the same clean codebase. After the fix, it's your choice to delete the branch or leave it for your reference. Up to this point, your codebase should be stunning with &lt;strong&gt;zero conflict !&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Congratulations, you're Git ninja now!&lt;/p&gt;

</description>
      <category>git</category>
      <category>agile</category>
      <category>opensource</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Let's talk quality - Part 3</title>
      <author>Sociable Steve</author>
      <pubDate>Sun, 28 Nov 2021 18:12:12 +0000</pubDate>
      <link>https://dev.to/sociablesteve/lets-talk-quality-part-3-4ah5</link>
      <guid>https://dev.to/sociablesteve/lets-talk-quality-part-3-4ah5</guid>
      <description>&lt;p&gt;In my &lt;a href="https://dev.to/sociablesteve/lets-talk-quality-part-1-4ecm"&gt;first post&lt;/a&gt; I covered Operational Quality at a high level. The reality is that you might have written the cleanest, nicest code by all the metrics covered in my (last post)[&lt;a href="https://dev.to/sociablesteve/lets-talk-quality-part-2-3h60"&gt;https://dev.to/sociablesteve/lets-talk-quality-part-2-3h60&lt;/a&gt;], but that doesn't mean you're being efficient with the resources you have available.&lt;/p&gt;

&lt;p&gt;As you may recall, one of the aspects of a high quality system is that it's easily scale-able. In my mind this means there's an efficient use of resources so you can scale both horizontally (more instances) and vertically (bigger instances) as necessity requires.&lt;/p&gt;

&lt;p&gt;I've seen many examples of software engineers focusing only on the quality of the code, making their own lives easier, and ignoring the operational concerns until it's too late and systems have already broken down.&lt;/p&gt;

&lt;p&gt;In this post I'll discuss what metrics I think are good to measure and feed into a more holistic quality viewpoint.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-operational-quality"&gt;
  &lt;/a&gt;
  What is Operational Quality?
&lt;/h2&gt;

&lt;p&gt;When we write software we know that it'll need to run somewhere. That might be on a server, a PC, a mobile device, an embedded device, or somewhere else. Operational Quality is about how efficiently the resources in that execution environment are used, and how effective the application is at working with those resources when things need to scale.&lt;/p&gt;

&lt;p&gt;We also know that things will always go wrong, no matter how hard you try to make sure your system is robust enough, so there's a question around how well you can understand when things are going wrong, what's going wrong, and where it's going wrong.&lt;/p&gt;

&lt;p&gt;In my mind this includes a whole range of things, and a starting point of things to consider could be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memory usage&lt;/li&gt;
&lt;li&gt;CPU usage&lt;/li&gt;
&lt;li&gt;Network usage&lt;/li&gt;
&lt;li&gt;Disk usage&lt;/li&gt;
&lt;li&gt;Start-up times&lt;/li&gt;
&lt;li&gt;Responsiveness&lt;/li&gt;
&lt;li&gt;Appropriate Logging&lt;/li&gt;
&lt;li&gt;Monitoring and Alerting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's quite a bit to measure here. Some of this can be automatically tracked, and some requires a bit more insight from people to understand what 'appropriate' means.&lt;/p&gt;

&lt;p&gt;Let's talk about how I'd measure these.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tooling"&gt;
  &lt;/a&gt;
  Tooling
&lt;/h2&gt;

&lt;p&gt;I'm certainly not an expert in this area, and most of my experience is working with server environments rather than desktop or mobile applications. That said my go-to tooling for understanding resource usage seems to work for all these application, and that's &lt;a href="https://newrelic.com/"&gt;NewRelic&lt;/a&gt;. This gives details on resource usage and lets you start getting error traces.&lt;/p&gt;

&lt;p&gt;For a less costly setup in server environments I tend towards a couple of other stacks.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prometheus + AlertsManager + Grafana for resource usage monitoring and alerting&lt;/li&gt;
&lt;li&gt;ElasticSearch + LogStash + Kibana for log aggregation and interrogation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Understanding resource usage for desktop and mobile apps may require may require more specialised knowledge that I have at the moment, but NewRelic claims to have you covered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-appropriate-logging"&gt;
  &lt;/a&gt;
  What is Appropriate Logging?
&lt;/h2&gt;

&lt;p&gt;Appropriate logging in this case is about getting enough information to understand where errors are occurring, but not so many that your systems are getting overwhelmed. The actual amount of logs will vary from application to application, and there's no real studies I can point at as to what good looks like.&lt;/p&gt;

&lt;p&gt;The real test of if logging is appropriate or not comes from how easily things are investigated in an emergent situation, e.g. live incident, or suspected issue. This leads nicely on to the next section...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handling-live-problems"&gt;
  &lt;/a&gt;
  Handling Live Problems
&lt;/h2&gt;

&lt;p&gt;While you may have the most efficient resource usage possible and can scale like a pro, there will always be times when things break. How you handle them is another important operational concern, and the metrics that can be gathered from incident handling can help to understand quality in more depth. Metrics around incidents include things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mean-time-to-acknowledge (MTTA). How long did it take to know there was an issue and for the first response to acknowledge they were dealing with the issue.&lt;/li&gt;
&lt;li&gt;Mean-time-to-idenfity (MTTI). How long did it take to identify the cause of the issue&lt;/li&gt;
&lt;li&gt;Mean-time-to-resolve (MTTR). How long did it take to resolve the issue. This is a bit trickier to define, and could mean either service is restored OR the permanent fix is released&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While these metrics themselves aren't really a point of consideration in quality, any retrospective on incidents should aim to understand if the monitoring, alerting, and logging were at the right kind of level to help resolve the incident effectively. This is where the feedback of the quality around these metrics really comes from.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;There's a lot of variables in measuring resource usage, and different environments will require different understanding and tooling. Your best bet is working with your local, friendly SRE to see what they can do to help you get the metrics you need.&lt;/p&gt;

&lt;p&gt;In this post we've looked beyond just development quality and started to understand that how our systems run is equally important to a more holistic view of quality. Even if your specialty isn't operational it'll pay dividends in the future to at least understand what's happening to your software in the wild.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>🙅 Never copy/paste when you’re learning React (or any other library/language)</title>
      <author>Kyle Hoskins</author>
      <pubDate>Sun, 28 Nov 2021 17:48:43 +0000</pubDate>
      <link>https://dev.to/kyleapex/never-copypaste-when-youre-learning-react-or-anything-else-3jka</link>
      <guid>https://dev.to/kyleapex/never-copypaste-when-youre-learning-react-or-anything-else-3jka</guid>
      <description>&lt;p&gt;Learning a new language or library and &lt;strong&gt;thinking about copying and pasting&lt;/strong&gt; that Stack Overflow chunk of code, tutorial example, or "Getting Started" code block?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Think again!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why not?  Let's examine...&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-benefits-of-typing-it-out"&gt;
  &lt;/a&gt;
  The Benefits of "typing it out"
&lt;/h2&gt;

&lt;p&gt;Taking the extra time to type something out rather than copying and pasting it gives you several advantages:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#memory"&gt;
  &lt;/a&gt;
  🧠 Memory
&lt;/h3&gt;

&lt;p&gt;The learning period is the most important phase to take the extra time to ensure you're getting in actual practice.&lt;/p&gt;

&lt;p&gt;Take a breath, take it slow, and you will be thankful that you actually remember the syntax later. (... and don't worry, your code typing speed will become much faster! 🚀)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interviews"&gt;
  &lt;/a&gt;
  🧑‍💻 Interviews
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+C, Ctrl+P&lt;/code&gt; can be a good tool for speed in some cases, but it won't help much when you're expected to quickly code for yourself in a fast-paced, high pressure situation. &lt;/p&gt;

&lt;p&gt;Would you copy/paste or type-out the following basics?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev @testing-library/react
// It's beneficial to know terminal basics 
// like npm, git, etc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test('loads and displays greeting', () =&amp;gt; {
  render(&amp;lt;Fetch url="/greeting" /&amp;gt;)
  expect(screen.getByText('Load Greeting')).toBeInTheDocument()
})
// Without looking, can you write a complete test spec 
// file from scratch?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from 'react';
import IconButton from '@mui/material/IconButton';
import SplitRow from 'components/layout/SplitRow';
// Manually typing imports helps understand and remember
// libraries and project structure
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#refactoringreuse"&gt;
  &lt;/a&gt;
  ♻️ Refactoring/Reuse
&lt;/h3&gt;

&lt;p&gt;Sometimes the ease of copy/paste prevents us from realizing what should be refactored into its own method or component.&lt;/p&gt;

&lt;p&gt;You'll quickly become annoyed by typing repetitive code and start enjoying creating re-usable blocks as you code rather than coming back to it later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-quality"&gt;
  &lt;/a&gt;
  ✅ Code Quality
&lt;/h3&gt;

&lt;p&gt;When you're writing a new file/code block, it's tempting to copy/paste similar code from somewhere else in your project and make small adjustments.  &lt;/p&gt;

&lt;p&gt;However, hastily copy/paste/adjusting may leave you with a "hack" or other issues like sub-optimal naming conventions. Additionally, you may have already learned a better way to accomplish the task than in your previous code.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;I hope you'll enjoy copying/pasting less and coding more!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. Sometime's screen real estate is an issue, so I use a learning hack of copying and pasting into my file, typing out the same code above the pasted block, then deleting the pasted code&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Living in the Shell; ls [LS#5]</title>
      <author>Babak K. Shandiz</author>
      <pubDate>Sun, 28 Nov 2021 17:37:58 +0000</pubDate>
      <link>https://dev.to/babakks/living-in-the-shell-ls-ls5-68h</link>
      <guid>https://dev.to/babakks/living-in-the-shell-ls-ls5-68h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#-raw-ls-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;ls&lt;/code&gt; 🚚
&lt;/h2&gt;

&lt;p&gt;Lists directory content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#long-list-detailed-format-raw-l-endraw-"&gt;
  &lt;/a&gt;
  Long list (detailed format) &lt;code&gt;-l&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;drwxr-xr-x 5 babak babak       4096 Nov  1 12:49 Desktop
drwxr-xr-x 9 babak babak       4096 Nov 21 18:49 Documents
drwxr-xr-x 2 babak babak      20480 Nov 23 17:21 Pictures
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#show-directories-first-raw-groupdirectoriesfirst-endraw-"&gt;
  &lt;/a&gt;
  Show directories first &lt;code&gt;--group-directories-first&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;--group-directories-first&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#list-directory-itself-not-its-content-raw-d-endraw-"&gt;
  &lt;/a&gt;
  List directory itself, not its content &lt;code&gt;-d&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lhd&lt;/span&gt; Documents
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;drwxr-xr-x 9 babak babak 4.0K Nov 21 18:49 Documents
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#list-all-files-include-dotfiles-raw-a-endraw-"&gt;
  &lt;/a&gt;
  List all files (include dot-files) &lt;code&gt;-a&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#print-humanreadable-sizes-raw-h-endraw-"&gt;
  &lt;/a&gt;
  Print human-readable sizes &lt;code&gt;-h&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;drwxr-xr-x 5 babak babak 4.0K Nov  1 12:49 Desktop
drwxr-xr-x 9 babak babak 4.0K Nov 21 18:49 Documents
drwxr-xr-x 2 babak babak  20K Nov 23 17:21 Pictures
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#sort-by-time-raw-t-endraw-"&gt;
  &lt;/a&gt;
  Sort by time &lt;code&gt;-t&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lht&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;drwxr-xr-x 2 babak babak  20K Nov 23 17:21 Pictures
drwxr-xr-x 9 babak babak 4.0K Nov 21 18:49 Documents
drwxr-xr-x 5 babak babak 4.0K Nov  1 12:49 Desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#sort-by-size-raw-s-endraw-"&gt;
  &lt;/a&gt;
  Sort by size &lt;code&gt;-s&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lhs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reverse-sort-order-raw-r-endraw-"&gt;
  &lt;/a&gt;
  Reverse sort order &lt;code&gt;-r&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lhsr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;drwxr-xr-x 2 babak babak  20K Nov 23 17:21 Pictures
drwxr-xr-x 9 babak babak 4.0K Nov 21 18:49 Documents
drwxr-xr-x 5 babak babak 4.0K Nov  1 12:49 Desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

</description>
      <category>productivity</category>
      <category>linux</category>
      <category>bash</category>
      <category>devops</category>
    </item>
    <item>
      <title>Curved Timeline in CSS</title>
      <author>Jatin Sharma</author>
      <pubDate>Sun, 28 Nov 2021 17:24:49 +0000</pubDate>
      <link>https://dev.to/j471n/curved-css-timeline-5ab3</link>
      <guid>https://dev.to/j471n/curved-css-timeline-5ab3</guid>
      <description>&lt;p&gt;In this article, we are gonna build a curved timeline for your website which you can use later on in your portfolio to display your work history or maybe something else you want. Let's first look at what are we building -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7HNDGkZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/4PocJpY.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7HNDGkZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/4PocJpY.gif" alt="preview" width="555" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you have seen what we are up to so let's get hands in the code -&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"timeline"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"outer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- .... card before this --&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"info"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Title 1&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
          minim veniam, quis nostrud exercitation ullamco laboris nisi ut
          aliquip ex ea commodo consequat.
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- ..... you can add more div with "card" class --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the HTML code, the &lt;code&gt;timeline&lt;/code&gt; class is the main container and the &lt;code&gt;outer&lt;/code&gt; class is the wrapper for all the cards. and then we have a &lt;code&gt;card&lt;/code&gt; in which we add data.&lt;/p&gt;

&lt;p&gt;Now let's look at the CSS -&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Timeline Container */&lt;/span&gt;
&lt;span class="nc"&gt;.timeline&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--primary-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Card container */&lt;/span&gt;
&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* setting padding based on even or odd */&lt;/span&gt;
&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;odd&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;even&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* Global ::before */&lt;/span&gt;
&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;orangered&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Setting the border of top, bottom, left */&lt;/span&gt;
&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;odd&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-4.5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-4.5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Setting the border of top, bottom, right */&lt;/span&gt;
&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;even&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Removing the border if it is the first card */&lt;/span&gt;
&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:first-child::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-top-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Removing the border if it is the last card  and it's odd */&lt;/span&gt;
&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:last-child:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;odd&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-bottom-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Removing the border if it is the last card  and it's even */&lt;/span&gt;
&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:last-child:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;even&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-bottom-right-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Information about the timeline */&lt;/span&gt;
&lt;span class="nc"&gt;.info&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Title of the card */&lt;/span&gt;
&lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;orangered&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Timeline dot  */&lt;/span&gt;
&lt;span class="nc"&gt;.title&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;999px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;orangered&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* text right if the card is even  */&lt;/span&gt;
&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;even&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.info&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* setting dot to the left if the card is odd */&lt;/span&gt;
&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;odd&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.info&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.title&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-45px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* setting dot to the right if the card is odd */&lt;/span&gt;
&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;even&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.info&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.title&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-45px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#codepen-is-here"&gt;
  &lt;/a&gt;
  Codepen is Here
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/j471n/embed/vYJaLvm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;See the Pen &lt;a href="https://codepen.io/j471n/pen/vYJaLvm"&gt; css-timeline-with-curves&lt;/a&gt; by Jatin (&lt;a href="https://codepen.io/j471n"&gt;@j471n&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;This is just the beginning, you can customize it to the next level, and maybe I'll do in the future article to stay tuned for that if you have any suggestions then comment below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can now extend your support by buying me a Coffee.😊👇&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/j471n"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/timeline-with-css-4g2a"&gt;Timeline with CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/10-css-resources-that-you-should-bookmark-46l6"&gt;10 CSS Resources that you should bookmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/how-to-use-web-storage-api-3o28"&gt;How to use Web Storage API?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>An Example Shopping App Built with ReactJS, MongoDB, ExpressJS
</title>
      <author>Linh Truong Cong Hong</author>
      <pubDate>Sun, 28 Nov 2021 17:04:47 +0000</pubDate>
      <link>https://dev.to/linhtch90/an-example-shopping-app-built-with-reactjs-mongodb-expressjs-1a32</link>
      <guid>https://dev.to/linhtch90/an-example-shopping-app-built-with-reactjs-mongodb-expressjs-1a32</guid>
      <description>&lt;p&gt;I want to share with the community the source code of a fullstack web application that I have just developed using MERN (MongoDB, ExpressJS, ReactJS, NodeJS) stack demonstrating basic features of a bookstore.&lt;/p&gt;

&lt;p&gt;I hope this would be a good resource for anyone who enjoys learning Javascript in general and MERN stack in particular.&lt;/p&gt;

&lt;p&gt;The live demo is accessible at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bn-bookstore.herokuapp.com/#/"&gt;https://bn-bookstore.herokuapp.com/#/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Frontend and Backend source code is available at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/linhtch90/bn_bookstore_public_source"&gt;https://github.com/linhtch90/bn_bookstore_public_source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy coding and if this is useful for you, please give me a Github star for encouragement!&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>mongoose recommended plugin</title>
      <author>marco-bertelli</author>
      <pubDate>Sun, 28 Nov 2021 16:52:18 +0000</pubDate>
      <link>https://dev.to/marcobertelli/mongoose-recommended-plugin-gpe</link>
      <guid>https://dev.to/marcobertelli/mongoose-recommended-plugin-gpe</guid>
      <description>&lt;p&gt;the scope of this library is allow mongoose users to implement in a simple way a content-based recommended system with mongoose schema,&lt;br&gt;
is pretty simple and in future i want to introduce a collaborative-filter method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;how work?&lt;/strong&gt;:&lt;br&gt;
calculate similarities between mongoose entities on a single text field using tfidf and vector distance, for more search content-based systems descriptions&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;how to use this library&lt;/strong&gt;&lt;br&gt;
after install in your project add the plugin in entity schema in wich you want similar entities:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { RecommendedPlugin } from 'mongoose-recommended-plugin';

const mongooseSchema = {

    YOUR SCHEMA DEFINITION

    };


    // before generating the model 
    mongooseSchema.plugin(RecommendedPlugin);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after add the plugin to schema you can put in schema types two new field:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;similar = indicate the text field to calculate similarity like name or description&lt;/li&gt;
&lt;li&gt;minSimilarity = indicate the min percentage to mark another entity similar (es 0.1 is 10%)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
        offerCode: {
            type: String,
            odinQFilter: true
        },
        discountCode: {
            type: String,
        },
        // make sure place similar on a String field!
        discountDescription: {
            type: String,
            odinQFilter: true,
            similar: true,
            minSimilarity: 0.1
        },
        originalPrice: {
            type: Number
        },
        discountedPrice: {
            type: Number
        },
        discountPercentage: {
            type: Number
        },
        startDate: {
            type: Date
        },
        endDate: {
            type: Date
        },
        neverExpire: {
            type: Boolean,
            default: false
        },
        offerLink: {
            type: String
        },
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after this on the basic schema you have 2 new methods that allow you to calculate similars and get it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;calculateSimilars&lt;/li&gt;
&lt;li&gt;getSimilar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;important&lt;/strong&gt; &lt;br&gt;
before calling getSimilar you have to call calculateSimilars to calculate and save in the db the similars.&lt;br&gt;
we will see it now&lt;/p&gt;

&lt;p&gt;now we have to call calculateSimilars to get and save into db the results (plugin will save results in a collection name: BASIC_COLLECTION_NAME+similarresults).&lt;/p&gt;

&lt;p&gt;for using it i suggest using a schedulr like it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import schedule from 'node-schedule';
import Offers from '../../api/offers/model';

const log = logger.child({ section: '\x1B[0;35mScheduler:\x1B[0m' });

export const start = function () {
    log.info('Starting...');

    schedule.scheduleJob('*/10 * * * * *',calculateSimilarsResult);

    log.info('Starting...', 'DONE');
};

async function calculateSimilarsResult(){
    await Offers.calculateSimilars();
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this is an example of how calculate similars every 10 seconds, ut you can call it when you want and how you want.&lt;/p&gt;

&lt;p&gt;after this we can call seconds method passing the _id of entity for wich we want similars:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
await Offers.getSimilar('619d2d91eac832002d2f36de')

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and thats all!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;db format of plugin save&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
{ 
    "_id" : ObjectId("61a25cae646804e510d84f92"), 
    "relatedScore" : [
        {
            "id" : ObjectId("619d2d91eac832002d2f36de"), 
            "score" : 0.45293266622972733
        }
    ], 
    "entityId" : "619ac77c39dd6b002d1bd3bb", 
    "__v" : NumberInt(0)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for questions or contribute write at &lt;a href="mailto:marco.bertelli@runelab.it"&gt;marco.bertelli@runelab.it&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;i hope this library will be helpfull, if you like the project like and share this article!&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>node</category>
      <category>opensource</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Port management in your local Kubernetes cluster</title>
      <author>Nicolas Frankel</author>
      <pubDate>Sun, 28 Nov 2021 16:49:43 +0000</pubDate>
      <link>https://dev.to/nfrankel/port-management-in-your-local-kubernetes-cluster-4dd</link>
      <guid>https://dev.to/nfrankel/port-management-in-your-local-kubernetes-cluster-4dd</guid>
      <description>&lt;p&gt;Most of my talks contain a demo. A fair share of these demos require multiple "infrastructure" dependencies: a database (or more), Elasticsearch, you name it. To ease my setup and avoid stuffing my machine, I use either Docker Compose or Kubernetes locally on my Mac. Both rely on Docker Desktop.&lt;/p&gt;

&lt;p&gt;To expose a cluster &lt;code&gt;Service&lt;/code&gt; on my host, I use &lt;code&gt;nodePort&lt;/code&gt;. Hence, I set a dedicated node port for each service. I need to remember each of them for each demo. Worse, services might be (are) declared across different manifest files.&lt;/p&gt;

&lt;p&gt;For a long time, I wanted to ease my life. I've searched for Kubernetes-based solutions. I found that &lt;code&gt;kube-forward&lt;/code&gt; was not stable enough.&lt;/p&gt;

&lt;p&gt;My latest attempt was &lt;a href="https://metallb.universe.tf/"&gt;MetalLB&lt;/a&gt;. Even though I didn't manage to make it work, it bound port 8080 on my machine: none of my other regular Spring demos could work.&lt;/p&gt;

&lt;p&gt;Last week, I decided to take another approach - a regular proxy in front of my local cluster. OSX comes with an existing Apache Web Server installation. You can check it with &lt;code&gt;ls /etc/apache2&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;extra                 httpd.conf.pre-update mime.types            other
httpd.conf            magic                 original              users
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following modules are necessary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#httpd.conf
LoadModule proxy_module libexec/apache2/mod_proxy.so
LoadModule proxy_http_module libexec/apache2/mod_proxy_http.so
LoadModule proxy_balancer_module libexec/apache2/mod_proxy_balancer.so
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The requirement is straightforward: proxy calls from &lt;a href="http://zerodowntime.hz"&gt;http://zerodowntime.hz&lt;/a&gt; to &lt;a href="http://localhost:%24NODE_PORT/"&gt;http://localhost:$NODE_PORT/&lt;/a&gt;. For this, we need to configure a virtual host:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#httpd-vhosts.conf
&amp;lt;VirtualHost *:80&amp;gt;
    ServerName zerodowntime.hz
    ProxyRequests off
    ProxyPass / http://localhost:30002/
    ProxyPassReverse / http://zerodowntime.hz
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make sure everything works fine, we can use &lt;code&gt;apachectl -S&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;VirtualHost configuration:
*:80           zerodowntime.hz (/private/etc/apache2/extra/httpd-vhosts.conf:40)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last but not least, let's configure the host file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#./etc/hosts
127.0.0.1        zerodowntime.hz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we can access the application using the &lt;code&gt;zerodowntime.hz&lt;/code&gt; URL:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7XITUGQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7raja4n9xki3qvad90os.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7XITUGQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7raja4n9xki3qvad90os.jpg" alt="Access the application with the local URL" width="835" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depending on the deployed application, this step might be the last one. It's unfortunately not my case, as my demo uses a redirect. By default, the redirect location sent to the client is the URL known to the application, &lt;a href="http://localhost:30002"&gt;http://localhost:30002&lt;/a&gt;, defeating the whole purpose. We need to configure the application to use the standard &lt;code&gt;X-Forwarded-*&lt;/code&gt; HTTP headers.&lt;/p&gt;

&lt;p&gt;I'm using Spring Boot, so that is just a matter of configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#application.yml&lt;/span&gt;
&lt;span class="na"&gt;server&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;forward-headers-strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;native&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, everything works as expected!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To go further:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metallb.universe.tf/"&gt;MetalLB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://httpd.apache.org/"&gt;Apache HTTP Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://httpd.apache.org/docs/2.4/vhosts/examples.html"&gt;VirtualHost examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.spring.io/spring-boot/docs/2.6.x/reference/html/howto.html#howto.webserver.use-behind-a-proxy-server"&gt;Running Spring Boot behind a front-end proxy server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href=""&gt;A Java Geek&lt;/a&gt; on November 28&lt;sup&gt;th&lt;/sup&gt;, 2021&lt;/em&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>demo</category>
      <category>apachewebserver</category>
    </item>
    <item>
      <title>4 Latest Javascript Features...</title>
      <author>NIKO</author>
      <pubDate>Sun, 28 Nov 2021 16:48:34 +0000</pubDate>
      <link>https://dev.to/nikotech/4-latest-javascript-features-74a</link>
      <guid>https://dev.to/nikotech/4-latest-javascript-features-74a</guid>
      <description>&lt;p&gt;JavaScript has grown way beyond the browser. Code School's Sergio Cruz reveals the new features, tools and libraries that are transforming the way we use JavaScript today&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-write-tomorrows-i-javascript-today-with-babel"&gt;
  &lt;/a&gt;
  1 - WRITE TOMORROW'S I JAVASCRIPT TODAY WITH BABEL
&lt;/h4&gt;

&lt;p&gt;Not all browsers understand ES2015 code yet, so in order to use the latest features of the language today, we need a tool like Babel. This transforms ES2o15 code into ES5 JavaScript code that all browsers are able to interpret. It is common for developers to include Babel in their deployment process through build systems such as gulp or webpack. This approach allows devs to use the latest tech while ensuring their apps remain compatible with old browser versions, but only at the deployment stage. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-explore-new-ways-of-declaring-variables"&gt;
  &lt;/a&gt;
  2 - EXPLORE NEW WAYS OF ‘' DECLARING VARIABLES
&lt;/h4&gt;

&lt;p&gt;In ES2o15, JavaScript introduced two new ways of declaring variables: let and const . let is used when a variable will be reassigned, whereas const keeps a variable from being reassigned. Note that using const does not freeze arrays and objects, and it doesn't stop properties from being mutated. Instead, it just keeps the variable itself from being reassigned.&lt;br&gt;
The main benefit that both let and const deliver over var is that when using var , your variables get scoped to the top of the current function, therefore making the variable available to the whole function. In contrast, let and const are scoped to their closest block, allowing developers to declare variables within if , while , for and even switch blocks, without worrying about the variable scope leaking outside of that context.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-use-arrow-functions-to-keep-this-intact"&gt;
  &lt;/a&gt;
  3 - USE ARROW FUNCTIONS TO KEEP this INTACT
&lt;/h4&gt;

&lt;p&gt;Another feature that's been added to JavaScript in recent years is arrow functions. These have the ability to keep the this context intact, especially when using it within callbacks that might get called from somewhere else (i.e. adding an event listener with jQuery, and so on). Essentially, arrow functions replace the need to add .bind(this) at the end of a function declaration. There are two main ways of writing arrow functions: one-liners and multiple-liners. One-liners have only one expression and return the value of that given expression, without the need for curly braces. Multiple-liners, on the other hand, have curly braces and the return keyword must be used explicitly. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-use-promises-to-avoid-a-callback-can-of-worms"&gt;
  &lt;/a&gt;
  4 - USE PROMISES TO  AVOID A CALLBACK CAN OF WORMS
&lt;/h4&gt;

&lt;p&gt;JavaScript does a lot of its operations asynchronously, so passing callback functions while waiting for other things to happen is a pretty standard pattern. The problem begins, though, when you're executing an async action that will trigger another async action, and so forth. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
