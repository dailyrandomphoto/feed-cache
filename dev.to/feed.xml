<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 10 Websites for Developers</title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Sun, 06 Jun 2021 11:56:31 +0000</pubDate>
      <link>https://dev.to/line/top-10-websites-for-developers-3ph6</link>
      <guid>https://dev.to/line/top-10-websites-for-developers-3ph6</guid>
      <description>&lt;p&gt;For many of you, this is the fourth part of this series "Top 10 Websites For Developers". You could check the other three parts for 30 more amazing websites. &lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/chetanistaken"&gt;Twitter&lt;/a&gt;&lt;br&gt;
(&lt;a href="https://ko-fi.com/chipoo"&gt;DONATE&lt;/a&gt; or &lt;a href="https://patreon.com/chipoo"&gt;MEMBERSHIP&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The list is - &lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;Piskel&lt;/strong&gt;   &lt;a href="https://www.piskelapp.com/"&gt;Visit Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is a unique website that allows you to draw pixelated art by filling colors in the blocks which you can use on your website. This website also have an app, which you can use. This website also has a very simple UI, so that even beginners with no experience can use it. And of course this website is 100% free to use. &lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;My Template&lt;/strong&gt;   &lt;a href="https://mytemplate.xyz/"&gt;Visit Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are worried about making your portfolio website, but you don't know the skill to make one. Then this website is 100% for you, this website helps you to make your portfolio website without any code and then gives you the option to download the site. This also gives the features like adding your GitHub option, Your Dev.to Blogs option, and even social page option on your website. And This website is &lt;strong&gt;FREE&lt;/strong&gt; to use.&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;This person does not exist&lt;/strong&gt;   &lt;a href="https://thispersondoesnotexist.com/"&gt;Visit Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an amazing website that makes random faces by using AI. The faces this website makes actually doesn't exist but they look very very real. You can use this faces in your website, without thinking of any permission because as I said these faces never existed.  And this is 100% free. &lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;Undraw&lt;/strong&gt;   &lt;a href="https://undraw.co/illustrations"&gt;Visit Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This website have free tons of illustrations that you can use in your website and apps without thinking of any claims. These pictures are in great quality, and are so good that you can compare this illustrations with paid one and no one can find the difference. And this is 100% free. &lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;Neumorphism.io&lt;/strong&gt;   &lt;a href="https://neumorphism.io/"&gt;Visit Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This website helps you make amazing CSS things, by just settings the values that you need and this website will give you the code of the components, which you can put in your website. You can copy its CSS code and play around with it in your projects. And this is 100% free. &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#subscribe-to-newsletter-get-amazing-content-which-is-not-available-here-httpslinenewslettersubstackcom"&gt;
  &lt;/a&gt;
  Subscribe to Newsletter (Get Amazing Content, which is not available here), &lt;a href="https://linenewsletter.substack.com/"&gt;https://linenewsletter.substack.com/&lt;/a&gt;
&lt;/h6&gt;

&lt;p&gt;6.&lt;strong&gt;Ray.so&lt;/strong&gt;   &lt;a href="https://ray.so/"&gt;Visit Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We all use images of code in our website, but they look ugly. This website helps you make your own code images, that you can use in your blog and can have great images, that will make your viewers more engaged in the blog. And this is 100% free.&lt;/p&gt;

&lt;p&gt;7.&lt;strong&gt;Get Avataaars&lt;/strong&gt;   &lt;a href="https://getavataaars.com/"&gt;Visit Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many of us don't feel comfortable in using our own image as a public image, example - me. So, I use my avatar. By using this website you can make your avatar, and can amazing look of yourself, which you can share to the world without stressing about your privacy. And this website is 100% free to use. &lt;/p&gt;

&lt;p&gt;8.&lt;strong&gt;Haikei.app&lt;/strong&gt;   &lt;a href="https://app.haikei.app/"&gt;Visit Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This website that generates beautiful backgrounds consisting of various patterns of Waves, Blobs, Blurry gradients, Low poly art, and whatnot for your websites and presentations to give an incredible look. There is an option of downloading the generated pattern in PNG format or even SVG format. And this website is 100% free to use. &lt;/p&gt;

&lt;p&gt;9.&lt;strong&gt;Firebase&lt;/strong&gt;   &lt;a href="https://firebase.google.com/"&gt;Visit Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an website like AWS, but made by google. This is a lot simpler to use than AWS and is free for the starting plan, This plan is enough for most of us, if we are building an small and simple app. You can upgrade to the paid plan which gives you all the features of google cloud. &lt;/p&gt;

&lt;p&gt;10.&lt;strong&gt;HackerNoon&lt;/strong&gt;   &lt;a href="https://hackernoon.com/u/circle"&gt;Visit Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hacker noon is an alternative of Dev.to, I have already talked about dev.to. One of the main advantages of hacker noon is that It shares your articles on twitter with about 70k followers. Yeah, your blog need to get qualified for the publishment by one of the official of hacker noon. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;END&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/chetanistaken"&gt;Twitter&lt;/a&gt;&lt;br&gt;
(&lt;a href="https://ko-fi.com/chipoo"&gt;DONATE&lt;/a&gt; or &lt;a href="https://patreon.com/chipoo"&gt;MEMBERSHIP&lt;/a&gt;)&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#subscribe-to-newsletter-get-amazing-content-which-is-not-available-here-httpslinenewslettersubstackcom"&gt;
  &lt;/a&gt;
  Subscribe to Newsletter (Get Amazing Content, which is not available here), &lt;a href="https://linenewsletter.substack.com/"&gt;https://linenewsletter.substack.com/&lt;/a&gt;
&lt;/h6&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Solve: No Brightness button on my new keyboard ヽ(°〇°)ﾉ</title>
      <author>Parth Agarwal</author>
      <pubDate>Sun, 06 Jun 2021 11:43:00 +0000</pubDate>
      <link>https://dev.to/ra101/solve-no-brightness-button-on-my-new-keyboard-3o9o</link>
      <guid>https://dev.to/ra101/solve-no-brightness-button-on-my-new-keyboard-3o9o</guid>
      <description>&lt;p&gt;As the title says, I bought a new keyboard for my laptop, unfamiliar with world of keyboards, I went with the safest option, approved by many, the Logitech G213 Prodigy. &lt;/p&gt;

&lt;p&gt;Much to my suprise, I was not able to control brightness with this new keyboard.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No function keys were mapped to brightness settings&lt;/li&gt;
&lt;li&gt;There was no specific keys for that&lt;/li&gt;
&lt;li&gt;Even G Hub software had no System Action for brightness&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, the dev inside me said, lets tackle it with software!&lt;br&gt;
&lt;br&gt;&lt;br&gt;
By the help of stack-overflow and powershell docs, I wrote a simple powershell script, to adjust my brightness...&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;\brightness.ps1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;&amp;lt;# No agrs will increase brightness (+10) #&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;\brightness.ps1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;desc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;&amp;lt;# desc as arg will decrease brightness (-10) #&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
Now I compiled this file to &lt;code&gt;.exe&lt;/code&gt;, to replicate that,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First Install ps2exe module in powershell (as admin)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;Install-Module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ps2exe&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Simply use this module to convert ps1 to exe
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Invoke-ps2exe .\brightness.ps1 .\brightness.exe -noConsole
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
First I thought of using AutoHotKey, but i couldn't utilise any function key there. So, settled with G-Hub instead&lt;/p&gt;

&lt;p&gt;Now, head over to G-Hub add this file as application, &lt;strong&gt;twice&lt;/strong&gt; , one for +10 and other for -10, remember to add &lt;code&gt;desc&lt;/code&gt; there and then change whatever Function keys you want map to brightness.&lt;/p&gt;

&lt;p&gt;FYI: I used F6 key to change to G-shift mode. and F7 to increase brightness and F8 to decrease brightness in G-shift mode. No updation made in default mode.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Please comment, for any suggestion regarding this keyboard, or any wonderful hack you have in mind.&lt;/p&gt;

</description>
      <category>bash</category>
      <category>windows</category>
      <category>logitech</category>
      <category>g213</category>
    </item>
    <item>
      <title>How to add Ckeditor5 in your Next JS, react App</title>
      <author>Apu Chakraborty</author>
      <pubDate>Sun, 06 Jun 2021 11:08:43 +0000</pubDate>
      <link>https://dev.to/devzversity/how-to-add-ckeditor5-in-your-next-js-react-app-1be7</link>
      <guid>https://dev.to/devzversity/how-to-add-ckeditor5-in-your-next-js-react-app-1be7</guid>
      <description>&lt;p&gt;I am creating a fresh CRA &amp;amp; here is my project directory&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3XnWamcv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1b1drfq7g5d1ioxc2o2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3XnWamcv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1b1drfq7g5d1ioxc2o2.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we going started, you need to add this npm package first, to install please paste the below code into your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @ckeditor/ckeditor5-react
npm i @ckeditor/ckeditor5-build-classic
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;create a components folder under src folder and create a Editor component under components/Editor.js &amp;amp; use this code&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useEffect, useRef } from "react";

function Editor({ onChange, editorLoaded, name, value }) {
  const editorRef = useRef();
  const { CKEditor, ClassicEditor } = editorRef.current || {};

  useEffect(() =&amp;gt; {
    editorRef.current = {
      CKEditor: require("@ckeditor/ckeditor5-react").CKEditor, // v3+
      ClassicEditor: require("@ckeditor/ckeditor5-build-classic")
    };
  }, []);

  return (
    &amp;lt;div&amp;gt;
      {editorLoaded ? (
        &amp;lt;CKEditor
          type=""
          name={name}
          editor={ClassicEditor}
          data={value}
          onChange={(event, editor) =&amp;gt; {
            const data = editor.getData();
            // console.log({ event, editor, data })
            onChange(data);
          }}
        /&amp;gt;
      ) : (
        &amp;lt;div&amp;gt;Editor loading&amp;lt;/div&amp;gt;
      )}
    &amp;lt;/div&amp;gt;
  );
}

export default Editor;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now go to your app.js or wherever you want to use this editor just import Editor Component and use this&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState, useEffect } from "react";
import "./styles.css";
import Editor from "./Editor";

export default function App() {
  const [editorLoaded, setEditorLoaded] = useState(false);
  const [data, setData] = useState("");

  useEffect(() =&amp;gt; {
    setEditorLoaded(true);
  }, []);

  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;h1&amp;gt;ckEditor 5&amp;lt;/h1&amp;gt;

      &amp;lt;Editor
        name="description"
        onChange={(data) =&amp;gt; {
          setData(data);
        }}
        editorLoaded={editorLoaded}
      /&amp;gt;

      {JSON.stringify(data)}
    &amp;lt;/div&amp;gt;
  );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;visit ckEditor5 documentation to add more features - &lt;a href="https://ckeditor.com/docs/ckeditor5/latest/examples/builds/classic-editor.html"&gt;https://ckeditor.com/docs/ckeditor5/latest/examples/builds/classic-editor.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;you can clone repo &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/apuchakraborty"&gt;
        apuchakraborty
      &lt;/a&gt; / &lt;a href="https://github.com/apuchakraborty/ckEditor5-implement"&gt;
        ckEditor5-implement
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Created with CodeSandbox
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
ckEditor5-implement&lt;/h1&gt;
&lt;p&gt;Created with CodeSandbox&lt;/p&gt;
&lt;p&gt;go to  - cd /projectdir&lt;/p&gt;
&lt;p&gt;npm install &amp;amp; npm start to run&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/apuchakraborty/ckEditor5-implement"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can use this code in codesSandbox&lt;br&gt;
Here is your editor -&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/76ftq"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>ckeditor5</category>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Top 5 Python Frameworks For Developers</title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Sun, 06 Jun 2021 10:44:51 +0000</pubDate>
      <link>https://dev.to/line/top-5-python-frameworks-for-developers-545a</link>
      <guid>https://dev.to/line/top-5-python-frameworks-for-developers-545a</guid>
      <description>&lt;p&gt;Python is one the most used languages in the world. Most of the companies in the world uses python as one of the main language, examples- Google, Facebook, Microsoft and Adobe etc. &lt;/p&gt;

&lt;p&gt;Frameworks of python, makes our code even more better and easy. Frameworks provides a structure for developers, so they can work and focus more on the functionality and logic of the application.&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/chetanistaken"&gt;Twitter&lt;/a&gt;&lt;br&gt;
(&lt;a href="https://ko-fi.com/chipoo"&gt;DONATE&lt;/a&gt; or &lt;a href="https://patreon.com/chipoo"&gt;MEMBERSHIP&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;In this articles I will talk about "top 10 frameworks for python" every developer should know- &lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;Django&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Django is an open-source framework, that makes code work faster, decreases the code size, scalable and even makes component reusable. This Framework includes features like serialization, automatic database generation, automatic admin interface generation, caching, internationalization, inherited templates. You could also work the data types like JSON, RSS, XML, HTML, and other formats.&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;Aiohttp&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is a python framework for web. It combines the functions of a server and a clients web frameworks providing customers with a WebSocket and a client's server, Making this way of easier than its alternatives. &lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Flask&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Flask is useful in developing small applications. It is useful, if you prefer to develop configurations of your application by yourself. Using Flask, you can also build web servers, integrate unit testing support. &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#subscribe-to-newsletter-get-amazing-content-which-is-not-available-here-httpslinenewslettersubstackcom"&gt;
  &lt;/a&gt;
  Subscribe to Newsletter (Get Amazing Content, which is not available here), &lt;a href="https://linenewsletter.substack.com/"&gt;https://linenewsletter.substack.com/&lt;/a&gt;
&lt;/h6&gt;

&lt;p&gt;4.&lt;strong&gt;Falcon&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This frameworks help you making of backend of small apps. It is one of the fastest framework of python available. It also uses less memory, making your application less resource consuming. Falcon is not appropriate for serving HTML pages, but it is relevant for those who follow RESTful APIs conception. Companies such as Opera Browser and OpenStack uses this.&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;Hug&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hug is a fast Python micro-framework designed to build APIs. It provides developers with a few API versions, automatic documentation, and annotation-powered validation. It does not contain a database integration so you should use SQ Alchemy or something similar. On the one hand, it is inconvenient for many, On the other hand, you can abstract separate pieces of code and apply it for different applications. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;END&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://hackernoon.com/u/chebanova"&gt;Anna&lt;/a&gt; for the idea.&lt;/p&gt;

&lt;p&gt;(&lt;a href="https://ko-fi.com/chipoo"&gt;DONATE&lt;/a&gt; or &lt;a href="https://patreon.com/chipoo"&gt;MEMBERSHIP&lt;/a&gt;)&lt;br&gt;
 Follow me on &lt;a href="https://twitter.com/chetanistaken"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#subscribe-to-newsletter-get-amazing-content-which-is-not-available-here-httpslinenewslettersubstackcom"&gt;
  &lt;/a&gt;
  Subscribe to Newsletter (Get Amazing Content, which is not available here), &lt;a href="https://linenewsletter.substack.com/"&gt;https://linenewsletter.substack.com/&lt;/a&gt;
&lt;/h6&gt;

</description>
      <category>python</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Top 5 Tailwind templates available in Shuffle</title>
      <author>Dawid Andrzejewski</author>
      <pubDate>Sun, 06 Jun 2021 10:44:23 +0000</pubDate>
      <link>https://dev.to/kemyd/top-5-tailwind-templates-available-in-shuffle-1l7e</link>
      <guid>https://dev.to/kemyd/top-5-tailwind-templates-available-in-shuffle-1l7e</guid>
      <description>&lt;p&gt;At Shuffle, we're working hard on making the best &lt;a href="https://shuffle.dev/tailwind"&gt;Tailwind templates&lt;/a&gt; available! &lt;/p&gt;

&lt;p&gt;Our catalog currently consists of 15 templates for different technologies (Tailwind, Bootstrap, Bulma, and Material-UI), but &lt;strong&gt;&lt;em&gt;I want to present the top 5&lt;/em&gt;&lt;/strong&gt; selected based on feedback from users of our Tailwind editor. &lt;/p&gt;

&lt;p&gt;All these templates are available with a drag &amp;amp; drop editor provided by Shuffle! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-zospace-ui"&gt;
  &lt;/a&gt;
  1. Zospace UI ✨
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jMgOqOg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.shuffle.dev/blog/uploads/2021/05/zospace-thumbnail.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jMgOqOg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.shuffle.dev/blog/uploads/2021/05/zospace-thumbnail.png" alt="Zospace UI preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Zospace features modern components in a dark color scheme. Everything is created in a cosmic style, and even the details evoke cosmic depth. The whole design looks professional and has a positive effect on the perception of users. After all, every brand would like to be associated with reaching for the stars! &lt;a href="https://shuffle.dev/marketplace/zospace"&gt;Learn more about Zospace →&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-artemis-dashboard"&gt;
  &lt;/a&gt;
  2. Artemis Dashboard 📊
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n235qOnl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.shuffle.dev/files/1619789012/artemis.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n235qOnl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.shuffle.dev/files/1619789012/artemis.png" alt="Artemis Dashboard preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Artemis was made to help you build a dashboard template. Everyone knows how important it is in business to control statistics and respond to changes. With this UI library, you will present the most important information easily. It is functional and looks professional at the same time. The components can be freely moved and modified. &lt;a href="https://shuffle.dev/marketplace/artemis"&gt;Learn more about Artemis →&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-atis-ui"&gt;
  &lt;/a&gt;
  3. Atis UI 🎨
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3JbqzA9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.shuffle.dev/files/1617996242/tailwind-atis.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3JbqzA9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.shuffle.dev/files/1617996242/tailwind-atis.png" alt="Atis UI preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Atis is the most colorful library in the editor. Modern design with the ability to change the color scheme and customize each element according to your preferences. Depending on the choice of leading color: monochromatic, dark, or with the addition of colorful elements, your project can become a business card spoiling for any industry. &lt;a href="https://shuffle.dev/editor"&gt;Try Atis in Shuffle →&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-zeus-ui-%EF%B8%8F"&gt;
  &lt;/a&gt;
  4. Zeus UI ⚡️
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xNUNw-6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.shuffle.dev/files/1618827757/zeus-landing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xNUNw-6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.shuffle.dev/files/1618827757/zeus-landing.png" alt="Zeus UI preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Zeus is the first UI library available in three technologies: Tailwind CSS, Bootstrap, and Bulma! It was designed with precision, the details are eye-catching, and any website built with these components will evoke positive vibes. The colorful palette works well with white, so the design always looks neat and modern. &lt;/p&gt;

&lt;p&gt;If you don't have a favorite CSS framework yet, you definitely should try Zeus! &lt;a href="https://shuffle.dev/editor"&gt;Try Zeus in Shuffle →&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-bendis-ui"&gt;
  &lt;/a&gt;
  5. Bendis UI 🔥
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N9exVEzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.shuffle.dev/files/1618824361/bendis-landing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N9exVEzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.shuffle.dev/files/1618824361/bendis-landing.png" alt="Bendis UI preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bendis has components that attract attention and show that modernity is courage. Sharp edges, unusual solutions, boldly chosen colors. This library adds fire to any project. Intense colors and unique shapes will impress your visitors. &lt;a href="https://shuffle.dev/marketplace/bendis"&gt;Learn more about Bendis →&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h4&gt;

&lt;p&gt;These are our best Tailwind templates, but we have more, and not only for Tailwind CSS! :)&lt;/p&gt;

&lt;p&gt;Interested? Go and check out our demo. You don't need to sign up to try it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://shuffle.dev"&gt;https://shuffle.dev →&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Building a compiler – what we are aiming for</title>
      <author>Siddharth</author>
      <pubDate>Sun, 06 Jun 2021 10:39:17 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/building-a-compiler-what-we-are-aiming-at-ccj</link>
      <guid>https://dev.to/siddharthshyniben/building-a-compiler-what-we-are-aiming-at-ccj</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Check out the &lt;a href="https://dev.to/siddharthshyniben/building-a-compiler-basic-setup-43de"&gt;previous post&lt;/a&gt; for some basic setup&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First things first, sorry for delaying the code again!&lt;/p&gt;

&lt;p&gt;Now, before we start, I wanted to clear up what exactly we are aiming at creating. I like to call it EnglishScript. The main things I want to convert are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic math
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
  &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;"English" math™
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;added&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="nx"&gt;divided&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nx"&gt;multiplied&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Parenthesis for making blocks of code
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="nx"&gt;added&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Variable declarations
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// Normal js style&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// "English" style™&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="nx"&gt;added&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="nx"&gt;added&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nx"&gt;times&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Master Design Patterns By Building Real Projects - Abstract Factory Pattern - Javascript</title>
      <author>Hiep Le</author>
      <pubDate>Sun, 06 Jun 2021 10:34:23 +0000</pubDate>
      <link>https://dev.to/hieptl/master-design-patterns-by-building-real-projects-abstract-factory-pattern-javascript-3em8</link>
      <guid>https://dev.to/hieptl/master-design-patterns-by-building-real-projects-abstract-factory-pattern-javascript-3em8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#creational-pattern-abstract-factory-pattern"&gt;
  &lt;/a&gt;
  Creational Pattern - Abstract Factory Pattern.
&lt;/h2&gt;

&lt;p&gt;This is the fifth part in my series (23 GoF Design Patterns). My series will help you understand about design patterns by building real projects. For this reason, you can see the places in which each pattern could be applied. I want to focus on learning by doing instead of talking too much about theories. &lt;/p&gt;

&lt;p&gt;I'm Hiep. I work as a full-time software engineer. Most of my open-source projects are focused on one thing - to help people learn 📚.&lt;/p&gt;

&lt;p&gt;I created a git repository that help you understand about design patterns by building real projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Github link: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/hieptl/javascript-dessign-patterns"&gt;https://github.com/hieptl/javascript-dessign-patterns&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the repository is useful, please help me share the post and give me a Github's star. It will make me feel motivation to work even harder. I will try to make many open sources and share to the community ❤️.&lt;/p&gt;

&lt;p&gt;I also created some series that help you improve your practical skills ❤️&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Learn React By Buiding Netflix&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/hieptl/learn-react-by-building-netflix-1127"&gt;https://dev.to/hieptl/learn-react-by-building-netflix-1127&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Crack the React Interviews By Using Mindmap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/hieptl/series/13102"&gt;https://dev.to/hieptl/series/13102&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Master React Ref By Building Real Project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/hieptl/series/13114"&gt;https://dev.to/hieptl/series/13114&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Some Mistakes When Using "This" Keyword in Javascript and Solutions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/hieptl/some-mistakes-when-using-this-keyword-in-javascript-and-solutions-4j77"&gt;https://dev.to/hieptl/some-mistakes-when-using-this-keyword-in-javascript-and-solutions-4j77&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Table of Contents&lt;/strong&gt;
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;No.&lt;/th&gt;
&lt;th&gt;Topics&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="#definition"&gt;Definition.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="#scenarios"&gt;Scenarios.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="#building-a-car-showroom"&gt;Building a Car Showroom.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="#result"&gt;Result.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id="definition"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-definition"&gt;
  &lt;/a&gt;
  1. Definition.
&lt;/h2&gt;

&lt;p&gt;Abstract factory pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes. In other words, &lt;strong&gt;it is a factory of factories&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you do not know about the factory pattern, You can refer to the following post:&lt;br&gt;
&lt;a href="https://dev.to/hieptl/master-design-patterns-by-building-real-projects-factory-pattern-javascript-13cb"&gt;https://dev.to/hieptl/master-design-patterns-by-building-real-projects-factory-pattern-javascript-13cb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id="scenarios"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-scenarios"&gt;
  &lt;/a&gt;
  2. Scenarios.
&lt;/h2&gt;

&lt;p&gt;We can imagine that we want to build a website for a car showroom. The car showroom contains different types of cars. The car showroom decides to create a feature that help the end users find the cars easier. The feature let the end users input the car's type and the car's name which is belonging to that type.&lt;/p&gt;

&lt;p&gt;The system should return the car's information based on input type and name. &lt;/p&gt;

&lt;p&gt;Example: David visits our website, He inputs 'Mercedes' for the car's type and 'Maybach' for the car's name. Our website should return the information of 'Maybach' to him if it is existing in the car showroom. &lt;/p&gt;

&lt;p&gt;We will bulid the feature by using &lt;strong&gt;Abstract Factory&lt;/strong&gt; pattern.&lt;/p&gt;

&lt;p&gt;&lt;a id="building-a-car-showroom"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-building-a-car-showroom"&gt;
  &lt;/a&gt;
  3. Building a Car Showroom.
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;I want to use Javascript class to implement the idea because in the case you are using object-oriented programming languages or you have to use those languages in the future, you can still implement design patterns by using different languages. In my opinion, design patterns are mindset and approaches and not depend on programming languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Step 1: Create &lt;strong&gt;Car&lt;/strong&gt; class to store the information of a car.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 2: Create &lt;strong&gt;MercedesFactory&lt;/strong&gt; class to return a car which is beloing to Mercedes based on input name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MercedesFactory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C300&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is C300&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maybach&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is Maybach&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 3: Create &lt;strong&gt;BMWFactory&lt;/strong&gt; class to return a car which is beloing to BMW based on input name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BMWFactory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is X5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is X6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 4: Create &lt;strong&gt;CarAbstractFactory&lt;/strong&gt; class to return a factory class based on input type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CarAbstractFactory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mercedes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MercedesFactory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;BMW&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BMWFactory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;We defined &lt;strong&gt;getFactory&lt;/strong&gt; method as static because static method can be accessed directly by using the class's name.&lt;/p&gt;

&lt;p&gt;Example: We can write&lt;/p&gt;


&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;CarAbstractFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mercedes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Instead of&lt;/p&gt;


&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;carAbstractFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CarAbstractFactory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;carAbstractFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MaybaMercedesch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;Our full source code will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MercedesFactory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C300&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is C300&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maybach&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is Maybach&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BMWFactory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is X5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is X6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CarAbstractFactory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mercedes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MercedesFactory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;BMW&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BMWFactory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mercedesFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CarAbstractFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mercedes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mercedesFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maybach&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a id="result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-result"&gt;
  &lt;/a&gt;
  4. Result.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maybach&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is Maybach&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above result describes that our &lt;strong&gt;CarAbstractFactory&lt;/strong&gt; return the factory based on input type and we can get the car by using that factory and input name.&lt;/p&gt;

&lt;p&gt;By using design patterns, we can understand the core concepts and make our code become more readable and cleaner. I hope that the post can help you understand about Abstract Factory pattern. &lt;/p&gt;

&lt;p&gt;Thanks and Best Regards,&lt;br&gt;
Hiep.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Relational Database Model</title>
      <author>hebaShakeel</author>
      <pubDate>Sun, 06 Jun 2021 10:15:37 +0000</pubDate>
      <link>https://dev.to/hebashakeel/relational-database-model-3b60</link>
      <guid>https://dev.to/hebashakeel/relational-database-model-3b60</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is RDBMS ?&lt;/strong&gt;&lt;br&gt;
It is an organized set of tables to store information so that we can access the information efficiently.&lt;br&gt;
It is called as &lt;strong&gt;Relational&lt;/strong&gt; because the values of each table are related with the value of every other table.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples of RDBMS are:&lt;/strong&gt;&lt;br&gt;
1) MySQL&lt;br&gt;
2) Oracle&lt;br&gt;
3) DB2&lt;br&gt;
4) MS-Access&lt;br&gt;
5) SQL Server&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Table in RDBMS ?&lt;/strong&gt;&lt;br&gt;
-&amp;gt; It is a set of records that contains rows and columns.&lt;br&gt;
-&amp;gt; It is a collection of data elements represented in a structured format in terms of rows and columns.&lt;br&gt;
-&amp;gt; Each table is assigned a specific name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Records and Fields&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Record&lt;/strong&gt; is a tuple/row and it is composed of attributes and contains data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Field&lt;/strong&gt; is also known as column/attribute. Each row is broken down into smaller entities(element) known as Fields.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Degree&lt;/strong&gt;&lt;br&gt;
It is the number of Fields(Attributes) in a relation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cardinality&lt;/strong&gt;&lt;br&gt;
It is the number of Rows(tuples) in a relation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cardinality in RDBMS is different from Cardinality in ER-Diagram.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Domain of a Field(Attribute)&lt;/strong&gt;&lt;br&gt;
It is all the possible values that a field can take.&lt;br&gt;
Example: Month -&amp;gt; Jan to Dec&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Null Value&lt;/strong&gt; - It specifies that no value is associated with the attribute. It is represented by a blank space.&lt;/p&gt;

&lt;p&gt;Thank You!&lt;/p&gt;

</description>
      <category>database</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Building a compiler – basic setup</title>
      <author>Siddharth</author>
      <pubDate>Sun, 06 Jun 2021 10:14:29 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/building-a-compiler-basic-setup-43de</link>
      <guid>https://dev.to/siddharthshyniben/building-a-compiler-basic-setup-43de</guid>
      <description>&lt;h1&gt;
  &lt;a href="#building-a-compiler-basic-setup"&gt;
  &lt;/a&gt;
  Building a compiler – basic setup
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Be sure to check out the &lt;a href="https://dev.to/siddharthshyniben/building-a-compiler-basic-concepts-1j1d"&gt;previous part&lt;/a&gt; to learn the basics&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that you have a general overview on a compiler, let's setup a few files so you can start creating one!&lt;/p&gt;

&lt;p&gt;I'm gonna code this using nodejs, but you can choose any environment you like, as there is nothing nodejs specific in here.&lt;/p&gt;

&lt;p&gt;You only &lt;em&gt;&lt;strong&gt;have&lt;/strong&gt;&lt;/em&gt; to create a single JS file, and you can safely skip this part of this series if you like. But I recommend doing this.&lt;/p&gt;




&lt;p&gt;You still here? Alright let's start!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-files"&gt;
  &lt;/a&gt;
  The files
&lt;/h2&gt;

&lt;p&gt;I like to divide everything up, so I am going to create &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The main index file&lt;/li&gt;
&lt;li&gt;The tokenizer&lt;/li&gt;
&lt;li&gt;The parser&lt;/li&gt;
&lt;li&gt;The traverser&lt;/li&gt;
&lt;li&gt;The transformer&lt;/li&gt;
&lt;li&gt;The code generator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plus a few more files&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A simple cli which parses input and logs it to the console, just made for testing purposes&lt;/li&gt;
&lt;li&gt;A test file which compiles some code and checks if the code is compiled correctly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I am going to put all the boilerplate code here, which you can just copy and paste. Also, I am using &lt;a href="https://stackoverflow.com/questions/57492546/what-is-the-difference-between-js-and-mjs-files"&gt;&lt;code&gt;.mjs&lt;/code&gt;&lt;/a&gt; because I prefer the import/export statements more than require.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-indexmjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;index.mjs&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/tokenizer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/transformer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;codeGenerator&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/code-generator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compiler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldAST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newAST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldAST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;codeGenerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newAST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-componentstokenizermjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;components/tokenizer.mjs&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-componentsparsermjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;components/parser.mjs&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-componentstraversermjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;components/traverser.mjs&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;traverser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;visitor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-componentstransformermjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;components/transformer.mjs&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-componentscodegeneratormjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;components/code-generator.mjs&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;codeGenerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-climjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;cli.mjs&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;compiler&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;argv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;codeBlock&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;codeBlock&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt; compiles to\n\n&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;compiler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;codeBlock&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;\n`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-testsmjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;tests.mjs&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;assert&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;assert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;compiler&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./compiler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;itCompiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;codeBlock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expectedOutput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;compiler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;codeBlock&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;expectedOutput&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// No tests now&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;That's all, and see you in the next part!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Cryptography- Shift Cipher</title>
      <author>Pranav Patel</author>
      <pubDate>Sun, 06 Jun 2021 09:45:15 +0000</pubDate>
      <link>https://dev.to/sirri69/cryptography-shift-cipher-2oki</link>
      <guid>https://dev.to/sirri69/cryptography-shift-cipher-2oki</guid>
      <description>&lt;p&gt;Shift cipher is the most basic and simple substitution cipher ever existed. It was used by numerous kings and common people in ancient times, because of its simplicity. It is also known as the Caesar cipher as he used a generalized form of it known as ROT-13. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-shift-cipher-works"&gt;
  &lt;/a&gt;
  How Shift Cipher Works:-
&lt;/h2&gt;

&lt;p&gt;Shift cipher is nothing but substitution of letters to their left or right by some specific number of letters, and that number of letters will be known as the key of the cipher. Once the key is decided and the plaintext is encrypted to ciphertext, we can send the cipher text to whomever we want. If he/she will have the key, then he/she will easily decrypt the message and read it and can reply to that encrypting the message with the same key.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#encrypting-the-text-using-shift-cipher"&gt;
  &lt;/a&gt;
  Encrypting the text using Shift Cipher
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Select a key, if you want to shift your letters to right, choose a number which is positive, a negative number will result in shifting of letters to left side.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the key is selected, convert the letters to their respective numeric positions, where A-&amp;gt;1, B-&amp;gt;2 and so on.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now apply the given formula to every number:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C=(P+K)%26
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Where P is your plaintext converted to numeric positions, K is the key and C is the numeric positions of the letters in ciphertext.&lt;/p&gt;

&lt;p&gt;Now convert the numeric positions of ciphertext (C) to alphabets according to 0-&amp;gt;Z, 1-&amp;gt;A so on, and you have your plaintext encrypted!!!&lt;/p&gt;

&lt;p&gt;Example:-&lt;/p&gt;

&lt;p&gt;Let our plaintext to be:- &lt;br&gt;
“ ”&lt;/p&gt;

&lt;p&gt;Then numeric positions of our plaintext will be:-&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;k&lt;/th&gt;
&lt;th&gt;i&lt;/th&gt;
&lt;th&gt;l&lt;/th&gt;
&lt;th&gt;l&lt;/th&gt;
&lt;th&gt;t&lt;/th&gt;
&lt;th&gt;h&lt;/th&gt;
&lt;th&gt;e&lt;/th&gt;
&lt;th&gt;k&lt;/th&gt;
&lt;th&gt;i&lt;/th&gt;
&lt;th&gt;n&lt;/th&gt;
&lt;th&gt;g&lt;/th&gt;
&lt;th&gt;t&lt;/th&gt;
&lt;th&gt;o&lt;/th&gt;
&lt;th&gt;n&lt;/th&gt;
&lt;th&gt;i&lt;/th&gt;
&lt;th&gt;g&lt;/th&gt;
&lt;th&gt;h&lt;/th&gt;
&lt;th&gt;t&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Let our key be 7, after using the formula for encryption, the number will look like:-&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;11&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;th&gt;20&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;11&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;20&lt;/th&gt;
&lt;th&gt;15&lt;/th&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;20&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;And finally, converting the numbers back to letters will give us our ciphertext,&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;18&lt;/th&gt;
&lt;th&gt;16&lt;/th&gt;
&lt;th&gt;19&lt;/th&gt;
&lt;th&gt;19&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;15&lt;/th&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;th&gt;18&lt;/th&gt;
&lt;th&gt;16&lt;/th&gt;
&lt;th&gt;21&lt;/th&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;22&lt;/th&gt;
&lt;th&gt;21&lt;/th&gt;
&lt;th&gt;16&lt;/th&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;th&gt;15&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;V&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Letters after conversion are :-&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;'RPSSAOLRPUNAVUPNOA'&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The gibberish above is ciphertext, it is often written without any spaces to add complexity to the ciphertext.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#writing-python-code-for-shift-cipher"&gt;
  &lt;/a&gt;
  Writing Python code for Shift Cipher
&lt;/h2&gt;

&lt;p&gt;Writing code for this cipher is really easy, a one liner, some might say. Here's the code:--&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;shift_encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plain_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cipher_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# stores encrtypted text
&lt;/span&gt;    &lt;span class="n"&gt;plain_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plain_text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# reduce complexity
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plain_text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cipher_text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# real encryption happens here
&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cipher_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The code up here is pretty self explanatory, except a few lines. Let's go through all the lines on by one.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;cipher_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# stores encrtypted text
&lt;/span&gt;&lt;span class="n"&gt;plain_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plain_text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# reduce complexity
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;These two lines define a list names &lt;code&gt;cipher_text&lt;/code&gt; to store the text after encryption and reduces the complexity of the plain text by converting the text to lower case and removing all the whitespaces.&lt;/p&gt;

&lt;p&gt;Then comes the most important line in the code:-&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;cipher_text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;First of all, this line of code converts the letters to their ASCII representation using the &lt;code&gt;ord&lt;/code&gt; function, which means a will become 97, b will become 98, and so on. &lt;/p&gt;

&lt;p&gt;Then it will subtract 97 from the ASCII code, which will convert 97 to 0, hence placing 'a' at 0th position and placing 'z' at 25th position. This is done to simplify the operation of shifting.&lt;/p&gt;

&lt;p&gt;After that is done, we proceed and add the &lt;code&gt;KEY&lt;/code&gt; to shift and actually encrypt the data.&lt;/p&gt;

&lt;p&gt;Then we do &lt;code&gt;mod 26&lt;/code&gt; because after subtracting 97 our alphabets lies from 0 to 25, and doing &lt;code&gt;mod 26&lt;/code&gt; makes sure that nothing goes out of range of our alphabets. 97 is added in end to convert the the shifted numbers back to their ASCII representations.&lt;/p&gt;

&lt;p&gt;After this much is done, we convert the shifted ASCII codes back to characters using the &lt;code&gt;chr&lt;/code&gt; function. And the encryption is done.&lt;/p&gt;

&lt;p&gt;You can see that this line is inside a for loop, that is to ensure that the transformation in this line of code is applied to every single letter of the &lt;code&gt;plain_text&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the end,&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cipher_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We convert the encrypted characters to a string and return it.&lt;/p&gt;

&lt;p&gt;Decryption part of the cipher is also pretty much the same, except a small thing.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;shift_decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cipher_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;plain_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;cipher_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cipher_text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cipher_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;plain_text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plain_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Instead of adding &lt;code&gt;KEY&lt;/code&gt;, we subtract it this time to perform a inverse of the shift operation we did in the encryption process.&lt;/p&gt;

&lt;p&gt;You can try the code here:--&lt;/p&gt;

&lt;p&gt;(JUST CLICK ON THE RUN(&amp;gt;) BUTTON)&lt;/p&gt;


&lt;div class="ltag__replit"&gt;
  &lt;iframe height="550px" src="https://repl.it/@PranavPatel4/CryptoCode?lite=true"&gt;&lt;/iframe&gt;
&lt;/div&gt;



</description>
      <category>python</category>
      <category>security</category>
      <category>cybersecurity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Deleting all S3 buckets in a single CLI command</title>
      <author>JavaScript Room</author>
      <pubDate>Sun, 06 Jun 2021 09:32:02 +0000</pubDate>
      <link>https://dev.to/room_js/deleting-all-s3-buckets-in-a-single-cli-command-fdm</link>
      <guid>https://dev.to/room_js/deleting-all-s3-buckets-in-a-single-cli-command-fdm</guid>
      <description>&lt;p&gt;Hi everyone!&lt;br&gt;
This is more like a cheatsheet for myself, but maybe it will be also helpful for someone else. If you use AWS S3 storage service you probably have noticed that you cannot remove not empty buckets straight away via website, you have to clean up the content first. And then, when you have a bunch of buckets you want to delete, it's a bit of pain to remove them one by one via the AWS website interface. AWS command line interface can save us some time here. Don't forget to &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html"&gt;install it&lt;/a&gt; and &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html"&gt;configure your credentials&lt;/a&gt;. Then you can use the commands below in your terminal.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#delete-all-s3-buckets-stored-in-your-aws-account-including-not-empty"&gt;
  &lt;/a&gt;
  Delete all S3 buckets stored in your AWS account (including not empty):
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;aws s3 ls | cut -d" " -f 3 | xargs -I{} aws s3 rb s3://{} --force
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#delete-only-empty-buckets-without-raw-force-endraw-flag"&gt;
  &lt;/a&gt;
  Delete only empty buckets (without &lt;code&gt;--force&lt;/code&gt; flag):
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;aws s3 ls | cut -d" " -f 3 | xargs -I{} aws s3 rb s3://{}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#delete-only-buckets-with-the-prefix-raw-old-endraw-"&gt;
  &lt;/a&gt;
  Delete only buckets with the prefix &lt;code&gt;old_&lt;/code&gt;:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;aws s3 ls | grep 'old_*' | cut -d" " -f 3 | xargs -I{} aws s3 rb s3://{} --force
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;If you have any questions or suggestion on the commands don't hesitate to leave a comment below. Have a productive day!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Building a compiler – basic concepts</title>
      <author>Siddharth</author>
      <pubDate>Sun, 06 Jun 2021 09:25:03 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/building-a-compiler-basic-concepts-1j1d</link>
      <guid>https://dev.to/siddharthshyniben/building-a-compiler-basic-concepts-1j1d</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Be sure to check out the &lt;a href="https://dev.to/siddharthshyniben/let-s-build-a-compiler-11c3"&gt;previous part&lt;/a&gt; for more info on this series&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's talk about how a compiler works.&lt;/p&gt;

&lt;p&gt;Most compilers seperate their work into three parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Parsing&lt;/strong&gt; is taking raw code and turning it into a more abstract representation of the code&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Transformation&lt;/strong&gt; is taking the abstract structure and &lt;em&gt;transforming&lt;/em&gt; it into something more like the language you want to compile to&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code Generation&lt;/strong&gt; is generating code from the transformed structure&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#parsing"&gt;
  &lt;/a&gt;
  Parsing
&lt;/h2&gt;

&lt;p&gt;Parsing typically gets broken down into 2 steps;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Lexical analysis&lt;/strong&gt; takes the raw code and splits it apart into these things called tokens by a thing called a tokenizer (or lexer).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tokens are basically objects which show a piece of the code and what it is. They could be numbers, variables, punctuation. operators, whatever&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Syntactic analysis&lt;/strong&gt; takes the tokens and adds more meaning to them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, It's not very helpful to see a number followed by an operator followed by an operator in it's raw form; It makes more sense to group them together and that's exactly what this step does.&lt;/p&gt;

&lt;p&gt;The output of this step is an Abstract Syntax Tree.&lt;br&gt;
  An abstract syntax tree, or AST, is a deeply nested object which gives us a lot of info about the code in a way which is easier to work with.&lt;/p&gt;

&lt;p&gt;For the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The tokens might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"identifier"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"let"&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"extrapunct"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"the"&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"extrapunct"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"variable"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"identifier"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"x"&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"punctuator"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"be"&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"punctuator"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"+"&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2"&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the AST may look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Program"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"VariableDeclaration"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"declarations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"VariableDeclarator"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Identifier"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"x"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"init"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"BinaryExpression"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"left"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"NumericLiteral"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"operator"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"right"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"NumericLiteral"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2"&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you read through this you should get a good idea of what this means.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transformation"&gt;
  &lt;/a&gt;
  Transformation
&lt;/h2&gt;

&lt;p&gt;The next thing to do is to transform the AST. This step just takes the AST from the last step and makes changes to it. The kind of manipulation depends on the compiler. We can manipulate the AST in the same language (TypeScript for example) or we can translate into a different language (our case).&lt;/p&gt;

&lt;p&gt;Since we are compiling to a new language, we'll focus on creating an entire new AST that is similar to the target language. More on this later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#moving-through-the-ast"&gt;
  &lt;/a&gt;
  Moving through the AST
&lt;/h3&gt;

&lt;p&gt;We need to be able to navigate through all the parts of an AST. We do so depth-first, i.e we go deeper and deeper through the first part (or &lt;strong&gt;node&lt;/strong&gt;) until we reach it's end, then go to the next node.&lt;/p&gt;

&lt;p&gt;So for the following AST:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json-doc"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Program"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// (1)&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"VariableDeclaration"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// (2)&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"declarations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"VariableDeclarator"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// (3)&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// (4)&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Identifier"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"x"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"init"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// (5)&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"BinaryExpression"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// (6)&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"left"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; 
                            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"NumericLiteral"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// (7)&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"operator"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// (8)&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"right"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"NumericLiteral"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// (9)&lt;/span&gt;&lt;span class="w"&gt;
                            &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2"&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We would go like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Program&lt;/code&gt; &lt;em&gt;(1)&lt;/em&gt; – The top level&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;VariableDeclaration&lt;/code&gt; &lt;em&gt;(2)&lt;/em&gt; – The first node in &lt;code&gt;Program&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;VariableDeclarator&lt;/code&gt; &lt;em&gt;(3)&lt;/em&gt; – The first declaration&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;id&lt;/code&gt; &lt;em&gt;(4)&lt;/em&gt; – The name of the variable being declared&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;init&lt;/code&gt; &lt;em&gt;(5)&lt;/em&gt; – Whatever the variable is initialized to&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;BinaryExpression&lt;/code&gt; &lt;em&gt;(6)&lt;/em&gt; – We are initializing an expression (with two sides, so binary) which is 1 &lt;em&gt;(7)&lt;/em&gt; + &lt;em&gt;(8)&lt;/em&gt; 2 &lt;em&gt;(9)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we were directly manipulating this AST, we would have to make all sorts of changes, but visiting each node is enough for creating a new AST.&lt;/p&gt;

&lt;p&gt;I use the word "visiting" is because there is this pattern of how to represent  operations on elements of an object structure.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#visitors"&gt;
  &lt;/a&gt;
  Visitors
&lt;/h4&gt;

&lt;p&gt;The basic idea here is that we are going to create a "visitor" object that has methods which will handle different nodes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;visitor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;NumberLiteral&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="nx"&gt;CallExpressiom&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we traverse the AST, we can call the methods on this visitor whenever we "visit" a node of a matching type.&lt;/p&gt;

&lt;p&gt;We also want to pass in the node and a reference to the parent node&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;visitor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;NumberLiteral&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="nx"&gt;CallExpressiom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But there's a few cases we need to talk about. Let's take our previous AST:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Program&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;VariableDeclaration&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;VariableDeclarator&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Identifier&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;init&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;BinaryExpression&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NumericLiteral&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NumericLiteral&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At some point we are gonna reach a dead end in the tree, so we have to go up a level or "exit". So going down the tree we "enter" each node and going up we "exit".&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-&amp;gt; &lt;code&gt;Program&lt;/code&gt; (enter)

&lt;ul&gt;
&lt;li&gt;-&amp;gt; &lt;code&gt;VariableDeclaration&lt;/code&gt; (enter)

&lt;ul&gt;
&lt;li&gt;-&amp;gt; &lt;code&gt;VariableDeclarator&lt;/code&gt; (enter)

&lt;ul&gt;
&lt;li&gt;-&amp;gt; &lt;code&gt;Identifier&lt;/code&gt; (enter)&lt;/li&gt;
&lt;li&gt;&amp;lt;- &lt;code&gt;Identifier&lt;/code&gt; (exit)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&amp;lt;- &lt;code&gt;VariableDeclarator&lt;/code&gt; (exit)&lt;/li&gt;
&lt;li&gt;-&amp;gt; &lt;code&gt;init&lt;/code&gt; (enter)

&lt;ul&gt;
&lt;li&gt;-&amp;gt; &lt;code&gt;BinaryExpression&lt;/code&gt; (enter)

&lt;ul&gt;
&lt;li&gt;-&amp;gt; &lt;code&gt;NumericLiteral&lt;/code&gt; (enter)&lt;/li&gt;
&lt;li&gt;&amp;lt;- &lt;code&gt;NumericLiteral&lt;/code&gt; (exit)&lt;/li&gt;
&lt;li&gt;-&amp;gt; &lt;code&gt;NumericLiteral&lt;/code&gt; (enter)&lt;/li&gt;
&lt;li&gt;&amp;lt;- &lt;code&gt;NumericLiteral&lt;/code&gt; (exit)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&amp;lt;- &lt;code&gt;BinaryExpression&lt;/code&gt; (exit)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;lt;- &lt;code&gt;init&lt;/code&gt; (exit)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;lt;- &lt;code&gt;VariableDeclaration&lt;/code&gt; (exit)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;lt;- &lt;code&gt;Program&lt;/code&gt; (exit)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, to support this, we need to change our &lt;code&gt;visitor&lt;/code&gt; one last time&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;visitor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;NumberLiteral&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// Rest of the stuff&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#code-generation"&gt;
  &lt;/a&gt;
  Code generation
&lt;/h2&gt;

&lt;p&gt;The last thing to do is to generate code. This may sometimes overlap with transformation, but most of the time it is just taking our final AST and stringifies it into code.&lt;/p&gt;

&lt;p&gt;Code generators work several different ways, some compilers reuse the tokens from earlier, others will have created a separate AST so that they can print nodes linearly, but from what I can tell most will use the same AST we just created, which is what we’re going to focus on.&lt;/p&gt;

&lt;p&gt;Effectively our code generator will know how to "print" all of the different node types of the AST, and it will recursively call itself to print nested nodes until everything is printed into one long string of code.&lt;/p&gt;




&lt;p&gt;And that's it! That's all the different pieces of a compiler. &lt;/p&gt;

&lt;p&gt;Every compiler won't look the same way. Compilers have many purposes, but some of them may need more steps than shown here. But you should have a high level idea of what compilers look like.&lt;/p&gt;

&lt;p&gt;Now that I’ve explained all of this, you’re all good to go write your own compilers right? &lt;/p&gt;

&lt;p&gt;Just kidding, that's what I'm here to help with :P&lt;/p&gt;

&lt;p&gt;So we'll begin in the next part! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
