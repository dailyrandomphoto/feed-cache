<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>THE 6 BEST SITES TO LEARN JAVASCRIPT FOR FREE</title>
      <author>Kouluru Nanda Kishore Reddy</author>
      <pubDate>Tue, 07 Sep 2021 04:52:15 +0000</pubDate>
      <link>https://dev.to/koulurunandakishorereddy/the-6-best-sites-to-learn-javascript-for-free-343c</link>
      <guid>https://dev.to/koulurunandakishorereddy/the-6-best-sites-to-learn-javascript-for-free-343c</guid>
      <description>&lt;p&gt;JavaScript is everywhere, so we wanted to make it easier for JavaScript learners to choose the resources that will empower them as they progress through their learning journey. Sites like these are incredible opportunities to develop your skills and share them.&lt;/p&gt;

&lt;h1&gt;1 . JavaScript Algorithms and Data Structures  &lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered in This Course:&lt;/b&gt; JavaScript ES6, Regular Expressions, Data Structures, Debugging&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qAj0CDpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628391318518/wYVcp_0wW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qAj0CDpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628391318518/wYVcp_0wW.png" alt="u09kss7fb8l61.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Certification : &lt;/b&gt;&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;freecodecamp.org&lt;/a&gt;&lt;a&gt; &lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;2 . JavaScript Fundamentals&lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered in This Course:&lt;/b&gt; HTML basics, Variables,Operators,Errors,Custom Objects,Popups&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jcb8v_Cg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628392365543/IbH8_nYAs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jcb8v_Cg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628392365543/IbH8_nYAs.png" alt="Screenshot (122) (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Course : &lt;/b&gt; &lt;a href="https://www.udemy.com/course/javascriptfundamentals/"&gt;udemy.com&lt;/a&gt;&lt;a&gt;  &lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;3 . The Modern JavaScript Tutorial &lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered : &lt;/b&gt;Fundamentals,Code Quality,Objects,Data Types,Functions,Prototypes&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--53Ws0jwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628398562511/EPS4978n8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--53Ws0jwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628398562511/EPS4978n8.png" alt="the-modern-javascript-tutorial.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Blog :&lt;/b&gt;&lt;a href="https://javascript.info/"&gt;javascript.info&lt;/a&gt;&lt;a&gt; &lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;4 . Eloquent JavaScript &lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered : &lt;/b&gt;Values,Types,Operators,Functions,HTTP,Modules,Node.js,Projects&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tFyv6Mzl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628398901302/SF3i_lkHX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tFyv6Mzl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628398901302/SF3i_lkHX.png" alt="eloquent-javascript.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Ebook : &lt;/b&gt; &lt;a href="https://eloquentjavascript.net/"&gt;eloquentjavascript&lt;/a&gt;&lt;a&gt;  &lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;5 . A re-introduction to JavaScript&lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered : &lt;/b&gt;Numbers,Strings,Other types,Variables,Operators,Control structures,Objects,Arrays,Functions,Custom objects&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oYOsKvkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628399481121/yDmczQLbe.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oYOsKvkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628399481121/yDmczQLbe.jpeg" alt="0452-05-reintroduction-javascript.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Blog :&lt;/b&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript"&gt;developer.mozilla.org&lt;/a&gt;&lt;a&gt; &lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;6 . Learn modern JavaScript&lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered : &lt;/b&gt;ES6 from scratch,var &amp;amp; let,const,Javascript scope,Mutation,Object.freeze(),Arrow functions,High order functions,Default parameters,Rest operator,Spread operator,Object destructuring,Array destructuring,
Constructor functions,Declarative functions, ES6 classes, Getters and setters, ES6 modules, Import &amp;amp; Export&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YAIIL4f3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628400176178/tE-iVWFxF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YAIIL4f3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628400176178/tE-iVWFxF.png" alt="js.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;interactive : &lt;/b&gt;&lt;a href="https://scrimba.com/learn/es6"&gt;scrimba.com&lt;/a&gt;&lt;a&gt;  &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is your favourite website to learn JavaScript? Let us know down in the comments below!&lt;/p&gt;



&lt;br&gt;
To all my readers out here I have an interesting thing to share with you. There's a hackathon going on there. For more information, keep reading.

&lt;p&gt;A hackathon might be an alternative for you if you are a computer science student or an upcoming developer. The benefit of participating in an online or physical hackathon is that you can develop coding skills, work with developers, develop a resume, and meet peers.&lt;/p&gt;

&lt;p&gt;I recommend Hack This Fall 2.0 if you are interested in such an event. The event takes place between 22nd and 24th of October. A 48-Hour Virtual Hackathon is taking this to the next level this year, with the aim of promoting hackers and helping them to develop new ideas and prototypes in various domains. A part of their mission is also to support beginners to hack our society and bring a positive change.&lt;/p&gt;

&lt;p&gt;If you want to register for this wonderful hackathon you can do it:&lt;a href="https://hackthisfall.devpost.com/"&gt;click here&lt;/a&gt;.don't forget to use my referral code : HTFHE068. Over a thousand hackers have already signed up.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Linked List Questions: Detect a Cycle - Set or Hashtable Approach</title>
      <author>Kathan Vakharia</author>
      <pubDate>Tue, 07 Sep 2021 04:33:17 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/linked-list-questions-detect-a-cycle-set-or-hashtable-approach-5gb2</link>
      <guid>https://dev.to/kathanvakharia/linked-list-questions-detect-a-cycle-set-or-hashtable-approach-5gb2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#video-explanation"&gt;
  &lt;/a&gt;
  Video Explanation
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8zVzUl7v-ds"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Note: In the youtube video above, I have explained 2 approaches. In this post, I'll explain the first one i.e. first 8 mins of the video.&lt;/p&gt;

&lt;p&gt;If you are more into reading, continue with the blog. I would still suggest you at least download the annotations that I did in the video :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-question"&gt;
  &lt;/a&gt;
  The Question
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://leetcode.com/problems/linked-list-cycle/"&gt;https://leetcode.com/problems/linked-list-cycle/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Given &lt;code&gt;head&lt;/code&gt;, the head of a linked list, determine if the linked list has a cycle in it.&lt;/p&gt;

&lt;p&gt;There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the &lt;code&gt;next&lt;/code&gt; pointer.&lt;/p&gt;

&lt;p&gt;Return &lt;code&gt;true&lt;/code&gt; if there is a cycle in the linked list. Otherwise, return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Give yourself at least 15-20 mins to figure out the solution :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;p&gt;The idea here is to traverse the list, and while doing that store the nodes in a &lt;code&gt;set&lt;/code&gt;. If there's a cycle present, we'll try to insert a node(the &lt;em&gt;starting point&lt;/em&gt; of cycle) for the &lt;em&gt;second&lt;/em&gt; time, and as a &lt;code&gt;set&lt;/code&gt; cannot have &lt;strong&gt;duplicate&lt;/strong&gt; values, we can happily stop the algorithm by saying, YES there's a cycle in list. On the contrary, if a cycle is not present, we'll reach the end of the list and stop the algorithm by saying NO there's no cycle in the list.&lt;/p&gt;

&lt;p&gt;Here's the pseudo code,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ListNode Node = head
Set s
while(Node != NULL)
    if(s.contains(Node)) // a node is encountered second time
        return true 
    else
        s.insert(Node)
        Node = Node.next
//if cycle was not found ie. 'if' condition was never met
return false

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;🗒 We are creating a &lt;em&gt;set of node's addresses&lt;/em&gt; here NOT the node's values, Why? because node's addresses are &lt;strong&gt;unique&lt;/strong&gt; in the list and values are not. For Example, 1→2→3→3→NULL doesn't contain a cycle but if we go by storing values in the set, the algorithm will say it does contain a cycle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#why-raw-set-endraw-important"&gt;
  &lt;/a&gt;
  Why &lt;code&gt;set&lt;/code&gt;? (IMPORTANT)
&lt;/h3&gt;

&lt;p&gt;Problem-solving is not just about solving questions, it is also about deciding proper data structure. Some of you may have this question, why did we use set here and not any other data structure?&lt;/p&gt;

&lt;p&gt;Our need here is to perform two operations: &lt;em&gt;store&lt;/em&gt; and &lt;em&gt;lookup(read)&lt;/em&gt; from our data structure in every iteration and as a &lt;code&gt;set&lt;/code&gt; is implemented as &lt;code&gt;hashtable&lt;/code&gt; in programming languages, we can do &lt;strong&gt;O(1)&lt;/strong&gt; &lt;em&gt;insertion&lt;/em&gt; as well as &lt;em&gt;lookup&lt;/em&gt;. So although you can use any data structure of your choice, &lt;code&gt;set&lt;/code&gt; a.k.a &lt;code&gt;hashtable&lt;/code&gt;  is the best choice!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you still have any doubts, you can refer the video explanation :)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  C++ Code
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#definition-of-linked-list"&gt;
  &lt;/a&gt;
  Definition of Linked List
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Definition for singly-linked list.&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;ListNode&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* A note about 'count(Key)'
*Searches the container for elements whose value is k and returns 
*  the number of elements found
*Because unordered_set containers do not allow for duplicate keys,
*   this means that the function returns 1 if an element with 
*   that value exists in the container, and zero otherwise.
*/&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;hasCycle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;unordered_set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nodes_seen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes_seen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;nodes_seen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#complexity-analysis"&gt;
  &lt;/a&gt;
  Complexity Analysis
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;N&lt;/code&gt;: Length of Linked List&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-complexity-on"&gt;
  &lt;/a&gt;
  Time Complexity: O(N)
&lt;/h3&gt;

&lt;p&gt;We are traversing the entire list and at every iteration, constant-time operations are done. ( and one more time if a cycle exists but asymptotically, it's still O(N) )&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#space-complexity-on"&gt;
  &lt;/a&gt;
  Space Complexity: O(N)
&lt;/h3&gt;

&lt;p&gt;We are storing every node exactly once.&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Backend Developer Roadmap 2021 | How to Become a Backend Developer</title>
      <author>Pranav</author>
      <pubDate>Tue, 07 Sep 2021 02:52:15 +0000</pubDate>
      <link>https://dev.to/codedamn/backend-developer-roadmap-2021-how-to-become-a-backend-developer-3flg</link>
      <guid>https://dev.to/codedamn/backend-developer-roadmap-2021-how-to-become-a-backend-developer-3flg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-http"&gt;
  &lt;/a&gt;
  1) HTTP
&lt;/h2&gt;

&lt;p&gt;HTTP stands for HyperText Transfer Protocol, a widely understood acronym, but do you know what this protocol is and why it is required. Think that you are only given a terminal with Curl or NetCat installed. Will you be able to send a raw HTTP Request without any help? It doesn't mean that you have to memorize the format of an HTTP Request. It simply means whether you are capable of sending a request without any help.‌&lt;br&gt;
‌You must have a semantic understanding of HTTP Object &amp;amp; its method, status code, headers &amp;amp; body of an HTTP Object. You should understand the different types of content types in the response headers. You should not only understand the syntax level, but you must also understand the technical level about what HTTP is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-rest"&gt;
  &lt;/a&gt;
  2) REST
&lt;/h2&gt;

&lt;p&gt;REST is another popular term among beginner devs that stands for Representational State Transfer, but it is essential to understand to perform HTTP requests better. While many people continue to use the terms REST and HTTP interchangeably, the truth is that they are two different things. REST refers to a set of attributes of a particular architectural style, while HTTP is a well-defined protocol that happens to exhibit many features of a RESTful system.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lH1QNxYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi9y3n8astreoq4enj3k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lH1QNxYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi9y3n8astreoq4enj3k.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
REST architecture states different status codes and using the correct method names. You should be familiar with the different types of HTTP Methods and their use cases. The most important HTTP methods are GET, POST, PUT &amp;amp; DELETE. Also, you should know about the JSON response from the server and how to handle it.‌&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V9p20GnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acat0lt3uv35zhq3a5dy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9p20GnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acat0lt3uv35zhq3a5dy.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Similarly, you can also learn GraphQL. It is technically not an alternative to REST but has advantageous features over REST. While using GraphQL, you don't need to care about the different HTTP Methods. Your focus will be on the Schema of the GraphQL Query.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-programming-language"&gt;
  &lt;/a&gt;
  3) Programming Language
&lt;/h2&gt;

&lt;p&gt;The most important is to have a solid grip on a programming language that can run on a server. This does not include HTML as it is a Markup language and not a programming language. You can learn many languages here, namely, Node.JS (a runtime environment to run JavaScript in the server), Python, Rust, PHP &amp;amp; Golang. These are the most used languages for the back-end of your web application.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KM8VxmSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygl0koaspkkym5adfb2d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KM8VxmSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygl0koaspkkym5adfb2d.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
A solid understanding of programming languages is very necessary. This doesn't mean learning how the loops, variables, functions works. This also includes creating HTTP requests &amp;amp; servers using the programming language and having good fundamentals in the networking (which is covered in the next point).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-networking-amp-linux-fundamentals"&gt;
  &lt;/a&gt;
  4) Networking &amp;amp; Linux Fundamentals
&lt;/h2&gt;

&lt;p&gt;You need to have a good understanding of how networks work on any operating system level. You'll primarily be working with the TCP, a 4th level protocol as per the OSI Model.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--71_5L9ZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u58o0q52v5pa445y5g7y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--71_5L9ZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u58o0q52v5pa445y5g7y.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Understanding the basics of Linux Fundamentals is essential as when you are working with a server, you most probably won't have interactive Graphical User Interfaces to handle the server. Therefore, it is very important to find your way around the terminal or command line, which is probably "bash" if you use Linux servers.‌&lt;br&gt;
‌Also, networking is important at the Operating System level as it is sometimes essential to communicate and retrieve and insert data into a database which brings us to the following necessary things, Databases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-database"&gt;
  &lt;/a&gt;
  5) Database
&lt;/h2&gt;

&lt;p&gt;Databases are very essential to maintain and organize the data generated by the users. This could be a SQL (Structured Query Language) or a NoSQL (Not Only Structured Query Language) database. Both have a lot in common, for example, indexing is a common concept in both kinds of databases.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UFbDM8ie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujkdrsn0lqurkpjoyh5n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UFbDM8ie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujkdrsn0lqurkpjoyh5n.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
The most common SQL databases would be Postgres or MySQL, and for NoSQL databases, it would be MongoDB or Cassandra or Redis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-caching"&gt;
  &lt;/a&gt;
  6) Caching
&lt;/h2&gt;

&lt;p&gt;Caching data is important because it helps speed up application performance and increase efficiency. It stores data locally, which means browsers and websites will load faster because access elements like homepage images have previously been downloaded.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rP8X4WRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5glxvk9o65d0kr5l2tep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rP8X4WRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5glxvk9o65d0kr5l2tep.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
The most common caching technologies that are used are Redis &amp;amp; Memcached. Another promising technology that helps you with caching is AWS ElastiCache, which brings us to our following topic, cloud providers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-cloud-providers"&gt;
  &lt;/a&gt;
  7) Cloud Providers
&lt;/h2&gt;

&lt;p&gt;When it comes to Cloud Providers, the most resonating names are Amazon Web Services, Google Cloud Platform, and Microsoft Azure, among others like Digital Ocean.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZzZdgVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cw4xqsjwui43m2dugt9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZzZdgVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cw4xqsjwui43m2dugt9.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
You have to pick any one of the cloud providers and get into their ecosystem and understand their embedded features for explicable use. Most of them also provide some free credits for you to use their cloud service. Cloud provides increased amounts of storage and processing power to run the applications &amp;amp; it's easy to access information, process and analyze data, and connect people and resources from any location anywhere in the world. So it's vital to have some fundamental understanding of any cloud provider.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-web-security"&gt;
  &lt;/a&gt;
  8) Web Security
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2DdXdRHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9gr1rg1pf3t3no13tdh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2DdXdRHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9gr1rg1pf3t3no13tdh.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Anyone can code but is your code secure enough that it's not vulnerable, and the data you are capturing is safe, probably!. So it's very, very important to understand web security before developing scalable applications.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5i1fquWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyigrgo6bp96cfnt0o9h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5i1fquWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyigrgo6bp96cfnt0o9h.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
You probably don't want your database to be corrupted or just got cloned and getting dumped by the hacker. Any back-end developer can make and manage servers, but a good back-end engineer can write secure code that keeps the collected data and the users' privacy safe. More about web security can be read &lt;a href="https://codedamn.com/news/5-web-security-tips-for-web-apps"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-containerization-amp-testing"&gt;
  &lt;/a&gt;
  9) Containerization &amp;amp; Testing
&lt;/h2&gt;

&lt;p&gt;Containerization and Testing are optional technologies for you to learn as a beginner. As a beginner, you can choose Docker to learn Containerization. You can also prefer Kubernetes but it is overkill. For testing, you can use Jest for your back-end testing and Postman for your API testing.&lt;/p&gt;

&lt;p&gt;You can watch the YouTube video &lt;a href="https://www.youtube.com/watch?v=aZkG0b6oi4s"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>backend</category>
      <category>graphql</category>
      <category>http</category>
      <category>linux</category>
    </item>
    <item>
      <title>Intercepting HTTP Requests with NodeJS</title>
      <author>Henry Williams</author>
      <pubDate>Tue, 07 Sep 2021 02:20:02 +0000</pubDate>
      <link>https://dev.to/henryjw/intercepting-http-requests-with-nodejs-21ba</link>
      <guid>https://dev.to/henryjw/intercepting-http-requests-with-nodejs-21ba</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;As part of a project at work, I had to develop a way to intercept and store HTTP traffic for any given backend application (microservice in this case). This would have been a fairly straightforward task, but our backend is composed of many services (and many repos). Therefore, the solution had to be as seamless as possible so that it could be easily integrated into any of the services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR;
&lt;/h2&gt;

&lt;p&gt;Using &lt;a href="https://www.npmjs.com/package/@mswjs/interceptors"&gt;&lt;code&gt;@mswjs/interceptors&lt;/code&gt;&lt;/a&gt; makes it straightforward to intercept HTTP traffic on your backend app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intercepting-http-traffic"&gt;
  &lt;/a&gt;
  Intercepting HTTP Traffic
&lt;/h2&gt;

&lt;p&gt;For my use case, there were two options I could think of for capturing the HTTP traffic:&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;Create a library that wraps an HTTP client library like Axios&lt;/li&gt;
    &lt;li&gt;Somehow intercept all HTTP traffic&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In an ideal world, I would have chosen &lt;strong&gt;option 1&lt;/strong&gt; since it would be the simplest. Unfortunately, the project I work on consists of many microservices owned by different teams. Therefore, it would make it difficult for everyone to go back and refactor their code to use this new library.&lt;/p&gt;

&lt;p&gt;Therefore, my only option was really &lt;strong&gt;option 2&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-attempt"&gt;
  &lt;/a&gt;
  First attempt
&lt;/h3&gt;

&lt;p&gt;My first attempt was ok, but far from perfect. After trying to intercept the traffic directly through the low-level &lt;a href="https://nodejs.org/api/http.html"&gt;http&lt;/a&gt; module, I opted for a more higher-level solution. My idea was to &lt;a href="https://stackoverflow.com/a/5626250/1650910"&gt;monkey patch&lt;/a&gt; Axios's request methods to inject my own logic before a request is sent and after the response is received.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentAxios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AxiosInstance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;put&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;patch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;options&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;originalFunction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;thisArgument&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cleanedMethod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_parseAxiosArguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpRequestEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cleanedMethod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;


      &lt;span class="c1"&gt;// Intentionally not waiting for a response to avoid adding any latency with this instrumentation&lt;/span&gt;
      &lt;span class="nx"&gt;doSomethingWithRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;originalFunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thisArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cleanedMethod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="nx"&gt;doSomethingWithResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method worked fine, but then I accidentally bumped into a cleaner approach while reading the Axios docs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#second-attempt"&gt;
  &lt;/a&gt;
  Second attempt
&lt;/h3&gt;

&lt;p&gt;To my surprise, Axios actually offers an API for intercepting requests and responses!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createInterceptor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;InterceptorApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IsomorphicRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IsomorphicResponse&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mswjs/interceptors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;interceptXMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mswjs/interceptors/lib/interceptors/XMLHttpRequest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;interceptClientRequest&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mswjs/interceptors/lib/interceptors/ClientRequest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentAxios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AxiosInstance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interceptors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interceptors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_instrumentHttpResponse&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AxiosRequestConfig&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;AxiosRequestConfig&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;common&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpRequestEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;


   &lt;span class="c1"&gt;// Intentionally not waiting for a response to avoid adding any latency with this instrumentation&lt;/span&gt;
   &lt;span class="nx"&gt;doSomethingWithRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AxiosResponse&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;AxiosResponse&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;


   &lt;span class="c1"&gt;// Intentionally not waiting for a response to avoid adding any latency with this instrumentation&lt;/span&gt;
   &lt;span class="nx"&gt;doSomethingWithResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ah! Much better. &lt;strong&gt;However&lt;/strong&gt;, there is another complication to this approach that's also present in the first attempt: the interception has to be set for every Axios instance; this makes for a less than ideal developer experience. I initially assumed everyone used the default axios instance. However, it turns out that it's also possible to create new instances via &lt;a href="https://github.com/axios/axios#creating-an-instance"&gt;&lt;code&gt;axios.create()&lt;/code&gt;&lt;/a&gt;. So back to the drawing board 😔&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-solution"&gt;
  &lt;/a&gt;
  Final solution
&lt;/h3&gt;

&lt;p&gt;Before attempting to mess with the low-level &lt;code&gt;http&lt;/code&gt; module, I decided to look for some existing solutions. And after digging around for some time, I stumbled into &lt;a href="https://www.npmjs.com/package/@mswjs/interceptors"&gt;&lt;code&gt;@mswjs/interceptors&lt;/code&gt;&lt;/a&gt;. This library is very well documented and is TypeScript friendly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHTTPTraffic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;interceptor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createInterceptor&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="c1"&gt;// Required even if not used&lt;/span&gt;
      &lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;interceptXMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;interceptClientRequest&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;

   &lt;span class="nx"&gt;interceptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_handleHttpRequest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="nx"&gt;interceptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;response&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_handleHttpResponse&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="nx"&gt;interceptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_handleHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IsomorphicRequest&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpRequestEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;


   &lt;span class="c1"&gt;// Intentionally not waiting for a response to avoid adding any latency with this instrumentation&lt;/span&gt;
   &lt;span class="nx"&gt;doSomethingWithRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_handleHttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IsomorphicRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IsomorphicResponse&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;


   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="c1"&gt;// Intentionally not waiting for a response to avoid adding any latency with this instrumentation&lt;/span&gt;
   &lt;span class="nx"&gt;doSomethingWithResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#caviats"&gt;
  &lt;/a&gt;
  Caviats
&lt;/h3&gt;

&lt;p&gt;Although the final solution is more general and is also agnostic to the client HTTP library used, there are some downsides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since all HTTP traffic going thorugh the app is intercepted, there needs to be some logic in place to know which requests to ignore. E.g., instrumentation tools like NewRelic regularly send requests to capture metadata. This can add a lot of noise if not handled properly&lt;/li&gt;
&lt;li&gt;Dependence on another library. Whether this is a big deal depends on what the interception is used for. Probably not a big deal for most projects&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Parallelism in JavaScript: build super programs🔥🔥</title>
      <author>sk</author>
      <pubDate>Tue, 07 Sep 2021 01:19:11 +0000</pubDate>
      <link>https://dev.to/sfundomhlungu/parallelism-in-javascript-build-super-programs-5a9k</link>
      <guid>https://dev.to/sfundomhlungu/parallelism-in-javascript-build-super-programs-5a9k</guid>
      <description>&lt;h1&gt;
  &lt;a href="#concurrency-vs-parallelism"&gt;
  &lt;/a&gt;
  Concurrency vs Parallelism
&lt;/h1&gt;



&lt;h2&gt;
  &lt;a href="#concurrency"&gt;
  &lt;/a&gt;
  concurrency:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;single object&lt;/strong&gt; performing multiple tasks( example: a juggler) &lt;/p&gt;

&lt;p&gt;we already talked about this system in the previous chapter: the task queue and microtask queue which are both executed by a single thread (interchanged), the main thread.&lt;/p&gt;

&lt;p&gt;both async and sync code in JS is executed by a single thread, which juggles both of them based on the state of the event loop.&lt;/p&gt;

&lt;p&gt;Concurrency example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
 // doing multiple tasks in a period of time

task a task b  task c

 concurrency:  
        task a

        task c

        task a

        task b

        task a

        task c - complete 

        task b

        task a

        task b

        task a - complete 

        task b - complete

        final result

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;a single thread juggles multiple tasks, giving the illusion that they are happening at the same time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parallelism"&gt;
  &lt;/a&gt;
  parallelism
&lt;/h2&gt;

&lt;p&gt;multiple objects working at the same time, on one or multiple tasks&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
task a   task b    task c 

task a   task b    task c 

task a   task b    complete

task a   complete  complete

task a   complete  complete

complete   complete  complete



final result


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Multiple independent objects, working independently of each other(not interleaved) this is usually achieved through multiple threads and cores, languages such as java have this feature built in I believe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parallelism-in-browsers"&gt;
  &lt;/a&gt;
  Parallelism in browsers
&lt;/h2&gt;

&lt;p&gt;Browsers are fundamentally single threaded, having only the main thread handling both the execution of JavaScript code and rendering the browser window, async programming does relieve the main thread by pausing execution of specific code, but in the end even that code will run on the main thread, needless to say the main thread works pretty hard, which is actually the source of "a script is slowing down your browser" message, when a script is taking to long to finish a task and blocks the main thread, while async is the solution, an even better solution is creating a new thread and that is where web workers come in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-workers"&gt;
  &lt;/a&gt;
  web workers
&lt;/h2&gt;

&lt;p&gt;a web worker creates/spawns a second JS thread separate from the front end browser,  the thread does not have access to the DOM, window and anything in the front-end browser accept given by the main thread, all the is, is JS, this is true parallelism: the idea of two separate threads not inability to access the DOM, these threads run at the same time without blocking each other.&lt;/p&gt;

&lt;p&gt;they communicate via a message system, they are able to send messages to each, which can be strings, objects or simple values.&lt;/p&gt;

&lt;p&gt;This way we can migrate heavy computation from the main thread to the 2nd, and allow the main to perform it's primary duty to handle use input and react seamlessly.&lt;/p&gt;

&lt;p&gt;This is a true game changer, you can literally perform heavy tasks in the worker, without the browser missing a frame, this is ultimate optimization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-workers"&gt;
  &lt;/a&gt;
  getting started with workers
&lt;/h2&gt;

&lt;p&gt;because workers run in the browser we need an HTML file for this part, &lt;/p&gt;

&lt;p&gt;create three files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
 index.html
 main.js
 worker.js


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will be using  vscode live server plugin to serve index.html, you can use whatever you like, or even a bundler like parcel which support imports and live reload. &lt;/p&gt;

&lt;p&gt;Goal: create a second thread running an infinite loop, while the browser's main thread plays animation at 60FPS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;

     &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

     &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

     &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

     &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;



 &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;



 &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;





&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in main.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// main thread&lt;/span&gt;



&lt;span class="cm"&gt;/**

 * @type {HTMLLabelElement}

 */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;




&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;skills&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;angular&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ionic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nativescript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sass&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;



&lt;span class="c1"&gt;// simple DOM update&lt;/span&gt;
&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// choosing a random skill every 16ms and updating the label element to show that skill&lt;/span&gt;

     &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;skills&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

     &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;skills&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know this does not seem much, given that set interval is a microtask, but if we add an infinite loop in the main file, one of two things will happen your browser will trash or not update the UI at all, since the main thread is stuck in this infinite loop, because of the run-to-completion rule, you can test it by adding an infinite loop in main.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;



&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this sets us up nicely to prove that a worker spawns a new thread separate from the browser window and document, if we can run an infinite loop logging something in the worker thread while updating the browser successfully every 16ms this will prove that these threads are separate, &lt;/p&gt;

&lt;p&gt;remove the infinite loop in main and add the following on top&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// creates a worker thread(spawning a new thread)&lt;/span&gt;
&lt;span class="c1"&gt;// Worker() takes name of an existing js file, which the worker will load in it's own environment &lt;/span&gt;
&lt;span class="c1"&gt;// separate from the the main js and it's thread &lt;/span&gt;
&lt;span class="c1"&gt;// every code in worker.js will run in the second thread&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;worker.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;// we use the worker object to communicate and receive communcication from the second thread&lt;/span&gt;


&lt;span class="c1"&gt;// sending a msg to the second thread&lt;/span&gt;
&lt;span class="c1"&gt;// the msg can be an object, stringified JSON object, buffer arrays etc&lt;/span&gt;
&lt;span class="c1"&gt;// but you cannot send DOM elements, classes etc &lt;/span&gt;

&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello there&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;open worker.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//worker.js thread&lt;/span&gt;


&lt;span class="c1"&gt;//catching/receiving messages&lt;/span&gt;


&lt;span class="c1"&gt;// self = refers to the worker, &lt;/span&gt;
&lt;span class="c1"&gt;// listening to messages&lt;/span&gt;

&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;


  &lt;span class="c1"&gt;// logging the recieved message&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;



 &lt;span class="c1"&gt;// sending back a message to the main thread after 10 seconds&lt;/span&gt;
 &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

 &lt;span class="c1"&gt;// sending a message to main thread &lt;/span&gt;

 &lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;after 10 000 milliseconds&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="p"&gt;}&lt;/span&gt;




&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In main.js we can also listen to messages from the second/worker thread using the worker object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from second thread&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you reload, in the console you will see worker.js logging "hello there" and after 10000ms  the main thread will receive a message from worker and logs it&lt;/p&gt;

&lt;p&gt;the infinite loop experiment&lt;/p&gt;

&lt;p&gt;in the worker&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;



&lt;span class="c1"&gt;// infinite loop&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;



 &lt;span class="c1"&gt;// logging at an interval, logging at every iteration will crash the browser&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10000000000&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;while loop&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="p"&gt;}&lt;/span&gt;




 &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.00000000000000000000000000000001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;magic, the browser is not skipping a bit, while the infinite loop is running, if you have been using JS for a while, you'll understand how much of a big deal this is, just having a while(true) statement in JavaScript is super impressive.&lt;/p&gt;

&lt;p&gt;the browser might crash because of the frequent console logs, make sure you clear the console while it is running.&lt;/p&gt;

&lt;p&gt;Using this simple architecture there are many possibilities: operating on big files, large amounts of data and algorithms, only sending the computation result to the main thread. &lt;/p&gt;

&lt;p&gt;In term of the DOM access, there are libraries out there, for one workerDom which allows manipulation of the DOM in the worker, workerDom also works well with major front-end frameworks.&lt;/p&gt;

&lt;p&gt;With that we have achieved true parallelism in JavaScript.&lt;/p&gt;

&lt;p&gt;This is an excerpt from an eBook &lt;a href="https://sk76.gumroad.com/l/JS4AdvancedB?_ga=2.231950431.1783815175.1630970910-637662627.1625442646"&gt;JavaScript for advanced beginners&lt;/a&gt; available on gumroad as a pre-order, and should be launching soon, &lt;/p&gt;

&lt;p&gt;The eBooks main goal is to provide a gentle but needed push towards advanced JS, range of topics are covered from Object Oriented JS, Object composition to generators, promises, computational media and metaprogramming  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>parallelism</category>
      <category>webworkers</category>
      <category>webdev</category>
    </item>
    <item>
      <title>4 Resume Tips for Communicating Your Web Dev Accomplishments to Potential Employers</title>
      <author>Alex Sanders</author>
      <pubDate>Tue, 07 Sep 2021 01:00:58 +0000</pubDate>
      <link>https://dev.to/alexsan28195851/4-resume-tips-for-communicating-your-web-dev-accomplishments-to-potential-employers-4o0c</link>
      <guid>https://dev.to/alexsan28195851/4-resume-tips-for-communicating-your-web-dev-accomplishments-to-potential-employers-4o0c</guid>
      <description>&lt;p&gt;Creating a web development resume seems like a fairly easy task. If you list your education, degrees, and accomplishments, potential employers will know exactly what you’re capable of achieving. However, it doesn’t usually doesn’t work that way.&lt;/p&gt;

&lt;p&gt;Potential employers often struggle to understand what accomplishments mean in terms of how your skills will benefit their company. For instance, creating a custom SEO plugin for WordPress is a huge accomplishment, but employers who don’t care about SEO won’t necessarily be impressed.&lt;/p&gt;

&lt;p&gt;If your goal is to communicate your web development accomplishments to potential employers – in a way they can understand – the following tips will be helpful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-use-a-web-developer-resume-template"&gt;
  &lt;/a&gt;
  1. Use a web developer resume template
&lt;/h2&gt;

&lt;p&gt;If you’ve never used a resume template, you’ll be surprised at how much easier it will be to create a good resume. Starting with a template makes it easier to build a resume and get your wording correct.&lt;/p&gt;

&lt;p&gt;To get started, check out the &lt;a href="https://resume.supply/examples/web-development"&gt;developer resume templates&lt;/a&gt; from Resume Supply for ways to list your accomplishments and skills. These templates provide clear examples of how to phrase your accomplishments as an experienced web developer, and you can also find senior and entry-level examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-share-your-accomplishments-in-nondeveloperspeak"&gt;
  &lt;/a&gt;
  2. Share your accomplishments in non-developer-speak
&lt;/h2&gt;

&lt;p&gt;It’s natural to want to explain your accomplishments in development terms. For example, if you created a custom content management system (CMS) for a client, that’s a huge deal! However, a potential employer who doesn’t have any immediate need in a custom CMS needs to know how that accomplishment will translate to their next project.&lt;/p&gt;

&lt;p&gt;Employers who aren’t web developers &lt;a href="https://www.reddit.com/r/webdev/comments/apiyr6/am_i_the_only_one_or_do_clients_almost_never/"&gt;won’t understand your accomplishments&lt;/a&gt; unless you phrase them in a specific way. You need to communicate your accomplishments in terms of how those accomplishments will benefit your future employer. For instance, how did the company benefit from your achievement?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-dont-send-potential-employers-direct-links-to-past-projects"&gt;
  &lt;/a&gt;
  3. Don’t send potential employers direct links to past projects
&lt;/h2&gt;

&lt;p&gt;There is a tendency to link potential employers to your past projects, but this can backfire if the employer doesn’t understand what they’re looking at. This is one of the reasons many developers have &lt;a href="https://dev.to/jkettmann/don-t-waste-your-time-on-a-portfolio-website-314b#what-you-want-to-achieve-with-a-portfolio-website"&gt;stopped creating portfolio websites&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, say you created a custom WordPress theme to look exactly like a client’s current HTML/CSS design and then migrated all the content. That kind of project can easily exceed 60-80 hours of work, depending on the complexity of the design. &lt;/p&gt;

&lt;p&gt;Providing “before and after” links to a potential employer will probably backfire. When both websites look identical, it won’t impress anyone who isn’t a developer. Some employers might even believe it was just a copy and paste job.&lt;/p&gt;

&lt;p&gt;Don’t give potential employers the opportunity to misunderstand the amount of work involved in your past projects. Sometimes it’s appropriate to link directly to your projects, but not always.&lt;/p&gt;

&lt;p&gt;When direct links aren’t the best move, guide them through your projects in a controlled manner by telling them what went into each project. Sometimes “tell, don’t show” is more appropriate than “show, don’t tell.”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-dont-use-the-employers-job-posting-to-write-your-resume"&gt;
  &lt;/a&gt;
  4. Don’t use the employer’s job posting to write your resume
&lt;/h2&gt;

&lt;p&gt;You might be tempted to create a unique resume for each potential employer by listing your skills according to what’s listed in the job posting. This is almost always a bad idea. Employers will know if you’ve done this, but you’ll also sell yourself short.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#most-employers-dont-know-what-they-need"&gt;
  &lt;/a&gt;
  Most employers don’t know what they need
&lt;/h2&gt;

&lt;p&gt;Employers don’t usually know much about development – and many don’t even know there are different programming languages. Some job postings list requirements for knowing, say, five popular programming languages without any particular reason.&lt;/p&gt;

&lt;p&gt;When it comes to listing developer qualifications, there is often a disconnect between what employers think they need and what they actually need. Some employers just copy other job postings and hope for the best.&lt;/p&gt;

&lt;p&gt;For instance, if an employer lists &lt;a href="https://www.itlandmark.com/blog/coldfusion-is-not-dead-it-is-alive/"&gt;ColdFusion&lt;/a&gt; as a requirement, it probably means their current applications are written in CF. However, they might need to migrate to an entirely new system. If they’re only open to hiring developers fluent in CF, they might never get the opportunity to advance their applications.&lt;/p&gt;

&lt;p&gt;Whether an employer is advertising a development job opening or sifting through resumes, many don’t know what skills will serve their company.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-will-you-make-your-next-employer-more-profitable"&gt;
  &lt;/a&gt;
  How will you make your next employer more profitable?
&lt;/h2&gt;

&lt;p&gt;At the end of the day, employers are focused on profits. Even companies that treat their employees like royalty are committed to increasing their profits.&lt;/p&gt;

&lt;p&gt;For the best results, write your resume in terms of how you will support the company. Skills are important to list, but potential employers will be far more impressed when you can tell them how you’ll help them become more profitable.&lt;/p&gt;

</description>
      <category>resume</category>
      <category>developer</category>
      <category>employers</category>
      <category>tips</category>
    </item>
    <item>
      <title>Why Every Web Developer Should Learn About Security</title>
      <author>Lindsey Fonnesbeck</author>
      <pubDate>Tue, 07 Sep 2021 00:47:04 +0000</pubDate>
      <link>https://dev.to/lindsfonnes/why-security-is-important-for-every-developer-21d9</link>
      <guid>https://dev.to/lindsfonnes/why-security-is-important-for-every-developer-21d9</guid>
      <description>&lt;p&gt;This past week during my 100 days of hacking challenge, I started to dive deeper into the fundamentals of security and exactly why we as developers should learn to implement security into our code. Cybersecurity and software engineering are commonly seen as two separate specialties without much overlap, other than maybe an intro class or two for Computer Science students and a few dedicated minutes in a lecture for bootcamp grads if they're lucky.&lt;/p&gt;

&lt;p&gt;When I initially started to learn to code, I tried to ask around for advice on how I could integrate my passion for web security with software engineering. The general consensus that I received at that time, was that they are two separate things and that the frameworks learned in school were enough and that I didn't need to concern myself with the security aspect. Something about that just didn't sit right with me, and as I've started to learn more about breaking applications through Bugcrowd's bug bounty mentorship program, my stance that all developers should learn more about implementing security in their code is enforced. &lt;/p&gt;

&lt;p&gt;Using a framework is a common practice during development, because they abstract a lot of logic, in turn, saving a lot of time. However, using a framework without an understanding of how it works or the potential risks can put the security of your application in jeopardy. A single line of defective code can render an organization's internal systems to vulnerabilities. Many companies use the same frameworks and dependencies. This means when a vulnerability is discovered within these tools it puts all of the companies using them at risk. More so if they aren't making sure to update their dependencies and taking action against these risks. While efficiency and agility often take priority during development, without security built into the application the  attack surface is greatly increased.&lt;/p&gt;

&lt;p&gt;When developing an application, you should consider things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What should this application do?&lt;/li&gt;
&lt;li&gt;How should this application behave?&lt;/li&gt;
&lt;li&gt;What are my inputs? (form fields, query parameters, local storage, embedded css, etc)&lt;/li&gt;
&lt;li&gt;What are my outputs?&lt;/li&gt;
&lt;li&gt;What potential weaknesses could be taken advantage of by a hacker?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While software engineering and cybersecurity should still be viewed as their own specialties, there are many benefits for developers learning the basics of integrating security into their coding practices. By having developers be part of the solution, in taking responsibility for their code, users and companies will be less likely to be involved in a data breach that exposes confidential data. It may take time to see a change in curriculum to include secure software development practices. Depending on the size of the company, their level of concern with security and budget, companies may rectify this by implementing a DevSecOps team, a security champion, or by hiring developers who are more aware of security practices compared to those who aren't familiar with security concepts. The goal of integrating security with web development is to prevent common vulnerabilities in your application, which protects the users, the companies, and lessens the likelihood of having to backpedal in the event of a costly &amp;amp; time expansive security breach.&lt;/p&gt;

&lt;p&gt;Interested in learning more? Several resources that you may find beneficial include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nostarch.com/websecurity"&gt;Web Security for Developers by Malcolm McDonald&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.amazon.com/Alice-Bob-Learn-Application-Security/dp/1119687357"&gt;Alice &amp;amp; Bob Learn Application Security by Tanya Janca&lt;/a&gt; or the author has a &lt;a href="https://www.youtube.com/playlist?&amp;lt;br&amp;gt;%0Alist=PLI9RITMnVbygrVQaGvpojIzgHTpkRrIn8"&gt;YouTube playlist&lt;/a&gt; reading of the book&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=o2nPF_14PUQ&amp;amp;list=WL&amp;amp;index=13&amp;amp;t=2s"&gt;Learn Enough Frontend Security to Be Dangerous webinar&lt;/a&gt; hosted by Mintbean&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=_5A0AVgqTOg"&gt;MicroFocus Lunch &amp;amp; Learn DevSecOps&lt;/a&gt; hosted by Black Girls Hack&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will be studying a different web vulnerability each week during my 100 days of hacking and I look forward to sharing in more detail about common vulnerabilities and how we as developers can defend against them. In the meantime, let me know what your thoughts are on web developers learning more about security &amp;amp; any resources you find interesting!&lt;/p&gt;

</description>
      <category>security</category>
      <category>webdev</category>
      <category>100daysofhacking</category>
    </item>
    <item>
      <title>Vocabulary Building Day 11</title>
      <author>vindhya Hegde </author>
      <pubDate>Tue, 07 Sep 2021 00:08:07 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-day-11-142j</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-day-11-142j</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;entrenched&lt;/strong&gt;(adjective): fixed firmly or securely&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--edo17wnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.storyworks.in/blog/wp-content/uploads/2015/11/Overcoming-Entrenched-Views-StoryWorks-860x721.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--edo17wnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.storyworks.in/blog/wp-content/uploads/2015/11/Overcoming-Entrenched-Views-StoryWorks-860x721.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=entrenched&amp;amp;oq=entrenched&amp;amp;aqs=chrome..69i57.8220j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;preclude&lt;/strong&gt;(verb) :keep from happening or arising; make impossible.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f1zNGLku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ts.idictionary.co.kr/files/pd/word_sub_img/420x420/1466954260_28.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f1zNGLku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ts.idictionary.co.kr/files/pd/word_sub_img/420x420/1466954260_28.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=preclude&amp;amp;oq=preclude&amp;amp;aqs=chrome..69i57j0i433i512l2j0i512l7.16592j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bucolic&lt;/strong&gt;(adjective): relating to the pleasant aspects of the countryside and country life.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ty7sa5I_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.freegreatpicture.com/files/photo102/50844-bucolic.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ty7sa5I_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.freegreatpicture.com/files/photo102/50844-bucolic.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=bucolic&amp;amp;oq=bucolic&amp;amp;aqs=chrome..69i57j0i433i512j0i512l3j46i175i199i512j0i512l4.7797j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;didactic&lt;/strong&gt;(adjective): instructive(especially excessively)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0DkvK4lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://study.com/cimages/videopreview/videopreview-full/screen_shot_2015-11-28_at_8.18.20_pm_127105.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0DkvK4lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://study.com/cimages/videopreview/videopreview-full/screen_shot_2015-11-28_at_8.18.20_pm_127105.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=didactic&amp;amp;oq=didactic&amp;amp;aqs=chrome..69i57j0i433i512j0i512l3j0i433i512j0i512l4.10009j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;predilection&lt;/strong&gt;(noun): strong liking&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2GDBzmhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/1d/e7/95/1de795451a0d8ea04a03dbb6dfb83f22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2GDBzmhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/1d/e7/95/1de795451a0d8ea04a03dbb6dfb83f22.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=predilection&amp;amp;oq=predilection&amp;amp;aqs=chrome..69i57j0i433i512j0i512l8.12336j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps you if you are preparing for GRE exams.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>gre</category>
      <category>day11</category>
    </item>
    <item>
      <title>Frontend Roadmap</title>
      <author>Gabriel Rocha</author>
      <pubDate>Mon, 06 Sep 2021 23:57:06 +0000</pubDate>
      <link>https://dev.to/gabrielrocha/frontend-roadmap-id5</link>
      <guid>https://dev.to/gabrielrocha/frontend-roadmap-id5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#internet"&gt;
  &lt;/a&gt;
  Internet
&lt;/h1&gt;

&lt;p&gt;Learn about how Internet and browsers work, client and server and the main communication protocols between them. &lt;/p&gt;

&lt;p&gt;What you should learn: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What the Internet is&lt;/li&gt;
&lt;li&gt;What is HTTP&lt;/li&gt;
&lt;li&gt;HTTP/3&lt;/li&gt;
&lt;li&gt;How browsers work&lt;/li&gt;
&lt;li&gt;How DNS work &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#learn-html"&gt;
  &lt;/a&gt;
  Learn HTML
&lt;/h1&gt;

&lt;p&gt;HTML serves to build the skeleton of a web page. Learn about each tag functionality, learn about semantic HTML and learn the basics of SEO. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learn-css"&gt;
  &lt;/a&gt;
  Learn CSS
&lt;/h1&gt;

&lt;p&gt;CSS serves to style your web page. Following the human body analogy, CSS would be the page skin. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learn-javascript"&gt;
  &lt;/a&gt;
  Learn Javascript
&lt;/h1&gt;

&lt;p&gt;Javascript is what allows you to define your page behavior. With Javascript, you can, for example, execute actions in response to events, like a click event. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learn-git"&gt;
  &lt;/a&gt;
  Learn Git
&lt;/h1&gt;

&lt;p&gt;Git is a code version manager that serves to maintain control of changes made in your code, as well as the date and author of those changes. &lt;/p&gt;

&lt;p&gt;Git is even more efficient in a situation where many people need to teamwork in the same code base. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learn-package-management"&gt;
  &lt;/a&gt;
  Learn Package Management
&lt;/h1&gt;

&lt;p&gt;Learn to use a package managing tool like NPM is important because those packages supply ready code to repeating tasks.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This post was inspired by the website Developer Roadmaps. See the complete Frontend roadmap &lt;a href="https://roadmap.sh/frontend"&gt;here&lt;/a&gt;. In that page, you will find the continuation of that flowchart and links to where you can learn every described concepts.&lt;/p&gt;

</description>
      <category>brazil</category>
      <category>english</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
    <item>
      <title>My Experience as a Career Switcher in Tech</title>
      <author>𝕛𝕖𝕤𝕤𝕚𝕔𝕒</author>
      <pubDate>Mon, 06 Sep 2021 23:48:43 +0000</pubDate>
      <link>https://dev.to/jessicacregg/my-experience-as-a-career-switcher-in-tech-4p3j</link>
      <guid>https://dev.to/jessicacregg/my-experience-as-a-career-switcher-in-tech-4p3j</guid>
      <description>&lt;p&gt;Have you ever tried to write with your other hand? The non-dominant one? Your instincts are all off, and words that you produce look out of shape and unfamiliar. No matter how accustomed you are to an action, performing it in a different context can throw you completely off balance. I find that this is particularly true when you switch careers. &lt;/p&gt;

&lt;p&gt;Let me briefly take the opportunity to introduce myself. I’m Jessica Cregg, LaunchDarkly’s newest Developer Advocate. Having recently come onboard earlier this month, I’m absolutely thrilled to be working with such an excellent team supporting a genuinely exciting product strategy. Getting into Developer Relations has been a journey particularly close to my own heart as the discipline really sits central to the intersection of my past experiences as a storyteller and my recent passion for coding and all things tech. &lt;/p&gt;

&lt;p&gt;I count myself as one of the many people who found their way into tech through non-traditional means. After earning my degree in Literature and carving out a career in PR and Marketing, I found myself unable to shake the urge to venture into development. I wanted to make things. But I had no idea how. &lt;/p&gt;

&lt;p&gt;I've always loved computers. The way they do precisely what you tell them to do is equal parts infuriating and inspiring. Writing code has always appealed to me in the same way that running, yoga, and playing an instrument have. Improvement is dependent on your ability to bet on your own capacity for development—a value that can vary daily depending on so many contributing factors. The idea of going into a field where you're constantly challenging your potential filled me with excitement. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-a-plan"&gt;
  &lt;/a&gt;
  Making a plan
&lt;/h2&gt;

&lt;p&gt;In a bid to move towards a field that I've admired for years, I decided to take a pragmatic approach. I sat down and took stock of what I'd learned to date. If you're thinking about taking your career in a different direction, here are some thought starters for making a personal skills audit:&lt;br&gt;
Which tasks do you do regularly as part of your current role?&lt;br&gt;
What do these tasks involve?&lt;br&gt;&lt;br&gt;
How do these tasks track against the requirements of the position that you want to land?&lt;/p&gt;

&lt;p&gt;Let's take the example of sending emails for work. Fairly fundamental in a lot of desk-based roles, right? But if you take a step back and analyze the component actions in this task, you might find that you're skilled at taking a brief, interrogating its aims, and translating that into a roadmap. &lt;/p&gt;

&lt;p&gt;After conducting a thorough skills audit—taking stock of the aptitudes that I'd developed in my career to date—I then looked to the future. I identified the competencies that I wanted to build on. Next, taking both lists, I matched these against a list of different roles in tech to devise a route that might lead me to a position that suits my unique makeup. &lt;/p&gt;

&lt;p&gt;Completing a series of exercises of this kind led me towards client-facing roles in tech. I was used to running weekly status calls, producing activity reports, and managing campaign activity. I decided to use the skills I'd acquired so far to my advantage, so I took up a position as a Product Solutions Engineer acting as a Product Manager within my team.&lt;/p&gt;

&lt;p&gt;Establishing a foundation in Product Management was exciting. It gave me a fundamental understanding of the scientific process behind bringing a successful product to life. But it didn't satisfy my desire for building in the way that I thought it would. It quenched my curiosity in a way that only made me more curious. I found myself wanting to understand exactly what I was asking of the engineers I was working with. I couldn't just stick to my lane. Instead, I wanted to understand what the code was doing and how its execution impacted the wider ecosystem of what I was working on.  &lt;/p&gt;

&lt;p&gt;After six months in the role, I realized that to become fulfilled at work I'd need to venture into the unknown and, instead of relying on the things I knew how to do, develop a whole new set of skills. The fear that I had to overcome involved removing the personal limitations I'd put on myself. I didn't think that I was smart enough to be able to code. Looking at legacy code scared the heck out of me. I let this fear build up and form an entire web of limitations that weren't actually indicative of my potential. &lt;/p&gt;

&lt;p&gt;Limiting beliefs have a habit of making you think that the things you've never done before are the same as things that you could never do. These are not the same, and convincing ourselves of this is not easy. Just because you've never done something doesn't make it something you can never do. &lt;/p&gt;

&lt;p&gt;Entering into a new industry with the added benefit of some professional experience can be a real advantage. You're coming to the table with a set of cutlery already in your hands. This can feel like leverage right up until the point at which you're faced with a utensil that you've never seen before. Next thing you know, you're questioning your entire ability to problem solve. &lt;/p&gt;

&lt;p&gt;When you head into a new field, the instinctive actions that once felt like second nature are open to an entirely new line of questioning. Are you sure that your method is the best way to tackle the problem? Do people usually schedule meetings to discuss things like this? Are you speaking to yourself using rhetorical questions again?&lt;/p&gt;

&lt;p&gt;The shock of a new environment can very easily join forces with your pre-existing fears to create a sizable opponent. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-yourself-up-for-success"&gt;
  &lt;/a&gt;
  Set yourself up for success
&lt;/h2&gt;

&lt;p&gt;The key to overcoming hurdles is adopting a growth mindset. First introduced by psychologist and Stanford University professor, Dr. Carol Dweck, in her book “Mindset: The New Psychology of Success,” a growth mindset is a belief that you can determine your success, not through innate talent, but via ongoing personal development. Adopting this way of thinking requires you to stop viewing your attributes like static values and instead recognize them for what they are— muscles that you've yet to develop. &lt;/p&gt;

&lt;p&gt;Here are a few ways that you can bring the principles of growth mindset adoption into your daily habits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Introduce the word "yet" into your vocabulary - There are two different ways to get stuck when it comes to learning to code. Something can be hard because it's new or something can be hard because it's complex. When you're starting out, the two can be almost interchangeable at every avenue. Stay the course. This unfamiliarity is very temporary, and before you know it, you'll be able to decipher between the two types of tricky. Remember that very few things are achievable on your first go. At any point where you find yourself stumped by a concept, add the word “yet” as a way of challenging your limiting beliefs and remember that your inexperience is temporary.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prioritize learning - It can be easy to spend much of your time worrying about the things you can't do. The biggest concept that I've had to get used to in tech is accepting that you'll never know everything. You simply can't. Every day, new frameworks are being devised, and services rolled out, and concepts that are in their infancy can become a core competency in months. Make peace with the unknown, and instead of becoming intimidated by everything you don't know, try to use the ever-changing current to power you forward.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Establish your role models - Treading new paths can feel lonely, and it's easy to feel lost when you've got no one to guide you. Oftentimes, you'll feel overwhelmed at the insurmountable hill of knowledge that you've got to climb. To stay motivated, make sure you look for your role models. Do some research and find other people who've travelled a similar route to yours. Exposing yourself to their stories and words of wisdom will pay dividends when you find yourself hitting a hurdle. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Embrace the inevitability of things going wrong - Progress is never linear. There will be some days where you doubt that you're even making any progress at all. Remember that encountering plateaus and getting things wrong is not only natural but essential to your growth. Own the failures and see them as opportunities to improve. The phrase “fake it till you make it” has had far too much air-time. Embracing a growth mindset requires transparency and, above all else, authenticity. Trying to gloss over your mistakes will only hurt you in the long run. Being honest with yourself and those around you about the things that you find difficult is a practice that will make you better at what you do. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Celebrate your wins - Don't forget to note your milestones and shout about them. Acknowledging your accomplishments helps you to tap into your brain's rewards-based system. Not only is it important to take the time to take stock and acknowledge how far you have come, but celebrating your achievements helps you to associate the work you're undertaking with long-term improvement. It won't just help you feel good about yourself; it'll aid you in building up endurance for the tough times ahead. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep in mind that overcoming your fears and switching fields can be challenging. You're learning to be ambidextrous, and that's hard. Remember that you're capable of more than you think you are. It's ok that you're not there. Just make sure to add that all-important three-letter word. Yet.  &lt;/p&gt;

&lt;p&gt;If you’d like to develop your growth mindset and work for a company voted one of the best places to work for 2020, check out &lt;a href="https://launchdarkly.com/careers/"&gt;our open opportunities&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>career</category>
      <category>programming</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Docker + Rails: Una solución para tus dolores de cabeza</title>
      <author>Luis Angel Ortega</author>
      <pubDate>Mon, 06 Sep 2021 23:24:35 +0000</pubDate>
      <link>https://dev.to/linksake/docker-rails-una-solucion-para-tus-dolores-de-cabeza-jh8</link>
      <guid>https://dev.to/linksake/docker-rails-una-solucion-para-tus-dolores-de-cabeza-jh8</guid>
      <description>&lt;p&gt;¿Has llegado a pasar una semana solamente tratando de correr el proyecto al que te acabas de unir? ¿O tu aplicación no corre en producción como corría en local?&lt;br&gt;&lt;br&gt;
Hay una multitud de factores que pueden contribuir esto, por ello &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; nos ofrece una solución con la cual podemos tener un mayor control sobre estas variables a través de las computadoras que sean necesarias.  &lt;/p&gt;

&lt;p&gt;Dicho esto, en este articulo veremos como falicitarnos la vida al tener toda nuestra aplicación de Ruby on Rails corriendo sobre Docker; incluidas las bases de datos que sean necesarias.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisitos"&gt;
  &lt;/a&gt;
  Prerequisitos
&lt;/h2&gt;

&lt;p&gt;Para poder seguir esta guía necesitaras tener &lt;a href="https://docs.docker.com/get-docker/"&gt;Docker instalado&lt;/a&gt; así como un proyecto el cual quieras &lt;em&gt;dockerizar&lt;/em&gt;, si solamente quieres prácticar puedes usar &lt;a href="https://github.com/LinkSake/docker-rails"&gt;este proyecto de ejemplo&lt;/a&gt; el cual necesita una conexión a &lt;a href="https://es.wikipedia.org/wiki/PostgreSQL"&gt;Postgres&lt;/a&gt; y a &lt;a href="https://es.wikipedia.org/wiki/Redis"&gt;Redis&lt;/a&gt; para funcionar.&lt;/p&gt;

&lt;p&gt;¿Eres impaciente? ¡Puedes clonar &lt;a href="https://github.com/LinkSake/docker-rails/tree/docker"&gt;esta rama&lt;/a&gt; del proyecto donde ya se encuentran los archivos necesarios para correr el projecto dentro de Docker!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#primero-viene-el-dockerfile"&gt;
  &lt;/a&gt;
  Primero viene el Dockerfile
&lt;/h2&gt;

&lt;p&gt;Lo primero que haremos será hacer una &lt;a href="https://docs.docker.com/get-started/overview/#docker-objects"&gt;imagen&lt;/a&gt; personalizada para nuestro proyecto, así que crearemos un archivo en la raíz del mismo llamado &lt;code&gt;Dockerfile&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La primer linea de nuestro archivo definirá la imagen de la cual nos basaremos, en este caso será la &lt;a href="https://hub.docker.com/_/ruby"&gt;imagen oficial de Ruby&lt;/a&gt;, pero usaremos la versión de &lt;a href="https://es.wikipedia.org/wiki/Alpine_Linux"&gt;Alpine&lt;/a&gt; para tener una imagen más ligera como resultado.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ruby:3.0.1-alpine&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;⚠️ Asegurate que la version de Ruby (ruby:X.X.X-alpine) sea la misma que en tu proyecto, o tendrás errores a la hora de tratar de construir la imagen. Puedes encontrar la versión que usa tu proyecto en tu Gemfile.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Después sigue la parte más dificil de este Dockerfile, instalar la dependendencias necesarias para que funcione el proyecto; las que se muestran aquí son las que funcionan para nuestro &lt;a href="https://github.com/LinkSake/docker-rails"&gt;proyecto de ejemplo&lt;/a&gt;, que incluyen las necesarias para realizar una conexión con Postgres, pero tendrás que descubrir cuales son necesarias para tu proyecto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ruby:3.0.1-alpine&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apk add &lt;span class="nt"&gt;--update&lt;/span&gt; &lt;span class="nt"&gt;--no-cache&lt;/span&gt; &lt;span class="nt"&gt;--virtual&lt;/span&gt; run-dependencies &lt;span class="se"&gt;\
&lt;/span&gt;build-base &lt;span class="se"&gt;\
&lt;/span&gt;postgresql-client &lt;span class="se"&gt;\
&lt;/span&gt;postgresql-dev &lt;span class="se"&gt;\
&lt;/span&gt;yarn &lt;span class="se"&gt;\
&lt;/span&gt;git &lt;span class="se"&gt;\
&lt;/span&gt;tzdata &lt;span class="se"&gt;\
&lt;/span&gt;libpq &lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class="k"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Puedes esperar a construir la imagen (&lt;code&gt;docker build .&lt;/code&gt;) para revisar el error que imprima Docker, con eso podrás ir averiguando que depenencias hacen falta 😉  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La última linea (&lt;code&gt;rm -rf /var/cache/apk/*&lt;/code&gt;) borra los paquetes de las dependencias que acabamos de instalar, esto ahorrará espacio en la imagen.  &lt;/p&gt;

&lt;p&gt;Lo siguiente que debemos de realizar es crear un directorio dentro del contenedor donde podamos copiar el código de nuestra aplicación para su ejecución, eso lo haremos con el siguente comando dentro de nuestro Dockerfile.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ruby:3.0.1-alpine&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apk add &lt;span class="nt"&gt;--update&lt;/span&gt; &lt;span class="nt"&gt;--no-cache&lt;/span&gt;  &lt;span class="nt"&gt;--virtual&lt;/span&gt; run-dependencies &lt;span class="se"&gt;\
&lt;/span&gt;build-base &lt;span class="se"&gt;\
&lt;/span&gt;postgresql-client &lt;span class="se"&gt;\
&lt;/span&gt;postgresql-dev &lt;span class="se"&gt;\
&lt;/span&gt;yarn &lt;span class="se"&gt;\
&lt;/span&gt;git &lt;span class="se"&gt;\
&lt;/span&gt;tzdata &lt;span class="se"&gt;\
&lt;/span&gt;libpq &lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class="k"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /docker-rails&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;¡Recuerda cambiar el &lt;code&gt;docker-rails&lt;/code&gt; por el nombre de tu proyecto!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Así como le dimos un hogar a tu proyecto dentro del contenedor que crearemos, las gemas del mismo necesitan una carpeta también. Por ello, le informaremos a &lt;a href="https://bundler.io/es/"&gt;bundler&lt;/a&gt; donde colocarlas a través de una variable de ambiente.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ruby:3.0.1-alpine&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apk add &lt;span class="nt"&gt;--update&lt;/span&gt; &lt;span class="nt"&gt;--no-cache&lt;/span&gt;  &lt;span class="nt"&gt;--virtual&lt;/span&gt; run-dependencies &lt;span class="se"&gt;\
&lt;/span&gt;build-base &lt;span class="se"&gt;\
&lt;/span&gt;postgresql-client &lt;span class="se"&gt;\
&lt;/span&gt;postgresql-dev &lt;span class="se"&gt;\
&lt;/span&gt;yarn &lt;span class="se"&gt;\
&lt;/span&gt;git &lt;span class="se"&gt;\
&lt;/span&gt;tzdata &lt;span class="se"&gt;\
&lt;/span&gt;libpq &lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class="k"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /docker-rails&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; BUNDLE_PATH /gems&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y aunque ya instalamos las dependencias necesarias para correr Rails dentro del contenedor, tu proyecto necesitará algunas gemas y algunos paquetes de JavaScript para funcionar de manera correcta, vamos a encargarnos de eso de la siguiente manera.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ruby:3.0.1-alpine&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apk add &lt;span class="nt"&gt;--update&lt;/span&gt; &lt;span class="nt"&gt;--no-cache&lt;/span&gt;  &lt;span class="nt"&gt;--virtual&lt;/span&gt; run-dependencies &lt;span class="se"&gt;\
&lt;/span&gt;build-base &lt;span class="se"&gt;\
&lt;/span&gt;postgresql-client &lt;span class="se"&gt;\
&lt;/span&gt;postgresql-dev &lt;span class="se"&gt;\
&lt;/span&gt;yarn &lt;span class="se"&gt;\
&lt;/span&gt;git &lt;span class="se"&gt;\
&lt;/span&gt;tzdata &lt;span class="se"&gt;\
&lt;/span&gt;libpq &lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class="k"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /docker-rails&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; BUNDLE_PATH /gems&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json yarn.lock /docker-rails/&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; Gemfile Gemfile.lock /docker-rails/&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;bundle &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora que ya tenemos todo lo necesario para que funcione tu proyecto, vamos a copiar el código al contenedor dentro de la que carpeta que creamos con el comando &lt;code&gt;WORKDIR&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ruby:3.0.1-alpine&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apk add &lt;span class="nt"&gt;--update&lt;/span&gt; &lt;span class="nt"&gt;--no-cache&lt;/span&gt;  &lt;span class="nt"&gt;--virtual&lt;/span&gt; run-dependencies &lt;span class="se"&gt;\
&lt;/span&gt;build-base &lt;span class="se"&gt;\
&lt;/span&gt;postgresql-client &lt;span class="se"&gt;\
&lt;/span&gt;postgresql-dev &lt;span class="se"&gt;\
&lt;/span&gt;yarn &lt;span class="se"&gt;\
&lt;/span&gt;git &lt;span class="se"&gt;\
&lt;/span&gt;tzdata &lt;span class="se"&gt;\
&lt;/span&gt;libpq &lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class="k"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /docker-rails&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; BUNDLE_PATH /gems&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json yarn.lock /docker-rails/&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; Gemfile Gemfile.lock /docker-rails/&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;bundle &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /docker-rails/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;¿Por qué copiamos primero los manifiestos (package.json, Gemfile, etc.) y después el resto del proyecto? Esto nos evita tener que reinstalar las dependencias (dado a que se quedan en caché) después de cambiar el código base y reconstruir la imagen; de esta manera solo cuando cambien los manifiestos se volverá a correr sus comandos de instalación.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finalmente le diremos a Docker que comando correr cuando iniciemos nuestro contenedor (&lt;code&gt;rails&lt;/code&gt;), así como los argumentos de este (&lt;code&gt;s -b 0.0.0.0&lt;/code&gt;) y que puerto exponer para que nosotros podamos accesar a nuestra aplicación.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ruby:3.0.1-alpine&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apk add &lt;span class="nt"&gt;--update&lt;/span&gt; &lt;span class="nt"&gt;--no-cache&lt;/span&gt;  &lt;span class="nt"&gt;--virtual&lt;/span&gt; run-dependencies &lt;span class="se"&gt;\
&lt;/span&gt;build-base &lt;span class="se"&gt;\
&lt;/span&gt;postgresql-client &lt;span class="se"&gt;\
&lt;/span&gt;postgresql-dev &lt;span class="se"&gt;\
&lt;/span&gt;yarn &lt;span class="se"&gt;\
&lt;/span&gt;git &lt;span class="se"&gt;\
&lt;/span&gt;tzdata &lt;span class="se"&gt;\
&lt;/span&gt;libpq &lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class="k"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /docker-rails&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; BUNDLE_PATH /gems&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json yarn.lock /docker-rails/&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; Gemfile Gemfile.lock /docker-rails/&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;bundle &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /docker-rails/&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["bin/rails"]&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["s", "-b", "0.0.0.0"]&lt;/span&gt;

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;El puerto default sobre el que Rails corre es el 3000, pero si has designado otro puerto dentro de tu aplicación asegurarte de exponerlo de manera correcta.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Y con esto tenemos listo nuestro Dockerfile, aunque estamos lejos de tener nuestra aplicación lista. Si construyeramos nuestra imagen con &lt;code&gt;docker build .&lt;/code&gt; y trataramos de correrla con &lt;code&gt;docker start docker-rails&lt;/code&gt; nos encontraríamos con un error, ya que Rails no encuentra las bases de datos que necesita para iniciar de manera correcta; pero pronto nos encargaremos de ello.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#luego-el-dockercomposeyml"&gt;
  &lt;/a&gt;
  Luego el docker-compose.yml
&lt;/h2&gt;

&lt;p&gt;Para poder coordinar todos los servicios que necesitamos para el correcto funcionamiento de nuestra aplicación (en este caso 2 bases de datos: Posgres y Redis) usaremos &lt;a href="https://docs.docker.com/compose/"&gt;docker-compose&lt;/a&gt;, esta útilidad de Docker nos ayudará a crear multimples contenedores de diferentes imagenes, &lt;a href="https://docs.docker.com/compose/networking/"&gt;conectarlos&lt;/a&gt;, darles &lt;a href="https://docs.docker.com/compose/environment-variables/"&gt;variables de ambiente&lt;/a&gt; e incluso &lt;a href="https://docs.docker.com/storage/volumes/"&gt;volumenes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Empezaremos creando un archivo llamado &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y en su primera linea especificaremos que &lt;a href="https://docs.docker.com/compose/compose-file/#compose-and-docker-compatibility-matrix"&gt;versión&lt;/a&gt; de la herramienta queremos usar, en este caso usaremos la más reciente a la redacción de este articulo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.8'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Después indicaremos los servicios que queremos que corra docker-compose, esto lo haremos dentro de la etiqueta &lt;code&gt;services&lt;/code&gt;. A cada servicio le daremos un nombre el cual será importante cuando estemos configurando nuestra imagen así que asegurate de nombrarlo de una manera que haga sentido para ti. Vamos como primer ejemplo servicio de Posgres, al cual llamaremos &lt;em&gt;db&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.8'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres:latest&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-rails-db&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_DB=docker-rails-dev&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_PASSWORD=password&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;5432:5432&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dbdata:/var/lib/postgresql/data'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Los archivos YAML son sensibles a la identación, así que asegurate de tener todo en orden y andidado de forma correcta.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La etiqueta &lt;code&gt;db&lt;/code&gt; es el nombre que le dimos al servicio y dentro de la cual especificaremos toda la configuración del mismo.&lt;/p&gt;

&lt;p&gt;Lo primero con lo que nos encontramos es &lt;code&gt;image&lt;/code&gt; que tal como su nombre lo indica es el nombre de la imagen que queremos usar para ese servicio, en este caso es la imagen oficial de Posgres en su última versión (puedes especificar una versión remplazando el &lt;code&gt;latest&lt;/code&gt; por alguna otra versión válida).&lt;/p&gt;

&lt;p&gt;Después nos encontramos con &lt;code&gt;container_name&lt;/code&gt;, que también es autodescriptivo y el cual vendra útil a la hora de checar nuestros contendores con &lt;code&gt;docker ps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;enviroment&lt;/code&gt; se refiere a las variables de ambiente, y si nos referimos a la documentación de la imagen de &lt;a href="https://hub.docker.com/_/postgres"&gt;Docker de Posgres&lt;/a&gt; podemos ver que la única variable obligatoria es &lt;code&gt;POSTGRES_PASSWORD&lt;/code&gt; pero nosotros también definiremos &lt;code&gt;POSTGRES_DB&lt;/code&gt; para darle un nombre personalizado a la base de datos que crea la imagen por defecto.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ ¡Asegurate de elegir una contraseña segura para la base de datos!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;ports&lt;/code&gt; son los puertos que necesitaremos pasar de dentro del contenedor a nuestra maquina, los indicados en el archivo son los que por defecto usa Posgres.&lt;/p&gt;

&lt;p&gt;Finalmente los &lt;code&gt;volumes&lt;/code&gt; son la infomación persistente que necesitaremos para no correr las migraciones cada vez que encendamos el contenedor, esto porque Docker borra todos los datos una vez que damos de baja la información, si quieres aprender más sobre este tema te recomiendo &lt;a href="https://docs.docker.com/storage/volumes/"&gt;esta&lt;/a&gt; sección de la documentación.&lt;/p&gt;

&lt;p&gt;Ahora, el siguiente servicio es el de Redis pero no ahondaremos mucho en el pues cuenta solo con un par de etiquetas las cuales ya hemos revisado, para más información puedes visitar &lt;a href="https://hub.docker.com/_/redis"&gt;la imagen oficial.&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.8'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres:latest&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-rails-db&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_DB=docker-rails-dev&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_PASSWORD=password&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;5432:5432&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dbdata:/var/lib/postgresql/data'&lt;/span&gt;
  &lt;span class="na"&gt;redis&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis:latest&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-rails-redis&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;6379:6379&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nuestro último servicio lo llamaremos &lt;code&gt;web&lt;/code&gt; y será la imagen que hemos construido con nuestro &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.8'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres:latest&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-rails-db&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_DB=docker-rails-dev&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_PASSWORD=password&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;5432:5432&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dbdata:/var/lib/postgresql/data'&lt;/span&gt;
  &lt;span class="na"&gt;redis&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis:latest&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-rails-redis&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;6379:6379&lt;/span&gt;
  &lt;span class="na"&gt;web&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-rails&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-rails-web&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;3000:3000&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;db&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_HOST=db&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_USER=postgres&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_PASSWORD=password&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;REDIS_URL=redis://redis:6379&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La primer etiqueta nueva con la que nos topamos es &lt;code&gt;build&lt;/code&gt;, la cual indica el directorio donde se encuentra nuestro Dockerfile; dado a que nuestro Dockerfile está en la raíz solamente pondremos &lt;code&gt;.&lt;/code&gt;; si tu Dockerfile no está en la raíz o tiene otro nombre es recomendable que leas &lt;a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#build"&gt;esta&lt;/a&gt; sección de la documentación para asegurarte que Compose lo encuentre.&lt;/p&gt;

&lt;p&gt;La etiqueta &lt;code&gt;image&lt;/code&gt; en este caso servirá para nombrar la imagen que construirá Compose, ya que al estar presente &lt;code&gt;build&lt;/code&gt; no irá al repositorio a buscar una imagen preconstruida.&lt;/p&gt;

&lt;p&gt;Por último, la etiqueta &lt;code&gt;depends_on&lt;/code&gt; informará a Compose que no se debe de tratar de iniciar el contenedor hasta que estén creados los servicios &lt;code&gt;db&lt;/code&gt; y &lt;code&gt;redis&lt;/code&gt;, así como los conectará de manera interna para que nosotros podamos accesar a ellos mediante un URL (como se puede observar en la variable de ambiente de Redis) o por sus respectivas credenciales (como es el caso de Postgres), si quieres aprender como Docker maneja eso puedes leer sobre &lt;a href="https://docs.docker.com/compose/networking/"&gt;Docker Network&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ahora que ya terminamos con los servicios, lo unico que debemos es listar los volumenes que usaremos y a los cuales &lt;a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#volumes"&gt;nombramos&lt;/a&gt; de la siguiente manera.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.8'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres:latest&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-rails-db&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_DB=docker-rails-dev&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_PASSWORD=password&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;5432:5432&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dbdata:/var/lib/postgresql/data'&lt;/span&gt;
  &lt;span class="na"&gt;redis&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis:latest&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-rails-redis&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;6379:6379&lt;/span&gt;
  &lt;span class="na"&gt;web&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-rails&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-rails-web&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;3000:3000&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;db&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_HOST=db&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_USER=postgres&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_PASSWORD=password&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;REDIS_URL=redis://redis:6379&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/app&lt;/span&gt;
&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;dbdata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¡Y listo! Nuestro &lt;code&gt;docker-compose.yml&lt;/code&gt; está listo, ahora solo falta un paso para empezar a crear nuestra aplicación contenida en Docker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ojos-que-no-ven-dockerignore-que-no-siente"&gt;
  &lt;/a&gt;
  Ojos que no ven, .dockerignore que no siente
&lt;/h2&gt;

&lt;p&gt;Muchas veces no queremos que ciertos archivos estén en nuestra imagen de Docker pues estos no son necesarios para su contrucción (o se generan en la misma) y solo terminan haciendo el proyecto más grande de lo que necesita ser, como puede ser el caso de los &lt;code&gt;node_modules&lt;/code&gt; y la carpeta &lt;code&gt;.git&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
Para ahorrarnos este espacio crearemos un archivo llamado &lt;code&gt;.dockerignore&lt;/code&gt; en la raíz de nuestro proyecto y añadiremos estas dos carpetas:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;".git &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt; node_modules"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .dockerignore
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para más información sobre lo que puede contenener un archivo &lt;code&gt;.dockerignore&lt;/code&gt; puedes consultar la &lt;a href="https://docs.docker.com/engine/reference/builder/#dockerignore-file"&gt;documentación oficial de Docker&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unas-bases-de-datos-para-llevar"&gt;
  &lt;/a&gt;
  Unas bases de datos para llevar
&lt;/h2&gt;

&lt;p&gt;Antes de correr el proyecto será necesario crear la base de datos que Rails espera, y crearla es tan sencillo que se puede hacer en un solo comando.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose run web db:create
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Este comando le dice a Docker que use la imagen (que construirá) para correr un comando, en este caso &lt;code&gt;db:create&lt;/code&gt;. Docker, con lo especificado en el &lt;code&gt;docker-compose.yml&lt;/code&gt; sabe que como &lt;em&gt;web&lt;/em&gt; depende de &lt;em&gt;db&lt;/em&gt; tendrá que correr primero la instancia de Postgres, por lo que la base de datos se creará en este contenedor.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;¿Por qué solamente &lt;code&gt;db:create&lt;/code&gt; y no &lt;code&gt;rails db:create&lt;/code&gt; o &lt;code&gt;rake db:create&lt;/code&gt;? En nuestro &lt;code&gt;Dockerfile&lt;/code&gt; dimos como punto de entrada el comando &lt;code&gt;rails&lt;/code&gt;, por ello solo es necesario pasar los parametros. Si quisieramos efectuar otro comando dentro del contenedor esto tendría que ser a través de &lt;a href="https://docs.docker.com/engine/reference/commandline/exec/"&gt;docker exec&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#nuestra-aplicaci%C3%B3n-en-un-contenedor"&gt;
  &lt;/a&gt;
  Nuestra aplicación en un contenedor
&lt;/h2&gt;

&lt;p&gt;Con la base de datos creada, solo queda un comando que corra los contenedores en &lt;a href="https://docs.docker.com/compose/reference/up/"&gt;modo separado&lt;/a&gt; y podremos ver el fruto de nuestro trabajo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¡Y listo! Ya podrás accesar a traves de tu navegador a &lt;a href="http://localhost:3000/"&gt;localhost:3000&lt;/a&gt; y ver la página de bienvenida de Rails.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lqk19pjy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fiscat1lxr91qo1jnbaj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lqk19pjy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fiscat1lxr91qo1jnbaj.png" alt="Welcome to Rails!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  Conclusión
&lt;/h2&gt;

&lt;p&gt;Puede que todo este proceso sea algo intimidante al principio, en especial si no sabes Docker, pero su resultado es un ambiente de desarrollo mucho más sencillo para todos los involucrados en el proyecto, pues ahora solo con tener Docker instalado podrán iniciar a programar; sin mencionar los beneficios que esta tecnología puede traer a tu ambiente de producción cuando se combina con Kubernetes o Docker Swarm.&lt;/p&gt;

&lt;p&gt;Espero que te haya sido útil, cualquier cosa puedes &lt;a href="https://luisangel.me/about#contacto"&gt;contactarme&lt;/a&gt; y responderé lo más pronto posible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bibliograf%C3%ADa"&gt;
  &lt;/a&gt;
  Bibliografía
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/samples/rails/"&gt;Docker Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gorails.com/episodes/docker-basics-for-gorails"&gt;Go Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>docker</category>
      <category>rails</category>
      <category>ruby</category>
    </item>
    <item>
      <title>Homer Simpson in CSS... with a single HTML element</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 06 Sep 2021 23:24:26 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/homer-simpson-in-css-with-a-single-html-element-4ood</link>
      <guid>https://dev.to/alvaromontoro/homer-simpson-in-css-with-a-single-html-element-4ood</guid>
      <description>&lt;p&gt;The other day, I did a lightning talk about &lt;a href="https://alvaromontoro.com/blog/67979/creating-accessible-css-art"&gt;CSS art and accessibility&lt;/a&gt; at the Hamburg HTML meetup. Before the meeting, someone commented about drawing a Simpson character in CSS but using a single element... so I decided to give it a try, and here it is. A responsive drawing of Homer Simpson in CSS, using only one HTML element:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/vYZKxQj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like The Simpsons and enjoy coding/looking at CSS drawings, &lt;a href="https://codepen.io/collection/DrwLdN"&gt;check my collection of CSS Simpsons&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>showdev</category>
    </item>
  </channel>
</rss>
