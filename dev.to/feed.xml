<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Monitoring your Flask application using OpenTelemetry</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Sat, 20 Nov 2021 13:03:32 +0000</pubDate>
      <link>https://dev.to/signoz/monitoring-your-flask-application-using-opentelemetry-2l2o</link>
      <guid>https://dev.to/signoz/monitoring-your-flask-application-using-opentelemetry-2l2o</guid>
      <description>&lt;p&gt;In this article, we will use OpenTelemetry to instrument a sample Flask app. Flask is one of the most popular web application frameworks of Python. It consists of Werkzeug WSGI toolkit and Jinja2 template engine.&lt;/p&gt;

&lt;p&gt;Instrumentation is one of the biggest challenge engineering teams face when starting out with observability. Instrumenting a distributed application architecture is not easy. Applications now have distributed services as well as distributed teams that might be using multiple programming languages and numerous frameworks and libraries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt; is the leading open-source standard that is solving the problem of instrumentation. It is currently an incubating project under the &lt;a href="https://www.cncf.io/"&gt;Cloud Native Computing Foundation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is a set of tools, APIs, and SDKs used to instrument applications to create and manage telemetry data(Logs, metrics, and traces). It aims to make telemetry data(logs, metrics, and traces) a built-in feature of cloud-native software applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-opentelemetry"&gt;
  &lt;/a&gt;
  Why use OpenTelemetry?
&lt;/h3&gt;

&lt;p&gt;As might be clear by now that OpenTelemetry helps you to generate telemetry data. You still need a backend to analyze, store and visualize that data. By design, OpenTelemetry is vendor-agnostic. And that's one of the biggest advantages of using OpenTelemetry. It can export data in multiple formats which you can send to a backend of your choice.&lt;/p&gt;

&lt;p&gt;In this article, we will use &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; as a backend. SigNoz is an open-source APM that can be used for both metrics and distributed tracing.&lt;/p&gt;

&lt;p&gt;Let's get started and see how to use OpenTelemetry for a Flask application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-a-flask-application-with-opentelemetry"&gt;
  &lt;/a&gt;
  Running a Flask application with OpenTelemetry
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry is a set of tools, APIs, and SDKs used to instrument applications to create and manage telemetry data(logs, metrics, and traces).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-signoz"&gt;
  &lt;/a&gt;
  Installing SigNoz
&lt;/h3&gt;

&lt;p&gt;You can get started with SigNoz using just three commands at your terminal if you have Docker installed. You can install Docker from its &lt;a href="https://www.docker.com/get-started"&gt;official website&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/SigNoz/signoz.git&lt;/span&gt;
&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;signoz&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will have an option to choose between ClickHouse or Kafka + Druid as a storage option. Trying out SigNoz with ClickHouse database takes less than 1.5GB of memory, and for this tutorial, we will use that option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signoz.io/docs/deployment/docker/?utm_source=blog&amp;amp;utm_medium=opentelemetry_flask"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kIEm5Jzc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/deploy_docker_documentation.webp" alt="Deployment Docs" width="880" height="82"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you are done installing SigNoz, you can access the UI at: &lt;a href="http://localhost:3000/application"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The application list shown in the dashboard is from a sample app called HOT R.O.D that comes bundled with the SigNoz installation package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ih4CJjA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/signoz_dashboard_hc.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ih4CJjA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/signoz_dashboard_hc.webp" alt="SigNoz dashboard showing application list" width="880" height="492"&gt;&lt;/a&gt;SigNoz Dashboard&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-a-sample-flask-application"&gt;
  &lt;/a&gt;
  Getting a sample Flask application
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Python 3.4 or newer&lt;br&gt;&lt;br&gt;
Download the &lt;a href="https://www.python.org/downloads/"&gt;latest version&lt;/a&gt; of Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MongoDB&lt;br&gt;&lt;br&gt;
Below are the download links for different OS:&lt;br&gt;&lt;br&gt;
&lt;a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/"&gt;MacOS&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://docs.mongodb.com/manual/administration/install-on-linux/"&gt;Linux&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/"&gt;Windows&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Running sample Flask app&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
We will be using the Flask app at this &lt;a href="https://github.com/SigNoz/sample-flask-app"&gt;Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clone sample Flask app repository and go to the root folder&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/SigNoz/sample-flask-app.git&lt;/span&gt;
   &lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Check if the app is running&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="nx"&gt;python3&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now access the UI of the app on your local host: &lt;a href="http://localhost:5000/"&gt;http://localhost:5000/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wQsdv0i---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/11/sample_flask_app.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wQsdv0i---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/11/sample_flask_app.webp" alt="Sample flask app" width="880" height="316"&gt;&lt;/a&gt;Sample flask application running on local host&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instrumenting-the-flask-application-with-opentelemetry"&gt;
  &lt;/a&gt;
  Instrumenting the Flask application with OpenTelemetry
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Opentelemetry Python instrumentation installation&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;The app folder contains a file called &lt;code&gt;requirements.txt&lt;/code&gt;, which contains all the necessary requirements to set up OpenTelemetry Python instrumentation. Make sure your path is updated to the root directory of your sample app and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="nx"&gt;pip3&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="nx"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it hangs while installing &lt;code&gt;grpcio&lt;/code&gt; during &lt;strong&gt;pip3 install opentelemetry-exporter-otlp&lt;/strong&gt; then follow below steps as suggested in &lt;a href="https://stackoverflow.com/questions/56357794/unable-to-install-grpcio-using-pip-install-grpcio/62500932#62500932"&gt;this stackoverflow link&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pip3 install --upgrade pip&lt;/li&gt;
&lt;li&gt;python3 -m pip install --upgrade setuptools&lt;/li&gt;
&lt;li&gt;pip3 install --no-cache-dir --force-reinstall -Iv grpcio&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Install application-specific packages&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
This step is required to install packages specific to the application. Make sure to run this command in the root directory of your installed application. This command figures out which instrumentation packages the user might want to install and installs it for them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="nx"&gt;opentelemetry&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;bootstrap&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Passing the necessary environment variables&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
You're almost done. In the last step, you just need to configure a few environment variables for your OTLP exporters. Environment variables that need to be configured:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SERVICE_NAME  - application service name (you can name it as you like)&lt;/li&gt;
&lt;li&gt;ENDPOINT_ADDRESS - OTLP gRPC collector endpoint address (IP of SigNoz)
After taking care of these environment variables, you only need to run your instrumented application. Accomplish all these by using the following command at your terminal.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="nx"&gt;OTEL_RESOURCE_ATTRIBUTES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;flaskApp&lt;/span&gt; &lt;span class="nx"&gt;OTEL_METRICS_EXPORTER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;none&lt;/span&gt; &lt;span class="nx"&gt;OTEL_EXPORTER_OTLP_ENDPOINT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://&amp;lt;IP of SigNoz&amp;gt;:4317&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;opentelemetry&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;instrument&lt;/span&gt; &lt;span class="nx"&gt;python3&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Ip of SigNoz&lt;/code&gt; can be replaced with localhost in this case. Hence, the final command becomes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;OTEL_RESOURCE_ATTRIBUTES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;flaskApp&lt;/span&gt; &lt;span class="nx"&gt;OTEL_METRICS_EXPORTER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;none&lt;/span&gt; &lt;span class="nx"&gt;OTEL_EXPORTER_OTLP_ENDPOINT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:4317&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;opentelemetry&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;instrument&lt;/span&gt; &lt;span class="nx"&gt;python3&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And congratulations! You have now instrumented your flask application with OpenTelemetry.&lt;/p&gt;

&lt;p&gt;Below you can find your &lt;code&gt;Flask_app&lt;/code&gt; in the list of applications being monitored on SigNoz dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lpYPvDD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/11/flask_app_list_signoz.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lpYPvDD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/11/flask_app_list_signoz.webp" alt="Flask app in the list of applications" width="880" height="507"&gt;&lt;/a&gt;Flask app in the list of applications monitored by SigNoz&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opensource-tool-to-visualize-telemetry-data"&gt;
  &lt;/a&gt;
  Open-source tool to visualize telemetry data
&lt;/h2&gt;

&lt;p&gt;SigNoz makes it easy to visualize metrics and traces captured through OpenTelemetry instrumentation.&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box RED metrics charts and visualization. RED metrics stands for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rate of requests&lt;/li&gt;
&lt;li&gt;Error rate of requests&lt;/li&gt;
&lt;li&gt;Duration taken by requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---EjS1eNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---EjS1eNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.webp" alt="SigNoz charts and metrics" width="880" height="512"&gt;&lt;/a&gt;Measure things like application latency, requests per sec, error percentage and see your top endpoints with SigNoz.&lt;/p&gt;

&lt;p&gt;You can then choose a particular timestamp where latency is high to drill down to traces around that timestamp.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zipHHg5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_list_of_traces_hc.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zipHHg5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_list_of_traces_hc.webp" alt="List of traces on SigNoz dashboard" width="880" height="512"&gt;&lt;/a&gt;View of traces at a particular timestamp&lt;/p&gt;

&lt;p&gt;You can use flamegraphs to exactly identify the issue causing the latency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fmGoLDx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fmGoLDx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.webp" alt="Flamegraphs used to visualize spans of distributed tracing in SigNoz UI" width="880" height="512"&gt;&lt;/a&gt;View of traces at a particular timestamp&lt;/p&gt;

&lt;p&gt;You can also build custom metrics dashboard for your infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z7C5zsAp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_custom_dashboard-min.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z7C5zsAp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_custom_dashboard-min.webp" alt="Custom metrics dashboard" width="880" height="477"&gt;&lt;/a&gt;You can also build a custom metrics dashboard for your infrastructure&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry makes it very convenient to instrument your Flask application. You can then use an open-source APM tool like SigNoz to analyze the performance of your app. As SigNoz offers a full-stack observability tool, you don't have to use multiple tools for your monitoring needs.&lt;/p&gt;

&lt;p&gt;You can try out SigNoz by visiting its GitHub repo 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo" width="708" height="162"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions or need any help in setting things up, join our slack community and ping us in &lt;code&gt;#help&lt;/code&gt; channel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/signoz-slack"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSs2tC2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/join_slack_cta.png" alt="SigNoz Slack community" width="880" height="118"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you want to read more about SigNoz 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signoz.io/opentelemetry/go/"&gt;Golang Aplication Monitoring with OpenTelemetry and SigNoz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signoz.io/blog/opentelemetry-collector-complete-guide/"&gt;OpenTelemetry collector - complete guide&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>monitoring</category>
      <category>performance</category>
      <category>opentelemetry</category>
    </item>
    <item>
      <title>Learning Programming is Non-Linear</title>
      <author>Renan Moura</author>
      <pubDate>Sat, 20 Nov 2021 12:28:14 +0000</pubDate>
      <link>https://dev.to/renanmouraf/learning-programming-is-non-linear-469c</link>
      <guid>https://dev.to/renanmouraf/learning-programming-is-non-linear-469c</guid>
      <description>&lt;p&gt;Learning is by no means a linear process, even in hard sciences like Math.&lt;/p&gt;

&lt;p&gt;It is very common to see people asking in groups, Reddit, and other forum-like places "What path should I take to become a Software Developer".&lt;/p&gt;

&lt;p&gt;Unfortunately, learning programming is not linear.&lt;/p&gt;

&lt;p&gt;You will find many lists and articles giving you a path like: learn HTML, CSS, JavaScript...&lt;/p&gt;

&lt;p&gt;They are not wrong in the sense that you should learn JavaScript before React, but they don't warn you that you should not worry about mastering the previous topic before jumping to the next.&lt;/p&gt;

&lt;p&gt;Those topics are all interconnected, which means they will "click" in your head only after you have some knowledge of each topic.&lt;/p&gt;

&lt;p&gt;Learn some JavaScript and then some React.&lt;/p&gt;

&lt;p&gt;If you decide to "master" Python before trying Django, good luck, you will never get to Django.&lt;/p&gt;

&lt;p&gt;Python is a massive language, you can learn the basics very quickly, but mastering it is another matter.&lt;/p&gt;

&lt;p&gt;That is what I had in mind when I wrote &lt;a href="https://renanmf.com/python-guide-beginners/"&gt;The Python Guide for Beginners&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can learn the core of the language as fast as possible, and then move on to dive into Web Development, Data Science, or general use of Python as a programming language to automate your everyday tasks.&lt;/p&gt;

&lt;p&gt;If you choose, say, Machine Learning, you will need to understand some details of the language specifically for some tasks, but you will have enough knowledge of the basics to google yourself out of any situation.&lt;/p&gt;

&lt;p&gt;The "click" also happens as you expand your arsenal of tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://renanmf.com/learn-more-than-one-programming-language/"&gt;Learn More Than One Programming Language&lt;/a&gt; and some concepts that you learned in language X will make much more sense after you learn language Y.&lt;/p&gt;

&lt;p&gt;I'm challenging myself at the moment to dive more into web3, which is a new realm of software development and solutions revolving around blockchain and the crypto space.&lt;/p&gt;

&lt;p&gt;Adaptation is &lt;a href="https://renanmf.com/the-top-skill-for-a-software-developer/"&gt;The Top Skill for a Software Developer&lt;/a&gt; and you have to keep improving yourself as new opportunities arise.&lt;/p&gt;

&lt;p&gt;This means I won't waste hundreds of hours to learn Solidity or understand every single concept about Smart Contracts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://renanmf.com/the-only-way-to-learn-programming/"&gt;The Only Way To Learn Programming&lt;/a&gt; is to take action with what you know.&lt;/p&gt;

&lt;p&gt;So I will learn some things, apply them to a project and then I will be able to adapt myself to any situation that comes to me.&lt;/p&gt;

&lt;p&gt;If you wait until you are 100% prepared, you will be already too late to take the best opportunities.&lt;/p&gt;

&lt;p&gt;You also can &lt;a href="https://renanmf.com/newsletter/"&gt;subscribe to my newsletter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Handling sensitive client-side API keys in Next.js</title>
      <author>Carlo Gino Catapang</author>
      <pubDate>Sat, 20 Nov 2021 12:14:38 +0000</pubDate>
      <link>https://dev.to/codegino/handling-sensitive-client-side-api-keys-in-next-2o0g</link>
      <guid>https://dev.to/codegino/handling-sensitive-client-side-api-keys-in-next-2o0g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-to-avoid-exposing-api-keys-to-the-browser"&gt;
  &lt;/a&gt;
  &lt;a href="https://codegino.com/blog/next-hide-api-key"&gt;How to avoid exposing API keys to the browser&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h3&gt;

&lt;p&gt;Create an &lt;a href="https://nextjs.org/docs/api-routes/introduction"&gt;API handler&lt;/a&gt; which will call the external API with the sensitive API key, then call that handler from the client-side.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h3&gt;

&lt;p&gt;Here's an example of how to call an API with a required API key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.test.com/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some-secret-key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;API_URL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/hello?apiKey=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, we don't want it to be hardcoded or committed to the repo; As a workaround, we can create an environment variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;proccess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_EXTERNAL_API_HOST&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;proccess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;API_URL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/hello?apiKey=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you're wondering why variables start with &lt;code&gt;NEXT_PUBLIC_&lt;/code&gt; you can refer to this &lt;a href="https://codegino.com/blog/next-js-environment-variables"&gt;blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using the above example will surely help us not leak the API key in our codebase; however, it is still accessible to the client-side.&lt;/p&gt;



&lt;p&gt;Go to the Network tab in the browser, and you'll see the API key in the request headers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UDMMYaTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6ISSNTj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UDMMYaTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6ISSNTj.png" width="880" height="255"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Keep in mind that client-side code needs to be treated as publicly accessible by anyone.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;As mentioned in the &lt;code&gt;TL;DR&lt;/code&gt; section, we can prevent the exposure of API keys if the code is running on the server.&lt;/p&gt;

&lt;p&gt;The good thing is that Next.js is not only a client-side framework but is also used to run server-side code, which means no need to create a new backend service for this use case.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check this documentation to learn about creating an &lt;a href="https://nextjs.org/docs/api-routes/introduction"&gt;API in Next.js&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#heres-the-general-steps"&gt;
  &lt;/a&gt;
  Here's the general steps
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Remove the &lt;code&gt;NEXT_PUBLIC&lt;/code&gt; in the variable name(e.g. &lt;code&gt;NEXT_PUBLIC_API_KEY&lt;/code&gt; to &lt;code&gt;API_KEY&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Create a handler named &lt;code&gt;hello.js&lt;/code&gt; under &lt;code&gt;pages/api&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Move the API call to the handler with the updated environment variable.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`https://www.test.com/api/hello?apiKey=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Send the response&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The handler above is accessible via &lt;code&gt;localhost:3000/api/hello&lt;/code&gt; in a local environment or &lt;code&gt;https://www.ourhost.com/api/hello&lt;/code&gt; in production.&lt;/p&gt;



&lt;p&gt;But since we are pointing to the same host, we use &lt;code&gt;window.location.origin&lt;/code&gt; to avoid hardcoding the path or creating unnecessary environment variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/hello`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The API key should not be visible in the browser as the external API call executes from the server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9PEQLs0D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HDqx4oz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9PEQLs0D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HDqx4oz.png" width="880" height="218"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This article might be anti-climactic as the solution is very similar to all other solutions we've seen so far. However, it is worth mentioning that in Next.js, forwarding an API call to the server is straightforward since Next.js can be both used in the frontend and backend.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Know about 10 popular open-source projects in the end of 2021!</title>
      <author>Suchitra</author>
      <pubDate>Sat, 20 Nov 2021 11:35:11 +0000</pubDate>
      <link>https://dev.to/suchitra_13/know-about-10-popular-open-source-projects-in-the-end-of-2021-2ofp</link>
      <guid>https://dev.to/suchitra_13/know-about-10-popular-open-source-projects-in-the-end-of-2021-2ofp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#mozilla-firefox"&gt;
  &lt;/a&gt;
  Mozilla Firefox
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uV4wBtCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i20ty3vscz13hwziy2xz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uV4wBtCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i20ty3vscz13hwziy2xz.png" alt="Mozilla" width="750" height="779"&gt;&lt;/a&gt;&lt;br&gt;
Mozilla Firefox is an open source web browser developed by Mozilla Foundation.First released in 2002 under the name Phoenix. It's available for most operating systems including Windows, macOS, Linux, and most phones and tablets.&lt;/p&gt;

&lt;p&gt;Technologies: C++, C, HTML, JavaScript&lt;br&gt;
List of repositories &lt;a href="https://github.com/topics/mozilla-firefox"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#linux"&gt;
  &lt;/a&gt;
  Linux
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CeqGvVay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/727mx98rkpv1pcpi9b0b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CeqGvVay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/727mx98rkpv1pcpi9b0b.png" alt="Linux" width="750" height="894"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Linux is a free and open source project developed by Linus Torvald in 1991. Basically, it is an operating system kernel that is open and free for everyone.&lt;/p&gt;

&lt;p&gt;Technologies: C, Assembly language&lt;br&gt;
List of repositories &lt;a href="https://github.com/topics/linux"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#apache-cassandra"&gt;
  &lt;/a&gt;
  Apache Cassandra
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xbpzj0EL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shcvt81h17diq8g1is99.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xbpzj0EL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shcvt81h17diq8g1is99.png" alt="Apache Cassandra" width="750" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apache Cassandra is an open source NoSQL distributed database designed to manage massive amount of structure and unstructured data across the world.&lt;br&gt;
It was developed at Facebook for inbox search and open sourced in July 2008. &lt;/p&gt;

&lt;p&gt;Technology: Java&lt;br&gt;
List of repositories &lt;a href="https://cassandra.apache.org/_/community.html#how-to-contribute"&gt;here&lt;/a&gt;&lt;br&gt;
Top Contributor: Jonathan Ellis, CTO &amp;amp; Co-Founder at DataStax&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tensorflow"&gt;
  &lt;/a&gt;
  TensorFlow
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cl8xt2fW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmg7fcclxx4mblp2bxi9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cl8xt2fW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmg7fcclxx4mblp2bxi9.png" alt="TensorFlow" width="880" height="295"&gt;&lt;/a&gt;&lt;br&gt;
TensorFlow is a free and open source software library for Machine Learning and Artificial Intelligence. It was created by Google Brain Team in 2015.&lt;/p&gt;

&lt;p&gt;Technologies: Python, C++&lt;br&gt;
List of repositories &lt;a href="https://github.com/topics/tensorflow"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#django"&gt;
  &lt;/a&gt;
  Django
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YaMl0NRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r73y46axxnwrieovkvde.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YaMl0NRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r73y46axxnwrieovkvde.png" alt="Django" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Django is a Python based open source web framework that follows the model template views architectural pattern. It’s design to help developers achieve their most important objective, which rapid development.&lt;/p&gt;

&lt;p&gt;Technology: Python&lt;br&gt;
List of repositories &lt;a href="https://github.com/topics/django"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#kubernetes"&gt;
  &lt;/a&gt;
  Kubernetes
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qDqy7V8c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zza5rwu9w4b21r39hkja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qDqy7V8c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zza5rwu9w4b21r39hkja.png" alt="Kubernetes" width="730" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kubernetes is an open source container orchestration system for automating computer application deployment, scaling, and management. It was originally designed by Google and is now maintained by the Cloud Native Computing Foundation.&lt;br&gt;
It aims to provide a "platform for automating deployment, scaling, and operations of application containers across clusters of hosts". It supports a range of container tools, including Docker&lt;/p&gt;

&lt;p&gt;Technology: Go&lt;br&gt;
List of repositories &lt;a href="https://github.com/topics/kubernetes"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#ansible"&gt;
  &lt;/a&gt;
  Ansible
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iOwM9qK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9h3nyyr8ldc45uygky7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iOwM9qK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9h3nyyr8ldc45uygky7.png" alt="Ansible" width="390" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ansilble is an open source community project sponsored by Red Hat. It is a radically simple IT automation engine that automates cloud provisioning, configuration management, application deployment, intra-service orchestration, and many other IT needs.&lt;/p&gt;

&lt;p&gt;Technologies : Python, PowerShell, Shell, Ruby&lt;br&gt;
List of repositories &lt;a href="https://github.com/ansible/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#geany"&gt;
  &lt;/a&gt;
  Geany
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jxPaBHU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqt3q6qfnkb6dnpnhd1t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jxPaBHU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqt3q6qfnkb6dnpnhd1t.png" alt="Geany" width="750" height="750"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Geany is a small and lightweight IDE that runs on Linux, Windows, MacOS, and every platform that is supported by GTK libraries.&lt;/p&gt;

&lt;p&gt;Technologies: C, C++&lt;br&gt;
List of repositories &lt;a href="http://github.com/geany/geany"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#renovate"&gt;
  &lt;/a&gt;
  Renovate
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9IhVl00E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gfuukbp8bqn5p3ycn27.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9IhVl00E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gfuukbp8bqn5p3ycn27.jpg" alt="Renovate" width="660" height="220"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Renovate is the essential “keep absolutely everything up-to-date” code maintenance tool. Acquired by WhiteSource in November 2019, Renovate is designed to save developers time and reduce security risk by automating dependency updates in software projects. &lt;/p&gt;

&lt;p&gt;Technologies: JavaScript, TypeScript&lt;br&gt;
List of repositories &lt;a href="https://github.com/renovatebot/renovate"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#jenkins"&gt;
  &lt;/a&gt;
  Jenkins
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2URulzbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85335ski46qrgzjg1q8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2URulzbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85335ski46qrgzjg1q8f.png" alt="Jenkins" width="750" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jenkins is an open source automation server. It helps automate the part of software development related to building, testing and deploying, facilitating continuous integration and continuous delivery.&lt;/p&gt;

&lt;p&gt;Technology: Java&lt;br&gt;
List of repository &lt;a href="https://www.jenkins.io/participate/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These projects are giant and managed by the community member, not managed by particular ownership. Also, open for everyone who wants to contribute to. Interesting right!!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#thanks-for-reading-hope-its-useful-to-you"&gt;
  &lt;/a&gt;
  &lt;em&gt;Thanks for reading, hope it's useful to you&lt;/em&gt;
&lt;/h2&gt;


&lt;div class="ltag__user ltag__user__id__449284"&gt;
  
    .ltag__user__id__449284 .follow-action-button {
      background-color: #a600ff !important;
      color: #ffd500 !important;
      border-color: #a600ff !important;
    }
  
    &lt;a href="/suchitra_13" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4xeM4t5L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7hzloJNB--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449284/d7520737-9b20-4d78-896c-f7725fe51850.jpg" alt="suchitra_13 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/suchitra_13"&gt;Suchitra&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/suchitra_13"&gt;I am enthusiastic about code and technology!!&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;If you like the contents and want to support:)&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/suchitra"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dWYI_Yhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cawwn08bx5rh2s9bax2x.png" alt="image" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>🤷‍♂️ Chrome just changed emojis to outlines in headings? 🤷‍♂️ I have a fix for your site! 💪</title>
      <author>InHuOfficial</author>
      <pubDate>Sat, 20 Nov 2021 11:34:11 +0000</pubDate>
      <link>https://dev.to/inhuofficial/chrome-changed-emojis-in-headings-a-workaround-if-you-want-normal-emojis-again-4n4o</link>
      <guid>https://dev.to/inhuofficial/chrome-changed-emojis-in-headings-a-workaround-if-you-want-normal-emojis-again-4n4o</guid>
      <description>&lt;p&gt;Recently I noticed something a little different in Chrome, all emojis are now outlines only (and the same colour as text) if they are within Headings.&lt;/p&gt;

&lt;p&gt;I am not sure why this has happened, I can't seem to find anything about it and it certainly isn't an accessibility improvement (if that is what they were thinking)!&lt;/p&gt;

&lt;p&gt;Either way, here is a quick look at what they have done if you haven't seen it yet, or use a different browser!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--73Vrj8mm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i2g7nqpj4pkio7e8q1e7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--73Vrj8mm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i2g7nqpj4pkio7e8q1e7.png" alt="Google Chrome on left with simplified emojis in a single colour, Firefox on Right with coloured emojis" width="796" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It also appears that the emojis honour the text colour, which is one good thing (assuming the text colour has enough contrast that is!) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4cjaLi9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iymr41l2gp25z0bxi49e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4cjaLi9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iymr41l2gp25z0bxi49e.png" alt="emoji outline colour in chrome is same as text" width="864" height="326"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-workaround"&gt;
  &lt;/a&gt;
  The workaround
&lt;/h2&gt;

&lt;p&gt;If you make the &lt;code&gt;font-weight&lt;/code&gt; very low then Chrome will show the original emojis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwPUHl9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4u0kt3r5izdwsdz2cpj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwPUHl9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4u0kt3r5izdwsdz2cpj.png" alt="emojis in chrome are normal again if text weight is light" width="867" height="332"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So for now a quick workaround if you want normal emojis to show on your site would be to wrap the emojis in a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; with a very low &lt;code&gt;font-weight&lt;/code&gt; and everything will look normal again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/inhuofficial/embed/NWvJoqW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screenshot-of-example"&gt;
  &lt;/a&gt;
  Screenshot of example
&lt;/h3&gt;

&lt;p&gt;Just in case your can't see what I am on about here is a screenshot of the above example using Chrome on Windows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZM6pQZyu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bpoy74qwxay1k1j0znk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZM6pQZyu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bpoy74qwxay1k1j0znk.png" alt="Content is same as above codepen" width="831" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-think"&gt;
  &lt;/a&gt;
  What do you think?
&lt;/h2&gt;

&lt;p&gt;I kind of like the new outline only emojis, but they don't work everywhere.&lt;/p&gt;

&lt;p&gt;What are your thoughts on it and can anyone actually find the change log item that explains it?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>webdev</category>
      <category>css</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Django Basics: Setup and Installation </title>
      <author>Meet Gor</author>
      <pubDate>Sat, 20 Nov 2021 11:25:28 +0000</pubDate>
      <link>https://dev.to/mr_destructive/django-basics-setup-and-installation-3ho4</link>
      <guid>https://dev.to/mr_destructive/django-basics-setup-and-installation-3ho4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;The crucial aspect of starting to learn any framework is the ease to set it up and Django by far is the easiest of the options out there. There are just a few lines of code to install Django if you already have python installed in your system. In this article, we see how to set up a Django project along with a virtual environment. &lt;/p&gt;

&lt;p&gt;If you already have python and pip installed, you can move on to the &lt;a href="#setting-up-virtual-environment-in-python"&gt;virtual environment setup&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-python-and-pip"&gt;
  &lt;/a&gt;
  Installing Python and PIP
&lt;/h2&gt;

&lt;p&gt;Django is a python based framework so that makes sense to have Python installed along with its package manager to use Django.  &lt;/p&gt;

&lt;p&gt;To install Python, you can visit the official &lt;a href="https://www.python.org/downloads/"&gt;Python&lt;/a&gt; website to download any relevant version for your system (recommended 3.7 and above). &lt;/p&gt;

&lt;p&gt;Mostly the Python installation comes with the option to install &lt;code&gt;pip&lt;/code&gt;(python's package manager) but if you missed that, that's fine, you can install the &lt;a href="https://bootstrap.pypa.io/get-pip.py"&gt;get-pip.py&lt;/a&gt; file into your system and run the below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python get-pip.py   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure the include the relative path to the file if you are not in the same folder as the file.&lt;/p&gt;

&lt;p&gt;So, that should be a python setup in your local machine. To check that Python was installed correctly, type in &lt;code&gt;python --version&lt;/code&gt; and &lt;code&gt;pip --version&lt;/code&gt; to check if they return any version number. IF they do, Congratulations !! You installed Python successfully and if not, don't worry there might be some simple issues that can be googled out and resolved easily. &lt;/p&gt;

&lt;p&gt;Let's move on to the actual setting of the Django project setup.   &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#setting-up-virtual-environment-in-python"&gt;
  &lt;/a&gt;
  Setting up Virtual Environment in python
&lt;/h2&gt;

&lt;p&gt;Virtual Environment is software that isolates the installation of dependencies and libraries for a specific project, making it a clean and safe environment for deployment as well as maintenance. &lt;/p&gt;

&lt;p&gt;In Python, we have a virtual environment package known as &lt;code&gt;virtualenv&lt;/code&gt; that does this thing. It is for installing the Python-related packages into an isolated folder. So, we can install the &lt;code&gt;virtualenv&lt;/code&gt; package in python by following the following steps:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-virtualenv"&gt;
  &lt;/a&gt;
  Installing Virtualenv
&lt;/h3&gt;

&lt;p&gt;Firstly, install the virtual environment package, it's not mandatory but it keeps things simple and easy for your project in correspondence to the entire OS. So in python, we have a module to create the virtual environment pretty easily,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use &lt;code&gt;pip3&lt;/code&gt; or &lt;code&gt;pip -m&lt;/code&gt;, or however you install normal python modules. This just installs the python virtual environment, we need to create a virtual environment in the current folder.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-virtual-environment"&gt;
  &lt;/a&gt;
  Creating a virtual environment
&lt;/h3&gt;

&lt;p&gt;We need to create the environment so as to give the Python interpreter an indication to consider the current folder as an isolated Python environment. We need to create a virtual environment in the current folder, so for that navigate to the folder where you want to create the project and enter the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;virtualenv venv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;venv&lt;/code&gt; can be anything like &lt;code&gt;env&lt;/code&gt; just for your understanding and simplicity it's a standard name kept for the same. After this, you will see a folder of the same name i.e. &lt;code&gt;venv&lt;/code&gt; or any other name you have used. This is the folder where python will keep every installation private to the local folder itself. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#activating-virtual-environment"&gt;
  &lt;/a&gt;
  Activating Virtual environment
&lt;/h3&gt;

&lt;p&gt;Now, we need to activate the virtual environment, this means that anything installed in the prompt with the virtualenv activated will be isolated from the entire system and will be installed in the virtual environment. To activate the environment, we can use the command :&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#for-linuxmacos-"&gt;
  &lt;/a&gt;
  for Linux/macOS :
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#for-windows"&gt;
  &lt;/a&gt;
  for Windows:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;venv\Scripts\activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this, your command prompt will have a &lt;code&gt;(venv)&lt;/code&gt; attached in the beginning. This indicates you are in a virtual environment, things you do here, may it be module installation or any configuration related to python will stay in the local folder itself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-django"&gt;
  &lt;/a&gt;
  Installing Django
&lt;/h2&gt;

&lt;p&gt;After the virtual environment is set up and activated, you can install Django and get started with it. Django is a python module or package, which can be easily installed using its package manager &lt;code&gt;pip&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Install Django using pip:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install django
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-django-project"&gt;
  &lt;/a&gt;
  Create a Django Project
&lt;/h2&gt;

&lt;p&gt;After the installation is completed, you can start a Django project in the current folder from the Django package we installed. There are several commands available in the Django module which you can execute in the command line that we'll discuss later.&lt;br&gt;
For now, we will use the command &lt;code&gt;startproject&lt;/code&gt; this is one of the &lt;a href="https://github.com/django/django/tree/main/django/core/management/commands"&gt;management commands&lt;/a&gt; in Django. The &lt;a href="https://docs.djangoproject.com/en/3.2/ref/django-admin/"&gt;django-admin&lt;/a&gt; is a command-line utility for doing the administrative tasks related to Django.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;django-admin startproject myproject
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;myproject&lt;/code&gt; can be your project name. After this, you will see one new folder and one file pop up.&lt;/p&gt;

&lt;p&gt;Namely, the &lt;code&gt;&amp;lt;project-name&amp;gt;&lt;/code&gt; folder and &lt;code&gt;manage.py&lt;/code&gt; file. We don't have to touch the &lt;code&gt;manage.py&lt;/code&gt; file but we use it in most of the commands to use the Django functionalities, it is quite similar to the &lt;code&gt;django-admin&lt;/code&gt; command. &lt;/p&gt;

&lt;p&gt;You can now run your basic server using the command :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;You can use the &lt;code&gt;djagno-admin&lt;/code&gt; command, but you need to set certain environment variables and modify the settings.py file as per the project-name. You can use the &lt;code&gt;django-admin&lt;/code&gt; as the steps given in the Django &lt;a href="https://docs.djangoproject.com/en/3.2/ref/django-admin/#cmdoption-settings"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The output of the command &lt;code&gt;python manage.py runserver&lt;/code&gt; should be visible in the browser at &lt;code&gt;https://127.0.0.1:8000&lt;/code&gt; as below :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yszmP1Fh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/screenshotr_2021-11-20T15-40-50.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yszmP1Fh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/screenshotr_2021-11-20T15-40-50.png" alt="Django-Base-Project" width="880" height="554"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it the base Django project is installed in your system. To stop the server simply press &lt;code&gt;Ctrl+C&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Follow the below GIF for a clear understanding of those instructions:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/djp2.gif"&gt;Django-basics-part2-setup&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#quicksetupscript"&gt;
  &lt;/a&gt;
  Quick-Setup-Script
&lt;/h2&gt;

&lt;p&gt;You can avoid manually typing the commands once you get the idea of the process in setting up a Django project by executing a simple shell script (for Linux/macOS) or a batch script (for Windows). The script looks something like this:&lt;/p&gt;

&lt;p&gt;For Linux/macOS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env bash

mkdir $1
cd $1
pip install virtualenv
virtualenv venv
source venv/bin/activate

pip install django
django-admin startproject $1 .
clear
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;save as commands.sh file&lt;/p&gt;

&lt;p&gt;For Windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir %1 
cd %1
pip install virtualenv
virtualenv env
call env\Scripts\activate

pip install django
django-admin startproject %1 .
cls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;save as commands.bat file&lt;/p&gt;

&lt;p&gt;For further instructions you can checkout the &lt;a href="https://github.com/Mr-Destructive/django-quick-setup-script"&gt;GitHub repository&lt;/a&gt; or a detailed &lt;a href="https://mr-destructive.github.io/techstructive-blog/django/web-development/python/2021/08/15/Django-Quick-Setup.html"&gt;article&lt;/a&gt; about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;From this section, we were able to set up the Django project in our local system. In the next part, we will cover the &lt;code&gt;folder structure&lt;/code&gt; of the Django project. We won't directly go into the code part because that is very easy once you understand the flow of the framework and its internal work. So, thanks for reading and Happy Coding :)&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>backend</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Dynamic Twitter header images with Dynacover GitHub Action!</title>
      <author>Erika Heidi</author>
      <pubDate>Sat, 20 Nov 2021 11:21:57 +0000</pubDate>
      <link>https://dev.to/erikaheidi/dynamic-twitter-header-images-with-dynacover-github-action-35nb</link>
      <guid>https://dev.to/erikaheidi/dynamic-twitter-header-images-with-dynacover-github-action-35nb</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;Earlier this year, I've built a command-line application to generate dynamic Twitter header images showing latest followers and GitHub sponsors, called &lt;a href="https://github.com/erikaheidi/dynacover"&gt;Dynacover&lt;/a&gt;. I shared &lt;a href="https://dev.to/erikaheidi/how-to-dynamically-update-twitter-cover-image-to-show-latest-followers-using-php-gd-and-twitteroauth-62n"&gt;the full tutorial on how I built this&lt;/a&gt; here on DEV.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9ao9-Yu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yilj90o4tysav70aeay8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9ao9-Yu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yilj90o4tysav70aeay8.png" alt="screenshot showing the dynamic header image on my Twitter profile" width="880" height="552"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the GitHub Actions Hackaton coming up, and considering it's also possible to run GH Actions on schedule, I thought it would be a very interesting challenge to containerize this application and package it as a GH Action. It took me a couple weeks to figure out how to optimize the build and how to allow users to customize their banner templates, but today I was finally able to wrap everything up.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/marketplace/actions/dynacover"&gt;Dynacover GitHub Action&lt;/a&gt; is now published to the Marketplace and can be used by anyone with a GitHub account.&lt;/p&gt;

&lt;p&gt;The action files are available in this repository:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/erikaheidi"&gt;
        erikaheidi
      &lt;/a&gt; / &lt;a href="https://github.com/erikaheidi/dynacover-actions"&gt;
        dynacover-actions
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      GitHub Actions to run Dynacover
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Dynacover Action&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/erikaheidi/dynacover"&gt;Dynacover&lt;/a&gt; is a CLI application that dynamically generates Twitter header images showcasing your latest followers and/or GitHub Sponsors
This action runs Dynacover to update the Twitter header image
of the account linked through the secret keys that must be previously defined as &lt;a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets"&gt;repository secrets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please refer to &lt;a href="https://github.com/erikaheidi/dynacover"&gt;erikaheidi/dynacover&lt;/a&gt; for more details on how Dynacover works, what are the customization options, and how to create custom templates.&lt;/p&gt;
&lt;h2&gt;
Requirements&lt;/h2&gt;
&lt;p&gt;You'll need to set up your Twitter API credentials and user tokens using &lt;a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets"&gt;repository secrets&lt;/a&gt;, on the same repository
you set up your action workflow. The GitHub token is optional, only required if you want to use one of the covers that showcase GitHub Sponsors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Secrets&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;DYNA_TWITTER_KEY&lt;/code&gt;: your Twitter application consumer key or App Key.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DYNA_TWITTER_SECRET&lt;/code&gt;: your Twitter application consumer secret or App Secret.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DYNA_TWITTER_TOKEN&lt;/code&gt;: your personal user token.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DYNA_TWITTER_TOKEN_SECRET&lt;/code&gt;: your personal user token secret.&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/erikaheidi/dynacover-actions"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Wacky Wildcards&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;

&lt;p&gt;You'll need to set up your Twitter API credentials and user tokens using &lt;a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets"&gt;repository secrets&lt;/a&gt;, on the same repository&lt;br&gt;
you set up your action workflow. The GitHub token is optional, only required if you want to use one of the covers that showcase GitHub Sponsors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Secrets&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;DYNA_TWITTER_KEY&lt;/code&gt;: your Twitter application consumer key or App Key.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DYNA_TWITTER_SECRET&lt;/code&gt;: your Twitter application consumer secret or App Secret.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DYNA_TWITTER_TOKEN&lt;/code&gt;: your personal user token.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DYNA_TWITTER_TOKEN_SECRET&lt;/code&gt;: your personal user token secret.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DYNA_GITHUB_TOKEN&lt;/code&gt; (optional): your GitHub personal token (for pulling GitHub Sponsors).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update Twitter Header Image with Dynacover&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dynacover_custom'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Dynacover&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;image&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;upload&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Twitter'&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;erikaheidi/dynacover-actions@v4.2&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;# Uncomment and change accordingly to customize your cover&lt;/span&gt;
          &lt;span class="c1"&gt;#DYNA_DEFAULT_TEMPLATE: dynacover.json&lt;/span&gt;
          &lt;span class="c1"&gt;#DYNA_TEMPLATES_DIR: ${{ github.workspace }}/dynacover_custom&lt;/span&gt;
          &lt;span class="c1"&gt;#DYNA_IMAGES_DIR: ${{ github.workspace }}/dynacover_custom&lt;/span&gt;
          &lt;span class="na"&gt;DYNA_TWITTER_KEY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.TW_CONSUMER_KEY }}&lt;/span&gt;
          &lt;span class="na"&gt;DYNA_TWITTER_SECRET&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.TW_CONSUMER_SECRET }}&lt;/span&gt;
          &lt;span class="na"&gt;DYNA_TWITTER_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.TW_USER_TOKEN }}&lt;/span&gt;
          &lt;span class="na"&gt;DYNA_TWITTER_TOKEN_SECRET&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.TW_USER_TOKEN_SECRET }}&lt;/span&gt;
          &lt;span class="na"&gt;DYNA_GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DYNA_GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;To see this workflow in action using a custom template and cover, check my own &lt;a href="https://github.com/erikaheidi/github-actions"&gt;erikaheidi/github-actions&lt;/a&gt; repository, where I have my own Dynacover set up.&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>opensource</category>
      <category>php</category>
    </item>
    <item>
      <title>CSS Variables</title>
      <author>Jordan Soo Yen Yih</author>
      <pubDate>Sat, 20 Nov 2021 11:13:02 +0000</pubDate>
      <link>https://dev.to/yenyih/css-variables-k5</link>
      <guid>https://dev.to/yenyih/css-variables-k5</guid>
      <description>&lt;p&gt;&lt;strong&gt;CSS variables&lt;/strong&gt; aka &lt;strong&gt;custom properties&lt;/strong&gt; allows you to reuse values throughout your stylesheet. It increases your efficiency, reduce code duplication and a lot of cool tricks you could do with them.🤩&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#global-variables"&gt;
  &lt;/a&gt;
  Global Variables
&lt;/h2&gt;

&lt;p&gt;We can define global variables that will be use throughout the entire website on the root element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
   --warning-color: yellow; 

   /* Format --&amp;lt;YOUR_VARIABLE_NAME&amp;gt;: &amp;lt;ANY_CSS_VALUE&amp;gt; */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start with the double dash, followed by whatever name you want to use for the variable. Then you can use any valid CSS value.&lt;/p&gt;

&lt;p&gt;Then you can use the variable with the &lt;em&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;/em&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
   color: var(--warning-color);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Tips: When calling a CSS variable with the &lt;em&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;/em&gt; function, You can pass in a second argument as a fallback value.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
   color: var(--warning-color, red);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As example above, if the variable is undefined or invalid CSS value, then it will use red instead.&lt;/p&gt;

&lt;p&gt;Now by using the CSS Variables, when we want to change the value, we just need to update once instead of go through every places.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variable-cascade-downwards"&gt;
  &lt;/a&gt;
  Variable Cascade Downwards
&lt;/h2&gt;

&lt;p&gt;We can override the Global CSS variables value in the children. Let's say we have a global variable in previous example, and we have a &lt;em&gt;card&lt;/em&gt; class that change the --warning-color variable to red. So the HTML element with this &lt;em&gt;card&lt;/em&gt; class will use the red value instead of yellow value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* Global */
:root {
   --warning-color: yellow;
}

/* Local */
.card {
   --warning-color: red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That means we can change the appearance of our website by simply tweaking CSS Variables value. This concept very powerful when combine with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries"&gt;Media Queries&lt;/a&gt;💪.&lt;/p&gt;

&lt;p&gt;For example if the viewport is smaller, you may want to decrease the margin between HTML elements instead of updating potential more than 100 CSS classes😵🤯, just define a media query and change the CSS variables value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media screen and (min-width: 600px) {
   :root {
      --margin-base: 10px;
   }
}

/* Small Screens */
@media screen and (max-width: 600px) {
   :root {
      --margin-base: 6px;
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another example is we can use the &lt;em&gt;prefers-color-scheme&lt;/em&gt; media query to toggle between light theme and dark theme based on the user's device preferences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media (prefers-color-scheme: dark) {
    :root {
       --text-color: white;
       --background-color: black;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Besides that, CSS variables also work great with &lt;em&gt;&lt;em&gt;calc&lt;/em&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.my-title {
   --regular-number: 8;

   margin: calc( var(--regular-number) * 1px );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Besides that, you are not limited to use a single variable in a property value. For example below we can define several variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
   --red: 86;
   --green: 23;
   --blue: 107;
}

.content-card {
   color: rgb( var(--red), var(--green), var(--blue) );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This makes CSS Variables extremely useful on building themes. This is because when we combine with Javascript and change the CSS classes on the fly, then the browser will automatically repaint the style of the website.✨🤩&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yfoMSGLX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3wfeosg8cigqsoyya0eq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yfoMSGLX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3wfeosg8cigqsoyya0eq.gif" alt="thank_you_gif" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading.
&lt;/h2&gt;

&lt;p&gt;Above is what I learnt about CSS Variables and how to apply them. If you have any other interesting way on using CSS Variables, please comment below to share with me.🙏😊&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Day 66/100 JavaScript and the Browser</title>
      <author>Rio Cantre</author>
      <pubDate>Sat, 20 Nov 2021 11:01:28 +0000</pubDate>
      <link>https://dev.to/riocantre/day-64100-javascript-and-the-browser-3kf1</link>
      <guid>https://dev.to/riocantre/day-64100-javascript-and-the-browser-3kf1</guid>
      <description>&lt;p&gt;"The dream behind the Web is of a common information space in which we communicate by sharing information. Its universality is essential: the fact that a hypertext link can point to anything, be it personal, local or global, be it draft or highly polished."&lt;/p&gt;

&lt;p&gt;– Tim Berners-Lee, The World Wide Web: A very short personal history&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--igkLR17X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9j5a9lveyu2k0nuht1ns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--igkLR17X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9j5a9lveyu2k0nuht1ns.png" alt="computer" width="880" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>challenge</category>
      <category>programming</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Help build the Metaverse by Developing VR Websites </title>
      <author>Saji Wang</author>
      <pubDate>Sat, 20 Nov 2021 10:55:37 +0000</pubDate>
      <link>https://dev.to/codesphere/help-build-the-metaverse-by-developing-vr-websites-4mgp</link>
      <guid>https://dev.to/codesphere/help-build-the-metaverse-by-developing-vr-websites-4mgp</guid>
      <description>&lt;p&gt;I know what you're thinking, building VR apps requires a PHD in Mathematics and Computer Graphics, and will take you months just to get an app up and running.&lt;/p&gt;

&lt;p&gt;Well, I'm glad to say that you couldn't be more wrong. In this tutorial, we're going to be building a VR website in minutes (you don't even need a VR device to test it with)!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfluVlIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/veus4znxc8s1gczrv0dk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfluVlIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/veus4znxc8s1gczrv0dk.gif" alt="vr webapp final look" width="880" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That means you, yes YOU, can build VR experiences and contribute to the metaverse. Let's get started!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#why-the%C2%A0web"&gt;
  &lt;/a&gt;
  Why The Web?
&lt;/h3&gt;

&lt;p&gt;Now the web might not be the first thing you think of when you think about virtual reality. In reality, however, the web is one of the few truly cross platform technologies that exist.&lt;br&gt;
Building a VR app once with Javascript will allow it to run on virtually any VR system.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#what-are-the-relevant-technologies"&gt;
  &lt;/a&gt;
  What Are The Relevant Technologies?
&lt;/h3&gt;

&lt;p&gt;So what tech are we going to be using?&lt;/p&gt;

&lt;p&gt;First, we are going to be taking advantage of Aframe.io, a library for building and rendering VR scenes with some simple HTML and Javascript. Additionally, you may decide to use Three.js for more complex graphics. Aframe.io includes support for the Three.js API.&lt;/p&gt;

&lt;p&gt;Next, we are going to be taking advantage of WebXR, a library originally developed by Mozilla that allows you to interact with VR devices directly from the web. Additionally, I'm going to show you how you can test your apps without a VR device using a WebXR API extension.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#getting-started-with-aframeio"&gt;
  &lt;/a&gt;
  Getting Started With AFrame.io
&lt;/h3&gt;

&lt;p&gt;To gain access to Aframe.io, just add the following script via CDN:&lt;/p&gt;



&lt;p&gt;We can then create a simple scene with the following html:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nJdkoBWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxsukywkdga1fkk9ovfw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nJdkoBWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxsukywkdga1fkk9ovfw.png" alt="intial vr scene" width="880" height="776"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the key piece to notice here is that we surround our VR scene with the  tag. We can then insert various shapes into our scene by including the relevant tag.&lt;/p&gt;

&lt;p&gt;You can find a full list of a-frame tags, as well as the full A-Frame docs here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aframe.io/docs/1.2.0/introduction/"&gt;https://aframe.io/docs/1.2.0/introduction/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll notice that while you can drag the screen to move the camera, you can't yet actually use a VR device. This is because the html file has to be served, it can't be run off a static file.&lt;/p&gt;

&lt;p&gt;This can be done fairly easily with nodeJS. Simply setup an npm project with the following javascript file:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Finally, we can get a little fancier, and manipulate our scene with Javascript like so:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rsM3Fie1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f84qc1mimioy6gk5aqeb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rsM3Fie1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f84qc1mimioy6gk5aqeb.gif" alt="animated vr scene" width="784" height="590"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there you have it! We successfully created an animated VR scene with less than 100 lines of code!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#testing-it-with-the-webxr%C2%A0api"&gt;
  &lt;/a&gt;
  Testing it with the WebXR API
&lt;/h3&gt;

&lt;p&gt;Now if you're anything like me and haven't shelled out for a VR headset yet, don't worry! You can test out your VR website in either Chrome or Firefox using the WebXR API. Just install the following extension:&lt;/p&gt;

&lt;p&gt;For Firefox: &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/webxr-api-emulator/"&gt;https://addons.mozilla.org/en-US/firefox/addon/webxr-api-emulator/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For Chrome:&lt;br&gt;
&lt;a href="https://chrome.google.com/webstore/detail/webxr-api-emulator/mjddjgeghkdijejnciaefnkjmkafnnje?hl=en"&gt;https://chrome.google.com/webstore/detail/webxr-api-emulator/mjddjgeghkdijejnciaefnkjmkafnnje?hl=en&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once installed, you can head to the WebXR tab when inspecting the page, and play with an emulated headset!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bWjR6FD_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h74ul5ati1a91z7cb2wa.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bWjR6FD_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h74ul5ati1a91z7cb2wa.gif" alt="final vr scene with emulated headset" width="880" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what are you waiting for! Get started!&lt;/p&gt;




&lt;p&gt;Once you're ready to deploy your app, give &lt;a href="https://link.codesphere.com/GD"&gt;Codesphere&lt;/a&gt; a try! &lt;/p&gt;

&lt;p&gt;We're the first cloud platform that truly lets you get under the hood of your cloud environment&lt;br&gt;
Happy coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>vr</category>
    </item>
    <item>
      <title>An Introduction to Coroutines</title>
      <author>DarkWiiPlayer</author>
      <pubDate>Sat, 20 Nov 2021 10:48:11 +0000</pubDate>
      <link>https://dev.to/darkwiiplayer/an-introduction-to-coroutines-38i4</link>
      <guid>https://dev.to/darkwiiplayer/an-introduction-to-coroutines-38i4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#preamble"&gt;
  &lt;/a&gt;
  Preamble
&lt;/h2&gt;

&lt;p&gt;The aim of this article is to be a mostly language-agnostic introduction to coroutines. All code used will be a pseudocode, which will somewhat resemble JavaScript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Subroutines are defined as &lt;code&gt;arguments ⇒ body&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Subroutines without arguments will be shortened to &lt;code&gt;⇒ body&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Multi-statement subroutines use braces &lt;code&gt;{}&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-coroutines"&gt;
  &lt;/a&gt;
  What are Coroutines?
&lt;/h2&gt;

&lt;p&gt;In describing coroutines, the introductory sentence of the &lt;a href="https://en.wikipedia.org/wiki/Coroutine"&gt;wikipedia article&lt;/a&gt; already gets very close to the way I would describe it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Coroutines&lt;/strong&gt; are &lt;a href="https://en.wikipedia.org/wiki/Computer_program"&gt;computer program&lt;/a&gt; components that generalize &lt;a href="https://en.wikipedia.org/wiki/Subroutine"&gt;subroutines&lt;/a&gt; for &lt;a href="https://en.wikipedia.org/wiki/Non-preemptive_multitasking"&gt;non-preemptive multitasking&lt;/a&gt;, by allowing execution to be suspended and resumed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Put even more simply: A coroutine is &lt;em&gt;like a function&lt;/em&gt; that can pause itself.&lt;br&gt;
If we think of a normal function, the way it works is that we &lt;strong&gt;call&lt;/strong&gt; the function, the function &lt;strong&gt;executes&lt;/strong&gt; and at some point, it &lt;strong&gt;returns&lt;/strong&gt; back to where it was called.&lt;/p&gt;

&lt;p&gt;In a similar way, a very simple coroutine will do the same thing: We will &lt;strong&gt;create&lt;/strong&gt; the coroutine, it will &lt;strong&gt;execute&lt;/strong&gt; and at some point it will end and (implicitly) &lt;strong&gt;yield&lt;/strong&gt; back to the calling code.&lt;/p&gt;

&lt;p&gt;The big difference is: A coroutine can &lt;strong&gt;yield&lt;/strong&gt; more than once, and will be paused in between. And that is really all there is to them, from a technical level. A simple example of this would look like this.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#classifying-coroutines"&gt;
  &lt;/a&gt;
  Classifying Coroutines
&lt;/h2&gt;

&lt;p&gt;The 2004 paper &lt;a href="http://www.inf.puc-rio.br/~roberto/docs/MCC15-04.pdf"&gt;Revisiting Coroutines&lt;/a&gt; classifies coroutines in two important ways: &lt;em&gt;Symmetric vs. Asymmetric&lt;/em&gt; and &lt;em&gt;Stackful vs. Stackless&lt;/em&gt;. The paper also distinguishes on whether coroutines are handled as values by the language, but that distinction is less important to understanding how they fundamentally work.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#control%C2%A0transfer-mechanism"&gt;
  &lt;/a&gt;
  Control Transfer Mechanism
&lt;/h3&gt;

&lt;p&gt;The way coroutines transfer control can happen in two ways.&lt;/p&gt;

&lt;p&gt;Asymmetric coroutines are more similar to how functions work. When a coroutine &lt;em&gt;A&lt;/em&gt; resumes a coroutine &lt;em&gt;B&lt;/em&gt;, &lt;em&gt;B&lt;/em&gt; will at some point yield back to &lt;em&gt;A&lt;/em&gt;, just like how any function will eventually return to its caller. We can think of these coroutines as organised in a stack, just like how functions are, but this is not the same as being &lt;em&gt;stackful&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An important implication of this type of control transfer is that once a coroutine hands over control to another by resuming it, it can only ever be handed back control from this coroutine. In other words, it cannot be &lt;em&gt;resumed&lt;/em&gt; from the outside, only &lt;em&gt;yielded&lt;/em&gt; to.&lt;/p&gt;

&lt;p&gt;To illustrate this: "When you lend a pencil to Bob, you know you will eventually get the pencil back from Bob and nobody else."&lt;/p&gt;

&lt;p&gt;This will be represented in pseudocode by the functions &lt;code&gt;resume&lt;/code&gt; ("hand control down") and &lt;code&gt;yield&lt;/code&gt; ("return control back up")&lt;/p&gt;



&lt;p&gt;Symmetric coroutines work a bit differently. Coroutines can freely transfer control to any other coroutine, instead of just "up and down".&lt;/p&gt;

&lt;p&gt;Unlike asymmetric coroutines, this one-way control transfer means a coroutine can hand over control to another and be handed back control by a completely different one.&lt;/p&gt;

&lt;p&gt;Continuing the pencil analogy: "When you lend a pencil to Bob, you may later get it back from Steve, Larry, or never get it back at all."&lt;/p&gt;

&lt;p&gt;In pseudocode, this will be represented by the &lt;code&gt;transfer&lt;/code&gt; function.&lt;/p&gt;



&lt;p&gt;The main advantage of asymmetric coroutines is that they offer more structure. Symmetric coroutines let the user freely jump back and forth between coroutines, in a similar way to &lt;code&gt;goto&lt;/code&gt; statements, which can make core hard to follow.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#stackfulness"&gt;
  &lt;/a&gt;
  Stackfulness
&lt;/h3&gt;

&lt;p&gt;Another important way to categorize coroutines is whether every coroutine has its own stack. This distinction is much harder to explain in theory, but will become clear in examples later on.&lt;/p&gt;

&lt;p&gt;Stackless coroutines, as the name implies, don't have their own call stack. What this means in practice is that the program has no way of tracking their call stack once they yield control, so this is only possible from the function on the bottom of the stack.&lt;/p&gt;

&lt;p&gt;Stackful coroutines, on the other hand, have a separate stack for every coroutine, so they can be paused from anywhere inside the coroutine.&lt;/p&gt;

&lt;p&gt;A complete explanation of why this is and how it works could easily be its own article, so I will be skipping it for now. The important part to remember here is that Stacful is "better" in that it lets you do more, but also harder to implement in a language, specially if it was added later on and not part of the initial language design.&lt;/p&gt;



&lt;p&gt;Many programming languages actually have &lt;em&gt;stackless&lt;/em&gt; &lt;em&gt;asymmetric&lt;/em&gt; coroutines; JavaScript, for example, calls them &lt;em&gt;generators&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Some languages even have a mix of both: Ruby &lt;em&gt;fibers&lt;/em&gt; can both use &lt;code&gt;resume&lt;/code&gt;/&lt;code&gt;yield&lt;/code&gt; semantics, but they can also freely transfer control freely with the &lt;code&gt;transfer&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Windows even provides an OS-level API for coroutines: It calls them Fibers, and they are &lt;em&gt;stackful&lt;/em&gt; and &lt;em&gt;symmetric&lt;/em&gt;. Linux does not provide any coroutine API yet.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-are-they-useful"&gt;
  &lt;/a&gt;
  Why are they useful?
&lt;/h2&gt;

&lt;p&gt;On an abstract level, the strength of coroutines is to manage state. Since they remember where they left off for the next time they're resumed, they can use control-flow to save state that would otherwise have to be stored in variables.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#animation"&gt;
  &lt;/a&gt;
  Animation
&lt;/h3&gt;

&lt;p&gt;As a simple example, imagine an object in a game. The object has an &lt;code&gt;update&lt;/code&gt; function that will be called repeatedly by the engine, and as an argument, it will receive the time (in seconds) since the last time it was called. This is a very typical setup for simpler games.&lt;/p&gt;

&lt;p&gt;Implementing a simple animation, for example, along the edges of a square, would require storing the animation state in some sort of data-structure so the &lt;code&gt;update&lt;/code&gt; function knows where to continue the animation. Although in this case one &lt;em&gt;might&lt;/em&gt; be able to get away with just &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates (which are likely already present in the object) and some convoluted if/else logic, this code would still look unintuitive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coroutines to the rescue!&lt;/strong&gt; Now consider extending the setup like this:&lt;/p&gt;

&lt;p&gt;Along with the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; attributes, the object also has a &lt;code&gt;behavior&lt;/code&gt; coroutine. The only thing the &lt;code&gt;update&lt;/code&gt; method does, is to resume this coroutine every time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;object.update = delta_time ⇒ resume(object.behavior, delta_time)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;resume&lt;/code&gt;, in this pseudocode language, is the function that resumes a suspended coroutine asymmetrically, meaning it will pause the code here until the resumed coroutine yields.&lt;/p&gt;

&lt;p&gt;For this to work, a bit of extra semantics has to be introduced: Just how functions can have &lt;em&gt;arguments&lt;/em&gt;, it is common that &lt;em&gt;yielding&lt;/em&gt; and &lt;em&gt;resuming&lt;/em&gt; coroutines can also pass arguments along. In the above pseudocode, this will be represented as an extra argument to both &lt;code&gt;resume&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt;, that would be &lt;em&gt;returned&lt;/em&gt; by the matching &lt;code&gt;yield&lt;/code&gt; and &lt;code&gt;resume&lt;/code&gt; calls. This is a very common way to handle passing around data between asymmetric coroutines.&lt;/p&gt;

&lt;p&gt;Now, with this setup, the &lt;code&gt;behavior&lt;/code&gt; coroutine could look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;object.behavior = coroutine( ⇒ {
    while true {
        while object.x &amp;lt; 10
            object.x += yield() * object.speed
        while object.y &amp;lt; 10
            object.y += yield() * object.speed
        while object.x &amp;gt; 0
            object.x -= yield() * object.speed
        while object.y &amp;gt; 0
            object.y -= yield() * object.speed
    }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where &lt;code&gt;coroutine&lt;/code&gt; is a function that takes a subroutine and turns it into a coroutine, without actually starting it and &lt;code&gt;yield&lt;/code&gt; is a function that suspends the current coroutine and yields back to the "parent" coroutine that resumed it.&lt;/p&gt;

&lt;p&gt;It looks a bit like magic. The animation code &lt;em&gt;looks&lt;/em&gt; like it should simply block the game in an endless loop, but it doesn't, because it runs inside a coroutine that yields after every step. But the state of the animation is still represented as a simple nested loop.&lt;/p&gt;

&lt;p&gt;This can be taken a step further though. Consider the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;object.behavior = coroutine ( ⇒ {
    while true {
        object.move_right(10)
        object.move_down(10)
        object.move_left(10)
        object.move_up(10)
    }
})

object.move_right = distance ⇒ {
    while distance &amp;gt; 0
        delta_x = yield() * object.speed
        object.x += delta_x
        distance -= delta_x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This could be refactored into a single &lt;code&gt;move(axis, distance)&lt;/code&gt; function, of course; but the additional code to figure out the direction would clutter the code a bit too much for this example.&lt;/p&gt;

&lt;p&gt;The important thing here is, that the top-level function of the coroutine never &lt;code&gt;yield&lt;/code&gt;s; instead, it calls a &lt;code&gt;move_*&lt;/code&gt; function that takes care of yielding itself. This is where &lt;strong&gt;stackfulnes&lt;/strong&gt; comes into play again: Only &lt;strong&gt;stackful&lt;/strong&gt; coroutines can do this. In languages with stackless coroutines, like javascript, code like this would likely be rejected by the compiler.&lt;/p&gt;

&lt;p&gt;Put very simply: the reason for this is that when &lt;code&gt;move_right&lt;/code&gt; yields, it needs to remember where it needs to return to after it resumes. This information is what's on the stack, so a coroutine without its own stack cannot remember from nested functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#io-event-loops"&gt;
  &lt;/a&gt;
  I/O Event Loops
&lt;/h3&gt;

&lt;p&gt;Another application of coroutines is handling the complexity if asynchronous code. Lua has done this for years now, Ruby recently adopted the same idea, and languages like Elixir have been doing a very similar thing as part of the language for ages.&lt;/p&gt;

&lt;p&gt;But how exactly can coroutines help with this? Simple: by yielding to an event-loop, which will resume them once a certain event happens. While in practice this is a bit more complicated, the core idea is this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All code runs inside coroutines (In some languages this is always the case, in others the framework would have to wrap the user code manually)&lt;/li&gt;
&lt;li&gt;Functions that need to await asynchronous tasks yield from the current coroutine&lt;/li&gt;
&lt;li&gt;When a coroutine yields, a scheduler will decide what coroutine to resume next, or simply sleep until any new "event" is available.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This should sound very familiar to anybody who has worked with &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; before. It is a very similar concept. Then only difference is that functions are always synchronous, and all functions are implicitly awaited.&lt;/p&gt;

&lt;p&gt;This has one significant advantage: While the program itself either uses non-blocking IO or APIs that resume it whenever any of the awaited inputs is available, the user writes codes that &lt;em&gt;looks&lt;/em&gt; like blocking code. And it is in fact "blocking", on the level of the coroutine, but will never block other parts  of the same program.&lt;/p&gt;

&lt;p&gt;At the same time, this is still cooperative multi-threading, so no section of code will be interrupted from the outside. Only operations that yield can lead to race-conditions, but two consecutive non-yielding operations will never have their state messed with in between.&lt;/p&gt;

&lt;p&gt;This makes unsafe code much easier to spot:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;c = global(counter)
c = c + 1
global(counter) = c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code is very obviously safe, because the code will never be suspended for other code to run in the meantime.&lt;/p&gt;

&lt;p&gt;In a multi-threaded environment, this code could lead to errors: the scheduler could suspend this thread after the first line, and some other thread could increment the counter. Then, when this thread was resumed, the third line would overwrite the &lt;code&gt;counter&lt;/code&gt; variable with an old value.&lt;/p&gt;




&lt;p&gt;With coroutines, it is still possible to write buggy code susceptible to race-conditions, but only by explicitly yielding, or calling a function that does so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;c = global(counter)
c = c + 1
sleep(3)
global(counter) = c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code is obviously unsafe: in the 3 seconds that this coroutine is sleeping, some other code may also increment the counter, which would then be overwritten by this coroutine after it resumes.&lt;/p&gt;

&lt;p&gt;However, we can safely assume that the code will &lt;em&gt;never&lt;/em&gt; be interrupted between the first and the second line, or even worse, in between two steps of the same line.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There is, of course, lots more to be said about coroutines, and how they a reintegrated in different languages. But this introduction should give a good enough idea of how they fundamentally work.&lt;/p&gt;

&lt;p&gt;Was anything unclear? Do you have questions, or want to add something? Leave a comment! 👍&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>coroutines</category>
      <category>parallelism</category>
    </item>
    <item>
      <title>Django Cookie-Cutter - Material Dashboard</title>
      <author>Sm0ke</author>
      <pubDate>Sat, 20 Nov 2021 10:43:50 +0000</pubDate>
      <link>https://dev.to/sm0ke/django-cookie-cutter-material-dashboard-2l1m</link>
      <guid>https://dev.to/sm0ke/django-cookie-cutter-material-dashboard-2l1m</guid>
      <description>&lt;p&gt;Hello Coders! &lt;/p&gt;

&lt;p&gt;This article explains how to generate a simple &lt;strong&gt;Django Dashboard&lt;/strong&gt; using &lt;a href="https://blog.appseed.us/django-cookie-cutter-generator/"&gt;Cookiecutter&lt;/a&gt;, a well-known command-line utility that creates projects from project templates.  The customization process allows choosing the project name, database type, and other related information like project name, version and support email (if any).  For newcomers, &lt;strong&gt;Django&lt;/strong&gt; is a leading web framework created and actively supported by experienced developers using a batteries-included concept.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://django-material-dashboard.appseed-srv1.com/"&gt;Django Material Dashboard&lt;/a&gt; - preview the generated project&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/app-generator/cookiecutter-django"&gt;Django Cookie-Cutter&lt;/a&gt; - the generator sources&lt;/li&gt;
&lt;li&gt;✨ For &lt;code&gt;support&lt;/code&gt; via &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt; join &lt;code&gt;AppSeed&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  ✨ How it Works
&lt;/h2&gt;

&lt;p&gt;To start fast and generate a new project the workstation should have a minimal toolchain used by the generator: &lt;strong&gt;Python3&lt;/strong&gt;, &lt;strong&gt;GIT&lt;/strong&gt;, and (optional) a modern code editor like &lt;code&gt;VsCode&lt;/code&gt; or &lt;code&gt;Atom&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👉 &lt;strong&gt;Step #1&lt;/strong&gt; - Create a &lt;code&gt;virtual environment&lt;/code&gt; for dependencies&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 &lt;strong&gt;Step #2&lt;/strong&gt; - Install Modules&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;cookiecutter
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;GitPython 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 &lt;strong&gt;Step #3&lt;/strong&gt; -  Generate the project&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cookiecutter https://github.com/app-generator/cookiecutter-django.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;console output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; project_name &lt;span class="o"&gt;[&lt;/span&gt;Django Seed project]: Django Material
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; project_slug &lt;span class="o"&gt;[&lt;/span&gt;django_material]:
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; description &lt;span class="o"&gt;[&lt;/span&gt;A simple Django project]:
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; author_name &lt;span class="o"&gt;[&lt;/span&gt;AppSeed]:
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; domain_name &lt;span class="o"&gt;[&lt;/span&gt;example.com]:
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; email &lt;span class="o"&gt;[&lt;/span&gt;appseed@example.com]:
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; version &lt;span class="o"&gt;[&lt;/span&gt;0.0.1]:
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Select theme:
1 - volt
2 - soft-ui
3 - datta-able
4 - material-dashboard
Choose from 1, 2, 3, 4 &lt;span class="o"&gt;[&lt;/span&gt;1]: 4       &amp;lt;&lt;span class="nt"&gt;----&lt;/span&gt; SELECT the Material Design
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Select database:
1 - sqlite3
2 - mysql
3 - postgresql
Choose from 1, 2, 3 &lt;span class="o"&gt;[&lt;/span&gt;1]:
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; database_name &lt;span class="o"&gt;[&lt;/span&gt;appseed_django]:
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; database_user &lt;span class="o"&gt;[&lt;/span&gt;appseed_user]:
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; database_pass &lt;span class="o"&gt;[&lt;/span&gt;Pass1234]:
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; PRE Gen hook executed
 Cloning theme: &amp;lt;material-dashboard&amp;gt;, REPO: https://github.com/app-generator/django-dashboard-material.git
 ...done
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; POST Gen hook executed
 &lt;span class="k"&gt;***&lt;/span&gt; Copy assets
 ...done
 &lt;span class="k"&gt;***&lt;/span&gt; Copy templates
 ...done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the process is finished, we can change the directory inside the generated sources and use &lt;strong&gt;Docker&lt;/strong&gt; to start the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django_material
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, the app should be accessible in the browser at the address &lt;code&gt;http://localhost:85&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HKA4PthI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqfxmj05hnh4cflxoko7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HKA4PthI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqfxmj05hnh4cflxoko7.png" alt="Django Cookie-Cutter Material - Login Page." width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;✨ Django Cookie-Cutter - Dashboard Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4PfPDDyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ztj14z8ujoa79b3bvjk0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4PfPDDyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ztj14z8ujoa79b3bvjk0.png" alt="Django Cookie-Cutter Material - Dashboard Page." width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;✨ Django Cookie-Cutter - VR page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y8Cl2lMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y1juyd7dygzlz7ep33yp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y8Cl2lMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y1juyd7dygzlz7ep33yp.png" alt="Django Cookie-Cutter Material - VR Page." width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;👉 More &lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Free Dashboards&lt;/a&gt; - a curated list&lt;/li&gt;
&lt;li&gt;👉 More &lt;a href="https://appseed.us/django"&gt;Django Starters&lt;/a&gt; - dashboards and apps&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>django</category>
      <category>cookiecutter</category>
      <category>webdev</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
