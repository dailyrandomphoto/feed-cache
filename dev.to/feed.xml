<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Clean up your HTML with ES6 Modules.</title>
      <author>Moussa</author>
      <pubDate>Sun, 25 Apr 2021 14:46:44 +0000</pubDate>
      <link>https://dev.to/muhammedmoussa/clean-up-your-html-with-es6-modules-4857</link>
      <guid>https://dev.to/muhammedmoussa/clean-up-your-html-with-es6-modules-4857</guid>
      <description>&lt;p&gt;if you are that person who is working with the web regardless of the role how you doing it, maybe for your WordPress site, a simple static website or you are a backend or full-stack developer and working with Javascript inside HTML files with code in  tags, so this post for you.&lt;/p&gt;

&lt;p&gt;Modularity is one of the main factors of any solid software to make it more efficient, reusable, and maintainable. if you are coming from any programming language you probably know about modules or classes sharing ways &lt;code&gt;import&lt;/code&gt;, &lt;code&gt;module&lt;/code&gt;, &lt;code&gt;use&lt;/code&gt;, &lt;code&gt;#include&lt;/code&gt; etc. &lt;/p&gt;

&lt;p&gt;But when it comes to JavaScript this language that written inside a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in HTML file bunch of people thinking about just doing the job making some animation or add a third-party plugin to the website with zero modularity consideration and crowdy HTML files, so let's get started! 🔥&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o7TKUM3IgJBX2as9O/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o7TKUM3IgJBX2as9O/giphy.gif" alt="GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-html-file-looks"&gt;
  &lt;/a&gt;
  How HTML file looks
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;// function doAnimationForMe() {}&lt;/span&gt;
        &lt;span class="c1"&gt;// function doScrollToTopForMe()&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;// function doFirebaseIntegrationForMe() {}&lt;/span&gt;
        &lt;span class="c1"&gt;// function danceWithMe()&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let's focus on &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; content only, and imaging &lt;code&gt;DRY&lt;/code&gt; some of these little functions on multiple &lt;code&gt;HTML&lt;/code&gt; files and think about &lt;code&gt;HTML&lt;/code&gt; file length one last imaging if you want to update something or doing another dance so yeah here we go and will work through all &lt;code&gt;HTML&lt;/code&gt; pages again over and over.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/VwwKdq5NV0nwQ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/VwwKdq5NV0nwQ/giphy.gif" alt="GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-javascript-module"&gt;
  &lt;/a&gt;
  Creating Javascript module
&lt;/h1&gt;

&lt;p&gt;Yes, that's possible, js will not fight you, with newly introduced &lt;code&gt;ES6&lt;/code&gt; keywords &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; you can encapsulate the module. regardless of the other benefits of working with modules. so now we are just focused on making the &lt;code&gt;HTML&lt;/code&gt; file more cleaner.&lt;/p&gt;

&lt;p&gt;As example lets grap &lt;code&gt;doAnimationForMe()&lt;/code&gt; from the &lt;code&gt;HTML&lt;/code&gt; file, and create &lt;code&gt;animation.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ..... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ..... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doAnimationForMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;same code from the &lt;code&gt;HTML&lt;/code&gt; file but in an isolated, manipulated, and reusable zone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o6UBhjHobLFgEmrJu/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6UBhjHobLFgEmrJu/giphy.gif" alt="GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#modules-export-and-import"&gt;
  &lt;/a&gt;
  Modules Export and Import
&lt;/h1&gt;

&lt;p&gt;Great its a time to making our pretty code modular ready. there are variant ways of &lt;code&gt;export&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;named&lt;/code&gt;, and &lt;code&gt;aggregation&lt;/code&gt;. let's find out. another feature of the module if we planning to use this &lt;code&gt;doAnimationForMe()&lt;/code&gt; at another js files or only include this module to the &lt;code&gt;HTML&lt;/code&gt; page that we can export all functions in the file or just &lt;code&gt;doAnimationForMe()&lt;/code&gt; function only. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;let's start with the &lt;strong&gt;Named&lt;/strong&gt; export
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ..... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ..... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doAnimationForMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in this way all animation staff exported can be imported later. another tip if you plan to export multiple stuff from one module,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ..... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ..... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doAnimationForMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;doAnimationForMe&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// shorthand for {start: start, end: end, doAnimationForMe}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;also can export only &lt;code&gt;doAnimationForMe()&lt;/code&gt; function and make the module more logical, just flag desired part by &lt;code&gt;export&lt;/code&gt; or follow the export object tip.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Code......
export {doAnimationForMe}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another &lt;em&gt;tip&lt;/em&gt;: since we are talking about the named &lt;code&gt;export&lt;/code&gt; we can also cast names, till now if we will &lt;code&gt;import&lt;/code&gt; &lt;code&gt;doAnimationForMe&lt;/code&gt; we have to use the same name &lt;code&gt;doAnimationForMe&lt;/code&gt; or will cause an error. for rename exported part:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;doAnimationForMe&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;useAnimation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let's create another pseudo module sample that gets data from API then applying some animation, for the whole picture drawing, creating an &lt;code&gt;api.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/item&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAllItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#module-import-and-reuse"&gt;
  &lt;/a&gt;
  Module import and reuse
&lt;/h1&gt;

&lt;p&gt;Yeah, let's have some fun and put it all together creating an &lt;code&gt;app.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;doAnimationForMe&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./animation.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// The relative path.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getAllItems&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./api.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// The relative path.&lt;/span&gt;

&lt;span class="c1"&gt;// Another Code...&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderUi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Render items in the ui&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Handle the error&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getAllItems&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;renderUi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;doAnimationForMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;handleError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getAllItems&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#adding-module-into-raw-html-endraw-page"&gt;
  &lt;/a&gt;
  Adding Module into &lt;code&gt;HTML&lt;/code&gt; page
&lt;/h1&gt;

&lt;p&gt;it's the time to cleanup the &lt;code&gt;HTML&lt;/code&gt; file and include only our encapsulated module, with only one line consider relative paths also :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Code... --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Code... --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The difference is clear now how clean it our &lt;code&gt;HTML&lt;/code&gt; but, for the first time properly you will get a nice error!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Uncaught SyntaxError: Cannot use import statement outside a module
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o751YNpKVoKx24UYU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o751YNpKVoKx24UYU/giphy.gif" alt="GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Actually no. it's the trick not kidding but we have to include one last attribute to our &lt;code&gt;script&lt;/code&gt; tag which is the &lt;code&gt;type="module"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;so after a little update, the code will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the error will go and now we can confirm that our modules all loaded into the &lt;code&gt;HTML&lt;/code&gt; page by checking the network tab: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zvhOzSs5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HAS5J40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zvhOzSs5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HAS5J40.png" alt="Network tab image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;for further reading and it's very important also to check the browser compatibility for this feature with your project or the client devices.&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"&gt;JavaScript Modules -MDN&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;another way to doing the same job is  &lt;strong&gt;default export&lt;/strong&gt;
there is no much difference but just in case you don't care about names and want to &lt;code&gt;export&lt;/code&gt; some functionality from the module without a specific name in &lt;code&gt;import&lt;/code&gt;, it also's good to avoid naming errors. let's see the same example but in &lt;strong&gt;default export&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;animation.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ..... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ..... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doAnimationForMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;api.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/item&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAllItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;getAllItems&lt;/span&gt;
&lt;span class="c1"&gt;// same but, in another way...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the most interesting part here at &lt;code&gt;import&lt;/code&gt; in &lt;code&gt;app.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;doAnimation&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./animation.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;kofta&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./api.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Another Code...&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderUi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Render items in the ui&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Handle the error&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;kofta&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;renderUi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;doAnimation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;handleError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getAllItems&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;that's will do the same job but in a simplified way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/LlEc7uMgbIiECNK4ce/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/LlEc7uMgbIiECNK4ce/giphy.gif" alt="GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consolusion"&gt;
  &lt;/a&gt;
  Consolusion
&lt;/h2&gt;

&lt;p&gt;The goal of this post is to simplify working with modules also encouraging you to write clean &lt;code&gt;HTML&lt;/code&gt; pages focused only on markup, and keep &lt;code&gt;JavaScript&lt;/code&gt; files isolated too like &lt;code&gt;CSS&lt;/code&gt; with the benefit of modularity at the functionality code on your website. &lt;code&gt;ES6&lt;/code&gt; &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; also have a bunch of tips and tricks that's can make life easier also the third way mentioned before &lt;code&gt;aggregation&lt;/code&gt; export. I just mentioned some basics.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>codequality</category>
    </item>
    <item>
      <title>What **is** Git? 🤷🏼‍♀️</title>
      <author>JavaScript➕Coffee🚀</author>
      <pubDate>Sun, 25 Apr 2021 14:21:23 +0000</pubDate>
      <link>https://dev.to/javascriptcoff1/what-is-git-4pmh</link>
      <guid>https://dev.to/javascriptcoff1/what-is-git-4pmh</guid>
      <description>&lt;p&gt;Git is an extremely useful tool for developers. It is also quite abstract and tricky to learn.&lt;br&gt;
I learned about git by reading, watching videos, viewing images, and trying out using it.&lt;br&gt;
I've highlighted some of my favourite resources at the bottom of this article.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#the-general-idea"&gt;
  &lt;/a&gt;
  The general idea:
&lt;/h4&gt;

&lt;p&gt;Have you ever worked on something, maybe an essay for school etc, where you were undecided about how you wanted the intro  to be, so you made:&lt;/p&gt;

&lt;p&gt;essayintro1.doc&lt;br&gt;
essayintro2.doc&lt;br&gt;
essayintro3.doc&lt;br&gt;
essayconclude1.doc&lt;/p&gt;

&lt;p&gt;and so on...&lt;/p&gt;

&lt;p&gt;Maybe you tested out parts of the essay in this way and then put all of your final thoughts together in:&lt;/p&gt;

&lt;p&gt;essayMAIN.doc&lt;/p&gt;

&lt;p&gt;This is essentially version control, and although messy, it works for 1 person...&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem:
&lt;/h4&gt;

&lt;p&gt;Now imagine that you had multiple people writing and making edits on this essay...this would get very confusing very quickly and it would be pretty impossible to ever finish the essay (project)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#git-saves-the-day"&gt;
  &lt;/a&gt;
  Git saves the day
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;"Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A Version Control System is an invisible system that holds copies of your files and records changes so you can switch back to a previous version. It also means that you can work together with two or more people on a document and you won't save over each other's work.&lt;/p&gt;

&lt;p&gt;With large codebases such as those needed for organizations or product-building companies, there are inevitable issues that trying to keep track of changes, proposals or bugs would cause when multiple people are trying to work on it.&lt;br&gt;
Imagine trying to build a house with 40 other people while blindfolded and with no communication. The likelihood is that you would end up crashing into each other, you'd build over other people's work and you'd probably break stuff...&lt;/p&gt;

&lt;p&gt;A version control system such as Git means that you can keep track of changes and do your own work on your own &lt;code&gt;branch&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#branch"&gt;
  &lt;/a&gt;
  Branch?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Imagine Git as like a tree&lt;/strong&gt; * ...&lt;/p&gt;

&lt;p&gt;*The metaphor of git as a 'tree' is an abstraction to help some people visualize, but also it can be thought of as different versions of a file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_CBRslo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y5c8fb2q0cpmrchkecw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_CBRslo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y5c8fb2q0cpmrchkecw.jpeg" alt="A tree with thick branches"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main trunk of the tree is called the &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;master&lt;/code&gt; branch, and this should always be the &lt;strong&gt;source of truth&lt;/strong&gt; of the code; the production-ready, correct, and most up-to-date version. You can create a branch from the main branch, which means that you have created a copy of whatever is on the main branch.&lt;br&gt;
Now you can make changes to your &lt;em&gt;own&lt;/em&gt; branch as if you've put tracing paper over the original code. Now you can make the changes you want to that code with no worry about breaking anything. You can test the code like this in a &lt;em&gt;dev environment&lt;/em&gt;. When you are happy with the changes you have made, you can &lt;em&gt;merge&lt;/em&gt; your branch back into the main branch. If you are collaborating on a project rather than working on your own, this is done via a PR, or Pull Request. Merging your branch means that Git puts all of your changes back into the original branch - now your changes are on the main branch! You've put your version into the codebase and now your new changes or updates are possibly in production (live!)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-three-states"&gt;
  &lt;/a&gt;
  The three states
&lt;/h2&gt;

&lt;p&gt;There are actually three 'trees', or states of git, used for creating and retrieving commits (saves):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the working directory&lt;/li&gt;
&lt;li&gt;the index&lt;/li&gt;
&lt;li&gt;something called "HEAD" for creating and retrieving commits.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#the-working-directory"&gt;
  &lt;/a&gt;
  The working directory
&lt;/h4&gt;

&lt;p&gt;Files whose content you can change are in your &lt;em&gt;working directory&lt;/em&gt;. These are the files that you are able to put into your code editor and make changes to. The &lt;em&gt;working directory&lt;/em&gt; represents a particular &lt;code&gt;commit&lt;/code&gt; (save) and is the version that &lt;code&gt;HEAD&lt;/code&gt; is pointing at.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#the-index"&gt;
  &lt;/a&gt;
  The index
&lt;/h4&gt;

&lt;p&gt;Also called the staging area, the cache, the staged cache, stages files or directory cache...&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;index&lt;/em&gt; can be seen as an area to store your drafts, or an area that you can see all of your changes and choose which files you want to &lt;code&gt;commit&lt;/code&gt; to your repo. It's a holding area for your changes&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#head"&gt;
  &lt;/a&gt;
  HEAD
&lt;/h4&gt;

&lt;p&gt;The HEAD is a reference point that shows you &lt;em&gt;where you are&lt;/em&gt; along your commit line. It points to the currently checked out branch and to the last file that you committed (saved) onto that branch. This means that it frequently changes (and can be hard to keep track of...leading to a &lt;code&gt;detached HEAD&lt;/code&gt; state - more on this later 🧟‍♀️)&lt;/p&gt;

&lt;p&gt;The flow of updating the main branch in a git repository would be like this:&lt;/p&gt;

&lt;p&gt;1.Make a new branch from main and switch to the new branch&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; Some-new-changes!
// Switched to a new branch &lt;span class="s2"&gt;"Some-new-changes!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.Make your changes&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l-a9Rj1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/webdikcyl1plplb8w7gl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l-a9Rj1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/webdikcyl1plplb8w7gl.png" alt="Github desktop showing some changes on a "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;code&gt;Add&lt;/code&gt; your changed files to the index (your draft area)&lt;/p&gt;

&lt;p&gt;4.&lt;code&gt;Commit&lt;/code&gt; your changed files with a message about what you did&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"commit message"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5.&lt;code&gt;Push&lt;/code&gt; your changes to your branch&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;6.Happy with your changes and checked everything? Create a Pull Request detailing what changes you've made.&lt;/p&gt;

&lt;p&gt;7.When your PR is accepted, this means that your changes have been &lt;code&gt;merged&lt;/code&gt; into the main files of the project.&lt;/p&gt;

&lt;p&gt;The HEAD would move through points 1-4 here in turn and follows around what you are doing.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#detached-head"&gt;
  &lt;/a&gt;
  😱 Detached HEAD 💀
&lt;/h4&gt;

&lt;p&gt;This sounds like a ⚠️horrific error⚠️ and pretty terrible.&lt;br&gt;
I'm here to tell you it's not.&lt;br&gt;
In fact, it is sometimes necessary to use this state to test out a feature.&lt;br&gt;
Say you suddenly think of a different way that you could have solved something, or a different idea entirely that you could have approached your change or addition...if only you could go back in time to a few commits ago to test your new theory out...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What you need is a time machine&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can't have a time machine, but what you can do is point your HEAD marker to a few commits ago (via the hash of the commit), or whenever you want to start testing your new idea and create a &lt;em&gt;temporary branch&lt;/em&gt; to use. With a detached HEAD, the changes do not belong to any specific branch and so you need to be careful that you don't lose your changes if you want to keep your new work.&lt;br&gt;
The easiest way to get to a detached HEAD state is to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout &amp;lt;the commit SHA&lt;span class="o"&gt;(&lt;/span&gt;abcdef123&lt;span class="o"&gt;)&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TL;DR: Detached HEAD state is sometimes used if you want to make experimental changes to an earlier commit. Not a horrific error. Don't panic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recommended-resources"&gt;
  &lt;/a&gt;
  Recommended resources
&lt;/h3&gt;

&lt;p&gt;I'm not affiliated with these links or resources in any way, but I found them useful in my own learning journey.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=USjZcfj8yxE"&gt;Real-life references Youtube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.git-tower.com/learn/git/faq/detached-head-when-checkout-commit/"&gt;Detached HEAD explanation and examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.atlassian.com/git/tutorials/saving-changes/git-commit"&gt;Command line git messages reminder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Interaction between Vue JS Webview and native Apps</title>
      <author>Alessandro Valenti</author>
      <pubDate>Sun, 25 Apr 2021 14:07:33 +0000</pubDate>
      <link>https://dev.to/alexiey91/interaction-between-vue-js-webview-and-native-apps-15e2</link>
      <guid>https://dev.to/alexiey91/interaction-between-vue-js-webview-and-native-apps-15e2</guid>
      <description>&lt;p&gt;Hi everybody! I want to show you how to implement a simple interaction between VueJs webview and native Apps and vice-versa.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;During my job I need to create some webview and make some interaction with native &lt;em&gt;Android&lt;/em&gt; and &lt;em&gt;iOS&lt;/em&gt; App.&lt;/p&gt;

&lt;p&gt;I did it with some &lt;strong&gt;javascript function&lt;/strong&gt; to send some message and manage it to make some operation.&lt;br&gt;
During this article, we develop an interaction to open native Camera and comeback from native app to webview.&lt;br&gt;
The javascript function that we develop is it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;openCamera&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pictureAcquired&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let's start.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#web-view-vue-js"&gt;
  &lt;/a&gt;
  Web view  Vue Js
&lt;/h2&gt;

&lt;p&gt;Before we start you need to install Vue Js on your environment, I advise seeing the documentation at this site &lt;a href="https://cli.vuejs.org/"&gt;VueJs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After that we can create our project with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vue create webview
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can start to create our application.&lt;/p&gt;

&lt;p&gt;Here an example of the &lt;code&gt;MyWebview&lt;/code&gt; component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;  &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;Webview&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Response&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn btn-expand btn-primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next()&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Open&lt;/span&gt; &lt;span class="nx"&gt;Camera&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;appService&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../appService.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MyWebview&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="dl"&gt;""&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="nx"&gt;pictureAcquired&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;msg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;appService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;openCamera&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; 
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="nl"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msgNew&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msgOld&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new: %s, old: %s&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msgNew&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msgOld&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;beforeMount&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;//Create interface between Webview and Native application&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MyWebview&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;pictureAcquired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pictureAcquired&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scoped&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;attribute&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="nx"&gt;CSS&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="nx"&gt;only&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;  &lt;span class="nx"&gt;scoped&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;h3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;inline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="nx"&gt;b983&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/style&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first operation is add this method that native app Android or IOS can invoked to send some data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;beforeMount&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MyWebview&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;pictureAcquired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pictureAcquired&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's important to create a page inside a javascript window with the name of the component that you want to link with a native app and add the function for the interaction. Note that it's important to add this event during &lt;strong&gt;beforeMount()&lt;/strong&gt; VueJs lifecycle because it is necessary to expose it before the creation of components inside the webview.&lt;br&gt;
This operation is not enough we need to create an interface inside a javascript file and import it inside the index.html file. We call it &lt;strong&gt;native.js&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;  &lt;span class="nx"&gt;nativeApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt;  &lt;span class="nx"&gt;pictureAcquired&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MyWebview&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pictureAcquired&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE  html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt;  &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt;  &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt;  &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt;  &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt;  &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt;  &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width,initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;  &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt;  &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%= BASE_URL %&amp;gt;favicon.ico"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;htmlWebpackPlugin.options.title&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script  &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;  &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%= BASE_URL %&amp;gt;external_resource/native.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- built files will be auto injected --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that i you want to create an interaction from webview to native app you need to define a method inside the VueJs component that invoked a method inside &lt;strong&gt;appService.js&lt;/strong&gt; file like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt;  &lt;span class="kd"&gt;function&lt;/span&gt;  &lt;span class="nx"&gt;openCamera&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;openCamera&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// Call to Android App&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeApp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;funnelReady&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// Call to IOS App&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webkit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webkit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;messageHandlers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webkit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;messageHandlers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeApp&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webkit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;messageHandlers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;openCamera&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}});&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;openCamera()&lt;/strong&gt; define two types of interaction with Android and IOS native device because these two Operating Systems have a different interaction with webview. Everybody had the same connection point the name of javascript interface that defines the interaction point between webview and native app. This interface in this example is &lt;strong&gt;nativeApp&lt;/strong&gt; but it should be named as you want but it must be the same inside the native Application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;p&gt;Now we can test our application and enjoy it.&lt;br&gt;
So we can start the application with simple npm command on the projects main root :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that  inside the browser console we can see&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;openCamera&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So our application calls the native app javascript and function.&lt;br&gt;
Now we can emulate the response of the native application typing inside the browser console this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;pictureAcquired&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pictureAcquired&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that our application print on the browser console the changes of watcher:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Picture&lt;/span&gt; &lt;span class="nx"&gt;acquired&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;old&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you can enjoy this article.&lt;br&gt;
Special credits to my job mates for some bits of advice.&lt;/p&gt;

&lt;p&gt;For extra code information here are the link to the  &lt;a href="https://github.com/alexiey91/Mywebview"&gt;repository&lt;/a&gt; with the &lt;strong&gt;VueJS&lt;/strong&gt; project and an example of an Android application to test it.&lt;/p&gt;

&lt;p&gt;What are your opinions/advice?&lt;/p&gt;

</description>
      <category>vue</category>
      <category>android</category>
      <category>ios</category>
      <category>webview</category>
    </item>
    <item>
      <title>8 Amazing API For Your  Project
</title>
      <author>Nikhil Bobade </author>
      <pubDate>Sun, 25 Apr 2021 14:02:14 +0000</pubDate>
      <link>https://dev.to/nikhil27b/8-amazing-api-for-your-project-21ph</link>
      <guid>https://dev.to/nikhil27b/8-amazing-api-for-your-project-21ph</guid>
      <description>&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;How are you all Today I have written this post about the 8 amazing API every developer know there are in this many APIs are free &amp;amp; easy to use also you will behave fun when you are using this APIs. I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Chuck Norris JOKE API&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://api.chucknorris.io/"&gt;https://api.chucknorris.io/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--boWCUljS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ytvu8d5gi8qsfp5jeq3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--boWCUljS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ytvu8d5gi8qsfp5jeq3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pokemon API For Fun.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://pokeapi.co/"&gt;https://pokeapi.co/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pDslJObH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cu9fkytx7o0m2kdp434f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pDslJObH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cu9fkytx7o0m2kdp434f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Food API.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.themealdb.com/api.php"&gt;https://www.themealdb.com/api.php&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yYYG52S_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1sj88r963jkilgb3bsm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yYYG52S_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1sj88r963jkilgb3bsm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Marvel API.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://developer.marvel.com/"&gt;https://developer.marvel.com/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lBiMcr8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wx7m69wghb6o4yek1tp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lBiMcr8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wx7m69wghb6o4yek1tp1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.Github API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://api.github.com"&gt;https://api.github.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x7VoYLY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cix7tz3byftgyghgd5om.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x7VoYLY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cix7tz3byftgyghgd5om.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6.Openweather API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://openweathermap.org/"&gt;https://openweathermap.org/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FTeuOnY3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32r20k5ihidu5ej2kp42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FTeuOnY3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32r20k5ihidu5ej2kp42.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7.Google Map API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/maps/"&gt;https://developers.google.com/maps/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0aCz5wNN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv8kf670uo6nmp65itu0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0aCz5wNN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv8kf670uo6nmp65itu0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7.Covid19 API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://api.covid19api.com/"&gt;https://api.covid19api.com/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The last one is very important also For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to more support me then buy me a &lt;a href="https://www.buymeacoffee.com/nikhilbobade27"&gt;coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Why Svelte is different - and awesome!</title>
      <author>Jannik Wempe</author>
      <pubDate>Sun, 25 Apr 2021 14:00:56 +0000</pubDate>
      <link>https://dev.to/jannikwempe/why-svelte-is-different-and-awesome-4381</link>
      <guid>https://dev.to/jannikwempe/why-svelte-is-different-and-awesome-4381</guid>
      <description>&lt;p&gt;&lt;em&gt;Just to get this out of the way in the beginning:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is not meant to be bashing other frameworks like React, Vue or Angular. I used all of them and React (using NextJS) is mostly still my go-to.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-svelte"&gt;
  &lt;/a&gt;
  What is Svelte?
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Svelte is a radical new approach to building user interfaces. Whereas traditional frameworks like React and Vue do the bulk of their work in the browser, Svelte shifts that work into a &lt;strong&gt;compile step&lt;/strong&gt; that happens when you build your app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;TLDR;&lt;br&gt;
its like React or Vue, but with the main difference that it is &lt;a href="https://svelte.dev/blog/frameworks-without-the-framework"&gt;a compiler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is a quote in the blog article linked above:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Wait, this new framework has a runtime? Ugh. Thanks, I'll pass.&lt;/p&gt;

&lt;p&gt;– front end developers in 2018&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even though this didn't happen in 2018, I think we'll get to that mindset at some point.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-does-svelte-is-a-compiler-mean"&gt;
  &lt;/a&gt;
  What does "Svelte is a compiler" mean?
&lt;/h2&gt;

&lt;p&gt;It essentially means that Svelte-specific code gets compiled (think about transformed) to JavaScript, which is executable by the browser.&lt;/p&gt;

&lt;p&gt;Another compiler you might know is the TypeScript compiler (&lt;code&gt;tsc&lt;/code&gt;), which compiles TypeScript to JavaScript. It's the same concept.&lt;/p&gt;

&lt;p&gt;So what is the deal? You can also write React code an &lt;code&gt;.js&lt;/code&gt; and ship it. That is true, BUT that JavaScript code does not work in the browser without shipping the React runtime system as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A runtime system refers to the collection of software and hardware resources that enable a software program to be executed on a computer system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Note: Even though I a lot of people are talking about "(no) runtime", it should more accuratly be "(no) runtime **system&lt;/em&gt;&lt;em&gt;".&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Read the great &lt;a href="https://overreacted.io/react-as-a-ui-runtime/"&gt;React as a UI Runtime&lt;/a&gt; blog post from &lt;a href="https://mobile.twitter.com/dan_abramov"&gt;Dan Abramov&lt;/a&gt;. It explains React being a runtime (system) in depth.&lt;/p&gt;

&lt;p&gt;There is also another benefit besides not required a runtime. Svelte could extend and change the JavaScript syntax, because the Compiler compiles it the JavaScript in the end. Therefore Svelte could get rid of some limitations provided by JavaScript syntax.&lt;/p&gt;

&lt;p&gt;This could also be a downside, because if Svelte would strongly deviate from JavaScript syntax, it would essentially become another language to learn. No worries, Svelte tries to stick to the JavaScript Syntax.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#benefits-resulting-from-svelte-being-a-compiler"&gt;
  &lt;/a&gt;
  Benefits resulting from Svelte being a compiler
&lt;/h1&gt;

&lt;p&gt;Since Svelte is a compiler and therefore does not require a runtime system to be loaded into the client, there are several advantages. These are what make Svelte special. The most important advantages that came to my mind are shown in the next sections.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;p&gt;This one should be obvious: No runtime to load for the client results in faster load times.&lt;/p&gt;

&lt;p&gt;The following image shows an excerpt of a JS framework benchmark (see &lt;a href="https://github.com/krausest/js-framework-benchmark"&gt;this GitHub repo&lt;/a&gt;). It's based on a large table with randomized entries and measures the time for various operations including rendering duration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zUeXmMxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619355158508/Olvdi5zOk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zUeXmMxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619355158508/Olvdi5zOk.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The app using Svelte ships the lowest amout of code. &lt;em&gt;(Somehow Svelte seems to require less code than vanilla JS, I have no clue how that could happen 😅)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But it not only ships less code to the client, but also executes faster:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I3wT_8Vc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619355565050/accrTZHyr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I3wT_8Vc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619355565050/accrTZHyr.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the reasons for this is that Svelte does not use a virtual DOM (vDOM). Svelte does not rely on the diff between vDOM and DOM to update the DOM. The other mentioned frameworks like React, Vue and Angular do use the vDOM. You can rad details about this in the Sveltes blog post &lt;a href="https://svelte.dev/blog/virtual-dom-is-pure-overhead"&gt;Virtual DOM is pure overhead&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A quick quote from that post:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Svelte is a compiler that knows &lt;strong&gt;at build time&lt;/strong&gt; how things could change in your app, rather than waiting to do the work at run time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#svelte-in-a-microfrontend-architecture"&gt;
  &lt;/a&gt;
  Svelte in a Micro-Frontend Architecture
&lt;/h2&gt;

&lt;p&gt;Micro-Frontends (MFEs) are a topic in itself (read about it in &lt;a href="https://martinfowler.com/articles/micro-frontends.html"&gt;this article&lt;/a&gt; proved by &lt;a href="https://twitter.com/martinfowler"&gt;Martin Fowler&lt;/a&gt;). But the concept is basically that different teams can separately develop distinct parts of the frontend. Teams can also choose the tech stack they want to use. Therefore the client could end up loading different versions of Angular, Vue, React etc.:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some micro frontend implementations can lead to duplication of dependencies, &lt;em&gt;increasing the number of bytes our users must download&lt;/em&gt;. &lt;br&gt;
&lt;em&gt;(from Martin Fowler article linked above)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But what about Svelte? Svelte (also using different versions of it) does not come with the downside of increasing the kbs a client has to load. &lt;/p&gt;

&lt;p&gt;Svelte is an awesome choice for MFE Architecture.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#other-benefits"&gt;
  &lt;/a&gt;
  Other benefits
&lt;/h1&gt;

&lt;p&gt;These benefits do not result from Svelte being a compiler, but they make Svelte stand out anyways.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#repl"&gt;
  &lt;/a&gt;
  REPL
&lt;/h2&gt;

&lt;p&gt;Svelte has an awesome REPL. You can start playing around and try out things without any effort. This is awesome! &lt;a href="https://svelte.dev/repl/hello-world?version=3.37.0"&gt;Try it out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also see the compiled JS and outputted CSS (it can be written in the same &lt;code&gt;.svelte&lt;/code&gt; file) by clicking on "JS Output" or "CSS Output" respectively.&lt;/p&gt;

&lt;p&gt;Is this evidence enough that Svelte is a compiler? 😉&lt;/p&gt;

&lt;p&gt;The REPL is used in their awesome tutorial as well. You can learn Svelte hands on: &lt;a href="https://svelte.dev/tutorial/basics"&gt;Svelte tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#builtin-features"&gt;
  &lt;/a&gt;
  Builtin features
&lt;/h2&gt;

&lt;p&gt;Svelte has some features built in that you need in almost any app anyways (at least larger ones), like transitions, animations and a store. No need for an additional dependency or the decision between various choices in the first place.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A store is simply an object with a subscribe method that allows interested parties to be notified whenever the store value changes.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. You can import &lt;code&gt;count&lt;/code&gt; and &lt;code&gt;increment&lt;/code&gt; accross your app. Simple!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svelte.dev/tutorial/writable-stores"&gt;Try out Svelte store tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Animations and transitions in Svelte are easy to use. Can you guess what the following code is doing?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;fly&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{{ y: 200, duration: 2000 }}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;fade&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Flies&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fades&lt;/span&gt; &lt;span class="nx"&gt;out&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sr"&gt;/if&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://svelte.dev/tutorial/in-and-out"&gt;Try out Svelte transitions tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But they can also be used for more complex things, like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y8vUsRSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619357232242/hS_6eOg5V.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y8vUsRSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619357232242/hS_6eOg5V.gif" alt="animations.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have fun building this in React 🤪&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svelte.dev/tutorial/animate"&gt;Try out Svelte animations tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sveltekit"&gt;
  &lt;/a&gt;
  SvelteKit
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://kit.svelte.dev/"&gt;SvelteKit&lt;/a&gt; is a topic of its own. But it is one of the main reasons why I am so excited. Think of SvelteKit being for Svelte what NextJS is for React.&lt;/p&gt;

&lt;p&gt;But why is it awesome?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SvelteKit &lt;strong&gt;fully embraces the serverless paradigm&lt;/strong&gt;, and will launch with support for all the major serverless providers, with an 'adapter' API for targeting any platforms that we don't officially cater to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Read about it in &lt;a href="https://svelte.dev/blog/whats-the-deal-with-sveltekit"&gt;What's the deal with SvelteKit?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As I am writing this SvelteKit is currently in beta. Can't wait for the release!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I could go on and on and on (have I mentioned Svelte is written in TypeScript?). But this wraps it up. You can see that I am excited, right? Svelte is something I would place my bet on. Learning Svelte and the differences to runtime system-based frameworks is definetly not a waste of time.&lt;/p&gt;

&lt;p&gt;I am looking forward to Sveltes evolution in the future. I hope that it will soon be more widely used and I can start client projects using Svelte 😉&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How I Kickstarted My Dev Career by Doubling Down on My Education Debt</title>
      <author>waldowred5</author>
      <pubDate>Sun, 25 Apr 2021 13:46:29 +0000</pubDate>
      <link>https://dev.to/waldowred5/how-i-kickstarted-my-dev-career-by-doubling-down-on-my-education-debt-1ik4</link>
      <guid>https://dev.to/waldowred5/how-i-kickstarted-my-dev-career-by-doubling-down-on-my-education-debt-1ik4</guid>
      <description>&lt;p&gt;For anyone looking to become a professional developer, there are only three ways to go from zero to coding hero:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Traditional Route - Study a bachelor of computer science at a university or college&lt;/li&gt;
&lt;li&gt;Modern Route - Become a self-taught programmer&lt;/li&gt;
&lt;li&gt;Industry Route - Enroll in a coding boot camp&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of these routes are viable paths to your first paid developer role, they are just not all equal. While each has benefits and drawbacks, there is one that is more likely to launch your dev career to the stars.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;But first, a short story...&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I left high school, I was convinced I wanted to be a doctor. If I could go back and tell my younger self I would eventually be hired to help build the world's first blockchain-based superannuation* platform, I doubt he would believe me. &lt;/p&gt;

&lt;p&gt;&lt;sup&gt;For all the non-Australian readers, &lt;strong&gt;superannuation&lt;/strong&gt; is the Australian system for compulsory contributions to a retirement fund, similar to a 401k in the US.&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I went to university, studying a bachelor of medical science, eager to pave my way to 'Dr.' status. To my surprise and dismay, I hated it. With no passion or clear direction, I ambled my way through my degree, putting in an embarrassingly small amount of effort. &lt;/p&gt;

&lt;p&gt;What seemed like the longest three years of my life, the end of my time at university was looming around the corner. I joined a charity sales call centre to get some cash and work experience. I know, one of 'those' people. &lt;/p&gt;

&lt;p&gt;It was at this point I first discovered the tech industry, being recruited into the sales team for a global software company. I was flown around the world, the commission was great and I was loving life, but four years and a few companies later, the rose-coloured glasses had begun to crack. It was time to choose a career that suited me, instead of letting a career choose me.&lt;/p&gt;

&lt;p&gt;I was seven years past the optimal point to start a new career, and another bachelor's degree was one of the least appealing options I could imagine. Was I really about to start all over again?&lt;/p&gt;

&lt;p&gt;You have probably guessed which of the three routes I think is the best, but if not, it is the industry route, a &lt;strong&gt;coding boot camp&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;While boot camps can have many different types of successful students, it is really best suited for those looking to  switch careers, balancing the need to finish ASAP with the need to gain enough proficiency to land a job.&lt;/p&gt;

&lt;p&gt;With that disclaimer out of the way, here are the top reasons why you should seriously consider enrolling in a coding boot camp if you want to be a professional developer:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h2&gt;

&lt;p&gt;The most obvious advantage is the content delivered in a boot camp. Coding boot camps originated in Silicon Valley, run by the industry to teach only what was current and relevant for new coding initiates. These courses have been popping up all over the world and provide an education opportunity for those who want to learn about the tools they will be using on a daily basis as a junior developer.&lt;/p&gt;

&lt;p&gt;These courses tend to focus on web technologies like HTML, CSS, JavaScript, Git, a front end framework (typically React) as well as some SQL and database design. Additionally, you are likely to glean many key tips about how to ace coding interviews (aimed at junior roles) without having to cram coding interview practice before the big day. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#community"&gt;
  &lt;/a&gt;
  Community
&lt;/h2&gt;

&lt;p&gt;There are a number of advantages that come directly from the people you study with. &lt;/p&gt;

&lt;p&gt;When you are surrounded by people who are on the same journey, it is significantly easier to get help when you need it. While it is possible to find online communities, it just isn't quite the same. You will have peers that are coming across the same problems and have found a way to solve it that they are willing to share with you. Alternatively, you will always be able to ask your lecturers and educators who typically have a wealth of experience to draw from. This support network will significantly reduce the learning burden that comes with solving every single problem you face by yourself. &lt;/p&gt;

&lt;p&gt;It may not be the case for everyone, but I certainly find it easier to stay motivated and commit to the task at hand when I am part of a group. There is an intrinsic level of competitiveness that helps drive my behaviour towards delivering my best work. I also found the work my peers would deliver and present gave me insight into novel solutions to problems I hadn't yet encountered as well as inspiration for future projects.&lt;/p&gt;

&lt;p&gt;Finally, a more long term benefit, you will have met a group of developers that make their way into many different areas in the industry (or other industries entirely). These connections will be invaluable, as you will be in the loop for any new job opportunities that appear before they are posted on sites like &lt;a href="https://www.linkedin.com/jobs/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://www.seek.com.au/"&gt;Seek&lt;/a&gt; and other job boards.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenge"&gt;
  &lt;/a&gt;
  Challenge
&lt;/h2&gt;

&lt;p&gt;A boot camp provides students a well-defined structure of increasing project difficulty. Whenever I looked back at the previous week, I was consistently blown away by how much I had learned. It was truly exponential, and what I considered really difficult at the time became totally trivial in a matter of days.&lt;/p&gt;

&lt;p&gt;I was luckily able to escape the dreaded 'tutorial purgatory' by joining a course where I was given larger projects to sink my teeth into, with specific requirements that provided scope and direction, support from my peers and educators as well as deadlines and goals to drive my learning momentum at a rapid pace. For more reading on breaking down your first small projects, check out this guide on &lt;a href="https://dev.to/peterlunch/how-to-plan-and-build-a-programming-project-a-legitimate-guide-for-beginners-1fll"&gt;How to Plan and Build a Programming Project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While there are many good reasons to enroll in a boot camp, one should nevertheless be aware of the following considerations:  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cost"&gt;
  &lt;/a&gt;
  Cost
&lt;/h2&gt;

&lt;p&gt;Boot camps ain’t cheap. While they are a slightly lower cost option than traditional degrees you are still likely to need a HELP debt loan to cover the course fees. &lt;/p&gt;

&lt;p&gt;This may be the primary reason many consider the self-taught route, but in my experience, it was worth every cent. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time"&gt;
  &lt;/a&gt;
  Time
&lt;/h2&gt;

&lt;p&gt;The head start you get in your education by learning from industry experts is unparalleled and will save a significant amount of time in the long run. &lt;/p&gt;

&lt;p&gt;While not impossible, it is incredibly unlikely you will be able to learn at the same pace in a self-taught environment. Studying at a boot camp will allow you to start your professional development journey sooner, leading to an earlier salary start date and earlier access to promotions. In most cases, this acceleration will translate to a larger financial benefit across an entire career than the initial cost of the boot camp course fees. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#discipline"&gt;
  &lt;/a&gt;
  Discipline
&lt;/h2&gt;

&lt;p&gt;For all the advantages boot camps bring, there is one factor that will dictate your ultimate success. Make no mistake, boot camps are &lt;strong&gt;hard work&lt;/strong&gt;! Speaking from my own experience, what I’ve seen from my peers and read from previous students, to do well requires 60-70 hours per week (in a 6 month, full time course). It is a sure fire way to burn out if you don’t prepare a self-care routine in advance. If you aren’t able to dedicate this much time to a course, you may still be able to graduate, but as the saying goes, you only get out what you put in. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#comparison-with-other-forms-of-learning"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Comparison With Other Forms of Learning&lt;/em&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#universities"&gt;
  &lt;/a&gt;
  Universities
&lt;/h3&gt;

&lt;p&gt;Universities are a very traditional form of education, steeped in history. They date back to the original Platonic Academy of Greece in 387 BCE, and now form the bedrock of tertiary education in most countries around the world.&lt;/p&gt;

&lt;p&gt;Due to their large size and moderately antiquated ways of working, a course syllabus will typically be updated every 3 years. For some perspective, there were 17 brand new programming languages developed and 11 framework releases in the 3 years leading up to 2014. &lt;/p&gt;

&lt;p&gt;In contrast, the internet is less than 40 years old, and changes more frequently than the average job tenure of a millennial. Learning modern web-based skills in this traditional environment is likely to provide you a deep understanding of computing theory but put you behind the 8-ball in practical skills.&lt;/p&gt;

&lt;p&gt;A drawback of trying to follow the traditional education path is the high bar set for entry. In Australia, most universities require a minimum ATAR of more than 90 (the 90th percentile of high school graduates) in order to be accepted into a program. As ATAR requirements tend to be driven by popularity more than technical difficulty, there are plenty of people who would be perfectly capable programmers that will never be accepted into bachelor of computer science.&lt;/p&gt;

&lt;p&gt;On the other hand, for all of those that make it into a bachelor, a key benefit of studying at university is the ‘prestige factor’. Even though a large number of employers are starting to rethink the hard requirement of a degree for recruiting new hires, many still value traditional degrees over any other type of qualification. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#selftaught"&gt;
  &lt;/a&gt;
  Self-Taught
&lt;/h3&gt;

&lt;p&gt;With the rise in short online courses at basement bargain prices, it is becoming increasingly popular to study online. It is even possible to learn everything you would find in a boot camp or bachelor degree syllabus online for free, if you know where to look. &lt;/p&gt;

&lt;p&gt;The obvious problem for developers just getting started, is they won’t know where to look, how to read the technical documentation, what topics should take priority in their learning journey or whether you are progressing at a reasonable pace. Even if you could determine all of this on your own, there are so many areas in the industry you can branch into, there is no real way of knowing which languages and frameworks to focus on until you get there. It is also likely to take some time AFTER your first gig as a developer before you find exactly which type of programming you enjoy most. &lt;/p&gt;

&lt;p&gt;A large barrier to measurable learning progress as a self-taught programmer is having no concrete accountability. If you haven’t invested much money into your education, you have no skin in the game. This makes it so much harder to stay motivated when faced with challenges (of which there will be plenty) and all the more likely you will abandon the idea of becoming a dev all together.&lt;/p&gt;

&lt;p&gt;Probably the most dangerous and unanticipated factor in the journey of a self-taught programmer is the potential for a false sense of security. In the lead up to starting my boot camp, I bought a subscription to &lt;a href="https://www.codecademy.com/"&gt;codecademy.com&lt;/a&gt; (a fantastic resource for learning new programming languages). I remember feeling a monumental sense of achievement whenever I finished one of the course topics and any of the small projects in each module. In hindsight, these small wins were so insignificant compared to what I built and achieved during my time at the boot camp and would have prevented me from seeing how much more I needed to learn before I was ready to take on my first professional role. After learning HTML, CSS / SASS, Git, Ruby on Rails, PostgreSQL, RESTful APIs, JavaScript and React, I still feel I was barely prepared for my first role as a front end developer (which is widely regarded by most developers as the less technical cousin of back end development).&lt;/p&gt;

&lt;p&gt;If you are able to stay motivated and disciplined, get by with a few low cost courses and subscriptions and find a well-laid out blueprint for your learning journey, it is possible to skip all of the education debt outright. If you choose this road it will be incredibly challenging, but anything worth doing is never easy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Everyone has a different situation, with different priorities and challenges to face, but if you are still reading and haven't been deterred by any of the points above I would highly recommend enrolling in a boot camp as soon as possible. They are definitely not for everyone, but there are a number of different courses to choose from with different options for flexible study. If you are dedicated, enthusiastic and committed you will go very far, and nothing will be able to stop you from reaching your goals. I wish you all the best on your coding journey, and regardless of which route you take to get into the industry, the learning in this profession never stops.&lt;/p&gt;

</description>
      <category>education</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Firefox theme `Aurora Future`</title>
      <author>Benny Guo</author>
      <pubDate>Sun, 25 Apr 2021 13:19:31 +0000</pubDate>
      <link>https://dev.to/auroral-ui/firefox-theme-aurora-future-48ei</link>
      <guid>https://dev.to/auroral-ui/firefox-theme-aurora-future-48ei</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rTz0M6s5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7l6xnxtk6l9t035fe11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTz0M6s5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7l6xnxtk6l9t035fe11.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---uAYHQAk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5s4aatg41lu1z2dnxy3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---uAYHQAk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5s4aatg41lu1z2dnxy3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently I had switched back to Firefox for web development. &lt;/p&gt;

&lt;p&gt;Thinking back, I had left Firefox since 4-5 years ago, I remember Firefox had the best layout debug tool called &lt;a href="https://getfirebug.com/"&gt;firebug&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Not sure how many of the web developer now days hear of this tool.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore I decided to make a Aurora Theme for Firefox as well and here it is!&lt;/p&gt;

&lt;p&gt;(Side note I still love Chrome, I still switch between the two from time to time, but a lot more on Firefox now days, because for some reason Chrome is very laggy for my MacBookPro. Also I am thinking of making a chrome theme as well~)&lt;/p&gt;

&lt;p&gt;Here is place to download this theme: &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/aurora-future/"&gt;https://addons.mozilla.org/en-US/firefox/addon/aurora-future/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>firefox</category>
      <category>aurora</category>
      <category>theme</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 great productivity tips for working from home!</title>
      <author>Sandor Dargo</author>
      <pubDate>Sun, 25 Apr 2021 13:15:08 +0000</pubDate>
      <link>https://dev.to/sandordargo/5-great-productivity-tips-for-working-from-home-5a95</link>
      <guid>https://dev.to/sandordargo/5-great-productivity-tips-for-working-from-home-5a95</guid>
      <description>&lt;p&gt;It's still pandemic time and most of us are &lt;del&gt;working&lt;/del&gt; from home. Let me share with you my best pieces of advice to make your remote experience as productive as possible!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-let-your-goals-constrain-you"&gt;
  &lt;/a&gt;
  Don't let your goals constrain you
&lt;/h2&gt;

&lt;p&gt;The life of a developer is chaotic. Period.&lt;/p&gt;

&lt;p&gt;We all have dozens of top priority tasks that are only waiting to be swept off from the board by our bosses when a priority zero matter comes in. &lt;/p&gt;

&lt;p&gt;Whatever you plan for your day, there will be always something even more urgent to take care of. One of your managers will get in touch with you asking to throw away whatever you're doing to fix a typo in the documentation he just discovered. Another will ask you to add a simple button - and the underlying service - to the 7-year-old webpage that was visited by at least 12 people during the last 18 months. Some colleagues will send you some instant messages because they need your help to get some names that they could find in less time than you go over the mandatory rounds of &lt;em&gt;howareyoutodays&lt;/em&gt;, or maybe an experienced colleague will ask you to act as his living git documentation. Ah, all those urgent matters!&lt;/p&gt;

&lt;p&gt;If you are on a lucky break and people think you are still on vacation, for sure you'll have to pop to the post office because the mailman only left a notice saying you were not at home. Not that you are even allowed to go out, but he didn't even try to ring the bell. He just applied social distancing, right?&lt;/p&gt;

&lt;p&gt;Your significant other will ask you to immediately fix the cabinet that is broken for the last 3 years when you're in your deepest meditation about which design pattern to choose.&lt;/p&gt;

&lt;p&gt;After spending an hour adjusting the height of your son's bike that got a bit stuck and rusty, you'll be given a nice snack exactly at the moment when you start to understand how that undocumented library is supposed to work.&lt;/p&gt;

&lt;p&gt;Why would you take your time to set some small yet unachievable goals when interruptions will drive your days?&lt;/p&gt;

&lt;p&gt;Why the hell would you waste your bloody time to set up goals for your days when all those people around you will contact you with their urgent problems and change the course for your day?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-have-a-dedicated-place-to-work"&gt;
  &lt;/a&gt;
  Don't have a dedicated place to work
&lt;/h2&gt;

&lt;p&gt;Should you create a dedicated office space in your apartment? A corner where you have a desk, a chair, one or maybe more screens? &lt;/p&gt;

&lt;p&gt;The answer is definitely not!&lt;/p&gt;

&lt;p&gt;Having a dedicated office space leads to boredom. Do you think you can be creative and productive that way? And even if you could, who has so much space at home? My wife started to complain in just a few months that I by myself occupy like 2 square meters that is more than 3% of all the available space for us. &lt;/p&gt;

&lt;p&gt;Do you really want that in your life?&lt;/p&gt;

&lt;p&gt;Instead, work wherever you feel like! I'd even encourage you to switch places often. You can start working from your bed in the morning, maybe while your partner is still snoring next to you. Do you like to throne for long times? Well, please don't answer this question in the comments, I really don't care. Nobody does. Yet, the loo is also a calm place to work. Just beware of meetings. Don't keep your mic on!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cdfrfl7F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coy0s5uh8hud4wvw9q5d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdfrfl7F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coy0s5uh8hud4wvw9q5d.jpg" alt="Working from the toilet?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few meetings from the kitchen while you're slicing onions and preparing a nice boeuf bourguignon? You also have access to your fridge! Who could resist to pop up... a coke?&lt;/p&gt;

&lt;p&gt;After lunch, you can spend the afternoon just lying down on the sofa and progress a bit with the requested features - unless you're constantly interrupted -, it will be so comfortable!&lt;/p&gt;

&lt;p&gt;Speaking about interruptions, all that I said might be useless if you have young children at home. In that case, you might follow what I call the &lt;em&gt;Cry Driven (Away) Development&lt;/em&gt; and in the midst of all the crying and drama you just always look for the calmest corner of your home.&lt;/p&gt;

&lt;p&gt;Anyway, at the end of the day, you can still work a bit from your bed and then place your laptop next to the bed, just to prepare for the next morning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#span-meetings-all-over-the-week"&gt;
  &lt;/a&gt;
  Span meetings all over the week
&lt;/h2&gt;

&lt;p&gt;Did I already mention how great the kitchen is for meetings? Let's continue discussing meetings. I think that you should span them all over the week. If I have to jump from one meeting to the other often without having the time to obey the call of mother nature, I get irritated.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hey, can you hear me? ... Hallo? Hallo? ... Sorry, I've been speaking for 5 minutes and I just realized I was on mute. Let me start over. Or just guess what I said. ... Can you hear me better or do you still hear an echo?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Say you're far from the mic again, say you're far from the mic again, I dare you, I double dare you, say it one more goddamn time and... I'll call Samuel L Jackson to tell you a nice bedtime story.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qo5jnBJvGUs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I prefer to have at least half an hour between meetings in order to get some rest and calm down. I usually break down all my user stories into microtasks, so I have some time to work on them in between (and sometimes during) the meetings. &lt;/p&gt;

&lt;p&gt;By spanning them all over the week, I'm not overwhelmed with meetings during any part of the day or the week.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-always-available-on-im"&gt;
  &lt;/a&gt;
  Be always available on IM
&lt;/h2&gt;

&lt;p&gt;In the office, your boss used to see you. Maybe she even saw your screens all the time, or at least she could if she wanted to. You were a good &lt;del&gt;slave&lt;/del&gt; employee, you were under constant surveillance.&lt;/p&gt;

&lt;p&gt;It's not the case anymore! Of course, unless your company is capturing your screen and maybe even takes some pictures through your webcam... They cannot know whether you work in a given moment or you're chopping onions for your midday chilli.&lt;/p&gt;

&lt;p&gt;So what is left for your masters is to contact you on chat at random times. If you don't want to disappoint them - and play Russian-roulette with your job - you should reply all the time instantaneously. They have to know both that you are there ready to go the extra mile and also to provide them social support as - just like you! - they also lost their usual circles with the pandemic.&lt;/p&gt;

&lt;p&gt;But as you're a smart person, you can go a step forward! You should be contacting others and note if someone is replying late. After all, maybe at a moment, you'll be asked about a person and then you can tell that he replied to you about that TPS report 17 minutes after you pinged him after your late-night dinner.&lt;/p&gt;

&lt;p&gt;But a good company soldier works long days and always available to serve, right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-eat-dont-drink-much"&gt;
  &lt;/a&gt;
  Don't eat, don't drink much!
&lt;/h2&gt;

&lt;p&gt;Please don't eat if you want to stay productive! Food intake takes time! I know you have a lunch break - it is for time wasters anyway - but imagine what will happen if you fill your tummy. You eat your programmer's special pizza-coke combo and we all know what's going to happen. You're gonna pass out in a food-induced coma. If you manage to avoid it, you'll still only be a shadow of yourself for a couple of hours. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DWA_c6Xf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2anlu7m202fv2kbfpv51.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DWA_c6Xf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2anlu7m202fv2kbfpv51.jpg" alt="Pizza-coke combo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you really want that?&lt;/p&gt;

&lt;p&gt;The best you can do is that you don't have breakfast, you don't have lunch and you only eat once a day after office hours. Will it be only the end of your workday or your whole day doesn't matter that much anyway. The french used to characterize the big-city life as metro-boulot-dodo. You commute, you work, you commute then you sleep. With the home office, there is no more need for the metro, it's just &lt;em&gt;boulot-dodo&lt;/em&gt;. We work and sleep. And of course, we pay taxes, that's the most important! Don't ruin the cycle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8wCTv3vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8huz4akq15b0brzro5jj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8wCTv3vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8huz4akq15b0brzro5jj.jpg" alt="Metro-boulot-dodo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you can limit your water - or whatever you drink - intake, even better! Don't go overboard, if you start dry coughing in a meeting and the mute button cannot solve it because actually you must present, drink a few sips! Otherwise, if there is a chance, try to limit your drinking. Do you know what's going to happen if you follow the bandwagon of heavy water drinkers? You'll have to pee. A lot. &lt;/p&gt;

&lt;p&gt;Do you have time for that? &lt;/p&gt;

&lt;p&gt;I don't. &lt;/p&gt;

&lt;p&gt;Oh, by the way, keep an empty bottle with you. Just in case. You know. Ladies, I don't know what to suggest.&lt;/p&gt;

&lt;p&gt;Let your motto be &lt;em&gt;no drink, no pee&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Today I shared with you 5 pieces of advice on how to be productive or ... Well, I hope you don't take them too seriously and you had some good laughs. Next time, I'll come back with something real on productivity!&lt;/p&gt;

</description>
      <category>career</category>
      <category>watercooler</category>
      <category>productivity</category>
      <category>satire</category>
    </item>
    <item>
      <title>Spotify Mixtapes For Coding</title>
      <author>David Leuliette 🤖</author>
      <pubDate>Sun, 25 Apr 2021 13:14:58 +0000</pubDate>
      <link>https://dev.to/flexbox/spotify-mixtapes-for-coding-4p5b</link>
      <guid>https://dev.to/flexbox/spotify-mixtapes-for-coding-4p5b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#curated-mixtapes"&gt;
  &lt;/a&gt;
  Curated mixtapes
&lt;/h2&gt;

&lt;p&gt;Last year, I published my &lt;a href="https://dev.to/flexbox/how-to-get-4000-followers-on-spotify-2kla"&gt;growth hack technique&lt;/a&gt; to get some followers on Spotify.&lt;/p&gt;

&lt;p&gt;I reached 12 playlists and I hope it will help some of you to get "into the zone" and release amazing products to production!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0the-list"&gt;
  &lt;/a&gt;
   The List
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/playlist/0Jt2JW0NTIL6MvV9dSOnqZ?si=2f09e2def13f4704"&gt;HACKER #1: Mixtape for coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/playlist/3LdxHInEvlJZqtqeRmtiGv?si=8accab0a704941c6"&gt;HACKER #2: Rock for coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/playlist/59h0570gNwpTrqiD4KFt9c?si=1a0b2eaf51154914"&gt;HACKER #2.11: Aggressive mixtape for programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/playlist/0pf103tVqmwkF060LHk0RG?si=218d1fbed3dd4292"&gt;HACKER #3.0: Movies Mixtape for coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/playlist/6IZ1Mh2grWaxgdQnK9xIAO?si=285875d545294822"&gt;HACKER #3.1: OST Mixtape for coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/playlist/301Kl8b7hslXbV8wxk3SrV?si=dc78f2f4ea8544c5"&gt;HACKER #3.2: Gaming Mixtape for coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/playlist/6Zmw201xJGrD7LuGwF2Ph0?si=5a019dd3d1e04cb8"&gt;HACKER #4: Electro Mixtape for coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/playlist/2Adv3s73yJNLm3z1BwK9rP?si=0837002aac384e46"&gt;HACKER #5: Chill Mixtape for coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/playlist/26yEmL1emKzN9Xpt1dyhPm?si=09aaee200ded4f3d"&gt;HACKER #6: Mixtape for laser-focus at work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/playlist/3FYezFABeZdD13RMQiff0G?si=88d85f4cda414ebc"&gt;HACKER #7: Summer of code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/playlist/5PDDbk2cvJiiqBT37iHs9S?si=0eb0d79dfafb468f"&gt;HACKER #8: Retro Mixtape for Coding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/playlist/5rR8hKi3BWEx3rnHPD7M72?si=d1066285f44049a2"&gt;HACKER #9: DJ Mixtape for Coders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/playlist/0yuappB07Oz6xj0xBhH2Y3?si=53e53272732f4ca9"&gt;HACKER #10: Stress free Mixtape for programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/playlist/1iQK1OHiOgpF2DlOaz0Xow?si=6b1f5a9a371b4cf8"&gt;HACKER #11: HipHop Coders Krew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/playlist/59h0570gNwpTrqiD4KFt9c?si=f0c9342ea5d2465a"&gt;HACKER #12: Metal for Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;👉 Discover all my curated &lt;a href="https://davidl.fr/music"&gt;playlists for programming&lt;/a&gt;&lt;/p&gt;

</description>
      <category>music</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to set up Jest for ESM</title>
      <author>Rocktim Saikia</author>
      <pubDate>Sun, 25 Apr 2021 13:08:49 +0000</pubDate>
      <link>https://dev.to/rocktimsaikia/how-to-set-up-jest-for-esm-2bbb</link>
      <guid>https://dev.to/rocktimsaikia/how-to-set-up-jest-for-esm-2bbb</guid>
      <description>&lt;p&gt;Node v10 is coming to &lt;a href="https://endoflife.date/nodejs"&gt;end of life&lt;/a&gt; in the upcoming April 30. And the node js community is starting to move all their projects and modules to ESM (ES6 Modules) ditching commonjs as a good practice.&lt;/p&gt;

&lt;p&gt;Today I am going to do a quick tutorial on how to set up jest for testing your ES6 modules with minimum set up and requirements. So let's get started.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is important to mention that Jest does have &lt;a href="https://jestjs.io/docs/ecmascript-modules"&gt;built-in ESM support&lt;/a&gt; but it's not very stable and I often run into various issues while using it. So the method I am writing here is the best solution that has worked for me so far.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, let's install the required packages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;babel-jest @babel/plugin-transform-modules-commonjs —dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am assuming that you already have the core &lt;code&gt;jest&lt;/code&gt; package installed, If you don't, then install it by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;jest —dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have to configure jest to use the &lt;code&gt;babel-jest&lt;/code&gt; plugin. You can create a separate &lt;code&gt;jest.config.js&lt;/code&gt; file but I am going to put the configuration right in the package.json since it is very simple. Add the following lines to your &lt;code&gt;package.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;package.json&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"transform"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"\\.[jt]s?$"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"babel-jest"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After setting the jest config, create a &lt;code&gt;.babelrc&lt;/code&gt; file in the root of the project directory. And add the following line&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//.babelrc

{
    "plugins": ["@babel/plugin-transform-modules-commonjs"]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that’s it. Now we can test ES6 modules running Jest.&lt;/p&gt;

&lt;p&gt;Here is a simple boilerplate that uses this trick.&lt;br&gt;
&lt;a href="https://github.com/RocktimSaikia/node-boilerplate"&gt;https://github.com/RocktimSaikia/node-boilerplate 🚀&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post was originally posted on my &lt;a href="https://rocktimcodes.site/blog/how-to-set-up-jest-for-esm"&gt;website&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>testing</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>I built doge theme of Reddit using MERN Stack!</title>
      <author>Justin Maximillian Kimlim</author>
      <pubDate>Sun, 25 Apr 2021 13:03:03 +0000</pubDate>
      <link>https://dev.to/kimlimjustin/i-built-doge-theme-of-reddit-using-mern-stack-58hd</link>
      <guid>https://dev.to/kimlimjustin/i-built-doge-theme-of-reddit-using-mern-stack-58hd</guid>
      <description>&lt;p&gt;Hello developers, I've recently created a doge theme version of Reddit, called Dogeit using the MERN Stack (MongoDB, Express JS, React JS, and Node JS).&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/kimlimjustin"&gt;
        kimlimjustin
      &lt;/a&gt; / &lt;a href="https://github.com/kimlimjustin/dogeit"&gt;
        dogeit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🐶 Doge version of reddit.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Dogeit&lt;/h1&gt;
&lt;p&gt;🐶 Doge version of reddit.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9760b756128c0edc2bf3f6762c49f46fe3329685901a71e2fdb6f0047230bfdc/68747470733a2f2f64726976652e676f6f676c652e636f6d2f75633f6578706f72743d766965772669643d3145394d7447534b3647616e5a43344b7a494d674a6b7361334d70797376384450"&gt;&lt;img src="https://camo.githubusercontent.com/9760b756128c0edc2bf3f6762c49f46fe3329685901a71e2fdb6f0047230bfdc/68747470733a2f2f64726976652e676f6f676c652e636f6d2f75633f6578706f72743d766965772669643d3145394d7447534b3647616e5a43344b7a494d674a6b7361334d70797376384450" alt="Dogeit demo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Local Setup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Clone this repository or fork it&lt;/li&gt;
&lt;li&gt;Navigate to &lt;code&gt;client&lt;/code&gt; directory
&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;yarn&lt;/code&gt; or &lt;code&gt;npm i&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a new file called &lt;code&gt;.env&lt;/code&gt; which stores environment variables such as
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;REACT_APP_SERVER_URL&lt;/code&gt;, your server endpoint&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;REACT_APP_GITHUB_CLIENT_ID&lt;/code&gt;, your GitHub OAuth Client ID&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;REACT_APP_SECURITY_KEY&lt;/code&gt;, a random token used to secure your application&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Start application by running &lt;code&gt;npm start&lt;/code&gt; or &lt;code&gt;yarn start&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Navigate to &lt;code&gt;server&lt;/code&gt; directory
&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;yarn&lt;/code&gt; or &lt;code&gt;npm i&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create a new file called &lt;code&gt;.env&lt;/code&gt; which stores environment variables such as
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;GITHUB_CLIENT_ID&lt;/code&gt;, your GitHUb OAuth Client ID&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GITHUB_CLIENT_SECRET&lt;/code&gt;, your GitHUB OAuth Client Secret&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CLIENT_URL&lt;/code&gt;, your client endpoint&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ATLAS_URI&lt;/code&gt;, your MongoDB Atlas URI&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;SECURITY_KEY&lt;/code&gt;, a random token used to secure your application, note that this token value must be the same as &lt;code&gt;REACT_APP_SECURITY_KEY&lt;/code&gt; value in &lt;code&gt;client/.env&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;EMAIL_ADDRESS&lt;/code&gt;, Your Email Address&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;EMAIL_PROVIDER&lt;/code&gt;, Your Email Provider&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;EMAIL_PASS&lt;/code&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/kimlimjustin/dogeit"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Any comments will be appreciated :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-you-like-this-project-be-sure-to-drop-a-star-on-github-"&gt;
  &lt;/a&gt;
  If you like this project, be sure to drop a star on GitHub 🌟!
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  Happy coding!
&lt;/h2&gt;

&lt;p&gt;You might also like these articles:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kimlimjustin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bOoVBNhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--SC5anWaO--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/510950/892b1367-fd17-4a9e-a8b9-e0cb62d5df4d.jpg" alt="kimlimjustin image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kimlimjustin/3-good-quality-apps-for-windows-to-make-your-computer-seems-modern-k4k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;3 Good quality apps for windows to make your computer seems modern&lt;/h2&gt;
      &lt;h3&gt;Justin Maximillian Kimlim ・ Mar 14 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kimlimjustin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bOoVBNhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--SC5anWaO--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/510950/892b1367-fd17-4a9e-a8b9-e0cb62d5df4d.jpg" alt="kimlimjustin image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kimlimjustin/my-personal-website-built-using-html-css-and-vanilla-javascript-13kd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My personal website built using HTML, CSS, and vanilla JavaScript&lt;/h2&gt;
      &lt;h3&gt;Justin Maximillian Kimlim ・ Mar 18 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#portfolio&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kimlimjustin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bOoVBNhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--SC5anWaO--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/510950/892b1367-fd17-4a9e-a8b9-e0cb62d5df4d.jpg" alt="kimlimjustin image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kimlimjustin/abstractmark-the-modern-markdown-language-2ch1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;AbstractMark, the modern markdown language.&lt;/h2&gt;
      &lt;h3&gt;Justin Maximillian Kimlim ・ Feb 15 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#markdown&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#abstractmark&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
    </item>
    <item>
      <title>User authentication through authorization code grant type using AWS Cognito</title>
      <author>Jinlian(Sunny) Wang</author>
      <pubDate>Sun, 25 Apr 2021 12:32:52 +0000</pubDate>
      <link>https://dev.to/jinlianwang/user-authentication-through-authorization-code-grant-type-using-aws-cognito-1f93</link>
      <guid>https://dev.to/jinlianwang/user-authentication-through-authorization-code-grant-type-using-aws-cognito-1f93</guid>
      <description>&lt;p&gt;This article is part of oAuth series using AWS Cognito, see links to other articles in &lt;a href="https://dev.to/jinlianwang/oauth-made-simple-with-aws-cognito-1de8"&gt;Series Summary: oAuth Made Simple with AWS Cognito&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In previous post - &lt;a href="https://dev.to/jinlianwang/setting-up-implicit-grant-workflow-in-aws-cognito-step-by-step-5feg"&gt;Setting up implicit grant workflow in AWS Cognito, step by step&lt;/a&gt;, we show that it takes only 4 simple steps in order to set up implicit grant workflow in AWS Cognito. With that, you can start using AWS Cognito to protect your web server and its resources. However, Implicit Grant is deprecated and no longer recommended. Why? &lt;/p&gt;

&lt;p&gt;As you can see from its Testing Time section, the access token issued by AWS Cognito is returned directly back to the client side and used to access other resources on the server side. The same token can be also used to access Cognito Auth APIs and retrieve other user informations. Consequently, it is a highly sensitive piece of information and by allowing client side direct access exposes a significant security risk. &lt;/p&gt;

&lt;p&gt;Authorization code grant type is recommended as replacement as a standard practice when it comes to client side authentication for either web or mobile applications. How and why is Authorization Code grant type is better? In the next section, we will deep dive into a typical login workflows through authorization code grant type to find out. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typical-login-workflows-through-authorization-code-grant-type"&gt;
  &lt;/a&gt;
  Typical Login Workflows through Authorization Code Grant Type
&lt;/h3&gt;

&lt;p&gt;When we use a web or mobile application, if you exist the app and come back within a short period, you usually have the convenience of access without the need to login again. What goes behind it in order to achieve it? The first workflow we will go through explain exactly how, see its sequence diagram below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nDPINLC8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5x4cuq20syaw85r0eqp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nDPINLC8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5x4cuq20syaw85r0eqp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see from the above diagram, once the client load up all the artifacts (as in Step 1, which is only needed for web applications, as mobile app has all client resources as part of its installation bundle), the first thing is to call web server to check its login status, by passing in a session token which it saves locally (either in session storage or cookie for web applications or keychains for iOS app or Shared Preferences for Android app). If the session token is still valid, it will request for the resources for home screen (Step 3), and render home screen without requiring for authentication. However, if the login status check returns false, the session token is removed from the client storage, and the home screen is displayed with login button, allowing users to re-authenticate using the Login workflow as described in the next sequence diagram. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8dky4ZZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsorr40ro9nijt9man34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8dky4ZZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsorr40ro9nijt9man34.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This diagram is the meat of login workflow using Authorization Code grant type. Once the user clicks a login button, the first request the client (either mobile or web application) will make to the server is to request for a login url, which would point to the login page of AWS Cognito. Some application may opt to hard code this in the client side, however, I would recommend to request dynamically from web server as if the url usually would contain a client ID (issued by AWS Cognito, see Step 2, app client ID and secret setting), and by not hardcoding it in the client side, the client can rotate its app client credentials periodically which is generally required for security compliance, without the need to release a new version of client (even though web application does not need installation, it still requires a change to its client artifacts on server side). The login url call is usually returned with a HTTP code of 302 (or newer standard calls for either 303 or 307), and so the browser would redirect to login url automatically and load the login page of Cognito page that you set up in precious article with custom domain prefix for this web server. Once the user provides login credential and click the login button, the Cognito authentication process kicks off. Assuming that user provides a correct login credentials, the process would end up by redirecting browsers back to the callback url set up previously using Cognito (see Step 3, call back url part) with a query parameter named “code”. The callback url is usually set up to be one endpoint exposed by web server, and so once the browser points to this url, it triggers the server side logic to exchange the code for an access token with Cognito, validating that this user is a valid user and optionally the web server can make another call to retrieve extra user info including email, phone number and other custom user attributes, using App Client ID and Secret as client credentials to authenticate with Cognito Auth API. Afterwards, the web server would generate its own session token, and return it to the client. Once the client receives the token, it can use it to request for any protected resources on the server side, and it may opt to store it locally so that the user does not need to re-authenticate if she comes back before the token expires, as explained in previous workflow. Once users no longer requires the application, she may want to terminate the session explicitly by triggering a log out sequence. By logging out explicitly, it notified the web server to invalidate the session token permanently, and so no one can exploit the token for any ill purpose, like described in the following sequence diagram. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bOGCm_9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjlj0ez6q1syhmevqvyr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bOGCm_9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjlj0ez6q1syhmevqvyr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To summarize, there are generally 3 webflows related when it comes to login workflow through authorization code grant type using AWS Cognito (or any other Identity Provider). To support these workflows, web server would  usually need to expose the following 4 endpoints, with each of them handling their own role and logics. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login url endpoint (Step 4) returns a login url to web or mobile client, pointing to AWS Cognito login page. It usually would contain an app client ID and call back url which points to the exchange code endpoint of web server, that is explained next. &lt;/li&gt;
&lt;li&gt;Exchange code endpoint(Step 7) exchanges an authorization code for an access token with AWS Cognito, and optionally requests and stores for later use some user information like email, user sub, and custom user attributes if any. &lt;/li&gt;
&lt;li&gt;Login status endpoint (Step 2) returns the login status of client, by passing in a session token stored locally. If it does not find one stored locally, it would skip this step. &lt;/li&gt;
&lt;li&gt;Logout endpoint (Step 12) would trigger the process on the web server side to invalidate the session token issued earlier by exchange code endpoint. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Through all 4 endpoints, the access token is never returned directly back to client. Instead, only authorization code which is usually one time use only and short lived is returned to client side, and passed to web server to exchange for an access token through a secure channel, which is never exposed to client sides. Hence, compared to Implicit Grant type, Authorization Code grant type is inherently more secured and recommended as a replacement for Implicit Grant type for both web and mobile applications. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-authorization-code-grant-type-in-aws-cognito"&gt;
  &lt;/a&gt;
  Setting Up Authorization Code Grant Type in AWS Cognito
&lt;/h3&gt;

&lt;p&gt;Now that we know what the login workflows would be if we want to go with Authorization Code grant type, what can we enable this grant type in Cognito. We would follow exactly the same 4 simple steps as described in previous article - &lt;a href="https://dev.to/jinlianwang/setting-up-implicit-grant-workflow-in-aws-cognito-step-by-step-5feg"&gt;Setting up implicit grant workflow in AWS Cognito, step by step&lt;/a&gt; when setting up Implicit Grant Type, except that in Step 3 - Config App Client Settings, we want to select Authorization Code grant type instead of (or in addition to) Implicit Grant Type, like in the following snapshot. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5zHrmkLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1r3cgx6q57go61pklhm7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zHrmkLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1r3cgx6q57go61pklhm7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we would need App client ID and secret in order to retrieve login url and user info (see Step 9 in previous section), we also want to note down the app client secret in Step 2 (of previous article), before moving to next section. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-time"&gt;
  &lt;/a&gt;
  Testing Time
&lt;/h3&gt;

&lt;p&gt;Now comes the fun time. We will go through all the different calls in the previous section using browser and curl commands. It will help readers to have better ideas on each step works in authorization code grant type. First, assemble a url in the format of &lt;code&gt;https://&amp;lt;domain prefix&amp;gt;.auth.us-east-1.amazoncognito.com/oauth2/authorize?client_id=&amp;lt;client id&amp;gt;&amp;amp;redirect_uri=https%3A%2F%2Fexample.com&amp;amp;scope=openid&amp;amp;response_type=code&lt;/code&gt;. In our case, it would be&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;https://sunnyoauth.auth.us-east-1.amazoncognito.com/oauth2/authorize?client_id=1vvp0tt53g1uhntoa5bmvnvk2a&amp;amp;redirect_uri=https%3A%2F%2Fexample.com&amp;amp;scope=openid&amp;amp;response_type=code&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Copy and paste the above url into Chrome browser, follow the instruction to sign up a new account (for the first time only), or sign in if you have an existing account. Continue to follow the instructions, until you get a url in the format of&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;https://example.com/?code=&amp;lt;authorization code&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Save the  for our next step. Also execute the following command in terminal to create a base64 encoded client credentials, and save it for next step. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;echo -n &amp;lt;client id&amp;gt;:&amp;lt;client secret&amp;gt; | base64&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;It is worth noting that the authorization code is one time use and valid for only 5 minutes. It is designed this way on purpose for security considerations.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Next we will show how we can exchange the authorization code above for an access token, by passing in the base64 encoded client credentials and authorization code. Assemble a curl command in the following format:  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;curl --location --request POST 'https://&amp;lt;domain prefix&amp;gt;.auth.us-east-1.amazoncognito.com/oauth2/token' \&lt;br&gt;
--header 'Authorization: Basic &amp;lt;base64 encoded client credentials&amp;gt;' \&lt;br&gt;
--header 'Content-Type: application/x-www-form-urlencoded' \&lt;br&gt;
--data-urlencode 'code=&amp;lt;authorization code&amp;gt;' \&lt;br&gt;
--data-urlencode 'grant_type=authorization_code' \&lt;br&gt;
--data-urlencode 'redirect_uri=&amp;lt;callback url&amp;gt;'&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our case, it would be the following url (for security purpose, I exclude the encoded client credentials part). &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;curl --location --request POST 'https://sunnyoauth.auth.us-east-1.amazoncognito.com/oauth2/token' \&lt;br&gt;
--header 'Authorization: Basic &amp;lt;base64 encoded client credentials&amp;gt;' \&lt;br&gt;
--header 'Content-Type: application/x-www-form-urlencoded' \&lt;br&gt;
--data-urlencode 'code=102b28e1-51ea-48f6-bc55-97533d88cf30' \&lt;br&gt;
--data-urlencode 'grant_type=authorization_code' \&lt;br&gt;
--data-urlencode 'redirect_uri=https://example.com&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the result will contain an access token as one of fields as shown below: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;{&lt;br&gt;
   "id_token": "eyJraWQiOiJZSHE1...&amp;lt;others skipped to save space here&amp;gt;",&lt;br&gt;
   "access_token": "eyJraWQiOiJmYUd...&amp;lt;others skipeed to save space here&amp;gt;",&lt;br&gt;
   "refresh_token": "eyJjdHkiOiJKV1...&amp;lt;others skipped to save space here&amp;gt;",&lt;br&gt;
   "expires_in": 3600,&lt;br&gt;
   "token_type": "Bearer"&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the access token in hand, through the same process in previous article, we can get the user info through &lt;code&gt;/oauth2/userInfo&lt;/code&gt; by passing in the access token in “Authorization” http header, with the value in the format of &lt;code&gt;Bearer &amp;lt;access token&amp;gt;&lt;/code&gt;. Copy and paste the following curl command and run it through the terminal: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;curl -X GET https://sunnyoauth.auth.us-east-1.amazoncognito.com/oauth2/userInfo -H 'Authorization: Bearer &amp;lt;access token&amp;gt;'&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the result is shown below: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;{"sub":"95fb5614-18b0-4f48-b49e-d8601934a1df","email_verified":"true","email":"fakeemail@hotmail.com","username":"jinlianwang"}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the same as pointed out in previous article, the access token is a JWT token and can be inspected using online JWT inspector to see its payload. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;This concludes this quick introduction over how to use authorization code grant type to authenticate users to your web or mobile apps. In summary, compared to implicit grant workflow, it is more complicated to support authorization code grant workflow. Web servers would usually need to expose 4 endpoints, such as login url, login status, exchange code and log out. Using browser and curl command, we showed how an authorization code can be retrieved, and exchanged for an access token in AWS Cognito. Hope that would help you understand how to implement the 4 endpoints for your web server. In next article, we will provide a sample project implementing these 4 endpoints through a AWS Lambda function. Stay tuned!&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>cognito</category>
      <category>oauth</category>
    </item>
  </channel>
</rss>
