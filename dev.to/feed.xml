<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 C# Mistakes that DAMAGE Your Code + (How to Avoid Them)</title>
      <author>Dotnetsafer</author>
      <pubDate>Mon, 24 Jan 2022 11:02:05 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/10-c-mistakes-that-damage-your-code-how-to-avoid-them-225j</link>
      <guid>https://dev.to/dotnetsafer/10-c-mistakes-that-damage-your-code-how-to-avoid-them-225j</guid>
      <description>&lt;p&gt;C#, the programming language that underlies Microsoft's .NET framework, has been around since 2002 and offers many advantages over languages like Java or C++. However, &lt;strong&gt;there are plenty of ways to mismanage your code using C#&lt;/strong&gt;, and it pays to know about these pitfalls so you can avoid them in your own code. In this article, we'll talk about &lt;strong&gt;10 common C# mistakes and how to avoid them.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-c-has-limitations"&gt;
  &lt;/a&gt;
  1. C# Has Limitations
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;C# is not as robust as its alternatives.&lt;/strong&gt; For example, you can't do overloading in C#. This means that if you have a class with two methods that share a name but take different parameters, &lt;strong&gt;those methods will be treated as separate functions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;💡 &lt;strong&gt;Tip:&lt;/strong&gt; Overloading makes your code &lt;strong&gt;easier to use&lt;/strong&gt; but requires more flexibility from your programming language.&lt;/p&gt;

&lt;p&gt;C# also lacks support for global variables &lt;strong&gt;—you can only access local variables from within a function —&lt;/strong&gt; making it less than ideal for large applications with complex processes and data.&lt;/p&gt;

&lt;p&gt;If you need these features, consider looking into other languages like Python or JavaScript instead of settling for an alternative framework or library for C#.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-make-use-of-the-systemreflection-class"&gt;
  &lt;/a&gt;
  2. Make Use of the System.Reflection Class
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;System.Reflectionclass&lt;/code&gt; is what we'll be making use of in order to find out if a particular library or framework has been loaded by .NET. &lt;strong&gt;You can simply instantiate a new instance of it by passing your application's assembly as an argument.&lt;/strong&gt; Let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;reflection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Reflection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, &lt;strong&gt;you can run one of its methods in order to find out if your library is currently being used.&lt;/strong&gt; One method in particular that we will use here is its &lt;code&gt;GetTypes()&lt;/code&gt; method which will let us know about all types defined within our assembly.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-choosing-bad-objects-in%C2%A0code"&gt;
  &lt;/a&gt;
  3. Choosing Bad Objects in Code
&lt;/h2&gt;

&lt;p&gt;If you're just starting out with programming, &lt;strong&gt;it's not uncommon to use a variable that represents one type of object when in fact it's pointing at another.&lt;/strong&gt; When you try to access its methods or properties, &lt;strong&gt;your program will crash.&lt;/strong&gt; If you see an error stating cannot convert null into type object, for example, that means you tried accessing a method or property on a variable that isn't set  — in other words, one that points at nothing. &lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;br&gt;
 &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Juan&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Bad - using an uninitialized variable!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#4-failure-to-impose-limitations-on%C2%A0classes"&gt;
  &lt;/a&gt;
  4. Failure to Impose Limitations on Classes
&lt;/h2&gt;

&lt;p&gt;One of most common mistakes when developing with &lt;strong&gt;C# is not imposing limitations on classes.&lt;/strong&gt; What I mean by that is that you should always decide what your class can do ahead of time, as opposed to adding new abilities later.&lt;/p&gt;

&lt;p&gt;Once you've defined a class, &lt;strong&gt;it will be difficult or impossible to change its behavior&lt;/strong&gt; without redesigning it from scratch  —and &lt;strong&gt;that's rarely practical or worth it.&lt;/strong&gt; This can lead to an unmaintainable codebase where it's extremely difficult for developers working on different parts of an application to understand how one part interacts with another.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-not-understanding-when-objects-are%C2%A0created"&gt;
  &lt;/a&gt;
  5. Not Understanding When Objects Are Created
&lt;/h2&gt;

&lt;p&gt;C# is a managed language. That means &lt;strong&gt;you can use objects without worrying about their memory management.&lt;/strong&gt; However, it also means that there are limitations on what you can do with them.&lt;/p&gt;

&lt;p&gt;The problem is that &lt;strong&gt;those limitations aren't always clear&lt;/strong&gt; because C# doesn't give you any indicators for when objects are created or destroyed. If you don't know when an object has been created, &lt;strong&gt;it's easy to overwrite its properties&lt;/strong&gt; or mess up its reference variables in code somewhere down the line, which can lead to all sorts of &lt;strong&gt;problems like crashes and data corruption.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;💡 &lt;strong&gt;Tip:&lt;/strong&gt; To avoid these issues, learn how to &lt;strong&gt;recognize situations where objects are being created&lt;/strong&gt; so that you can ensure your code has a consistent set of references.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-creating-an-overly-general-classmethod"&gt;
  &lt;/a&gt;
  6. Creating an Overly General Class/Method
&lt;/h2&gt;

&lt;p&gt;One common mistake is &lt;strong&gt;creating a &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/classes"&gt;class&lt;/a&gt; or &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/methods"&gt;method&lt;/a&gt; that's too general.&lt;/strong&gt; This can happen when developers are new to C# because they aren't familiar with using inheritance effectively.&lt;/p&gt;

&lt;p&gt;Generally, classes/methods &lt;strong&gt;should only be as general as they need to be;&lt;/strong&gt; anything more than that is a waste of your time (and everyone else's).&lt;/p&gt;

&lt;p&gt;Keep in mind that if you follow object-oriented programming concepts, everything should have its own class. In other words, &lt;strong&gt;don't make single methods do more than one thing&lt;/strong&gt;  — create a different method for each task if it helps.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#7-exposing-too-much-information-about-an%C2%A0object"&gt;
  &lt;/a&gt;
  7. Exposing Too Much Information About an Object
&lt;/h2&gt;

&lt;p&gt;Exposed properties can &lt;strong&gt;make it easy for a hacker&lt;/strong&gt; to figure out how an object works. When you expose internal details of your application, &lt;strong&gt;you're making yourself vulnerable.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To avoid exposing too much about your objects, consider using properties that have private setters or constructors. &lt;strong&gt;You should also hide classes behind abstractions like interfaces as much as possible.&lt;/strong&gt; You never know when someone might be trying to reverse engineer your code or write plugins for it, so &lt;strong&gt;take precautions now rather than later.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;📚 &lt;strong&gt;Note:&lt;/strong&gt; Keeping things &lt;strong&gt;hidden&lt;/strong&gt; ensures that even if someone does break in, they won't be able to do much damage.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#8-unprotected-memory-access-vulnerabilities-in%C2%A0net-applications"&gt;
  &lt;/a&gt;
  8. Unprotected Memory Access Vulnerabilities in .NET Applications
&lt;/h2&gt;

&lt;p&gt;A research team at CVE Details found &lt;strong&gt;several memory safety vulnerabilities in .NET Framework applications written in C#&lt;/strong&gt;, including &lt;em&gt;Microsoft Office&lt;/em&gt; and &lt;em&gt;Adobe Acrobat&lt;/em&gt; (plugins, add-ons and extensions).&lt;/p&gt;

&lt;p&gt;These types of issues could &lt;strong&gt;allow an attacker to bypass operating system security permissions&lt;/strong&gt; or a sandbox security mechanism. In order to effectively address these types of issues, &lt;strong&gt;organizations must prioritize testing their .NET applications for vulnerabilities.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#9-use-safe-wellknown-libraries-whenever%C2%A0possible"&gt;
  &lt;/a&gt;
  9. Use Safe, Well-Known Libraries Whenever Possible
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;It's understandable that a programmer would be tempted to write their own code&lt;/strong&gt; for common tasks instead of reaching for an off-the-shelf solution. After all, if you have 20 years of experience in building enterprise applications, &lt;strong&gt;it can be hard to recognize&lt;/strong&gt; when a newer library is going to &lt;strong&gt;give you 80%&lt;/strong&gt; of what you need &lt;strong&gt;with 20%&lt;/strong&gt; of the work. &lt;/p&gt;

&lt;p&gt;However, &lt;strong&gt;it's much safer&lt;/strong&gt; (&lt;em&gt;and certainly more efficient&lt;/em&gt;) to use a well-known library whenever possible. &lt;strong&gt;Your time is valuable!&lt;/strong&gt; So why spend it reinventing solutions other people have already solved? &lt;strong&gt;This can save hours or even days in development,&lt;/strong&gt; especially on large projects.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#10-dont-write-your-own-encryption-algorithms"&gt;
  &lt;/a&gt;
  10. Don't Write Your Own Encryption Algorithms
&lt;/h2&gt;

&lt;p&gt;This one is a &lt;strong&gt;no-brainer🧠:&lt;/strong&gt; if you need secure encryption, &lt;strong&gt;just use an existing algorithm instead of writing your own.&lt;/strong&gt; It's easier said than done in some cases; for example, if you're working with cloud storage, it can be tricky to install third-party security software on your servers.&lt;/p&gt;

&lt;p&gt;Even if you do manage to get a reliable third-party library running properly, &lt;strong&gt;it might not have all of the features you need.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;📚Tip:&lt;/strong&gt; I recommend the following article to surprise you with how easy it is to decompile and modify a .NET Application 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/dotnetsafer/i-show-you-how-to-crack-a-net-application-3-clicks-47ke"&gt;How to Crack a .NET Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, it might lack authentication or might leave hardcoded data exposed in memory after decryption. In situations like these, writing your own cryptography implementation can make sense  — but even then, &lt;strong&gt;resist writing your own algorithms!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;💡 Tip:&lt;/strong&gt; Use an obfuscator. A C# or .NET Obfuscator is a tool that &lt;strong&gt;makes a program's code harder to read,&lt;/strong&gt; but allows it to work. This makes the program more secure. &lt;strong&gt;It makes it harder to crack, decompile, or reverse engineer the code&lt;/strong&gt; because the most important parts of the code are hidden so deeply that it is hard to figure out which parts of the application are important.&lt;/p&gt;

&lt;p&gt;I personally like &lt;strong&gt;&lt;a href="https://dotnetsafer.com/products/shield"&gt;Shield&lt;/a&gt;&lt;/strong&gt;, it is a clear example of an obfuscator apart from being Cloud, &lt;strong&gt;constantly updated&lt;/strong&gt;, with &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Dotnetsafer.Shield"&gt;Visual Studio integration&lt;/a&gt;&lt;/strong&gt; and more. &lt;/p&gt;

&lt;p&gt;I recommend anyone who develops in .NET to try it because &lt;strong&gt;it has a very complete free version&lt;/strong&gt; (and if you want maximum protection, &lt;strong&gt;its prices are cheap&lt;/strong&gt;).&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>programming</category>
      <category>security</category>
    </item>
    <item>
      <title>How to connect EFS disk to a Lambda function?</title>
      <author>Pawel Zubkiewicz</author>
      <pubDate>Mon, 24 Jan 2022 10:28:38 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-to-connect-efs-disk-to-a-lambda-function-360g</link>
      <guid>https://dev.to/aws-builders/how-to-connect-efs-disk-to-a-lambda-function-360g</guid>
      <description>&lt;p&gt;AWS added the possibility to attach &lt;a href="https://aws.amazon.com/efs/"&gt;Elastic File System (EFS)&lt;/a&gt; disks to Lambda functions. That opened some new possibilities and use cases. About a month ago, I used EFS with Step Functions to build an ETL process that feeds our data lake. It was a bit of fun and challenge at the same time, so I decided I will share my experience and solution with you.&lt;/p&gt;

&lt;p&gt;This article explains in detail how I configured the EFS disk in Serverless Framework. I hope this knowledge will allow you to discover new serverless possibilities. 😀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-aws-efs"&gt;
  &lt;/a&gt;
  What is AWS EFS?
&lt;/h2&gt;

&lt;p&gt;Let’s begin by explaining what we are dealing with. AWS EFS is something like a network drive that can be connected to many devices at the same time. EFS is an old service, so far it has supported EC2 instances and containers. It has only recently been integrated with AWS Lambda.&lt;/p&gt;

&lt;p&gt;After everything is set up in the infrastructure (as code, of course), the EFS disk becomes available to the Lambda function at &lt;code&gt;/mnt/your_efs_diskpath&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What does it change?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-new-scenarios-come-into-play-thanks-to-this-integration"&gt;
  &lt;/a&gt;
  What new scenarios come into play thanks to this integration?
&lt;/h2&gt;

&lt;p&gt;First and foremost, an EFS drive with virtually unlimited capacity removes the lack of space problem. Normally, functions are bound to 500MB limit and can only store files in &lt;code&gt;/tmp&lt;/code&gt; directory. With the EFS disc, we can freely cross this limit. So we can work with large files!&lt;/p&gt;

&lt;p&gt;All machine learning fans are excited by that!&lt;/p&gt;

&lt;p&gt;That’s right, Machine Learning is one of the main use cases unlocked with the new functionality. There are already reports on the web about what has been achieved with the combination of the ESF and Lambda. That also unlocked other use cases that require large resources, for example converting video files.&lt;/p&gt;

&lt;p&gt;Moreover, the directory &lt;code&gt;/tmp&lt;/code&gt; is an integral part of each container in which a given instance of the Lambda function runs. In contrast, EFS is shared between multiple Lambda devices or functions. This means that the file once saved is available to all users of the disk and will not disappear when AWS Lambda service destroys the function container.&lt;/p&gt;

&lt;p&gt;We can also use unlimited space to hold all kinds of libraries. For example, in the aforementioned machine learning, where libraries are of significant size, this will be exploited for sure.&lt;/p&gt;

&lt;p&gt;Second, the integration with the EFS service gives us an alternative to using AWS S3. In some scenarios, access to a regular system file turns out to be faster, more convenient, and cheaper. EFS is billed only for the amount of space we use (unless we choose extra features), by contrast, AWS S3 service also charges for each write and read (PUT and GET) operation. Often, frequent writing and reading to S3 generates more costs than the used space.&lt;/p&gt;

&lt;p&gt;This is one of the reasons why I used EFS in my latest application, which takes data from various sources and puts it in my data lake. Together with Lambda and Step Functions, it proved to be a perfect match.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages-of-the-efs"&gt;
  &lt;/a&gt;
  Disadvantages of the EFS
&lt;/h3&gt;

&lt;p&gt;Of course, as it usually happens in architecture, there are serious trade-offs here as well. EFS is just a regular file system. There are no events there, so forget to call the Lambda function automatically after someone uploads the file to the disk. Provisioning and disk configuration is very clunky, and compared to S3 it is a real ordeal, which you will see for yourself 😉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-connect-efs-disk-to-lambda-function"&gt;
  &lt;/a&gt;
  How to connect EFS disk to Lambda function?
&lt;/h2&gt;

&lt;p&gt;At the moment of writing, there is no official support in Serverless Framework yet (although it is already in CloudFormation and SAM) — I’m sure that when they introduce them, it will be much more convenient to add EFS to the function. For now, however, I am sharing my solution, which I developed based on articles by &lt;a href="https://lumigo.io/blog/unlocking-more-serverless-use-cases-with-efs-and-lambda/"&gt;Yan Cui&lt;/a&gt;, &lt;a href="https://aws.amazon.com/blogs/compute/using-amazon-efs-for-aws-lambda-in-your-serverless-applications/"&gt;James Beswick&lt;/a&gt;, and &lt;a href="https://read.acloud.guru/how-i-used-lambda-and-efs-for-massively-parallel-compute-96575bc85157"&gt;Peter Sbarski&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-you-need-a-vpc"&gt;
  &lt;/a&gt;
  First, you need a VPC
&lt;/h3&gt;

&lt;p&gt;Lambda function to be able to connect to the EFS disk must be in the same VPC as the disk. From 2019, this is not a problem because AWS has significantly reduced the cold starts in VPC.&lt;/p&gt;

&lt;p&gt;In order for the function to run in the VPC, it is enough to provide the subnet and Security Group IDs in the &lt;code&gt;serverless.yml&lt;/code&gt; configuration file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;writeToEfs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/writeToEfs/function.handler&lt;/span&gt;
    &lt;span class="na"&gt;vpc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;securityGroupIds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sg-xxxxxxxx&lt;/span&gt;
      &lt;span class="na"&gt;subnetIds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;subnet-xxxxxxxx&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;subnet-xxxxxxxx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#second-correct-privileges"&gt;
  &lt;/a&gt;
  Second, correct privileges
&lt;/h3&gt;

&lt;p&gt;The role with which the Lambda function will be run must have the appropriate rights. I copied those from &lt;a href="https://lumigo.io/blog/unlocking-more-serverless-use-cases-with-efs-and-lambda/"&gt;Yan’s blog post&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# other configuration &lt;/span&gt;
  &lt;span class="na"&gt;iamRoleStatements&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
      &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ec2:CreateNetworkInterface&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ec2:DescribeNetworkInterfaces&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ec2:DeleteNetworkInterface&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;elasticfilesystem:ClientMount&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;elasticfilesystem:ClientRootAccess&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;elasticfilesystem:ClientWrite&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;elasticfilesystem:DescribeMountTargets&lt;/span&gt;
      &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#next-the-efs-drive-itself"&gt;
  &lt;/a&gt;
  Next, the EFS drive itself
&lt;/h3&gt;

&lt;p&gt;Creating a drive is not as easy as it may seem and is far from the convenience of creating and using S3 buckets. In the &lt;code&gt;resources&lt;/code&gt; section of &lt;code&gt;serverless.yml&lt;/code&gt; define the following resources:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;NetworkDrive&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EFS::FileSystem&lt;/span&gt;
      &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;FileSystemTags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Name&lt;/span&gt;
            &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;LambdaDrive-${self:provider.stage}&lt;/span&gt;

    &lt;span class="na"&gt;MountTargetResourceA&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EFS::MountTarget&lt;/span&gt;
      &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;FileSystemId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;NetworkDrive&lt;/span&gt;
        &lt;span class="na"&gt;SubnetId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;subnet-xxxxxxxx&lt;/span&gt; &lt;span class="c1"&gt;# change that value to your id&lt;/span&gt;
        &lt;span class="na"&gt;SecurityGroups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;MountPointSecurityGroup.GroupId&lt;/span&gt;

    &lt;span class="na"&gt;MountTargetResourceB&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EFS::MountTarget&lt;/span&gt;
      &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;FileSystemId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;NetworkDrive&lt;/span&gt;
        &lt;span class="na"&gt;SubnetId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;subnet-xxxxxxxx&lt;/span&gt; &lt;span class="c1"&gt;# change that value to your id&lt;/span&gt;
        &lt;span class="na"&gt;SecurityGroups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;MountPointSecurityGroup.GroupId&lt;/span&gt;

    &lt;span class="na"&gt;MountPointSecurityGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::SecurityGroup&lt;/span&gt;
      &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;GroupDescription&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Security group to allow NFS - Lambda communication.&lt;/span&gt;
        &lt;span class="na"&gt;VpcId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;vpc-xxxxxxx&lt;/span&gt;
        &lt;span class="na"&gt;SecurityGroupIngress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
            &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2049&lt;/span&gt;
            &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2049&lt;/span&gt;
            &lt;span class="na"&gt;SourceSecurityGroupId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sg-xxxxxxxx&lt;/span&gt; &lt;span class="c1"&gt;# change that. Same as one for Lambda&lt;/span&gt;
        &lt;span class="na"&gt;SecurityGroupEgress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-1'&lt;/span&gt;
            &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;

    &lt;span class="na"&gt;AccessPointResource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EFS::AccessPoint&lt;/span&gt;
      &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;FileSystemId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;NetworkDrive&lt;/span&gt;
        &lt;span class="na"&gt;PosixUser&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;Uid&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1001&lt;/span&gt;
          &lt;span class="na"&gt;Gid&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1001&lt;/span&gt;
        &lt;span class="na"&gt;RootDirectory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;CreationInfo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;OwnerGid&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1001&lt;/span&gt;
            &lt;span class="na"&gt;OwnerUid&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1001&lt;/span&gt;
            &lt;span class="na"&gt;Permissions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;770&lt;/span&gt;
          &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/efs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why so much? I wonder myself. 🤔&lt;/p&gt;

&lt;p&gt;First, we have the EFS drive itself with a logical name NetworkDrive. Unfortunately, without the rest of the stuff, it is completely useless. We need to connect it to some virtual network, hence we have &lt;code&gt;MountTargetResourceA&lt;/code&gt; and &lt;code&gt;MountTargetResourceB&lt;/code&gt;, which allows us to get to it from the given subnets. Then we have the &lt;code&gt;MountPointSecurityGroup&lt;/code&gt; one that is necessary because otherwise network traffic will be blocked on the &lt;a href="https://docs.aws.amazon.com/efs/latest/ug/network-access.html"&gt;port that EFS uses&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is essential to provide the correct Security Group id in the parameter &lt;code&gt;SourceSecurityGroupId&lt;/code&gt; - this is the same group we assigned to the Lambda function at the very beginning.&lt;/p&gt;

&lt;p&gt;The last item is &lt;code&gt;AccessPointResource&lt;/code&gt;. And that is what AWS has cleverly invented in my opinion. Since many clients will connect to the same network drive, we need some way of managing users and access to files on that drive. And that’s &lt;code&gt;AccessPointResource&lt;/code&gt; abstracts away. There can be many access points, but I used one for all my Lambda functions. Contrary to appearances, a lot is happening here, and this configuration is closely related to the &lt;code&gt;NetworkDrive&lt;/code&gt; defined at the beginning. As I said, here we define the access rights, and depending on them AWS will or will not be able to initialize the file system for us during first use. Hence &lt;code&gt;Permissions&lt;/code&gt; set to &lt;code&gt;770&lt;/code&gt;(remember &lt;code&gt;chmod&lt;/code&gt;?). Thanks to this, a directory (folder) &lt;code&gt;/efs&lt;/code&gt; will be created for us. More information about that in the &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-accesspoint.html"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#combining-efs-disk-with-lambda-function"&gt;
  &lt;/a&gt;
  Combining EFS disk with Lambda function
&lt;/h3&gt;

&lt;p&gt;At the moment of writing this, it cannot be done elegantly in Serverless Framework. While waiting for official support, we can use a little-known functionality called &lt;code&gt;extensions&lt;/code&gt;, which allows you to modify the settings of the Lambda functions created in the section &lt;code&gt;functions&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;NetworkDrive&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;

  &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;WriteToEfsLambdaFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;FileSystemConfigs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Arn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;AccessPointResource.Arn&lt;/span&gt;
            &lt;span class="na"&gt;LocalMountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/mnt/efs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are peeking under the Serverless Framework hood.&lt;/p&gt;

&lt;p&gt;Congratulations, you’ve just become a specialist!&lt;/p&gt;

&lt;p&gt;But what’s going on here? Above, is a piece of CloudFormation that will be added to the code generated by Serverless Framework for the Lambda function that we defined at the very beginning and named &lt;code&gt;writeToEfs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The key here is the name of our extension, without going into the details of how Serverless Framework works, the convention is that "capitalized-function-name" + "LambdaFunction". This is how &lt;code&gt;writeToEfs&lt;/code&gt; becomes &lt;code&gt;WriteToEfsLambdaFunction&lt;/code&gt;. Later in this section, we give a reference to &lt;code&gt;AccessPointResource&lt;/code&gt; and say that the drive is to be mounted under a path &lt;code&gt;/mnt/efs&lt;/code&gt;. This is actually standard Linux disk mounting operation, after all Lambda runs on Amazon Linux.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-do-the-deploy"&gt;
  &lt;/a&gt;
  Let’s do the deploy
&lt;/h3&gt;

&lt;p&gt;That’s all the infrastructure code needed to connect your EFS disk to the Lambda function (assuming you already have a VPC). Unfortunately, in my project, the deployment of such a configuration did not work. After some tinkering, I came up with a solution. I had to do it in two steps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the first step, I commented out the &lt;code&gt;extensions&lt;/code&gt; section and did &lt;code&gt;sls deploy&lt;/code&gt; which finished successfully.&lt;/li&gt;
&lt;li&gt;In the second step, I uncommented this fragment and did deployment again. My Lambda functions were properly updated and had access to the EFS disk.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Hope this tutorial helps you to set up an EFS drive in your project using &lt;em&gt;Infrastructure as Code&lt;/em&gt; principle. As you can see, it is not simple, but once configured it works flawlessly.&lt;/p&gt;

&lt;p&gt;In my project, I am satisfied with this solution. I have 4 different Lambda functions configured exactly this way. The only difference is that each of them has its own configuration in the section extensions, but they all use the same &lt;code&gt;AccessPointResource&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Good luck with your project!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update"&gt;
  &lt;/a&gt;
  Update
&lt;/h2&gt;

&lt;p&gt;This article was originally posted on medium, but I wanted to move it to dev.to. &lt;/p&gt;

&lt;p&gt;Since publication, Serverless Framework added native support for EFS drives. You can read documentation &lt;a href="https://www.serverless.com/framework/docs/providers/aws/guide/functions#efs-configuration"&gt;here&lt;/a&gt;, and it is much simpler to implement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws&lt;/span&gt;

&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;handler.hello&lt;/span&gt;
    &lt;span class="na"&gt;fileSystemConfig&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;localMountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/mnt/example&lt;/span&gt;
      &lt;span class="na"&gt;arn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;arn:aws:elasticfilesystem:us-east-1:111111111111:access-point/fsap-0d0d0d0d0d0d0d0d0&lt;/span&gt;
    &lt;span class="na"&gt;vpc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;securityGroupIds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;securityGroupId1&lt;/span&gt;
      &lt;span class="na"&gt;subnetIds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;subnetId1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>serverless</category>
      <category>aws</category>
      <category>efs</category>
      <category>lambda</category>
    </item>
    <item>
      <title>Book Release:  Fundamentals of Creating a Great UI/UX by Creative Tim</title>
      <author>Creative Tim</author>
      <pubDate>Mon, 24 Jan 2022 10:03:59 +0000</pubDate>
      <link>https://dev.to/creativetim_official/book-release-fundamentals-of-creating-a-great-uiux-by-creative-tim-394e</link>
      <guid>https://dev.to/creativetim_official/book-release-fundamentals-of-creating-a-great-uiux-by-creative-tim-394e</guid>
      <description>&lt;p&gt;We are so excited to announce that the pre-orders for our upcoming book, &lt;a href="https://www.creative-tim.com/courses/fundamentals-ui-ux?ref=devto"&gt;"Fundamentals of Creating a Great UI/UX"&lt;/a&gt;, are already available starting from this week. With this new project, we aim to provide reliable up-to-date information and best practices for web designers that are beginners or web developers who want to develop their skills and develop an eye for design, not just for code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-story-behind-our-book"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The Story Behind our Book&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In 2014, Alexandru Paduraru and his team decided that it was time to create the development tools that would power businesses and individuals to create better-looking web projects worldwide. Later on, after 8 years of crafting the next generation's web design tools, UI Kits, Admin Dashboards, and Mobile App Templates, we decided to give back from our know-how. &lt;a href="https://www.linkedin.com/in/elisa-paduraru-b9ab83170/"&gt;Elisa Paduraru&lt;/a&gt;, the Chief Design Officer at &lt;a href="https://www.creative-tim.com/?ref=devto"&gt;Creative Tim&lt;/a&gt;, started to write our first UI/UX Book Guide based on our accumulated experience.&lt;/p&gt;

&lt;p&gt;Elisa started to write the book in 2020 during pandemic isolation and after long days of working combined with book writing, she finished the first draft during the Christmas holidays. The book had a set of feedback sessions coming from the team members, especially from &lt;a href="https://twitter.com/axelut"&gt;Alex Paduraru&lt;/a&gt; (&lt;a href="https://www.creative-tim.com/?ref=devto"&gt;Creative Tim's&lt;/a&gt; co-founder). So at the beginning of this year, the writing process was finally done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zJr8ocf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2022/01/img-4-copy-4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zJr8ocf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2022/01/img-4-copy-4.jpg" alt="book author" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we started talking about cover details with the talented designer Paul Virlan from &lt;a href="https://www.vrln.studio/"&gt;Studio VRLN&lt;/a&gt;, we thought about our "evergreen content" and nature. The last one provides the perfect inspirational framework for people. When you think about nature, you see leaves, birds, trees, same as when you think about a website, and you imagine website elements, buttons, navbars, cards. The cover is also inspired by the Victorian design. The information we included in our book is complex, strong,  and atemporal, the same as this style.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w2djosJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2022/01/book-cover.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2djosJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2022/01/book-cover.png" alt="book cover" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-the-book-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What does the book include?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.creative-tim.com/courses/fundamentals-ui-ux?ref=devto"&gt;Fundamentals of Creating a Great UI/UX&lt;/a&gt;&lt;/strong&gt; by Creative Tim includes six parts (chapters) that walk the reader through the process of designing a website from the basic elements like buttons, cards to the macro elements like sections and pages.&lt;br&gt;
After reading our book, you will learn how to Design &amp;amp; Use all the UI/UX design components for your Web Pages &amp;amp; Mobile Apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PZfBLrsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2022/01/img-4-copy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PZfBLrsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2022/01/img-4-copy.jpg" alt="ui ux design book content" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's see each chapter's details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Part 1: The Evolution Of Design - From hieroglyphs to glassmorphism, the first part of the book will help you better understand which events have substantially impacted the history of design, the evolution, and &lt;em&gt;the trends&lt;/em&gt; over time until today.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Part 2: UI/UX Design Introduction - In this part, you will better understand UI Design and UX Design concepts, what each one works with, and the differences between them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Part 3: The Anatomy Of The Elements- In this part, you will learn how to create elements such as buttons, inputs, shadows, color palettes, gradients, and more. You will also learn how to use icons or illustrations correctly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Part 4: An Eye For UI/UX Design - All elements can create sections such as navbars, headers, features, cards, teams, tables, footers, and more. You will learn how to place the elements, what the "must-have" elements are, and what to avoid.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Part 5: Real-Life Applications - In this part, you will learn which sections should appear on different pages such as About Us, Profile Page, E-commerce, Blog Post, Rental Page, Sign In/Sign Up, Policies, or Admin Dashboard.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Part 6: Great Website Designs - The last part contains details about the evolution of some websites that respect the design rules, have elements that adapt their design according to the trend, and present a positive User Experience.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J7A_tC-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2022/01/img-4-copy-5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J7A_tC-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2022/01/img-4-copy-5.jpg" alt="web design book on shelf" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is nice about our book is that it is not a theory book; we use the power of images and exemplification.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Curious about our book? We offer a free sample that will help you get the feel of it. &lt;a href="https://www.creative-tim.com/courses/fundamentals-ui-ux?ref=devto"&gt;Visit the official book page&lt;/a&gt; and sign up for the Free Preview!&lt;/p&gt;

&lt;p&gt;Are you already interested? &lt;a href="https://www.creative-tim.com/courses/fundamentals-ui-ux?ref=devto"&gt; Pre-order our book now&lt;/a&gt; and get the lowest price!&lt;/p&gt;

&lt;p&gt;We are constantly thinking about making our products intuitive, beautiful, and extremely easy to understand, so please tell us your thoughts about our upcoming book here on &lt;strong&gt;&lt;a href="https://twitter.com/CreativeTim/status/1484533234373386244"&gt;our Twitter post&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>ux</category>
      <category>userinterface</category>
      <category>books</category>
      <category>webdesign</category>
    </item>
    <item>
      <title>Responsive Background Images with image-set, the srcset for background-image</title>
      <author>Ingo Steinke</author>
      <pubDate>Mon, 24 Jan 2022 09:56:45 +0000</pubDate>
      <link>https://dev.to/ingosteinke/responsive-background-images-with-image-set-the-srcset-for-background-image-259a</link>
      <guid>https://dev.to/ingosteinke/responsive-background-images-with-image-set-the-srcset-for-background-image-259a</guid>
      <description>&lt;p&gt;Source sets can help us to make websites load faster. We can use them in different ways to offer browsers alternative versions of the same image to match screen size, pixel density, or network speed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-source-set-for-background-images"&gt;
  &lt;/a&gt;
  A Source Set for Background Images
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/image/image-set()"&gt;image-set&lt;/a&gt; property allows us to do the same for background images in CSS. This feature has been &lt;a href="https://stackoverflow.com/questions/26801745/is-there-a-srcset-equivalent-for-css-background-image"&gt;requested for years&lt;/a&gt;, but it did not get the same hype as other, newer, CSS features like &lt;a href="https://dev.to/ingosteinke/css-hasparent-selectors-287c"&gt;parent selectors&lt;/a&gt; or &lt;a href="https://dev.to/ingosteinke/a-css-container-queries-example-1le0"&gt;container queries&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-image-sets-step-by-step"&gt;
  &lt;/a&gt;
  Understanding Image Sets step by step
&lt;/h3&gt;

&lt;p&gt;First, let's make sure we understand source sets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-source-sets-and-how-to-use-them"&gt;
  &lt;/a&gt;
  What are source sets and how to use them?
&lt;/h2&gt;

&lt;p&gt;In a typical use case, we provide different image versions and add our recommendation for appropriate screen sizes, but it's up to the browser to decide which image to load:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;image-set()&lt;/code&gt; function allows an author to ignore most of these issues, simply providing multiple resolutions of an image and letting the user agent decide which is most appropriate in a given situation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source: &lt;a href="https://drafts.csswg.org/css-images-4/#image-set-notation"&gt;csswg.org&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#providing-image-files"&gt;
  &lt;/a&gt;
  Providing Image Files
&lt;/h2&gt;

&lt;p&gt;Let's start an put one image in an image element, for example &lt;a href="https://www.flickr.com/photos/fraktalisman/51224349248/"&gt;this photography of a landscape&lt;/a&gt;, 2048 pixels wide, and 1536 pixels high. As a high resolution photography with a lot of details, the file size is 557.7 kB, which is roughly half a megabyte.&lt;/p&gt;

&lt;p&gt;We will use an image element to show this photograph on our website. We must specify the image source (the URL to the image file) and the original image dimensions (width and height).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
  &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"large-landscape-2048x1536.jpg"&lt;/span&gt;
  &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"2048"&lt;/span&gt;
  &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"1536"&lt;/span&gt;
  &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"landscape"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding the following style sheet will make browsers resize our image (and every other image on that page) proportionally when the horizontal viewport with is smaller than the original image width.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can test that it works as intented.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/openmindculture/embed/zYEVBjO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-what-a-waste-of-bandwidth"&gt;
  &lt;/a&gt;
  But what a waste of bandwidth!
&lt;/h3&gt;

&lt;p&gt;This is responsive in a visual way, but even on a small old mobile phone, browsers will still load the same large image file, half a megabyte of data, only to display a shrunk version of the same image on a tiny screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hxQ3eIyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/piq1saqjg7k9fh23bly4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hxQ3eIyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/piq1saqjg7k9fh23bly4.jpg" alt="Same large image on a small mobile phone screen" width="539" height="271"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-much-smaller-image-file-that-still-looks-good"&gt;
  &lt;/a&gt;
  A much smaller Image File that still looks good
&lt;/h3&gt;

&lt;p&gt;If our mobile screen is 326 CSS pixels wide, at a resolution of 2 device pixels per CSS pixel, we need an image of 750 x 536 pixels to fill our screen. Scaling our image down to that size and saving it as a high quality JPEG file (with JPEG quality set to 80), the new image file only takes up 90 kilobytes, and the image still looks good.&lt;/p&gt;

&lt;p&gt;And if you're not too ambitious, so does the 70 kB file after further image processing on codepen's asset server:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--79IrxD4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.codepen.io/2332100/large-landscape-750x536.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--79IrxD4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.codepen.io/2332100/large-landscape-750x536.jpg" alt="large-landscape-750x536.jpg" width="750" height="563"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-source-sets-and-sizes-to-our-image-elements"&gt;
  &lt;/a&gt;
  Adding Source Sets and Sizes to our Image Elements
&lt;/h3&gt;

&lt;p&gt;Now let's tell our browser to use the smaller version if the screen size is not larger than 750 (CSS) pixels. We can add a &lt;code&gt;srcset&lt;/code&gt; attribute to our existing image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
  &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"large-landscape-2048x1536.jpg"&lt;/span&gt;
  &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"small-landscape-750x536.jpg 750w,
          large-landscape-2048x1536.jpg 20480w"&lt;/span&gt;
  &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"2048"&lt;/span&gt;
  &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"1536"&lt;/span&gt;
  &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"landscape"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more complex definitions, we could wrap a picture element around our image and add multiple source elements each with its own srcset attribute. That can be handy if we need to combine different aspects of &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images"&gt;responsive images&lt;/a&gt; for the same image element, like screen width and pixel density.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responsive-background-images"&gt;
  &lt;/a&gt;
  Responsive Background Images
&lt;/h2&gt;

&lt;p&gt;Why use background images at all? Well, in the old days before the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit"&gt;object-fit property&lt;/a&gt; and before layering content using &lt;code&gt;positioning&lt;/code&gt; and &lt;code&gt;z-index&lt;/code&gt; worked as it did today, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-image"&gt;background images&lt;/a&gt; were a very useful technique to code hero banners and they still provide an easy way to add optional decoration to pages and elements.&lt;/p&gt;

&lt;p&gt;Despite their smooth and flexible visual styling, it used to be impossible to optimize background images to save mobile bandwidth, and the warning about &lt;a href="https://caniuse.com/?search=image-set"&gt;"very limited support" of the image-set property&lt;/a&gt; probably did not help to make it popular among web developers either.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-image-sets-for-background-images"&gt;
  &lt;/a&gt;
  Using Image Sets for Background Images
&lt;/h3&gt;

&lt;p&gt;Defining an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/image/image-set()"&gt;image-set&lt;/a&gt; for a background-image url is easy if we know how to use &lt;code&gt;srcset&lt;/code&gt; attributes for &lt;code&gt;img&lt;/code&gt; and &lt;code&gt;source&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;A drawback of limited &lt;code&gt;image-set&lt;/code&gt; support in current browsers is that we can't use pixel width resolutions, so we have to set &lt;a href="https://elad.medium.com/understanding-the-difference-between-css-resolution-and-device-resolution-28acae23da0b"&gt;pixel density&lt;/a&gt; (&lt;code&gt;1x&lt;/code&gt;, &lt;code&gt;2x&lt;/code&gt;) etc. as a selector instead.&lt;/p&gt;

&lt;p&gt;We can use image-set as a replacement for a single url, so that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.landscape-background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(large-landscape-2048x1536.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...becomes...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;image-set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="sx"&gt;url("small-landscape-750x536.jpg")&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="sx"&gt;url("large-landscape-2048x1536.jpg")&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the sake of maximum browser compatibility, we should add a webkit-prefixed version as well as a single image url. Currently, Chrome browser still don't support the unprefixed version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("small-landscape-750x536.jpg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-webkit-image-set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="sx"&gt;url("small-landscape-750x536.jpg")&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="sx"&gt;url("large-landscape-2048x1536.jpg")&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;image-set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="sx"&gt;url("small-landscape-750x536.jpg")&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="sx"&gt;url("large-landscape-2048x1536.jpg")&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#progressive-enhancement-with-wunits"&gt;
  &lt;/a&gt;
  Progressive Enhancement with w-Units
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://drafts.csswg.org/css-images-4/#image-set-notation"&gt;CSS 4 Images draft&lt;/a&gt; already proposed to introduce width and height units in the future:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We should add "w" and "h" dimensions as a possibility to match the functionality of HTML’s picture.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the quoted "we should add" was meant to say that browser vendors should add the functionality to their CSS engines, it could also mean that we, as web developers, should add the dimensions to our code even before any browser actually supports them.&lt;/p&gt;

&lt;p&gt;Using &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Progressive_Enhancement"&gt;progressive enhancement&lt;/a&gt;, which means to use new features in an optional way, we could simply add another line with a width-based image-set. It will be ignored for containing (currently) invalid values, but it will start to work once browsers start to implement the new syntax.&lt;/p&gt;

&lt;p&gt;Last but not least, we can add a static background color which will display before the image has loaded, or in case the image fails to load for some reason.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;skyblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("small-landscape-750x536.jpg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-webkit-image-set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="sx"&gt;url("small-landscape-750x536.jpg")&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="sx"&gt;url("large-landscape-2048x1536.jpg")&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;image-set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="sx"&gt;url("small-landscape-750x536.jpg")&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="sx"&gt;url("large-landscape-2048x1536.jpg")&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;image-set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="sx"&gt;url("small-landscape-750x536.jpg")&lt;/span&gt; &lt;span class="m"&gt;750&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="sx"&gt;url("large-landscape-2048x1536.jpg")&lt;/span&gt; &lt;span class="m"&gt;20480&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Firefox 96 supports &lt;code&gt;image-set&lt;/code&gt; without prefix, but still sees &lt;code&gt;750w&lt;/code&gt; and &lt;code&gt;2048w&lt;/code&gt; as invalid values, falling back to the &lt;code&gt;image-set&lt;/code&gt; with density values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YJdaOe6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qzqto8icd2a1eioyr0d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YJdaOe6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qzqto8icd2a1eioyr0d.png" alt="Image description" width="674" height="209"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Internet Explorer would still recognize our first line, the background image wihtout an &lt;code&gt;image-set&lt;/code&gt;, so it looks we're all set to have a nice display in every browser, and a performance optimiziation for the progressive ones.&lt;/p&gt;

&lt;p&gt;This is our complete demo code in action:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/openmindculture/embed/KKXjMRr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next-in-css"&gt;
  &lt;/a&gt;
  What's next in CSS?
&lt;/h2&gt;

&lt;p&gt;Thanks for reading, and watch out, there is more to come!&lt;/p&gt;

</description>
      <category>css</category>
      <category>todayilearned</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A11y tips: don't remove focus indicator</title>
      <author>Carlos Espada</author>
      <pubDate>Mon, 24 Jan 2022 09:47:10 +0000</pubDate>
      <link>https://dev.to/carlosespada/a11y-tips-dont-remove-focus-indicator-1lpe</link>
      <guid>https://dev.to/carlosespada/a11y-tips-dont-remove-focus-indicator-1lpe</guid>
      <description>&lt;p&gt;Very often we use &lt;code&gt;outline: 0&lt;/code&gt; to remove the effect of focusing on an element. This, which initially prevents a border from wrapping around it when you click/touch on it, means that &lt;strong&gt;users navigating using the keyboard don't have a visual indicator of which element has focus&lt;/strong&gt;. And we know that &lt;a href="https://noti.st/ericwbailey/TcMJFP"&gt;every interactive element needs a focus indicator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, it is recommended to address this problem using some of these solutions:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-style-raw-outline-property-endraw-"&gt;
  &lt;/a&gt;
  1. Style &lt;code&gt;outline property&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Use CSS to give the outline the effect you want, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;button:focus {
  outline: 4px dashed black;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-style-element-itself"&gt;
  &lt;/a&gt;
  2. Style element itself
&lt;/h2&gt;

&lt;p&gt;Remove the outline but design other styles for the focused element, using the CSS properties that suit you best: &lt;code&gt;border&lt;/code&gt;, &lt;code&gt;background-color&lt;/code&gt;, &lt;code&gt;text-decoration&lt;/code&gt;, &lt;code&gt;color&lt;/code&gt;... In case you choose this option, it is important to be careful &lt;a href="https://www.w3.org/TR/WCAG21/#use-of-color"&gt;not to use the color&lt;/a&gt; as the only element to provide information about the focus, since there may be colorblind people who are not able to distinguish between the normal state and the focus state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;button:focus {
  outline: none;
  /* any accessible style you want here */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-remove-outline-for-mouse-users-only"&gt;
  &lt;/a&gt;
  3. Remove outline for mouse users only
&lt;/h2&gt;

&lt;p&gt;Since the problem occurs when mouse users click/touch on an interactive element, it seems best to remove the outline for these users only. Luckily we have a well-supported CSS pseudo-class at our disposal that allows us to do something like this: &lt;code&gt;:focus-within&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With &lt;a href="https://caniuse.com/css-focus-visible"&gt;good browser support&lt;/a&gt; we can now do something like what &lt;a href="https://twitter.com/LeaVerou/status/1045768279753666562"&gt;Lea Vérou proposes&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;button:focus:not(:focus-visible) {
  outline:none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way we &lt;strong&gt;only remove the outline for users clicking/touching&lt;/strong&gt; the element, and we can complete our styles using the same pseudo-class for keyboard navigation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;button:focus-visible {
  outline: 4px dashed black;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are very good articles on this subject by &lt;a href="https://css-tricks.com/the-focus-visible-trick/"&gt;Chris Coyier&lt;/a&gt; and &lt;a href="https://www.tpgi.com/focus-visible-and-backwards-compatibility/"&gt;Patrick H. Lauke&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>tips</category>
      <category>html</category>
    </item>
    <item>
      <title>What are modern examples of Embrace, Extend, and Extinguish?</title>
      <author>Meat Boy</author>
      <pubDate>Mon, 24 Jan 2022 09:40:20 +0000</pubDate>
      <link>https://dev.to/meatboy/what-are-modern-examples-of-embrace-extend-and-extinguish-21j3</link>
      <guid>https://dev.to/meatboy/what-are-modern-examples-of-embrace-extend-and-extinguish-21j3</guid>
      <description>&lt;p&gt;Some time ago Microsoft was well known for their EEE strategy to overtaking the IT markets. Firstly they created a tool using open and popular standards, then created a proprietary extension which quickly gained popularity and finally used this extension to control all the market and extinguish their competitor.&lt;/p&gt;

&lt;p&gt;Currently, I see nothing has changed in Microsoft and sometimes, you can still hear about open source anti-trust activities like removing at the last moment support for hot reloading from .NET &lt;a href="https://github.com/dotnet/sdk/pull/22217"&gt;https://github.com/dotnet/sdk/pull/22217&lt;/a&gt; and locking conversation. Just because PR spread over the Internet they reverted commit.&lt;/p&gt;

&lt;p&gt;In 2018 Slack chat moved from open source IRC and XMPP to their protocol making it difficult to swap messenger clients &lt;a href="https://www.theregister.com/2018/03/09/slack_cuts_ties_to_irc_and_xmpp/"&gt;https://www.theregister.com/2018/03/09/slack_cuts_ties_to_irc_and_xmpp/&lt;/a&gt; Anyone who wanted to stay with their ecosystem since then had to use their proprietary client.&lt;/p&gt;

&lt;p&gt;Some developers are afraid of the recent activity of Microsoft in the IT toolchain: GitHub, NPM, Copilot, TypeScript, Codespaces, VS Online and so on. Most of these tools are open source at the ground level, but they contain proprietary code and every time we are using them we are helping Microsoft to centralize the industry.&lt;/p&gt;

&lt;p&gt;What are others recent EEE examples you heard about?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>microsoft</category>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>AWS open source news and updates, #97</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 24 Jan 2022 09:23:24 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-97-55gf</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-97-55gf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#jan-22nd-2022-instalment-97"&gt;
  &lt;/a&gt;
  Jan 22nd, 2022 - Instalment #97
&lt;/h2&gt;

&lt;p&gt;Newsletter #97. &lt;/p&gt;

&lt;p&gt;Welcome to another edition of the AWS open source newsletter, packed with more great new open source projects, content, and events. This week, we have new projects that help you improve security by de-obfuscating strings, a library to help you automate the configuration of your build pipelines, a new Terraform module, a nice new VSCode plugin that will help you when working with IAM, and several more. For open source content, the topics covered this week include Apache Spark, Apache Iceberg, OpenTelemetry, PostgreSQL, Jupyter, Apache Airflow, Apache Log4j,RabbitMQ, Amazon Corretto, AWS ParallelCluster, Hugging Face, OpenSearch and more. Make sure you don't miss this weeks video on Smith, and we have four meet-ups happening later this week, check those out too. &lt;/p&gt;

&lt;p&gt;As always, if you have any cool posts you would like me to share, or if you have a request for particular topics you would like to see more of, then please drop me a message or write a comment below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Ashwin Pc, Drew Mullen, Ben Kehoe, Sebastian Bille, Gaurav Dhamija, 방신우, Vikram Mehto, Yoginder Sethi, Ganesh Sawhney, Qiang Zhang, Ryan Dsouza, Yaser Raja, Peter Celentano, Manuel Pozo, Jérôme Van Der Linden, Antonio Lagrotteria, Simon Willison, Beau Carnes, and Michael Dowling.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-open-source-projects"&gt;
  &lt;/a&gt;
  Latest open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;jndi-deobfuscate-python&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/1a1"&gt;jndi-deobfuscate-python&lt;/a&gt; This tool processes text logs to look for Java Naming and Directory Interface (JNDI) lookup strings, and outputs deobfuscated strings when it finds them. De-obfuscated strings can be used by other tools (not included), in order to retrieve malicious payloads from an attacker. JNDI lookup strings came into spotlight during a recent series of Common Vulnerabilities and Exposures (CVEs) around a popular Java logging library, Apache Log4j.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-codeseeder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/1a2"&gt;aws-codeseeder&lt;/a&gt; this project enables builders to easily "seed" python code to AWS CodeBuild for execution in their cloud environments. aws-codeseeder eliminates the need to install and configure libraries and utilities locally or on a build system (i.e. Jenkins). Instead the library enables builders to easily execute an AWS CodeBuild instance with the utilities they require then seed local python code to, and execute it within, the CodeBuild instance. Check out the detailed &lt;a href="https://aws-oss.beachgeek.co.uk/1a3"&gt;docs&lt;/a&gt; for more info on how this works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fMt7H_xB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aws-codeseeder.readthedocs.io/en/latest/_images/seedkit_resources.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fMt7H_xB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aws-codeseeder.readthedocs.io/en/latest/_images/seedkit_resources.png" alt="arch" width="588" height="648"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;route53-recovery-controller&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/1a5"&gt;route53-recovery-controller&lt;/a&gt; Drew Mullen released his first Terraform Module as part of the Amazon Web Services (AWS) Integrations &amp;amp; Automations (I&amp;amp;A) team, Route53 Application Recovery Controller (ARC). Route 53 ARC can continuously monitor your application's ability to recover from failure and control recovery across multiple AWS Availability Zones, AWS Regions, and on-premises environments. And this module makes it easy to add resiliency to your already deployed applications!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iam-legend&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/1a0"&gt;iam-legend&lt;/a&gt; AWS Community Builder Sebastian Bille has put together this useful extension for VSCode users (like me!) that make it easier when working with IAM policies, and provides IAM policy actions autocomplete, documentation &amp;amp; wildcard resolution. Nice!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-lambda-api-event-utils&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/19x"&gt;aws-lambda-api-event-utils&lt;/a&gt; this library from Ben Kehoe starts with the question "There are many other libraries, in Python and in other languages, for handling HTTP events in Lambda. So why this library?" Find out the answer by checking out this project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;assume-aws-role-action&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/19w"&gt;assume-aws-role-action&lt;/a&gt; these GitHub actions enable workflows to obtain AWS Access Credentials for a desired IAM Role using AWS IAM SAML and a GitHub Actions Repository Token.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;s3-credentials&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/19t"&gt;s3-credentials&lt;/a&gt; is an open source project from Simon Willison that helps you create credentials for accessing S3 buckets. In the latest update from his blog, &lt;a href="https://aws-oss.beachgeek.co.uk/19u"&gt;Weeknotes: s3-credentials prefix and Datasette 0.60&lt;/a&gt;, he shares some new features of this project, that might be especially helpful if you are building multi-tenet solutions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;simpleWSAPI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/19m"&gt;simpleWSAPI&lt;/a&gt; this repo contains an implementation of a simple real-time API based on WebSockets where clients are subscribed to a specific channel and any JSON data can be pushed automatically to clients listening/subscribed to the channel. To help you walk through this, check out the post from Ed Lima &lt;a href="https://aws-oss.beachgeek.co.uk/19n"&gt;Simple serverless WebSocket real-time API with AWS AppSync (little or no GraphQL experience required)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7mz8Jxvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0a57cb53ba59c46fc4b692527a38a87c78d84028/2021/11/18/simplewsapi1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7mz8Jxvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0a57cb53ba59c46fc4b692527a38a87c78d84028/2021/11/18/simplewsapi1.png" alt="arch" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cdk-neptune-knowledge-graph&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/1a4"&gt;cdk-neptune-knowledge-graph&lt;/a&gt; this sample application deploys a Neptune cluster and a static web site to provide a convenient user interface for building a knowledge graph. It uses Cognito to provide authentication to the web site. Read the README for more details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fMrV34o7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/cdk-neptune-knowledge-graph/blob/main/graph-ui.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fMrV34o7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/cdk-neptune-knowledge-graph/blob/main/graph-ui.png%3Fraw%3Dtrue" alt="demo" width="880" height="665"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dms-psql-post-data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sinwoobang/dms-psql-post-data"&gt;dms-psql-post-data&lt;/a&gt; 방신우 shares this script that may come in hand if you are looking at doing any PostgreSQL-to-PostgreSQL migrations. Why might you need this script? Well, its in the README, but to summarise, this script can help you resolve some artefacts that are not migrated, and if you want to target the migrated database as primary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DIAL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/19z"&gt;DIAL&lt;/a&gt; DIAL(Did I Alert Lambda?) is an open source project that provides a centralised security misconfiguration detection framework which completely runs on AWS Managed services like AWS API Gateway, AWS Event Bridge &amp;amp; AWS Lambda&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8hKnCpSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/CRED-CLUB/DIAL/blob/main/images/dial-arch.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8hKnCpSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/CRED-CLUB/DIAL/blob/main/images/dial-arch.png%3Fraw%3Dtrue" alt="arch" width="880" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-community-blog-posts"&gt;
  &lt;/a&gt;
  AWS and Community blog posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;OpenTelemetry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://aws-oss.beachgeek.co.uk/19d"&gt;Build an observability solution using managed AWS services and the OpenTelemetry standard&lt;/a&gt; Gaurav Dhamija, Vikram Mehto, and Yoginder Sethi share how to build an open standards observability solution using managed AWS services. The posts covers how to centralise the metrics, traces, and logs collected from workloads running in various AWS accounts using  AWS Distro for OpenTelemetry (ADOT), Amazon Managed Grafana, Amazon Managed Service for Prometheus, and Amazon OpenSearch Service. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vZBo-Hv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/12/21/fig3w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vZBo-Hv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/12/21/fig3w.jpg" alt="arch" width="880" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Graph Notebooks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whether you’re creating a new graph data model and queries, or exploring an existing graph dataset, it can be useful to have an interactive query environment that allows you to visualise the results. In the post, &lt;a href="https://aws-oss.beachgeek.co.uk/19h"&gt;Use Docker containers to deploy Graph Notebooks on AWS&lt;/a&gt;, Ganesh Sawhney and Qiang Zhang share how to host a Jupyter notebook and use it to load data into your Amazon Neptune database, query it, and visualise the results. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8HIT8fE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2018/10/31/neptune-sagemaker-4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8HIT8fE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2018/10/31/neptune-sagemaker-4.gif" alt="demo" width="760" height="944"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are looking for guidance on how to set up PostgreSQL bi-directional replication using pglogical, Yaser Raja and Peter Celentano have you covered in their post, &lt;a href="https://aws-oss.beachgeek.co.uk/19p"&gt;PostgreSQL bi-directional replication using pglogical&lt;/a&gt; [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Slgt6flQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/01/12/DBBLOG-1010-image001.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Slgt6flQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/01/12/DBBLOG-1010-image001.png" alt="arch" width="880" height="657"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ashwin Pc explores how plugins work for OpenSearch Dashboards in his post, &lt;a href="https://aws-oss.beachgeek.co.uk/1a6"&gt;Introduction to OpenSearch Dashboard Plugins&lt;/a&gt; [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Micro-Frontends using AWS CDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the follow up from a post where Antonio Lagrotteria shared the first in a series of posts aimed at showing you how to build a complete server-less architecture aiming at deploying and hosting client-side mono-repo micro-frontends, this time he is back with a post that walks you through how to provision a mono-repo micro-frontend architecture in his post, &lt;a href="https://aws-oss.beachgeek.co.uk/19s"&gt;A Complete CDK for a Module-Federated Micro-Frontends AWS Architecture&lt;/a&gt;. Great post, and can't wait for the next instalment. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1c4FCQ0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AMq2vklIlB-LvVLzQmh0xQQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1c4FCQ0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AMq2vklIlB-LvVLzQmh0xQQ.png" alt="arch" width="880" height="436"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you love learning from how companies use technology, then you will love this post from the lovely folk at Voodoo, &lt;a href="https://aws-oss.beachgeek.co.uk/19r"&gt;How Voodoo did Airflow 101&lt;/a&gt;. Manuel Pozo shares their experience on how Voodoo run Apache Airflow, but also the pros and cons of this platform, and a few tips to work around some issues they found during their journey.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B-AkZmmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2636/1%2A6Z9YMVIaXC4T0hDbjGI7eg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-AkZmmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2636/1%2A6Z9YMVIaXC4T0hDbjGI7eg.png" alt="demo" width="880" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Log4j&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A couple of posts this weeks, covering Apache Log4j. In light of the recent security incidents, these are worth reading.&lt;/p&gt;

&lt;p&gt;First up we have Ryan Dsouza, who provides guidance to help industrial customers respond to the recently disclosed Log4j vulnerability, in his post &lt;a href="https://aws-oss.beachgeek.co.uk/19k"&gt;What actions customers can take to protect, detect, and respond to Log4j vulnerabilities in Operational Technology (OT) and Industrial Internet of Things (IIoT) environments&lt;/a&gt;. He covers how to identify if you are susceptible to the issue, and then how to address the vulnerability.&lt;/p&gt;

&lt;p&gt;Following that we have our friends at the fictitious company, "I Love My Local Farmer", where Jérôme Van Der Linden takes a look at a practical example of how this might impact you and some of the options you have to help protect yourself in the post, &lt;a href="https://aws-oss.beachgeek.co.uk/19q"&gt;Protecting from vulnerabilities in Java: How we managed the log4j crisis&lt;/a&gt; [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other posts worth checking out&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week, these posts also caught my eye.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/19i"&gt;Distributed fine-tuning of a BERT Large model for a Question-Answering Task using Hugging Face Transformers on Amazon SageMaker&lt;/a&gt; looks at how you can accelerate training and fine-tuning of Hugging Face Transformer models using SageMaker distributed libraries&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/19j"&gt;Using the ParallelCluster 3 Configuration Converter&lt;/a&gt; helps you get started with AWS ParallelCluster 3, a major release with several changes and a lot of new features&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/19o"&gt;Using Spot Instances with AWS ParallelCluster and Amazon FSx for Lustre&lt;/a&gt; will help you optimise your costs by showing you how to configure AWS ParallelCluster to handle Spot Instance interruption&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/19l"&gt;Broadpeak Launches New Video Streaming API SaaS Platform with Support from AWS SaaS Factory&lt;/a&gt; takes a peek at how Broadpeak navigated business and technical decisions to build the new platform as a software-as-a-service (SaaS) solution&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Iceberg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Announced last week was Amazon EMR 6.5.0 now includes Apache Iceberg version 0.12. Apache Iceberg is an open table format for large data sets in Amazon S3 and provides fast query performance over large tables, atomic commits, concurrent writes, and SQL-compatible table evolution. With the current release, you can use Apache Spark 3.1.2 on EMR clusters with the Iceberg table format.&lt;/p&gt;

&lt;p&gt;Apache Iceberg offers an open source table format for data stored in data lakes that helps data engineers manage complex challenges such as managing continuously evolving data sets while maintaining query performance. Iceberg allows you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maintain transactional consistency on tables between multiple applications where files can be added, removed or modified atomically with full read isolation and multiple concurrent writes&lt;/li&gt;
&lt;li&gt;Implement full schema evolution to track changes to a table over time&lt;/li&gt;
&lt;li&gt;Issue time travel queries to query historical data and verify changes between updates&lt;/li&gt;
&lt;li&gt;Organize tables into flexible partition layouts with partition evolution enabling updates to partition schemes as queries and data volumes change without relying on physical directories&lt;/li&gt;
&lt;li&gt;Rollback tables to prior versions to quickly correct issues and return tables to a known good state&lt;/li&gt;
&lt;li&gt;Perform advanced planning and filtering in high performance queries on large data sets etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Amazon Corretto&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On January 18th, Amazon announced quarterly security and critical updates for Amazon Corretto Long-Term Supported (LTS) versions. Corretto 11.0.14 and 8.322 are now available for download. Amazon Corretto 17 updates will be available shortly after the release is tagged in the OpenJDK 17 repository. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Spark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon EMR now supports Apache Spark SQL to insert data into and update Glue Data Catalog tables when Lake Formation integration is enabled. Amazon EMR integration with AWS Lake Formation allows you to define and enforce database, table, and column-level permissions when Apache Spark users access data in Amazon S3 through the Glue Data Catalog. Previously, with AWS Lake Formation integration is enabled, you were limited to only being able to read data using Spark SQL statements such as SHOW DATABASES and DESCRIBE TABLE. Now, you can also insert data into, or update the Glue Data Catalog tables with these statements: INSERT INTO, INSERT OVERWRITE, and ALTER TABLE. This feature is enabled from Amazon EMR 5.34&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon MQ now provides support for RabbitMQ version 3.8.26. This patch update to RabbitMQ contains several fixes and enhancements compared to the previously supported version, RabbitMQ 3.8.23.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open Data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whilst not open source, open data helps builders spend more time on data analysis rather than data acquisition, making it easy to find a wide variety of datasets that are made publicly available. 19 new data sets are now available, covering climate and weather, geospatial, life sciences, and machine learning. Read the full announcement, &lt;a href="https://aws-oss.beachgeek.co.uk/19c"&gt;New datasets available on the Registry of Open Data from Meta, the Brazilian Space Agency, Radboud University Medical Center, and others&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#videos-of-the-week"&gt;
  &lt;/a&gt;
  Videos of the week
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Smithy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a must watch video for those building APIs. Michael Dowling, shares they story of this great open source project, the origins, how to get started and how it is being used. Really great session, where time just seems to fly past.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3GpZzu4guTE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are looking for an introduction in how to use AWS CDK as part of your infrastructure as code journey, then check out this session from Beau Carnes, &lt;a href="https://aws-oss.beachgeek.co.uk/19v"&gt;How to Define Cloud Infrastructure with the AWS Cloud Development Kit&lt;/a&gt;. Nice!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T-H4nJQyMig"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;If you have an event you want me to publish here, please contact me and I will include it in this listing. Later this week, we have some great meetups happening.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Startup Showcase Season&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;January 26th, 10:00am PDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join AWS and theCUBE as eight innovative companies within the AWS Partner ecosystem highlight their latest developments in the open source community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/194"&gt;Register via this link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serverless London User Group: Lambda Powertools&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;January, 26th at 9PM GMT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Don't miss this meetup, which will be "a relaxed conversation with Heitor Lessa, Sara Gerion and Yan Cui about the evolution of Lambda Powertools and how it can help you build serverless applications."&lt;/p&gt;

&lt;p&gt;Read more and register at, &lt;a href="https://aws-oss.beachgeek.co.uk/19b"&gt;Let's talk about Lambda Powertools!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud DevSecOps with Bridgecrew and Terraform&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Thursday, Jan 27 at 9am PT / 12pm ET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From scanning infrastructure as code (IaC) for security misconfigurations to implementing automated DevSecOps workflows, this workshop will provide a hands-on experience to automate your cloud security.&lt;/p&gt;

&lt;p&gt;Sign up and reserve your spot, &lt;a href="https://aws-oss.beachgeek.co.uk/19f"&gt;Cloud DevSecOps with Bridgecrew and Terraform&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Presto Tech Talks: Presto + Pinot by Uber &amp;amp; AWS Lake Formation by Ahana&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Friday, January 28, 5PM PT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join this meetup to hear from speakers who are using Presto with Pinot and Presto with AWS Lake Formation. Learn from experienced developers who use Presto at scale, with their highly valuable insights!&lt;/p&gt;

&lt;p&gt;Read and register &lt;a href="https://aws-oss.beachgeek.co.uk/19g"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cfp"&gt;
  &lt;/a&gt;
  CFP
&lt;/h3&gt;

&lt;p&gt;A heads up to folks who are interested in all things Apache Airflow. Apache Airflow Summit 2022 has been announced and the call for papers (cfp) is now open. The bar for sessions is always very high, so looking forward to this event already.&lt;/p&gt;

&lt;p&gt;If you have an idea for a talk, why not submit one via the cfp process. Check out the event, &lt;a href="https://aws-oss.beachgeek.co.uk/19e"&gt;Apache Airflow Summit 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you maybe have wanted to do a session, then I am very happy to help with feedback or coaching to help you feel more comfortable in creating and/or delivering your session. If this something that has been on your mind, but you just needed a little support, PLEASE get in touch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>Why custom react hooks could destroy your app performance</title>
      <author>Nadia Makarevich</author>
      <pubDate>Mon, 24 Jan 2022 08:49:37 +0000</pubDate>
      <link>https://dev.to/adevnadia/why-custom-react-hooks-could-destroy-your-app-performance-nid</link>
      <guid>https://dev.to/adevnadia/why-custom-react-hooks-could-destroy-your-app-performance-nid</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UVgD9GuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9d2ys6t8v55ah82fz3b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UVgD9GuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9d2ys6t8v55ah82fz3b.png" alt="Image description" width="880" height="563"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scary title, isn’t it? The sad part is that it’s true: for performance-sensitive apps custom React hooks can very easily turn into the biggest performance killer, if not written and used very carefully.&lt;/p&gt;

&lt;p&gt;I’m not going to explain how to build and use hooks here, if you never built a hook before, the React docs have a &lt;a href="https://reactjs.org/docs/hooks-custom.html"&gt;pretty good introduction&lt;/a&gt; into it. What I want to focus on today is their performance implication for complicated apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-build-a-modal-dialog-on-custom-hooks"&gt;
  &lt;/a&gt;
  Let’s build a modal dialog on custom hooks
&lt;/h2&gt;

&lt;p&gt;Essentially, hooks are just advanced functions that allow developers to use things like state and context without creating new components. They are super useful when you need to share the same piece of logic that needs state between different parts of the app. With hooks came a new era in React development: never before our components were as slim and neat as with hooks, and separation of different concerns was as easy to achieve as with hooks.&lt;/p&gt;

&lt;p&gt;Let’s for example, implement a modal dialog. With custom hooks, we can create a piece of beauty here.&lt;/p&gt;

&lt;p&gt;First, let’s implement a “base” component, that doesn’t have any state, but just renders the dialog when &lt;code&gt;isOpen&lt;/code&gt; prop is provided and triggers &lt;code&gt;onClose&lt;/code&gt; callback when a click on a blanket underneath the dialog happens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ModalProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;onClosed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ModalBase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onClosed&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;ModalProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isOpen&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;css&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;modalBlanketCss&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClosed&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;css&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;modalBodyCss&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Modal dialog content&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to the state management, i.e. the “open dialog/close dialog” logic. In the “old” way we would usually implement a “smart” version of it, which handles the state management and accepts a component that is supposed to trigger the opening of the dialog as a prop. Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ModalDialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;trigger&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;trigger&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ModalBase&lt;/span&gt; &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClosed&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which then will be used like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ModalDialog&lt;/span&gt; &lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is not a particularly pretty solution, we’re messing with the position and accessibility of the trigger component inside our modal dialog by wrapping it in a div. Not to mention that this unnecessary div will result in a slightly larger and messier DOM.&lt;/p&gt;

&lt;p&gt;And now watch the magic. If we extract the “open/close” logic into a custom hook, render this component &lt;strong&gt;inside&lt;/strong&gt; the hook, and expose API to control it as a return value from the hook, we can have the best of both worlds. In the hook we’ll have the “smart” dialog that handles its own state, but doesn’t mess with the trigger nor does it need one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;close&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ModalBase&lt;/span&gt; &lt;span class="na"&gt;onClosed&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;close&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And on the consumer side we’ll have a minimal amount of code while having the full control over what triggers the dialog:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ConsumerComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useModal&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Dialog&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If this isn’t perfection, I don’t know what is! 😍 &lt;a href="https://codesandbox.io/s/modal-dialog-example1-9ds2c?file=/src/App.tsx"&gt;See this beauty in codesandbox&lt;/a&gt;. Only don’t rush to use it in your apps right away, not until you read about its dark side 😅&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance-implications"&gt;
  &lt;/a&gt;
  Performance implications
&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="https://developerway.com/posts/how-to-write-performant-react-code"&gt;previous article&lt;/a&gt;, where I covered in detail various patterns that lead to poor performance, I implemented a “slow” app: just a simple not optimized list of ~250 countries rendered on the page. But every interaction there causes the entire page to re-render, which makes it probably the slowest simple list ever existed. &lt;a href="https://codesandbox.io/s/re-renders-final-bad-4znwe"&gt;Here is the codesandbox&lt;/a&gt;, click on different countries in the list to see what I mean (if you’re on the latest Mac throttle your CPU a bit to get a better impression).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;How to throttle CPU&lt;/b&gt;: in Chrome developer tools open “Performance” tab, and click on the “cog wheel” icon in the top right corner -&lt;br&gt;
  it will open a small additional panel with throttling options.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m going to use our new perfect modal dialog there and see what happens. The code of the main &lt;code&gt;Page&lt;/code&gt; component is relatively simple and looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;countries&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selectedCountry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSelectedCountry&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Country&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;savedCountry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSavedCountry&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Country&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMode&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Mode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Country settings&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Toggle theme&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CountriesList&lt;/span&gt; &lt;span class="na"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;countries&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onCountryChanged&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setSelectedCountry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;savedCountry&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;savedCountry&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SelectedCountry&lt;/span&gt; &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedCountry&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onCountrySaved&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setSavedCountry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectedCountry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now I need a button near the “Toggle theme” button that would open a modal dialog with some future additional settings for this page. Luckily, now it can’t be simpler: add &lt;code&gt;useModal&lt;/code&gt; hook at the top, add the button where it needs to be, and pass &lt;code&gt;open&lt;/code&gt; callback to the button. The &lt;code&gt;Page&lt;/code&gt; component barely changes and is still quite simple:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---wcsG7EU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kkynx9hikon0mnn8g3i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---wcsG7EU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kkynx9hikon0mnn8g3i.png" alt="Image description" width="880" height="616"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You probably already guessed the result 🙂 The slowest appearance of 2 empty divs ever existed 😱. &lt;a href="https://codesandbox.io/s/re-renders-bad-with-dialog-6egnq?file=/src/country-settings/page.tsx"&gt;See the codesandbox.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You see, what is happening here, is our &lt;code&gt;useModal&lt;/code&gt; hook uses state. And as we know, state changes are one of the reasons why a component would re-render itself. This also applies to hooks - if the hook's state changes, the "host" component will re-render. And it makes total sense. If we look closely inside &lt;code&gt;useModal&lt;/code&gt; hook, we’ll see that it’s just a nice abstraction around &lt;code&gt;setState&lt;/code&gt;, it exists &lt;strong&gt;outside&lt;/strong&gt; of the &lt;code&gt;Dialog&lt;/code&gt; component. Essentially it’s no different than calling &lt;code&gt;setState&lt;/code&gt; in the &lt;code&gt;Page&lt;/code&gt; component directly.&lt;/p&gt;

&lt;p&gt;And this is where the big danger of hooks is: yes, they help us make the API really nice. But what we did as a result, and the way of hooks is pretty much encouraging it, is essentially &lt;strong&gt;lifted state up&lt;/strong&gt; from where it was supposed to be. And it’s entirely not noticeable unless you go inside the &lt;code&gt;useModal&lt;/code&gt; implementation or have lots of experience with hooks and re-renders. I’m not even using the state directly in &lt;code&gt;Page&lt;/code&gt; component, all I'm doing from its perspective is rendering a &lt;code&gt;Dialog&lt;/code&gt; component and calling an imperative API to open it.&lt;/p&gt;

&lt;p&gt;In the “old world”, the state would’ve been encapsulated in the slightly ugly &lt;code&gt;Modal&lt;/code&gt; dialog with the &lt;code&gt;trigger&lt;/code&gt; prop, and the &lt;code&gt;Page&lt;/code&gt; component would’ve stayed intact when the button is clicked. Now the click on the button changes the state of &lt;strong&gt;the entire Page component&lt;/strong&gt;, which causes it to re-render (which is super slow for this app). And the dialog can only appear when React is done with all the re-renders it caused, hence the big delay.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AYTSLLex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycwdve22u34dgq81cz6a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AYTSLLex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycwdve22u34dgq81cz6a.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, what can we do about it? We probably won’t have time and resources to fix the underlying performance of the &lt;code&gt;Page&lt;/code&gt; component, as it would usually happen with the “real” apps. But at least we can make sure that the new feature doesn’t add to the performance problems and is fast by itself. All that we need to do here is just move the modal state “down”, away from the slow &lt;code&gt;Page&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SettingsButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useModal&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Open settings&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Dialog&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in &lt;code&gt;Page&lt;/code&gt; just render the &lt;code&gt;SettingsButton&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;countries&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// same as original page state&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      // stays the same
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SettingsButton&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      // stays the same
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when the button is clicked, only &lt;code&gt;SettingsButton&lt;/code&gt; component will re-render, the slow &lt;code&gt;Page&lt;/code&gt; component is unaffected. Essentially, we’re imitating the state model as it would’ve been in the “old” world while preserving the nice hooks-based API. See the &lt;a href="https://codesandbox.io/s/re-renders-bad-with-dialog-fixed-rrfey?file=/src/country-settings/page.tsx"&gt;codesandbox&lt;/a&gt; with the solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DylaYHgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdodquvil85v7hble1xt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DylaYHgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdodquvil85v7hble1xt.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-more-functionality-to-the-raw-usemodal-endraw-hook"&gt;
  &lt;/a&gt;
  Adding more functionality to the &lt;code&gt;useModal&lt;/code&gt; hook
&lt;/h2&gt;

&lt;p&gt;Let’s make our hooks performance conversation slightly darker 🙂. Imagine, for example, you need to track the scroll event in the modal content. Maybe you want to send some analytics events when the users scroll through the text, to track reads. What will happen if I don’t want to introduce “smart” functionality to the &lt;code&gt;BaseModal&lt;/code&gt; and do it in the &lt;code&gt;useModal&lt;/code&gt; hook?&lt;/p&gt;

&lt;p&gt;Relatively easy to achieve. We can just introduce a new state there to track scroll position, add event listeners in &lt;code&gt;useEffect&lt;/code&gt; hook and pass ref to the &lt;code&gt;BaseModal&lt;/code&gt; to get the content element to attach the listeners to. Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ModalBase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forwardRef&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onClosed&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;ModalProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RefObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isOpen&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;css&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;modalBlanketCss&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClosed&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;css&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;modalBodyCss&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        // add a lot of content here
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setScroll&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// same as before&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleScroll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setScroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleScroll&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleScroll&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ModalBase&lt;/span&gt; &lt;span class="na"&gt;onClosed&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we can do whatever with this state. Now let’s pretend that the previous performance problems are not that big of a deal, and use again this hook directly in the slow Page component. &lt;a href="https://codesandbox.io/s/re-renders-bad-with-dialog-with-scroll-p9wi8?file=/src/country-settings/page.tsx"&gt;See codesandbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The scrolling doesn’t even work properly! 😱 Every time I try to scroll the dialog content it resets to the top!&lt;/p&gt;

&lt;p&gt;Okay, let’s think logically. &lt;a href="https://www.developerway.com/posts/how-to-write-performant-react-code"&gt;We know already&lt;/a&gt;, that creating components inside render functions is evil, since React will re-create and re-mount them on every re-render. And we know that hooks change with every state change. That means now, when we introduced scroll state, on every scroll change we’re changing state, which causes the hook to re-render, which causes &lt;code&gt;Dialog&lt;/code&gt; component to re-create itself. Exactly the same problem, as with creating components inside render functions, with exactly the same fix: we need to extract this component outside of the hook or just memoise it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ModalBase&lt;/span&gt; &lt;span class="na"&gt;onClosed&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The focus behaviour is fixed, but there is another problem here: the slow &lt;code&gt;Page&lt;/code&gt; component re-renders on every scroll! That one is a bit hard to notice since the dialog content is just text. Try, for example, to reduce the CPU by 6x, scroll, and then just highlight the text in the dialog right away. The browser won’t even allow that, since it’s too busy with re-renders of the underneath &lt;code&gt;Page&lt;/code&gt; component! &lt;a href="https://codesandbox.io/s/re-renders-bad-with-dialog-with-scroll-fixed-scroll-0s5g3?file=/src/country-settings/page.tsx"&gt;See the codesandbox.&lt;/a&gt; And after a few scrolls, your laptop will probably try to take off to the Moon due to 100% CPU load 😅&lt;/p&gt;

&lt;p&gt;Yeah, we definitely need to fix that before releasing it to production. Let’s take another look at our component, especially at this part:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’re returning a new object on every re-render, and since we re-render our hook on every scroll now, that means that object changes on every scroll as well. But we’re not using the scroll state here, it’s entirely internal for the &lt;code&gt;useModal&lt;/code&gt; hook. Surely just memoising that object will solve the problem?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You know the best (or the scariest) part of this? IT DIDN’T! 😱 &lt;a href="https://codesandbox.io/s/re-renders-bad-with-dialog-with-scroll-fixed-scroll-and-memo-35lqx?file=/src/country-settings/modal-dialog.tsx"&gt;See the codesandbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And this is another huge performance-related bummer with hooks. Turns out, it doesn’t really matter, whether the state change in hooks is “internal” or not. &lt;strong&gt;Every state change in a hook, whether it affects its return value or not, will cause the “host” component to re-render.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And of course exactly the same story with chaining hooks: if a hook’s state changes, it will cause its “host” hook change as well, which will propagate up through the whole chain of hooks until it reaches the “host” component and re-renders it (which will cause another chain reaction of re-renders, only downstream now), &lt;strong&gt;regardless of any memoisation&lt;/strong&gt; applied in between.&lt;/p&gt;

&lt;p&gt;Extracting the “scrolling” functionality into a hook will make absolutely no difference, the slow Page component will re-render 😔.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useScroll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RefObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setScroll&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleScroll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setScroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleScroll&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleScroll&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scroll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useScroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;close&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ModalBase&lt;/span&gt; &lt;span class="na"&gt;onClosed&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/re-renders-bad-with-dialog-with-scroll-extracted-woeer?file=/src/country-settings/modal-dialog.tsx"&gt;See the codesandbox.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to fix it? Well, the only thing to do here is to move the scroll tracking hook outside of the &lt;code&gt;useModal&lt;/code&gt; hook and use it somewhere where it won’t cause the chain of re-renders. Can introduce &lt;code&gt;ModalBaseWithAnalytics&lt;/code&gt; component for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ModalBaseWithAnalytics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ModalProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scroll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useScroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ModalBase&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then use it in the &lt;code&gt;useModal&lt;/code&gt; hook instead of the &lt;code&gt;ModalBase&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// the rest is the same as in the original useModal hook&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ModalBaseWithAnalytics&lt;/span&gt; &lt;span class="na"&gt;onClosed&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the state changes due to the scrolling will be scoped to the &lt;code&gt;ModalBaseWithAnalytics&lt;/code&gt; component and won’t affect the slow &lt;code&gt;Page&lt;/code&gt; component. &lt;a href="https://codesandbox.io/s/re-renders-bad-with-dialog-scroll-fixed-for-good-v6ohp?file=/src/country-settings/modal-dialog.tsx"&gt;See the codesandbox.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is all for today! Hope this article scared you enough helped you to feel more comfortable with custom hooks and how to write and use them without compromising the performance of your apps. Let’s recap the rules of performant hooks before leaving:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;every state change in a hook will cause its “host” component to re-render, regardless of whether this state is returned in the hook value and memoised or not&lt;/li&gt;
&lt;li&gt;the same with chained hooks, every state change in a hook will cause all “parent” hooks to change until it reaches the “host” component, which again will trigger the re-render&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the things to watch out for, when writing or using custom hooks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;when using a custom hook, make sure that the state that this hook encapsulates is not used on the level it wouldn’t have been used with the components approach. Move it “down” to a smaller component if necessary&lt;/li&gt;
&lt;li&gt;never implement “independent” state in a hook or use hooks with the independent state&lt;/li&gt;
&lt;li&gt;when using a custom hook, make sure it doesn’t perform some independent state operations, that are not exposed in its return value&lt;/li&gt;
&lt;li&gt;when using a custom hook, make sure that all hooks that it uses also follow the rules from the above&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stay safe and may your apps be blazing fast from now on! ✌🏼&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;Originally published at &lt;a href="https://www.developerway.com"&gt;https://www.developerway.com&lt;/a&gt;. Check out the website for more articles like this. Subscribe to the newsletter to get notified as soon as the next article comes out.&lt;/p&gt;

</description>
      <category>react</category>
      <category>performance</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Automatically Tweet popular articles from DEV</title>
      <author>Anshuman Bhardwaj</author>
      <pubDate>Mon, 24 Jan 2022 08:47:57 +0000</pubDate>
      <link>https://dev.to/anshuman_bhardwaj/automatically-tweet-popular-article-from-dev-246f</link>
      <guid>https://dev.to/anshuman_bhardwaj/automatically-tweet-popular-article-from-dev-246f</guid>
      <description>&lt;p&gt;Hi everyone, over last week I've built this project which will automatically tweet my popular posts from DEV. It is live on &lt;a href="https://tma.theanshuman.dev"&gt;Tweet My Articles&lt;/a&gt; and you can also fork it from &lt;a href="https://github.com/Anshuman71/tweet-my-articles"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tweet-my-articles"&gt;
  &lt;/a&gt;
  Tweet My Articles
&lt;/h2&gt;

&lt;p&gt;This is an open-source tool made to automatically tweet famous DEV posts to an author's Twitter account.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;I am a technical blogger on DEV. Recently, my posts have been getting a lot of traction on the platform, and to me, it is news worth sharing with the world. So, I started tweeting milestones like 1000 views and all.&lt;/p&gt;

&lt;p&gt;At the start, it was good but, then one day Daily.dev &lt;a class="mentioned-user" href="https://dev.to/dailydevtips1"&gt;@dailydevtips1&lt;/a&gt; tagged me in this tweet.&lt;br&gt;
 &lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--L9hkorv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1482995345496088577/xbEIfqRw_normal.jpg" alt="Anshuman Bhardwaj profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Anshuman Bhardwaj
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @sun_anshuman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Definitely showing this to my parents &lt;a href="https://t.co/PH4YMDuvvk"&gt;twitter.com/dailydotdevhi/…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:17 PM - 18 Jan 2022
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Hello from daily.dev 👋
          &lt;/span&gt;
          @dailydotdevhi
        &lt;/div&gt;
        @sun_anshuman your article “Asynchronous loops in Javascript - using forEach, map and for loop” was viewed 250 times. Your parents would be proud 😄

Claim ownership on your post: https://t.co/33H8SsarqH
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1483503834291126272" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1483503834291126272" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1483503834291126272" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
And it got me thinking that "if they can automate it, so can I". 

&lt;p&gt;And that's how my friends, I started bootstrapping this project.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#technical-problem-statement"&gt;
  &lt;/a&gt;
  Technical Problem statement
&lt;/h2&gt;

&lt;p&gt;We want to send a tweet when article X on DEV crosses a pre-defined milestone.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#breakdown"&gt;
  &lt;/a&gt;
  Breakdown
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Run a Cron job using GitHub Actions&lt;/li&gt;
&lt;li&gt;Make POST request to our API endpoints&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and the API will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fetch all published articles of the Author from DEV&lt;/li&gt;
&lt;li&gt;if the article exists in the database:

&lt;ul&gt;
&lt;li&gt;if a new milestone is achieved:

&lt;ul&gt;
&lt;li&gt;Create and article a tweet on Twitter&lt;/li&gt;
&lt;li&gt;Update database entry with new milestone&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;else:

&lt;ul&gt;
&lt;li&gt;do nothing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;the article does not exist in the database:

&lt;ul&gt;
&lt;li&gt;create a shortUrl for article URL using Rebrandly&lt;/li&gt;
&lt;li&gt;create a new database item for the article&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#technical-stack"&gt;
  &lt;/a&gt;
  Technical Stack
&lt;/h2&gt;

&lt;p&gt;This project is a hobby project, for a nonprofit. All the tools used here are free and openly available.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;NextJS&lt;/strong&gt;: this project is bootstrapped using NextJS.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GitHub&lt;/strong&gt;: is used for source code management and running the cron jobs using GitHub actions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Vercel&lt;/strong&gt;: as the platform. We use their "Serverless and Edge functions".&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;MongoDB Atlas&lt;/strong&gt;: is used as a Database provider to persist milestone information for each article.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rebrandly&lt;/strong&gt;: as a link shortener service&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;
  &lt;a href="#how-do-i-use-this-project"&gt;
  &lt;/a&gt;
  How do I use this project?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h3&gt;

&lt;p&gt;Fork this project from &lt;a href="https://github.com/Anshuman71/tweet-my-articles"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h3&gt;

&lt;p&gt;Create an account on&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vercel&lt;/li&gt;
&lt;li&gt;Twitter Developer&lt;/li&gt;
&lt;li&gt;Atlas&lt;/li&gt;
&lt;li&gt;Rebrandly&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h3&gt;

&lt;p&gt;Set up and get the following credentials from each platform&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#dev"&gt;
  &lt;/a&gt;
  DEV
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DEV_USERNAME=&amp;lt;xxxxxxxxxxxxxxxxxx&amp;gt;
DEV_API_URL=&amp;lt;xxxxxxxxxxxxxxxxxx&amp;gt;
DEV_API_KEY=&amp;lt;xxxxxxxxxxxxxxxxxx&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can get the &lt;code&gt;API_KEY&lt;/code&gt; from Settings &amp;gt; Account &amp;gt; DEV Community API Keys&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This needs to be specified in Vercel Environment variables&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#vercel"&gt;
  &lt;/a&gt;
  Vercel
&lt;/h4&gt;

&lt;p&gt;Sign up using your GitHub to allow Continuous Deployment.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#twitter"&gt;
  &lt;/a&gt;
  Twitter
&lt;/h4&gt;

&lt;p&gt;Sign up for the &lt;a href="https://developer.twitter.com/en"&gt;Twitter developer program&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please read all instructions there to make sure you get API access to tweet on behalf of your account.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create a New project &amp;gt; Create New App &amp;gt; Allow Oauth1.0 with Read &amp;amp; Write Access.&lt;/p&gt;

&lt;p&gt;Then get the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CONSUMER_KEY=&amp;lt;xxxxxxxxxxxxxxxxxx&amp;gt;
CONSUMER_KEY_SECRET=&amp;lt;xxxxxxxxxxxxxxxxxx&amp;gt;
TWITTER_ACCESS_TOKEN=&amp;lt;xxxxxxxxxxxxxxxxxx&amp;gt;
TWITTER_ACCESS_TOKEN_SECRET=&amp;lt;xxxxxxxxxxxxxxxxxx&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This needs to be specified in Vercel Environment variables&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#mongodb-atlas"&gt;
  &lt;/a&gt;
  MongoDB Atlas
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/atlas/database"&gt;Sign up&lt;/a&gt; on Atlas, create a new cluster, click on Connect &amp;gt; Connect using Application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DB_NAME=&amp;lt;xxxxxxxxxxxxxxxxxx&amp;gt;
ATLAS_URI_PROD=&amp;lt;xxxxxxxxxxxxxxxxxx&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The DB_NAME should be the same as specified in the Connection URI&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is a sample URI&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mongodb+srv://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@cluster0.mongodb.net/&amp;lt;database-name&amp;gt;?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This needs to be specified in Vercel Environment variables&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#rebrandly"&gt;
  &lt;/a&gt;
  Rebrandly
&lt;/h4&gt;

&lt;p&gt;Sign up and register your custom domain there. Then get an API KEY.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SHORTNER_API_KEY=&amp;lt;xxxxxxxxxxxxxxxxxx&amp;gt;
SHORTNER_DOMAIN=&amp;lt;xxxxxxxxxxxxxxxxxx&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This needs to be specified in Vercel Environment variables&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#secure-api-key"&gt;
  &lt;/a&gt;
  Secure API key
&lt;/h4&gt;

&lt;p&gt;We would also want to secure our own API from unauthorized users. Let's generate a long enough random string to use as API_KEY for our service. Requests with this key will be rejected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;API_KEY=&amp;lt;xxxxxxxxxxxxxxxxxx&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This needs to be specified at&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Vercel Environment variables&lt;/li&gt;
&lt;li&gt;GitHub Environment variables (to be used by actions)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#oneclick-deploy-using-vercel"&gt;
  &lt;/a&gt;
  One-click deploy using Vercel
&lt;/h4&gt;

&lt;p&gt;If you just want to use the tool, this is all you need to do.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2FAnshuman71%2Ftweet-my-articles&amp;amp;project-name=tweet-my-articles"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--45UgOyrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vercel.com/button" alt="Deploy with Vercel" width="92" height="32"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h4&gt;

&lt;p&gt;Copy the same credentials in a &lt;code&gt;.env.local&lt;/code&gt; file for development purposes. A sample &lt;code&gt;.env.development&lt;/code&gt; file is present in the repo for help.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;yarn&lt;/code&gt; in the repo to install dependencies.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;yarn dev&lt;/code&gt; to run the local server.&lt;/li&gt;
&lt;li&gt;Push to the remote repo on GitHub to automatically deploy to Vercel.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#faqs"&gt;
  &lt;/a&gt;
  FAQs
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Why do we need a link shortener?&lt;br&gt;
The default URL provided by DEV is sometimes too long for Twitter to load preview and without preview, the article doesn't look all that good. So I used a shortener to solve this issue. Rebrandly provides free custom domain usage up to 500 links which are good enough for our use case.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why not make a SAAS?&lt;br&gt;
Well, I would love to. But because this project holds a lot of sensitive information like Twitter API keys, I would feel better in letting people own their data. That way everyone is responsible for keeping their project safe.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;I'm going to extend this article into a series to explain each step in detail as well. Please follow me to get updates on that as well.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope you enjoyed reading this article as much as I enjoyed writing it! If so, leave a ❤️ or a 🦄! Should you have any feedback or questions, please feel free to put them in the comments below. I would love to hear and work on them.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For more such content, please follow me &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/sun_anshuman"&gt;Follow me on Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC9-rIQbbBVxJyTIWPdhK4YA"&gt;Subscribe to my YouTube channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://anshuman-bhardwaj.medium.com"&gt;Follow me on Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Until next time&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/kRkJXYahXjSE0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/kRkJXYahXjSE0/giphy.gif" width="245" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>showdev</category>
      <category>nextjs</category>
      <category>javascript</category>
    </item>
    <item>
      <title>React Search Filter</title>
      <author>Abayomi Ogunnusi</author>
      <pubDate>Mon, 24 Jan 2022 08:37:56 +0000</pubDate>
      <link>https://dev.to/drsimplegraffiti/react-search-filter-2ec8</link>
      <guid>https://dev.to/drsimplegraffiti/react-search-filter-2ec8</guid>
      <description>&lt;p&gt;We'll learn how to conduct a search filter in React utilizing React Hooks and axios as our data fetching data source today. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;p&gt;Create a react app &lt;code&gt;npx create-react-app .&lt;/code&gt;&lt;br&gt;
Install axios: npm i axios&lt;/p&gt;

&lt;p&gt;Create a component and name it SearchFilter&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9IuXRnEp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0h8hqo27c8uotvdi39v.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9IuXRnEp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0h8hqo27c8uotvdi39v.PNG" alt="Image description" width="377" height="414"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In your SearchFilter.jsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SearchFilter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Search&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SearchFilter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your App.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SearchFilter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./SearchFilter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SearchFilter&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run: &lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;Let's create an input to handle our search function in the SearchFilter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SearchFilter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Search&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;enter search term .....&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SearchFilter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U1byLGB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwtqja8kxzornn9duysy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U1byLGB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwtqja8kxzornn9duysy.PNG" alt="Image description" width="880" height="273"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Now, let's visit [site]&lt;a href="https://www.mockaroo.com/"&gt;https://www.mockaroo.com/&lt;/a&gt;) to get our mock data.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tlvmy9tx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3sxa1zb8pkru1dr1j3x.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tlvmy9tx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3sxa1zb8pkru1dr1j3x.PNG" alt="Image description" width="880" height="374"&gt;&lt;/a&gt;&lt;br&gt;
Note: Ensure you select the &lt;code&gt;JSON&lt;/code&gt; option &lt;/p&gt;

&lt;p&gt;Import your mock data into your project.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ElN0REuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zct8nqyb4qi2mtdy4sgo.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ElN0REuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zct8nqyb4qi2mtdy4sgo.PNG" alt="Image description" width="880" height="371"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Let's flesh out the function to fire on every onchange.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;JSONDATA&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./MOCK_DATA.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SearchFilter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;searchTerm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSearchTerm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;enter search term .....&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setSearchTerm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSONDATA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchTerm&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchTerm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleLowerCase&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SearchFilter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We import the mock data gotten.&lt;/li&gt;
&lt;li&gt;Then imported our &lt;code&gt;useState&lt;/code&gt; Hook.&lt;/li&gt;
&lt;li&gt;initiated the state to an empty string.&lt;/li&gt;
&lt;li&gt;Created an onchange function
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setSearchTerm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;To acquire our value, we used the filter and map functions, and we converted the filtered value to lowercase to avoid case sensitive errors. &lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P_dLk08v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ou58jzh56lmmdbyi64ay.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_dLk08v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ou58jzh56lmmdbyi64ay.PNG" alt="Image description" width="880" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Background Color from &lt;a href="https://coolors.co/0a090c-f0edee-07393c-2c666e-90ddf0"&gt;coolors.co&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Source Code Link: &lt;a href="https://github.com/drsimplegraffiti/sandbox/tree/main/searchfilter"&gt;Click&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for reading, and be sure to check out my post on React Conditional Rendering &lt;a href="https://dev.to/drsimplegraffiti/react-conditional-rendering-32b4"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resource"&gt;
  &lt;/a&gt;
  Resource
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=mZvKPtH9Fzo"&gt;React filter by Pedro Tech&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Live Coding &amp; Streaming - 10 Ways Developers Make Money Working from Home - E02</title>
      <author>Dan Fleser</author>
      <pubDate>Mon, 24 Jan 2022 08:01:40 +0000</pubDate>
      <link>https://dev.to/danfleser/live-coding-streaming-10-ways-developers-make-money-working-from-home-e02-1d0</link>
      <guid>https://dev.to/danfleser/live-coding-streaming-10-ways-developers-make-money-working-from-home-e02-1d0</guid>
      <description>&lt;p&gt;Live web development is a new and emerging source of income for web developers with the right skills.&lt;/p&gt;

&lt;p&gt;Real-time live demonstrations of building web applications can be a very engaging experience for beginner developers who try to learn how to build web applications.&lt;/p&gt;

&lt;p&gt;The goal is to show developers what the end-product should look like but also to help &amp;amp; engage them in their journey towards becoming great software engineers.&lt;/p&gt;

&lt;p&gt;Earn money from live coding, teaching other people how to code, or simply showing your skills in front of thousands of people.&lt;/p&gt;

&lt;p&gt;In this video series, I share the best ways and how to increase your money income as a web developer while working from home.&lt;/p&gt;

&lt;p&gt;Video Here: &lt;a href="https://youtu.be/d7jczFpBKl0"&gt;click me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉 Subscribe to Dan Later - &lt;a href="https://bit.ly/31SdiZv"&gt;https://bit.ly/31SdiZv&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Timeline - Live Coding &amp;amp; Streaming&lt;br&gt;
00:00 Intro&lt;br&gt;
00:23 Why live coding?&lt;br&gt;
00:36 Where to start?&lt;br&gt;
01:11 Introvert? No problem&lt;br&gt;
01:31 Listen to your audience&lt;br&gt;
01:41 Have fun coding&lt;br&gt;
01:52 Platforms to stream&lt;br&gt;
01:56 Make money coding live&lt;br&gt;
02:15 Set goals for your audience&lt;br&gt;
02:33 Acknowledge donations&lt;br&gt;
02:41 Subscriptions&lt;br&gt;
02:50 Mentoring sessions&lt;br&gt;
03:05 Outro&lt;/p&gt;

&lt;p&gt;Other parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Running A Youtube Channel - &lt;a href="https://youtu.be/MMbp6eNk4Q8"&gt;https://youtu.be/MMbp6eNk4Q8&lt;/a&gt;
How did I start YouTube?
MrBeast YouTube Growth Success
YouTube Niches
Recording software for YouTube videos - Obs is free
Video editing software for YouTube videos - Davinci Resolve is Free
Increase YouTube content engagement&lt;/li&gt;
&lt;li&gt;Live Coding &amp;amp; Streaming - &lt;a href="https://youtu.be/d7jczFpBKl0"&gt;https://youtu.be/d7jczFpBKl0&lt;/a&gt;
Make money coding live
Set goals for your audience
Mentoring sessions&lt;/li&gt;
&lt;li&gt;Courses - &lt;a href="https://youtu.be/zs4abEW9nNk"&gt;https://youtu.be/zs4abEW9nNk&lt;/a&gt;
Why create a course?
Youtube videos
How to create a course?
Create a course outline
Grow an audience
Platforms to sell a course
Publish course to your own website
Create your own Newsletter
Ways to Get People to Buy Your Products
Post-launch Discounts&lt;/li&gt;
&lt;li&gt;Digital Products - &lt;a href="https://youtu.be/ORbLO2rjHaQ"&gt;https://youtu.be/ORbLO2rjHaQ&lt;/a&gt;
What products to create?
Why digital products?
Instant access
Where to sell?
How to create a product?
How to write a book Google Docs
Create page templates/Create page themes
What to do when you don’t have ideas? - boost ideas
Build an MVP
Create your own Newsletter
Growing Your Audience
Sell anything by Creating a Bundle&lt;/li&gt;
&lt;li&gt;Software-as-a-service - &lt;a href="https://youtu.be/lnwifUqJ7HU"&gt;https://youtu.be/lnwifUqJ7HU&lt;/a&gt;
What the hell is SaaS?
How to build a SaaS?
Ways to start
How to deal with competitors
Lean thinking
Build features that people actually use
How to Validate Feature and Product Ideas Before You Build
Choosing the Right Tech Stack for Your Project
Scaling tips
Trending Tech Stack
Choosing the Pricing model for your business
A typical validated learning process
Analysis Data
What is User testing?
What is Split testing?
Saas Marketing Examples&lt;/li&gt;
&lt;li&gt;Why&amp;amp;how To Blog - &lt;a href="https://youtu.be/E5XNUr04p7k"&gt;https://youtu.be/E5XNUr04p7k&lt;/a&gt;
Why start blogging?
Write articles
How to increase Motivation as a Blogger
Stop thinking and start doing
Find your audience
What do you need to start blogging?
How to create a blog?
How to grow an audience
Create an email newsletter
How to make money blogging?
How to add Ads on the blog
How to Affiliate and Market a blog?
Make money via Sponsored posts
How to promote services and products?
Create content and get paid&lt;/li&gt;
&lt;li&gt;Freelancing - &lt;a href="https://youtu.be/JjGTrdJkiJs"&gt;https://youtu.be/JjGTrdJkiJs&lt;/a&gt;
How to create a website
Be Professional - Register an LLC
Why choose Freelancing?
How to start freelancing
Outsourcing
How to create a good portfolio
What a great portfolio should contain
How to charge for a website
Hourly Pricing
Project-based Pricing
Value-based Pricing
How to get clients?
Tips - how to get more clients
What are Google Ads
Keywords to bid as a freelancer
How to get more sales/conversions
Linkedin Ads Tips
Linkedin InMail Ads Tips
Build your own website
Freelancing platforms
Get clients fast as a freelancer&lt;/li&gt;
&lt;li&gt;Working As A Professional Developer - &lt;a href="https://youtu.be/uJKVk7cv3Dw"&gt;https://youtu.be/uJKVk7cv3Dw&lt;/a&gt;
Opportunities When Starting Out
How to Prepare for a Job
Take Online Courses?
What College Taught Me
How to Learn Faster
Make Your Free Time Count
Effective Way to Improve Your Code by Reviewing Open Source Code
Start Creating an Mvp
Get Others Opinions
Find a Mentor
Create a Portfolio
Portfolio Website Checklist
Think Outside the Box
Be Professional
Job Application Tips
Tips for Great Job Interviews
Make Linkedin Profile Impressive&lt;/li&gt;
&lt;li&gt;Mentoring - &lt;a href="https://youtu.be/Ni6Jlkj4Xuo"&gt;https://youtu.be/Ni6Jlkj4Xuo&lt;/a&gt;
Monetize tutoring
Practice your skills
How much to Charge for online mentoring?
Provide value mentoring and people will come like a stream&lt;/li&gt;
&lt;li&gt;Contributing To Open Source - &lt;a href="https://youtu.be/qVN9FIY0j4Y"&gt;https://youtu.be/qVN9FIY0j4Y&lt;/a&gt;
What is Open Source?
Can you make money with Open Source?
Github Sponsors
How to Engage people to Finance your work?
Start a Patreon
Set monthly audience goals
Benefits of Open Source as a web developer
Create a premium version of the Open Source project
What is Freemium software&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Enjoy Programming-Themed Humor? Here's today's daily developer joke!</title>
      <author>Daily Developer Jokes</author>
      <pubDate>Mon, 24 Jan 2022 08:00:07 +0000</pubDate>
      <link>https://dev.to/dailydeveloperjokes/enjoy-programming-themed-humor-heres-todays-daily-developer-joke-4o2h</link>
      <guid>https://dev.to/dailydeveloperjokes/enjoy-programming-themed-humor-heres-todays-daily-developer-joke-4o2h</guid>
      <description>&lt;p&gt;Hi there! Here's today's Daily Developer Joke. We hope you enjoy it; it's a good one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8svwXrKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e125997196ca.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8svwXrKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e125997196ca.png" alt="Joke Image" width="880" height="358"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;For more jokes, and to submit your own joke to get featured, check out the &lt;a href="https://dailydeveloperjokes.github.io/"&gt;Daily Developer Jokes Website&lt;/a&gt;. We're also open sourced, so feel free to view &lt;a href="https://github.com/dailydeveloperjokes"&gt;our GitHub Profile&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leave-this-post-a-if-you-liked-todays-joke-and-stay-tuned-for-tomorrows-joke-too"&gt;
  &lt;/a&gt;
  Leave this post a ❤️ if you liked today's joke, and stay tuned for tomorrow's joke too!
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This joke comes from &lt;a href="https://github.com/wesbos/dad-jokes"&gt;Dad-Jokes GitHub Repo by Wes Bos&lt;/a&gt; (thank you!), whose owner has given me permission to use this joke with credit.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>jokes</category>
      <category>dailydeveloperjokes</category>
    </item>
  </channel>
</rss>
