<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Factor app - http requests</title>
      <author>Alex Esoposting</author>
      <pubDate>Mon, 08 Nov 2021 13:58:32 +0000</pubDate>
      <link>https://dev.to/olus2000/factor-app-http-requests-ego</link>
      <guid>https://dev.to/olus2000/factor-app-http-requests-ego</guid>
      <description>&lt;p&gt;The app I described in the previous tutorial is supposed to fetch data about a game from some server. Before writing any code to process this data it would be nice to know what kind of data we're dealing with and how to find it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#target-api"&gt;
  &lt;/a&gt;
  Target API
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#where-we-get-the-data-from"&gt;
  &lt;/a&gt;
  Where we get the data from
&lt;/h6&gt;

&lt;p&gt;The server we're trying to talk to is a simple HTTPS server with an impossible to remember address of &lt;code&gt;a766-95-160-157-211.ngrok.io&lt;/code&gt;. Most of its endpoints provide nice HTML pages, very useful for the browser but entirely useless for us. What we need can be found under &lt;code&gt;/api/game/&amp;lt;game-nr&amp;gt;&lt;/code&gt; which is supposed to provide us with all data relevant to the given game number in JSON format.&lt;/p&gt;

&lt;p&gt;To summarise: we need to make an HTTP GET request to the given address and receive a JSON in return.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-toolbox-for-today"&gt;
  &lt;/a&gt;
  Our toolbox for today
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#factor-httpclient-and-jsonreader-vocabularies"&gt;
  &lt;/a&gt;
  Factor http.client and json.reader vocabularies
&lt;/h6&gt;

&lt;p&gt;Communicating over HTTP can be a huge pain because of the amount of things you need to worry about like headers or where to put data into the request. Fortunately Factor will do most of that for us so that we only need to use exactly one word from each of these libraries.&lt;/p&gt;

&lt;p&gt;For GET requests there is a word &lt;code&gt;http-get&lt;/code&gt;, but it's not what we need there as it will raise an error if the request is not successful. &lt;code&gt;http-get&lt;/code&gt; is actually a wrapper over the word &lt;code&gt;htpp-get*&lt;/code&gt; which just performs a request and returns whatever the outcome is.&lt;/p&gt;

&lt;p&gt;To decode JSON into meaningful Factor objects there is a word &lt;code&gt;json&amp;gt;&lt;/code&gt; which converts a JSON string to a Factor object. If the request is successful then &lt;code&gt;http-get*&lt;/code&gt; leaves returned data as a byte array. We then just need to convert it to a string to be able to extract Factor objects out of it. Our json extracting pipeline is two words: &lt;code&gt;&amp;gt;string json&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#putting-knowledge-to-use"&gt;
  &lt;/a&gt;
  Putting knowledge to use
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#actual-code-time"&gt;
  &lt;/a&gt;
  Actual code time!
&lt;/h6&gt;

&lt;p&gt;The word &lt;code&gt;http-get*&lt;/code&gt; has a stack effect &lt;code&gt;( url -- response data )&lt;/code&gt;. To modify it to fetch game data we need to provide it with the correct url joined with the game number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight factor"&gt;&lt;code&gt;&lt;span class="kn"&gt;USE:&lt;/span&gt; &lt;span class="nn"&gt;http.client&lt;/span&gt;

&lt;span class="k"&gt;CONSTANT:&lt;/span&gt; &lt;span class="n"&gt;api-url&lt;/span&gt; &lt;span class="s"&gt;"https://a766-95-160-157-211.ngrok.io/api/game/"&lt;/span&gt;

&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;get-game*&lt;/span&gt; &lt;span class="nf"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;game-id-string&lt;/span&gt; &lt;span class="nf"&gt;--&lt;/span&gt; &lt;span class="nv"&gt;response&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="nf"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;api-url&lt;/span&gt; &lt;span class="nb"&gt;prepend&lt;/span&gt; &lt;span class="n"&gt;http-get*&lt;/span&gt;
&lt;span class="k"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that's not enough. Notice that &lt;code&gt;get-game*&lt;/code&gt; returns two values: response and data. If everything is ok then &lt;code&gt;code&lt;/code&gt; slot of the response will be 200 and data will be a byte array representing a JSON with game data. A lot of things can go wrong though: the client may be offline, the server may be offline, the game id may be incorrect and so on.&lt;/p&gt;

&lt;p&gt;For these cases we need a wrapper word for &lt;code&gt;get-game*&lt;/code&gt; that will check for any HTTP errors. That word will then extract any relevant information - either game data or HTTP error code - and return it for further interpretation by the app. HTTP error codes start from 400 and go up so this check is very simple. If it's lower than 400 we can use the words &lt;code&gt;&amp;gt;string json&amp;gt;&lt;/code&gt; to convert response data to string and then to a Factor object. The function should also return a flag indicating whether the request was successful.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight factor"&gt;&lt;code&gt;&lt;span class="kn"&gt;USE:&lt;/span&gt; &lt;span class="nn"&gt;json.reader&lt;/span&gt;

&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;get-game&lt;/span&gt; &lt;span class="nf"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;game-id-string&lt;/span&gt; &lt;span class="nf"&gt;--&lt;/span&gt; &lt;span class="nv"&gt;error/game-object&lt;/span&gt; &lt;span class="nv"&gt;f/t&lt;/span&gt; &lt;span class="nf"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;get-game*&lt;/span&gt; &lt;span class="nb"&gt;swap&lt;/span&gt; &lt;span class="n"&gt;code&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dup&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
    &lt;span class="n"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;drop&lt;/span&gt; &lt;span class="nb"&gt;&amp;gt;string&lt;/span&gt; &lt;span class="n"&gt;json&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt; &lt;span class="n"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;nip&lt;/span&gt; &lt;span class="no"&gt;f&lt;/span&gt; &lt;span class="n"&gt;]&lt;/span&gt; &lt;span class="nb"&gt;if&lt;/span&gt;
&lt;span class="k"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#final-vocabulary"&gt;
  &lt;/a&gt;
  Final vocabulary
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#just-code"&gt;
  &lt;/a&gt;
  Just code
&lt;/h6&gt;

&lt;p&gt;I put this code in the &lt;code&gt;nptimelapse.get-game&lt;/code&gt; vocabulary generated with &lt;code&gt;scaffold-work&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;! Copyright (C) 2021 Aleksander Sabak.
! See http://factorcode.org/license.txt for BSD license.
USING: kernel strings accessors http.client json.reader ;
IN: nptimelapse.api

CONSTANT: api-url "https://a766-95-160-157-211.ngrok.io/api/game/"


: get-game* ( game-id-string -- response data )
    api-url prepend http-get*
;


: get-game ( game-id-string -- error/game-object f/t )
    get-game* swap code&amp;gt;&amp;gt; dup 400 &amp;lt;
    [ drop &amp;gt;string json&amp;gt; t ]
    [ nip f ] if
;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#a-short-chapter-wasnt-it"&gt;
  &lt;/a&gt;
  A short chapter, wasn't it?
&lt;/h6&gt;

&lt;p&gt;Fetching data from a HTTP server turned out to be quite easy given Factor's high-level vocabularies. I chose the easiest part for the beginning though, so don't expect everything to go as smoothly from now on. We are about to get into some UI stuff, and that's never easy in any language.&lt;/p&gt;

</description>
      <category>esoteric</category>
      <category>concatenative</category>
      <category>tutorial</category>
      <category>factor</category>
    </item>
    <item>
      <title>Test-Driven Development With The oclif Testing Library: Part One</title>
      <author>Michael Bogan</author>
      <pubDate>Mon, 08 Nov 2021 13:54:29 +0000</pubDate>
      <link>https://dev.to/salesforcedevs/test-driven-development-with-the-oclif-testing-library-part-one-25h9</link>
      <guid>https://dev.to/salesforcedevs/test-driven-development-with-the-oclif-testing-library-part-one-25h9</guid>
      <description>&lt;p&gt;While writing a CLI tool can be a lot of fun, the initial setup and boilerplate—parsing arguments and flags, validation, subcommands—is generally the same for every CLI, and it’s a drag. That’s where the &lt;a href="https://oclif.io/"&gt;oclif framework&lt;/a&gt; saves the day. The boilerplate for writing a single-command or multi-command CLI melts away, and you can quickly get into the code that you &lt;em&gt;actually&lt;/em&gt; want to write.&lt;/p&gt;

&lt;p&gt;But wait—there’s more! oclif also has a testing framework that lets you execute your CLI the same way a user would, capturing standard output and errors so that you can test expectations. In this article, I'll show you how to write and test an oclif CLI application with ease.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-we-going-to-build"&gt;
  &lt;/a&gt;
  What are we going to build?
&lt;/h3&gt;

&lt;p&gt;We’re all tired of working on the typical TODO application. Instead, let’s build something different but simple. We’ll use a test-driven development (TDD) approach to build a time-tracking application. Our CLI will let us do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add projects&lt;/li&gt;
&lt;li&gt;Start and end timers on those projects&lt;/li&gt;
&lt;li&gt;View the total spend on a project&lt;/li&gt;
&lt;li&gt;View the time spent on each entry for a given project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s what a sample interaction with the &lt;code&gt;time-tracker&lt;/code&gt; CLI looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~ time-tracker add-project project-one
Created new project "project-one"

~ time-tracker start-timer project-one
Started a new time entry on "project-one"

~ time-tracker start-timer project-two
 &amp;gt;   Error: Project "project-two" does not exist

~ time-tracker add-project project-two
Created new project "project-two"

~ time-tracker start-timer project-two
Started a new time entry on "project-two"

~ time-tracker end-timer project-two
Ended time entry for "project-two"

~ time-tracker list-projects
project-one (0h 0m 13.20s)
- 2021-09-20T13:13:09.192Z - 2021-09-20T13:13:22.394Z (0h 0m 13.20s)
project-two (0h 0m 7.79s)
- 2021-09-20T13:13:22.394Z - 2021-09-20T13:13:30.189Z (0h 0m 7.79s)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ll manage all of the data about added projects and active timers in a “database” (a simple JSON data file).&lt;/p&gt;

&lt;p&gt;The source code for our time tracking application project can be found &lt;a href="https://github.com/bloveless/oclif-time-tracker"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since we’re doing this the TDD way, let’s dive in… tests first!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-timetracker-features-and-tests"&gt;
  &lt;/a&gt;
  Our Time-Tracker: Features and Tests
&lt;/h2&gt;

&lt;p&gt;As we describe our application’s features, we should be thinking about tests we can write to assert the expectations we have for those features. Here is a list of our application’s features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new project

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Happy path&lt;/strong&gt;: The new project is created, and its record is stored in the underlying database. The user receives a confirmation message. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sad path&lt;/strong&gt;: If the project already exists, then an error message will appear to the user. The underlying database will be unaltered.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Start a timer on a project

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Happy path&lt;/strong&gt;: The requested project already exists, so we can start a new time entry, setting the startTime to the current date/time. The user will receive a notification when the timer begins.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Happy path&lt;/strong&gt;: If the timer is already running on another project, then that timer will stop and a new timer will begin on the requested project. The user will receive a notification when the timer begins.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sad path&lt;/strong&gt;: If the project doesn’t exist, then an error message will appear to the user. The underlying database will be unaltered.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;End a timer on a project

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Happy path&lt;/strong&gt;: A timer is active on the requested project, so we can end that timer and notify the user.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sad path&lt;/strong&gt;: If the project doesn’t exist, then an error message will appear to the user. The underlying database will be unaltered.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sad path&lt;/strong&gt;: If the project exists without an active timer, then the user will be notified. The underlying database will be unaltered.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;List project

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Happy path&lt;/strong&gt;: All the projects, total times, entries, and entry times are displayed to the user.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Database existence (for all commands)

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Sad path&lt;/strong&gt;: If the &lt;code&gt;time.json&lt;/code&gt; file doesn’t exist in the current directory, then an error message appears to the user.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For data storage—our “database”—we’ll store our time entries on disk as JSON, in a file called &lt;code&gt;time.json&lt;/code&gt;. Below is an example of how this file may look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "activeProject": "project-two",
  "projects": {
    "project-one": {
      "activeEntry":null,
      "entries": [
        {
          "startTime": "2021-09-18T06:25:55.874Z",
          "endTime": "2021-09-18T06:26:03.021Z"
        }, {
          "startTime": "2021-09-18T06:26:09.883Z",
          "endTime": "2021-09-18T06:26:47.585Z"
        }
      ]
    },
    "project-two": {
      "activeEntry": 1,
      "entries": [
        {
          "startTime": "2021-09-18T06:26:47.585Z",
          "endTime": "2021-09-18T06:27:13.776Z"
        }, {
          "startTime": "2021-09-18T06:52:54.791Z",
          "endTime": null
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#design-decisions"&gt;
  &lt;/a&gt;
  Design Decisions
&lt;/h3&gt;

&lt;p&gt;Finally, let’s cover some of the design decisions for our overall application.&lt;/p&gt;

&lt;p&gt;First, we’ll store an &lt;code&gt;activeProject&lt;/code&gt; at the top level of our JSON data. We can use this to quickly check which project is active. Second, we’ll store an &lt;code&gt;activeEntry&lt;/code&gt; field in &lt;em&gt;each project&lt;/em&gt;, which stores the index of the entry that is currently being worked on.&lt;/p&gt;

&lt;p&gt;With these two pieces of information, we can navigate directly to the active project and its active entry in order to end the timer. We can also determine instantly if the project has any active entries or if there are any active projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project Setup
&lt;/h2&gt;

&lt;p&gt;Now that we’ve laid all the groundwork, let’s create a new project and start digging in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx oclif multi time-tracker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command creates a new &lt;a href="https://oclif.io/docs/multi"&gt;multi-command oclif application&lt;/a&gt;. With a multi-command CLI, we can run commands like &lt;code&gt;time-tracker add-project project-one&lt;/code&gt; and &lt;code&gt;time-tracker start-timer project-one&lt;/code&gt;. In these examples, both &lt;code&gt;add-project&lt;/code&gt; and &lt;code&gt;start-timer&lt;/code&gt; are &lt;em&gt;separate&lt;/em&gt; commands, each stored in its own source file in the project, but they all fall under the umbrella &lt;code&gt;time-tracker&lt;/code&gt; CLI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-word-about-stubs"&gt;
  &lt;/a&gt;
  A Word About Stubs
&lt;/h3&gt;

&lt;p&gt;We want to take advantage of the test helpers provided by &lt;code&gt;@oclif/test&lt;/code&gt;. For testing &lt;em&gt;our&lt;/em&gt; particular application, we’ll need to write a simple stub. Here’s why:&lt;/p&gt;

&lt;p&gt;Our application writes to a &lt;code&gt;timer.json&lt;/code&gt; file on the filesystem. Imagine if we were running our tests in parallel and had 10 tests that were all writing to the same file at the same time. That would get messy and produce unpredictable results.&lt;/p&gt;

&lt;p&gt;A better approach would be to make each test write to its own file, test against those files, and clean up after ourselves. Better yet, each test could write to an object in memory instead of a file, and we can assert our expectations on that object.&lt;/p&gt;

&lt;p&gt;The best practice when writing unit tests is to replace the driver with something else. In our case, we will stub out the default &lt;code&gt;FilesystemStorage&lt;/code&gt; driver with a &lt;code&gt;MemoryStorage&lt;/code&gt; driver.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/oclif/test"&gt;@oclif/test&lt;/a&gt; is a simple wrapper around &lt;a href="https://github.com/oclif/fancy-test"&gt;@oclif/fancy-test&lt;/a&gt; that adds some functionality around testing CLI commands. We’re going to use the &lt;a href="https://github.com/oclif/fancy-test#stub"&gt;stub functionality&lt;/a&gt; in &lt;code&gt;@oclif/fancy-test&lt;/code&gt; to replace the storage driver in our command for testing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-first-command-add-project"&gt;
  &lt;/a&gt;
  Our First Command: Add Project
&lt;/h2&gt;

&lt;p&gt;Now, let's talk about the “add project” command and the important parts related to mocking out the filesystem. Every new oclif project starts with a &lt;code&gt;hello.js&lt;/code&gt; file in &lt;code&gt;src/commands&lt;/code&gt;. We’ve renamed it to &lt;code&gt;add-project.js&lt;/code&gt; file and filled it in with the bare minimum.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// PATH: src/commands/add-project.js

const {Command} = require('@oclif/command')
const FilesystemStorage = require('../storage/filesystem')

class AddProjectCommand extends Command {
  async run() {}
}

// This is the important line!
AddProjectCommand.storage = new FilesystemStorage()

AddProjectCommand.description = 'Add a new project to the time tracking database'

AddProjectCommand.args = []

module.exports = AddProjectCommand
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#swappable-storage-for-tests"&gt;
  &lt;/a&gt;
  Swappable Storage for Tests
&lt;/h3&gt;

&lt;p&gt;Notice how I statically assign a &lt;code&gt;FilesystemStorage&lt;/code&gt; instance to &lt;code&gt;AddProjectCommand.storage&lt;/code&gt;. This allows me—in my tests—to swap out the filesystem storage with an in-memory storage implementation. Let’s look at the &lt;code&gt;FilesystemStorage&lt;/code&gt; and &lt;code&gt;MemoryStorage&lt;/code&gt; classes below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// PATH: src/storage/filesystem.js

const fs = require('fs/promises')

class FilesystemStorage {
  constructor(initialData = {}) {
    this.data = initialData
  }

  load() {
    return fs.readFile('./time.json').then(file =&amp;gt; {
      return JSON.parse(file.toString('utf-8'))
    }).catch(() =&amp;gt; {
      // If reading the file results in an error then assume that the file didn't exist and return an empty object
      return Promise.resolve(this.data)
    })
  }

  save(data) {
    return fs.writeFile('./time.json', JSON.stringify(data))
  }
}

module.exports = FilesystemStorage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// PATH: src/storage/memory.js

class MemoryStorage {
  constructor(initialData = {}) {
    this.data = initialData
  }

  load() {
    return Promise.resolve(this.data)
  }

  save(data) {
    this.data = data
    return Promise.resolve()
  }
}

module.exports = MemoryStorage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;FilesystemStorage&lt;/code&gt; and &lt;code&gt;MemoryStorage&lt;/code&gt; have the same interface, so we can swap one out for the other in our tests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-first-test-for-the-add-project-command"&gt;
  &lt;/a&gt;
  The First Test for the Add Project Command
&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;test/commands&lt;/code&gt;, we renamed &lt;code&gt;hello.test.js&lt;/code&gt; to &lt;code&gt;add-project.test.js&lt;/code&gt;, and we’ve written our first test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// PATH: test/commands/add-project.test.js

const { expect, test } = require('@oclif/test')
const AddProjectCommand = require('../../src/commands/add-project')
const MemoryStorage = require('../../src/storage/memory')

describe('add project', () =&amp;gt; {
  test
    .stdout()
    .stub(AddProjectCommand, 'storage', new MemoryStorage({}))
    .command(['add-project', 'project-one'])
    .it('should add a new project', async ctx =&amp;gt; {
      expect(await AddProjectCommand.storage.load()).to.eql({
        activeProject: null,
        projects: {
          'project-one': {
            activeEntry: null,
            entries: [],
          },
        },
      })
      expect(ctx.stdout).to.contain('Created new project "project-one"')
    })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The magic happens in the &lt;code&gt;stub&lt;/code&gt; call. We swap out the &lt;code&gt;FilesystemStorage&lt;/code&gt; with &lt;code&gt;MemoryStorage&lt;/code&gt; (with an empty object for initial data). Then, we assert expectations on the storage contents.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unpacking-the-raw-test-endraw-command-from-ocliftest"&gt;
  &lt;/a&gt;
  Unpacking the &lt;code&gt;test&lt;/code&gt; Command from @oclif/test
&lt;/h3&gt;

&lt;p&gt;Before we implement our command, let’s make sure we understand our test file. Our &lt;code&gt;describe&lt;/code&gt; block calls &lt;code&gt;test&lt;/code&gt;, which is the entry point to &lt;code&gt;@oclif/fancy-test&lt;/code&gt; (re-exported from &lt;code&gt;@oclif/test&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Next, the &lt;code&gt;.stdout()&lt;/code&gt; method captures the output from the command, letting you assert expectations on it by using &lt;code&gt;ctx.stdout&lt;/code&gt;. There is also a &lt;code&gt;.stderr()&lt;/code&gt; method, but we'll see later that there is another more preferred method for handling errors in &lt;code&gt;@oclif/fancy-test.&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;For most applications, you wouldn’t normally make assertions against what’s being written to standard out. However, in the case of a CLI, this is one of your major interfaces with the user, so testing against standard out makes sense.&lt;/p&gt;

&lt;p&gt;Keep in mind that there is a major gotcha here! If you use &lt;code&gt;console.log&lt;/code&gt; to debug while you are developing, then &lt;code&gt;.stdout()&lt;/code&gt; &lt;strong&gt;will capture that output as well.&lt;/strong&gt; Unless you are asserting against &lt;code&gt;ctx.stdout&lt;/code&gt;, you'll probably never see that output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.stub(AddProjectCommand, 'storage', new MemoryStorage({}))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've talked about the &lt;code&gt;.stub&lt;/code&gt; method a bit already, but what we’re doing here is replacing the static property on our command with &lt;code&gt;MemoryStorage&lt;/code&gt; instead of the default &lt;code&gt;FilesystemStorage&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.command(['add-project', 'project-one'])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The method &lt;code&gt;.command&lt;/code&gt; is where things get really cool with &lt;code&gt;@oclif/test&lt;/code&gt;. This line calls your CLI just like you would from the command line. You can pass in flags and their values or a list of arguments like I'm doing here. &lt;code&gt;@oclif/test&lt;/code&gt; will do the work of calling your command the exact same way as it would be called by an end user at the command line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.it('test description', () =&amp;gt; [...])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might be familiar with &lt;code&gt;it&lt;/code&gt; blocks. This is where you normally do all the work to set up your test and run assertions against the results. Things are pretty similar here, but you've probably already done the hard work of setting up your test with the other helpers from &lt;code&gt;@oclif/test&lt;/code&gt; and &lt;code&gt;@oclif/fancy-test&lt;/code&gt;, and the &lt;code&gt;it&lt;/code&gt; block needs only to assert against the output of the command.&lt;/p&gt;

&lt;p&gt;Finally, now that we understand a bit more about what the test does, we can run our tests with &lt;code&gt;npm test&lt;/code&gt;. Since we haven’t written any implementation code, we would expect our test to fail.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1) add project
       should add a new project:
     Error: Unexpected argument: project-one
See more help with --help
      at validateArgs (node_modules/@oclif/parser/lib/validate.js:10:19)
      at Object.validate (node_modules/@oclif/parser/lib/validate.js:55:5)
      at Object.parse (node_modules/@oclif/parser/lib/index.js:28:7)
      at AddProjectCommand.parse (node_modules/@oclif/command/lib/command.js:86:41)
      at AddProjectCommand.run (src/commands/add-project.js:1:1576)
      at AddProjectCommand._run (node_modules/@oclif/command/lib/command.js:43:31)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perfect! A failed test, just as we expected. Let’s write the code to get to green.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-to-green-implementing-our-command"&gt;
  &lt;/a&gt;
  Getting to Green: Implementing Our Command
&lt;/h3&gt;

&lt;p&gt;Now, we just have to follow the errors to write our command. First, we need to update the &lt;code&gt;AddProjectCommand&lt;/code&gt; class to be aware of the arguments we want to pass in. In this case, we are only passing in a project name. Let’s make that change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class AddProjectCommand extends Command {
  ...
}

AddProjectCommand.storage = new FilesystemStorage()

AddProjectCommand.description = 'Add a new project to the time tracking database'

// This is the update
AddProjectCommand.args = [
  {name: 'projectName', required: true},
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to tell oclif about our command’s expected arguments and their properties. In our case, there is only one argument, &lt;code&gt;projectName&lt;/code&gt;, and it is required. You can learn more about oclif arguments &lt;a href="https://oclif.io/docs/args"&gt;here&lt;/a&gt;, and oclif flags &lt;a href="https://oclif.io/docs/flags"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, we run the test again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; 1) add project
       should add a new project:

      AssertionError: expected {} to deeply equal { Object (activeProject, projects) }
      + expected - actual

      -{}
      +{
      +  "activeProject": [null]
      +  "projects": {
      +    "project-one": {
      +      "activeEntry": [null]
      +      "entries": []
      +    }
      +  }
      +}

      at Context.&amp;lt;anonymous&amp;gt; (test/commands/add-project.test.js:11:55)
      at async Object.run (node_modules/fancy-test/lib/base.js:44:29)
      at async Context.run (node_modules/fancy-test/lib/base.js:68:25)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wonderful! We are now seeing that, while we had expected “project-one” to be created, there was no change made to the underlying data structure.&lt;/p&gt;

&lt;p&gt;Let's update the command with the minimum amount of code necessary to make this test pass. For brevity, we’ll only display the &lt;code&gt;run()&lt;/code&gt; method in &lt;code&gt;src/commands/add-project.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async run() {
    const {args} = this.parse(AddProjectCommand)
    const db = await AddProjectCommand.storage.load()

    db.activeProject = db.activeProject || null
    db.projects = db.projects || {}
    db.projects[args.projectName] = {
        activeEntry: null,
        entries: [],
    }

    await AddProjectCommand.storage.save(db)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, if no file exists, then we will receive an empty object when loading from storage. This code creates any default properties and their values if they didn't exist (for example,  &lt;code&gt;activeProject&lt;/code&gt; and &lt;code&gt;projects&lt;/code&gt;), then it creates a new project with the default structure—an empty &lt;code&gt;entries&lt;/code&gt; array and &lt;code&gt;activeEntry&lt;/code&gt; set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Running the test again, we see the next error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1) add project
       should add a new project:
     AssertionError: expected '' to include 'Created new project "project-one"'
      at Context.&amp;lt;anonymous&amp;gt; (test/commands/add-project.test.js:20:27)
      at async Object.run (node_modules/fancy-test/lib/base.js:44:29)
      at async Context.run (node_modules/fancy-test/lib/base.js:68:25)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is where the &lt;code&gt;.stdout()&lt;/code&gt; function comes into play. We expected our CLI to tell the user that we created their new project, but it didn't say anything. This one is easy to fix. We can add the following line right before we call &lt;code&gt;storage.save()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this.log(`Created new project "${args.projectName}"`)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila! Our first happy path test is passing. Now we’re cruising!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;add project
    ✓ should add a new project (43ms)

  1 passing (44ms)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#one-more-test"&gt;
  &lt;/a&gt;
  One More Test
&lt;/h3&gt;

&lt;p&gt;We've got one more test for &lt;code&gt;AddProjectCommand&lt;/code&gt;. We need to make sure that the user cannot add another project with the same name as the current project. For these tests, we’ll repeatedly need to generate a database for a single project. Let’s create a helper for this.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;test/test-helpers.js&lt;/code&gt; add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  generateDb: project =&amp;gt; {
    return {
      activeProject: null,
      projects: {
        [project]: {
          activeEntry: null,
          entries: [],
        },
      },
    }
  },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can add the next test in &lt;code&gt;add-project.test.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test
  .stdout()
  .stub(AddProjectCommand, 'storage', new MemoryStorage(generateDb('project-one')))
  .command(['add-project', 'project-one'])
  .catch('Project "project-one" already exists')
  .it('should return an error if the project already exists', async _ =&amp;gt; {
    // Expect that the storage is unchanged
    expect(await AddProjectCommand.storage.load()).to.eql(generateDb('project-one'))
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is a new method in this test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.catch('Project "project-one" already exists')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I mentioned earlier that we don't need to mock &lt;code&gt;stderr&lt;/code&gt; to assert against it. That’s because we can use this &lt;code&gt;catch&lt;/code&gt; method to assert against any errors that happened during the run. In this case, we are expecting that an error will occur and that the underlying storage is unchanged.&lt;/p&gt;

&lt;p&gt;After running our test again, we see the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1) add project
       should return an error if the project already exists:
     Error: expected error to be thrown
      at Object.run (node_modules/fancy-test/lib/catch.js:8:19)
      at Context.run (node_modules/fancy-test/lib/base.js:68:36)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right after we load &lt;code&gt;db&lt;/code&gt; from storage, we need to check and see if the project already exists and throw an error if it does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const db = await AddProjectCommand.storage.load()

// New code
if (db.projects?.[args.projectName]) {
    this.error(`Project "${args.projectName}" already exists`)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when we run our tests, they all pass! We've done it! We can now add as many projects as we'd like to track our time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;add project
    ✓ should add a new project (46ms)
    ✓ should return an error if the project already exists (76ms)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-for-now"&gt;
  &lt;/a&gt;
  Conclusion (for now)
&lt;/h2&gt;

&lt;p&gt;In this article—Part One of our two-part series on the oclif testing library—we’ve talked about oclif, its testing framework, why stubs are useful, and how to use them. Then, we began writing tests and implementation for our &lt;code&gt;time-tracker&lt;/code&gt; CLI.&lt;/p&gt;

&lt;p&gt;This is a great start. In the next part of our series, we’ll continue building out our CLI with more commands while covering important testing concepts like data store testing and initialization.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Build a Realtime Group Chat Application with React and Socket.io</title>
      <author>Fredrick Emmanuel</author>
      <pubDate>Mon, 08 Nov 2021 13:54:17 +0000</pubDate>
      <link>https://dev.to/divofred/how-to-build-a-realtime-group-chat-application-with-react-and-socketio-2jf0</link>
      <guid>https://dev.to/divofred/how-to-build-a-realtime-group-chat-application-with-react-and-socketio-2jf0</guid>
      <description>&lt;p&gt;This article explain what the framework "Socket.io" means and Create a simple Group Chat App with React. Here is the link to the &lt;a href="https://github.com/divofred/ChatTutorial"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h2&gt;

&lt;p&gt;The Aim of this tutorial is to explain how Socket.io V4 works and simplify the use of it with a front-end framework like React&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Prerequisites&lt;/li&gt;
&lt;li&gt;Getting Started&lt;/li&gt;
&lt;li&gt;Setting up the Server&lt;/li&gt;
&lt;li&gt;Setting up React&lt;/li&gt;
&lt;li&gt;Connect Client to Server

&lt;ul&gt;
&lt;li&gt;Creating the Server connection&lt;/li&gt;
&lt;li&gt;Refactoring React App&lt;/li&gt;
&lt;li&gt;Creating Routes&lt;/li&gt;
&lt;li&gt;Connecting the React to the Server&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Handling CORS&lt;/li&gt;
&lt;li&gt;Connecting to Different Rooms&lt;/li&gt;
&lt;li&gt;Messaging

&lt;ul&gt;
&lt;li&gt;Welcome Message&lt;/li&gt;
&lt;li&gt;Sending Message&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Disconnect&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ES6 Syntax&lt;/li&gt;
&lt;li&gt;Knowledge on &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; and &lt;a href="https://nodejs.org/en/about/"&gt;Node&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;A Text Editor, &lt;a href="https://code.visualstudio.com/download"&gt;Visual Studio Code&lt;/a&gt; or &lt;a href="https://atom.io/download"&gt;Atom&lt;/a&gt; preferably&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/download/"&gt;NodeJS&lt;/a&gt; Installed already&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-socketio"&gt;
  &lt;/a&gt;
  What is Socket.io?
&lt;/h3&gt;

&lt;p&gt;Socket.io is a JavaScript Library that allows bi-directional Secured Realtime communication between the browser and the server. Which means that if a user sends a data, the recipient(s) of that data would receive immediately, depending on the internet speed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it Works
&lt;/h4&gt;

&lt;p&gt;According to &lt;a href="https://socket.io/docs/v4/"&gt;Socket.io&lt;/a&gt;, The client will try to establish a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket"&gt;WebSocket&lt;/a&gt; connection if possible, and will fall back on HTTP long polling if not. WebSocket Establishes the connection between the client and the server. Socket.io makes use of this connection the WebSocket brings to transfer data.&lt;/p&gt;

&lt;p&gt;Let's Jump deep into the course of this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Open up the terminal in your desired folder, then Create a new folder and move into it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;react-chat-app
&lt;span class="nb"&gt;cd &lt;/span&gt;react-chat-app
npx create-react-app &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate back to the projects root folder, initialize the project and install server dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
npm i express socket.io concurrently nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.npmjs.com/package/concurrently"&gt;Concurrently&lt;/a&gt; helps in running more than command at the same time without creating another terminal. This would really help in running both our react and server side together in one terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodemon.io/"&gt;Nodemon&lt;/a&gt; is a tool that automatically restarts the server when changes are made to the file directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-server"&gt;
  &lt;/a&gt;
  Setting up the Server
&lt;/h2&gt;

&lt;p&gt;After all installations are complete, we create a &lt;code&gt;server.js&lt;/code&gt; file in the projects root directory and require all necessary dependency:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setting up our server for socket.io would not be the same as our normal express setup. According to &lt;a href="https://socket.io/docs/v4/server-initialization/"&gt;socket.io&lt;/a&gt; documentation, we create our set up socket.io using node &lt;code&gt;http&lt;/code&gt; server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;socketio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is Quannected to Port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The constant &lt;code&gt;PORT&lt;/code&gt; makes use of ES modules that checks if our app is deployed. If the app is not deployed, it would return 5000.&lt;/p&gt;

&lt;p&gt;We need to add few lines of code to our &lt;code&gt;script&lt;/code&gt; tag inside the &lt;code&gt;package.json&lt;/code&gt; file, to enable us run our server using &lt;code&gt;npm&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node server.js"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"server"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon server"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"concurrently &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;npm run server&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;cd client &amp;amp;&amp;amp; npm start&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try out our app in our terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-react"&gt;
  &lt;/a&gt;
  Setting Up React
&lt;/h2&gt;

&lt;p&gt;Move into &lt;code&gt;react-chat-app&lt;/code&gt; and let's open up our terminal to install the dependencies we would be utilizing in this article:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i react-router socket.io-client query-string react-router-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://socket.io/docs/v4/client-initialization/"&gt;Socket.io-client&lt;/a&gt; is a dependency created by socket.io to help connect to socket.io in the server.&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;Query-string&lt;/a&gt; helps us get parameter in our &lt;code&gt;url&lt;/code&gt; from the address bar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-client-to-server"&gt;
  &lt;/a&gt;
  Connect Client to Server
&lt;/h2&gt;

&lt;p&gt;This is where the our messaging app starts. Here, we would create a socket.io connection between our react app with our server app.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-the-server-connection"&gt;
  &lt;/a&gt;
  Creating the Server Connection
&lt;/h4&gt;

&lt;p&gt;A listening event has to be made in the  &lt;code&gt;server.js&lt;/code&gt; for client to  connect to the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;connection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A Connection has been made&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;disconnect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A disconnection has been made&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The constant &lt;code&gt;io&lt;/code&gt; is listening for a &lt;code&gt;connection&lt;/code&gt; from the client and when that connection made is, it creates a special socket for that particular connection. The socket, which is passed as a parameter in the arrow function, holds the properties of the connection which has just been made. In our Code, the &lt;code&gt;socket&lt;/code&gt; ,which is the connection, listens for when it has been disconnected.  And then socket is been removed since there has been a disconnection.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#refactoring-react-app"&gt;
  &lt;/a&gt;
  Refactoring React App
&lt;/h4&gt;

&lt;p&gt;Before we can connect to the server, there are some refactoring we need to do to our new React app.&lt;/p&gt;

&lt;p&gt;First we need to delete some of the pre-created file in our React app. Delete every thing in the &lt;code&gt;src&lt;/code&gt; folder and create &lt;code&gt;index.js&lt;/code&gt; in that same &lt;code&gt;src&lt;/code&gt; folder. Add the following code to the &lt;code&gt;index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To prevent react from yelling at us, we need to create the &lt;code&gt;App.js&lt;/code&gt; in the same directory with the &lt;code&gt;index.js&lt;/code&gt;. We need to add a &lt;a href="https://www.freecodecamp.org/news/functional-components-vs-class-components-in-react/#:~:text=Functional%20components%20are%20basic%20JavaScript,mainly%20responsible%20for%20rendering%20UI."&gt;functional component&lt;/a&gt; to our App.js that would return a simple welcome message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="nx"&gt;Successfully&lt;/span&gt; &lt;span class="nx"&gt;rendered&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#creating-routes"&gt;
  &lt;/a&gt;
  Creating Routes
&lt;/h4&gt;

&lt;p&gt;Let's create a folder named &lt;code&gt;components&lt;/code&gt; in the &lt;code&gt;src&lt;/code&gt;, this would contain all our different component in our React app. In that &lt;code&gt;components&lt;/code&gt; folder, create a &lt;code&gt;Home.js&lt;/code&gt; and a &lt;code&gt;Chat.js&lt;/code&gt; file. When all has been created, navigate back to &lt;code&gt;app.js&lt;/code&gt; to set up our routes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Chat&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Chat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/chat"&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Chat&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;For clarity, the&lt;code&gt;Home&lt;/code&gt; and &lt;code&gt;Chat&lt;/code&gt;  file is in the &lt;code&gt;components&lt;/code&gt; and the &lt;code&gt;components&lt;/code&gt; is in the &lt;code&gt;src&lt;/code&gt;. The &lt;code&gt;components&lt;/code&gt; has a &lt;code&gt;s&lt;/code&gt;  at the the end the word,take notes so you don't encounter an error 💗.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We created a route, that makes use of the functional component &lt;code&gt;Home&lt;/code&gt;when accessing the homepage and the &lt;code&gt;Chat&lt;/code&gt; when accessing the Chat page. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Home&lt;/code&gt;  component would contain a form that would redirect us to the &lt;code&gt;Chat&lt;/code&gt; component of the specified group. Open up the &lt;code&gt;Home.js&lt;/code&gt; file and set up our form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRoom&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home Page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
            &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Name"&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
            &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;required&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
            &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Room"&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
            &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setRoom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;required&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;
          &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/chat?name=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;room=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            Sign In
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To keep this article as short as possible, it would not be containing any style. You can add custom style if you prefer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We imported &lt;code&gt;useState&lt;/code&gt; to hold the user's inputted name and room in a State value. Read more on &lt;a href="https://blog.logrocket.com/a-guide-to-usestate-in-react-ecb9952e406c/"&gt;useState&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In all the input tags, we had an &lt;code&gt;onChange&lt;/code&gt; event that listens for a change in input value and save it in the &lt;code&gt;state&lt;/code&gt;.  We made use of the &lt;code&gt;Link&lt;/code&gt;, imported from &lt;code&gt;react-router-dom&lt;/code&gt;, to redirect us to the Chat-page (passing &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;room&lt;/code&gt; as a parameter) if and only if our &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;room&lt;/code&gt; State Variable has a value.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#connecting-the-react-to-the-server"&gt;
  &lt;/a&gt;
  Connecting the React to the Server
&lt;/h4&gt;

&lt;p&gt;We have set up our form, the next step is to create a connect and a disconnect from the server in our &lt;code&gt;chat.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;queryString&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;query-string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;socket.io-client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Chat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRoom&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ENDPOINT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:5000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setRoom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Chat&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Chat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;App.js&lt;/code&gt; file passed down a prop to &lt;code&gt;Chat.js&lt;/code&gt;,&lt;code&gt;location&lt;/code&gt; , using &lt;code&gt;react-router-dom&lt;/code&gt; and this &lt;code&gt;location&lt;/code&gt; prop contains the &lt;code&gt;url&lt;/code&gt;. Then we got the parameters (name and room) from the &lt;code&gt;url&lt;/code&gt; using the &lt;code&gt;query-string&lt;/code&gt; dependency and set them to a State Variable. The &lt;code&gt;useEffect&lt;/code&gt; runs every time &lt;code&gt;location.search&lt;/code&gt; changes value. Read more on &lt;a href=""&gt;&lt;code&gt;useEffect&lt;/code&gt;&lt;/a&gt; .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handling-cors"&gt;
  &lt;/a&gt;
  Handling CORS
&lt;/h2&gt;

&lt;p&gt;In the &lt;code&gt;useEffect&lt;/code&gt; block, we created an instance of &lt;code&gt;socket&lt;/code&gt; and passed in our Server's Endpoint &lt;code&gt;http://localhost:5000&lt;/code&gt;. This would cause a breach in the Cross Origin Resource Sharing &lt;code&gt;CORS&lt;/code&gt; Policy since we are trying to data between two different routes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UdisxjOZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9rwabomht50jrxcwb49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UdisxjOZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9rwabomht50jrxcwb49.png" alt="CORS ERROR![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9cog93uj3zr50vz7dlhi.png)&amp;lt;br&amp;gt;
 " width="880" height="66"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since &lt;code&gt;Socket.io&lt;/code&gt; V3, we need to explicitly enable &lt;code&gt;CORS&lt;/code&gt; in our server to ensure the client successfully connect to the server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don't Panic🙂, We need to create &lt;code&gt;options&lt;/code&gt; in the &lt;code&gt;server.js&lt;/code&gt; Socket.io connection to permit the connection from the client. Since we have already declared the constant &lt;code&gt;io&lt;/code&gt;, we just need to add the options to the connection:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;socket.io&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;allowedHeaders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-custom-header&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#connecting-to-different-rooms"&gt;
  &lt;/a&gt;
  Connecting to Different Rooms
&lt;/h2&gt;

&lt;p&gt;We have to create a receiver in the server, waiting to receive new connection from the client. Create a new file &lt;code&gt;user.js&lt;/code&gt;, in the same directory with our server's file,that would be in charge of managing  our users:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name and room required.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;users&lt;/code&gt; variable would contain all the users connected. We returned error if name  or room is blank,  else we would add the user to the array  users and return the user.&lt;/p&gt;

&lt;p&gt;We have to Create a listening event for client to join different room in our &lt;code&gt;server.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;connection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;join&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;callBack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;callBack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;callBack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;//The rest of the code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;socket.on&lt;/code&gt; listens for any connection from our client with the name &lt;code&gt;"join"&lt;/code&gt; then expects &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;room&lt;/code&gt; as a parameter from the client. The callback sends an error if any or it would just return null, *&lt;em&gt;There must return *&lt;/em&gt; from the server.&lt;/p&gt;

&lt;p&gt;We need to connect to the event &lt;code&gt;join&lt;/code&gt;  from the client and emit the inputted name and room as a parameter to the server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// The rest of the code &lt;/span&gt;
  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;join&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#messaging"&gt;
  &lt;/a&gt;
  Messaging
&lt;/h2&gt;

&lt;p&gt;Alright, Here we are😮.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#welcome-message"&gt;
  &lt;/a&gt;
  Welcome Message
&lt;/h4&gt;

&lt;p&gt;We have to emit a welcome message to the user when the user joins a room. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All our messages would be coming from the server. When the user sends a message, we have to first send that message to the server then send it back to the client. The server would emit the message and the client would receive it.&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Navigate to &lt;code&gt;chat.js&lt;/code&gt; to create the connection:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMessages&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setMessages&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We created another useEffect that receives all messages from the server and set them to &lt;code&gt;messages&lt;/code&gt; state variable.&lt;br&gt;We need to render the messages on for the user in the return block. We need to use JSX to render all messages to the user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We mapped through the &lt;code&gt;messages&lt;/code&gt; state variable, we specified the key as the index to avoid &lt;code&gt;react&lt;/code&gt; error and we returned the &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;user&lt;/code&gt; passed down from our server.&lt;br&gt;Let's Connect to the connection created by our client from our &lt;code&gt;server.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;connection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;join&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;callBack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;//The rest of the code&lt;/span&gt;

    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Admin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Welocome to &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// The rest of the code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are emitting to &lt;code&gt;message&lt;/code&gt; connection and we are passing the &lt;code&gt;user&lt;/code&gt; and the &lt;code&gt;text&lt;/code&gt; as parameters.&lt;/p&gt;

&lt;p&gt;We also have to tell other users in the group that a new user has joined. Navigate to &lt;code&gt;server.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;broadcast&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Admin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; has joined!`&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The client is always listening for an &lt;code&gt;emit&lt;/code&gt; to &lt;code&gt;message&lt;/code&gt;. The &lt;code&gt;message&lt;/code&gt; is like the name or an identification for the connection. &lt;br&gt;The code we just wrote is broadcasting to other users in the room, telling them that a new user has just Joined the Group.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sending-message"&gt;
  &lt;/a&gt;
  Sending Message
&lt;/h3&gt;

&lt;p&gt;This is how sending of messages would be, We will get the message input from the user, send it to the server and then the server emits that message to everyone in the Group.  Let's Open our &lt;code&gt;chat.js&lt;/code&gt; and create the &lt;code&gt;input&lt;/code&gt; field:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sendMessage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;setMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;empty input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    // The rest of the code

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are emitting to a new &lt;code&gt;socket&lt;/code&gt; event. It takes the message from the user and sends it to the newly created socket event &lt;code&gt;sendMessage&lt;/code&gt;. After we've emitted the message to the server using &lt;code&gt;sendMessage&lt;/code&gt;event,  Open your &lt;code&gt;server.js&lt;/code&gt; and let's create the connection for the &lt;code&gt;sendMessage&lt;/code&gt; event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;join&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;callBack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;//The rest of the code&lt;/span&gt;

  &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sendMessage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we got the message from the client, we emitted that received message to everyone in the group.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disconnect"&gt;
  &lt;/a&gt;
  Disconnect
&lt;/h2&gt;

&lt;p&gt;This is last part of this article. After the user is done with chatting and would love to disconnect, we would have send a message to every one in the group, informing them that a user has just disconnected.  Let's open our &lt;code&gt;user.js&lt;/code&gt; file and create a function that would be in charge of removing users from the array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function &lt;code&gt;removeUser&lt;/code&gt; would request for an &lt;code&gt;id&lt;/code&gt;, find a user with that id and then returns that user. &lt;br&gt;We have to import &lt;code&gt;removeUser&lt;/code&gt; in our &lt;code&gt;server.js&lt;/code&gt; and emit a disconnection message to every one in the returned &lt;code&gt;user&lt;/code&gt; group:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;removeUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;connection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// The rest of the code&lt;/span&gt;

    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;disconnect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;removeUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Admin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; just left the room`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A disconnection has been made&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;When you restart your server, you might get an error when you refresh the Chat page. The best thing to do is to login again from the Home page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations, We've Successfully Created a Realtime Chat App with &lt;code&gt;React&lt;/code&gt; and &lt;code&gt;Socket.io&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Here is the link to the &lt;a href="https://github.com/divofred/ChatTutorial"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for staying with me till the end💗. If you like to deploy this Chat app to Heroku, I have an article where I talked about &lt;a href="https://dev.to/divofred/deploy-a-react-and-node-app-to-heroku-cgk"&gt;Deploying React and Node app to Heroku&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>socketio</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Securing Kubernetes Deployments</title>
      <author>Tomas Fernandez</author>
      <pubDate>Mon, 08 Nov 2021 13:46:03 +0000</pubDate>
      <link>https://dev.to/semaphore/securing-kubernetes-deployments-3bg7</link>
      <guid>https://dev.to/semaphore/securing-kubernetes-deployments-3bg7</guid>
      <description>&lt;p&gt;&lt;a href="https://www.redhat.com/en/resources/kubernetes-adoption-security-market-trends-2021-overview"&gt;A recent survey by Red Hat&lt;/a&gt; found that more than half of the Kubernetes environments are misconfigured. Even worse, about 90% of respondents had at least one security incident last year, leading to the very first wave of &lt;a href="https://containerjournal.com/features/siloscape-the-dark-side-of-kubernetes/"&gt;Kubernetes-native malware&lt;/a&gt;. In this tutorial, we present three tools to validate and secure your Kubernetes deployments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#continuous-deployment-with-kubernetes"&gt;
  &lt;/a&gt;
  Continuous Deployment with Kubernetes
&lt;/h2&gt;

&lt;p&gt;Kubernetes main selling point is in its declarative nature — we write a manifest describing the desired final state of a deployment and let the platform figure out the rest. But the fact of the matter is that these manifests are easy to get wrong, &lt;a href="https://k8s.af/"&gt;breaking stuff in the process&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://semaphoreci.com/cicd"&gt;Continuous delivery&lt;/a&gt; with Kubernetes is only viable when we test at every stage. For example:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; First, test the code in the &lt;a href="https://semaphoreci.com/blog/build-stage"&gt;build stage&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; Then, build the container image and &lt;a href="https://semaphoreci.com/blog/structure-testing-for-docker-containers"&gt;check its structure&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; Validate the manifest before deployment (where we are today).&lt;/li&gt;
&lt;li&gt; After deployment, test the system in production using something like &lt;a href="https://semaphoreci.com/blog/what-is-canary-deployment"&gt;canary deployments&lt;/a&gt; or &lt;a href="https://semaphoreci.com/blog/continuous-blue-green-deployments-with-kubernetes"&gt;blue-green deployments&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#validating-kubernetes-manifests"&gt;
  &lt;/a&gt;
  Validating Kubernetes manifests
&lt;/h2&gt;

&lt;p&gt;You don’t need to be a Kubernetes authority to deploy safely — no one should; that’s what we have testing tools for. You do have to have some familiarity with how it works, though. So, if this is the first time you hear the word Kubernetes, pods, or containers, check out our free ebook &lt;a href="https://semaphoreci.com/resources/cicd-docker-kubernetes"&gt;CI/CD for Docker and Kubernetes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first thing to check is that the manifests are formally correct — in other words, they follow the Kubernetes &lt;a href="https://github.com/kubernetes/kubernetes/tree/master/api/openapi-spec"&gt;OpenAPI specification&lt;/a&gt;. We’ll introduce two tools for this: kubeval and kubeconform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kubeval"&gt;
  &lt;/a&gt;
  Kubeval
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.kubeval.com/"&gt;Kubeval&lt;/a&gt; is a command-line tool and a Go library for validating Kubernetes manifests. It supports Linux, macOS, Docker, and Windows.&lt;/p&gt;

&lt;p&gt;Kubeval does one job but does it well. Once installed, we can begin testing manifests in YAML or JSON. It’s highly recommended to use the &lt;code&gt;--strict&lt;/code&gt; flag to fail the tests when unknown properties are found.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubeval &lt;span class="nt"&gt;--strict&lt;/span&gt; deployment.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#kubeconform"&gt;
  &lt;/a&gt;
  Kubeconform
&lt;/h3&gt;

&lt;p&gt;Inspired by Kubeval, Kubeconform does the same with a focus on speed and extensibility. Unlike Kubeval, Kubeconform can validate manifests that include Custom Resource Definitions (CRDs), a way of extending Kubernetes with functionalities such as persistent databases or additional logging.&lt;/p&gt;

&lt;p&gt;Kubeconform automatically downloads CRDs definitions from remote repositories and runs validation tests. It also self-updates to Kubernetes’ latest specification.&lt;/p&gt;

&lt;p&gt;Kubeconform is released for Docker, MacOs, Linux, and Windows. Once installed, we run the test with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubeconform deployment.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Any errors will be reported. If you want more verbose output, add the &lt;code&gt;--summary&lt;/code&gt; option.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#securing-deployments-with-kubescore"&gt;
  &lt;/a&gt;
  Securing deployments with Kube-Score
&lt;/h2&gt;

&lt;p&gt;Short of having a Kubernetes expert at hand to check every deployment, a checklist with sane practices is the next best thing. &lt;a href="https://github.com/zegl/kube-score"&gt;Kube-Score&lt;/a&gt; scans your deployment manifests, offers advice, and throws errors before we get into trouble. You can see the complete &lt;a href="https://github.com/zegl/kube-score/blob/master/README_CHECKS.md"&gt;list of checks here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kube-Score runs in Windows, Linux, macOS, Docker, and you &lt;a href="https://kube-score.com/"&gt;try it out online&lt;/a&gt;. Let’s see how well our Ruby “Hello, World” demo does. You may fork and clone the demo here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/semaphoreci-demos/semaphore-demo-ruby-kubernetes"&gt;semaphore-demo-ruby-kubernetes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We run &lt;code&gt;kube-score score deployment.yml&lt;/code&gt; to get these results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apps/v1/Deployment semaphore-demo-ruby-kubernetes                             💥
    [CRITICAL] Container Resources
        · semaphore-demo-ruby-kubernetes -&amp;gt; CPU limit is not set
            Resource limits are recommended to avoid resource DDOS. Set
            resources.limits.cpu
        · semaphore-demo-ruby-kubernetes -&amp;gt; Memory limit is not set
            Resource limits are recommended to avoid resource DDOS. Set
            resources.limits.memory
        · semaphore-demo-ruby-kubernetes -&amp;gt; CPU request is not set
            Resource requests are recommended to make sure that the application
            can start and run without crashing. Set resources.requests.cpu
        · semaphore-demo-ruby-kubernetes -&amp;gt; Memory request is not set
            Resource requests are recommended to make sure that the application
            can start and run without crashing. Set resources.requests.memory
    [CRITICAL] Container Image Pull Policy
        · semaphore-demo-ruby-kubernetes -&amp;gt; ImagePullPolicy is not set to Always
            It's recommended to always set the ImagePullPolicy to Always, to
            make sure that the imagePullSecrets are always correct, and to
            always get the image you want.
    [CRITICAL] Pod NetworkPolicy
        · The pod does not have a matching NetworkPolicy
            Create a NetworkPolicy that targets this pod to control who/what
            can communicate with this pod. Note, this feature needs to be
            supported by the CNI implementation used in the Kubernetes cluster
            to have an effect.
    [CRITICAL] Pod Probes
        · Container is missing a readinessProbe
            A readinessProbe should be used to indicate when the service is
            ready to receive traffic. Without it, the Pod is risking to receive
            traffic before it has booted. It's also used during rollouts, and
            can prevent downtime if a new version of the application is failing.
            More information: https://github.com/zegl/kube-score/blob/master/README_PROBES.md
    [CRITICAL] Container Security Context
        · semaphore-demo-ruby-kubernetes -&amp;gt; Container has no configured security context
            Set securityContext to run the container in a more secure context.
v1/Service semaphore-demo-ruby-kubernetes-lb                                  ✅
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The initial assessment is definitely not looking good. The deployment has five critical errors. It's time to make lemonade out of these lemons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0gNi1m3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8n8z08gc1bgecwsk2if.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0gNi1m3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8n8z08gc1bgecwsk2if.jpg" alt="Image description" width="621" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-image-pull-policy"&gt;
  &lt;/a&gt;
  What is Image Pull Policy?
&lt;/h3&gt;

&lt;p&gt;When we deploy something in Kubernetes for the first time, &lt;a href="https://kubernetes.io/docs/concepts/containers/images/"&gt;kubelet pulls the image&lt;/a&gt; from the appropriate registry. The image will stay in the node’s cache to be reused. This caching behavior works as long as we’re meticulous about tags. With this, I mean that we are safe if we don’t reuse tags (I’m looking at you, &lt;code&gt;latest&lt;/code&gt;). Otherwise, unexpected things will happen because we can never be sure which particular image a node is running: the one in the cache or the one in the registry.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ImagePullPolicy&lt;/code&gt; value defines how the cache works. By default, its value is &lt;code&gt;IfNotPresent&lt;/code&gt;, meaning “pull the image if not cached.” The recommendation is to change it to &lt;code&gt;Always&lt;/code&gt;, so cache is disabled and a fresh image is always pulled.&lt;/p&gt;

&lt;p&gt;We apply this setting at the container level. This translates to the element &lt;code&gt;spec.template.spec.containers[]&lt;/code&gt; in our manifest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;

        &lt;span class="c1"&gt;# ... add this line to never cache the image&lt;/span&gt;
        &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Always&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One down, four left to go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-cpu-and-memory-limits"&gt;
  &lt;/a&gt;
  Setting CPU and Memory limits
&lt;/h3&gt;

&lt;p&gt;Containers in Kubernetes don’t have any limits. Wild and free they are to take as much CPU and memory as they may. Having a single pod with a runaway container taking all of a node’s memory is no fun. To keep these guys in check, we should specify limits for &lt;a href="https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-resource-requests-and-limits"&gt;all pods in the deployment&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course, setting limits too low could be worse than having none in place. So monitoring is critical. Unless you really need unlimited pods, in which case it’s best to corral them in “no-throttle” nodes to maintain the cluster’s stability.&lt;/p&gt;

&lt;p&gt;Back to fixing our deployment. We can specify resource quotas in two ways: &lt;em&gt;requests&lt;/em&gt; and &lt;em&gt;limits&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;request&lt;/strong&gt; is the least amount of memory and CPU a container needs to get in order to run correctly. The Kubernetes scheduler will use this information to assign the pod to a node with enough free resources.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oyYGNvre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z96lua1ksu3a5c2ie8x7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oyYGNvre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z96lua1ksu3a5c2ie8x7.png" alt="Image description" width="540" height="684"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;limit&lt;/strong&gt; is the maximum amount of memory and CPU a container is allowed to consume. A container may use more than its permitted requests value, but never more than its limits.&lt;/p&gt;

&lt;p&gt;Both requests and limits are specified as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;CPU&lt;/strong&gt;: a value of &lt;code&gt;1&lt;/code&gt; is equal to one hyperthreaded processor on a bare-metal machine or 1 vCPU core in a VM. For instance, a value of &lt;code&gt;0.25&lt;/code&gt; is a quarter of a core, which can also be written as &lt;code&gt;250m&lt;/code&gt; (millicpus). A container is not to use more than its allowed share of CPU time or risk throttling. Containers and pods will never be killed for exceeding their processor quota.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Memory&lt;/strong&gt;: defined either in bytes (1Mb = 10^6 bytes) or mebibytes (1Mi = 2^20 bytes). When a container uses more memory than allowed, it will be terminated with an out-of-memory (OOM) error, killing the pod.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ur5iOk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95u7ein7v5zarf2qeddk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ur5iOk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95u7ein7v5zarf2qeddk.png" alt="Image description" width="592" height="672"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s important to note that these values are set per container. They are summed up when pods are composed of more than one container.&lt;/p&gt;

&lt;p&gt;So, now that we know how requests and limits work. What values should we choose for our demo? A simple application like ours needs very few resources. Complex systems will require more; how much more is a question best answered with monitoring in place and a bit of experimentation.&lt;/p&gt;

&lt;p&gt;Let’s say we set a request quota of &lt;code&gt;100m&lt;/code&gt;  and &lt;code&gt;64 Mi&lt;/code&gt;. We’ll double those values for the limits. Remember that resources are applied at container level: &lt;code&gt;spec.template.spec.containers[]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;

        &lt;span class="c1"&gt;# ... add resource requests and limits&lt;/span&gt;
        &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;requests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;100m"&lt;/span&gt;
            &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;64Mi"&lt;/span&gt;
          &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;200m"&lt;/span&gt;
            &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;128Mi"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-liveness-and-readiness-probes"&gt;
  &lt;/a&gt;
  Using Liveness and Readiness Probes
&lt;/h3&gt;

&lt;p&gt;Once a container is up, how does Kubernetes keep track of it’s health? And is it ready to accept user connections? The answers to these questions involve &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/"&gt;using &lt;em&gt;probes&lt;/em&gt;&lt;/a&gt;. A probe can work in two modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;command&lt;/strong&gt;: run a command inside the container and check its exit code.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;network&lt;/strong&gt;: ping a port or perform an HTTP request and check the result.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our example, we can check that the webserver (&lt;code&gt;puma&lt;/code&gt;) process is running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;

        &lt;span class="c1"&gt;# ... add liveness probe&lt;/span&gt;
        &lt;span class="na"&gt;livenessProbe&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;pgrep&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;-f&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;puma&lt;/span&gt;
          &lt;span class="na"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
          &lt;span class="na"&gt;periodSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The probe above is called a &lt;em&gt;liveness probe&lt;/em&gt;. If the exit code is zero, the application is considered alive. Failed probes make the container &lt;strong&gt;to be restarted&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pF52bDD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aycuoogiscewnhopd296.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pF52bDD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aycuoogiscewnhopd296.gif" alt="Image description" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There’s another type of probe called &lt;em&gt;readiness probe&lt;/em&gt;. It checks if the pod is ready to accept connections. A failed probe does not automatically restart the pod, but it disconnects from the load balancer, preventing users from reaching it. Readiness probes are meant to cope with temporary problems.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4JzRwmv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3xz7ao8ohe68brjazr8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4JzRwmv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3xz7ao8ohe68brjazr8.gif" alt="Image description" width="880" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We define probes at the container level, but Kubernetes handles pods instead of containers. This means that all its container probes must pass together for a pod to be considered alive and ready.&lt;/p&gt;

&lt;p&gt;Let’s add a readiness probe that attempts a GET request on port 4567. The probe passes as long as the return code is between 200 and 399.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;

        &lt;span class="c1"&gt;# ... and a readiness probe&lt;/span&gt;
        &lt;span class="na"&gt;readinessProbe&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;httpGet&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4567&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;
          &lt;span class="na"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
          &lt;span class="na"&gt;periodSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#controlling-access-with-a-pod-network-policy"&gt;
  &lt;/a&gt;
  Controlling access with a pod network policy
&lt;/h3&gt;

&lt;p&gt;Unless stated otherwise, pods in Kubernetes are allowed to send and accept packets to and from anywhere. While it’s true that the pods cannot receive traffic from outside without configuring some kind of endpoint, all pods inside the cluster are allowed free communication. We use &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/"&gt;pod network policies&lt;/a&gt; to lock down their access.&lt;/p&gt;

&lt;p&gt;Within the cluster, we can define &lt;em&gt;inter-pod&lt;/em&gt; and &lt;em&gt;inter-namespace&lt;/em&gt; policies to isolate pods. From without, we lock down external access with &lt;em&gt;IP-based&lt;/em&gt; policies.&lt;/p&gt;

&lt;p&gt;Our demo does not really need a network policy because we want our pods to be reachable from the Internet. But it’s good practice to make implicit behavior explicit, so we’ll add an “allow all” policy to the pods in the deployment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;NetworkPolicy&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;allow-all&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;podSelector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;
  &lt;span class="na"&gt;ingress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
  &lt;span class="na"&gt;egress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
  &lt;span class="na"&gt;policyTypes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Ingress&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Egress&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;IP-based policies have some downsides, unfortunately. For one, its implementation depends on network plugins enabled on the cluster. And in many cases, policies might be ignored completely, as not every cloud supports them in the same way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#locking-down-containers-with-a-security-context"&gt;
  &lt;/a&gt;
  Locking down containers with a security context
&lt;/h3&gt;

&lt;p&gt;While network policies secure pods by controlling communications, &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"&gt;&lt;em&gt;security contexts&lt;/em&gt;&lt;/a&gt; define privileges that pods and containers have while running. A security context allows us to run pods with more (or less) capabilities, grant or deny access to files inside, or control which system calls are permitted.&lt;/p&gt;

&lt;p&gt;This is a topic that needs quite a deep understanding of Linux and container internals to use well. We’ll create a basic security context that marks the filesystem read-only and runs the container with a high ID user.  This should be enough to pass Kube-Score.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;        &lt;span class="c1"&gt;# add a security context for the container&lt;/span&gt;
        &lt;span class="na"&gt;securityContext&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;runAsUser&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10001&lt;/span&gt;
          &lt;span class="na"&gt;runAsGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10001&lt;/span&gt;
          &lt;span class="na"&gt;readOnlyRootFilesystem&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run Kube-Score once more to ensure no more errors are thrown. You can enable optional tests with &lt;code&gt;--enable-optional-test TEST_ID&lt;/code&gt;, or disable mandatory tests with &lt;code&gt;--ignore-test TEST_ID&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once done, commit the file to the repository, so you’re ready for the following section: automating tests with Semaphore CI/CD.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apps/v1/Deployment semaphore-demo-ruby-kubernetes                             ✅
networking.k8s.io/v1/NetworkPolicy allow-all                                  ✅
v1/Service semaphore-demo-ruby-kubernetes-lb                                  ✅
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For reference, the final version of the manifest looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;imagePullSecrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dockerhub&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$DOCKER_USERNAME/semaphore-demo-ruby-kubernetes:$SEMAPHORE_WORKFLOW_ID&lt;/span&gt;

        &lt;span class="c1"&gt;# don't cache images&lt;/span&gt;
        &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Always&lt;/span&gt;

        &lt;span class="c1"&gt;# resource quotas&lt;/span&gt;
        &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;requests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;100m"&lt;/span&gt;
            &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;64Mi"&lt;/span&gt;
          &lt;span class="na"&gt;limits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;cpu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;200m"&lt;/span&gt;
            &lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;128Mi"&lt;/span&gt;

        &lt;span class="c1"&gt;# liveness probe&lt;/span&gt;
        &lt;span class="na"&gt;livenessProbe&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;pgrep&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;-f&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;puma&lt;/span&gt;
          &lt;span class="na"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
          &lt;span class="na"&gt;periodSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;

        &lt;span class="c1"&gt;# readiness probe&lt;/span&gt;
        &lt;span class="na"&gt;readinessProbe&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;httpGet&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4567&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;
          &lt;span class="na"&gt;initialDelaySeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
          &lt;span class="na"&gt;periodSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;

        &lt;span class="c1"&gt;# security context for the container&lt;/span&gt;
        &lt;span class="na"&gt;securityContext&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;runAsUser&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10001&lt;/span&gt;
          &lt;span class="na"&gt;runAsGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10001&lt;/span&gt;
          &lt;span class="na"&gt;readOnlyRootFilesystem&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="nn"&gt;---&lt;/span&gt;

&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes-lb&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;LoadBalancer&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
      &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4567&lt;/span&gt;

&lt;span class="s"&gt;--------&lt;/span&gt;

&lt;span class="c1"&gt;# pod network policy&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;NetworkPolicy&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;allow-all&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;podSelector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;semaphore-demo-ruby-kubernetes&lt;/span&gt;
  &lt;span class="na"&gt;ingress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
  &lt;span class="na"&gt;egress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
  &lt;span class="na"&gt;policyTypes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Ingress&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;Egress&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-manifests-with-cicd"&gt;
  &lt;/a&gt;
  Testing manifests with CI/CD
&lt;/h2&gt;

&lt;p&gt;All that we’ve learned so far was a preparation for this. Our goal now is to incorporate these tools into the CI/CD pipeline.&lt;/p&gt;

&lt;p&gt;You can combine the following steps with the pipeline configured in &lt;a href="https://semaphoreci.com/blog/structure-testing-for-docker-containers"&gt;Structure Testing for Docker Containers&lt;/a&gt;, which showed how to test containers before deployment. I’ll assume you have some familiarity with how Semaphore works. Check out our &lt;a href="https://docs.semaphoreci.com/guided-tour/getting-started/"&gt;beginner guide&lt;/a&gt; if that’s not the case.&lt;/p&gt;

&lt;p&gt;This is where we are now. A pipeline that builds a Docker image, tests it, and deploys it with Kubernetes. The demonstration code can be found here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/semaphoreci-demos/semaphore-demo-ruby-kubernetes"&gt;semaphore-demo-ruby-kubernetes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3f-Y9g8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unfl0ekep2i6s08oejao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3f-Y9g8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unfl0ekep2i6s08oejao.png" alt="Image description" width="880" height="289"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Manifest validation should take place before deployment. The first pipeline does &lt;a href="https://semaphoreci.com/continuous-integration"&gt;continuous integration&lt;/a&gt;, the second builds the Docker image. Deployment happens in the last pipeline, so we’ll add manifest validation before deploying to Kubernetes.&lt;/p&gt;

&lt;p&gt;Open the workflow editor and position yourself in the deployment pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_sAbIfRV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2noqd13w9s70m6689tg3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_sAbIfRV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2noqd13w9s70m6689tg3.png" alt="Image description" width="880" height="185"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a new block and remove all its dependencies. We’ll configure two jobs. The first one installs Kubeconform, clones your repository with &lt;code&gt;checkout&lt;/code&gt;, and runs the test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wget https://github.com/yannh/kubeconform/releases/download/v0.4.12/kubeconform-linux-amd64.tar.gz
&lt;span class="nb"&gt;tar &lt;/span&gt;xf kubeconform-linux-amd64.tar.gz
&lt;span class="nb"&gt;sudo cp &lt;/span&gt;kubeconform /usr/local/bin
checkout
kubeconform &lt;span class="nt"&gt;--summary&lt;/span&gt; deployment.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second job does the same with Kube-Score:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wget https://github.com/zegl/kube-score/releases/download/v1.12.0/kube-score_1.12.0_linux_amd64.tar.gz
&lt;span class="nb"&gt;tar &lt;/span&gt;xf kube-score_1.12.0_linux_amd64.tar.gz
&lt;span class="nb"&gt;sudo cp &lt;/span&gt;kube-score /usr/local/bin
checkout
kube-score score deployment.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we want to stop deployment if either of the jobs fails. Click on the “Deploy to Kubernetes” block and add the new test block as a dependency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RrLgBFSE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4nu94ouc1iwntc6u9lp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RrLgBFSE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4nu94ouc1iwntc6u9lp.png" alt="Image description" width="880" height="590"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before trying out the pipeline, review the Kubernetes deployment job. The full detail on how it works is explained in &lt;a href="https://semaphoreci.com/blog/guide-continuous-deployment-kubernetes"&gt;Continuous Deployment with Kubernetes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Run the workflow&lt;/strong&gt; and &lt;strong&gt;Start&lt;/strong&gt;. Wait until the CI and Docker build pipelines end before trying out the deployment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fw79i0Ff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrqbugpu5jiwumanauk2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fw79i0Ff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrqbugpu5jiwumanauk2.png" alt="Image description" width="880" height="183"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Deploy to Kubernetes&lt;/strong&gt; to start the pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Tv4ESm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wact41oytym0pv34sigm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Tv4ESm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wact41oytym0pv34sigm.png" alt="Image description" width="880" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Being able to deploy any day of the week safely is a powerful thing. But to do it with confidence requires good testing in place at every stage.&lt;/p&gt;

&lt;p&gt;Interested in Kubernetes? Read these next:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://semaphoreci.com/blog/kubernetes-vs-docker"&gt;Kubernetes vs Docker: Understanding Containers in 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semaphoreci.com/blog/all-roads-lead-to-kubernetes-with-jerome-petazzoni"&gt;All Roads Lead to Kubernetes with Jérôme Petazzoni&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://semaphoreci.com/blog/nodejs-digitalocean-kubernetes"&gt;How To Build and Deploy a Node.js Application To DigitalOcean Kubernetes Using CI/CD&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://semaphoreci.com/blog/continuous-delivery-google-kubernetes"&gt;How to Release Faster with Continuous Delivery for Google Kubernetes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>kubernetes</category>
      <category>security</category>
      <category>cloud</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My Web Dev Journey</title>
      <author>Muhammad Alam</author>
      <pubDate>Mon, 08 Nov 2021 13:44:52 +0000</pubDate>
      <link>https://dev.to/alomoadev/hello-world-7ge</link>
      <guid>https://dev.to/alomoadev/hello-world-7ge</guid>
      <description>&lt;h2&gt;
  &lt;a href="#to-be-honest"&gt;
  &lt;/a&gt;
  To Be Honest...
&lt;/h2&gt;

&lt;p&gt;To be honest, I decided that I wanted to be a web developer after graduating. During my time in uni, I didn't really have an idea of what I wanted to do after graduation, so I just went through the motions of uni life without much of a clue. Not having an idea was a massive problem, so I spoke to a friend of mine and she convinced me to walk the path of a web developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#university"&gt;
  &lt;/a&gt;
  University?
&lt;/h2&gt;

&lt;p&gt;Since my web dev journey began after graduation, it might look like university wasn't worth it for me. Well it was, and it wasn't. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#was-worth-it"&gt;
  &lt;/a&gt;
  Was Worth It
&lt;/h3&gt;

&lt;p&gt;University was worth it because it structurally introduced me to the branches of Computer Science (Software Engineering, Database systems, User-Centered Designs, Network Management, Cyber Security). It allowed me the opportunity to test the waters of each branch before deciding, granted I did not jump into any pools.&lt;/p&gt;

&lt;p&gt;I learnt a few programming languages during my time in university, went through programming paradigms like object-oriented programming and procedural programming. All this made it significantly easier to pick up new languages as I had to with JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wasnt-worth-it"&gt;
  &lt;/a&gt;
  Wasn't Worth It
&lt;/h3&gt;

&lt;p&gt;There are a lot of opportunities that are available in Universities. Hackathons, career events, career support, events, societies, opportunities given by lecturers, what have you. All these opportunities are great ways to gain experience, unlock more doors, network, the list goes on. Unfortunately for me, I did not take these opportunities which in my eyes was a form of self-sabotage. Pretty much a frog in a well sort of situation. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue...
&lt;/h2&gt;

&lt;p&gt;The issue was I had pretty much 0 experience in web development. I faintly remember a web dev fundamentals module I did back in year one but it became a fuzzy memory. Whelp, no time like the present! I got stuck into the web dev courses in &lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Responsive Web Design&lt;/li&gt;
&lt;li&gt;JavaScript Algorithms and Data Structures&lt;/li&gt;
&lt;li&gt;Front End Development Libraries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These courses taught me the basics of HTML, CSS, JavaScript, React, and other libraries &amp;amp; frameworks. They even had projects to complete at the end of every course, completed those with some degree of success (baby steps!). &lt;/p&gt;

&lt;p&gt;freeCodeCamp was great at easing me into the world that is web dev, I recommend it for anyone starting out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  After...
&lt;/h2&gt;

&lt;p&gt;After completing the web courses in freeCodeCamp I bounced around free/paid courses, learning what I could. Some courses worthy of note were the &lt;a href="https://fullstackui.com/"&gt;Full Stack UI&lt;/a&gt; course, a bit of &lt;a href="https://svelte.dev/tutorial/basics"&gt;Svelte&lt;/a&gt;, and the NodeJS course from &lt;br&gt;
 &lt;a href="https://www.udemy.com/course/the-complete-nodejs-developer-course-2/"&gt;Udemy&lt;/a&gt; made by the amazing Andrew Mead. Why learn back-end? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Because every front-end developer should have some experience with back-end for their personal projects (and vice versa).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AND AFTER THAT, I got stuck into a 100 days of daily UI challenge which involved designing one UI every day, based on a &lt;a href="https://www.dailyui.co/"&gt;prompt&lt;/a&gt;, for 100 days. That took a while. Some of my "best" work can be seen over at &lt;a href="https://www.polywork.com/alomoa/collections/1531"&gt;Polyworks&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#well"&gt;
  &lt;/a&gt;
  Well...
&lt;/h2&gt;

&lt;p&gt;So that's how I started my web dev journey. I skipped out on all the issues regarding procrastinating, lack of motivation, what have you. Perhaps that'll be for another time. &lt;/p&gt;

&lt;p&gt;Presently I'm on day 69 of a 100 days of Threejs challenge. In this challenge, I have committed to learning the &lt;a href="https://threejs.org/"&gt;Threejs&lt;/a&gt; library every day for 100 days. I've already gone through the basics of Threejs (and blender) with the help of Bruno Simon and his course, &lt;a href="https://threejs-journey.com/"&gt;Threejs Journey&lt;/a&gt;. So far I've made a &lt;a href="https://alomoa.github.io/Portal-Scene/"&gt;portal scene&lt;/a&gt; and a &lt;a href="https://alomoa.github.io/Bedroom/"&gt;model of my room&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;My next project involves going back to secondary school level maths to help me understand the mystery that are shaders. &lt;br&gt;
Till then!&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Supabase October 2021 Updates</title>
      <author>Copple</author>
      <pubDate>Mon, 08 Nov 2021 13:24:40 +0000</pubDate>
      <link>https://dev.to/supabase/supabase-october-2021-updates-4glf</link>
      <guid>https://dev.to/supabase/supabase-october-2021-updates-4glf</guid>
      <description>&lt;p&gt;Three new Auth providers, multi-schema support, and we're gearing up for another Launch Week.&lt;/p&gt;

&lt;p&gt;Let's dive into what's been happening at Supabase during the month of October.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-demo"&gt;
  &lt;/a&gt;
  Quick Demo
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yL5WbAKAKjE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#slack-spotify-and-messagebird-logins"&gt;
  &lt;/a&gt;
  Slack, Spotify, and MessageBird logins
&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/supabase/gotrue/pull/245"&gt;&lt;code&gt;@HarryET&lt;/code&gt;&lt;/a&gt; and our friends at &lt;a href="https://github.com/supabase/gotrue/pull/210"&gt;MessageBird&lt;/a&gt;&lt;br&gt;
we have 3 new Auth providers this month: &lt;a href="https://supabase.io/docs/guides/auth/auth-slack"&gt;Slack&lt;/a&gt;, &lt;a href="https://supabase.io/docs/guides/auth/auth-spotify"&gt;Spotify&lt;/a&gt;, and &lt;a href="https://supabase.io/docs/guides/auth/auth-messagebird"&gt;MessageBird&lt;/a&gt; phone logins.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ctzzu6Ld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10214025/140694829-4e267927-b5d8-41fc-bfa0-792c175c4b7c.png" class="article-body-image-wrapper"&gt;&lt;img alt="supabase-auth-slack" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ctzzu6Ld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10214025/140694829-4e267927-b5d8-41fc-bfa0-792c175c4b7c.png" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#multischema-support"&gt;
  &lt;/a&gt;
  Multi-schema support
&lt;/h2&gt;
&lt;h4&gt;
  &lt;a href="#dashboard"&gt;
  &lt;/a&gt;
  Dashboard
&lt;/h4&gt;

&lt;p&gt;Browse data in any database schema using the Schema switcher in the Dashbaord.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A7HMIxgW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10214025/140694811-800802b7-e638-4ea7-a829-abe9192e0f13.png" class="article-body-image-wrapper"&gt;&lt;img alt="multi-schema" src="https://res.cloudinary.com/practicaldev/image/fetch/s--A7HMIxgW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10214025/140694811-800802b7-e638-4ea7-a829-abe9192e0f13.png" width="880" height="413"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#api"&gt;
  &lt;/a&gt;
  API
&lt;/h4&gt;

&lt;p&gt;You can access any schema with your API, after enabling access in the Dashboard.&lt;br&gt;
&lt;a href="https://supabase.io/docs/reference/javascript/initializing#api-schemas"&gt;Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jfCmX1Eg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10214025/140694830-808600cd-7c1c-446c-88a6-6bd7a506766b.png" class="article-body-image-wrapper"&gt;&lt;img alt="supabase-multi-schema-support" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jfCmX1Eg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10214025/140694830-808600cd-7c1c-446c-88a6-6bd7a506766b.png" width="880" height="364"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#fresh-docs-and-guides"&gt;
  &lt;/a&gt;
  Fresh Docs and Guides
&lt;/h2&gt;

&lt;p&gt;We have a TON of new guides, with videos too.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#database-functions"&gt;
  &lt;/a&gt;
  Database Functions
&lt;/h3&gt;

&lt;p&gt;Learn about PostgreSQL Functions. &lt;a href="http://supabase.io/docs/guides/database/functions"&gt;Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MJZCCpCYEqk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#auth-overview"&gt;
  &lt;/a&gt;
  Auth Overview
&lt;/h3&gt;

&lt;p&gt;Learn about all the exciting feature of Auth within Supabase. &lt;a href="https://supabase.io/docs/guides/auth/intro"&gt;Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6ow_jW4epf8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#api-features"&gt;
  &lt;/a&gt;
  API Features
&lt;/h4&gt;

&lt;p&gt;Learn more about the power of PostgREST for RESTful APIs. &lt;a href="https://supabase.io/docs/guides/api#restful-api"&gt;Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rPAJJFdtPw0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#and-more"&gt;
  &lt;/a&gt;
  And more
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Redwood Quickstart: &lt;a href="https://supabase.io/docs/guides/with-redwoodjs"&gt;https://supabase.io/docs/guides/with-redwoodjs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Expanded Self-hosting: &lt;a href="https://supabase.io/docs/guides/hosting/overview"&gt;https://supabase.io/docs/guides/hosting/overview&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Expanded Auth Reference docs with &lt;a href="https://supabase.io/docs/reference/javascript/auth-api-deleteuser"&gt;serverside functions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;"Before you launch" checklist: &lt;a href="https://supabase.io/docs/going-into-prod"&gt;https://supabase.io/docs/going-into-prod&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UHtwGCWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10214025/140694791-3d3b7904-140c-4d1c-bdcd-0ef9ce24f2d7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UHtwGCWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10214025/140694791-3d3b7904-140c-4d1c-bdcd-0ef9ce24f2d7.png" alt="launch-ckecklist" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#community"&gt;
  &lt;/a&gt;
  Community
&lt;/h2&gt;

&lt;p&gt;There was a lot of activity this month.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#supabase-at-jamstack-conf"&gt;
  &lt;/a&gt;
  Supabase at Jamstack conf
&lt;/h4&gt;

&lt;p&gt;Supabase attended the Jamstack conf. Watch us catch up with Matt, the cofounder of Netlify (minute 8).&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/phC14xfwvjc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#supabase-at-nextjs-conf"&gt;
  &lt;/a&gt;
  Supabase at Next.js conf
&lt;/h4&gt;

&lt;p&gt;And &lt;a href="https://twitter.com/_dijonmusters"&gt;Jon&lt;/a&gt; made a guest appearance at this year's amazing &lt;a href="https://nextjs.org/conf"&gt;Next.js Conf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/GpXEMB1pDRE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#community-highlights"&gt;
  &lt;/a&gt;
  Community Highlights
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Vue 3 | Workout Tracker App - John Komarnicki &lt;a href="https://www.youtube.com/watch?v=3tF0fGkd4ho"&gt;video&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Adalo + Supabase - Flywheel Media &lt;a href="https://www.youtube.com/watch?v=YGP1LXctLk4"&gt;video&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Nuxt 3 Beta + Supabase - BenCodeZen &lt;a href="https://www.youtube.com/watch?v=5vB120atiaU"&gt;video&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Made With Supabase (now on Nuxt 3) - Zernonia &lt;a href="https://www.madewithsupabase.com/"&gt;site&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Nuxt 3 + Tailwind + Supabase - Ekene Eze &lt;a href="https://www.youtube.com/watch?v=xbE11CfZpNQ"&gt;video&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;SQL Functions - Răzvan Stătescu &lt;a href="https://dev.to/razvanstatescu/how-to-run-custom-sql-queries-using-functions-in-supabase-2nna"&gt;article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;supabase-py v0.0.3&lt;/code&gt; released - &lt;a href="https://github.com/supabase-community/supabase-py/releases/tag/v0.0.3"&gt;repo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nuxt-supabase v2.2.1&lt;/code&gt; released - &lt;a href="https://github.com/supabase-community/nuxt-supabase"&gt;repo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;vue-supabase v2.2.3&lt;/code&gt; released - &lt;a href="https://github.com/supabase-community/vue-supabase"&gt;repo&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  GitHub
&lt;/h4&gt;

&lt;p&gt;We hit 20K stars!! 21,268 to be exact: &lt;a href="http://github.com/supabase/supabase"&gt;github.com/supabase/supabase&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M6MH2LbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10214025/140694828-cbd3a08f-1b42-4e3e-83aa-524d3818918b.png" class="article-body-image-wrapper"&gt;&lt;img alt="stars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--M6MH2LbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10214025/140694828-cbd3a08f-1b42-4e3e-83aa-524d3818918b.png" width="880" height="504"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://repository.surf/supabase"&gt;repository.surf/supabase&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out some of our other community stats in our latest &lt;a href="https://dev.to/blog/2021/10/28/supabase-series-a"&gt;Series A Blog Post&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coming-next-launch-week-iii"&gt;
  &lt;/a&gt;
  Coming Next: Launch Week III
&lt;/h2&gt;

&lt;p&gt;We had Launch Week &lt;a href="https://supabase.io/blog/2021/03/25/launch-week"&gt;numero uno&lt;/a&gt; in March, and the sequel "&lt;a href="https://supabase.io/blog/2021/07/22/supabase-launch-week-sql"&gt;Launch Week II: the SQL&lt;/a&gt;" in July.&lt;/p&gt;

&lt;p&gt;Now we're going even bigger with the third instalment: &lt;code&gt;Launch Week III: The Trilogy&lt;/code&gt;. Join us on 29th November on our &lt;a href="https://discord.supabase.com"&gt;Discord&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EEV-zHpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10214025/140694813-b7f76d6b-7852-430d-8bc8-e6a8ea449205.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EEV-zHpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10214025/140694813-b7f76d6b-7852-430d-8bc8-e6a8ea449205.jpg" alt="og-launchweek-3" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>postgres</category>
      <category>firebase</category>
      <category>database</category>
    </item>
    <item>
      <title>Code Review: A Comprehensive Checklist</title>
      <author>Alex Omeyer</author>
      <pubDate>Mon, 08 Nov 2021 13:21:38 +0000</pubDate>
      <link>https://dev.to/alexomeyer/code-review-a-comprehensive-checklist-5gnm</link>
      <guid>https://dev.to/alexomeyer/code-review-a-comprehensive-checklist-5gnm</guid>
      <description>&lt;p&gt;A code review is a helpful tool for teams to improve &lt;a href="https://www.stepsize.com/blog/the-engineers-complete-guide-to-code-quality"&gt;code quality&lt;/a&gt;. Yet, there are many other benefits to reviewing code. Not to mention the reduced development cost when catching bugs early in the development lifecycle, sharing knowledge, and improving the team's estimation skills.&lt;/p&gt;

&lt;p&gt;This blog post will explain what a code review is, why you should implement code reviews, how you can prepare for one, and how to give actionable feedback. In the last section of this article, you can find a code review checklist to use when implementing a code review process in your developer workflow.&lt;/p&gt;

&lt;p&gt;First, let's understand what a code review is?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-code-review"&gt;
  &lt;/a&gt;
  What is a Code Review?
&lt;/h2&gt;

&lt;p&gt;A code review aims to improve the quality of the code that you want to add to your codebase. A code review refers to a systematic approach to reviewing other programmers' code for mistakes and many other quality metrics. Additionally, a code review checks if all requirements have been implemented correctly.&lt;/p&gt;

&lt;p&gt;In most developer teams, a developer will submit a Pull Request (PR) to add code to a codebase. One or multiple team members will be assigned to review the code, check if the code meets the quality standards, and adds the necessary documentation. &lt;/p&gt;

&lt;p&gt;However, a code review is more than just a quality check. By assigning multiple developers to a PR, you are exposing them to new code. To complete a code review, reviewers have to understand the context and scope of the PR. Therefore, code reviews are a great tool to reduce &lt;a href="https://www.stepsize.com/blog/tools-to-track-and-manage-technical-debt"&gt;technical debt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Moreover, a code review can be a valuable learning moment for developers. It's a great opportunity to get feedback about your code and coding style. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-you-do-code-reviews"&gt;
  &lt;/a&gt;
  Why should you do code reviews?
&lt;/h2&gt;

&lt;p&gt;There are many clear benefits and reasons why your team should do code reviews.&lt;/p&gt;

&lt;p&gt;Some of these benefits have already been addressed above. It provides an excellent opportunity for developers to improve their coding skills and get valuable feedback. Also, it's a great tool to share knowledge among different team members actively. You can prevent a "single point of knowledge failure." It means that multiple people have experience or knowledge about a specific part of the codebase. It can, for instance, be useful when a particular developer is on holiday (or sick), and you need someone to review code that targets this developer's area of expertise.&lt;/p&gt;

&lt;p&gt;A less obvious ROI metric of code reviews is reducing development costs by catching bugs early. A code review can help you find bugs that might slip undetected through testing or automated code review tools. &lt;/p&gt;

&lt;p&gt;And lastly, code reviews help you to improve your estimation skills. &lt;a href="https://www.atlassian.com/agile/software-development/code-reviews"&gt;Atlassian&lt;/a&gt; provides a good explanation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Estimation is a team exercise, and the team makes better estimates as product knowledge is spread across the team. As new features are added to the existing code, the original developer can provide good feedback and estimation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, how do you prepare for a code review?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preparing-for-a-code-review"&gt;
  &lt;/a&gt;
  Preparing for a code review
&lt;/h2&gt;

&lt;p&gt;Before starting a code review, make sure you have all information you need to start the review. You don't want to be blocked halfway through your review because you don't have access to the information you need to complete the process.&lt;/p&gt;

&lt;p&gt;Also, make sure you understand the context and scope of the PR. This will make it easier to review code and check its requirements. I always suggest developers try out the code and use the debugger to gain a deeper understanding of how the code works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---GNGn5gi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d68nwne7fu52km8gzrie.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---GNGn5gi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d68nwne7fu52km8gzrie.gif" alt="Image description" width="360" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-give-specific-and-actionable-feedback"&gt;
  &lt;/a&gt;
  How to give specific and actionable feedback?
&lt;/h2&gt;

&lt;p&gt;Firstly, make sure to create a friendly atmosphere. Code reviews aren't a tool to criticise your colleagues. On the other hand, you want to create a supportive environment.&lt;/p&gt;

&lt;p&gt;The best way to do this is to provide friendly suggestions, explain your reasoning, and give tips on improving the code. You don't want to tell the PR owner that this code is not good. Make sure to include reasoning and give tips or even snippets of code to improve the PR. The PR owner will appreciate this feedback, and it's a great chance to learn something new.&lt;/p&gt;

&lt;p&gt;Tip: Ask questions rather than making statements. If you do this, you force the PR owner to think about their code and find a better solution themselves. In other words, you create an actionable learning opportunity for the PR owner. However, don't forget to add sufficient feedback for the PR owner to understand your question.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-review-checklist"&gt;
  &lt;/a&gt;
  Code review checklist
&lt;/h2&gt;

&lt;p&gt;A checklist helps you to create a structured approach to code reviews. Also, they remind you of all the quality checks you need to perform to approve code into the codebase.&lt;/p&gt;

&lt;p&gt;You can include many specific items into your code review checklist. Here's an overview of must-have items you should always look out for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-verify-feature-requirements"&gt;
  &lt;/a&gt;
  1. Verify feature requirements ✔️
&lt;/h3&gt;

&lt;p&gt;Once you have absorbed the context of the PR, it's time to verify the requirements. You want to make sure that the PR covers all requirements as described by the feature ticket. If something is missing or incorrectly implemented, you should stop the code review and ask the developer to complete the PR. You don't want to waste time reviewing the rest of the code while it might still change.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-code-readability"&gt;
  &lt;/a&gt;
  2. Code readability 📚
&lt;/h3&gt;

&lt;p&gt;Once you have verified the requirements, it's time to take a look at the readability. The main question you should ask yourself: "Is the code self-explanatory?" If you find a function that is not readable, suggest breaking up the code or reorganising it to improve the readability for other developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-coding-style"&gt;
  &lt;/a&gt;
  3. Coding Style 💅
&lt;/h3&gt;

&lt;p&gt;Most development teams prefer defining a coding style guide. You can use this style guide to review the code. Again, using the same coding style will improve code readability.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-clear-naming"&gt;
  &lt;/a&gt;
  4. Clear naming 👀
&lt;/h3&gt;

&lt;p&gt;Verify if function and variables are descriptive. To improve readability, you should understand what a module or class does by just looking at the function names and variables. Many developers use this approach to understand the scope and context of a new PR quickly. Therefore, developers must use clear naming.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-code-duplication"&gt;
  &lt;/a&gt;
  5. Code duplication 👯
&lt;/h3&gt;

&lt;p&gt;Make sure to check for code duplication. Newer team members sometimes don't know which functions or libraries already exist. Therefore, they might create their own library while this functionality already exists. To keep your codebase clean, check for code duplication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-tests"&gt;
  &lt;/a&gt;
  6. Tests ✅
&lt;/h3&gt;

&lt;p&gt;You should always check that the implemented tests cover all coding paths. Make sure to flag any missing tests to the PR owner.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-documentation"&gt;
  &lt;/a&gt;
  7. Documentation ✍️
&lt;/h3&gt;

&lt;p&gt;And lastly, a developer should update the documentation when adding a new feature to the codebase. However, don't forget to check the quality of the documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-improve-codebase-communication"&gt;
  &lt;/a&gt;
  How to improve codebase communication?
&lt;/h2&gt;

&lt;p&gt;A significant amount of code review time is spent reading and understanding code. The best way to improve your codebase communication is to add code issues using &lt;a href="https://www.stepsize.com/r/vscode?utm_medium=dev.to&amp;amp;utm_source=referral&amp;amp;utm_campaign=code%20review"&gt;Stepsize VS Code&lt;/a&gt; &amp;amp; &lt;a href="https://www.stepsize.com/r/jetbrains?utm_medium=dev.to&amp;amp;utm_source=referral&amp;amp;utm_campaign=code%20review"&gt;JetBrains&lt;/a&gt; extensions. You can create, view, and prioritise your issues and make sure all members of the team have access to this valuable code context. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Code reviews are a handy tool for developer teams. &lt;/p&gt;

&lt;p&gt;Keep in mind that code reviews are for everyone in your team. Some companies mistake code reviews for a way to provide junior team members feedback from senior team members. The opposite is also true. Any developer in your team can learn, improve, and share knowledge.&lt;/p&gt;

&lt;p&gt;P.S. Check out our latest industry report on &lt;strong&gt;&lt;a href="https://www.stepsize.com/how-codebase-health-impacts-hiring-and-retention-2021-report"&gt;How Codebase Health Impacts Engineering Hiring and Retention&lt;/a&gt;&lt;/strong&gt; where we gathered insights from 200+ Engineers 🙌&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>codequality</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Develop A Productive Taxi Dispatch Software for Business?</title>
      <author>Johnmarison</author>
      <pubDate>Mon, 08 Nov 2021 13:13:18 +0000</pubDate>
      <link>https://dev.to/johnmarison2/how-to-develop-a-productive-taxi-dispatch-software-for-business-1a0n</link>
      <guid>https://dev.to/johnmarison2/how-to-develop-a-productive-taxi-dispatch-software-for-business-1a0n</guid>
      <description>&lt;p&gt;Call for taxis today upgraded with the digitized platform. In which, the customers can get their taxis instantly during all their needed times. Such a revolutionary change brings the transport service so much easier for passenger access. As a result, there have been a lot more taxi booking startups at present. To survive between the increasing competitors, up-gradation of existing dispatching system is becoming so crucial in the transport industries. And this is why a powerful taxi dispatch software is punctuated by the taxi service business people nowadays.&lt;/p&gt;

&lt;p&gt;Regarding, let’s discuss how you can build a productive taxi dispatch software for business from the development market sector.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Taxi Dispatch Software - Understanding Clients Latest Market Requirements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whatever the business is, the understanding customer is a milestone to the success of startups. Consequently, we have to focus on some client-side important demands in the development sector. Following, the below mentioned are the top taxi dispatch software building requirements among current taxi agency owners.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advanced Design&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the evolved business atmosphere, people are so smart to book many services from various industrial sectors. Concerning, contemporary taxi service business owners expect the same advanced design and business operations from your new taxi dispatch software. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick Development&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The increasing competitiveness in the transport marketplace rushes the business people to upgrade themselves speedily on time. So the more you complete the overall software development to the client business the more visible to your brand ahead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customizing Option&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Entrepreneurs today are highly required to fully customize solutions on software development. By virtue of some features, a default software design may need changes according to the business model. When there is an option for the custom interruption, it assists them to get their full demands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cost-effectiveness&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And mainly, the all-inclusive taxi dispatch software from your development side is expected to be a cost-effective one for the service launching. Right from the investment to the advanced business functionality via digital solution, everything is expected by the clients to be profitable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some Effective Development Side of Strategies to Follow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Considering the existing demands, you can apply some tactics in your development segment. So that you can smartly achieve all the requirements with your taxi dispatch software for the business. That makes your customers have a satisfying service experience with your brand. And it generates more client value in the future. Here such strategies are as follows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enhanced TechStack Selection&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To meet the clients’ current market demands, as a developer, you can smartly start your service with enhanced tech-stack selections. In which for your new taxi dispatch software building from right here, you can choose the most comprehensive tech stack listed in the following.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Android SDK&lt;/li&gt;
&lt;li&gt;Laravel&lt;/li&gt;
&lt;li&gt;Golang&lt;/li&gt;
&lt;li&gt;Php&lt;/li&gt;
&lt;li&gt;Swift&lt;/li&gt;
&lt;li&gt;GraphSQL&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Fastened Service Provision&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By the recommended tech stack usage in your dispatch software development, you can have several advantages such as immediate testing, easy software modulation execution, smart features add-on or removal, etc. Those highly assist you to provide a speedy taxi dispatch software output to the entrepreneurs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Offering Full Tailored Development&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And, you can also offer the full tailored option for them with these advanced development sources. It makes the contemporary business people in the transport industry approach you more often for projects. &lt;/p&gt;

&lt;p&gt;Along with that, by including the following latest and must-include options to your new taxi dispatch software, you could smartly provide productive outputs to your clients.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Characteristics Your New Taxi Dispatch Software Must Be Acquired&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Above all, your taxi dispatch software should possess some important features and options relevant to the enhanced taxi marketplace online. Through that, the business-centric approach would deliver your software output so powerful for launching. Here are such progressive built-in solutions to your new taxi dispatch software development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick Notification Sending&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Enable push notifications, SMS notification sending options to your taxi dispatch software. So that the dispatcher alerts concert drivers for tripping while customers are requesting the services. That also assists them to send other service-relevant information to the users online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;God-eye View Monitoring&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From your new software, the entrepreneurs should be able to track real-time details of drivers’ on-road activities. So that they can easily lead their fleet management by tracking the routeway selections of drivers on tripping, and can smartly instruct them into optimized paths.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GPS Tracking&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In-build the GPS location tracking facility to the drivers’ app. Therefore, they can charmingly follow the entire active route map indication on trippings. That helps the drivers to avoid unnecessary inquiries to reach targeted pickup and drop locations between riding.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Secured Data Sustaining&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Due to all the customer data, drivers’ details, service history, trip details, etc. should survive more securely in the cloud-based service platform, you must enable the end-to-end encrypted file formatting system with your new software for business. So, there is no more data stealing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy to Access Web Panel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your complete software panel must be user-friendly. Thus, the dispatcher can easily find out customers’ nearby driver-availability and preferred vehicle types availability. And it must be so simple for them to review records such as how many bookings are allotted, services ongoing, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Space to Increase the Driver Efficiency&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let the drivers commend their feedback to the admin. Drivers may experience some issues in their service handlings. So that while there is an easy way to convey their feedback to concerned authorities, they could have an efficient working circumstance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Schedule Tripping Registration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some passengers need to book taxis in advance. So that option for schedule-based booking registration must available with your software. It makes your client business service so customer-centric in aspect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dedicated Analytics&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Above all, the overall business analytics must be so dedicated to the admin concern. Reporting should be covered with a 360 of service flow and angle. Therefore, the admin can make effective decisions regarding business improvements with full analytic business data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wrap It All Up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The taxi service industry nowadays is growing day by day with digitized presents. Apt to that, the up-gradation to the contemporary modulations is much needed for all the taxi agencies today. Taking these into account, the traditional dispatching system to a digitized one is the search for by all the existing taxi business entrepreneurs at present.&lt;/p&gt;

&lt;p&gt;Accordingly, developing your new &lt;a href="https://www.spotnrides.com/taxi-dispatch-software"&gt;taxi dispatch software&lt;/a&gt; as discussed, make your service so visible to the customers in the market.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>mysql</category>
      <category>swift</category>
      <category>php</category>
    </item>
    <item>
      <title>Celebrating Open Source : Hacktoberfest, 2021</title>
      <author>Parul Sahoo</author>
      <pubDate>Mon, 08 Nov 2021 13:09:33 +0000</pubDate>
      <link>https://dev.to/parul5sahoo/celebrating-open-source-hacktoberfest-2021-2aom</link>
      <guid>https://dev.to/parul5sahoo/celebrating-open-source-hacktoberfest-2021-2aom</guid>
      <description>&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Contents&lt;/strong&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#head-1"&gt;Deciding To Participate In Hacktoberfest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#head-2"&gt;Selecting Repositories and Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#head-3"&gt;Creating Tutorials Is No Duck Soup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#head-4"&gt;Post PR Chore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#head-5"&gt;Rewarding Open Source Contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#deciding-to-participate-in-hacktoberfest"&gt;
  &lt;/a&gt;
  Deciding To Participate In Hacktoberfest &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I had known of Hacktoberfest since the sophomore year of my graduation. Although I did participate in Hacktoberfest 2020 back then, I was not able to contribute properly due to lack of interest and time... maybe, or let me just accept that I am a pro procrastinator😁. This year I was not quite interested in participating in the month long open source celebration. This was majorly due to the backlash this program received the previous year because of an exodus of spam PRs and the associated work overload it brought for the maintainers of participating repositories. Another reason which also influenced me to shove off the idea of participation was, the unpopularity of DevOps and related tools in the program. There weren't many opportunities for people belonging to the DevOps niche to learn more about the said sub-domain through open source contributions in Hacktoberfest. Then What changed my mind? Well a friend of mine is to be credited for my participation. She mentioned about it during a text conversation and that did spark some curiosity to atleast visit the Hacktoberfest website once. And that one visit was enough to compel me to switch from not participating to enthusiastically searching for repos and issues I could contribute to (just wanted to add in that the whole theme of Hacktoberfest 2021's website is aesthetically pleasing!!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selecting-repositories-and-issues"&gt;
  &lt;/a&gt;
  Selecting Repositories and Issues &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Having adored the vista of the website, I hopped over to the projects section, which enlisted all the projects that were participating. I found a few organizations which included projects that required skills which I had acquired earlier in my freshman and sophomore year. Consequently I scrolled through the issues list. Initially it was a bit disheartening to see all the riveting issues have been already assigned. "Wait a min.. I can draft tutorials for users to follow while using the product? Well that sounds fun and challenging". And that's how I grabbed a couple of issues opened to create user guides for specific use cases. No sooner I had been assigned with the issues than I started working on them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-tutorials-is-no-duck-soup"&gt;
  &lt;/a&gt;
  Creating Tutorials Is No Duck Soup &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The next step involved, understanding the contributing guide and delving into the official docs hosted on their website. The tutorial should essentially consist the whole step by step procedure of creating an application on Appsmith and use different data sources to fetch, query and update the database. I had to create two applications using Notion Database and Amazon Redshift as data sources. I began with reading the docs of Notion and Amazon Redshift to create databases and store data. Eventually I learned to make the data accessible from third party applications like Appsmith. At each stage of the process I took screenshots of the progress and updates that were apparent on the screen. On successful integration of API with data source I tried giving the application a fancy look using the various UI widgets that Appsmith has to offer. Then was the time to jot down them in the form of an easy to follow guide and add them in a markdown file. Ohhh.. an interesting thing that I found during this stage was, on pressing ctrl + Alt on windows(and cmd + Alt on Mac OS) opens up the GitHub web code editor which saves the time, effort and data used to clone big repositories into your local machines. But there's one gotcha, one cannot use a terminal on that code editor. Since, I just had to add texts and code snippets and not really execute or test any code the GH online editor was convenient for me. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--re0L6mGP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgm5rb34grz99ovx1hfr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--re0L6mGP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgm5rb34grz99ovx1hfr.PNG" alt="GH editor" width="880" height="436"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To know about the different markdown syntax and the code highlights customization according to the programming language was probably the most fascinating for me. I had also taken up another issue that required me to enable an auto complete feature for styled components theme definitions. This issue required the knowledge of Typescript and a thorough understanding of the codebase. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#post-pr-chore"&gt;
  &lt;/a&gt;
  Post PR Chore &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Having created a Pull Request the next thing was to wait for maintainers to review the PR and mention updates required to enhance the quality of the PR(if any). Then on updating the PR accordingly it was approved. I can recall myself being completely impatient during the time interval between the PR creation and PR merge. And the childish glee that was instilled within me with each PR merge, is inexplicable. To sum up this October, there can't be a better description than, "code, create a PR, wait for approval and repeat". &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rewarding-open-source-contributors"&gt;
  &lt;/a&gt;
  Rewarding Open Source Contributors &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Finally, at the end of this hectic month long celebration, there were packets of delight being distributed amongst all the hardworking open source contributors for their contributions towards various communities. These packets of delight came in the guise of swags. Who doesn't like swags and if the swags include cool t-shirts and stickers I believe no programmer can resist themselves from getting their hands on them. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O4fPbQin--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1jhh1ag8l1er3vx0iwi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O4fPbQin--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1jhh1ag8l1er3vx0iwi.PNG" alt="Hack reward" width="880" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Along with the Hacktoberfest swags each participating organization also had various swags segregated into tiers for different levels of contribution. These levels were mostly determined by the number of PRs accepted/merged. &lt;/p&gt;

&lt;p&gt;This October definitely proved to be one of the most productive Octobers I have ever spent in my lifetime. I hope HacKtoberfest continues to motivate beginners to get addicted to Open Source and keep treating them for their benefactions back to the community. &lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>coding</category>
    </item>
    <item>
      <title>Making a simple CSS timeline for beginners!</title>
      <author>Divyesh Views</author>
      <pubDate>Mon, 08 Nov 2021 12:58:19 +0000</pubDate>
      <link>https://dev.to/divyeshviews/making-a-simple-css-timeline-for-beginners-1ccg</link>
      <guid>https://dev.to/divyeshviews/making-a-simple-css-timeline-for-beginners-1ccg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-little-bit-of-backstory"&gt;
  &lt;/a&gt;
  A little bit of backstory
&lt;/h2&gt;

&lt;p&gt;While I was designing my own portfolio, I was thinking to create a dedicated timeline for it. Timelines always looked complicated, to be honest. While I searched for timelines across the internet, I came to know that there are multiple ways of creating CSS Timelines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-few-ways-to-create-timeline"&gt;
  &lt;/a&gt;
  A few ways to create timeline:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Using Flexboxes&lt;/li&gt;
&lt;li&gt;Using Grid&lt;/li&gt;
&lt;li&gt;Using an Unordered List (Seriously?)&lt;/li&gt;
&lt;li&gt;Positioning &lt;code&gt;divs&lt;/code&gt; using transforms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll be using grids to create a CSS timeline, which is probably the most beginner friendly ways to get started with CSS Timelines (I hope).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-basic-structure"&gt;
  &lt;/a&gt;
  Creating the basic structure
&lt;/h2&gt;

&lt;p&gt;We'll start with some basic HTML to create a barebones structure for our Timeline.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section class="full-page"&amp;gt;
&amp;lt;!--This is the main container that contains the whole timeline.--&amp;gt;

&amp;lt;div class="timeline"&amp;gt;

          &amp;lt;!--Well, The reason for this div is to fill space. 
This space is technically used for keeping dates, 
but I didn't find the need for dates. However, I'll provide 
you the styling for dates, so that you can use it if you 
wanted to.--&amp;gt;
                  &amp;lt;div class="timeline-empty"&amp;gt;
                  &amp;lt;/div&amp;gt;

&amp;lt;!--This is the class where the timeline graphics are 
housed in. Note that we have timeline-circle 
here for that pointer in timeline.--&amp;gt;

               &amp;lt;div class="timeline-middle"&amp;gt;
                   &amp;lt;div class="timeline-circle"&amp;gt;&amp;lt;/div&amp;gt;
               &amp;lt;/div&amp;gt;
               &amp;lt;div class="timeline-component timeline-content"&amp;gt;
                &amp;lt;h3&amp;gt;HTML&amp;lt;/h3&amp;gt;
                &amp;lt;p&amp;gt;Some Text&amp;lt;/p&amp;gt;
           &amp;lt;/div&amp;gt;
                &amp;lt;div class="timeline-component timeline-content"&amp;gt;
                         &amp;lt;h3&amp;gt;CSS&amp;lt;/h3&amp;gt;
                         &amp;lt;p&amp;gt;Some Text.&amp;lt;/p&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class="timeline-middle"&amp;gt;
                    &amp;lt;div class="timeline-circle"&amp;gt;&amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class="timeline-empty"&amp;gt;
                &amp;lt;/div&amp;gt;

                &amp;lt;div class="timeline-empty"&amp;gt;
                &amp;lt;/div&amp;gt;

               &amp;lt;div class="timeline-middle"&amp;gt;
                   &amp;lt;div class="timeline-circle"&amp;gt;&amp;lt;/div&amp;gt;
               &amp;lt;/div&amp;gt;
               &amp;lt;div class=" timeline-component timeline-content"&amp;gt;
                &amp;lt;h3&amp;gt;Javascript&amp;lt;/h3&amp;gt;
                &amp;lt;p&amp;gt;Some Text.&amp;lt;/p&amp;gt;
           &amp;lt;/div&amp;gt;

       &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt; 
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have explained majority part of the code in the comment blocks in the above code, in case you felt it wasn't adequate enough, let me know in the comments below.&lt;/p&gt;

&lt;p&gt;The first half of making timeline is over. On to CSS!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling-the-timeline"&gt;
  &lt;/a&gt;
  Styling the timeline.
&lt;/h2&gt;

&lt;p&gt;Right now, our timeline looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YoQM2UXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux99kqj8tvq8pnwof3j3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YoQM2UXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux99kqj8tvq8pnwof3j3.png" alt="Image description" width="645" height="441"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not a great thing to look at. So, we'll use CSS to make our timeline look cool.&lt;/p&gt;

&lt;p&gt;I've used Sass here, which you can see in the variables here, but there's no much deviation from regular CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.full-page{
/*I have used this to center the whole timeline on the screen.*/
  display: flex;
  align-items: center;
  justify-content: center;
}

/*The timeline container has a minimal width
than the main container to make text look more dressed up.*/
.timeline{
  width: 80%;
  height: auto;
  max-width: 800px;
  margin: 0 auto;
  display: flex;
  flex-direction: column;
}

/*This is the container for timeline content. Those are its
styling. The include statement is used in sass to copy 
a certain bunch of rules. This is related to 
styling and nothing to worry at your end.*/

.timeline-content{
  padding: 20px;
  @include neu-card; 
  margin-bottom: 20px;
  border-radius: 6px ;
}

/*Adding some margin for all components in
the timeline. The timeline content is used 
for text blocks exclusively.*/

.timeline-component{
  margin: 0px 20px 20px 20px;
}

/*This is where, I've added responsiveness. Before 
this I added display: flex to show it as an 
array of text blocks. But if the screen size is
 huge enough for a timeline, you can use media 
queries to add styles that are apt for larger 
screens, which is adding a timeline. 1fr 3px
1fr means that there will be 3 columns with 2 
columns equally sized with a column of width 3px
in the middle.
*/

@media screen and (min-width: 768px) {
  .timeline{
    display: grid;
    grid-template-columns: 1fr 3px 1fr;
  }

/*Adding the styles for the timeline line and pointer.*/

  .timeline-middle{
    position: relative;
    background-image: $linear-grad;
    width: 3px;
    height: 100%;
  }

/*Adding styles for that circle pointer. using
some transforms and positioning to keep it center*/
  .timeline-circle{
    position: absolute;
    top: 0;
    left: 50%;
    width: 15px;
    height: 15px;
    border-radius: 50%;
    background-image: $linear-grad;
    transform: translateX(-50%);

  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And marks the end of this code. The comments in the code block are hopefully helpful in explaining the code well to you.&lt;/p&gt;

&lt;p&gt;This is how my version of the code looks (You can find the pure CSS version in this embed, but the formatting is pretty messed:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Divyesh-K/embed/YzxLQNz?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Try resizing the result window, you'll see the magic for yourself.&lt;/p&gt;

&lt;p&gt;There might be much efficient ways to do the same thing (Using flexboxes), but since this is a tutorial oriented for beginners, I've used grids.&lt;/p&gt;

&lt;p&gt;Grids are really easy to understand comparatively. That's why I chose grids over flexboxes. &lt;/p&gt;

&lt;p&gt;However, if you need a flexbox version of this, there are ton of tutorials on the internet. Who knows, maybe I could create a flexbox version of this article soon!&lt;/p&gt;

&lt;p&gt;Stay tuned for more updates.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>JavaScript: Control Flows and Conditional Programming</title>
      <author>Dwaipayan C(Dtech-Dbug)</author>
      <pubDate>Mon, 08 Nov 2021 12:27:54 +0000</pubDate>
      <link>https://dev.to/dtechdbug/javascript-control-flows-and-conditional-programming-1a7h</link>
      <guid>https://dev.to/dtechdbug/javascript-control-flows-and-conditional-programming-1a7h</guid>
      <description>&lt;h3&gt;
  &lt;a href="#control-flow"&gt;
  &lt;/a&gt;
  Control Flow
&lt;/h3&gt;

&lt;p&gt;If a program contains more than one statement - they are executed in an order. The order of execution is in such a way that it tells a story, from top to bottom.&lt;/p&gt;

&lt;p&gt;Consider the below snippet :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dtech-Dbug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My Name is :&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//o/p : My Name is :Dtech-Dbug&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above snippet, although hard-coded, really tells a story :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First we define a variable named &lt;code&gt;myName&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Then we print that in the console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; Console.log() is a native binding in JavaScript, a function more specifically. All it does is print anything you pass in between the parenthesis onto the console.&lt;/p&gt;

&lt;p&gt;A rather simple schematic representation of the above code block would be a top-down arrow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conditional-flows"&gt;
  &lt;/a&gt;
  Conditional Flows
&lt;/h3&gt;

&lt;p&gt;Not all the time will programs be super simple and a straight and simple top down arrow.&lt;br&gt;
There can(and WILL) very well be cases where the program needs to be branched and the execution needs to follow a certain branch based on the current situation at hand.&lt;/p&gt;

&lt;p&gt;Let us consider a real world scenario where branching and execution based on branching occurs.&lt;/p&gt;

&lt;p&gt;Imagine this is 2014 and you are excited to watch the FIFA WC final between Argentina and Germany. You are a supporter of Argentina and decided that if Argentina wins then you would drink a beer to celebrate.&lt;/p&gt;

&lt;p&gt;If we transform the above paragraph into pseudo-codes it will pretty simply look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Argentina&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;Drink&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;beer&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;celebrate&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;night&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, this is not actual code. This is a pseudo-code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pseudo-Code&lt;/strong&gt; : are text based details that help in designing algorithms or code.&lt;/p&gt;

&lt;p&gt;Pseudo-Codes can be very easily be converted into actual codes, as you can guess, by the looks of the above snippet.&lt;/p&gt;

&lt;p&gt;Back to the snippet of pseudo-code. While the pseudo-code talks about the situation that might follow the win of Argentina, it does not say anything about any other possibilities or occurrence.&lt;/p&gt;

&lt;p&gt;Now, if you remember the final game that year, Argentina did not make it. 😭😭 Because Germany Scored at 113' and bagged the WC. :')&lt;/p&gt;

&lt;p&gt;You were prepared for only if Argentina wins and that did not quite happen. You clearly missed out to think the opposite case i.e, what happens when Argentina does not win! So, what now?&lt;/p&gt;

&lt;p&gt;Well it turns out in programming(and in real world) - the onus is on the programmer to design an algorithm or code that is self defensive by handling the various cases that may occur.&lt;/p&gt;

&lt;p&gt;With that being mentioned, the previous snippet can be reworked to look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Argentina&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;Drink&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;beer&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;celebrate&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;night&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Germany&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;Drink&lt;/span&gt; &lt;span class="nx"&gt;three&lt;/span&gt; &lt;span class="nx"&gt;beers&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;forget&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;pain&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the program or the pseudo-code more precisely, is quite self-defensive as it is handling another possibility.&lt;/p&gt;

&lt;p&gt;It turns out in a crucial game like the FIFA WC - a match between two teams, say A and B, can really have one of two possibilities. Either A wins or B wins, neglecting any other factors that might cause the game to stop like natural causes.&lt;/p&gt;

&lt;p&gt;With this information at our disposal we can further modify the pseudo-code by thinking like, there can only be two situations in the final:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;either Argentina wins&lt;/li&gt;
&lt;li&gt;or Argentina does not win - i.e, Germany wins&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this informal language, we can re-design the pseudo-code to look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// the situation when Argentina Wins&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Argentina&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;Drink&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;beer&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;celebrate&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;night&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// the situation when Argentina does not win i.e, Germany wins&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Drink&lt;/span&gt; &lt;span class="nx"&gt;three&lt;/span&gt; &lt;span class="nx"&gt;beers&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;forget&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;pain&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#code-it-yourself-ciy"&gt;
  &lt;/a&gt;
  Code It Yourself (CIY)
&lt;/h3&gt;

&lt;p&gt;Imagine a problem statement where you are to categorize a number within the categories: Even, Prime, Odd, Even-Prime and print the categories onto the console.&lt;/p&gt;

&lt;p&gt;If you remember your numbers,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Even numbers are numbers completely divisible by 2 - i.e, leaves 0 as remainder.&lt;/li&gt;
&lt;li&gt;Prime numbers are numbers which are only divisible by itself and 1.&lt;/li&gt;
&lt;li&gt;Odd numbers are numbers which are not even - i.e, they are not completely divisible by 2.&lt;/li&gt;
&lt;li&gt;Even Prime numbers are numbers which have feats of both Even numbers and Prime numbers. There exists only one such number and that is 2.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, how shall we go about the problem and write a code that solves the given problem statement?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A little bit of interruption here - I would highly encourage you to try to start forming the pseudo-codes yourself and refer here if you are stuck. If you are very new to programming or JavaScript please stick by, sorry for the interruption.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Forming the Pseudo-Code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// if number is 0&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;equal&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Not a natural number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// if number is 2, it is even-prime&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;equal&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Even Prime Number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// check for prime&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;equal&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;equal&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Prime Number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// check for even&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;equal&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Even Number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// check for odd&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Odd Number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty verbose as it is but this is the pseudo-code that covers all the instances.&lt;br&gt;
And it follows a specific branch of execution for different values of the number - that is mentioned repeatedly in the pseudo-code.&lt;br&gt;
The actual code can be very well transformed from this snippet itself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Points to note&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;we are preemptively checking for the case where the number can be 0. Bc, technically there is no reason not for that occurrence. And it is always a good idea to think and handle all the edge cases and make the program more self-defensive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;code&gt;%&lt;/code&gt; operator is called the modulo operator. It is an arithmetic operator that quite simply returns the remainder of integer divisions. So the expression &lt;code&gt;4 % 2&lt;/code&gt; basically returns the remainder value after dividing 4 by 2 - which is 0. Therefore, all even numbers have 0 as remainders when divided by 2.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;while using conditionals, there can be a lot of branches and you can use nested conditionals. Nested conditionals is a fancy term meaning using conditionals inside conditionals. Notice the &lt;code&gt;if-else&lt;/code&gt; blocks inside the first &lt;code&gt;else&lt;/code&gt; block. That is nested conditional so&lt;br&gt;
to speak.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There you have your first take home assignment - transform the pseudo-code into actual code and share it on Twitter or Linkedin and tag me, if you will! 🤗🥰&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Execution of statements in a program occurs in a specific flow which essentially tells a story - a story that the programmer wrote and asked the machine to decipher. 📕&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not all programs are easy and just a straight road. 🦕&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More than many programs are branched and the execution follows a certain situation at hand.These kind of execution is called &lt;strong&gt;&lt;em&gt;conditional execution&lt;/em&gt;&lt;/strong&gt;. And the statements which represent conditional execution are typically in the form of &lt;code&gt;if(p) then q&lt;/code&gt; and they called conditional statements/sentences. 🦦&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the form &lt;code&gt;if(p) then q;&lt;/code&gt; p is more mathematically referred to as the &lt;strong&gt;hypothesis&lt;/strong&gt; of the conditional and q is called the &lt;strong&gt;conclusion&lt;/strong&gt; of the conditional. From our FIFA WC example above: Drinking beer and celebrating all night was a conclusion to the hypothesis if Argentina Wins. 🍺&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The onus is on us programmers to make the program as self defensive as possible by handling not just one obvious case but other cases as well. Analogous to the form 👇&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;then&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;then&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The control only enters a block if the hypothesis is true. Consider the below snippet 🐳
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// x === 3 is hypothesis&lt;/span&gt;
  &lt;span class="c1"&gt;// hypothesis is false; since we declared x to be 2&lt;/span&gt;
  &lt;span class="c1"&gt;// this if block is skipped totally&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x is three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// control comes down to this else block&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x is not three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// output : x is not three&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you are new to programming, consider solving the above assignment and tag me on twitter/linkedin w/ the end code. 🤝&lt;/li&gt;
&lt;li&gt;If you found this article a good read consider leaving a reaction or sharing the article w/ your friends who share similar interests. Comment below if you don't get something and I would be happy to cooperate. 🧙‍♂️&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Wanna talk about tech, life or even share a song suggestion?&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://linkfolio-dee.netlify.app/"&gt;Find me here 🧙‍♂️&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#relevant-hyperlinks"&gt;
  &lt;/a&gt;
  Relevant Hyperlinks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dwaipayan.hashnode.dev/functions-algorithms-and-logic"&gt;What are Algorithms, in simple terms?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>100daysofcode</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Contributing to Documentation in Open-Source</title>
      <author>Navendu Pottekkat</author>
      <pubDate>Mon, 08 Nov 2021 12:20:58 +0000</pubDate>
      <link>https://dev.to/navendu/contributing-to-documentation-in-open-source-h96</link>
      <guid>https://dev.to/navendu/contributing-to-documentation-in-open-source-h96</guid>
      <description>&lt;p&gt;Contributing to open-source can be overwhelming.&lt;/p&gt;

&lt;p&gt;You are creating a pull request to an open-source project that would open up your code for people to give feedback and criticise.&lt;/p&gt;

&lt;p&gt;This turns off a lot of new contributors from making an impact in open-source.&lt;/p&gt;

&lt;p&gt;You might also be at a point where you are not confident enough in your programming skills that you hesitate to take that first step in contributing code.&lt;/p&gt;

&lt;p&gt;A good way to tackle this and gain confidence to contribute code is to start by contributing to documentation.&lt;/p&gt;

&lt;p&gt;Documentation is necessary for every open-source project. Contributing to and maintaining documentation is not an easy task but is highly impactful.&lt;/p&gt;

&lt;p&gt;I will drop a bomb and say contributing to documentation is more important than contributing code.&lt;/p&gt;

&lt;p&gt;In this post, I will try to share my insights on contributing to documentation from my experience as an open-source contributor and a maintainer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Being overwhelmed when you first start to contribute to open-source is natural. Start small. But start.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#finding-a-project"&gt;
  &lt;/a&gt;
  Finding a Project
&lt;/h2&gt;

&lt;p&gt;The first thing to do before you can start contributing is finding a project you can contribute to. And the best project to contribute to is the one you have been using for a while.&lt;/p&gt;

&lt;p&gt;That is, if you have been using a framework or a library, a tool or any other open-source project, contribute to it.&lt;/p&gt;

&lt;p&gt;With this, you will have a lot of context on what the project is and you will definitely be able to find areas in the documentation you can improve.&lt;/p&gt;

&lt;p&gt;If you cannot find such a project to contribute to, look for projects with an active community of contributors.&lt;/p&gt;

&lt;p&gt;Community is key in open-source and you will definitely reap the rewards for being part of a thriving community.&lt;/p&gt;

&lt;p&gt;All these factors comes secondary to the fact that you should always contribute to projects that YOU are interested in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-as-a-user"&gt;
  &lt;/a&gt;
  Start as a User
&lt;/h2&gt;

&lt;p&gt;As mentioned in the above section, you will be able to make impactful contributions if you are already a user of the project.&lt;/p&gt;

&lt;p&gt;So, if you aren't, you should start by exploring the project from the perspective of a user.&lt;/p&gt;

&lt;p&gt;As a user, you will likely go through documentation and tutorials as you start out and you are likely to find bugs, out-dated content or things you can improve.&lt;/p&gt;

&lt;p&gt;When you find areas to improve, open up issues (or any form of tickets if you are not using GitHub) for these and discuss with a project maintainer to validate it and get it assigned to you.&lt;/p&gt;

&lt;p&gt;Once you have been assigned an issue, you can start contributing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#review-the-contributing-guidelines"&gt;
  &lt;/a&gt;
  Review the Contributing Guidelines
&lt;/h2&gt;

&lt;p&gt;Most (if not all) open-source projects will have a contributing guideline in their GitHub/GitLab repository.&lt;/p&gt;

&lt;p&gt;This document will be geared towards contributors with guidelines on setting up a developer environment and how you can make contributions.&lt;/p&gt;

&lt;p&gt;Read these guidelines carefully and make sure that you follow them.&lt;/p&gt;

&lt;p&gt;For example, if a project requires you to sign every commit, your pull requests will be rejected very quickly if you do not do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-should-you-document"&gt;
  &lt;/a&gt;
  What should you Document?
&lt;/h2&gt;

&lt;p&gt;As mentioned in the previous sessions, you are likely to find issues when you start to use the project referring to the documentation.&lt;/p&gt;

&lt;p&gt;This could be as simple as an outdated screenshot to outdated or missing documentation.&lt;/p&gt;

&lt;p&gt;Open up issues for these as mentioned and discuss it with a maintainer to get it assigned to you.&lt;/p&gt;

&lt;p&gt;If you cannot find issues by yourself, you can try to fix already open issues.&lt;/p&gt;

&lt;p&gt;There are labels in GitHub issues that can help you filer out only "documentation" or "docs" issues and similar features will be there in any ticketing system being used by the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#incode-documentation"&gt;
  &lt;/a&gt;
  In-Code Documentation
&lt;/h2&gt;

&lt;p&gt;People generally don't think of this when they think about documentation.&lt;/p&gt;

&lt;p&gt;In-code documentation refers to the error messages, help texts and other text the user interacts with that doesn't necessarily affect the "logic" of the code.&lt;/p&gt;

&lt;p&gt;These are really important as users will definitely interact with this while using the project.&lt;/p&gt;

&lt;p&gt;As a new contributor you have the magic eyes to spot issues with these that seasoned contributors are too close to notice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-ways-to-go-beyond-the-docs-page"&gt;
  &lt;/a&gt;
  More Ways to go Beyond the Docs Page
&lt;/h2&gt;

&lt;p&gt;Good documentation is not just limited to the docs page.&lt;/p&gt;

&lt;p&gt;It can also involve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing a blog post that takes the user through a new feature&lt;/li&gt;
&lt;li&gt;Creating a Twitter thread about the project&lt;/li&gt;
&lt;li&gt;Documenting processes that can be used for the community (a contributing guide for example)&lt;/li&gt;
&lt;li&gt;Updating the project's website&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can always ask the project maintainers to help you find areas that need contributions.&lt;/p&gt;

&lt;p&gt;Before we finish this, I want to point out that non-code open-source contributions are not just limited to writing documentation.&lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://dev.to/navendu/how-to-make-non-code-contributions-to-open-source-projects-35nj"&gt;check out other ways you can contribute to open-source projects without contributing code&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/navendu" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NIRjcbXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--TJ006IXO--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/443466/8c603b11-e20c-45a7-b421-5a3bd49c88ef.png" alt="navendu"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/navendu/how-to-make-non-code-contributions-to-open-source-projects-35nj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Make Non-Code Contributions to Open-Source Projects&lt;/h2&gt;
      &lt;h3&gt;Navendu Pottekkat ・ Sep 19 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#hacktoberfest&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://navendu.me/posts/contributing-to-documentation/"&gt;navendu.me&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
