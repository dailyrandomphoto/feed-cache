<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Steps to Follow during Mobile App Development to Leverage Profits for Your Venture
</title>
      <author>Vrinsoft Pty Ltd</author>
      <pubDate>Thu, 28 Oct 2021 05:20:09 +0000</pubDate>
      <link>https://dev.to/vrinsoftaustralia/steps-to-follow-during-mobile-app-development-to-leverage-profits-for-your-venture-4c82</link>
      <guid>https://dev.to/vrinsoftaustralia/steps-to-follow-during-mobile-app-development-to-leverage-profits-for-your-venture-4c82</guid>
      <description>&lt;p&gt;As per recent statistical reports, the number of mobile apps will become 258.2 billion by the close of 2022. This makes it obvious thus that the same has the capability to increase the value of profits for an entrepreneurial venture.&lt;/p&gt;

&lt;p&gt;Additionally, AppsFlyer conducted a survey. This revealed that approximately eighty percent app users usually stop using them within three months itself.&lt;/p&gt;

&lt;p&gt;Have a look at this pie chart below to get a glimpse into the total number of apps with very less downloads and apps that possess over a million downloads.&lt;/p&gt;

&lt;p&gt;This chart makes it quite clear that though the industry is flourishing, many apps fail to receive the same amount of appreciation from the end-customers. This makes it necessary to keep some important points strictly in mind so that you can successfully attract more patrons towards your entrepreneurial venture.&lt;/p&gt;

&lt;p&gt;Also, look at the graph below to take a glance through the number of apps on the different platforms like Android, iOS, etc.&lt;/p&gt;

&lt;p&gt;Getting Project Outsourced to Right &lt;a href="https://www.vrinsoft.com.au/mobile-app-development/"&gt;&lt;strong&gt;Mobile App Development Company&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
There are miscellaneous types of apps that you usually find on the Google Play Store and the iOS App Store. This includes educational apps, ecommerce apps, dating apps and financial apps, to name a few. However, not all companies specialize in building applications across these domains listed above. It is therefore advisable to expatriate your project to a company holding strong expertise and knowledge in the field of &lt;a href="https://vrinsoftau.blogspot.com/2020/10/steps-to-follow-during-mobile-app-development-to-leverage-profits-for-your-venture.html"&gt;&lt;strong&gt;Mobile App Development in Melbourne&lt;/strong&gt;&lt;/a&gt;. This will aid you in locating the right team of developers committed towards taking your trade towards the next-gen level.&lt;/p&gt;

&lt;p&gt;Pay Attention to UI of App&lt;/p&gt;

&lt;p&gt;It is important to remember that the UI or User Interface is the face of your app mainly responsible for captivating the attention of users. You should hence pay proper attention on this area. This will help to gain their confidence towards your app and encourage them thereafter to use it. You should therefore focus upon the resolution, and finally add a gesture-based interface. This will be of assistance in retaining their interest towards your application.&lt;/p&gt;

&lt;p&gt;Look at this diagram below to get educated on the different components of UI/UX design.&lt;/p&gt;

&lt;p&gt;Looking through the figure above is enough to give you knowledge about the overall significance of this important element. You should thus focus on this area in a stringent way.&lt;br&gt;
Build an App that Can Work on Miscellaneous Platforms&lt;br&gt;
You need to build an app that can work across miscellaneous platforms like Android, iOS, and Windows. This is due to the volume of mobile app users growing at a rapid scale every single day. You can thus consider using the SEMrush tool. This will help you examine the app of your competitor and analyze the performance of your app. In addition, you also shall be educated on the Operating System currently used by consumers that at the end will act as a boost for you to get a list of features committed to leverage the revenues through the application built by you.&lt;br&gt;
Include Features Enough to Preserve the Essence of Your App&lt;br&gt;
App users take no time to uninstall an app that has too many features in it. You should therefore try to identify those attributes that will aid to preserve its essence. You also need to locate those characteristics that if added in the application would aid it to stand out and attract the attention of users towards it and prevent them from deleting or uninstalling it.&lt;/p&gt;

&lt;p&gt;In addition to the steps given above, you should also analyze if customers actually are in need of the app or not, alongside examining the overall cost you need to incur for development and testing the app meticulously.&lt;/p&gt;

&lt;p&gt;All these will aid the creation of a solution that guarantees to bring competitive edge for your business, attract maximum customers towards it and drive the value of revenues for you.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>react</category>
      <category>devops</category>
      <category>android</category>
    </item>
    <item>
      <title>What is Embedded Linux?</title>
      <author>Devesh Tiwari</author>
      <pubDate>Thu, 28 Oct 2021 04:38:23 +0000</pubDate>
      <link>https://dev.to/deveshtiwari/what-is-embedded-linux-5amh</link>
      <guid>https://dev.to/deveshtiwari/what-is-embedded-linux-5amh</guid>
      <description>&lt;p&gt;The demand for faster, efficient, and high-performing computers is increasing, the dimensions of the form factors that carry them forward decrease.&lt;/p&gt;

&lt;p&gt;These days, the IT industry and engineers are constantly working on challenging tasks to consolidate more powerful computers into and onto considerable smaller chassis and printed circuit boards; To fulfil the growing demand for more reliable, smaller, robust, energy-efficient, and cost-effective computer systems.&lt;/p&gt;

&lt;p&gt;It is why we see the more innovative and lesser size, weight, power, and cost consuming systems every time in the embedded computer system market.&lt;/p&gt;

&lt;p&gt;Let's dive into this very world.&lt;/p&gt;

&lt;p&gt;Linux systems help to make embedded systems more efficient and effective.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://externlabs.com/blogs/what-is-embedded-linux/"&gt;Embedded Linux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Linux is like any other operating system, including Windows, iOS, or Android; Linux can include graphical UIs, fully functional desktop apps like other operating systems. You might not know, but Linux is the second choice right after Windows for desktop pcs.&lt;/p&gt;

&lt;p&gt;Linux is way more valuable than an operating system because of its open-source availability. Source codes of Linux and other components are available online and free to use; Anyone can freely view them and make adjustments to the codes to use in their ways.&lt;/p&gt;

&lt;p&gt;Embedded Linux can be explained as a Linux operating system or kernel designed for embedded systems and devices. Embedded Linux uses the same kernel, but it can differ from other regular operating systems. Linux can be efficiently designed for any sized embedded system minimal than others, thus taking less processing power and energy with all necessary features and functionalities. &lt;/p&gt;

&lt;p&gt;You might know or not, but you are already using Linux in one way or another. Linux is being used in many types of devices as software. Let's take a general example; the Android OS from Google Inc. is based on Linux and a kind of Embedded Linux designed for mobile devices. Smart TV, iPads, car navigation systems are other examples of Embedded Linux. Some examples of small size embedded Linux systems:&lt;/p&gt;

&lt;p&gt;ETLinux: A complete Linux distribution designed to run on small industrial computers.&lt;br&gt;
LEM: A small (&amp;lt;8 MB) multi-user, networked Linux version that runs on 386s.&lt;br&gt;
LOAF: "Linux On A Floppy" distribution that runs on 386s.&lt;br&gt;
uClinux: Linux for systems without MMUs.&lt;br&gt;
uLinux: Tiny Linux distribution that runs on 386s.&lt;br&gt;
ThinLinux: Primarily for camera servers, X-10 controllers, MP3 players&lt;/p&gt;

&lt;p&gt;Advantages of Embedded Linux&lt;/p&gt;

&lt;p&gt;As you read in this article, Linux is being used in many different places, and embedded Linux is a part of every other electronic we use; Which proves that embedded Linux has something great to offer. Embedded Linux is compact than other operating systems and provides the same functionalities and requirements for embedded components. Some common Embedded Linux advantages are-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free to Use&lt;/li&gt;
&lt;li&gt;Open Source&lt;/li&gt;
&lt;li&gt;Low development cost and time&lt;/li&gt;
&lt;li&gt;Wider support for development&lt;/li&gt;
&lt;li&gt;Highly Flexible &amp;amp; Customizable &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Addition, Most Developers use Linux for their regular uses that making it familiar to work with.&lt;/p&gt;

&lt;p&gt;The Embedded system industry is foreseen to grow swiftly and driven by potential tech developments include virtual reality, augmented reality, artificial intelligence, deep learning, machine learning, and IoT. Embedded Linux will be the main component of these upcoming technologies to make them more efficient and accurate. We already are using embedded systems with Linux and the future is ready for more.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>About Git #03</title>
      <author>Chathu Rashmini</author>
      <pubDate>Thu, 28 Oct 2021 04:21:55 +0000</pubDate>
      <link>https://dev.to/chathurashmini/about-git-03-3in7</link>
      <guid>https://dev.to/chathurashmini/about-git-03-3in7</guid>
      <description>&lt;p&gt;In this tutorial we are touching some more commands and aspects about Git.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#short-status"&gt;
  &lt;/a&gt;
  Short status
&lt;/h1&gt;

&lt;p&gt;Let's modify a file in your directory.&lt;br&gt;
&lt;code&gt;echo hey &amp;gt;&amp;gt; file1.txt&lt;/code&gt;&lt;br&gt;
When you run &lt;code&gt;git status&lt;/code&gt; it gives quiet a lot of information. But you can have summary status by simply using the command,&lt;br&gt;
&lt;code&gt;git status -s&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KwOh1B9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/7_gitStatus-S.PNG%3Ftoken%3DAPOCKO5HWG744YXRUKO3F4LBPIQIO" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KwOh1B9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/7_gitStatus-S.PNG%3Ftoken%3DAPOCKO5HWG744YXRUKO3F4LBPIQIO" alt="7_gitStatus-S" width="235" height="52"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the above screen shot we have a red 'M' as we have done modifications which have yet not in the staging area.&lt;br&gt;
Let's add file1 to the staging area and get the git status.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r6gHFl7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/8_gitStatus-S.PNG%3Ftoken%3DAPOCKOYXEE3J3CQRAUHG3ODBPIQJ2" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r6gHFl7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/8_gitStatus-S.PNG%3Ftoken%3DAPOCKOYXEE3J3CQRAUHG3ODBPIQJ2" alt="8_gitStatus-S.PNG" width="334" height="50"&gt;&lt;/a&gt;&lt;br&gt;
Now you can see the green 'M'.&lt;br&gt;
Now let's change file1 again and get the status.&lt;br&gt;
&lt;code&gt;echo there &amp;gt;&amp;gt; file1.txt&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git status -s&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZyxMKJM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/9_gitStatus-S.PNG%3Ftoken%3DAPOCKO2LYEJAFRNG6N7H7XTBPIQMG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZyxMKJM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/9_gitStatus-S.PNG%3Ftoken%3DAPOCKO2LYEJAFRNG6N7H7XTBPIQMG" alt="9_gitStatus-S.PNG" width="438" height="56"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can see a green 'M' in left for the changes in the staging area which we have not yet committed, and a red 'M' in right for the changes we have not yet added to the staging area.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#staged-and-unstaged-changes"&gt;
  &lt;/a&gt;
  Staged and un-staged changes
&lt;/h1&gt;

&lt;p&gt;To check what we have in the staging area you can use the command,&lt;br&gt;
&lt;code&gt;git diff --staged&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FbWDawOj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/10_gitDifStaged.PNG%3Ftoken%3DAPOCKOYHSQ2UNPPMFRQPER3BPIQNO" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FbWDawOj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/10_gitDifStaged.PNG%3Ftoken%3DAPOCKOYHSQ2UNPPMFRQPER3BPIQNO" alt="10_gitDifStaged" width="445" height="232"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The output I got is shown in the above screen shot.&lt;br&gt;
Here we are comparing the a/fil1.txt with b/file1.txt. In other words, we are comparing two copies of file1.txt. The oldest copy is a/file1.txt. So the changes in the old copy is stated in a minus (-) sing while plus (+) sign indicates the changes of the new file. The 7th line gives us an idea on what parts of our code has changed. The part with minus sign as a prefix tells about the old copy. Hence according to my screen shot, in old copy starting from line 1, 3 lines have been extracted and shown in the terminal ( check the lines hello, world, and test in the terminal). In the new copy starting from line 1, 5 lines have been extracted. With lines hello, world, and test two more words hey and there have been added to the new copy. That is why they are green and has + as a prefix.&lt;/p&gt;

&lt;p&gt;Incase you want to see the changes in our working directory that are not staged yet, you can run the command &lt;code&gt;git diff&lt;/code&gt;.&lt;br&gt;
You can also use a diff tool like LDiff3, P4Merge, WinMerge, and VSCode to compare files. Here I am going to use VSCode as our default diff tool. So you have to set two configuration settings;&lt;br&gt;
&lt;code&gt;git config --global diff.tool vscode&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE"&lt;/code&gt;&lt;br&gt;
Now check whether everything is done correctly by running the command &lt;code&gt;git config --global -e&lt;/code&gt; to edit the global configuration settings in the default editor.&lt;br&gt;
Now run the command &lt;code&gt;git difftool&lt;/code&gt; and as shown below you have to give 'Y' to open the VSCode.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LChRcoFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/11_DiffTool.PNG%3Ftoken%3DAPOCKO66FPB7L4W244VXAKLBPIQP2" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LChRcoFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/11_DiffTool.PNG%3Ftoken%3DAPOCKO66FPB7L4W244VXAKLBPIQP2" alt="11_DiffTool" width="794" height="149"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When VSCode is open it will display two copies (old and new) of the file that we have changed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t-p5M5EP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/12_DiffTool.PNG%3Ftoken%3DAPOCKO4VKXQXZLHVS5W2VVLBPIQQE" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t-p5M5EP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/12_DiffTool.PNG%3Ftoken%3DAPOCKO4VKXQXZLHVS5W2VVLBPIQQE" alt="12_DiffTool.PNG" width="685" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it is much easier to check and compare the changes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#view-history"&gt;
  &lt;/a&gt;
  View History
&lt;/h1&gt;

&lt;p&gt;For us to view the history of our repository we can use the command &lt;code&gt;git log&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9cRRIevd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/13_gitCommit.PNG%3Ftoken%3DAPOCKO367P6OU4TPKF3XQP3BPIPX6" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9cRRIevd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/13_gitCommit.PNG%3Ftoken%3DAPOCKO367P6OU4TPKF3XQP3BPIPX6" alt="13_gitCommit" width="730" height="487"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It displays our commits from latest to the earliest. Each commit has a unit identifier. And each commit segment displays its author, the date of commit, and your commit message. If you feels like this is too informative, you can only view commit id and message with the code &lt;code&gt;git log --oneline&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gvQIRrxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/14_history01.PNG%3Ftoken%3DAPOCKO6SBFZZA3A76GZDELTBPIPZM" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gvQIRrxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/chathuRashmini/Blog-Images/main/Git/14_history01.PNG%3Ftoken%3DAPOCKO6SBFZZA3A76GZDELTBPIPZM" alt="14_history01" width="562" height="106"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also reverse the commit order and have the initial commit at top using the command, &lt;code&gt;git log --oneline --reverse&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#view-a-commit"&gt;
  &lt;/a&gt;
  View a commit
&lt;/h1&gt;

&lt;p&gt;To check what we have changed in a given commit we can use the command &lt;code&gt;show&lt;/code&gt; by specifying the commit you want. There are two ways to specify commits;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using its unique Id&lt;/li&gt;
&lt;li&gt;Using head pointer&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-using-commit-id"&gt;
  &lt;/a&gt;
  1. Using commit id
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git show 2d7eddb&lt;/code&gt;&lt;br&gt;
Here you need not to write complete id. You can specify first few characters of the id if there is no other id that starts with those same characters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-using-head-pointer"&gt;
  &lt;/a&gt;
  2. Using head pointer
&lt;/h2&gt;

&lt;p&gt;By running the command &lt;code&gt;git log --oneline&lt;/code&gt; you can check where your head pointer is at the moment. Then to trace backward you should use the symbol &lt;strong&gt;'~'&lt;/strong&gt;. For example if you want to trace one commit back from the current head pointer, then the command should be,&lt;br&gt;
&lt;code&gt;git show HEAD~2&lt;/code&gt;&lt;br&gt;
If you set 1, that means you are referring the current head pointer. Incase you want to see all the files and directories in a commit you can use the command,&lt;br&gt;
&lt;code&gt;git ls-tree HEAD~2&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#unstaging-files"&gt;
  &lt;/a&gt;
  Unstaging Files
&lt;/h1&gt;

&lt;p&gt;How can you revert a commit that you have done? You should undo the add command. Hence you need to use the command,&lt;br&gt;
&lt;code&gt;git restore --staged fileName.extention&lt;/code&gt;&lt;br&gt;
Now file you have specified in the above command is now not in staging area.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#discarding-local-changes"&gt;
  &lt;/a&gt;
  Discarding Local Changes
&lt;/h1&gt;

&lt;p&gt;To discard local changes you can use a similar command like the one above,&lt;br&gt;
&lt;code&gt;git restore fileName.ext&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you went through three tutorials about Git. So did you &lt;del&gt;Git&lt;/del&gt; get it??? 😉&lt;/p&gt;

</description>
      <category>git</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>About Git #01</title>
      <author>Chathu Rashmini</author>
      <pubDate>Thu, 28 Oct 2021 04:21:13 +0000</pubDate>
      <link>https://dev.to/chathurashmini/about-git-01-56ji</link>
      <guid>https://dev.to/chathurashmini/about-git-01-56ji</guid>
      <description>&lt;p&gt;Let's begin this tutorial with a scenario. Assume that you are a developer who is working on a project with another bunch of developers as a team. One of the developers in your team adds a new feature to the project. Now some functions which were functioning perfectly well before, gets crashed. What can you do now? This is where version controlling comes to play. They help to keep track of various versions of your code segments and also helps to recover any break downs that happens.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#version-control-systems-vcs"&gt;
  &lt;/a&gt;
  Version Control Systems (VCS)
&lt;/h1&gt;

&lt;p&gt;Version Control Systems keep track of the changes that we make to our files. We can edit multiple files and treat those files/ collection of edits as a single change. This is commonly known as a &lt;strong&gt;commit&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are two categories of version control systems;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Centralized VCS&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here all team members are connected to a central server to get the latest copy of the code and share the changes with others. The issue with this category is the availability of a central point of failure. If server goes offline team members cannot collaborate with each other.&lt;br&gt;
Ex: Subversion, Team foundation server&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distributed VCS&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this category every team member has a copy of the project in the history of his machine. Hence, the snapshots of the project is saved locally to the machine. Even though the central server is offline, synchronization can be done with others.&lt;br&gt;
Ex: Git, Material&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#git"&gt;
  &lt;/a&gt;
  Git
&lt;/h1&gt;

&lt;p&gt;Among various version control systems Git is the most famous one. That is because it is free, open-source, fast, and scalable. It also provides cheap branching and merging facilities. It helps a group of developers to do coding collaboratively without facing issues as it keeps tracks of different versions of the code.&lt;/p&gt;

&lt;p&gt;You can use Git via,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The command line&lt;/li&gt;
&lt;li&gt;Code editors and IDEs&lt;/li&gt;
&lt;li&gt;Graphical User Interfaces&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installing-git"&gt;
  &lt;/a&gt;
  Installing Git
&lt;/h2&gt;

&lt;p&gt;To check whether you already have git installed in your machine, simply open the command prompt and type the command &lt;code&gt;git --version&lt;/code&gt;. It will show the git version in your machine, and if it is higher than 2.20, you are good to proceed in this tutorial. If you get an error when you run the above command or if your version is less than 2.20 then you need to install the current version of Git. You can do so by going &lt;a href="https://git-scm.com/downloads"&gt;to this link&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-with-git"&gt;
  &lt;/a&gt;
  Starting with Git
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#setting-global-configurations"&gt;
  &lt;/a&gt;
  Setting Global Configurations
&lt;/h3&gt;

&lt;p&gt;As I have mentioned above, Git keeps track of the things like who made changes and what changes he made. For this we need to add few configurations.&lt;br&gt;
First let git knows who the global user is.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are using Windows you can use Git Bash&lt;br&gt;
&lt;code&gt;git config --global user.mail "yourmailaddress@example.com"&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git config --global user.name "your name"&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can also configure an editor or an IDE. Since I am using Visual Studio, I'm going to set it by following code,&lt;br&gt;
&lt;code&gt;git config --global core.editor "code --wait"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can check all the above configuration information by opening the VScode using following command.&lt;br&gt;
&lt;code&gt;git config --global -e&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-repositories"&gt;
  &lt;/a&gt;
  Creating Repositories
&lt;/h2&gt;

&lt;p&gt;First let's create a new folder and navigate into it using following commands. &lt;br&gt;
&lt;code&gt;mkdir newFolder&lt;/code&gt;&lt;br&gt;
&lt;code&gt;cd newFolder&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we are to make a git repository. You might be wondering what does Repository mean in Git. It is where all of your software packages and code files are stored. &lt;br&gt;
You should use the following command to create a git repository inside your current folder.&lt;br&gt;
&lt;code&gt;git init&lt;/code&gt;&lt;br&gt;
This command initializes a new &lt;em&gt;empty&lt;/em&gt; git repository in your current directory. &lt;/p&gt;

&lt;p&gt;Inside your current folder now you have a sub folder named &lt;code&gt;.git&lt;/code&gt; which is &lt;em&gt;hidden&lt;/em&gt; for the moment. If you type the command &lt;code&gt;ls&lt;/code&gt; you cannot see anything. But if you use &lt;code&gt;ls -a&lt;/code&gt; you can see the hidden &lt;code&gt;.git&lt;/code&gt; repository. So why this sub folder is hidden? Actually this folder includes information about your project history. It includes directories like branches, info, objects, references, etc. Hence this is not our business but git's to look into it. As we need not to touch this it is hidden from us.&lt;/p&gt;

&lt;p&gt;As you created a repository let's add/move any file of your choice into the folder to which you created the git repository before (I added a text file name file1.txt to my current folder 'newFolder'). Now your folder has changed. Previously it was empty, but now it has a file in it. Hence, you need to make git trace this change. To do that you should add the file using the command,&lt;br&gt;
&lt;code&gt;git add test.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now the file which was only in your local machine is added to the &lt;strong&gt;Staging area(index)&lt;/strong&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Index is a file maintained by Git that contains all of the information about what files and changes are going to go into your next commit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to get information on current working tree, you can use &lt;code&gt;git status&lt;/code&gt;.&lt;br&gt;
And to make a commit which means save the changes you have done, all you need to do is,&lt;br&gt;
&lt;code&gt;git commit -m 'Commit Message'&lt;/code&gt;&lt;br&gt;
Here add a meaningful commit message stating what you have done related to the new changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tracking-files"&gt;
  &lt;/a&gt;
  Tracking Files
&lt;/h2&gt;

&lt;p&gt;Any Git project consists of three sections;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git Directory: contains the history of all the files and changes that were made&lt;/li&gt;
&lt;li&gt;Working Tree: contains the current state of the project&lt;/li&gt;
&lt;li&gt;Staging Area: contains the changes that are marked to be included in the next commit.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each time you make a commit Git record a new snapshot of the state of your project at that moment. Combination of these snapshots make the history of your project. Files of a project can either be tracked or untracked. Tracked files are part of the snapshots. Untracked are not.&lt;br&gt;
Each track file can be in one of these three stages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Modified: file has changes (adding, modifying, or deleting) which have not yet committed.&lt;/li&gt;
&lt;li&gt;Staged: files which has changes that are ready to be committed&lt;/li&gt;
&lt;li&gt;Committed: files whose changes are safely stored in snapshots in git directory.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;To get the current configuration you can use &lt;code&gt;git config -l&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log&lt;/code&gt; command will give the commit history.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's pretty much on starting with Git. For you to know more about staging area, removing files and other things feel free to continue on to the next tutorial. 😃&lt;/p&gt;

</description>
      <category>git</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>𝑩𝒐𝒙 𝑴𝒐𝒅𝒆𝒍 𝒊𝒏 𝑪𝑺𝑺:- "𝘉𝘰𝘹𝘦𝘴 - 𝘉𝘰𝘹𝘦𝘴 𝘳𝘦𝘤𝘵𝘢𝘯𝘨𝘶𝘭𝘢𝘳 𝘉𝘰𝘹𝘦𝘴 𝘌𝘷𝘦𝘳𝘺𝘸𝘩𝘦𝘳𝘦😅"  </title>
      <author>Mahesh Patidar</author>
      <pubDate>Thu, 28 Oct 2021 04:11:59 +0000</pubDate>
      <link>https://dev.to/ali6nx404/--31fn</link>
      <guid>https://dev.to/ali6nx404/--31fn</guid>
      <description>&lt;p&gt;The first thing you need to understand is that, Everything you see on a web page is made up of rectangles boxes.&lt;/p&gt;

&lt;p&gt;on a website, you will see all the content is just a combination of boxes, Arranged on top to, on next to, bottom, or nested in each other.&lt;/p&gt;

&lt;p&gt;Header, nav, footer everything made up with boxes. Usually, we called it HTML elements instead of rectangles boxes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;𝘉𝘰𝘹𝘦𝘴 - 𝘉𝘰𝘹𝘦𝘴 𝘳𝘦𝘤𝘵𝘢𝘯𝘨𝘶𝘭𝘢𝘳 𝘉𝘰𝘹𝘦𝘴 𝘌𝘷𝘦𝘳𝘺𝘸𝘩𝘦𝘳𝘦 😅&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a look below 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UKJ6rySh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhtomaqplylujyyzz0e5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UKJ6rySh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhtomaqplylujyyzz0e5.jpg" alt="Example Image" width="880" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code added by me to see all the boxes 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
 outline: 2px solid #ffb400 !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-is-the-box-model-in-css"&gt;
  &lt;/a&gt;
  What is the Box model in CSS?
&lt;/h2&gt;

&lt;p&gt;Whenever you create an HTML element it is wrapped around in a box, and we are able to modify it using CSS. &lt;/p&gt;

&lt;p&gt;this box is built with several different layers such as margin, padding, border, and content.&lt;/p&gt;

&lt;p&gt;and with the help of CSS, we can manipulate the size, position, and properties of these boxes.&lt;/p&gt;

&lt;p&gt;It is used to develop the design and structure of a web page. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#layers-of-box-model"&gt;
  &lt;/a&gt;
  Layers of Box Model:-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Content Area&lt;/li&gt;
&lt;li&gt;Padding&lt;/li&gt;
&lt;li&gt;Border&lt;/li&gt;
&lt;li&gt;margin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's talk about each Layer of Box model.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#%E2%9C%94-content-area"&gt;
  &lt;/a&gt;
  ✔ Content Area:-
&lt;/h4&gt;

&lt;p&gt;The content area contains the real content which is put inside HTML elements such as text, image, etc.&lt;/p&gt;

&lt;p&gt;The width and height properties define the width and height of the content box. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--siwbidPC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e9d2g3xv2te3skv7xycc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--siwbidPC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e9d2g3xv2te3skv7xycc.png" alt="content area" width="880" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, you can define the width and height of content with other properties such as,&lt;/p&gt;

&lt;p&gt;max-width, min-width, max-height, and min-height set constraints and not a fixed size.&lt;/p&gt;

&lt;p&gt;if we didn't define height and width then it will calculate based on content, But we have also the option to set fixed height and width with the given properties.&lt;/p&gt;

&lt;p&gt;take a look below 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GKEo8dyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovqah78kdq705qfk0tn2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GKEo8dyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovqah78kdq705qfk0tn2.png" alt="code" width="880" height="670"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#output-"&gt;
  &lt;/a&gt;
  Output -
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dRAOMK2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8ythu509dpv6az0jl1f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dRAOMK2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8ythu509dpv6az0jl1f.png" alt="output" width="738" height="365"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#%E2%9C%94-padding"&gt;
  &lt;/a&gt;
  ✔ Padding:-
&lt;/h4&gt;

&lt;p&gt;Padding in CSS refers to the space between the border and the element content.&lt;/p&gt;

&lt;p&gt;To set padding on top, right, bottom, and left. we have properties such as &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;padding-top &lt;/li&gt;
&lt;li&gt;padding-right&lt;/li&gt;
&lt;li&gt;padding-bottom&lt;/li&gt;
&lt;li&gt;padding-left&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KAycumSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2al32x7ke7wp7vlum2z2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KAycumSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2al32x7ke7wp7vlum2z2.png" alt="Padding" width="880" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The padding shorthand defines all four sides of an element in one declaration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p {
   padding:20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#%E2%9C%94-border"&gt;
  &lt;/a&gt;
  ✔ Border:-
&lt;/h4&gt;

&lt;p&gt;The border in CSS is between the margin and padding components of the box model. &lt;/p&gt;

&lt;p&gt;Usually, we see the border around buttons like this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PzIZqmdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssao558qtfdfrkolv1gu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PzIZqmdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssao558qtfdfrkolv1gu.png" alt="border" width="602" height="226"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;the border shorthand property takes three inputs:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- border size
- border-style : solid/ dashed
- border-color
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;button {
     border: 2px solid #ffb400;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;List of border styles we can use 👇&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DLdAcPOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E-Qb0eZUcA0zpEh.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dGFsplsl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1413112845558980608/JBizoxb9_normal.jpg" alt="Mahesh 👽 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Mahesh 👽
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/ali6nx404"&gt;@ali6nx404&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      ✨ CSS Border Styles 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      05:30 AM - 02 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1433301171343544327" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1433301171343544327" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1433301171343544327" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h4&gt;
  &lt;a href="#%E2%9C%94-margin"&gt;
  &lt;/a&gt;
  ✔ margin:-
&lt;/h4&gt;

&lt;p&gt;margin is nothing but space between the box and surrounding boxes.&lt;/p&gt;

&lt;p&gt;To set the margin on the top, right, bottom, and left. we have properties such as &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;margin-top &lt;/li&gt;
&lt;li&gt;margin-right&lt;/li&gt;
&lt;li&gt;margin-bottom&lt;/li&gt;
&lt;li&gt;margin-left&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qEzuNSGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhbze5n7wuy9j3leos0q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qEzuNSGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhbze5n7wuy9j3leos0q.png" alt="margin" width="880" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The margin shorthand defines all four sides of an element in one declaration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;div {
  margin: 30px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#the-size-of-the-box-is-calculated-like-this"&gt;
  &lt;/a&gt;
  The size of the box is calculated like this:
&lt;/h4&gt;

&lt;p&gt;𝐓𝐨𝐭𝐚𝐥 𝐖𝐢𝐝𝐭𝐡 = width + padding-left + padding-right + border-left + border-right.&lt;/p&gt;

&lt;p&gt;𝐓𝐨𝐭𝐚𝐥 𝐇𝐞𝐢𝐠𝐡𝐭 = height + padding-top + padding-bottom + border-top + border-bottom.&lt;/p&gt;

&lt;p&gt;the way the default box model calculates the width and height of elements add so many problems because in total width and height padding and border also added.&lt;/p&gt;

&lt;p&gt;🤜 To solve this issue another property was introduced known as box-sizing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-boxsizing"&gt;
  &lt;/a&gt;
  What is box-sizing?
&lt;/h3&gt;

&lt;p&gt;The CSS box-sizing sets the way the total width and height of HTML elements should be calculated.&lt;/p&gt;

&lt;p&gt;Values you can specify:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;content-box&lt;/li&gt;
&lt;li&gt;border-box&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#%E2%9C%94-contentbox-"&gt;
  &lt;/a&gt;
  ✔ content-box -
&lt;/h4&gt;

&lt;p&gt;By adding content-box nothing will change because it is the default behavior of the box-sizing property. &lt;/p&gt;

&lt;p&gt;If you set Width, padding, and border like this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PJ6eUFM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aqvaa68kdhvrk3wwqd60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PJ6eUFM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aqvaa68kdhvrk3wwqd60.png" alt="content-box" width="880" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#%E2%9C%94-borderbox-"&gt;
  &lt;/a&gt;
  ✔ border-box -
&lt;/h4&gt;

&lt;p&gt;Border box is the best choice, it says the content box shrinks to add padding and border.&lt;/p&gt;

&lt;p&gt;if you add 300px width to box and 20px padding and 3px border.&lt;/p&gt;

&lt;p&gt;all of this together becomes 300 because the content box shrinks to add padding and border.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sBVdAoFa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrtmv7pz5hf33bbirlg5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sBVdAoFa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrtmv7pz5hf33bbirlg5.png" alt="border-box" width="880" height="758"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;𝐓𝐢𝐩: border-box is the best choice for designing layouts and managing the sizes of HTML elements.&lt;/p&gt;

&lt;p&gt;No need to set this property for each element individually.&lt;/p&gt;

&lt;p&gt;box-sizing Reset Method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;html {
   box-sizing: border-box;
}

*, *::before, *::after {
   box-sizing: inherit;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you're not familiar with inheritance and global reset,&lt;/p&gt;

&lt;p&gt;then take reference from this blog to understand the above code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/"&gt;https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;😍 We learned enough theory let's see it in an action.&lt;/p&gt;

&lt;p&gt;notice the difference in the size of both elements in code and after inspecting the element.&lt;/p&gt;

&lt;p&gt;codepen 👇&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ali6nx404/embed/JjyEyaJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#key-points-"&gt;
  &lt;/a&gt;
  Key Points -
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;always prefer border-box.&lt;/li&gt;
&lt;li&gt;Use the Browser tool to see the exact calculated size of an element.&lt;/li&gt;
&lt;li&gt;Use global reset for ease of work.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion-"&gt;
  &lt;/a&gt;
  Conclusion -
&lt;/h3&gt;

&lt;p&gt;ok, that's it, we covered all the most important parts of the box model.😍&lt;/p&gt;

&lt;p&gt;Thanks for stopping and checking these resources, I'm sure it's going to help you at some point in time.&lt;/p&gt;

&lt;p&gt;If you enjoyed reading then don't forget to share with other Devs too😇.&lt;/p&gt;

&lt;p&gt;Let's connect with me on &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Ali6nX404"&gt;twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/mahesh-patidar-34a982192/"&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Welcome Thread - v148</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 28 Oct 2021 03:55:58 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v148-3n80</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v148-3n80</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/ypqHf6pQ5kQEg/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ypqHf6pQ5kQEg/giphy.gif" alt='Baby polar bear saying "sup"' width="245" height="268"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Introduction to Git</title>
      <author>Pandz18</author>
      <pubDate>Thu, 28 Oct 2021 03:48:53 +0000</pubDate>
      <link>https://dev.to/pandz18/introduction-to-git-4129</link>
      <guid>https://dev.to/pandz18/introduction-to-git-4129</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-git"&gt;
  &lt;/a&gt;
  What is Git?
&lt;/h3&gt;

&lt;p&gt;Git is a free and Open Sourced &lt;a href="https://www.geeksforgeeks.org/version-control-systems/"&gt;Version Control System&lt;/a&gt;, ie, allows programmers to keep track of any changes with files involving collaborative software development. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-basic-git-commands"&gt;
  &lt;/a&gt;
  Some Basic Git Commands
&lt;/h3&gt;

&lt;p&gt;1) &lt;code&gt;git status&lt;/code&gt;&lt;br&gt;
2) &lt;code&gt;git add&lt;/code&gt;&lt;br&gt;
3) &lt;code&gt;git checkout&lt;/code&gt;&lt;br&gt;
4) &lt;code&gt;git commit&lt;/code&gt;&lt;br&gt;
5) &lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;// I will be using VS Code for these examples.//&lt;/p&gt;

&lt;p&gt;Before you can use Git in VS Code, you first need to clone a repository. Open Github and the repository that you want to clone, fork the repository. Once the forked Repository opens, copy the URL. Open VS Code and in the "Get Started" tab, under "Start" Click on "Clone Git Repository" and paste the URL of your forked Repository. After creating files for the repository click on View -&amp;gt; Terminal or shortcut: ^` for Mac.&lt;/p&gt;

&lt;p&gt;1)"&lt;code&gt;git status&lt;/code&gt;" -  The command is used to display the state of the working directory and the staging area, it also shows which files have been tracked (Added to staging area) and untracked (Not Added to staging area).&lt;/p&gt;

&lt;p&gt;2) "&lt;code&gt;git add&lt;/code&gt;" - The command is used to add files to the &lt;a href="https://stackoverflow.com/questions/49228209/whats-the-use-of-the-staging-area-in-git"&gt;staging area&lt;/a&gt; and it's syntax is "git add filename.extention". &lt;/p&gt;

&lt;p&gt;Let us take an example, where we have created a file called "text.txt". When you open the terminal in VS code type in "git add text.txt". To check if the file has been staged, use the "git status" command and the following should appear.&lt;/p&gt;




&lt;p&gt;On branch main&lt;br&gt;
Your branch is up to date with 'origin/main'.&lt;/p&gt;

&lt;p&gt;Changes to be committed:&lt;br&gt;
  (use "git restore --staged ..." to unstage)&lt;br&gt;
        new file:   text.txt&lt;/p&gt;




&lt;p&gt;In the terminal untracked files will appear in red and tracked as green.&lt;/p&gt;

&lt;p&gt;3) "&lt;code&gt;git checkout&lt;/code&gt;" - The command is used to change between branches in the repository. In this example, I have created a new branch called "demo" using the "git branch branchname" command. So to change the branch, the syntax would be "git checkout branchname", in this case, it would be "git checkout demo" and the following should appear.&lt;/p&gt;




&lt;p&gt;git checkout demo&lt;br&gt;
A       text.txt&lt;br&gt;
Switched to branch 'demo'&lt;/p&gt;




&lt;p&gt;4) "&lt;code&gt;git commit&lt;/code&gt;" - The command is used to create a snapshot of all the changes made to the repository and will not be changed unless asked to and this will be "pushed" to the main repository. The syntax of the command is "git commit", if you would like to add a message to the commit, type the command as &lt;code&gt; git commit -m "Enter message here" &lt;/code&gt;, and if you use the command as is, it will open a message editor where you enter the message for the commit and exit that screen type ":wq".&lt;br&gt;&lt;br&gt;
So this is how it should appear after using the command.&lt;/p&gt;




&lt;p&gt;example text&lt;br&gt;
 1 file changed, 1 insertion(+)&lt;br&gt;
 create mode 100644 text.txt&lt;/p&gt;




&lt;p&gt;5) "&lt;code&gt;git push&lt;/code&gt;" - The command is used to push all the changes in your repository to the main repository. When you use the command the following should appear.&lt;/p&gt;




&lt;p&gt;Enumerating objects: 5, done.&lt;br&gt;
Counting objects: 100% (5/5), done.&lt;br&gt;
Delta compression using up to 8 threads&lt;br&gt;
Compressing objects: 100% (2/2), done.&lt;br&gt;
Writing objects: 100% (3/3), 254 bytes | 254.00 KiB/s, done.&lt;br&gt;
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0&lt;br&gt;
remote: Resolving deltas: 100% (1/1), completed with 1 local object.&lt;br&gt;
To [The URL of your repository]&lt;/p&gt;




&lt;p&gt;Here are a few sources for those who are interested in learning Git. &lt;/p&gt;

&lt;p&gt;1) &lt;a href="https://www.coursera.org/learn/version-control-with-git"&gt;Atlassian - Version Control with Git (Paid)&lt;/a&gt;&lt;br&gt;
2) &lt;a href="https://www.coursera.org/learn/introduction-git-github"&gt;Google - Introduction to Git and GitHub (Paid)&lt;/a&gt;&lt;br&gt;
3) &lt;a href="https://www.atlassian.com/git"&gt;Atlassian (Website)&lt;/a&gt;&lt;br&gt;
4) &lt;a href="https://www.freecodecamp.org/news/learn-the-basics-of-git-in-under-10-minutes-da548267cc91/"&gt;freecodecamp (Website)&lt;/a&gt;&lt;br&gt;
5) &lt;a href="https://www.geeksforgeeks.org/ultimate-guide-git-github/"&gt;geeksforgeeks (Website)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this helps, I am too learning git and if you have any feedback on how I can improve or any changes to make, please feel free to reach out!&lt;/p&gt;

</description>
      <category>git</category>
      <category>opensource</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Beginners Guide to CRUD using JavaScript</title>
      <author>Max Anselmo</author>
      <pubDate>Thu, 28 Oct 2021 02:30:32 +0000</pubDate>
      <link>https://dev.to/themanselmo/beginners-guide-to-crud-using-javascript-2d03</link>
      <guid>https://dev.to/themanselmo/beginners-guide-to-crud-using-javascript-2d03</guid>
      <description>&lt;p&gt;So you want to write your own CRUD functionality in JavaScript? Well this is the right place to be!&lt;br&gt;
But first off, what the heck is CRUD?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CRUD&lt;/strong&gt; stands for:&lt;br&gt;
&lt;strong&gt;C&lt;/strong&gt;reate - &lt;strong&gt;R&lt;/strong&gt;ead - &lt;strong&gt;U&lt;/strong&gt;pdate - &lt;strong&gt;D&lt;/strong&gt;elete&lt;/p&gt;

&lt;p&gt;These are the four cardinal functions used when interacting with a database or dealing with data in general, and to use that functionality in JavaScript, we're going to use something called &lt;code&gt;fetch&lt;/code&gt; to make a http request.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fetch&lt;/code&gt; is a built in JavaScript function that is not compatible with older browsers, but works very well with the modern browsers that do support it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fetch&lt;/code&gt; takes in an &lt;em&gt;address&lt;/em&gt; where the http request should be sent to, and optionally takes in &lt;em&gt;options&lt;/em&gt; (method, headers, body, etc) and returns a promise (the container that our fetch response is in).&lt;/p&gt;

&lt;p&gt;The most basic fetch request is a &lt;strong&gt;Get&lt;/strong&gt; request. This is an example of our &lt;strong&gt;Read&lt;/strong&gt; crud functionality.&lt;/p&gt;

&lt;p&gt;Here is how we will set up our get request using fetch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const whereWeWantToFetch = "url"
fetch(whereWeWantToFetch)
.then(res =&amp;gt; res.json())
.then(data =&amp;gt; console.log(data)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;url&lt;/em&gt; is going to be where we are fetching to, where our database is.&lt;br&gt;
We &lt;em&gt;then&lt;/em&gt; convert our promise returned from our fetch to usable json, and finally &lt;em&gt;then&lt;/em&gt; take our &lt;strong&gt;data&lt;/strong&gt; and do whatever we want with it! (Although here we simply console.log it)&lt;/p&gt;

&lt;p&gt;The next example request is a &lt;strong&gt;Post&lt;/strong&gt; request. This is an example of our &lt;strong&gt;Create&lt;/strong&gt; crud functionality.&lt;br&gt;
Here is how we will set up our post request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const whatIWantToPost = "Post me!"
const whereWeWantToFetch = "url"
fetch(whereWeWantToFetch, {
    method: "POST",
    headers: {
        "Content-Type": "application/json"
    },
    body: JSON.stringify(whatIWantToPost)
})
.then(res =&amp;gt; res.json())
.then(data =&amp;gt; console.log(data)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the post requires a few extra bits compared to our get request. Here we need to include a &lt;em&gt;method&lt;/em&gt; (what we are doing, here we are POSTing), &lt;em&gt;headers&lt;/em&gt; (letting the server know what type of data to expect from the post request), and a &lt;em&gt;body&lt;/em&gt; (what we are sending in the post request)&lt;/p&gt;

&lt;p&gt;The third example request is a &lt;strong&gt;Patch&lt;/strong&gt; request. This is an example of our &lt;strong&gt;Update&lt;/strong&gt; crud functionality.&lt;br&gt;
Here is how we will set up our Patch request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const whereWeWantToFetch = "url/${id}"
fetch(whereWeWantToFetch, {
    method: "PATCH",
    headers: {
        "Content-Type": "application/json"
    },
    body: JSON.stringify({
        key: "updatedValue"
    })
})
.then(res =&amp;gt; res.json())
.then(data =&amp;gt; console.log(data)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The patch request is similar to post, however here we are updating an existing item in our database.&lt;br&gt;
Notice here we have to include an &lt;strong&gt;id&lt;/strong&gt; at the end of our url to specify which item in our database we would like to update.&lt;/p&gt;

&lt;p&gt;The final and relatively simple request is our &lt;strong&gt;Delete&lt;/strong&gt; request, completing our CRUD acronym.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const whereWeWantToFetch = "url/${id}"
fetch(whereWeWantToFetch, {
    method: "DELETE",
})
.then(res =&amp;gt; res.json())
.then(data =&amp;gt; console.log(data)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Delete requires no headers or body, only a method, as it is just removing something from our database.&lt;/p&gt;

&lt;p&gt;... and with that, you now have all the basics to implement CRUD functions into your JavaScript application!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>database</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>An NFT based game</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Thu, 28 Oct 2021 02:29:29 +0000</pubDate>
      <link>https://dev.to/nickytonline/an-nft-based-game-1jfk</link>
      <guid>https://dev.to/nickytonline/an-nft-based-game-1jfk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The project
&lt;/h2&gt;

&lt;p&gt;So this past week I built out my second dApp with the current cohort in the &lt;a href="https://buildspace.so"&gt;Buildspace&lt;/a&gt; community. This time round, the project was to create an NFT based game. The goal was to make a game where you could attack a big boss via a transaction on the blockchain that would use a game smart contract.&lt;/p&gt;

&lt;p&gt;So like the previous dApp, this required some knowledge of Solidity to build out our smart contact, &lt;a href="https://hardhat.org/"&gt;Hardhat&lt;/a&gt; to help us develop our dApp with ETH, and some frontend skills (React and JavaScript).&lt;/p&gt;

&lt;p&gt;The project provides a template for the frontend part, but once again I used my &lt;a href="https://github.com/nickytonline/web3-starter"&gt;web3 starter project&lt;/a&gt;. The benefit of building out with the web3 starter is I'm improving the starter project. 😎&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#going-off-script"&gt;
  &lt;/a&gt;
  Going off script
&lt;/h2&gt;

&lt;p&gt;Like the first dApp I built, I made it my own. Here's some fun screenshots from the game I made.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#select-your-player"&gt;
  &lt;/a&gt;
  Select your player
&lt;/h3&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oqpojCSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5apna2gthcp2uzp67vd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oqpojCSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5apna2gthcp2uzp67vd.gif" alt="Mint your player in Terrible Characters" width="880" height="581"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#mint-your-player"&gt;
  &lt;/a&gt;
  Mint your player
&lt;/h3&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ff1KJiIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uh00c3pltuxe2gexjzk3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ff1KJiIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uh00c3pltuxe2gexjzk3.gif" alt="Player being minted" width="880" height="581"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#attack-the-big-boss"&gt;
  &lt;/a&gt;
  Attack the big boss
&lt;/h3&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M0LjRu64--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1w4w5ypmaa2bazttn66.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M0LjRu64--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1w4w5ypmaa2bazttn66.gif" alt="A player with a minted NFT attacking a big boss in Terrible Characters" width="860" height="658"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#when-your-player-is-dead"&gt;
  &lt;/a&gt;
  When your player is dead
&lt;/h3&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LbwPk-Vi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5ask849iqilo3r53uw0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LbwPk-Vi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5ask849iqilo3r53uw0.png" alt="When your player is dead" width="520" height="541"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;If you're interested in how it's all built, I've open sourced it.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nickytonline"&gt;
        nickytonline
      &lt;/a&gt; / &lt;a href="https://github.com/nickytonline/terrible-characters"&gt;
        terrible-characters
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Terrible Characters&lt;/h1&gt;
&lt;p&gt;Terrible Characters is a fun NFT based game that I built as part of a
&lt;a href="https://buildspace.so" rel="nofollow"&gt;Buildspace&lt;/a&gt; cohort. Try it out and have some fun!&lt;/p&gt;
&lt;h3&gt;
Select your player&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/nickytonline/terrible-charactersmint-your-player.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BRM9sWHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/nickytonline/terrible-charactersmint-your-player.gif" alt="Mint your player in Terrible Characters"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Mint your player&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/nickytonline/terrible-charactersminting.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BcDEe41t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/nickytonline/terrible-charactersminting.gif" alt="Player being minted"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
Attack the big boss&lt;/h3&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/nickytonline/terrible-charactersterrible-characters-screenshot.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5jIWN2n---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/nickytonline/terrible-charactersterrible-characters-screenshot.gif" alt="A player with a minted NFT attacking a big boss in Terrible Characters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
When your player is dead&lt;/h3&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/nickytonline/terrible-charactersdead-player.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xHg3JsYk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/nickytonline/terrible-charactersdead-player.png" alt="When your player is dead"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Contributing&lt;/h2&gt;
&lt;p&gt;If you are interested in contributing to the project, first read our
&lt;a href="https://github.com/nickytonline/terrible-characters./CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt;. Take a look at our
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/issues"&gt;existing issues&lt;/a&gt;,
or if you come across an issue,
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/issues/new/choose"&gt;create an issue&lt;/a&gt;.
For feature requests,
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/discussions"&gt;start a discussion&lt;/a&gt;
first.&lt;/p&gt;
&lt;h2&gt;
Getting Started (Local Development)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the dependencies&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the project&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm run dev
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn dev&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; with your browser to see the
result.&lt;/p&gt;
&lt;h2&gt;
Getting Started (Gitpod)&lt;/h2&gt;
&lt;p&gt;The project can be run in Gitpod. Navigate to
&lt;a href="https://gitpod.io/#https://github.com/nickytonline/hello-edge-and-node" rel="nofollow"&gt;https://gitpod.io/#https://github.com/nickytonline/hello-edge-and-node&lt;/a&gt;. If you
wish to load it in Gitpod as an external contributor, you will need to fork the
project first, then open…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nickytonline/terrible-characters"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;If you want to just check out the game, head on over to &lt;a href="https://nftgame.iamdeveloper.com"&gt;nftgame.iamdeveloper.com&lt;/a&gt;. Note that it's only on the Rinkeby test network so no real coin will be used.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

</description>
      <category>web3</category>
      <category>dapp</category>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Hacktoberfest 2021! My second contribution</title>
      <author>MizuhoOkimoto</author>
      <pubDate>Thu, 28 Oct 2021 00:34:15 +0000</pubDate>
      <link>https://dev.to/okimotomizuho/hacktoberfest-2021-my-second-contribution-50nl</link>
      <guid>https://dev.to/okimotomizuho/hacktoberfest-2021-my-second-contribution-50nl</guid>
      <description>&lt;p&gt;On the second week of October, I made another Pull Request(PR). I will introduce the project and also my big mistake😂 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project"&gt;
  &lt;/a&gt;
  Project
&lt;/h2&gt;

&lt;p&gt;This project was a meditation app created on React.JS and bootstrapped with Create React App.&lt;br&gt;
Project Repo: &lt;a href="https://github.com/akshat157/meditate-app"&gt;https://github.com/akshat157/meditate-app&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h2&gt;

&lt;p&gt;The issue was changing the fonts, one of the owners of the repository said that the current font looks outdated.&lt;br&gt;
Issue: &lt;a href="https://github.com/akshat157/meditate-app/issues/32"&gt;https://github.com/akshat157/meditate-app/issues/32&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-i-did"&gt;
  &lt;/a&gt;
  What I did
&lt;/h2&gt;

&lt;p&gt;I opened the Google Fonts and looked at the many fonts. I wasn't very confident because I hadn't studied the design side, but I chose Barlow and Maven Pro fonts because they are easy to read and they don't look like the default fonts. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rg99vZrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsgn6he7yahs3u8a79ej.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rg99vZrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsgn6he7yahs3u8a79ej.jpg" alt="App interface" width="880" height="446"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#pull-request"&gt;
  &lt;/a&gt;
  Pull Request
&lt;/h2&gt;

&lt;p&gt;I was going to make a PR... BUT...!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#i-had-a-problem-fearfulfearfulfearful"&gt;
  &lt;/a&gt;
  I had a problem 😨😨😨
&lt;/h3&gt;

&lt;p&gt;The CONTRIBUTE.md says not to push to main branch but I did it...&lt;br&gt;
I was going to delete my forked repo and the branch and make everything restart. However, I chose to contact to &lt;br&gt;
Professorrrrrrrr😭 for a better understanding. He helped me right away and told me how to do it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-did-i-solve-it"&gt;
  &lt;/a&gt;
  How did I solve it?
&lt;/h2&gt;

&lt;p&gt;First of all, he suggested I do the below commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$git checkout -B issue-32 c9dbd88
$git checkout main
$git pull upstream main
$git checkout issue-32
$git rebase main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, my push and merge was still there like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PS C:\Users\Mizuho\meditate-app&amp;gt; git checkout -B issue-32 c9dbd88
Switched to and reset branch 'issue-32'
PS C:\Users\Mizuho\meditate-app&amp;gt; git checkout main
Switched to branch 'main'
Your branch is up to date with 'origin/main'.
PS C:\Users\Mizuho\meditate-app&amp;gt; git pull upstream main
From https://github.com/akshat157/meditate-app
 * branch            main       -&amp;gt; FETCH_HEAD
 * [new branch]      main       -&amp;gt; upstream/main
warning: refname 'd327d53e852a17353ecb297da2f819ac7bceee0f' is ambiguous.
Git normally never creates a ref that ends with 40 hex characters
because it will be ignored when you just specify 40-hex. These refs
may be created by mistake. For example,
  git switch -c $br $(git rev-parse ...)
 where "$br" is somehow empty and a 40-hex ref is created. Please
 examine these refs and maybe delete them. Turn this message off by
 running "git config advice.objectNameWarning false"
Already up to date.
PS C:\Users\Mizuho\meditate-app&amp;gt; git checkout issue-32
Switched to branch 'issue-32'
PS C:\Users\Mizuho\meditate-app&amp;gt; git rebase main
First, rewinding head to replay your work on top of it...
Fast-forwarded issue-32 to main.
PS C:\Users\Mizuho\meditate-app&amp;gt; git status
On branch issue-32
nothing to commit, working tree clean
PS C:\Users\Mizuho\meditate-app&amp;gt; git log
Merge: d327d53 c9dbd88
Author: MizuhoOkimoto &amp;lt;54873998+MizuhoOkimoto@users.noreply.github.com&amp;gt;
    Merge branch 'issue-32' into main
commit c9dbd884650c1a1abb324822d8d08e1fd7521eae
Author: MizuhoOkimoto &amp;lt;54873998+MizuhoOkimoto@users.noreply.github.com&amp;gt;
Date:   Fri Oct 15 18:14:45 2021 -0400
    Add font family Barlow and Maven Pro
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;He pointed out that I didn't make a remote(!). I just created a branch. I made a new branch and used pull command to fetch and merge to the 'dev' branch, and rebased it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PS C:\Users\Mizuho\meditate-app&amp;gt; git checkout dev
Switched to branch 'dev'
Your branch is up to date with 'origin/dev'.
PS C:\Users\Mizuho\meditate-app&amp;gt; git pull upstream dev
From https://github.com/akshat157/meditate-app
 * branch            dev        -&amp;gt; FETCH_HEAD
 * [new branch]      dev        -&amp;gt; upstream/dev
Already up to date.
PS C:\Users\Mizuho\meditate-app&amp;gt; git checkout issue-32
Switched to branch 'issue-32'
PS C:\Users\Mizuho\meditate-app&amp;gt; git rebase dev
Current branch issue-32 is up to date.
PS C:\Users\Mizuho\meditate-app&amp;gt; git push origin issue-32
Total 0 (delta 0), reused 0 (delta 0)
remote:
remote: Create a pull request for 'issue-32' on GitHub by visiting:
remote:      https://github.com/MizuhoOkimoto/meditate-app/pull/new/issue-32
remote:
To https://github.com/MizuhoOkimoto/meditate-app.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I switched to main(&lt;code&gt;$git checkout main&lt;/code&gt;) and did &lt;code&gt;$git log&lt;/code&gt;, but main was still head to my push. He told me to do that with the capital -B command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PS C:\Users\Mizuho\meditate-app&amp;gt; git checkout -B main upstream/main
Reset branch 'main'
warning: refname 'd327d53e852a17353ecb297da2f819ac7bceee0f' is ambiguous.
Git normally never creates a ref that ends with 40 hex characters
because it will be ignored when you just specify 40-hex. These refs
may be created by mistake. For example,
  git switch -c $br $(git rev-parse ...)
where "$br" is somehow empty and a 40-hex ref is created. Please
examine these refs and maybe delete them. Turn this message off by
running "git config advice.objectNameWarning false"
Branch 'main' set up to track remote branch 'main' from 'upstream'.
Your branch is behind 'origin/main' by 3 commits, and can be fast-forwarded.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#git-log-on-main-branch"&gt;
  &lt;/a&gt;
  $git log on main branch...
&lt;/h3&gt;

&lt;p&gt;My push and merge on the main branch was gone!😇&lt;br&gt;
I could finally made a PR.&lt;br&gt;
PR: &lt;a href="https://github.com/akshat157/meditate-app/pull/35"&gt;https://github.com/akshat157/meditate-app/pull/35&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I wasn't careful with this PR and I made a mistake. Even though I learned about amend and rebase that week when it happened. However, I panicked and couldn't solve it by myself. Next time, I definitely will read the contribution section more carefully!&lt;/p&gt;

&lt;p&gt;Happy Hacktoberfest!🎃&lt;/p&gt;

&lt;p&gt;(Photo by David Libeert on Unsplash)&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>programming</category>
      <category>github</category>
      <category>git</category>
    </item>
    <item>
      <title>Component Lifecycle In React Functional Components</title>
      <author>mohamed farid</author>
      <pubDate>Thu, 28 Oct 2021 00:10:44 +0000</pubDate>
      <link>https://dev.to/mohamedfarids/component-lifecycle-in-react-functional-components-4p5h</link>
      <guid>https://dev.to/mohamedfarids/component-lifecycle-in-react-functional-components-4p5h</guid>
      <description>&lt;p&gt;Using Functional Components in react become the most popular way to create react Components, sometimes I feel like I want to use a &lt;br&gt;
class component lifecycle functions but still want to get benefits from react hooks&lt;/p&gt;

&lt;p&gt;it is simple tutorial about how to use useEffect hook as lifecycle functions in react.&lt;/p&gt;

&lt;p&gt;lets start with the most simple one &lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;you can create it easily&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c componetDidMount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:green;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to add &lt;code&gt;componentWillMount()&lt;/code&gt; just add it as returned function for &lt;code&gt;componentDidMount()&lt;/code&gt; Like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c componetDidMount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:green;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentWillUnmount&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c componetWillUnmount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the next one will be a compine between &lt;code&gt;componentDidMount()&lt;/code&gt; and &lt;code&gt;componentWillMount()&lt;/code&gt;&lt;br&gt;
it will be &lt;code&gt;componentDidMountAndCompontDidUpdate()&lt;/code&gt; yeah it is not from react lifecycle component but will help to understand &lt;code&gt;useEffect&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentDidMountAndCompontDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c componentDidMountAndCompontDidUpdate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:teal;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this function with no deps array will run twice in the rendering of the component. it will run at mount and after this it will run at update, This component will run every time after any state change.&lt;/p&gt;

&lt;p&gt;The remaining Function is &lt;code&gt;componetDidUpdate()&lt;/code&gt; to build a componentDidUpdate you need to create mounted flag.&lt;br&gt;
run function only in componet update and ignore run in componet mount&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;runComponentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isComponetMounted&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; 
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c CompontDidUpdateForAnyVariable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:orange;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})()&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;lastUseEffect&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;signComponetAsMounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;signComponetAsMounted&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isComponetMounted&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The whole code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FuctionComponentLifeCycle&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c componetDidMount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:green;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentWillUnmount&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c componetWillUnmount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentDidMountAndCompontDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c componentDidMountAndCompontDidUpdate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:teal;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;


    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ComponentDidUpdateForCount&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c CompontDidUpdateForCount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:blue;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;



    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;runComponentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isComponetMounted&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; 
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c CompontDidUpdateForAnyVariable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:orange;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})()&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;lastUseEffect&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;signComponetAsMounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;signComponetAsMounted&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isComponetMounted&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="nx"&gt;Rendered&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;FuctionComponentLifeCycle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Product developers’ guide to customize data for AI - Part 3: Merge multiple dataframes</title>
      <author>Mage</author>
      <pubDate>Wed, 27 Oct 2021 23:55:42 +0000</pubDate>
      <link>https://dev.to/mage_ai/product-developers-guide-to-customize-data-for-ai-part-3-merge-multiple-dataframes-344f</link>
      <guid>https://dev.to/mage_ai/product-developers-guide-to-customize-data-for-ai-part-3-merge-multiple-dataframes-344f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;As a step towards data processing, learn how to merge multiple datasets together and analyze the story behind the data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Before we begin&lt;/li&gt;
&lt;li&gt;Merging all data&lt;/li&gt;
&lt;li&gt;Email subscriptions&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Nowadays, it’s common for products to integrate AI into many applications or features. In this guide, we’ll be looking at how AI is used in email marketing campaigns and get started with combining all our datasets together. Finally, we’ll wrap up this series with a look into data preparation so we’re ready to do machine learning model training with our dataset.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zWb_0tUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffcekywmf0t1qs0ezwry.png" alt="Image description" width="600" height="600"&gt;&lt;em&gt;Collecting data on the latest campaign (Source: &lt;a href="https://www.business2community.com/email-marketing/the-most-important-types-of-emails-you-need-for-email-marketing-success-02219324"&gt;B2C&lt;/a&gt;)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h2&gt;

&lt;p&gt;By now, you should already be familiar with combining dataframes together, filtering and sorting. If not, read the 2nd part of our introduction series and data preparation series. We’ll start by introducing these 3 datasets, email_content, user_emails, and user_profiles.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y6KYlNlG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgz95vdxht6ld7pc69b0.png" alt="Image description" width="880" height="282"&gt;&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#merging-all-data"&gt;
  &lt;/a&gt;
  Merging all data
&lt;/h2&gt;

&lt;p&gt;After taking a look at these dataset, we’ll be looking for similarities that can be used to merge the datasets together. We’ll take the dataset with the most matching ids, user_emails and connect it with both the email_content and user profiles.&lt;/p&gt;

&lt;p&gt;Glancing at the dataframe, we see that in user_emails there are 2 ids, a user_id, and the email_id. These correspond to the id in user_profile and email_content respectively.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3IDnFXne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xzrxff08r4gz1p5egwq.png" alt="Image description" width="880" height="343"&gt;&lt;/center&gt;

&lt;p&gt;I’ll start by renaming the columns from id to their matching column name.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AG0mYU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvyelni9hyev8feobve5.png" alt="Image description" width="880" height="101"&gt;&lt;em&gt;user_id and email_id&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Then we can call merge. I chose the left join here because our main dataset is on the left.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JofUVCxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4t2z83idvwwxdclinft.png" alt="Image description" width="880" height="50"&gt;&lt;/center&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N-JtMw0y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2k0on36u2l9md0h7clw.png" alt="Image description" width="880" height="314"&gt;&lt;em&gt;All the columns from all 3 datasets merged into 1&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;And that’s it. We’ve completed preparing our data for training a machine learning model.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#email-subscriptions"&gt;
  &lt;/a&gt;
  Email subscriptions
&lt;/h2&gt;

&lt;p&gt;Next, we’re going to make scrappy inferences based on the data. First, let’s get the raw data by answering questions about our email campaign user subscriptions. Then, we’ll move to creating a model to determine the likelihood of churn.&lt;/p&gt;

&lt;p&gt;You’ve got to submit your next marketing report on your leads, the boss wants to know how well you’ve done and how the company has grown, if at all, since its inception.&lt;/p&gt;

&lt;p&gt;To do this, you’ll need to grab the data on 3 customer metrics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How many customers have unsubscribed at least once?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We start off by picking out the data that matters, the user_id and the unsubscribed status. Note, we filter out the remaining columns because we care about just the users and not the number of emails.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KY_9Rc1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pavmvvag88ojl39cfwva.png" alt="Image description" width="880" height="670"&gt;&lt;em&gt;Filter where the user_id is unique and unsubscribed value is yes.&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;Which type of subscription service was the least popular?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once again, we only want the user_id, sub status, and category.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L47okhf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/msfrwz940phi108bxw8e.png" alt="Image description" width="880" height="525"&gt;&lt;em&gt;Filter for the user_id, unsubscribed, and category.&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Then we group these by each type of subscription, or “category”, and count.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MVCz0nn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nts5pzdu7wxjgzmn2rv0.png" alt="Image description" width="700" height="392"&gt;&lt;em&gt;A lot of people don’t like promotional emails!&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;Which topics are our customers not as interested in?&lt;/strong&gt;&lt;br&gt;
Once again, we only want the user_id, unsubscribed and theme.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWX9XAXz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52uapz2gdez8kplvaojx.png" alt="Image description" width="880" height="595"&gt;&lt;em&gt;Filter for the user_id, unsubscribed, and theme.&lt;/em&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B1VyVvLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2skdqmqbwg7t94q4svpp.png" alt="Image description" width="584" height="398"&gt;&lt;em&gt;Customers tend to unsubscribe to lifestyle related emails.&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Based on the metrics, we infer from the data that we’ll want to avoid promotional emails, as well as those about improving lifestyle. Users of the platform seem to be interested in emails about food and those which are purely transactional. In a future series, we’ll revisit this data to create a model that’s better than simply making inferences from picking the best of each category and theme.&lt;/p&gt;



&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--16m8G_tN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ey0qzq5250gq0beh68ry.png" alt="Image description" width="880" height="587"&gt;&lt;/center&gt;
&lt;em&gt;Our customers love to spend money on food and always check the receipts. (Source: &lt;a href="https://www.cmu.edu/dietrich/news/news-stories/2016/july/images/online-ordering_900x600.jpg"&gt;CMU&lt;/a&gt;)&lt;/em&gt;

</description>
      <category>pandas</category>
      <category>deved</category>
      <category>dataframes</category>
      <category>machinelearning</category>
    </item>
  </channel>
</rss>
