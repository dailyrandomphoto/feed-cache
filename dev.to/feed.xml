<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Talking About New Powerful Open Source UI Framework </title>
      <author>Own Alazzam</author>
      <pubDate>Mon, 15 Nov 2021 19:25:45 +0000</pubDate>
      <link>https://dev.to/own_alazzam10/talking-about-new-powerful-open-source-ui-framework-4023</link>
      <guid>https://dev.to/own_alazzam10/talking-about-new-powerful-open-source-ui-framework-4023</guid>
      <description>&lt;p&gt;lo I Will Show you And Talikng About New TypeScript Framework Powerful Than &lt;a href="http://reactjs.org/"&gt;React&lt;/a&gt;, &lt;a href="https://vuejs.org/"&gt;VueJS&lt;/a&gt;, &lt;a href="https://angular.io/"&gt;Anglur&lt;/a&gt; with new web architect thats prefer creating complex componets easliy without any diffculty&lt;/p&gt;

&lt;p&gt;before start reading i hope to give me a star on github&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/metaredox10"&gt;
        metaredox10
      &lt;/a&gt; / &lt;a href="https://github.com/metaredox10/maxa"&gt;
        maxa
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Powerful TypeScript Library For Creating Beautiful UIs and Secure, Fast Web Apps only TypeScript And Sass
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#maxa"&gt;
  &lt;/a&gt;
  Maxa
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;is A Powerful TypeScript Library For Creating Beautiful UIs, Secure, Fast And Flexible Web Apps Only Using PowerFul Languages TypeScript And Sass&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2RYt6NfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.icons8.com/color/240/000000/sass.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2RYt6NfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.icons8.com/color/240/000000/sass.png" width="240" height="240"&gt;&lt;/a&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pjKvfBJ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.icons8.com/color/240/000000/typescript.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pjKvfBJ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.icons8.com/color/240/000000/typescript.png" width="240" height="240"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Components-Based &amp;amp; State Management :&lt;/strong&gt; Build Complex UI Components Easily that's logic is written in
TypesScript Files and pass rich data through your app and make it secure no one can know your data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ultimate Apps :&lt;/strong&gt; Maxa Build Your Own App Faster And Simplify + Minify Your Code To Get High Performance.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lightweight :&lt;/strong&gt; Maxa Make Your Own App Optimized And LightWeight On Server That
Load Fast With Electron Apps Without No More Optimization Steps.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Self Management :&lt;/strong&gt; Maxa have A Built-In Element SelfReferencePlugin Management Functions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rich With Web APIs :&lt;/strong&gt; You Can Use Web APIs Easily Like WebShare,Vibration,Notification And More.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Robust Routing :&lt;/strong&gt; Robust And Fast Routing Client Side To Make Single Page Apps Fast.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Electron To Easy :&lt;/strong&gt; You Can Easily Embed Your App inside Electron App And Deploy, Manage, Build And Create Installers With Some Commands. coming soon&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#ins"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#bs"&gt;Basics&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#m-a"&gt;Main Architect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#e-h-s-t"&gt;Elements Has Special Typeing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#fr"&gt;Fragment&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#com"&gt;Comments&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#txt"&gt;Text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#en"&gt;Engine&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#rdr"&gt;render()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hd"&gt;head()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#on-rdr"&gt;onRender()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#b-lod"&gt;beforeUnload()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#is-rdr"&gt;isRender&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#comp"&gt;Components&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#c-b-f"&gt;Component Based Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#u-arr"&gt;Using Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#u-fr"&gt;Using Fragment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#u-e"&gt;Using Element&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#rt"&gt;Client-Side Router&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#rt-e"&gt;routerEngine()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rt-lk"&gt;routerLink()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vw"&gt;views&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#dm"&gt;DOM-Manipulation&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#sel"&gt;$()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#st"&gt;Statements&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#if"&gt;$if()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fe"&gt;$forEach()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tm"&gt;$time()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ru-t"&gt;$runtime()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#win"&gt;$window()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;⚠️ Maxa is Not Fully Supported Because its a beta version the supported version that starts from 1.0.0&lt;/p&gt;

&lt;h2 id="ins"&gt;Installation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create Maxa App With Powerful Build Tools using &lt;a href="https://github.com/ownalazzam10/maxa-cli"&gt;Maxa-CLI&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
$ npm i -g maxa-cli
&lt;/pre&gt;

&lt;pre&gt;
import {fragment, button, Engine} from "maxa";
import './App.scss'

function App() {
    retrun fragment([
        button({id: ""}, (btn) =&amp;gt; {
            const data = {
                count: 0,
            };
            btn.click(() =&amp;gt; {
                count++;
                return "click times : " + count;
            });
            return "click times : " + count;
        })
    ])
}

const Main = new Engine();

Main.render(App(), document.body, () =&amp;gt; {
    console.log('App Loaded!')
});
&lt;/pre&gt;

&lt;p&gt;Follow GitHub Wiki For More &lt;a href="https://github.com/metaredox10/maxa/wiki"&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="c-hw-p"&gt;Create HelloWorld Project&lt;/h2&gt;

&lt;p&gt;To get started with maxa you must have knowledge by Basic Web Tecnoologies Such As HTML, CSS and JS&lt;/p&gt;

&lt;p&gt;Check out if you install maxa-cli via NPM&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-maxacli"&gt;
  &lt;/a&gt;
  Install Maxa-CLI
&lt;/h2&gt;

&lt;pre&gt;
$ npm i -g maxa-cli
&lt;/pre&gt;

&lt;p&gt;then you can easily create a simple app with maxa &lt;/p&gt;

&lt;pre&gt;
$ maxa create 
&lt;/pre&gt;

&lt;p&gt;then maxa-cli make all you need it to start&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-new-app"&gt;
  &lt;/a&gt;
  Create New App
&lt;/h2&gt;

&lt;pre&gt;
$ maxa create app

Creating app Project........
Installing Dependencies........

Project Created Successfully.......


Useful Commands

 cd app
 ---&amp;gt; to go inside project dir
 
  maxa start
 --&amp;gt; to start a development server of maxa
 
  maxa build
 --&amp;gt; to create a build production

  npm run test
 --&amp;gt; to start jet test runner

Happy Hacking
&lt;/pre&gt;

&lt;h2&gt;
  &lt;a href="#compile-command"&gt;
  &lt;/a&gt;
  compile Command
&lt;/h2&gt;

&lt;p&gt;then to start your app you have two command if you embed it at &lt;a href="https://expressjs.com/"&gt;expressJS&lt;/a&gt; you should use this command to start without devServer&lt;/p&gt;

&lt;pre&gt;
$ npm compile
&lt;/pre&gt;

&lt;p&gt;or start with &lt;a href="https://webpack.js.org/configuration/dev-server/"&gt;webpack devServer&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
$ npm start //starting on port 3000 auto

or 

$ npm start  //starting using cutom port
&lt;/pre&gt;

&lt;h2&gt;
  &lt;a href="#build-command"&gt;
  &lt;/a&gt;
  Build Command
&lt;/h2&gt;

&lt;p&gt;to create build production of your app &lt;/p&gt;

&lt;pre&gt;
$ maxa build  //if you want to custom output dir

or
 
$ maxa build // dircet output to build dir
&lt;/pre&gt;

&lt;p&gt;then your app is able to serve easliy&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  &lt;h2 id="bs"&gt; Basics &lt;/h2&gt;
&lt;/h1&gt;

&lt;p&gt;There Are 3 Forms For Writing HTML Element&lt;/p&gt;

&lt;h2 id="m-a"&gt; Main Architect &lt;/h2&gt;

&lt;pre&gt;

/*ElementName*/(/*Attributes*/,/*Data*/);

&lt;/pre&gt;

&lt;p&gt;write Data Dircet To Element&lt;/p&gt;

&lt;pre&gt;
//string
pre(null,"Hello");

//boolean
pre(null,true);

//numbers
pre(null,10);
&lt;/pre&gt;

&lt;p&gt;write Multi Data Inside Element&lt;/p&gt;

&lt;pre&gt;
//string
p(null,[
   //HTMLElement
   pre(null,10),
   //String
  "Hello",
  //Number
  254,
  //boolean
  true,
]);
&lt;/pre&gt;

&lt;p&gt;write Data And Access Element API&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;but must return any data to append it inside element this is required &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
button({ id: "" }, (btn:HTMLButtonElement) =&amp;gt; {
  const data = {
    count: 0,
  };
  btn.addEventListener('click',() =&amp;gt; {
    count++;
    btn.innerHTML = "click times : " + count;
  });
  return "click times : " + count;
});
&lt;/pre&gt;

&lt;p&gt;To Make Element Without Data or Attributes use null keyword&lt;/p&gt;

&lt;pre&gt;

//without attriubtes
p(null,"Hello World"),

//without data
img({src:'./mypic.png'},null),

&lt;/pre&gt;

&lt;h2 id="e-h-s-t"&gt; Elements Has Special Typeing&lt;/h2&gt;

&lt;p&gt;span , br Tags&lt;/p&gt;

&lt;p&gt;this elements not require type attributes or data&lt;/p&gt;

&lt;p&gt;img image tag&lt;/p&gt;

&lt;p&gt;this element must write attributes but not require data&lt;/p&gt;

&lt;p&gt;h1, h2, h3, h4, h5 and h6&lt;/p&gt;

&lt;p&gt;this wirting size 1 | 2 | 3 | 4 | 5 | 6 then attributes and data&lt;/p&gt;

&lt;pre&gt;

h_(/*Size*/,/*Attributes*/,/*Data*/)

&lt;/pre&gt;

&lt;p&gt;also you can store the element inside variable&lt;/p&gt;

&lt;pre&gt;
const x = button(null,"Hello")
x.addEventListener('click',() =&amp;gt; {
    x.innerHTML="Hello"
});
&lt;/pre&gt;

&lt;h2 id="fr"&gt; Fragment&lt;/h2&gt;

&lt;p&gt;you can easliy create a fragment in maxa&lt;/p&gt;

&lt;pre&gt;
div(null,fragment([
   pre(null,10),
   pre(null,10),
   pre(null,10),
]))
&lt;/pre&gt;

&lt;h2 id="com"&gt; Comments &lt;/h2&gt;

&lt;p&gt;you also add html comments &lt;/p&gt;

&lt;pre&gt;
div(null,[
   pre(null,10),
   comment('Hello'),
   pre(null,10),
])
&lt;/pre&gt;

&lt;h2 id="txt"&gt; Text&lt;/h2&gt;

&lt;p&gt;you also add text nodes &lt;/p&gt;

&lt;pre&gt;
div(null,[
   pre(null,25),
   text('Hello'),
   pre(null,10),
])
&lt;/pre&gt;

&lt;h2 id="en"&gt;Engine&lt;/h2&gt;

&lt;p&gt;This Engine is A constructor you must access it to access all engine methouds&lt;/p&gt;

&lt;pre&gt;
const _App_ = new Engine();
&lt;/pre&gt;

&lt;h2 id="rdr"&gt; render() &lt;/h2&gt;

&lt;p&gt;this is one method to render your own app render() you must give it two parameters the main component and output element&lt;/p&gt;

&lt;pre&gt;
const _App_ = new Engine();

_App_.render(/*Main Component*/,/*Element Dist*/)

//Like This 

_App_.render(App(),document.body)
&lt;/pre&gt;

&lt;h2 id="hd"&gt; head() &lt;/h2&gt;

&lt;p&gt;this methoud able to add element to head tag&lt;/p&gt;

&lt;pre&gt;
const _App_ = new Engine();

_App_.head(/*data*/)

//Like This 

_App_.head([
  meta({/*Any*/},null)
])
&lt;/pre&gt;

&lt;h2 id="on-rdr"&gt; onRender() &lt;/h2&gt;

&lt;p&gt;execute event on rendering your app&lt;/p&gt;

&lt;pre&gt;
const _App_ = new Engine();

_App_.onRender(/*Action*/)

//Like This 

_App_.onRender(()=&amp;gt;{
   console.log('App Rendered')
})

&lt;/pre&gt;

&lt;h2 id="b-lod"&gt; beforeUnload()&lt;/h2&gt;

&lt;p&gt;execute event on window unload&lt;/p&gt;

&lt;pre&gt;
const _App_ = new Engine();

_App_.beforeUnload(/*Action*/)

//Like This 

_App_.beforeUnload(()=&amp;gt;{
   console.log('unLoad')
})
&lt;/pre&gt;

&lt;h2 id="is-rdr"&gt; isRender&lt;/h2&gt;

&lt;p&gt;returns if app is render&lt;/p&gt;

&lt;pre&gt;
const _App_ = new Engine();

_App_.isRender;//false

//Like This 

if(_App_.isRender===true)
   console.log('Rendered')
}else{
  console.log('not Rendered')
}
&lt;/pre&gt;

&lt;h2 id="cp"&gt; Component &lt;/h2&gt;

&lt;h2 id="c-b-f"&gt; Component Based Function &lt;/h2&gt;

&lt;p&gt;thats easily to create a components in maxa but there are two forms to write it&lt;/p&gt;

&lt;h2 id="u-arr"&gt; Using Array&lt;/h2&gt;

&lt;pre&gt;
function /*Name*/(/*Parameters*/){
   return [ 
      /*Data*/  
   ]
}

functon Hello(Name:string){
   return [
      h_(2,null,'Hello '+Name)
   ]
}

function App(){
  return [
    ...Hello('John')
  ]
}
&lt;/pre&gt;

&lt;p&gt;explain : if you create a component you must before it write ... to return all inside array but there are a better than it&lt;/p&gt;

&lt;h2 id="u-fr"&gt; Using Fragment&lt;/h2&gt;

&lt;pre&gt;
function /*Name*/(/*Parameters*/){
   return fragment([ 
      /*Data*/  
   ])
}

functon Hello(Name:string){
   return fragment([
      h_(2,null,'Hello '+Name)
   ])
}

function App(){
  return [
    Hello('John')
  ]
}
&lt;/pre&gt;

&lt;p&gt;explain : if you using fragment you should not using ... to define it only write a name of components like the example at above&lt;/p&gt;

&lt;h2 id="u-e"&gt; Using Element&lt;/h2&gt;

&lt;pre&gt;
function /*Name*/(/*Parameters*/){
   return /*Element*/(/*Attributes*/,[/*Data*/])
}

functon RedButton(Name:string){
   return button({style:"background:red;"},Name)
}

function App(){
  return [
    RedButton('Max')
  ]
}
&lt;/pre&gt; 

&lt;p&gt;explain : it is return the element then you should not using ... to define it&lt;/p&gt;

&lt;p&gt;You Can Easily Add Router To You Project &lt;/p&gt;

&lt;h2 id="rt-e"&gt; routerEngine()&lt;/h2&gt;

&lt;p&gt;this function mean starts the router &lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;pre&gt;
routerEngine(
  {
    before: () =&amp;gt; {
      console.log("Loading App");
    },
    routes: [
      { path: "/", view: Index, data: {Name:'Jeff'} },
    ],
    after: () =&amp;gt; {
      console.log("App Loaded");
    },
    error404: { path: "", view: Error404, ignoreRoutesPaths: [] },
  },
  document.body
);

&lt;/pre&gt;

&lt;p&gt;explain :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data

&lt;ul&gt;
&lt;li&gt;before()=&amp;gt;void this execute a function before start router&lt;/li&gt;
&lt;li&gt;routes[] this array must be contains all you app routes to execute it&lt;/li&gt;
&lt;li&gt;after()=&amp;gt;void this execute a function after router executed&lt;/li&gt;
&lt;li&gt;error404 this execute a error404 page in client side&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;document.body is a dist to render views inside it you can change it to any element&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="rt-l"&gt; routerLink()&lt;/h2&gt;

&lt;p&gt;this function to go to route view&lt;/p&gt;

&lt;pre&gt;
routerLink(/*route path*/,/*Data*/)

//example

routerLink('/hello','go to hello')
&lt;/pre&gt;

&lt;h2 id="vw"&gt; views &lt;/h2&gt;

&lt;p&gt;views is page to render data to router and get data from router&lt;/p&gt;

&lt;pre&gt;
class Index extends View {
  constructor(params) {
    super(params);
  }

  getRoutePath;

  title = /*title*/;

  beforeLoad?() {/*Any Thing*/}

  onLoad() {/*Any Thing*/}

  data;

  head() {
    return[
      /*Data*/
    ];
  }

  render() {
    return [
      /*Data*/
    ];
  }
}

&lt;/pre&gt;

&lt;p&gt;explain :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;params get a url params of route is loaded&lt;/li&gt;
&lt;li&gt;getRoutePath to get the route name for this view&lt;/li&gt;
&lt;li&gt;title is for setting page title on route execute&lt;/li&gt;
&lt;li&gt;beforeLoad()=&amp;gt;void to execute function before load the view&lt;/li&gt;
&lt;li&gt;onLoad to execute function after view is loaded&lt;/li&gt;
&lt;li&gt;data to get data from route data&lt;/li&gt;
&lt;li&gt;head()=&amp;gt;[] to add data to head tag on route execution&lt;/li&gt;
&lt;li&gt;render()=&amp;gt;[] to render data to app&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="dm"&gt;dom manipulation&lt;/h2&gt;

&lt;p&gt;maxa have a dom manipulation library like jquery to make development fast and easliy &lt;/p&gt;

&lt;h2 id="sel"&gt;$()&lt;/h2&gt;

&lt;p&gt;to select element and return all this functions&lt;/p&gt;

&lt;pre&gt;

$(/*Element*/)

//example

$('buton#hello').on(/*type*/,/*action*/) //to add event listener to element

$('buton#hello').toggleClass(/*class Name*/) //toggle class name

$('buton#hello').addClass(/*class Name*/) //add class name to element

$('buton#hello').removeClass(/*class Name*/) //remove class name from element

$('buton#hello').replaceClass(/*old*/,/*new*/) //replace a element class name

$('buton#hello').children([/*Childern*/]) //append childern to element

$('buton#hello').attributes({/*Childern*/}) // add attributes to elements

$('buton#hello').hidden() //execute hidden attribute on element

$('buton#hello').html(/*Data*/) //add data as html content inside element

$('buton#hello').addChild(/*Elements*/) //add single element to element

$('buton#hello').css({/*css propertys*/}) //add a css properties to element

$('buton#hello').toggleHide(/*Display type block | flex | inlineblock ..etc. */) // toggle display from hidden to Display type block | flex | inlineblock ..etc. and vis versa

$('buton#hello').click(()=&amp;gt;{/*Action*/}) //add a clicks listener to element

$('buton#hello').mouseOver(()=&amp;gt;{/*Action*/}) //add a mouseOver listener to element

$('buton#hello').doubleClick(()=&amp;gt;{/*Action*/}) //add a doubleClick listener to element

$('buton#hello').drag(()=&amp;gt;{/*Action*/}) //add a drag listener to element

$('buton#hello').keyDown(()=&amp;gt;{/*Action*/}) //add a keyDown listener to element

$('buton#hello').keyPress(()=&amp;gt;{/*Action*/}) //add a keyPress listener to element

$('buton#hello').keyUp(()=&amp;gt;{/*Action*/}) //add a keyUp listener to element

$('buton#hello').load(()=&amp;gt;{/*Action*/}) //add a load listener to element

$('buton#hello').mouseEnter(()=&amp;gt;{/*Action*/}) //add a mouseEnter listener to element

$('buton#hello').mouseOut(()=&amp;gt;{/*Action*/}) //add a mouseOut listener to element

$('buton#hello').mouseDown(()=&amp;gt;{/*Action*/}) //add a mouseDown listener to element

$('buton#hello').mouseUp(()=&amp;gt;{/*Action*/}) //add a mouseUp listener to element

$('buton#hello').change(()=&amp;gt;{/*Action*/}) //add a change listener to element

&lt;/pre&gt;

&lt;p&gt;more about dom manipulation soon&lt;/p&gt;

&lt;p&gt;maxa have a powerful statments lets to take a look🧐🧐&lt;/p&gt;

&lt;h2 id="if"&gt;$if()&lt;/h2&gt;

&lt;p&gt;this is similiar to if statment but this it use inside this element or elements array and must return a value&lt;/p&gt;

&lt;pre&gt;
let m = true;
p(null,[
  $if(/*condition*/,()=&amp;gt;{/*if true*/},()=&amp;gt;{/*if false*/})
])

//example

let m = true;
p(null,[
  $if(m===true,()=&amp;gt;{
    return"true"
  },()=&amp;gt;{
    return"flase"
  })
])

&lt;/pre&gt;

&lt;h2 id="fe"&gt;$forEach()&lt;/h2&gt;

&lt;p&gt;this might be like &lt;code&gt;Array.map()&lt;/code&gt; be it write inside element data or array&lt;/p&gt;

&lt;pre&gt;
const names=[
   "John",
   "Max",
   "Adam"
]

ul(null,[
   $forEach(names,(name)=&amp;gt;[li(null,name)])
])
 // return for each name a li and the name is inside it
&lt;/pre&gt;

&lt;h2 id="tm"&gt;$time()&lt;/h2&gt;

&lt;p&gt;return a data inide array or element after timeout&lt;/p&gt;

&lt;pre&gt;

p(null,[
  $time([h_(2,null,"Hello")],4000) //Shows After 4000ms
])
&lt;/pre&gt;

&lt;h2 id="ru-t"&gt;$runtime()&lt;/h2&gt;

&lt;p&gt;repeat the code after 0.1ms this might using for checking &lt;/p&gt;

&lt;pre&gt;
let x= 10;

p(null,(p:HTMLParagrahElement)=&amp;gt;{
    $runtime(()=&amp;gt;{
      p.innerHTML=x; // 15 after 0.1
    })
  }
])

button(null,(btn:HTMLButtonElement)=&amp;gt;{
  btn.addEventListener('click',() =&amp;gt; {
    x = 150;
  });
  return "Click Me"
})
&lt;/pre&gt;

&lt;h2 id="win"&gt;$window()&lt;/h2&gt;

&lt;p&gt;this a power full function thats create an new browser with your own component&lt;/p&gt;

&lt;pre&gt;

$window({
  name: "helloWindow",
  width: 100,
  height: 200,
  fullScreen:  "no", //"yes" | "no"
  resizable:  "no",//"yes" | "no"
  titleBar: "yes" ,//"yes" | "no"
  title: "Hello",
  url: /*url*/,
  head: [
    /*Data*/
  ],
  render: [
    /*Data or Component Based Function*/
  ],
  callBack: (data: Window) =&amp;gt; {
   console.log('opened')
  },
})

&lt;/pre&gt;

&lt;h2 id="sass"&gt;Sass
All You Need To Embed Sass StyleSheet is import it dirctly in ts file

&lt;pre&gt;
import './sassFileName.scss'
&lt;/pre&gt;

only then when you complie it export as css

&lt;h2 id="w-c"&gt;What is Comming&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#new-web-apis"&gt;
  &lt;/a&gt;
  New Web APIs
&lt;/h3&gt;

&lt;/h2&gt;
&lt;p&gt;new web apis i comming in new version 1.5.0 🚀&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-new-uicomponents-raw-duoui-endraw-"&gt;
  &lt;/a&gt;
  A New UI-Components &lt;code&gt;duo-ui&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;a new ui-component library like material-ui and anglur material and vitfiy🚀🚀&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#electron-cli-manager"&gt;
  &lt;/a&gt;
  Electron CLI Manager
&lt;/h2&gt;

&lt;p&gt;new electron cli manager for create electron apps ealiy and manage , deploy, create installers and build only with commands😍😍&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-statements"&gt;
  &lt;/a&gt;
  new statements
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#new-website-documention-on-github-pages"&gt;
  &lt;/a&gt;
  new website documention on github pages
&lt;/h3&gt;

&lt;p&gt;thanks for reading ....&lt;br&gt;
please give me a star on github🙏🙏🙏🙏&lt;/p&gt;

&lt;p&gt;please comment your feedback&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>sass</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Number Generator With JS</title>
      <author>Walter Nascimento</author>
      <pubDate>Mon, 15 Nov 2021 19:17:58 +0000</pubDate>
      <link>https://dev.to/walternascimentobarroso/number-generator-with-js-213h</link>
      <guid>https://dev.to/walternascimentobarroso/number-generator-with-js-213h</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/walternascimentobarroso-pt/gerador-de-n%C3%BAmeros-com-js-5ebdc220c180"&gt;[Clique aqui para ler em português]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we have a project that generates random numbers, odd numbers, even numbers and real numbers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;First let’s create the interface, we’ll do something simple, using just HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Gerador de números&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"form_main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Quantidade&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Tipo&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"odd"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"odd"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"odd"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Impar&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"even"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"even"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"even"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Par&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"real"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"real"&lt;/span&gt; &lt;span class="na"&gt;checked=&lt;/span&gt;&lt;span class="s"&gt;'checked'&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"real"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Reais&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"generate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Gerar&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this code we have an input that will define the amount of number we want to generate, in the type (radio) we have options (odd, even and real) and finally we have a button that calls the function to generate the numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form_main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form_main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;form_main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;odd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;even&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;real&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateReal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;odd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;odd&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;odd&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;odd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;odd&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;even&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;even&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;even&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;even&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;even&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateReal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have the javascript code that does all the magic, in the first line we have the selection of the button that calls the generate function, where the type that must be generated is checked and then its respective function is called.&lt;/p&gt;

&lt;p&gt;We have three functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;generateOdd&lt;/strong&gt; = This function loops over the total amount of numbers that must be generated and in the while statement it is checked if the number is even and finally it returns all the even numbers generated;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;generateEven&lt;/strong&gt; = This function loops over the total amount of numbers that must be generated and in the while statement it is checked if the number is odd, finally, all the generated odd numbers are returned;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;generateReal&lt;/strong&gt; = This function loops over the total amount of numbers that must be generated, finally all generated numbers are returned;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ready simple like that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;See below for the complete working project.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/WalterNascimento/embed/oNLLRqo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youtube"&gt;
  &lt;/a&gt;
  Youtube
&lt;/h2&gt;

&lt;p&gt;If you prefer to watch it, see the development on youtube.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WokYF0Y9BuI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;If you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!&lt;/p&gt;

&lt;p&gt;😊😊 See you later! 😊😊&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tips</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Introducing OpenShift Container
Platform 4</title>
      <author>Ahmed Shendy</author>
      <pubDate>Mon, 15 Nov 2021 18:55:29 +0000</pubDate>
      <link>https://dev.to/ahmedshendy/introducing-openshift-containerplatform-4-16mc</link>
      <guid>https://dev.to/ahmedshendy/introducing-openshift-containerplatform-4-16mc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#openshift-container-platform-4-architecture"&gt;
  &lt;/a&gt;
  OpenShift Container Platform 4 Architecture
&lt;/h2&gt;

&lt;p&gt;Red Hat OpenShift Container Platform 4 (RHOCP 4) is a set of modular components and services built on top of Red Hat CoreOS and Kubernetes.&lt;br&gt;
One of the main advantages of using OpenShift is that it uses several nodes to ensure the resiliency and scalability of its managed applications. OpenShift forms a cluster of node servers that run containers and are centrally managed by a set of master servers.&lt;/p&gt;

&lt;p&gt;The following diagram illustrates the high-level logical overview of the OpenShift Container Platform 4 architecture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6YXZWOau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzn5di2bfoe6px2pi103.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6YXZWOau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzn5di2bfoe6px2pi103.png" alt="OCP 4 Architecture" width="880" height="692"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following diagram illustrates the OpenShift Container Platform stack.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cWkTcHR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uav645q1roc4wplf8qkk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWkTcHR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uav645q1roc4wplf8qkk.png" alt="OCP Stack" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From bottom to top, and from left to right, this shows the basic container infrastructure, integrated and enhanced by Red Hat:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Red Hat CoreOS&lt;/strong&gt; is the base OS on top which OpenShift runs. Red Hat CoreOS is a Linux distribution focused on providing an immutable operating system for container execution.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CRI-O&lt;/strong&gt; is an implementation of the Kubernetes Container Runtime Interface (CRI) to enable using Open Container Initiative (OCI) compatible runtimes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Kubernetes&lt;/strong&gt; manages a cluster of hosts, physical or virtual, running containers. It uses resources that describe multicontainer applications composed of multiple resources, and how they interconnect&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;etcd&lt;/strong&gt; is a distributed key-value store, used by Kubernetes to store configuration and state information about the containers and other resources inside the Kubernetes cluster&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Custom Resource Definitions (CRDs)&lt;/strong&gt; are resource types stored in etcd and managed by Kubernetes. These resource types form the state and configuration of all resources managed by OpenShift. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Containerized services&lt;/strong&gt; fulfill many PaaS infrastructure functions, such as networking and authorization. RHOCP uses the basic container infrastructure from Kubernetes and the underlying container runtime for most internal functions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Runtimes and xPaaS&lt;/strong&gt; are base container images ready for use by developers, each preconfigured with a particular runtime language or database.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DevOps Tools and User Experience&lt;/strong&gt;: RHOCP provides web UI and CLI management tools for managing user applications and RHOCP services.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following table lists some of the most commonly used terminology when you work with OpenShift.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Term&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Node&lt;/td&gt;
&lt;td&gt;A server that hosts applications in an OpenShift cluster&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Master Node&lt;/td&gt;
&lt;td&gt;A node server that manages the control plane in an OpenShift cluster. Master nodes provide basic cluster services such as APIs or controllers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Worker Node&lt;/td&gt;
&lt;td&gt;Worker nodes execute workloads for the cluster. Application pods are scheduled onto worker nodes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resource&lt;/td&gt;
&lt;td&gt;Resources are any kind of component definition managed by OpenShift.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Controller&lt;/td&gt;
&lt;td&gt;A controller is an OpenShift component that watches resources and makes changes attempting to move the current state towards the desired state.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Label&lt;/td&gt;
&lt;td&gt;A key-value pair that can be assigned to any OpenShift resource.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Namespace or Project&lt;/td&gt;
&lt;td&gt;A scope for OpenShift resources and processes, so that resources with the same name can be used in different contexts.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Console&lt;/td&gt;
&lt;td&gt;A web UI provided by OpenShift that allows developers and administrators to manage cluster resources.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#new-features-in-rhocp-4"&gt;
  &lt;/a&gt;
  New Features in RHOCP 4
&lt;/h2&gt;

&lt;p&gt;RHOCP 4 includes new features, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CoreOS as the default operating system for all nodes, offering an immutable infrastructure optimized for containers&lt;/li&gt;
&lt;li&gt;A new cluster installer, which simplifies the process of installing and updating the masters and worker nodes in the cluster&lt;/li&gt;
&lt;li&gt;A self-managing platform, able to automatically apply cluster updates and recoveries without disruption.&lt;/li&gt;
&lt;li&gt;A redesigned web console based on the concept of "personas", targeting both platform administrators and developers&lt;/li&gt;
&lt;li&gt;An Operator SDK to build, test, and package Operators.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#describing-openshift-resource-types"&gt;
  &lt;/a&gt;
  Describing OpenShift Resource Types
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Pods (pod)&lt;/strong&gt; are the basic unit of work for OpenShift.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Services (svc)&lt;/strong&gt; Specific IP/port combinations that provides access to a pool of pods. By default, services connect clients to pods in a round-robin fashion.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Replication Controllers (rc)&lt;/strong&gt; OpenShift resources that define how pods are replicated (horizontally scaled) to different nodes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Persistent Volumes (pv)&lt;/strong&gt; Storage areas to be used by pods.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Persistent Volume Claims (pvc)&lt;/strong&gt; Requests for storage by a pod. A pvc links a pv to a pod so its containers can make use of it, usually by mounting the storage into the container's file system.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Config Maps (cm)&lt;/strong&gt; A set of keys and values that can be used by other resources. ConfigMaps and Secrets are usually used to centralize configuration values used by several resources. Secrets differ from ConfigMaps maps in that Secrets are used to store sensitive data (usually encrypted), and their access is restricted to fewer authorized users.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deployment Configs (dc)&lt;/strong&gt; A set of containers included in a pod, and the deployment strategies to be used. A dc also provides a basic but extensible continuous delivery workflow.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build Configs (bc)&lt;/strong&gt; A process to be executed in the OpenShift project. The OpenShift Source-to-Image (S2I) feature uses BuildConfigs to build a container image from application source code stored in a Git repository. A bc works together with a dc to provide a basic but extensible continuous integration and continuous delivery workflows.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Routes&lt;/strong&gt; DNS host names recognized by the OpenShift router as an ingress point for various applications and microservices deployed on the cluster.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Image Streams (is)&lt;/strong&gt; An image stream and its tags provide an abstraction for referencing container images from within OpenShift Container Platform. The image stream and its tags allow you to track what images are available and ensure that you are using the specific image you need even if the image in the repository changes. Image streams do not contain actual image data, but present a virtual view of related images, similar to an image repository.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>containers</category>
      <category>devops</category>
      <category>openshift</category>
    </item>
    <item>
      <title>What is Arccticy™?</title>
      <author>masspopcorn</author>
      <pubDate>Mon, 15 Nov 2021 18:44:18 +0000</pubDate>
      <link>https://dev.to/arccticy/what-is-arccticy-8hc</link>
      <guid>https://dev.to/arccticy/what-is-arccticy-8hc</guid>
      <description>&lt;h1&gt;
  &lt;a href="#arccticy%E2%84%A2-chat"&gt;
  &lt;/a&gt;
  Arccticy™ Chat
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h3&gt;

&lt;p&gt;Arccticy™ Chat is an open-source, simple, (for now), chat platform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#current-team"&gt;
  &lt;/a&gt;
  Current team:
&lt;/h3&gt;

&lt;p&gt;&lt;del&gt;Product Manager&lt;/del&gt;: (1 person)&lt;a href="https://replit.com/@dudeactualdev/"&gt;@dudeactualdev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Head Developer&lt;/del&gt;: (2 ppl)(Taken - &lt;a href="https://replit.com/@Lankdev/"&gt;@Lankdev&lt;/a&gt; &lt;a href="https://replit.com/@StringentDev/"&gt;@StringentDev&lt;/a&gt;)(Advantages: Team Admin)&lt;/p&gt;

&lt;p&gt;Designer: (2 people)(Open - &lt;a href="https://replit.com/@ch1ck3n/"&gt;@ch1ck3n&lt;/a&gt;)) &lt;/p&gt;

&lt;p&gt;Back-end development: (3 people)(Available - &lt;a href="https://replit.com/@natethemaker"&gt;@natethemaker&lt;/a&gt;, &lt;a href="https://replit.com/@zplusfour"&gt;@zplusfour&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Marketing Assistant&lt;/del&gt;: (1 person)(Taken - &lt;a href="https://replit.com/@natethemaker"&gt;@natethemaker&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Developer: (2 people)(Available)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-planned"&gt;
  &lt;/a&gt;
  What's planned:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Design&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User Interface&lt;/li&gt;
&lt;li&gt;Landing Page&lt;/li&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;Templates&lt;/li&gt;
&lt;li&gt;Desktop app with Electron.JS (All devs)&lt;/li&gt;
&lt;li&gt;Mobile app with Flutter? (Optional)&lt;/li&gt;
&lt;li&gt;Skeleton shimmers (better than using a circular indicator as it tells the user what type of content to expect)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Implement&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPA routing (No reloading for moving channels/servers and to all pages)&lt;/li&gt;
&lt;li&gt;Video Chat (P2P?)&lt;/li&gt;
&lt;li&gt;Custom Database module (Stringent)&lt;/li&gt;
&lt;li&gt;API server (Stringent)&lt;/li&gt;
&lt;li&gt;Clusters module (standard nodejs module)&lt;/li&gt;
&lt;li&gt;Subscription service using API (NOT POSSIBLE ON REPL)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>chat</category>
      <category>css</category>
      <category>discuss</category>
      <category>node</category>
    </item>
    <item>
      <title>Are Design Patterns Important To Know ?</title>
      <author>Aimen Zairi</author>
      <pubDate>Mon, 15 Nov 2021 18:40:53 +0000</pubDate>
      <link>https://dev.to/zairiaimendev/are-design-patterns-important-to-know--4a0</link>
      <guid>https://dev.to/zairiaimendev/are-design-patterns-important-to-know--4a0</guid>
      <description>&lt;p&gt;For Beginners, Making Projects is Simply about writing code that works, in one of the previous posts we talked about why that won't do in the long term, and now we talk about another solution.&lt;br&gt;
That Solution is using Design Patterns to help make the code clear, flexible and extensible.&lt;br&gt;
In Big projects and when you become a real software developer with a job you will see that Design Patterns are used for every single big project.&lt;/p&gt;

&lt;p&gt;PS : this was supposed to come with a video with cool animations and all, but i lost the project file, hopefully the next topic comes with a video.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-not-to-use-design-patterns-"&gt;
  &lt;/a&gt;
  When Not To Use Design Patterns ?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Design Patterns + Small Project is the worst combination as it makes the code more complex and bigger than it should be.&lt;/li&gt;
&lt;li&gt;Using Design patterns doesn't Indicate Quality Code, as sometimes the implementation of these said patterns is wrong which leads to bad experience for developers checking your code.&lt;/li&gt;
&lt;li&gt;Once you implement a design pattern it is hard to remove when it's not needed or want to replace it with another design pattern.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-design-patterns-"&gt;
  &lt;/a&gt;
  When To Use Design Patterns ?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Design Patterns solve certain problems when writing the code and that's what you have to look for. If you are facing a known problem that has a design pattern as a solution it is recommended that you use.&lt;/li&gt;
&lt;li&gt;Creating flexibility and Making your project easily scalable.&lt;/li&gt;
&lt;li&gt;Code Re-Usability when needed.&lt;/li&gt;
&lt;li&gt;Easy to understand by other developers as design patterns are known standards, so any developer that picks your code can understand it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#commonly-used-patterns"&gt;
  &lt;/a&gt;
  Commonly Used Patterns
&lt;/h2&gt;

&lt;p&gt;Though these aren't "Design Patterns" they are called "Architectural Patterns" but nonetheless it's good to have an idea of what a pattern can look like.&lt;/p&gt;

&lt;p&gt;You may have seen these when trying out a new framework like Django, .NET ... etc.&lt;/p&gt;

&lt;p&gt;There are others but the two most known ones are : &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mvc-"&gt;
  &lt;/a&gt;
  MVC :
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Model&lt;/em&gt;&lt;/strong&gt; : Components That Describe the data in used the app.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;View&lt;/em&gt;&lt;/strong&gt; : : Contains the interface that the user sees which&lt;br&gt;
contains the representation of this data&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Controller&lt;/em&gt;&lt;/strong&gt; : Contains all the business logic done in the&lt;br&gt;
application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mvvm-"&gt;
  &lt;/a&gt;
  MVVM :
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Model&lt;/em&gt;&lt;/strong&gt; : Describes The Data&lt;br&gt;
&lt;strong&gt;&lt;em&gt;View&lt;/em&gt;&lt;/strong&gt; : Defines the structure, layout and appearance of a view on screen &lt;br&gt;
&lt;strong&gt;&lt;em&gt;View Model&lt;/em&gt;&lt;/strong&gt; : A link between the View and Model, dealing with any view logic.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
      <category>design</category>
    </item>
    <item>
      <title>Speeding Up Docker Builds with Remote Cache</title>
      <author>Martin Heinz</author>
      <pubDate>Mon, 15 Nov 2021 18:37:23 +0000</pubDate>
      <link>https://dev.to/martinheinz/speeding-up-docker-builds-with-remote-cache-4890</link>
      <guid>https://dev.to/martinheinz/speeding-up-docker-builds-with-remote-cache-4890</guid>
      <description>&lt;p&gt;Building images in CI/CD pipeline can be quite different from builds on local machine. One major difference is availability of cache. In the local environment you most likely have all the resources, dependencies and image layers cached from previous builds and therefore your builds might take just a few seconds. In the CI pipeline on the other hand, there's no local cache, which can cause the builds to take several minutes. There's solution to this though, and in this article we will look at how we can solve it both with and without Docker and for any CI/CD platform you might be using.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-generic-solution"&gt;
  &lt;/a&gt;
  The Generic Solution
&lt;/h2&gt;

&lt;p&gt;The idea for the generic solution that would work in any environment is pretty simple - we need to somehow create or bring the cache to the pipeline. We have 2 options here - either we point the builder tool (e.g. Docker) to the repository of our image from which it can retrieve image layers and use them as cache, or alternatively, we store the layers on a filesystem which we make available to the pipeline and grab the layers from there. Either way, we need to create the cache by pushing the image to repository or to filesystem, then - in the subsequent builds - we try to use it and if that doesn't work because of cache-miss, we update it with new layers. &lt;/p&gt;

&lt;p&gt;Now let's see how we can do that in practice with various tools...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  Docker
&lt;/h2&gt;

&lt;p&gt;The simplest solution to this problem is to use Docker with &lt;em&gt;BuildKit&lt;/em&gt;. BuildKit is a set of enhancements for &lt;code&gt;docker build&lt;/code&gt; which improves performance, storage management and adds couple extra features, including better caching functionality. To build container image with BuildKit, all we need to do is prepend &lt;code&gt;DOCKER_BUILDKIT=1&lt;/code&gt; to each command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Warm up cache&lt;/span&gt;
~ &lt;span class="nv"&gt;$ DOCKER_BUILDKIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 docker build &lt;span class="nt"&gt;-t&lt;/span&gt; martinheinz/docker-cached &lt;span class="nt"&gt;--build-arg&lt;/span&gt; &lt;span class="nv"&gt;BUILDKIT_INLINE_CACHE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nb"&gt;.&lt;/span&gt; 
...
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; writing image sha256:09f473587beb1a1f240a776760655637ca00894a2a31b730019ecfee48d43848              0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; naming to docker.io/martinheinz/docker-cached                                                      0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting cache                                                                                       0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; preparing build cache &lt;span class="k"&gt;for &lt;/span&gt;&lt;span class="nb"&gt;export                                                                   &lt;/span&gt;0.0s

~ &lt;span class="nv"&gt;$ &lt;/span&gt;docker push martinheinz/docker-cached

&lt;span class="c"&gt;# Build using cache repo&lt;/span&gt;
~ &lt;span class="nv"&gt;$ DOCKER_BUILDKIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 docker build &lt;span class="nt"&gt;--cache-from&lt;/span&gt; martinheinz/docker-cached &lt;span class="nb"&gt;.&lt;/span&gt;
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load metadata &lt;span class="k"&gt;for &lt;/span&gt;docker.io/library/ubuntu:latest                                          0.5s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; importing cache manifest from martinheinz/docker-cached                                               0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; CACHED &lt;span class="o"&gt;[&lt;/span&gt;1/1] FROM docker.io/library/ubuntu@sha256:44ab2c3b26363823dcb965498ab06abf...50743df0d4172d   0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting to image                                                                                    0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting layers                                                                                   0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; writing image sha256:09f473587beb1a1f240a776760655637ca00894a2a31b730019ecfee48d43848              0.0s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example should be self-explanatory to anyone who ever built an image with Docker. Only real difference between this and basic Docker usage is the addition of &lt;code&gt;BUILDKIT_INLINE_CACHE=1&lt;/code&gt; which tells BuildKit to enable inline cache exporter. This makes sure that Docker writes metadata needed for caching into the image. This metadata will be then used in subsequent builds to find out which layers can be cached. The only other difference in the above snippet is the command output - during the first build we can see that Docker exports the cache to the repository, while during the second one it imports cache manifests and also uses one cached layer.&lt;/p&gt;

&lt;p&gt;The use of BuildKit as part of Docker is convenient, but it hides some features and options. So, in case you want more control over the build and caching, then you can directly use the upstream BuildKit project. To do so, you will need to download binaries from &lt;a href="https://github.com/moby/buildkit/releases"&gt;GitHub release page&lt;/a&gt;, unpack it and move it into your path (e.g. &lt;code&gt;/usr/local/bin/&lt;/code&gt;). Finally, you need to start the BuildKit daemon and then you're ready to build:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo cp&lt;/span&gt; ~/Downloads/buildkit-v0.9.0.linux-amd64/bin/buildctl /usr/local/bin/
&lt;span class="nb"&gt;sudo cp&lt;/span&gt; ~/Downloads/buildkit-v0.9.0.linux-amd64/bin/buildkitd /usr/local/bin/
&lt;span class="nb"&gt;sudo cp&lt;/span&gt; ~/Downloads/buildkit-v0.9.0.linux-amd64/bin/buildkit-runc /usr/local/bin/
&lt;span class="nb"&gt;sudo &lt;/span&gt;buildkitd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to perform the same cached build with upstream BuildKit as we did with the Docker integration, we will need to craft a bit more complicated command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;buildctl build martinheinz/docker-cached &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--output&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;image,name&lt;span class="o"&gt;=&lt;/span&gt;docker.io/martinheinz/docker-cached,push&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--export-cache&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;inline &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--import-cache&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;registry,ref&lt;span class="o"&gt;=&lt;/span&gt;docker.io/martinheinz/docker-cached &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--frontend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dockerfile.v0 &lt;span class="nt"&gt;--local&lt;/span&gt; &lt;span class="nv"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--local&lt;/span&gt; &lt;span class="nv"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;

...
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; pushing layers                                                                                    0.6s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; pushing manifest &lt;span class="k"&gt;for &lt;/span&gt;docker.io/martinheinz/docker-cached:latest@sha256:d5e200aa86c...18e234cc92   0.4s
...
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting cache                                                                                      0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; preparing build cache &lt;span class="k"&gt;for &lt;/span&gt;&lt;span class="nb"&gt;export                                                                  &lt;/span&gt;0.0s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see here, there's a lot of flags and arguments that we had to specify, which can be annoying, but allows for great customizability. One advantage of this approach is that we don't need to run &lt;code&gt;docker push&lt;/code&gt;, instead we include &lt;code&gt;push=true&lt;/code&gt; in one of the arguments and &lt;code&gt;buildctl&lt;/code&gt; takes care of pushing the image.&lt;/p&gt;

&lt;p&gt;Another advantage of using BuildKit in this way is ability to push the image and the cached layers into separate repositories or tags. In this example we will store the image itself in &lt;code&gt;docker-cached:latest&lt;/code&gt;, while the cache will live in &lt;code&gt;docker-cached:buildcache&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;buildctl build martinheinz/docker-cached &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--output&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;image,name&lt;span class="o"&gt;=&lt;/span&gt;docker.io/martinheinz/docker-cached,push&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--export-cache&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;registry,ref&lt;span class="o"&gt;=&lt;/span&gt;docker.io/martinheinz/docker-cached:buildcache &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--import-cache&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;registry,ref&lt;span class="o"&gt;=&lt;/span&gt;docker.io/martinheinz/docker-cached:buildcache &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--frontend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dockerfile.v0 &lt;span class="nt"&gt;--local&lt;/span&gt; &lt;span class="nv"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--local&lt;/span&gt; &lt;span class="nv"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;# During first build  - `=&amp;gt; ERROR importing cache manifest from docker.io/martinheinz/docker-cached:buildcache`&lt;/span&gt;
&lt;span class="c"&gt;# During second build - `=&amp;gt; importing cache manifest from docker.io/martinheinz/docker-cached:buildcache`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For completeness, I will also mention that it's also possible to leverage the above mentioned advanced features of BuildKit without installing it separately. For that you will need &lt;code&gt;buildx&lt;/code&gt; which is a Docker CLI plugin for extended build capabilities. &lt;code&gt;buildx&lt;/code&gt; however, has different arguments than &lt;code&gt;buildctl&lt;/code&gt;, so you will need to adjust your build commands based on the docs &lt;a href="https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md#-use-an-external-cache-source-for-a-build---cache-from"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With that said, we're doing all these shenanigans to improve CI/CD build performance, so running these commands locally is nice for testing, but we need to somehow perform this in the environment of some CI/CD platform, and the environment of choice for me is Kubernetes.&lt;/p&gt;

&lt;p&gt;To make this work in Kubernetes, we will need to bring a couple of additional things - namely credentials for pushing the image and volume used as a workspace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;batch/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Job&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildkit&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;restartPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Never&lt;/span&gt;
      &lt;span class="na"&gt;initContainers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prepare&lt;/span&gt;
          &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alpine:3.10&lt;/span&gt;
          &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sh&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;-c&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;echo&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-e&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"FROM&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ubuntu\nENTRYPOINT&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;["/bin/bash",&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-c",&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"echo&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;hello"]\n"&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;/workspace/Dockerfile'&lt;/span&gt;
          &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;workspace&lt;/span&gt;
              &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/workspace&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildkit&lt;/span&gt;
          &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;moby/buildkit:master&lt;/span&gt;
          &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;buildctl-daemonless.sh&lt;/span&gt;
          &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;build"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--frontend"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;dockerfile.v0"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--local"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;context=/workspace"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--local"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;dockerfile=/workspace"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; 
                  &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--output"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;type=image,name=docker.io/martinheinz/docker-cached,push=true"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--import-cache"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
                  &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;type=registry,ref=docker.io/martinheinz/docker-cached"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--export-cache"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;type=inline"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
          &lt;span class="na"&gt;securityContext&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;privileged&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;DOCKER_CONFIG&lt;/span&gt;
              &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/docker/.docker&lt;/span&gt;
          &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-config&lt;/span&gt;
              &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/docker/.docker&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;workspace&lt;/span&gt;
              &lt;span class="na"&gt;readOnly&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
              &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/workspace&lt;/span&gt;
      &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-config&lt;/span&gt;
          &lt;span class="na"&gt;secret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;secretName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildkit-docker-config&lt;/span&gt;
            &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
                &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;workspace&lt;/span&gt;
          &lt;span class="na"&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;claimName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;buildkit-workspace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above is a single &lt;em&gt;Job&lt;/em&gt;, which first creates a &lt;code&gt;Dockerfile&lt;/code&gt; inside the workspace provided by &lt;em&gt;PersistentVolumeClaim&lt;/em&gt; using an init container. The actual job then performs the build as shown earlier. It also mounts repository credentials from &lt;em&gt;Secret&lt;/em&gt; named &lt;code&gt;buildkit-docker-config&lt;/code&gt;, which is needed so that BuildKit can push both the cached layers and the image itself to the repository.&lt;/p&gt;

&lt;p&gt;For clarity, I omitted the manifests of the PersistentVolumeClaim and Secret used above, but if you want test it out yourself, then you can find those &lt;a href="https://gist.github.com/MartinHeinz/e5cc1f8aa00b1c44d19cf685144d16e4"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dockerless"&gt;
  &lt;/a&gt;
  Docker-less
&lt;/h2&gt;

&lt;p&gt;Docker is not however, the only tool for building images that can help us leverage cache during CI/CD builds. One of the alternatives to Docker is Google's Kaniko. Its advantage is that it's meant to be run as container image, which makes it suitable for environments like Kubernetes. &lt;/p&gt;

&lt;p&gt;Considering that this tool is meant for CI/CD pipelines, we need to simulate the same conditions locally to be able to test it. To do so, we will need a couple of directories and files that will be used as volumes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;volume &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;volume
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'FROM ubuntu'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; Dockerfile
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'ENTRYPOINT ["/bin/bash", "-c", "echo hello"]'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; Dockerfile
&lt;span class="nb"&gt;mkdir &lt;/span&gt;cache
&lt;span class="nb"&gt;mkdir &lt;/span&gt;config
&lt;span class="nb"&gt;cp&lt;/span&gt; ~/.docker/config.json config/config.json  &lt;span class="c"&gt;# or podman login --authfile config/config.json&lt;/span&gt;

tree
&lt;span class="nb"&gt;.&lt;/span&gt;
|____Dockerfile    -&amp;gt; Sample Dockerfile &lt;span class="o"&gt;(&lt;/span&gt;will be mounted as workspace&lt;span class="o"&gt;)&lt;/span&gt;
|____cache         -&amp;gt; Cache directory/volume
|____config        -&amp;gt; Config directory/volume
  |____config.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above we created 3 things - a sample &lt;code&gt;Dockerfile&lt;/code&gt; consisting of single layer, which we will use for testing. Next, we created a &lt;code&gt;cache&lt;/code&gt; directory which will be mounted into container and used for storing cached image layers. Finally, we created &lt;code&gt;config&lt;/code&gt; directory, containing registry credentials, which will be mounted read-only.&lt;/p&gt;

&lt;p&gt;In previous section we only looked at the caching image layers using image registry/repository, with Kaniko though, we can also use a local directory/volume as a cache source. To do that we first need to &lt;em&gt;"warm-up"&lt;/em&gt; the cache aka populate it with image layers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Warm up (populate) the cache with base image(s)&lt;/span&gt;
~ &lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;:/workspace &lt;span class="se"&gt;\&lt;/span&gt;
    gcr.io/kaniko-project/warmer:latest &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--cache-dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/workspace/cache &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ubuntu  &lt;span class="c"&gt;# --image=more-images&lt;/span&gt;

~ &lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls &lt;/span&gt;cache/
sha256:3555f4996aea6be945ae1532fa377c88f4b3b9e6d93531f47af5d78a7d5e3761
sha256:3555f4996aea6be945ae1532fa377c88f4b3b9e6d93531f47af5d78a7d5e3761.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: This section is about building images and caching images without docker, however during testing outside of Kubernetes, we still need to run the Kaniko image somehow, and that's using &lt;code&gt;docker&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Kaniko project provides 2 images - &lt;code&gt;warmer&lt;/code&gt; and &lt;code&gt;executor&lt;/code&gt;, above we used the former, which takes variable number of images and uses them to populate specified cache directory.&lt;/p&gt;

&lt;p&gt;With the cache ready, we can move onto building the image. This time we use the &lt;code&gt;executor&lt;/code&gt; image, passing in 2 volumes - one for registry credential (mounted read-only) and one for workspace, which we pre-populated with sample &lt;code&gt;Dockerfile&lt;/code&gt;. Additionally, we specify flags to enable caching as well as destination, where the final image will be pushed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Use the cache&lt;/span&gt;
~ &lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;/config/config.json:/kaniko/.docker/config.json:ro &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;:/workspace &lt;span class="se"&gt;\&lt;/span&gt;
    gcr.io/kaniko-project/executor:latest &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--dockerfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/workspace/Dockerfile &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--cache&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--cache-dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/workspace/cache &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--destination&lt;/span&gt; martinheinz/kaniko-cached &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--context&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;:///workspace/

...
INFO[0002] Returning cached image manifest              
INFO[0002] Found sha256:3555f4996aea6be945ae1532fa377c88f4b3b9e6d93531f47af5d78a7d5e3761 &lt;span class="k"&gt;in &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;cache 
INFO[0002] Found manifest at /workspace/cache/sha256:3555f4996aea6be945ae1532fa377c88f4b3b9e6d93531f47af5d78a7d5e3761.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These examples show us how it works in theory, but in practice we will want to run this on Kubernetes. For that we will need similar set of objects as in the example with BuildKit, that is - &lt;a href="https://gist.github.com/MartinHeinz/1c9700d197f0e565d314555b26e66890"&gt;volume claim for cache directory&lt;/a&gt;, &lt;a href="https://gist.github.com/MartinHeinz/a1270557722478b65a4ec33f632a36cb"&gt;volume claim for workspace (Dockerfile)&lt;/a&gt;, a secret with registry credentials and a Job or Pod that will execute &lt;code&gt;kaniko&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pod&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gcr.io/kaniko-project/executor:latest&lt;/span&gt;
    &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--dockerfile=/workspace/Dockerfile"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--context=dir://workspace"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--destination=martinheinz/kaniko-cached"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--cache"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--cache-dir=/cache"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
        &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/kaniko/.docker/&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-cache&lt;/span&gt;
        &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/cache&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
        &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/workspace&lt;/span&gt;
  &lt;span class="na"&gt;restartPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Never&lt;/span&gt;
  &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
      &lt;span class="na"&gt;secret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;secretName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
        &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-cache&lt;/span&gt;
      &lt;span class="na"&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;claimName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-cache&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
      &lt;span class="na"&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;claimName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, assuming that we already have the cache populated using &lt;code&gt;warmer&lt;/code&gt; image, we run &lt;code&gt;kaniko&lt;/code&gt; executor, which retrieves &lt;code&gt;Dockerfile&lt;/code&gt; from &lt;code&gt;/workspace&lt;/code&gt; directory, cached layers from &lt;code&gt;/cache&lt;/code&gt; and credentials from &lt;code&gt;/kaniko/.docker/config.json&lt;/code&gt;. If everything goes well, we should see in logs that the cached layers were found by Kaniko &lt;code&gt;executor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Caching layers from local volume can be useful, but most of the time you'll probably want to use remote registry. Kaniko can do that too, and all we need to do is change a couple of arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pod&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gcr.io/kaniko-project/executor:latest&lt;/span&gt;
    &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--dockerfile=/workspace/Dockerfile"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--context=dir://workspace"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--destination=martinheinz/kaniko-cached"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--cache"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--cache-copy-layers"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
           &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--cache-repo=martinheinz/kaniko-cached"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
        &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/kaniko/.docker&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
        &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/workspace&lt;/span&gt;
  &lt;span class="na"&gt;restartPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Never&lt;/span&gt;
  &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
      &lt;span class="na"&gt;secret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;secretName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-docker-config&lt;/span&gt;
        &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config.json&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
      &lt;span class="na"&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;claimName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kaniko-workspace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The important change we made here is that we replaced &lt;code&gt;--cache-dir&lt;/code&gt; flag with &lt;code&gt;--cache-repo&lt;/code&gt;. Additionally, we were also able to omit the volume claim used for cache directory.&lt;/p&gt;

&lt;p&gt;Besides Kaniko, there are quite a few other tools that can build a container image. The most notable one is &lt;code&gt;podman&lt;/code&gt;, which leverages &lt;code&gt;buildah&lt;/code&gt; to build images. Using these 2 for caching however, is not an option right now. The &lt;code&gt;--cache-from&lt;/code&gt; option is available in &lt;code&gt;buildah&lt;/code&gt;, it is however NOOP, so even if you specify it, nothing will happen. So, if you want to migrate your CI from Docker to Buildah and the caching is a requirement, then you will need to wait for &lt;a href="https://github.com/containers/buildah/issues/620"&gt;this issue&lt;/a&gt; to be implemented/resolved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;This article described how we can leverage layer caching to improve build performance. If you're experiencing bad performance in image builds, chances are though, that problem doesn't lie in missing caching, but rather in the commands in your &lt;code&gt;Dockerfile&lt;/code&gt;. Therefore, before you in jump into implementing layer caching, I'd suggest you try to optimize structure of your &lt;code&gt;Dockerfiles&lt;/code&gt; first. Additionally, the caching will only work if you have well-structured &lt;code&gt;Dockerfiles&lt;/code&gt;, because after first cache miss, no further cached layers can be used.&lt;/p&gt;

&lt;p&gt;Besides caching layers, you might also want to cache dependencies, that way you can save time needed to download libraries from NPM, PyPI, Maven or other artifact repositories. One way to do this would be using BuildKit and its &lt;code&gt;--mount=type=cache&lt;/code&gt; flag described &lt;a href="https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/syntax.md#example-cache-go-packages"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>kubernetes</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Modern chatroulette app open source</title>
      <author>Lorenzo Tinfena</author>
      <pubDate>Mon, 15 Nov 2021 18:25:02 +0000</pubDate>
      <link>https://dev.to/lorenzotinfena/modern-chatroulette-app-open-source-484l</link>
      <guid>https://dev.to/lorenzotinfena/modern-chatroulette-app-open-source-484l</guid>
      <description>&lt;p&gt;Im doing this project open source &lt;a href="https://github.com/LorenzoTinfena/chat-and-meet-server"&gt;https://github.com/LorenzoTinfena/chat-and-meet-server&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/LorenzoTinfena/chat-and-meet-client"&gt;https://github.com/LorenzoTinfena/chat-and-meet-client&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Server in go, client in flutter, with grpc protocol for APIs, im not good in frontend and i don't like it, but I wanted to do this open source project cause most chatroulette app don't offer the possibility to choose age, gender, ecc. (maybe for payment).&lt;br&gt;
the main purpose when it will (if it will) be published, is to let every possible service free for everyone&lt;/p&gt;

</description>
      <category>go</category>
      <category>opensource</category>
      <category>dart</category>
      <category>flutter</category>
    </item>
    <item>
      <title>ORDER BY is mandatory in SQL to get a sorted result</title>
      <author>Franck Pachot</author>
      <pubDate>Mon, 15 Nov 2021 18:24:55 +0000</pubDate>
      <link>https://dev.to/yugabyte/order-by-is-mandatory-in-sql-to-get-a-sorted-result-3pmk</link>
      <guid>https://dev.to/yugabyte/order-by-is-mandatory-in-sql-to-get-a-sorted-result-3pmk</guid>
      <description>&lt;p&gt;In IT, like in math, a negative test can prove that an assertion is wrong. But a positive test doesn't prove that the assertion is right. It is worse in IT because the algorithm may show an apparently correct result with a probablilty that is higher than just being lucky:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;postgres=# create table demo (n int primary key);
CREATE TABLE

postgres=# insert into demo  
           select n from generate_series(1,1e6) n;
INSERT 0 1000000

postgres=# select n from demo limit 10;

 n
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
(10 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this example, you may think that a select returns the rows ordered. This is wrong. The SQL language is declarative. Without an ORDER BY, the result is random. The apparently sorted result here is just a side effect of inserting into heap tables by appending at the end of the file. And reading the file from beginning to end with one thread. The rows are displayed as they are fetched.&lt;/p&gt;

&lt;p&gt;When I insert the rows in another order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;postgres=# drop table if exists demo;
DROP TABLE
postgres=# create table demo (n int primary key);
CREATE TABLE
postgres=# insert into demo  select 1e6-n from generate_series(1,1e6) n;
INSERT 0 1000000
postgres=# select n from demo limit 10;
   n
--------
 999999
 999998
 999997
 999996
 999995
 999994
 999993
 999992
 999991
 999990
(10 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;they come as they were stored. This is typical of a serial SeqScan:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;postgres=# explain select n from demo limit 10;
                             QUERY PLAN
-------------------------------------------------------------
 Limit  (cost=0.00..0.14 rows=10 width=4)
   -&amp;gt;  Seq Scan on demo  (cost=0.00..14425.00 rows=1000000 width=4)
(2 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You cannot rely on any of this behavior. With another execution plan, this order may change:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;postgres=# set enable_seqscan=false;
SET
postgres=# select n from demo limit 10;
 n
--------
 0
 1
 2
 3
 4
 5
 6
 7
 8
 9
(10 rows)

postgres=# explain select n from demo limit 10;

                                        QUERY PLAN
-------------------------------------------------------------
 Limit  (cost=0.42..0.77 rows=10 width=4)
   -&amp;gt;  Index Only Scan using demo_pkey on demo  (cost=0.42..34712.43 rows=1000000 width=4)
(2 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Many things can change the behavior. Here an index scan instead of a full table scan. Parallel query will also change the way they are read by SeqScan. And updates can also move them physically:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;postgres=# set enable_seqscan=true;
SET
postgres=# alter table demo add column x char;
ALTER TABLE
postgres=# update demo set x=1 where mod(n,3)=0;
UPDATE 333334
postgres=# select n from demo limit 10;
   n
-------------
 999998
 999997
 999995
 999994
 999992
 999991
 999989
 999988
 999986
 999985
(10 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only way to get a reliable sorted result is with an ORDER BY:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;postgres=# select n from demo order by n limit 10;
 n
--------
 0
 1
 2
 3
 4
 5
 6
 7
 8
 9
(10 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't think an ORDER BY will have to sort the rows, the query planner may opt for a physical structure that returns the them in order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;postgres=# explain select n from demo order by n limit 10;
                                        QUERY PLAN
------------------------------------------------------------------------------------------------
 Limit  (cost=0.42..0.77 rows=10 width=4)
   -&amp;gt;  Index Only Scan using demo_pkey on demo  (cost=0.42..34716.43 rows=1000000 width=4)
(2 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In SQL you declare the order you want, and the query planner knows which access methods retrieves them in order. The optimizer knows but you don't know. Except of course if you have read, and understood, the source code for the exact version you run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yugabytedb"&gt;
  &lt;/a&gt;
  YugabyteDB
&lt;/h2&gt;

&lt;p&gt;In a distributed SQL database, there are good chances that the default order does not match anything you expect:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yugabyte=# create table demo (n int primary key);
CREATE TABLE

yugabyte=# insert into demo  select 1e6-n from generate_series(1,1e6) n;
INSERT 0 1000000

yugabyte=# select n from demo limit 10;

   n
-------------
 110359
 192735
 219128
 237047
 310517
 593962
 627995
 651891
 669921
 790562
(10 rows)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This looks random. But of course, there's a logic. The default sharding method is a hash function on the first column of the primary key. We can query this hashing function ourselves with &lt;code&gt;yb_hash_code()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yugabyte=# select min(h),max(h),avg(h) from (
            select yb_hash_code( generate_series(1,1e6) ) h 
           ) v;

 min |  max  |        avg
----------+-------+--------------------
   0 | 65535 | 32774.509179000000
(1 row)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function can return one of the 65536 values from 0 to 65535. This is what is used to distribute rows into tablets in the distributed storage (DocDB).&lt;/p&gt;

&lt;p&gt;Without an ORDER BY, the rows are returned ordered on this hash code first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yugabyte=# select yb_hash_code(n), n from demo limit 10;

 yb_hash_code |   n
-------------------+--------
            0 | 110359
            0 | 192735
            0 | 219128
            0 | 237047
            0 | 310517
            0 | 593962
            0 | 627995
            0 | 651891
            0 | 669921
            0 | 790562
(10 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look, If I query all rows with this speific hash code, they come back in order.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yugabyte=# select n from demo where yb_hash_code(n)=0;

   n
-------------
 110359
 192735
 219128
 237047
 310517
 593962
 627995
 651891
 669921
 790562
 792363
 819768
 891493
 984191
(14 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When understanding the way the rows are stored physically, and retrieved with a SeqScan, the order is random but not magic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yugabyte=# select n, yb_hash_code(n) from demo limit 50;

   n    | yb_hash_code
-------------+--------------
 110359 |            0
 192735 |            0
 219128 |            0
 237047 |            0
 310517 |            0
 593962 |            0
 627995 |            0
 651891 |            0
 669921 |            0
 790562 |            0
 792363 |            0
 819768 |            0
 891493 |            0
 984191 |            0
  17012 |            1
  24685 |            1
 153595 |            1
 186378 |            1
 219742 |            1
 258869 |            1
 271029 |            1
 547922 |            1
 565568 |            1
 763430 |            1
 766123 |            1
 772002 |            1
 781840 |            1
 840822 |            1
 844655 |            1
 953917 |            1
 162485 |            2
 168413 |            2
 271551 |            2
 285516 |            2
 407063 |            2
 420509 |            2
 440160 |            2
 572540 |            2
 585722 |            2
 589471 |            2
 628271 |            2
 719191 |            2
 837125 |            2
 866379 |            2
 951013 |            2
 976519 |            2
 994652 |            2
    854 |            3
  57757 |            3
  70079 |            3
(50 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Internally, the YugabyteDB table rows are stored ordered on the document key, which is the primary key prefixed by the hash code. This brings the fast access to a key point or range: from the hash code, it determines the right tablet. And then it finds the row in the SSTable (Sorted Sequence Table) structure.&lt;/p&gt;

&lt;p&gt;If I decide to shard on a range, even a SeqScan would return in order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yugabyte=# drop table demo;
DROP TABLE

yugabyte=# create table demo (n int, primary key(n asc))
           split at values ( (333333),(666666) );
CREATE TABLE

yugabyte=# insert into demo  select 1e6-n from generate_series(1,1e6) n;
INSERT 0 1000000

yugabyte=# select n from demo limit 10;
 n
--------
 0
 1
 2
 3
 4
 5
 6
 7
 8
 9
(10 rows)

yugabyte=# explain analyze select n from demo limit 10;
                                                QUERY PLAN
---------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..1.00 rows=10 width=4) (actual time=0.788..0.796 rows=10 loops=1)
   -&amp;gt;  Seq Scan on demo  (cost=0.00..100.00 rows=1000 width=4) (actual time=0.787..0.791 rows=10 loops=1)
 Planning Time: 0.047 ms
 Execution Time: 0.855 ms
(4 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Seq Scan on is then similar to the Index Scan on the primary key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yugabyte=# explain analyze select n from demo order by n limit 10;
                                                         QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..1.14 rows=10 width=4) (actual time=0.809..0.816 rows=10 loops=1)
   -&amp;gt;  Index Scan using demo_pkey on demo  (cost=0.00..114.00 rows=1000 width=4) (actual time=0.808..0.813 rows=10 loops=1)
 Planning Time: 0.066 ms
 Execution Time: 0.843 ms
(4 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is because the table is actually stored in the primary key structure (Similar to Oracle Index Organized Table, or SQL Server Clustered Index, or MySQL InnoDB tables...)&lt;/p&gt;

&lt;p&gt;I mentioned that the hash code has 65536:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yugabyte=# drop table demo;
DROP TABLE
yugabyte=# create table demo (n int primary key)
           split into 16 tablets;
CREATE TABLE
yugabyte=# insert into demo
           select n from generate_series(1,1e6) n;
INSERT 0 1000000
yugabyte=# select count(distinct yb_hash_code(n)) from demo;
 count
------------
 65536
(1 row)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But of course the number of tablets is lower. Just a few per nodes to allow adding nodes. When I want to know the number of tablets&lt;/p&gt;

&lt;p&gt;If by curiosity you want to know how many tablets, I run an aggregate function that is pushed-down to each tablet so that the number of rows in the execution plan is the number of aggregations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yugabyte=# explain analyze select count(*) from demo;

yugabyte=# explain analyze select count(*) from demo;
                                                  QUERY PLAN
-------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=102.50..102.51 rows=1 width=8) (actual time=984.031..984.031 rows=1 loops=1)
   -&amp;gt;  Seq Scan on demo  (cost=0.00..100.00 rows=1000 width=0) (actual time=357.419..984.010 rows=16 loops=1)
 Planning Time: 0.055 ms
 Execution Time: 984.145 ms
(4 rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;rows=16&lt;/code&gt; is from the 16 &lt;code&gt;count(*)&lt;/code&gt; results coming from each tablets. I have 16 tablets here, with 65536/16=4096 hash codes per tablet.&lt;/p&gt;

&lt;p&gt;It is interesting to understand how the rows are stored and fetched, because you can think about performance. But when it comes to run application queries, don't forget that SQL is a declarative language. If you want a sorted result, declare it with ORDER BY. And the query planner will figure out what to do.&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>yugabytedb</category>
      <category>sql</category>
      <category>database</category>
    </item>
    <item>
      <title>How to combine event methods in one in React.js?</title>
      <author>Ali Bahaari</author>
      <pubDate>Mon, 15 Nov 2021 18:16:08 +0000</pubDate>
      <link>https://dev.to/alibahaari/how-to-combine-event-methods-in-one-in-reactjs-2m3m</link>
      <guid>https://dev.to/alibahaari/how-to-combine-event-methods-in-one-in-reactjs-2m3m</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u3pyEgyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v37utqkv15swfy1vdjud.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u3pyEgyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v37utqkv15swfy1vdjud.jpg" alt="React.js" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consider you have multiple buttons having several &lt;code&gt;handleClick&lt;/code&gt; methods as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Lorem Ipsum 1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Lorem Ipsum 2&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick3&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Lorem Ipsum 3&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thus, what's the problem?! You may have faced it! Consider if you have 100 buttons, you should declare 100 &lt;code&gt;handleClick&lt;/code&gt; methods!&lt;/p&gt;

&lt;p&gt;Let me show you a simple and elegant way for the problem above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-raw-name-endraw-attribute"&gt;
  &lt;/a&gt;
  Use &lt;code&gt;name&lt;/code&gt; Attribute
&lt;/h2&gt;

&lt;p&gt;Due to &lt;em&gt;w3schools.com&lt;/em&gt; defintion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the &lt;code&gt;name&lt;/code&gt; attribute specifies a name for an HTML element and can be used to reference the element in JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore first, I rewrite the code above and two important changes will be in your sights:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;One method has been declared for &lt;code&gt;onClick&lt;/code&gt; events called &lt;code&gt;handleClick&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;I've used &lt;code&gt;name&lt;/code&gt; attribute along with different values
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"LI1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Lorem Ipsum 1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"LI2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Lorem Ipsum 2&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"LI3"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Lorem Ipsum 3&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I write &lt;code&gt;handleClick&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LI1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DO&lt;/span&gt; &lt;span class="nx"&gt;SOMETHING&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Else&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LI2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DO&lt;/span&gt; &lt;span class="nx"&gt;SOMETHING&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Else&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LI3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DO&lt;/span&gt; &lt;span class="nx"&gt;SOMETHING&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Else&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Boom! Now compare the code above with the another one. Simplicity and optimization are shining and working like a charm indeed! :)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can or may want to connect with me through the networks I've put in my website:&lt;/em&gt; &lt;strong&gt;&lt;a href="https://alibahaari.github.io"&gt;Ali Bahaari's Website&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Build APIs for various HTTP Methods in Dart</title>
      <author>Aswin Gopinathan</author>
      <pubDate>Mon, 15 Nov 2021 17:59:21 +0000</pubDate>
      <link>https://dev.to/infiniteoverflow/build-apis-for-various-http-methods-in-dart-n87</link>
      <guid>https://dev.to/infiniteoverflow/build-apis-for-various-http-methods-in-dart-n87</guid>
      <description>&lt;p&gt;Hello everyone!&lt;/p&gt;

&lt;p&gt;In my previous article i talked about building APIs with Dart using the &lt;a href="https://pub.dev/packages/shelf"&gt;shelf&lt;/a&gt; package, and how you can host it on Heroku.&lt;br&gt;
If you haven't read that, do read it if you are new to building APIs in Dart.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5B6LsP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9yzhv717zqimbuo3ote.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5B6LsP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9yzhv717zqimbuo3ote.png" alt="Poster of my previous article" width="880" height="249"&gt;&lt;/a&gt;&lt;br&gt;
You can access the article from &lt;a href="https://dev.to/infiniteoverflow/create-an-api-with-dart-heroku-477k"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, i am gonna talk about how you can implement various http methods (GET, POST, DELETE) using an add-on to the shelf package, which is the &lt;a href="https://pub.dev/packages/shelf_router"&gt;shelf-router&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N44BUVPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/b3/75/8d/b3758db9d70f809d03bf7a92d188945b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N44BUVPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/b3/75/8d/b3758db9d70f809d03bf7a92d188945b.gif" alt="FRIENDS Excitement Scene" width="500" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A small limitation to the &lt;code&gt;shelf&lt;/code&gt; package is that it dosen't have support for creating separate handlers for different request methods/ request URLs built into it. &lt;br&gt;
&lt;strong&gt;For eg:&lt;/strong&gt; &lt;br&gt;
The various request methods can be a GET/POST/DELETE/PUT request using different URLs, or these requests can be on the same URL as well. But we have to explicitly write switch or myriad of if conditions to redirect to its appropriate handlers for further request handling.&lt;/p&gt;

&lt;p&gt;But the &lt;code&gt;shelf_router&lt;/code&gt; package defines a &lt;code&gt;Router&lt;/code&gt; object which we can use to define the url and http method that is requesting the service and implicitly transfer control to appropriate handler functions.&lt;/p&gt;

&lt;p&gt;Now, it sounds interesting right! So, without any further delay lets dive right in.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; I will be using IntelliJ as the IDE throughout this article, but you can replicate the same in VsCode or Android Studio.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can skip the following section if you know how to create a new &lt;code&gt;dart-server&lt;/code&gt; project.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#create-a-new-dartserver-project"&gt;
  &lt;/a&gt;
  Create a new dart-server project
&lt;/h2&gt;

&lt;p&gt;Click on File-&amp;gt;New Project&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VW20edys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9k5a9k0a719g1s46mxs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VW20edys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9k5a9k0a719g1s46mxs.png" alt="Pic of New Project Screen" width="880" height="820"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Name it anything you want!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HK5VSF5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp5vap1vxhzuluy5rj60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HK5VSF5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp5vap1vxhzuluy5rj60.png" alt="Enter the name of the project" width="880" height="825"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After these two steps, you should get the template for your &lt;code&gt;dart-server&lt;/code&gt; ready!&lt;/p&gt;



&lt;p&gt;Now, head over to &lt;strong&gt;lib-&amp;gt;server.dart&lt;/strong&gt;. Your file should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'dart:io'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:args/args.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:shelf/shelf.dart'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;shelf&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:shelf/shelf_io.dart'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// For Google Cloud Run, set _hostname to '0.0.0.0'.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;_hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'localhost'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ArgParser&lt;/span&gt;&lt;span class="o"&gt;()..&lt;/span&gt;&lt;span class="na"&gt;addOption&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'port'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;abbr:&lt;/span&gt; &lt;span class="s"&gt;'p'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// For Google Cloud Run, we respect the PORT environment variable&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;portStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'port'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="n"&gt;Platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'PORT'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="s"&gt;'8080'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tryParse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;portStr&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeln&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Could not parse port value "&lt;/span&gt;&lt;span class="si"&gt;$portStr&lt;/span&gt;&lt;span class="s"&gt;" into a number.'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// 64: command line usage error&lt;/span&gt;
    &lt;span class="n"&gt;exitCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;shelf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Pipeline&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addMiddleware&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shelf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;logRequests&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addHandler&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_echoRequest&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;serve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_hostname&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Serving at http://&lt;/span&gt;&lt;span class="si"&gt;${server.address.host}&lt;/span&gt;&lt;span class="s"&gt;:&lt;/span&gt;&lt;span class="si"&gt;${server.port}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;shelf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Response&lt;/span&gt; &lt;span class="nf"&gt;_echoRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shelf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Request&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;shelf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Request for "&lt;/span&gt;&lt;span class="si"&gt;${request.url}&lt;/span&gt;&lt;span class="s"&gt;"'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the approach using the &lt;code&gt;shelf&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Now, lets add the &lt;a href="https://pub.dev/packages/shelf_router"&gt;shelf-router&lt;/a&gt; package to our &lt;code&gt;pubspec.yaml&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;shelf_router&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^1.1.2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;This is the version of the package at the time of writing this article. Please update it accordingly.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next, lets create a new dart file and name it &lt;code&gt;api.dart&lt;/code&gt;. We will write all the routing logic in this file.&lt;/p&gt;

&lt;p&gt;Add imports to the &lt;code&gt;shelf&lt;/code&gt; and &lt;code&gt;shelf_router&lt;/code&gt; package as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:shelf/shelf.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:shelf_router/shelf_router.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create a new class &lt;code&gt;Api&lt;/code&gt; and write a getter method &lt;code&gt;handler&lt;/code&gt; that returns a &lt;code&gt;Handler&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Api&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Write your logic here&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, go back to the &lt;code&gt;server.dart&lt;/code&gt; file and update the last-second line of the main function as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;serve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Api&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_hostname&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;You may have to import the api.dart file as well.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, your server will serve Requests from this new API Class handler rather than from the typical &lt;code&gt;_echoRequest()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Now, lets get back to the &lt;code&gt;api.dart&lt;/code&gt; file. All the codes thats gonna follow will be written inside the &lt;code&gt;handler&lt;/code&gt; method below the comment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-request"&gt;
  &lt;/a&gt;
  GET Request
&lt;/h2&gt;

&lt;p&gt;First, lets see how a get request for the url &lt;code&gt;/api/&amp;lt;name&amp;gt;&lt;/code&gt; will work, where &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; can be any word:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/api/&amp;lt;name&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;jsonEncode&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
          &lt;span class="s"&gt;'success'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="s"&gt;'data'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="o"&gt;}),&lt;/span&gt;
        &lt;span class="nl"&gt;headers:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="s"&gt;'Content-type'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'application/json'&lt;/span&gt;
        &lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have defined a handler method to process in case a GET request is made to the url &lt;code&gt;/api/&amp;lt;name&amp;gt;&lt;/code&gt;, where name could be any word.&lt;br&gt;
The Handler method will return an object of type &lt;code&gt;Response&lt;/code&gt; with OK status code. The response will be a JSON String as follows:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVJBM6p_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u90jx7g3amwgp20s4wwr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVJBM6p_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u90jx7g3amwgp20s4wwr.png" alt="Output image" width="664" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we have added a placeholder in the url parameter of &lt;code&gt;router.get()&lt;/code&gt;, ie &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;, the handler method will take a second parameter that will contain the value passed in the url, which is in-turn returned as Response. &lt;/p&gt;

&lt;p&gt;For the remaining part of this article i am going to use a local json file which has pre-filled data. &lt;br&gt;
You can access the file from &lt;a href="https://github.com/infiniteoverflow/http_methods_demo/blob/main/friends.json"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The file contents should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"users"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Rachel Green"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Ross Geller"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Monica Geller"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Joey Tribbiani"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Chandler Bing"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Pheobe Buffay"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, inside the Api class we will define a variable &lt;code&gt;data&lt;/code&gt; of type &lt;code&gt;List&lt;/code&gt;, which will store the list of users from the json file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsonDecode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'friends.json'&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;readAsStringSync&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;'users'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#post-request"&gt;
  &lt;/a&gt;
  POST Request
&lt;/h2&gt;

&lt;p&gt;Now, lets see how we can perform a POST Request. Let's perform a add operation, where we will add new information from the POST payload.&lt;br&gt;
&lt;strong&gt;POST Payload&lt;/strong&gt; is the information you pass when hitting the API Endpoint using a POST Request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/api/add'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsonDecode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readAsString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;jsonEncode&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
        &lt;span class="s"&gt;'success'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'data'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
      &lt;span class="o"&gt;}),&lt;/span&gt;
      &lt;span class="nl"&gt;headers:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'Content-type'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'application/json'&lt;/span&gt;
      &lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will be using &lt;strong&gt;Postman&lt;/strong&gt; to perform the POST Operation on the API. You can try any API Testing tools of your choice.&lt;/p&gt;

&lt;p&gt;I will be passing the following data as the payload(body) for the POST Request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Aswin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This json data will be stored in the variable &lt;code&gt;payload&lt;/code&gt; in the handler function above, and the same is added to the &lt;code&gt;data&lt;/code&gt; variable which is then displayed as a response to verify it is added correctly.&lt;/p&gt;

&lt;p&gt;This is a basic application of how you can use the POST request. Some improvisations can be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As of now, we are just appending the new data to the variable &lt;code&gt;data&lt;/code&gt; and not to the actual json file. That means, when you restart the server, the appended data will be gone as that time you are freshly fetching from the json file.&lt;br&gt;
You can change the code to append the new data permanently to the json file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We are passing the hardcoded Id in the payload, you can improvise it by just passing the Name and Age and calculating its Id in the function by considering the Id of the last entry in the json data.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#delete-request"&gt;
  &lt;/a&gt;
  DELETE Request
&lt;/h2&gt;

&lt;p&gt;Finally, lets see how the DELETE Request works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/api/delete/&amp;lt;id&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;idN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;deletedData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;firstWhere&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="o"&gt;]==&lt;/span&gt;&lt;span class="n"&gt;idN&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;orElse:&lt;/span&gt; &lt;span class="o"&gt;()=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; 
      &lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deletedData&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;notFound&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;jsonEncode&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
            &lt;span class="s"&gt;'success'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'data'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'invalid id'&lt;/span&gt;
          &lt;span class="o"&gt;}),&lt;/span&gt;
          &lt;span class="nl"&gt;headers:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;'Content-type'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'application/json'&lt;/span&gt;
          &lt;span class="o"&gt;},&lt;/span&gt;
        &lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deletedData&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
      &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;removeAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;jsonEncode&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
          &lt;span class="s"&gt;'success'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="s"&gt;'data'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;deletedData&lt;/span&gt;
        &lt;span class="o"&gt;}),&lt;/span&gt;
        &lt;span class="nl"&gt;headers:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="s"&gt;'Content-type'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'application/json'&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;URL : &lt;code&gt;api/delete/&amp;lt;id&amp;gt;&lt;/code&gt;&lt;br&gt;
We first get the id passed in the URL and store it in the variable &lt;code&gt;idN&lt;/code&gt;. Next, we use that variable to search if any entry exists in the &lt;code&gt;data&lt;/code&gt; variable with the given id.&lt;br&gt;
If it dosen't exist &lt;code&gt;null&lt;/code&gt; is returned and we return a Response object of status code 404(Not Found).&lt;/p&gt;

&lt;p&gt;If Id exists, we remove the entry from the &lt;code&gt;data&lt;/code&gt; variable and the deleted information is returned in the Response with a status code of 200(OK).&lt;/p&gt;




&lt;p&gt;Well folks, thats it for now. You can access the above codes on &lt;a href="https://github.com/infiniteoverflow/http_methods_demo"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-can-you-go-from-here"&gt;
  &lt;/a&gt;
  Where can you go from here
&lt;/h3&gt;

&lt;p&gt;In this article you learned how you can read/add/delete from a database(here, a json file). &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can take it to the next level by connecting to a online database like Supabase, Firebase, Mongo, etc and make a production level API.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also add a Authentication or Authorization check and allow only the requests that sends a Valid Bearer Token to perform the operations.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any doubts while working with the codes in this article, feel free to reach out to me on my handles:&lt;/p&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/GopinathanAswin"&gt;@GopinathanAswin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LinkedIn : &lt;a href="https://www.linkedin.com/in/aswin-gopinathan-69556716a/"&gt;Aswin Gopinathan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, it's a good bye then. I will see you in my next article!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LFjBUPdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/UOvfMdxpeWIAAAAC/friends-joey.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LFjBUPdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/UOvfMdxpeWIAAAAC/friends-joey.gif" alt="Joey saying Bye-Bye" width="498" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>api</category>
      <category>server</category>
    </item>
    <item>
      <title>Ultimate Docker and  FastAPI Guide</title>
      <author>Brian Macharia</author>
      <pubDate>Mon, 15 Nov 2021 17:53:36 +0000</pubDate>
      <link>https://dev.to/brianmk/ultimate-docker-and-fastapi-guide-1l85</link>
      <guid>https://dev.to/brianmk/ultimate-docker-and-fastapi-guide-1l85</guid>
      <description>&lt;p&gt;Ultimate Docker and  FastAPI Guide&lt;br&gt;
When deploying FastAPI applications a common approach is to build a Linux container image. It's normally done using Docker&lt;br&gt;
You can then deploy that container image in one of a few possible ways.&lt;br&gt;
Using Linux containers has several advantages including security, replicability, simplicity, and others.&lt;br&gt;
What is a Container&lt;br&gt;
Containers (mainly Linux containers) are a very lightweight way to package applications including all their dependencies and necessary files while keeping them isolated from other containers (other applications or components) in the same system.&lt;br&gt;
Linux containers run using the same Linux kernel of the host (machine, virtual machine, cloud server, etc). This just means that they are very lightweight (compared to full virtual machines emulating an entire operating system).&lt;br&gt;
This way, containers consume little resources, an amount comparable to running the processes directly (a virtual machine would consume much more).&lt;br&gt;
Containers also have their own isolated running processes (commonly just one process), file system, and network, simplifying deployment, security, development, etc.&lt;br&gt;
What is a Container Image&lt;br&gt;
A container is run from a container image.&lt;br&gt;
A container image is a static version of all the files, environment variables, and the default command/program that should be present in a container. Static here means that the container image is not running, it's not being executed, it's only the packaged files and metadata.&lt;br&gt;
In contrast to a "container image" that is the stored static contents, a "container" normally refers to the running instance, the thing that is being executed.&lt;br&gt;
When the container is started and running (started from a container image) it could create or change files, environment variables, etc. Those changes will exist only in that container, but would not persist in the underlying container image (would not be saved to disk).&lt;br&gt;
A container image is comparable to the program file and contents, e.g. python and some file main.py.&lt;br&gt;
And the container itself (in contrast to the container image) is the actual running instance of the image, comparable to a process. In fact, a container is running only when it has a process running (and normally it's only a single process). The container stops when there's no process running in it.&lt;br&gt;
Container Images&lt;br&gt;
Docker has been one of the main tools to create and manage container images and containers.&lt;br&gt;
And there's a public Docker Hub with pre-made official container images for many tools, environments, databases, and applications.&lt;br&gt;
For example, there's an official Python Image.&lt;br&gt;
And there are many other images for different things like databases, for example for:&lt;br&gt;
• PostgreSQL&lt;br&gt;
• MySQL&lt;br&gt;
• MongoDB&lt;br&gt;
• Redis, etc.&lt;br&gt;
By using a pre-made container image it's very easy to combine and use different tools. For example, to try out a new database. In most cases, you can use the official images, and just configure them with environment variables.&lt;br&gt;
That way, in many cases you can learn about containers and Docker and re-use that knowledge with many different tools and components.&lt;br&gt;
So, you would run multiple containers with different things, like a database, a Python application, a web server with a React frontend application, and connect them together via their internal network.&lt;br&gt;
All the container management systems (like Docker or Kubernetes) have these networking features integrated into them.&lt;br&gt;
Containers and Processes&lt;br&gt;
A container image normally includes in its metadata the default program or command that should be run when the container is started and the parameters to be passed to that program. Very similar to what would be if it was in the command line.&lt;br&gt;
When a container is started, it will run that command/program (although you can override it and make it run a different command/program).&lt;br&gt;
A container is running as long as the main process (command or program) is running.&lt;br&gt;
A container normally has a single process, but it's also possible to start subprocesses from the main process, and that way you will have multiple processes in the same container.&lt;br&gt;
But it's not possible to have a running container without at least one running process. If the main process stops, the container stops.&lt;br&gt;
Build a Docker Image for FastAPI&lt;br&gt;
Okay, let's build something now! 🚀&lt;br&gt;
I'll show you how to build a Docker image for FastAPI from scratch, based on the official Python image.&lt;br&gt;
This is what you would want to do in most cases, for example:&lt;br&gt;
• Using Kubernetes or similar tools&lt;br&gt;
• When running on a Raspberry Pi&lt;br&gt;
• Using a cloud service that would run a container image for you, etc.&lt;br&gt;
Package Requirements&lt;br&gt;
You would normally have the package requirements for your application in some file.&lt;br&gt;
It would depend mainly on the tool you use to install those requirements.&lt;br&gt;
The most common way to do it is to have a file requirements.txt with the package names and their versions, one per line.&lt;br&gt;
You would of course use the same ideas you read in About FastAPI versions to set the ranges of versions.&lt;br&gt;
Docker and other tools build these container images incrementally, adding one layer on top of the other, starting from the top of the Dockerfile and adding any files created by each of the instructions of the Dockerfile.&lt;br&gt;
Docker and similar tools also use an internal cache when building the image, if a file hasn't changed since the last time building the container image, then it will re-use the same layer created the last time, instead of copying the file again and creating a new layer from scratch.&lt;br&gt;
Just avoiding the copy of files doesn't necessarily improve things too much, but because it used the cache for that step, it can use the cache for the next step. For example, it could use the cache for the instruction that installs dependencies with:&lt;br&gt;
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt&lt;br&gt;
Deployment Concepts&lt;br&gt;
Let's talk again about some of the same Deployment Concepts in terms of containers.&lt;br&gt;
Containers are mainly a tool to simplify the process of building and deploying an application, but they don't enforce a particular approach to handle these deployment concepts, and there are several possible strategies.&lt;br&gt;
The good news is that with each different strategy there's a way to cover all of the deployment concepts. 🎉&lt;br&gt;
Let's review these deployment concepts in terms of containers:&lt;br&gt;
• HTTPS&lt;br&gt;
• Running on startup&lt;br&gt;
• Restarts&lt;br&gt;
• Replication (the number of processes running)&lt;br&gt;
• Memory&lt;br&gt;
• Previous steps before starting&lt;br&gt;
HTTPS&lt;br&gt;
If we focus just on the container image for a FastAPI application (and later the running container), HTTPS normally would be handled externally by another tool.&lt;br&gt;
It could be another container, for example with Traefik, handling HTTPS and automatic acquisition of certificates.&lt;br&gt;
Tip&lt;br&gt;
Traefik has integrations with Docker, Kubernetes, and others, so it's very easy to set up and configure HTTPS for your containers with it.&lt;br&gt;
Alternatively, HTTPS could be handled by a cloud provider as one of their services (while still running the application in a container).&lt;br&gt;
Running on Startup and Restarts&lt;br&gt;
There is normally another tool in charge of starting and running your container.&lt;br&gt;
It could be Docker directly, Docker Compose, Kubernetes, a cloud service, etc.&lt;br&gt;
In most (or all) cases, there's a simple option to enable running the container on startup and enabling restarts on failures. For example, in Docker, it's the command line option --restart.&lt;br&gt;
Without using containers, making applications run on startup and with restarts can be cumbersome and difficult. But when working with containers in most cases that functionality is included by default. ✨&lt;br&gt;
Replication - Number of Processes&lt;br&gt;
If you have a cluster of machines with Kubernetes, Docker Swarm Mode, Nomad, or another similar complex system to manage distributed containers on multiple machines, then you will probably want to handle replication at the cluster level instead of using a process manager (like Gunicorn with workers) in each container.&lt;br&gt;
One of those distributed container management systems like Kubernetes normally has some integrated way of handling replication of containers while still supporting load balancing for the incoming requests. All at the cluster level.&lt;br&gt;
In those cases, you would probably want to build a Docker image from scratch as explained above, installing your dependencies, and running a single Uvicorn process instead of running something like Gunicorn with Uvicorn workers.&lt;br&gt;
Load Balancer¶&lt;br&gt;
When using containers, you would normally have some component listening on the main port. It could possibly be another container that is also a TLS Termination Proxy to handle HTTPS or some similar tool.&lt;br&gt;
As this component would take the load of requests and distribute that among the workers in a (hopefully) balanced way, it is also commonly called a Load Balancer.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>api</category>
      <category>dsea</category>
    </item>
    <item>
      <title>Future Javascript: Javascript Pipeline Operators</title>
      <author>Johnny Simpson</author>
      <pubDate>Mon, 15 Nov 2021 17:38:04 +0000</pubDate>
      <link>https://dev.to/smpnjn/future-javascript-javascript-pipeline-operators-5jj</link>
      <guid>https://dev.to/smpnjn/future-javascript-javascript-pipeline-operators-5jj</guid>
      <description>&lt;p&gt;Pipeline operators are an upcoming feature to Javascript which gives us another way to pass values through a series of transformations. It gives more context to what developers were trying to achieve when they wrote their code, and allow us to do some cool things to boot. Here, we'll take a quick look at pipeline operators, how they work, and how you can use them today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-pipeline-operators-support"&gt;
  &lt;/a&gt;
  Javascript Pipeline Operators: Support
&lt;/h2&gt;

&lt;p&gt;Currently, no browser or server side ECMAScript implementation (like Node.JS) support pipeline operators. You can, however, get them to work using Babel 7.15. &lt;a href="https://babeljs.io/setup"&gt;You can learn more about installing Babel here&lt;/a&gt;, but suffice to say this will allow you to add pipeline operators into your code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-pipeline-operators-how-they-work"&gt;
  &lt;/a&gt;
  Javascript Pipeline Operators: How they work
&lt;/h2&gt;

&lt;p&gt;Pipeline operators are simply another way to manipulate values in Javascript. The pipeline operator is |&amp;gt;. Suppose we have 3 mathematical functions which add numbers to an input value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Adds 1 to a number&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Multiplies a number by 2&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Divides a number by 6&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;divideBySix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we wanted to apply all of these functions to a number we have, we might do something like this today:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;calculate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;divideBySix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns 3.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although this works, when using multiple functions this can become quite messy - and often can take many lines. As such, we can simplify the above with a pipeline operator like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;calculate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;divideBySix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns 3.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this simplifies processing of numbers and values so that we can clearly see what is happening. Let's break down what we have done:&lt;/p&gt;

&lt;p&gt;First, we use number, and pass it with a pipe operator to &lt;code&gt;divideBySix()&lt;/code&gt;. We use &lt;code&gt;%&lt;/code&gt; to represent the value from before the pipe operator, in this case, 6 which is in our number variable.&lt;br&gt;
Then we pass the number from &lt;code&gt;divideBySix()&lt;/code&gt; to &lt;code&gt;multiplyByTwo()&lt;/code&gt;. Again, we use % to represent the outcome of the previous operation, i.e. the value of the &lt;code&gt;divideBySix()&lt;/code&gt; function.&lt;br&gt;
Finally, we do it again and &lt;code&gt;addOne()&lt;/code&gt; to our value. The outcome is the same, so we still get 3 at the end.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#simplifying-object-mapping-with-pipeline-operators"&gt;
  &lt;/a&gt;
  Simplifying Object Mapping with Pipeline Operators
&lt;/h2&gt;

&lt;p&gt;Obviously the above example is a very simple application, but we can also use pipeline operators to do cooler things, like map arrays in a more coherent fashion. For instance, the below takes an object of URL queries, and merges them into a text string which can be added to the end of a URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;URLParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10245&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;linkId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eojff-efekv-ef0kw&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john-smith&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;featured&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;getURLQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;URLParams&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;URLParams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`?&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Returns ?x=10245&amp;amp;linkId=eojff-efekv-ef0kw&amp;amp;author=john-smith&amp;amp;featured=false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getURLQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-on-javascript-pipeline-operators"&gt;
  &lt;/a&gt;
  Conclusion on Javascript Pipeline Operators
&lt;/h2&gt;

&lt;p&gt;Since pipe operators are not widely supported, you can only use this feature with Babel installed. With that said, pipeline operators add a lot of context to your code, and simplify operations so you can expand upon them later. As such, it may be worth giving Babel a try to get this into your code base. &lt;a href="https://github.com/tc39/proposal-pipeline-operator"&gt;If you want to read the full pipeline operator specification, click here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
