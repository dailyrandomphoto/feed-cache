<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What sells the most on Amazon?</title>
      <author>Jyoti</author>
      <pubDate>Fri, 22 Oct 2021 11:55:15 +0000</pubDate>
      <link>https://dev.to/jyoti_/what-sells-the-most-on-amazon-gl5</link>
      <guid>https://dev.to/jyoti_/what-sells-the-most-on-amazon-gl5</guid>
      <description>&lt;p&gt;&lt;a href="https://www.amazon.com/"&gt;Amazon&lt;/a&gt; is the most popular marketplace around the world with around 12 million live products. Moreover, it occupies over 49% of the eCommerce market in the US alone, beating eBay and Walmart. And, with the advent of technology and eCommerce growth, product categories are also increasing.&lt;br&gt;
So, if you want to be successful in this marketplace, you must know which products sell the most on Amazon.&lt;/p&gt;

&lt;p&gt;Here is a complete list of all items that are trending on the marketplace:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-selling-items-on-amazon"&gt;
  &lt;/a&gt;
  Top Selling Items on Amazon
&lt;/h2&gt;

&lt;p&gt;Here are the top five trending items on Amazon that you shouldn’t miss this 2021:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-games-and-accessories"&gt;
  &lt;/a&gt;
  Video Games and Accessories
&lt;/h3&gt;

&lt;p&gt;The video game industry is one of the fastest-growing industries around the world. And, it is likely to reach the worth of $200 billion by 2023. Another reason for the fast growth of this industry is the presence of 2.7 million gamers worldwide.&lt;br&gt;
Under this category, the following sell the most on Amazon:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Consoles and Controllers&lt;/li&gt;
&lt;li&gt;Gaming Headgear&lt;/li&gt;
&lt;li&gt;Gift Cards (Xbox and PS)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#books"&gt;
  &lt;/a&gt;
  Books
&lt;/h3&gt;

&lt;p&gt;Amazon controls over 50% of the entire book sales in the US and around 83% of the sales of eBooks. According to another impressive stat, over 675 million printed books were sold by this marketplace last year.&lt;br&gt;
Some of the books that recorded higher sales on Amazon include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Power Of Subconscious Mind by Joseph Murphy&lt;/li&gt;
&lt;li&gt;Think and Grow Rich by Napoleon Hill&lt;/li&gt;
&lt;li&gt;The Alchemist by Paulo Coelho&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://cedcommerce.com/magento-2-extensions/amazon-magento-2-multichannel-integration?utm_source=dev.to-magento&amp;amp;utm_medium=jyoti-topitemsamazon"&gt;&lt;em&gt;API connector&lt;/em&gt;&lt;/a&gt; makes selling easy and more efficient on the Amazon marketplace.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#electronics-and-accessories"&gt;
  &lt;/a&gt;
  Electronics and Accessories
&lt;/h3&gt;

&lt;p&gt;Electronics and accessories are evergreen products on this marketplace. And, any seller selling this product will never feel empty-handed as these products are sold every season.&lt;br&gt;
The products that record the highest sales in this category are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Firestick&lt;/li&gt;
&lt;li&gt;Amazon Echo&lt;/li&gt;
&lt;li&gt;Smart Indoor Home Camera&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#health-beauty-and-personal-care"&gt;
  &lt;/a&gt;
  Health, Beauty, and Personal care
&lt;/h3&gt;

&lt;p&gt;This is another booming industry and product category that has recorded the highest sales on Amazon. And, this industry is expected to rise at the rate of 16.4%.&lt;br&gt;
The top-selling products of this category include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Makeup wipes &amp;amp; cleansing towelette&lt;/li&gt;
&lt;li&gt;Hair Trimmers &amp;amp; Clippers&lt;/li&gt;
&lt;li&gt;Yoga Mat&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cell-phones-and-accessories"&gt;
  &lt;/a&gt;
  Cell Phones and Accessories
&lt;/h3&gt;

&lt;p&gt;With technical advancements, mobile phones are also evolving every year. And with this, the demands and craze for these devices are also increasing. So, the sellers selling this product are likely to gain profit on Amazon.&lt;br&gt;
Here are the trending products of this industry:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iPhone and accessories&lt;/li&gt;
&lt;li&gt;Wireless Earphones&lt;/li&gt;
&lt;li&gt;USB Wall Charger&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Selling on Amazon can help you take your online business to the next level and boost your product sales. But with the selection of the right marketplace, it is also important that you sell the right products.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This short blog carries the top five trending product categories on Amazon. To find more details, refer to the article &lt;a href="https://cedcommerce.com/blog/best-selling-items-on-amazon-2021/?utm_source=dev.to-magento&amp;amp;utm_medium=jyoti-topitemsamazon"&gt;&lt;strong&gt;‘Top trending items on Amazon in 2021’&lt;/strong&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>sellonamazon</category>
      <category>amazonseller</category>
      <category>beginners</category>
      <category>sellers</category>
    </item>
    <item>
      <title>Answer: How to write Python Array into Excel Spread sheet</title>
      <author>paul-coder-22</author>
      <pubDate>Fri, 22 Oct 2021 11:47:48 +0000</pubDate>
      <link>https://dev.to/paulcoder22/answer-how-to-write-python-array-into-excel-spread-sheet-1n77</link>
      <guid>https://dev.to/paulcoder22/answer-how-to-write-python-array-into-excel-spread-sheet-1n77</guid>
      <description>&lt;div class="ltag__stackexchange--container"&gt;
  &lt;div class="ltag__stackexchange--title-container"&gt;
    
      &lt;div class="ltag__stackexchange--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Gn-iPj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackoverflow-logo-b42691ae545e4810b105ee957979a853a696085e67e43ee14c5699cf3e890fb4.svg" alt=""&gt;
            &lt;a href="https://stackoverflow.com/questions/31909722/how-to-write-python-array-into-excel-spread-sheet/31918108#31918108" rel="noopener noreferrer"&gt;
              &lt;span class="title-flare"&gt;answer&lt;/span&gt; re: How to write Python Array into Excel Spread sheet
            &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__stackexchange--post-metadata"&gt;
          &lt;span&gt;Aug 10 '15&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;a class="ltag__stackexchange--score-container" href="https://stackoverflow.com/questions/31909722/how-to-write-python-array-into-excel-spread-sheet/31918108#31918108" rel="noopener noreferrer"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9mJpuJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-up-eff2e2849e67d156181d258e38802c0b57fa011f74164a7f97675ca3b6ab756b.svg" alt=""&gt;
        &lt;div class="ltag__stackexchange--score-number"&gt;
          11
        &lt;/div&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wif5Zq3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-down-4349fac0dd932d284fab7e4dd9846f19a3710558efde0d2dfd05897f3eeb9aba.svg" alt=""&gt;
      &lt;/a&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--body"&gt;
    
&lt;p&gt;Here is one way to do it using the &lt;a href="https://xlsxwriter.readthedocs.org/" rel="noreferrer"&gt;XlsxWriter&lt;/a&gt; module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import xlsxwriter

workbook = xlsxwriter.Workbook('arrays.xlsx')
worksheet = workbook.add_worksheet()

array = [['a1', 'a2', 'a3'],
         ['a4', 'a5', 'a6'],
         ['a7', 'a8', 'a9'],
         ['a10', 'a11', 'a12', 'a13', 'a14']]

row = 0

for col, data in enumerate(array):
    worksheet.write_column(row, col, data)

workbook.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.stack.imgur.com/oIvr3.png" rel="noreferrer"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MXOmSnm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/oIvr3.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--btn--container"&gt;
    
      &lt;a href="https://stackoverflow.com/questions/31909722/how-to-write-python-array-into-excel-spread-sheet/31918108#31918108" rel="noopener noreferrer"&gt;Open Full Answer&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;


</description>
    </item>
    <item>
      <title>Day 14 of 100 Days of Code &amp; Scrum: Dealing with Anxiety and Depression</title>
      <author>Rammina</author>
      <pubDate>Fri, 22 Oct 2021 11:43:47 +0000</pubDate>
      <link>https://dev.to/rammina/day-14-of-100-days-of-code-scrum-dealing-with-anxiety-and-depression-5og</link>
      <guid>https://dev.to/rammina/day-14-of-100-days-of-code-scrum-dealing-with-anxiety-and-depression-5og</guid>
      <description>&lt;p&gt;&lt;small&gt;&lt;cite&gt;Image by &lt;a href="https://pixabay.com/users/ryanmcguire-123690/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=413690"&gt;Ryan McGuire&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=413690"&gt;Pixabay&lt;/a&gt;&lt;/cite&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Hello there, everyone!&lt;/p&gt;

&lt;p&gt;Today, I took a break from coding and learning Scrum. I simply did 2 hours of learning for the challenge. After all, I can't always be working nonstop and I also wanted to spend time with my family. I do care about my work-life balance and I don't like neglecting my loved ones. If I was asked whether I'd prioritize my profession or my loved ones, I would always go for the latter first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#offtopic-vent"&gt;
  &lt;/a&gt;
  Off-topic Vent
&lt;/h2&gt;

&lt;p&gt;Actually, I had to provide emotional comfort for my wife and listen to her. She is suffering from debilitating anxiety and depression, but I still love her and want to be with her. Of course, I empathize with her because I deal with similar problems myself. I'm glad we managed to resolve this for today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1HXZ6FnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgt66evur0x3sijmuk1y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1HXZ6FnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgt66evur0x3sijmuk1y.png" alt="Hold Hands"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;cite&gt;Photo by &lt;a href="https://unsplash.com/@priscilladupreez?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Priscilla Du Preez&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/emotional-support?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/cite&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Anyway, moving on to the meat of the challenge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I finished the draft of the &lt;code&gt;Product Backlog&lt;/code&gt; and &lt;code&gt;Sprint Backlog&lt;/code&gt; section and did some practice questions for Scrum.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here are the things I've learned and done today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;did practice quiz questions about Scrum.&lt;/li&gt;
&lt;li&gt;took a break from writing the guide.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#graphql"&gt;
  &lt;/a&gt;
  GraphQL
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I learned about Build-time Schema Validation &amp;amp; Optimizations in GraphQL.&lt;/li&gt;
&lt;li&gt;GraphQL apparently lets you have UI code and data requirements side-by-side.&lt;/li&gt;
&lt;li&gt;GraphQL server lets you send batched requests and batched resolvers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you don't give up even when times are challenging. &lt;br&gt;
Thank you for reading!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m-2f1-je--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92920wqfguu0hib2o6lz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m-2f1-je--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92920wqfguu0hib2o6lz.jpg" alt="Starry Night Sky"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;cite&gt;Image by &lt;a href="https://pixabay.com/photos/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=984050"&gt;Free-Photos&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=984050"&gt;Pixabay&lt;/a&gt;&lt;/cite&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.howtographql.com/"&gt;The Fullstack Tutorial for GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/chingu/a-short-introduction-to-the-scrum-methodology-7a23431b9f17"&gt;A Short Introduction to the Scrum Framework by Jim Medlock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Form Validation In ReactJS by building A Reusable Custom hook⚓</title>
      <author>CodeBucks</author>
      <pubDate>Fri, 22 Oct 2021 11:37:32 +0000</pubDate>
      <link>https://dev.to/codebucks/form-validation-in-reactjs-by-building-reusable-custom-hook-1bg7</link>
      <guid>https://dev.to/codebucks/form-validation-in-reactjs-by-building-reusable-custom-hook-1bg7</guid>
      <description>&lt;p&gt;Hi there👋,&lt;/p&gt;

&lt;p&gt;Form📝 handling is an essential part of any website. Since Forms takes the important information from the user. We must create robust form component which can handle inputs and it's validation🚦 easily.&lt;/p&gt;

&lt;p&gt;Here, we're going to create a simple React Hook⚓ to handle form as well as it's validation.&lt;/p&gt;

&lt;p&gt;The advantage of this hook is,&lt;br&gt;
⏭ It is Reusable, so that you can use it anywhere in your website or for other projects.&lt;br&gt;
⏭ You can handle validation easily, You just have to put conditions for input fields you want to validate.&lt;br&gt;
⏭ This hook makes error handling very easy, also you can customize error messages as well.&lt;br&gt;
⏭ Very easy to implement and build&lt;/p&gt;

&lt;p&gt;If you prefer to watch video then here is the video tutorial👇&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_ePL_Hu_cW4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-start-coding"&gt;
  &lt;/a&gt;
  Let's start coding
&lt;/h3&gt;

&lt;p&gt;First of all makes sure you have created you react app using below command👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app react-form-component
cd react-form-component
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now start your react app using👇&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;1️⃣ Open your project folder in your code editor.&lt;/p&gt;

&lt;p&gt;2️⃣ Clear the unnecessary code from the App.js file.&lt;/p&gt;

&lt;p&gt;3️⃣ Create form with 3 inputs and 1 submit button like below👇&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;4️⃣ Add some css in the App.css file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.App {
  text-align: center;
  margin-top: 20vh;
}

form{
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

input{
  margin: 0.5rem 0;
  padding: 1rem;
  outline: none;
}

.submit{
  border: 2px solid #000 !important;
  cursor: pointer;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;5️⃣ Create &lt;strong&gt;Hooks&lt;/strong&gt; folder in the Src. In this folder create one file called &lt;strong&gt;useForm.js&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To create any custom hook, you can keep different file name but name of the hook should always start from &lt;strong&gt;use&lt;/strong&gt; keyword.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Write basic snippet in this file like below,&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const useForm = () =&amp;gt; {

return();

}

export default useForm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;6️⃣ In this hook first we will need two states,&lt;/p&gt;

&lt;p&gt;values =&amp;gt;  A state to store form values, Initially an empty object&lt;br&gt;
errors =&amp;gt; A state to store errors if any, Initially an empty object&lt;/p&gt;

&lt;p&gt;So let's create these states,&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    //Form values
    const [values, setValues] = useState({});
    //Errors
    const [errors, setErrors] = useState({});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;7️⃣ Let's create a method to handle form values and set values state.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  //A method to handle form inputs
    const handleChange = (event) =&amp;gt; {
        //To stop default events    
        event.persist();

        let name = event.target.name;
        let val = event.target.value;

        validate(event,name,val);
        //Let's set these values in state

        setValues({
            ...values,   //spread operator to store old values
            [name]:val,
        })

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This method takes event as an argument and then it will set the values state as [key]:value pair in values object.&lt;/p&gt;

&lt;p&gt;Now to use this methods and state in other components we need to return it.&lt;/p&gt;

&lt;p&gt;Now your code will look like this👇&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;8️⃣ Let's call and use this hook in the App.js file.&lt;br&gt;
Open your App file and paste below code.&lt;/p&gt;

&lt;p&gt;Import useForm hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import useForm from './Hooks/useForm';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Deconstruct states and method from hook.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  //Custom hook call
  const {handleChange, values,errors } = useForm();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Make sure to attach handleChange method with onChange event of each inputs like below👇&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="email" name="email" placeholder="E-mail"  onChange={handleChange}   /&amp;gt;
&amp;lt;input type="password" name="password" placeholder="password" onChange={handleChange}   /&amp;gt;
&amp;lt;input type="text" name="username" placeholder="username"  onChange={handleChange}  /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can check values state by using &lt;code&gt;console.log(values)&lt;/code&gt; inside the App.js file.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#form-validation"&gt;
  &lt;/a&gt;
  Form Validation
&lt;/h3&gt;

&lt;p&gt;9️⃣ Let's create a validation function in useForm hook.&lt;/p&gt;

&lt;p&gt;Open &lt;em&gt;useForm.js&lt;/em&gt; file, and write below code,&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const validate = (event, name, value) =&amp;gt; {
    //A function to validate each input values

    switch (name) {
        case 'username':
            if (value.length &amp;lt;= 4) {
                // we will set the error state

                setErrors({
                    ...errors,
                    username: 'Username atleast have 5 letters'
                })
            } else {
// set the error state empty or remove the error for username input

//omit function removes/omits the value from given object and returns a new object
                let newObj = omit(errors, "username");
                setErrors(newObj);

            }
            break;

        default:
            break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's break down &lt;strong&gt;validate&lt;/strong&gt; function.&lt;/p&gt;

&lt;p&gt;=&amp;gt; This function takes 3 arguments,&lt;br&gt;
&lt;strong&gt;event&lt;/strong&gt; ➡ If you want target element for customization or styling&lt;br&gt;
&lt;strong&gt;name&lt;/strong&gt; ➡  name of the element&lt;br&gt;
&lt;strong&gt;values&lt;/strong&gt; ➡  values of the element&lt;/p&gt;

&lt;p&gt;=&amp;gt; Here we have used &lt;code&gt;Switch&lt;/code&gt; statement for different elements, so that you can validate different elements.&lt;br&gt;
Key of the switch function is the name of the element.&lt;/p&gt;

&lt;p&gt;=&amp;gt; Now for the first case we have username.&lt;br&gt;
So in this case we have a condition that,&lt;br&gt;
if length of the username value is &amp;lt;= 4 then we will set the error state else we will remove that error if exists.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here we have used omit function, since we can not manipulate state object directly. This omit function takes two arguments first is the &lt;strong&gt;object&lt;/strong&gt; and second is the &lt;strong&gt;name of the error&lt;/strong&gt; you want to remove, Now omit function remove that error if it exist then it returns the new object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now in the &lt;strong&gt;handleChange&lt;/strong&gt; method use validate function and make sure to pass all the arguments.&lt;/p&gt;

&lt;p&gt;Refer below full code👇&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Line no:35&lt;/strong&gt; Here for Email I'm using regular expression to validate the email value. If is is false then if condition becomes true and we will set the error accordingly.&lt;br&gt;
Same for the password.&lt;br&gt;
You can customize this regular function as per your requirements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line no:82&lt;/strong&gt; In this line we can call &lt;strong&gt;validate&lt;/strong&gt; function which will validate all the inputs.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#handle-submit"&gt;
  &lt;/a&gt;
  Handle Submit
&lt;/h3&gt;

&lt;p&gt;🔟 Let's create handle submit function.&lt;/p&gt;

&lt;p&gt;open App.js file and write below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  //Final submit function
  const formLogin = () =&amp;gt; {

    console.log("Callback function when form is submitted!");
    console.log("Form Values ", values);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now this is the function you can customize and will be called when form is submitted.&lt;/p&gt;

&lt;p&gt;Pass this function in the &lt;strong&gt;useForm&lt;/strong&gt; hook as a callback function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  //Custom hook call
  const {handleChange, values,errors,handleSubmit} = useForm(formLogin);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how you can pass your custom functions to the hooks.&lt;/p&gt;

&lt;p&gt;1️⃣1️⃣ Open &lt;strong&gt;useForm.js&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;deconstruct callback function from the props like below👇&lt;br&gt;
&lt;code&gt;const useForm = (callback) =&amp;gt; {&lt;br&gt;
...&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's create handleSubmit function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const handleSubmit = (event) =&amp;gt; {
        if(event) event.preventDefault();

        if(Object.keys(errors).length === 0 &amp;amp;&amp;amp; Object.keys(values).length !==0 ){
            callback();

        }else{
            alert("There is an Error!");
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this function,&lt;br&gt;
If length of errors is 0 and length of values is not zero (values are not empty) then it will call the callback function else it will alert the user.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: You should customize these conditions as per your requirements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don't forget to add &lt;strong&gt;handleSubmit&lt;/strong&gt; function in the return statement.&lt;/p&gt;

&lt;p&gt;1️⃣2️⃣ Open App.js file.&lt;/p&gt;

&lt;p&gt;Deconstruct &lt;strong&gt;handleSubmit&lt;/strong&gt; method from the useForm hook.&lt;br&gt;
&lt;code&gt;const {handleChange, values,errors,handleSubmit} = useForm(formLogin);&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
Connect this method with the form like below,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;
 &amp;lt;form onSubmit={handleSubmit}&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#display-the-errors"&gt;
  &lt;/a&gt;
  Display the Errors
&lt;/h3&gt;

&lt;p&gt;Now to display errors you can do something like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      &amp;lt;form onSubmit={handleSubmit}&amp;gt;
      &amp;lt;input type="email" name="email" placeholder="E-mail"  onChange={handleChange}   /&amp;gt;
      {
        errors.email &amp;amp;&amp;amp; &amp;lt;h3&amp;gt;{errors.email}&amp;lt;/h3&amp;gt;
      }
      &amp;lt;input minLength='8' type="password" name="password" placeholder="password"  onChange={handleChange}   /&amp;gt;
      {
        errors.password &amp;amp;&amp;amp; &amp;lt;h3&amp;gt;{errors.password}&amp;lt;/h3&amp;gt;

      }
      &amp;lt;input type="text" minLength='5' required name="username" placeholder="username"  onChange={handleChange}   /&amp;gt;
      {
        errors.username &amp;amp;&amp;amp; &amp;lt;h3&amp;gt;{errors.username}&amp;lt;/h3&amp;gt;

      }
      &amp;lt;input type="submit" value="Submit" className="submit"  /&amp;gt;
      &amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we will check if there is any error then if it is there then we will display it.&lt;/p&gt;

&lt;p&gt;You can watch the video for manipulating some style of the component based on it's values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End
&lt;/h3&gt;

&lt;p&gt;That's the end of this tutorial, &lt;br&gt;
I hope it helped you to learn something.&lt;/p&gt;

&lt;p&gt;Full Code for this tutorial 👉&lt;br&gt;
&lt;a href="https://github.com/codebucks27/React-Form-Component"&gt;https://github.com/codebucks27/React-Form-Component&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you have any question just ask in the comments😉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks For Reading😄
&lt;/h3&gt;

&lt;p&gt;Feel free to visit my youtube channel: &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codebucks"&gt;
  &lt;/a&gt;
  [&lt;a class="mentioned-user" href="https://dev.to/codebucks"&gt;@codebucks&lt;/a&gt;
]
&lt;/h4&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>PPSSPP GOLD APK v1.12.3 Download Latest Version 2021</title>
      <author>PPSSPP Gold APP</author>
      <pubDate>Fri, 22 Oct 2021 11:18:24 +0000</pubDate>
      <link>https://dev.to/ppssppgold/ppsspp-gold-apk-v1123-download-latest-version-2021-29dc</link>
      <guid>https://dev.to/ppssppgold/ppsspp-gold-apk-v1123-download-latest-version-2021-29dc</guid>
      <description>&lt;p&gt;Are you a PSP game lover but facing the problem of playing your favorite games on your smartphone? If yes, then PPSSPP Gold will work like a charm emulator in your device that doesn’t require high configuration to launch games. Now, get the ultimate fun of playing high-quality PSP games directly on your smartphone and tablets.&lt;/p&gt;

&lt;p&gt;Download - &lt;a href="http://ppssppgoldapk.app/"&gt;http://ppssppgoldapk.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Introduce about PPSSPP Gold&lt;br&gt;
PPSSPP Gold is one of the highly used PSP emulators for Android devices where you can emulate multiple games in high definition. The game offers lots of amazing features such as simple touch controls, clear sound quality, high definition graphics, easy to customize, and many other things.&lt;/p&gt;

&lt;p&gt;There are dozens of incredible PSP games available to explore but the problem is that they require portable devices to run. But the PPSSPP application launched as a perfect solution to this problem that comes with lots of premium features that can’t be found in any normal emulators.&lt;/p&gt;

&lt;p&gt;In this emulator, you can load multiple games at the same time, but it somehow depends on your device’s capability. One of the best things that I like most about this emulator is its fast processing speed and gameplay stability that eventually make the user satisfied. Although there are lots of gaming emulators such as Drastic DS Emulator, Pizza Boy GBA Pro, and more available for Android devices, no one can provide you with a smooth gameplay experience like PPSSPP.&lt;/p&gt;

&lt;p&gt;Support all android devices&lt;br&gt;
PPSSPP Emulator allows users to store their progress in an online cloud so that they can access it from any other compatible device using the same account. Feel free to load your favorite games directly on your smartphone with the help of this powerful gaming emulator.&lt;/p&gt;

&lt;p&gt;There is no need to create additional accounts if you want to use this emulator on multiple devices. It allows us to use the same credentials on various devices simultaneously that eventually let us continue from where we left off.&lt;/p&gt;

&lt;p&gt;Easy to use functions&lt;br&gt;
Playing PSP games on your smartphone can be a great experience, but it can be hard to get the perfect settings in emulators. The great thing is that PPSSPP lets you play all of these classic games in one place and you don’t need to download and install each game separately.&lt;/p&gt;

&lt;p&gt;This app will allow you to play all of your favorite Playstation portable games in high definition with added features such as improved graphics and sound effects for an enhanced gaming experience. It also includes support for low-end devices so that players can continue their adventures anytime, anywhere.&lt;/p&gt;

&lt;p&gt;Experience smooth gameplay&lt;br&gt;
If you are a PSP fan, then you must have spent hours playing your favorite games. But as time goes by, the performance of old devices is not up to the standard anymore, and it becomes difficult for users to play their favorite games with stability on their device.&lt;/p&gt;

&lt;p&gt;Here the PPSSPP emulator wins the spot for providing the ultimate gaming experience to the users right from their smartphones. With its smooth gameplay and high fps rate, you will be able to get back your childhood memories while enjoying new adventures at once.&lt;/p&gt;

&lt;p&gt;Mod APK Version of PPSSPP Gold&lt;br&gt;
PPSSPP Gold Apk is a paid (patched) version of the paid PPSSPP Gold – PSP Emulator application where you will get access to all the premium features of this paid application without spending a single penny. This means you can free download and use this awesome emulator without any purchase.&lt;/p&gt;

&lt;p&gt;Patched features&lt;br&gt;
Free Download – PPSSPP Gold is a paid application that you can install on your device after spending $2. However, you can download PPSSPP Gold Apk for free from this post and it will provide all similar features as in the official version.&lt;/p&gt;

&lt;p&gt;Download PPSSPP Gold Apk for Android&lt;br&gt;
PPSSPP is undoubtedly the best Android Emulator for playing PSP games on your device without any hassle. You will be happy to know that this emulator is bug-free, but you can still improve as it is kept open source.&lt;/p&gt;

&lt;p&gt;It can run almost any PSP game at full speed with sound, and it works great both in landscape and portrait modes to take the gameplay experience to the next level. With the PPSSPP emulator installed on your smartphone, you will be able to enjoy hours of gaming without feeling bored and getting tired.&lt;/p&gt;

&lt;p&gt;The patched version of the simulator shared in this post comes with the Gold version unlocked, and you can use it for a lifetime. Also, we regularly update modded applications with new features, and you can get notifications of updates by bookmarking PPSSPPGoldApk.app&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Why you need a portfolio website when working in tech - and how I built mine with Gridsome and Deploy Now</title>
      <author>Markus Hunsalz</author>
      <pubDate>Fri, 22 Oct 2021 11:04:19 +0000</pubDate>
      <link>https://dev.to/hunsalz/why-you-need-a-portfolio-website-when-working-in-tech-and-how-i-built-mine-with-gridsome-and-deploy-now-4a3</link>
      <guid>https://dev.to/hunsalz/why-you-need-a-portfolio-website-when-working-in-tech-and-how-i-built-mine-with-gridsome-and-deploy-now-4a3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#why-you-need-a-portfolio-website"&gt;
  &lt;/a&gt;
  Why you need a portfolio website
&lt;/h1&gt;

&lt;p&gt;Of course you can get a job without a personal website. No company will ask you to present one. But 1) having a personal portfolio website can never be a disadvantage and 2), presenting your skills, experience and portfolio as a dev is not only for “getting a job”. &lt;/p&gt;

&lt;p&gt;Reasons for a personal website:&lt;br&gt;
A portfolio website can visualize information better than a CV - you can use animations, hover effects and link to deeper content and projects.&lt;br&gt;
Be visible in the tech community and give others an opportunity to contact you. Expanding your network has many benefits, either be it sharing knowledge with others or coming across new job opportunities.&lt;br&gt;
Promote yourself as a freelancer and win clients. Even if you work full time for a company, you might consider freelancing one day. Having a list of leads for that will ease your start a lot. &lt;br&gt;
Creating a website with the tech you love is fun! View your website as a playground for cool new tech you discover. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learned-from-my-own-portfolio-website"&gt;
  &lt;/a&gt;
  Lessons learned from my own portfolio website
&lt;/h2&gt;

&lt;p&gt;Based on my 20 years of experience in tech, dozens of hiring decisions I have made and combined with my own personal career experiences, I would like to share these takeaways with you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-yourself"&gt;
  &lt;/a&gt;
  Be yourself
&lt;/h3&gt;

&lt;p&gt;Always be yourself and do not try to be someone else. Write an About me section where you describe who you are as a professional. Include your current job title because it helps to quickly let the reader grasp your level of professional experience. But also focus on aspects that define you as a person to make readers feel like they understand who you are. That will grab their attention right away. Try to be on point here and keep it brief you will have plenty of room to showcase what you are capable of on the next section of your portfolio website. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#showcase-your-best-work-and-skills"&gt;
  &lt;/a&gt;
  Showcase your best work and skills
&lt;/h3&gt;

&lt;p&gt;This is where you can really shine. Think about the most impactful projects you were involved with recently and use them as your main assets to prove your skills. Next to an overview description of the project scope and the used technologies, a real booster is to integrate social proof such as client feedback or testimonial statements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-your-code-available-in-a-public-repository"&gt;
  &lt;/a&gt;
  Make your code available in a public repository
&lt;/h2&gt;

&lt;p&gt;If the project allows it, make your code available in public repositories.This gives the reader an in-depth view on how you code. GitHub ist the way to go here from my perspective. It is one of the most popular and comprehensive platforms for publication and documentation of code as well as providing a remote version control repository&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#choose-a-modern-tech-stack-for-your-site"&gt;
  &lt;/a&gt;
  Choose a modern tech stack for your site
&lt;/h3&gt;

&lt;p&gt;The tech you use for your website should represent your skills and interests. Personally, I’m quite interested in static site generators and the developments around the Jamstack. As I’m quite experienced in Vue.js, I decided to go with the static site generator &lt;a href="https://gridsome.org/"&gt;Gridsome&lt;/a&gt;. Static site generators prerender your website after every Git Commit. This yields fast deliveries on request. No matter which tech stack you use, avoid by any means that your website is slow, buggy or not responsive. &lt;/p&gt;

&lt;p&gt;Working at &lt;a href="https://www.ionos.com/"&gt;IONOS&lt;/a&gt;, the largest hosting company in Europe, I’m in the comfortable position to host my personal site on one of my company’s products. I decided to host my website on &lt;a href="https://docs.ionos.space/"&gt;Deploy Now&lt;/a&gt;. Deploy Now allows instant deployments from GitHub and executes the build step of your static site generator automatically on Git Push. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-my-sample-to-get-started"&gt;
  &lt;/a&gt;
  Use my sample to get started
&lt;/h2&gt;

&lt;p&gt;If you are interested in static site generators as well and want to give Gridsome a try, you can have a live &lt;a href="https://sample.hunsalz.de/"&gt;look&lt;/a&gt; or directly &lt;a href="https://github.com/ionos-deploy-now/gridsome-starter-scroll"&gt;checkout&lt;/a&gt; for your own portfolio site. In addition to &lt;a href="https://gridsome.org/"&gt;Gridsome&lt;/a&gt;, it uses &lt;a href="https://windicss.org/"&gt;Windi CSS&lt;/a&gt; for the styling. With just a click on this button you can deploy your own instance via Deploy Now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ionos.space/setup?repo=https://github.com/ionos-deploy-now/gridsome-starter-scroll"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F0tsBETo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ionos.space/deploy-now-icons/deploy-to-ionos-btn.svg" alt="Deploy to IONOS"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>windicss</category>
      <category>gridsome</category>
      <category>ionos</category>
    </item>
    <item>
      <title>How to deploy a Node.js application to AWS Lambda using Serverless Framework</title>
      <author>Taavi Rehemägi</author>
      <pubDate>Fri, 22 Oct 2021 10:29:19 +0000</pubDate>
      <link>https://dev.to/dashbird/how-to-deploy-a-nodejs-application-to-aws-lambda-using-serverless-framework-2fbg</link>
      <guid>https://dev.to/dashbird/how-to-deploy-a-nodejs-application-to-aws-lambda-using-serverless-framework-2fbg</guid>
      <description>&lt;p&gt;Being a developer is awesome. Writing code, solving problems, and thinking of ingenious solutions for complicated algorithms is what we live for. But, the grass is not always so green on this side of the fence. Sooner or later, you need to get your hands dirty and deploy the app you worked so hard on. Deployments are not always easy. To be blunt, they can be challenging and time-consuming. That's what we'll solve in this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9_xuUzdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AUWjEaoVpjzL8pbYnzs5GKw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9_xuUzdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AUWjEaoVpjzL8pbYnzs5GKw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For copyable code snippets, &lt;/em&gt;&lt;a href="https://dashbird.io/blog/how-to-deploy-nodejs-application-aws-lambda/"&gt;&lt;em&gt;see the original article&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h1&gt;

&lt;p&gt;Today you'll learn how to deploy a Node.js application to &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt; with the help of &lt;a href="https://serverless.com/"&gt;the Serverless Framework&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The walkthrough will also cover a real-life scenario of deploying a production version of your application, with environment variables, &lt;a href="https://dashbird.io/serverless-observability/"&gt;proper monitoring&lt;/a&gt;, and, of course, &lt;a href="https://dashbird.io/aws-lambda-troubleshooting/"&gt;easy debugging&lt;/a&gt;. Oh, how I love seeing nice stack traces!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;This tutorial will need you to have a few simple things set up already. Don't worry, it won't be long and will cover just the basics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://aws.amazon.com/console/"&gt;AWS account&lt;/a&gt; --- AWS has 12 months of free tiers and plenty of lifetime free tiers, so don't worry about breaking the bank.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://nodejs.org/en/download/"&gt;Node.js and npm installed&lt;/a&gt; --- Here's a quick reference for making sure you have them installed.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://hackernoon.com/a-crash-course-on-serverless-with-node-js-632b37d58b44#422a"&gt;Serverless Framework installed&lt;/a&gt; --- Check this out for an excellent reference and follow steps 1--3.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dashbird.io/features"&gt;Dashbird account&lt;/a&gt; --- This will give us the required overview to see what's happening to our app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ready? Let's go!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For copyable code snippets, &lt;/em&gt;&lt;a href="https://dashbird.io/blog/how-to-deploy-nodejs-application-aws-lambda/"&gt;&lt;em&gt;see the original article&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-aws-lambda"&gt;
  &lt;/a&gt;
  What's AWS Lambda?
&lt;/h1&gt;

&lt;p&gt;AWS Lambda is a pay-as-you-go serverless compute service, which means what now? Well, you just deploy your source code to AWS, and they handle the rest. Amazing! No need to fiddle with servers, ssh connections, Linux, or Vim. But, want to know what's even better? It scales automatically and has no downtime. I'll let that sink in...&lt;/p&gt;

&lt;p&gt;The technical definition for AWS Lambda would be a Function as a Service. You deploy some code; it gets invoked, processes some input, and returns a value. Simple!&lt;/p&gt;

&lt;p&gt;Hold up a sec. We need to mention a crucial fact. All lambda functions are stateless, meaning they cannot store persistent data. And, if I just said Function as a Service, how do we deploy a whole Node.js application to AWS Lambda?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How Does It Work?
&lt;/h1&gt;

&lt;p&gt;When you think about it, it's not that complicated. A single lambda function is essentially just a tiny Node.js runtime environment. You can run whatever you want in there. That's what we'll do, package up a Node.js app and send it off to AWS Lambda. Sneaky.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-will-we-deploy"&gt;
  &lt;/a&gt;
  What Will We Deploy?
&lt;/h1&gt;

&lt;p&gt;The code we'll be deploying is just seven lines long to make this example as simple as possible. However, it could be as large as any Node.js application you have in production, and it would all work like a charm. Intriguing...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-do-we-deploy-it"&gt;
  &lt;/a&gt;
  How Do We Deploy It?
&lt;/h1&gt;

&lt;p&gt;In comes the Serverless Framework like a horse riding a white knight! Hold up; I may have that backward.&lt;/p&gt;

&lt;p&gt;Anyhow, this excellent framework enables us to both develop our apps locally, just like we're used to, but also deploy them with a straightforward command. Hmm... tell me more.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-get-coding"&gt;
  &lt;/a&gt;
  Let's Get Coding!
&lt;/h1&gt;

&lt;p&gt;First thing's first. Open up your terminal; we need to install some packages. Yay, installing stuff, love it!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-install-and-configure-the-serverless-framework"&gt;
  &lt;/a&gt;
  1. Install and Configure the Serverless Framework
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;$ npm install -g serverless&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Prefix the command with &lt;code&gt;sudo&lt;/code&gt; if you're running this command on Linux.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k7aCnOJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2Af07DB-LclnGa-PDprWnumg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k7aCnOJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2Af07DB-LclnGa-PDprWnumg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For copyable code snippets, &lt;/em&gt;&lt;a href="https://dashbird.io/blog/how-to-deploy-nodejs-application-aws-lambda/"&gt;&lt;em&gt;see the original article&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Make sure to add your IAM User's public and secret key instead of the placeholders I specified above. The user needs programmatic access and admin permissions. &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html#id_users_create_console"&gt;Here's the official guide in the AWS docs&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-create-the-boilerplate-code"&gt;
  &lt;/a&gt;
  2. Create the Boilerplate Code
&lt;/h1&gt;

&lt;p&gt;Let's create a new folder and give it a unique name. Jump over to your terminal and run the commands below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;$ mkdir serverless-nodejs-app &lt;/em&gt;&lt;em&gt;&amp;amp;&amp;amp;&lt;/em&gt;&lt;em&gt; cd serverless-nodejs-app&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Excellent, now what's left is to run the create command to generate some starter code for us. This is called a serverless service.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;$ sls create -t aws-nodejs -n serverless-nodejs-app&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Only one more step before opening a code editor.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-installing-dependencies"&gt;
  &lt;/a&gt;
  3. Installing Dependencies
&lt;/h1&gt;

&lt;p&gt;Like you can see in the code snippet above, we need to install a few modules first. Lucky for us, there are only two, and it's as simple as running one command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MXwC6yLn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AkCBDumtkDwf0FYTQarEUgA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MXwC6yLn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AkCBDumtkDwf0FYTQarEUgA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For copyable code snippets, &lt;/em&gt;&lt;a href="https://dashbird.io/blog/how-to-deploy-nodejs-application-aws-lambda/"&gt;&lt;em&gt;see the original article&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That's it! Let's open it up in a code editor and do some actual coding.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-coding-for-real"&gt;
  &lt;/a&gt;
  4. Coding For Real
&lt;/h1&gt;

&lt;p&gt;Once you open up the code editor, you'll see three files. Ignoring the &lt;code&gt;.gitignore file&lt;/code&gt;, let me explain what the &lt;code&gt;handler.js&lt;/code&gt; is first, then I'll move on to the &lt;code&gt;serverless.yml&lt;/code&gt;. The handler will hold all your app logic, all the code. In contrast, the &lt;code&gt;servereless.yml&lt;/code&gt; is the configuration file for the resources you'll be creating on AWS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D1pUQD6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/634/0%2AhJ_ArZ42uAVwD1Dz" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D1pUQD6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/634/0%2AhJ_ArZ42uAVwD1Dz" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go ahead and rename the &lt;code&gt;handler.js&lt;/code&gt; to &lt;code&gt;app.js&lt;/code&gt;, just to simplify us to figure out what goes where.&lt;/p&gt;

&lt;p&gt;Delete all the starter code and paste this code snippet into the &lt;code&gt;app.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xkQzhS5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AzOQyTjrobsn2uJpS7hKwdw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xkQzhS5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AzOQyTjrobsn2uJpS7hKwdw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For copyable code snippets, &lt;/em&gt;&lt;a href="https://dashbird.io/blog/how-to-deploy-nodejs-application-aws-lambda/"&gt;&lt;em&gt;see the original article&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Seven lines of code? It looks familiar, right? Just like you're used to. That's it. Believe it or not, there's nothing more to it. Let's move on to the &lt;code&gt;serverless.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once again, delete all the boilerplate code and paste this in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sna0hJvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2Axuvu5WQjWFdVu8fcw85ZzQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sna0hJvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2Axuvu5WQjWFdVu8fcw85ZzQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For copyable code snippets, &lt;/em&gt;&lt;a href="https://dashbird.io/blog/how-to-deploy-nodejs-application-aws-lambda/"&gt;&lt;em&gt;see the original article&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Done! All that's left is to deploy it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ready-to-deploy"&gt;
  &lt;/a&gt;
  Ready to Deploy!
&lt;/h1&gt;

&lt;p&gt;Switch back to the terminal window. By running one command, your app will be deployed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;$ sls deploy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Serverless Framework will now wrap everything up into a nice bundle, create a CloudFormation file from the &lt;em&gt;serverless.yml&lt;/em&gt; and shoot it off to AWS S3. Once the resources are created, and the code is deployed, you'll see an endpoint sent to you in the terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8GDhTlLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AYpslR8q6QeyoYngH" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8GDhTlLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AYpslR8q6QeyoYngH" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Opening up the provided URL in a browser, you'll see &lt;em&gt;"Hello World!"&lt;/em&gt; get sent back to you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deploying-to-production"&gt;
  &lt;/a&gt;
  Deploying to Production!
&lt;/h1&gt;

&lt;p&gt;This is great and all, but not ready for a production environment... yet. Worry not! You'll be surprised how simple it is to make it production-ready.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-add-a%C2%A0-raw-secretsjson-endraw-%C2%A0file-for-environment-variables"&gt;
  &lt;/a&gt;
  1. Add a &lt;code&gt;secrets.json&lt;/code&gt; file for environment variables
&lt;/h1&gt;

&lt;p&gt;For now, let's just add the &lt;code&gt;NODE_ENV&lt;/code&gt; in the &lt;code&gt;secrets.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JJlgecqB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AUcdUBWK5LkE3Wv-G9Gpnlg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JJlgecqB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AUcdUBWK5LkE3Wv-G9Gpnlg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-add-a-reference-for-the%C2%A0-raw-secretsjson-endraw-%C2%A0in-the%C2%A0-raw-serverlessyml-endraw-"&gt;
  &lt;/a&gt;
  2. Add a reference for the &lt;code&gt;secrets.json&lt;/code&gt; in the &lt;code&gt;serverless.yml&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;As simple as adding the secrets file, it's even easier to reference the file in the &lt;code&gt;serverless.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dGrZQn7R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AJS-9PZEUDt4b42RXJQ4FzA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dGrZQn7R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AJS-9PZEUDt4b42RXJQ4FzA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For copyable code snippets, &lt;/em&gt;&lt;a href="https://dashbird.io/blog/how-to-deploy-nodejs-application-aws-lambda/"&gt;&lt;em&gt;see the original article&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Amazing, that's it! Delete the &lt;code&gt;node_modules&lt;/code&gt; and &lt;code&gt;.serverless&lt;/code&gt; folders from the service and run npm install again, but this time with the &lt;code&gt;--production&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;$ npm install --- production&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Great! All that's left is to re-deploy the service, and you're set.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;$ sls deploy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And this is what we end up with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZxBoSDD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/720/0%2A3aErKjyC-Wyoj-UJ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZxBoSDD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/720/0%2A3aErKjyC-Wyoj-UJ" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I guess we're done? Not really.&lt;/p&gt;

&lt;p&gt;Having an app running in production just because you installed npm modules with &lt;code&gt;--production&lt;/code&gt; doesn't cut it. To be able to sleep well at night, I need a bit more. Here's where proper system insight and monitoring tools come to play.&lt;/p&gt;

&lt;p&gt;Let me show you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-gain-insight-into-your-system"&gt;
  &lt;/a&gt;
  How to Gain Insight Into Your System?
&lt;/h1&gt;

&lt;p&gt;The #1 problem with all serverless applications is their distributed nature. Plain and simple, it's impossibly hard to have an overview of all the things going on. Not to mention how hard it is to debug when something goes wrong.&lt;/p&gt;

&lt;p&gt;To calm my fears, I use &lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt;. It's a simple monitoring tool that doesn't require me to change any code and has no overhead. So, no performance hits either. Nice!&lt;/p&gt;

&lt;p&gt;Thankfully, they have sensible documentation, which makes the onboarding process a breeze. Go ahead and follow their &lt;a href="https://dashbird.io/docs/quickstart/setting-up-dashbird/"&gt;Quick Start guide&lt;/a&gt;. Don't forget to come back here, though.&lt;/p&gt;

&lt;p&gt;Once you're done, all the requests will start piling in one by one, and you should see something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDvjQAm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AVW0FxSJ60thYmGoN" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDvjQAm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AVW0FxSJ60thYmGoN" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The function details will give you an overview of how the function behaved over time, so multiple invocations are aggregated here.&lt;/p&gt;

&lt;p&gt;If you click on a recent invocation at the bottom left, you will drill down to the invocation level of details that comes with tracing and logging data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rRUYfA7f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AW2XBuVbWR3WbNpNL" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rRUYfA7f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AW2XBuVbWR3WbNpNL" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h1&gt;

&lt;p&gt;This was fun!&lt;/p&gt;

&lt;p&gt;Lambda is awesome! When combined with HTTP event triggers such as &lt;a href="https://dashbird.io/knowledge-base/api-gateway/what-is-aws-api-gateway/"&gt;API Gateway&lt;/a&gt;, development tools like the Serverless Framework, and observability tools such as &lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt;, things just become so easy.&lt;/p&gt;

&lt;p&gt;This simple API example we coded above is just a proof of concept. But you can see the point. It gives you a starting point from where you can create awesome production apps!&lt;/p&gt;

&lt;p&gt;If you missed any of the steps above, &lt;a href="https://github.com/adnanrahic/express-sls-app"&gt;here's the repository with all the code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Further reading:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/nft-aws-lambda-serverless-blockchain/"&gt;How to check NFT supply with AWS Lambda&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/how-to-test-serverless-applications/"&gt;How to test serverless applications&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/top-aws-lambda-performance-monitoring-tools/"&gt;Top 6 AWS Lambda monitoring tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/can-we-solve-serverless-cold-starts/"&gt;How to solve serverless cold starts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/event-library/aws-lambda/aws-lambda-node-js-errors-and-exceptions/"&gt;AWS Lambda Node.js errors and exceptions&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>node</category>
      <category>tutorial</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Send Welcome Emails using Appwrite's Swift Cloud Functions</title>
      <author>Christy Jacob</author>
      <pubDate>Fri, 22 Oct 2021 09:18:55 +0000</pubDate>
      <link>https://dev.to/appwrite/create-and-run-welcome-email-appwrite-cloud-function-with-swift-2m1h</link>
      <guid>https://dev.to/appwrite/create-and-run-welcome-email-appwrite-cloud-function-with-swift-2m1h</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6G3eisz1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeofzxl2bcjq9t6dfe3g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6G3eisz1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeofzxl2bcjq9t6dfe3g.png" alt="Cover Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For all the Swift developers out there, we have good news! We just announced our Swift SDK to work with server side APIs of Appwrite. You can learn more about our Swift SDK in our &lt;a href="https://dev.toswift-SDK-announcement-post"&gt;Swift SDK announcement post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this tutorial however, we are going to write, deploy and run our very own &lt;strong&gt;Welcome Email Cloud Function&lt;/strong&gt; with Swift. Let's get started. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-appwrite-cloud-functions"&gt;
  &lt;/a&gt;
  🤔 What are Appwrite Cloud Functions?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://appwrite.io/docs/functions"&gt;Appwrite Cloud Functions&lt;/a&gt; are a way for you to extend and customize your &lt;a href="https://appwrite.io"&gt;Appwrite BaaS&lt;/a&gt; functionality by allowing you to execute custom code. Appwrite can execute your function either explicitly or in response to any Appwrite system event like account creation, user login, database updates and much more. You can also schedule your functions to run according to a CRON schedule or trigger them manually by hitting an HTTP endpoint using the Appwrite client or server APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  🗒️ Prerequisites
&lt;/h2&gt;

&lt;p&gt;In order to continue with this tutorial, you'll need to have the latest version of Appwrite installed and an Appwrite project setup to test this function. If you have not already installed Appwrite, please do so. Installing Appwrite is really simple. Based on your operating system, run one of the following commands and installation should be complete in less than 2 minutes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unix"&gt;
  &lt;/a&gt;
  Unix
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--volume&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--volume&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;/appwrite:/usr/src/code/appwrite:rw &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"install"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    appwrite/appwrite:0.11.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#windows-cmd"&gt;
  &lt;/a&gt;
  Windows CMD
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--volume&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;//var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--volume&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"%cd%"&lt;/span&gt;&lt;span class="n"&gt;/appwrite:/usr/src/code/appwrite:rw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"install"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;appwrite/appwrite:0.11.0&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#windows-powershell"&gt;
  &lt;/a&gt;
  Windows PowerShell
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--volume&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;/var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--volume&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;${pwd}&lt;/span&gt;&lt;span class="n"&gt;/appwrite:/usr/src/code/appwrite:rw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"install"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;appwrite/appwrite:0.11.0&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also find detailed installation instructions in the official Appwrite &lt;a href="https://appwrite.io/docs/installation"&gt;installation docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another requirement to follow along is that you have a &lt;a href="https://www.mailgun.com/"&gt;Mailgun account&lt;/a&gt; with a valid &lt;strong&gt;Mailgun Domain&lt;/strong&gt; and &lt;strong&gt;API Key&lt;/strong&gt;. With that aside, we're ready to get started. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-activate-swift-functions-runtime"&gt;
  &lt;/a&gt;
  🔓️ Activate Swift Functions Runtime
&lt;/h2&gt;

&lt;p&gt;The Swift runtime needs to be &lt;code&gt;enabled&lt;/code&gt; for you to be able to use it. This can be done easily using environment variables. The environment variables can be found in the &lt;code&gt;.env&lt;/code&gt; file located in the Appwrite installation folder. If it's not present already, you'll need to add the following key-value pair to the &lt;code&gt;.env&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;_APP_FUNCTIONS_RUNTIMES=swift-5.5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, restart your stack using &lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initialize-your-swift-function"&gt;
  &lt;/a&gt;
  🔑 Initialize Your Swift Function
&lt;/h2&gt;

&lt;p&gt;First, create a project folder where you will create all the necessary files for your function. We will call this folder &lt;code&gt;welcome-email&lt;/code&gt;. Once inside this folder, you can create a new Swift project with the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;:/app &lt;span class="nt"&gt;-w&lt;/span&gt; /app swift:5.5 swift package init WelcomeEmail
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will initialize a new Swift package project. It should create bunch of files, important ones to notice are&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── Sources/WelcomeEmail/main.swift
└── Package.swift
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-appwrite-swift-sdk-dependency"&gt;
  &lt;/a&gt;
  ➕ Add Appwrite Swift SDK dependency
&lt;/h2&gt;

&lt;p&gt;Open the &lt;code&gt;welcome-email&lt;/code&gt; folder in your favorite IDE and add the following code to your &lt;code&gt;Package.swift&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;PackageDescription&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;package&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"WelcomeEmail"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"https://github.com/swift-server/async-http-client.git"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nv"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"WelcomeEmail"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"AsyncHTTPClient"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;package&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"async-http-client"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we add the &lt;code&gt;async-http-client&lt;/code&gt; SDK for swift under dependencies as well as under the executable's target dependencies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#write-your-function"&gt;
  &lt;/a&gt;
  ✍️  Write your Function
&lt;/h2&gt;

&lt;p&gt;Open &lt;code&gt;Sources/WelcomeEmail/main.swift&lt;/code&gt; and fill in the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;AsyncHTTPClient&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Foundation&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;sendSimpleMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throws&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Welcome &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;!"&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;targetURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://api.mailgun.net/v3/&lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="kt"&gt;MAILGUN_DOMAIN&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;/messages"&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s"&gt;"from"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Excited User &amp;lt;hello@appwrite.io&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"to"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"subject"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;HTTPClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="kt"&gt;HTTPClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;targetURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;RAW&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"api:&lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="kt"&gt;MAILGUN_API_KEY&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;using&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Encoding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!.&lt;/span&gt;&lt;span class="nf"&gt;base64EncodedString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"multipart/form-data"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Basic &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nf"&gt;buildMultipart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;httpClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;whenComplete&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error: &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Message sent!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error: &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;leave&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;MAILGUN_DOMAIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;ProcessInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"MAILGUN_DOMAIN"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;MAILGUN_API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;ProcessInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"MAILGUN_API_KEY"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;APPWRITE_FUNCTION_EVENT_DATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;ProcessInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"APPWRITE_FUNCTION_EVENT_DATA"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="s"&gt;"{}"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;httpClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;HTTPClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;eventLoopGroupProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createNew&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;DispatchGroup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;APPWRITE_FUNCTION_EVENT_DATA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="kt"&gt;JSONSerialization&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jsonObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;"Unable to parse APPWRITE_FUNCTION_EVENT_DATA"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;"Unable to parse name"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;"Unable to parse email"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="nf"&gt;sendSimpleMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The environment variables that we are accessing here are either already available or are later set in the Appwrite Function's settings.&lt;/p&gt;

&lt;p&gt;Next create a new file under &lt;code&gt;Sources/WelcomeEmail/File.swift&lt;/code&gt; that will house one of our helper classes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;NIO&lt;/span&gt;

&lt;span class="kd"&gt;open&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;File&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ByteBuffer&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ByteBuffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, we need to create one more file &lt;code&gt;Sources/WelcomeEmail/Utils.swift&lt;/code&gt; for some of our utility functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;AsyncHTTPClient&lt;/span&gt;
&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;NIO&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;DASHDASH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"--"&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;CRLF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;boundaryChars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"abcdefghijklmnopqrstuvwxyz1234567890"&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;randomBoundary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boundaryChars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;randomElement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;buildMultipart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;inout&lt;/span&gt; &lt;span class="kt"&gt;HTTPClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;?]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[:]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;addPart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;DASHDASH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Disposition: form-data; name=&lt;/span&gt;&lt;span class="se"&gt;\"\(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="se"&gt;)\"&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;File&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"; filename=&lt;/span&gt;&lt;span class="se"&gt;\"\(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="se"&gt;)\"&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Length: &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readableBytes&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;describing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Length: &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;boundary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;randomBoundary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;bodyBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;ByteBuffer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nf"&gt;addPart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;listValue&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;addPart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;[]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;listValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nf"&gt;addPart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;DASHDASH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;DASHDASH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;writeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"content-type"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Content-Length"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readableBytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"multipart/form-data;boundary=&lt;/span&gt;&lt;span class="se"&gt;\"\(&lt;/span&gt;&lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="se"&gt;)\"&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;byteBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bodyBuffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#build-the-function-binary"&gt;
  &lt;/a&gt;
  ⚙️ Build the Function Binary
&lt;/h2&gt;

&lt;p&gt;In order to deploy our function, we need to first build the project. Our runtime is based on the &lt;code&gt;slim&lt;/code&gt; version of official &lt;strong&gt;Swift&lt;/strong&gt; docker image, so we'll use the official &lt;strong&gt;Swift&lt;/strong&gt; docker image to build our project.&lt;/p&gt;

&lt;p&gt;From the &lt;code&gt;welcome-email&lt;/code&gt; directory, run the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;:/app &lt;span class="nt"&gt;-w&lt;/span&gt; /app swift:5.5 swift build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should build the project. Ensure that your folder structure looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── .build/x86_64-unknown-linux-gnu/debug/WelcomeEmail
├── Package.swift
├── README.md
└── Sources
    └── WelcomeEmail
        ├── File.swift
        ├── main.swift
        └── Utils.swift
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;There could be other files and folders as well, but you can ignore those.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#create-a-function-in-your-appwrite-console"&gt;
  &lt;/a&gt;
  ☁️ Create a Function in Your Appwrite Console
&lt;/h2&gt;

&lt;p&gt;Login to your Appwrite console and open the project of your choosing. On the sidebar, tap on the &lt;code&gt;Functions&lt;/code&gt; menu. In the following screen, tap the &lt;code&gt;Add Function&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Gbja_zz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kp55xzrfjp6ztp0a57e4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Gbja_zz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kp55xzrfjp6ztp0a57e4.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll call our Cloud function &lt;code&gt;WelcomeEmail&lt;/code&gt;. and select &lt;code&gt;swift-5.5&lt;/code&gt; for the environment. Then tap &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-tag"&gt;
  &lt;/a&gt;
  🧑‍💻 Deploy Tag
&lt;/h2&gt;

&lt;p&gt;Once your function is created, you'll be taken to the &lt;strong&gt;Function Overview&lt;/strong&gt; screen. Click the &lt;strong&gt;Deploy Tag&lt;/strong&gt; button at the bottom of the function overview page and then switch to the &lt;strong&gt;Manual&lt;/strong&gt; tab. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q6WRBTcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l1gghjzmq0oh8jjkgoy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q6WRBTcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l1gghjzmq0oh8jjkgoy.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's first create a tarfile that contains our function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-zcvf&lt;/span&gt; code.tar.gz &lt;span class="nt"&gt;-C&lt;/span&gt; .build/x86_64-unknown-linux-gnu/ debug/WelcomeEmail
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Head back to the &lt;strong&gt;Deploy a New Tag&lt;/strong&gt; dialog and upload the &lt;code&gt;code.tar.gz&lt;/code&gt; that we just created and use &lt;code&gt;./WelcomeEmail&lt;/code&gt; for the &lt;strong&gt;Command&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#activate-tag"&gt;
  &lt;/a&gt;
  ✅ Activate tag
&lt;/h2&gt;

&lt;p&gt;Once you deploy your tag, it will be listed under &lt;strong&gt;Tags&lt;/strong&gt; on the &lt;strong&gt;Overview&lt;/strong&gt; page. Activate your most recent tag ( if you have multiple versions ).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-triggers-and-environment-variables"&gt;
  &lt;/a&gt;
  💡 Adding Triggers and Environment Variables
&lt;/h2&gt;

&lt;p&gt;On the &lt;strong&gt;Functions&lt;/strong&gt; page, switch to the &lt;strong&gt;Settings&lt;/strong&gt; tab. A function can be triggered based on an &lt;code&gt;event&lt;/code&gt; or a &lt;code&gt;schedule&lt;/code&gt; you choose. This particular function should be triggered by the &lt;code&gt;users.create&lt;/code&gt; and the &lt;code&gt;account.create&lt;/code&gt; events. Select these events from the events section.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;Variables&lt;/strong&gt; section, tap the &lt;strong&gt;Add Variable&lt;/strong&gt; button and add the following variables and click the &lt;strong&gt;Update&lt;/strong&gt; button.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;MAILGUN_API_KEY&lt;/strong&gt; - Your Mailgun API Key.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;MAILGUN_DOMAIN&lt;/strong&gt; - Your Mailgun domain.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-verify-its-working"&gt;
  &lt;/a&gt;
  ✨️ Verify it's working
&lt;/h2&gt;

&lt;p&gt;It's about time to check if all our hard work has finally paid off! Let's create a user and verify that our Cloud Function has sent them a welcome email! &lt;/p&gt;

&lt;p&gt;Head to the &lt;strong&gt;Users&lt;/strong&gt; page from the Sidebar and click the &lt;strong&gt;Add User&lt;/strong&gt; button. Give your user a &lt;strong&gt;valid name&lt;/strong&gt; and &lt;strong&gt;email ID&lt;/strong&gt; and click &lt;strong&gt;Create&lt;/strong&gt;. Back in the &lt;strong&gt;Functions page&lt;/strong&gt;, you can now examine the logs of your function execution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're using a sandbox Mailgun account, ensure that the email ID is an &lt;a href="https://help.mailgun.com/hc/en-us/articles/217531258-Authorized-Recipients"&gt;Authorized Recipient&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-resources"&gt;
  &lt;/a&gt;
  📚️ Resources
&lt;/h2&gt;

&lt;p&gt;Hope you enjoyed this article! We love contributions and encourage you to take a look at our &lt;a href="https://github.com/appwrite/appwrite/issues"&gt;open issues&lt;/a&gt; and &lt;a href="https://github.com/appwrite/rfc/pulls"&gt;ongoing RFCs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you get stuck anywhere, feel free to reach out to us on our &lt;a href="https://appwrite.io/discord"&gt;friendly support channels&lt;/a&gt; run by humans 👩‍💻.&lt;/p&gt;

&lt;p&gt;Here are some handy links for more information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/appwrite/blob/master/CONTRIBUTING.md"&gt;Appwrite Contribution Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs"&gt;Appwrite Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>swift</category>
      <category>tutorial</category>
      <category>serverless</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Hacktoberfest Progress Week 1-2</title>
      <author>Japneet Singh</author>
      <pubDate>Fri, 22 Oct 2021 09:15:16 +0000</pubDate>
      <link>https://dev.to/japneetsingh035/hacktoberfest-progress-week-1-2-16gg</link>
      <guid>https://dev.to/japneetsingh035/hacktoberfest-progress-week-1-2-16gg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction-to-hackoctoberfest"&gt;
  &lt;/a&gt;
  Introduction to Hackoctoberfest
&lt;/h1&gt;

&lt;p&gt;Before, I start talking about my development with recent projects. I would like to come out and thank everyone for contributing and helping out each other with open source development. Before this course(OSD 600), I didn't have knowledge that how the project works. Daily, I have been learning new things that are helping me to understand the aspect of open source development.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#finding-projects"&gt;
  &lt;/a&gt;
  Finding Projects
&lt;/h1&gt;

&lt;p&gt;For the last couple of weeks, I have been trying to find good projects to work on. Following this, in our slack community, some of the projects were posted by the professor. I wanted to work in swift because I have a keen interest in learning about this language. I started digging into more and found something to get started.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  Issues
&lt;/h1&gt;

&lt;p&gt;I started with two issues later this week. Both of them were from the focus-ios application. Firefox Focus is a free and open-source privacy-focused mobile browser from Mozilla, available for Android and iOS smartphones and tablets. &lt;a href="https://github.com/mozilla-mobile/focus-ios"&gt;Focus-ios&lt;/a&gt;. I wanted to make progress with this application. I dug in and found two issues in which I would have thought to be working. &lt;br&gt;
&lt;a href="https://github.com/mozilla-mobile/focus-ios/issues/1851"&gt;issue #1&lt;/a&gt;, &lt;a href="https://github.com/mozilla-mobile/focus-ios/issues/2566"&gt;issue #1.1&lt;/a&gt;. Another project, I worked on is a website to adopt pets. &lt;a href="https://pawternityhub.netlify.app/"&gt;pawternityhub&lt;/a&gt; I worked on a small part of this project &lt;a href="https://github.com/redxzeta/Awesome-Adoption/issues/173"&gt;issue #2&lt;/a&gt;, but also learned how to use react and yarn npm module to run and develop web applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issues-related-about"&gt;
  &lt;/a&gt;
  Issues related about:
&lt;/h2&gt;

&lt;p&gt;Navigate around a webpage with the keyboard in IOS 15&lt;br&gt;
Use native paste &amp;amp; go on iOS 15 &lt;br&gt;
Add a title &amp;amp; border to react project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preparation"&gt;
  &lt;/a&gt;
  Preparation
&lt;/h2&gt;

&lt;p&gt;Preparing to work on projects not known is very different. I believe it takes much more time to start a project than working on it and resolving the issue. I find building the application difficult due to the documentation of the project. I had to install some dependencies to run the IOS app and similar to web page development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning"&gt;
  &lt;/a&gt;
  Learning
&lt;/h2&gt;

&lt;p&gt;I learnt a lot of new things during the development. First of all, I would like to add mu first issue was more related to testing and making sure the code works. When began, I didn't understand a single bit of code being so lengthy and divided. I understood that I needed to find the part that I could work on that. I looked for a particular piece of code. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;how to make an ios app webpage navigate using tab keys&lt;/li&gt;
&lt;li&gt;use of UIActionPaste&amp;amp;Go action &lt;/li&gt;
&lt;li&gt;small web app development to add HTML/CSS attributes.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#after-screenshots"&gt;
  &lt;/a&gt;
  After Screenshots:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/12063704/137262543-bb73072f-ccdd-4bf9-b71a-68eac50ec77c.gif"&gt;Project 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6oka7hg0qu0mbh506gf.png"&gt;Project 2&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#researches"&gt;
  &lt;/a&gt;
  Researches:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="//developer.apple.com/documentation/uikit/uiactionpasteandgo"&gt;uiactionpasteandgo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interactions"&gt;
  &lt;/a&gt;
  Interactions:
&lt;/h2&gt;

&lt;p&gt;I had great interactions with developers on Github. I feel all of them are very kind and sweet to provide support. Being new to this community, I ask whatever feel like before doing something on the project. Doing right is more important than wasting time on doing wrong.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#outcome"&gt;
  &lt;/a&gt;
  Outcome:
&lt;/h1&gt;

&lt;p&gt;I have learnt a lot in the past weeks and would love to learn more with new contributions. See you all soon with the next post next week.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#link-to-pull-requests"&gt;
  &lt;/a&gt;
  Link to Pull Requests:
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/mozilla-mobile/focus-ios/pull/2589"&gt;PR #1&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/redxzeta/Awesome-Adoption/pull/175"&gt;PR #2&lt;/a&gt;&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>swift</category>
      <category>javascript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>My First Hacktoberfest </title>
      <author>Sujana Kamasany</author>
      <pubDate>Fri, 22 Oct 2021 09:07:23 +0000</pubDate>
      <link>https://dev.to/sujanakamasany/my-first-hacktoberfest-3g9</link>
      <guid>https://dev.to/sujanakamasany/my-first-hacktoberfest-3g9</guid>
      <description>&lt;p&gt;I just completed my first &lt;strong&gt;&lt;em&gt;Hacktoberfest 2021&lt;/em&gt;&lt;/strong&gt; and it feels amazing! Open Source is a great way of learning and i learnt a lot this month in my little contributions to open source.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O_KfbPZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64gw5vlo3hs5uzhtseqq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O_KfbPZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64gw5vlo3hs5uzhtseqq.gif" alt="Minion gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This Hacktoberfest 2021, we all made meaningful open-source contributions by improving the code quality of thousands of projects. Not just we learn but earn cute swags to 😉! Isn't amazing!&lt;/p&gt;

&lt;p&gt;If you are a beginner and want to start with your open source journey! Check this amazing blog by &lt;a href="https://www.freecodecamp.org/news/how-to-contribute-to-open-source-projects-beginners-guide/"&gt;Freecodecamp&lt;/a&gt; and start contributing right away!&lt;/p&gt;

&lt;p&gt;Thank you&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>hacktoberfest2021</category>
      <category>opensource</category>
      <category>contributor</category>
    </item>
    <item>
      <title>Eat your own dogfood: I hosted my father's brewery website on my own hosting product</title>
      <author>Robert Schleinhege</author>
      <pubDate>Fri, 22 Oct 2021 09:06:47 +0000</pubDate>
      <link>https://dev.to/roberts/eat-your-own-dogfood-i-hosted-my-fathers-brewery-website-on-my-own-hosting-product-1hjc</link>
      <guid>https://dev.to/roberts/eat-your-own-dogfood-i-hosted-my-fathers-brewery-website-on-my-own-hosting-product-1hjc</guid>
      <description>&lt;p&gt;Hi, I'm Robert. I'm the Product Owner of &lt;a href="https://docs.ionos.space/"&gt;Deploy Now&lt;/a&gt;, a fresh new hosting product by IONOS. The idea of Deploy Now is to make hosting and coding a seamless process by enabling instant deploys from GitHub. For now, it's pretty much what GitHub Pages does, but we want to expand its functionalities to make it a real hosting service. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-importance-of-eat-your-own-dogfood"&gt;
  &lt;/a&gt;
  The importance of "eat your own dogfood"
&lt;/h1&gt;

&lt;p&gt;As a Product Owner, I'm not a software developer. So basically, I'm not the target group of Deploy Now. My daily job is to make prio decisions and shape the product's vision - based on what I believe customers want. Of course, I can allways interview customers about their experience or ask my dev colleagues about their opinions to get behind the target groups needs. But depending on the methods you choose to get customer insights, you always create a smaller or larger bias between what is meant and what you understood. &lt;/p&gt;

&lt;p&gt;I believe that the least error-prone method is to use your products yourself, on real projects: Eat your own dogfood! Nothing describes the experience of using a product better than making the experience of using a product.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#about-my-project"&gt;
  &lt;/a&gt;
  About my project
&lt;/h1&gt;

&lt;p&gt;As using Deploy Now in a personal project is more of a weekend thing, I wanted it to be something fun - it shouldn't feel like extra work. And I think that's fair since the majority of my users also use Deploy Now for their hobby projects. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s----iLrsTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h08p6cd0vqrvihvz62un.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----iLrsTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h08p6cd0vqrvihvz62un.JPG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Luckily, my father recently founded a little local brewery together with a friend and they didn't have a website back then. And of course, beer is fun - so I picked this as my project. I'm sorry that the website is in german, but I think you can guess what it's about. A little bit of story telling, a description of the different types of beers they produce and a list of locations where you can purchase it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#coding-and-deploying"&gt;
  &lt;/a&gt;
  Coding and deploying
&lt;/h1&gt;

&lt;p&gt;I decided to build a simple static one pager with HTML and CSS, as I don't need any dynamic elements like payment processes or a CMS. Maybe one day if they decide to open a shop or blog, but not yet. After some research, I decided to use Tailwind CSS and to reuse some modules from &lt;a href="https://tailblocks.cc/"&gt;tailblocks.cc&lt;/a&gt; to not spend too much time on styling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GtFuJu8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4j3ltphgy0wjs30tiah.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GtFuJu8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4j3ltphgy0wjs30tiah.JPG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The objective of Deploy Now is to make coding and hosting a seamless thing, so I set up a project in Deploy Now right after I created &lt;a href="https://github.com/robert-95/landbier-tailwind"&gt;my repository&lt;/a&gt;. I opened two tabs in my browser: One showed the website hosted on Deploy Now (users get a free preview domain) - and the second tab showed the local version. Every five to ten local commits, I did a Git push and checked the website on line. This was real fun. &lt;/p&gt;

&lt;p&gt;Going online with my site that early allowed me to send the link to by dad to get some feedback. He appreciated having a preview and checked the links on various devices. He recognized my site was not quite mobile friendly, so I tried to make it more responsive. After some iterations, we were both happy and I purhased and connected an &lt;a href="https://www.ionos.com/domains/domain-names"&gt;IONOS domain&lt;/a&gt;. You can check out my site under &lt;a href="https://papenburgerbrauerei.de/"&gt;papenburgerbrauerei.de&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you like the project and you would like to create a similar site by yourself, you can just click the button below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ionos.space/setup?repo=https://github.com/robert-95/landbier-tailwind"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F0tsBETo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ionos.space/deploy-now-icons/deploy-to-ionos-btn.svg" alt="Deploy to IONOS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons learned
&lt;/h1&gt;

&lt;p&gt;So dispite my father being happy about this nice family story - what did I learn from this?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Better understanding of the overall workflow:&lt;/strong&gt; Getting an impression of the steps you go through when creating a new project, the ratio between local and remote commits and the challenge to view multiple tabs and screens in parallel gave me a better understanding of the product experience and context.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Preview links and Staging Deployments are useful:&lt;/strong&gt; Since I've connected a domain, my father's site is getting around 100 visitors each day. When working on new content or modules, I don't want to harm their experience. This is why I decided to open a seperate feature branch for changes like this - hosted on a Staging Deployment. This was the first real feature we created for Deploy Now - and it was totally worth it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Techies could make fun of you, but you'll learn from it:&lt;/strong&gt; Being a product guy in tech, you sometimes have a hard time working together with devs that have more tech knowledge than you. On the morning after I've put my site live, the dev team recognized my name in the admin tool and of course instantly checked my repo. I got some comments on my technical incapabilities and received a bunch of pull requests :-) &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;If you wouldn't use your own product, you are doing something wrong:&lt;/strong&gt; So the big question is - would I use my own product if I were a neutral customer? Tough question. Of course it has it's teething problems, but all key functionalites work great. I would love to see visitor statistics in the dashboard directly without the need to install Google Analytics. This might be a topic for our backlog.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If &lt;a href="https://docs.ionos.space/"&gt;Deploy Now&lt;/a&gt; sounds interesting to you, I would love to hear your feedback. You can sign up for free. And if you should pay my beatiful hometown Papenburg a visit one day, feel free to grab a beer at my father's brewery :-) &lt;/p&gt;

&lt;p&gt;How about you? Do you use the products your company is building?&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>ionos</category>
      <category>product</category>
      <category>hosting</category>
    </item>
    <item>
      <title>{My very first contribution to the open source during HACKTOBER-FEST 2021}</title>
      <author>Abhishek Gupta</author>
      <pubDate>Fri, 22 Oct 2021 08:50:12 +0000</pubDate>
      <link>https://dev.to/abhs06/my-very-first-contribution-to-the-open-source-during-hacktober-fest-2021-3k4l</link>
      <guid>https://dev.to/abhs06/my-very-first-contribution-to-the-open-source-during-hacktober-fest-2021-3k4l</guid>
      <description>&lt;h3&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About Me
&lt;/h3&gt;

&lt;p&gt;I am Abhishek Gupta a self learned programmer and still a tyro and I love to explore new things related to programming stuff and I am interested in WebDev&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-background"&gt;
  &lt;/a&gt;
  My Background
&lt;/h3&gt;

&lt;p&gt;I am very new to this open source  field and I thought that one have to be a pro-programmer to contribute to open source but then a came to know after my research that basic but clear knowledge of any programming language can help you in the contribution to the open source. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#progress"&gt;
  &lt;/a&gt;
  Progress
&lt;/h3&gt;

&lt;p&gt;So, hacktoberfest-2021 started on 1st of October and in last week of September I started exploring about the open source and I felt confident somehow even though am not a pro-programmer.&lt;br&gt;
I came through many podcast on the open sources and contributions in this field. And in October when fest started, I went to github and started to explore the suitable repos which are legit and hacktober-fest accepted. Because I came to know later that choosing the right repository which are legit is very tedious task because during the review period the repository which seems to be suspicious are removed. And later I found many of the repos and contributed with my best to them. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contributions"&gt;
  &lt;/a&gt;
  Contributions
&lt;/h3&gt;

&lt;p&gt;I had contributed to many repos. My very first contribution is in the project which is an anti-abuse API, then I had contributed to Anime Card website, in other repos I had added some DSA questions which are from the leet-code, this is how my contribution to open source keeps on moving forward.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reflections"&gt;
  &lt;/a&gt;
  Reflections
&lt;/h3&gt;

&lt;p&gt;My experience during the hacktoberfest was so thrilling as it gives you goosebumps when your PR is in progress and under review and gives you chill when it is successfully counted.&lt;br&gt;
Whatever the reason behind the hacktoberfest I've concluded that it is the best way to develop interest for the open source to all the newbies like me who are unaware of the opportunities for this but are capable and deserving. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>hacktoberfest</category>
    </item>
  </channel>
</rss>
