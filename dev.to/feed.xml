<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Happy little clouds: find my way with CDK</title>
      <author>Ibrahim Cesar</author>
      <pubDate>Fri, 30 Apr 2021 14:00:29 +0000</pubDate>
      <link>https://dev.to/aws-builders/happy-little-clouds-find-my-way-with-cdk-1fj3</link>
      <guid>https://dev.to/aws-builders/happy-little-clouds-find-my-way-with-cdk-1fj3</guid>
      <description>&lt;p&gt;Today, April 30, we celebrate &lt;strong&gt;&lt;a href="https://www.cdkday.com/"&gt;CDK Day&lt;/a&gt;&lt;/strong&gt;. The work made by Matt Coulter with the community is an exceptional feat by itself. &lt;a href="https://www.cdkpatterns.com/"&gt;CDK Patterns&lt;/a&gt; became &lt;strong&gt;the place&lt;/strong&gt; to start any dig into CDK. And you can follow along the great content like here in &lt;a href="https://dev.to/cdkpatterns"&gt;Dev.to&lt;/a&gt; is worth your time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full disclosure:&lt;/strong&gt; I submitted to the CFP to speak this year at CDK Day, but as you can see, I was not accepted; They had done a splendid work to select their line up. It will be an outstanding event and I‚Äôll share in this post is what I was planning to present at the talk. I just want to open talk about. It‚Äôs ok to receive a ‚Äúno‚Äù. No one loves it. But in the end they could not align the curation of the event with you or your theme.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-language-of-the-cloud"&gt;
  &lt;/a&gt;
  The Language of the Cloud
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a2R941ZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xnxcguzo4r75ve7iy37.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a2R941ZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xnxcguzo4r75ve7iy37.gif" alt="Cloud"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wrote before about my quest to find the best IaC tool for me, and by extension to my team at &lt;strong&gt;&lt;a href="https://www.nexojornal.com.br/"&gt;Nexo Jornal&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ibrahimcesar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kfkWRBf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0zkQIbKi--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/189167/695f3dd9-b865-4c57-a097-5cfe07cca488.jpg" alt="ibrahimcesar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/aws-amplify-sam-cdk-what-to-choose-for-your-infrastructure-as-code-on-aws-lh2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;AWS Amplify, SAM, CDK ... What to choose for your Infrastructure as Code on AWS?!?&lt;/h2&gt;
      &lt;h3&gt;Ibrahim Cesar „Éª Dec 20 '20 „Éª 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloudskills&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;I was not searching for an IaC tool for the sake of it. IaC tools boost up your productivity and is a tactical and key feature of my strategic to improve our software delivery. &lt;em&gt;&lt;a href="https://amzn.to/2Rh9paY"&gt;Accelerate: The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations&lt;/a&gt;&lt;/em&gt; by Dr. Nicole Forsgren, PhD &lt;em&gt;et al.&lt;/em&gt;, had a profound impact on me, my career, how I made my decisions and... my life. If you don‚Äôt have fear of make multiple deployments, you don‚Äôt have fear of change one thing or your environment is not in sync with production... you don‚Äôt live in a good place. Other resource to read along with her &lt;em&gt;magnus opum&lt;/em&gt; is &lt;a href="https://services.google.com/fh/files/misc/state-of-devops-2019.pdf"&gt;The State of DevOps 2019&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Delivering software quickly, reliably, and safely is at the heart of technology transformation and organizational performance and in this report there‚Äôs a clear path to decide how to implement right on page 26. For my organization we started with the goal of &lt;strong&gt;productivity&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GR3bGOCj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqpnxxdykyr44bgzvjep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GR3bGOCj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqpnxxdykyr44bgzvjep.png" alt="Productivity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Is important to point out two things: 1. It‚Äôs not a binary choice. There are several elements of one of paths in the other. 2. &lt;strong&gt;All&lt;/strong&gt; paths start on creating a culture of psychological safety.&lt;/p&gt;

&lt;p&gt;What is a culture of psychological safety? People feel good or feel they can be themselves at work. They can have agency. They can have opinions. Of course this is not some place you simple arrive there. There is no plan to implement a ‚ÄúCulture of psychological safety‚Äù and boom! &lt;em&gt;Job is done&lt;/em&gt;. This is an &lt;em&gt;ongoing&lt;/em&gt; effort. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r5PORwOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ham8sx2unoynu9zawir.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r5PORwOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ham8sx2unoynu9zawir.png" alt="Health Check"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I tried to keep us in check with 10 indicators and three classifications that we answer based in how we are feeling towards that: I‚Äôm good (üëç), I‚Äôm not good (üëé) and Meh (üòê). As you can all see almost everybody in the team these COVID-19 days is very üòê in &lt;strong&gt;productivity&lt;/strong&gt; terms... and that‚Äôs fine. Everybody is trying their best (keep in my mind, also we are in Brazil!).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hNokCZVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j59t5g7708d6oq25be5n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hNokCZVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j59t5g7708d6oq25be5n.png" alt="Productivity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Expanding in the &lt;strong&gt;productivity goal&lt;/strong&gt;. Useful, easy-to-use tools provides a &lt;em&gt;predictive relationship&lt;/em&gt; with increase in productivity. Here &lt;strong&gt;CDK&lt;/strong&gt; shines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-joy-of-cdk"&gt;
  &lt;/a&gt;
  The joy of CDK
&lt;/h2&gt;

&lt;p&gt;My first lambda was in the console. Then, I zipped the code by command line. The, I used SAM. And I love SAM. Is laser focused in serverless and is a great tool for this. Once you drift away... you have to learn the most high level of YAML-fu and extend with CloudFormation itself. And this is not bad. In fact this is great. Is a scape hatched and SAM let you build whatever you like, doesn‚Äôt get in the way. But I did not find pleasant as is SAM for serverless alone. I saw myself trying to our rely on several plugins of the Serverless Framework, which is easy to understand its popularity, but I like to do my IaC with third-third party dependencies as possible or learn HCL or... CloudFormation. And I read the documentation. I‚Äôm not at that level yet. Someday, but not today CloudFormation.&lt;/p&gt;

&lt;p&gt;Then... I found CDK. I was skeptical at first. I &lt;em&gt;disliked&lt;/em&gt; TypeScript. But then, tinkering with some examples, after learning enough of TypeScript to create an Union Type (but not enough at the type to even understand what a Generic Type was). I naturally typed something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// Inside your stack code&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;

   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Env&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;Dev&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;

   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I hit &lt;code&gt;cdk deploy&lt;/code&gt; and...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ISH5Mz8e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8eb2gzw3vj57287w4hs8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ISH5Mz8e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8eb2gzw3vj57287w4hs8.gif" alt="Happiness"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Worked. Then it ‚Äúclicked‚Äù to me. I ‚Äúgroked‚Äù the concept. The same way I was developing my lambda in TypeScript I was provisioning my Infrastructure and better yet, once I would know to &lt;a href="https://docs.aws.amazon.com/cdk/api/latest/"&gt;read the docs for classes and types&lt;/a&gt;, I understood how to ‚Äútalk Cloud‚Äù through TypeScript! I know in the end all is converted to CloudFormation anyway, but our code is transformed in Machine Code anyway. As Knuth once stated: ‚ÄúPrograms are meant to be read by humans and only incidentally for computers to execute.‚Äù&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DevOps&lt;/strong&gt; had become a true continuum. The same language for everything. ‚ÄúEasy‚Äù is a complicated word. For me is easy talk in Brazilian Portuguese, not so much English. But now my team doesn‚Äôt have the cognitive overload to understand TypeScript &lt;em&gt;and&lt;/em&gt; YAML &lt;em&gt;and&lt;/em&gt; HCL and so on. As we documented our code by JSDocs we‚Äôre at the same better digging and finding our way into a program the Cloud. AWS became more clear since now we could use a more common language. We are not more limited to explore the console and its UX cornerstones or find the right doc. We could inspect the class and its types. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cH13Bjdw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ouyu3bro3jkdv5pfxmow.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH13Bjdw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ouyu3bro3jkdv5pfxmow.gif" alt="Happy Accidents"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I‚Äôm right now reading &lt;a href="https://amzn.to/3tfmteh"&gt;‚ÄúSooner Safer Happier: Antipatterns and Patterns for Business‚Äù&lt;/a&gt; and I can empathize right away just with the title. We couldn‚Äôt ignore the &lt;strong&gt;happy&lt;/strong&gt; aspect. What we do most of our days define what we are. I really find a sweet spot and became more empowered with CDK‚Äî&lt;em&gt;and&lt;/em&gt; productive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Give CDK a chance!&lt;/strong&gt;. Could be the right tool for you and your team. Or maybe not, then move to whatever makes your happy little cloud!&lt;/p&gt;




&lt;p&gt;Also, have a great &lt;a href="https://www.youtube.com/channel/UCo3mAheKM1bS3ToJ90QAkiw"&gt;CDK Day&lt;/a&gt;! And please leave your thoughts, takes and insights in the comments!&lt;/p&gt;

</description>
      <category>cdk</category>
      <category>aws</category>
      <category>typescript</category>
      <category>iac</category>
    </item>
    <item>
      <title>üöÄ10 Trending projects on GitHub for web developers - 30th April 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 30 Apr 2021 13:56:36 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-30th-april-2021-efn</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-30th-april-2021-efn</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-winbox"&gt;
  &lt;/a&gt;
  1. WinBox
&lt;/h3&gt;

&lt;p&gt;WinBox is a professional HTML5 window manager for the web: lightweight, outstanding performance, no dependencies, fully customizable, open source!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nextapps-de"&gt;
        nextapps-de
      &lt;/a&gt; / &lt;a href="https://github.com/nextapps-de/winbox"&gt;
        winbox
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      WinBox is a professional HTML5 window manager for the web: lightweight, outstanding performance, no dependencies, fully customizable, open source!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/640445ac8f2f2d90718c7af565d1fb7a5ee806e79b2849541fe633919da8e3dc/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6e657874617070732d64652f77696e626f78406d61737465722f64656d6f2f77696e626f782e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/640445ac8f2f2d90718c7af565d1fb7a5ee806e79b2849541fe633919da8e3dc/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6e657874617070732d64652f77696e626f78406d61737465722f64656d6f2f77696e626f782e706e67" alt="WinBox.js: HTML5 Window Manager for the Web." width="100%"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;h3&gt;
Modern window manager for the web: lightweight, outstanding performance, no dependencies, fully customizable, open source!&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/winbox" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4e06487e73f461016c826a55851283de5181e268f96ebfa6f520d7aa563ba3be/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f77696e626f782e737667"&gt;&lt;/a&gt;
&lt;a href="https://github.com/nextapps-de/winbox/issues"&gt;&lt;img src="https://camo.githubusercontent.com/3245f35b574cf0b8647e9e1fd634fcad249f4d90f187a5e63843f66d8c6b8575/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6e657874617070732d64652f77696e626f782e737667"&gt;&lt;/a&gt;
&lt;a href="https://github.com/nextapps-de/winbox/blob/master/LICENSE.md"&gt;&lt;img src="https://camo.githubusercontent.com/6970167d4c5f8d8988ef741a74f5569279c8437cba17f7989b0d720ce27edd64/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f77696e626f782e737667"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nextapps-de.github.io/winbox/" rel="nofollow"&gt;Demo&lt;/a&gt; ‚ÄÇ‚Ä¢‚ÄÇ &lt;a href="https://raw.githubusercontent.com/nextapps-de/winbox/master/#started"&gt;Getting Started&lt;/a&gt; ‚ÄÇ‚Ä¢‚ÄÇ &lt;a href="https://raw.githubusercontent.com/nextapps-de/winbox/master/#options"&gt;Options&lt;/a&gt; ‚ÄÇ‚Ä¢‚ÄÇ &lt;a href="https://raw.githubusercontent.com/nextapps-de/winbox/master/#api"&gt;API&lt;/a&gt; ‚ÄÇ‚Ä¢‚ÄÇ &lt;a href="https://raw.githubusercontent.com/nextapps-de/winbox/master/#themes"&gt;Themes&lt;/a&gt; ‚ÄÇ‚Ä¢‚ÄÇ &lt;a href="https://raw.githubusercontent.com/nextapps-de/winbox/master/#customize"&gt;Customize&lt;/a&gt; ‚ÄÇ‚Ä¢‚ÄÇ &lt;a href="https://raw.githubusercontent.com/nextapps-de/winbox/master/CHANGELOG.md"&gt;Changelog&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Live Demo / Code Examples: &lt;br&gt;&lt;a href="https://nextapps-de.github.io/winbox/" rel="nofollow"&gt;https://nextapps-de.github.io/winbox/ &lt;/a&gt;
&lt;/h3&gt;
&lt;h2&gt;
Getting Started&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Get Latest Stable Build (Recommended):&lt;/strong&gt;&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
    &lt;tbody&gt;
&lt;tr&gt;
        &lt;td colspan='3"'&gt;
            &lt;b&gt;Bundle:&lt;/b&gt; (all assets bundled into one single file: js + css + html + icons)
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;winbox.bundle.js&lt;/td&gt;
        &lt;td&gt;&lt;a href="https://github.com/nextapps-de/winbox/raw/0.1.8/dist/winbox.bundle.js"&gt;Download&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href="https://rawcdn.githack.com/nextapps-de/winbox/0.1.8/dist/winbox.bundle.js" rel="nofollow"&gt;https://rawcdn.githack.com/nextapps-de/winbox/0.1.8/dist/winbox.bundle.js&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan='3"'&gt;
            &lt;br&gt;&lt;b&gt;Non-Bundled:&lt;/b&gt; (js and css are separated, css includes icons as base64)
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;winbox.min.js&lt;/td&gt;
        &lt;td&gt;&lt;a href="https://github.com/nextapps-de/winbox/raw/0.1.8/dist/js/winbox.min.js"&gt;Download&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href="https://rawcdn.githack.com/nextapps-de/winbox/0.1.8/dist/js/winbox.min.js" rel="nofollow"&gt;https://rawcdn.githack.com/nextapps-de/winbox/0.1.8/dist/js/winbox.min.js&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;winbox.min.css&lt;/td&gt;
        &lt;td&gt;&lt;a href="https://github.com/nextapps-de/winbox/raw/0.1.8/dist/css/winbox.min.css"&gt;Download&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href="https://rawcdn.githack.com/nextapps-de/winbox/0.1.8/dist/css/winbox.min.css" rel="nofollow"&gt;https://rawcdn.githack.com/nextapps-de/winbox/0.1.8/dist/css/winbox.min.css&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan='3"'&gt;
            &lt;br&gt;&lt;b&gt;Sources:&lt;/b&gt; (not bundled at all, images as url to original resources)
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;ES6 Modules&lt;/td&gt;
        &lt;td&gt;&lt;a href="https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/nextapps-de/winbox/tree/0.1.8/src/js" rel="nofollow"&gt;Download&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;The &lt;i&gt;/src/js&lt;/i&gt; folder of this Github repository&lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
        &lt;td&gt;LESS Files (source)&lt;/td&gt;
        &lt;td&gt;&lt;a href="https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/nextapps-de/winbox/tree/0.1.8/src/css" rel="nofollow"&gt;Download&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;The &lt;i&gt;/src/css&lt;/i&gt; folder of this Github repository&lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
        &lt;td&gt;winbox.css (compiled)&lt;/td&gt;
        &lt;td&gt;&lt;a href="https://github.com/nextapps-de/winbox/raw/0.1.8/src/css/winbox.css"&gt;Download&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href="https://rawcdn.githack.com/nextapps-de/winbox/0.1.8/src/css/winbox.css" rel="nofollow"&gt;https://rawcdn.githack.com/nextapps-de/winbox/0.1.8/src/css/winbox.css&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
        &lt;td&gt;src.zip&lt;/td&gt;
        &lt;td&gt;&lt;a href="https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/nextapps-de/winbox/tree/0.1.8/dist" rel="nofollow"&gt;Download&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;Download all source files including image original resources.&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Get Latest Nightly Build (Do not use for production!):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Just exchange the version number from the URLs above with "master", e.g.: "/winbox/&lt;strong&gt;0.1.8&lt;/strong&gt;/dist/" into "/winbox/&lt;strong&gt;master&lt;/strong&gt;‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nextapps-de/winbox"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#2-script-kit"&gt;
  &lt;/a&gt;
  2. Script Kit
&lt;/h3&gt;

&lt;p&gt;Automation for Developers, Automate Anything! Making scripts easy to run, write, and share&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/johnlindquist"&gt;
        johnlindquist
      &lt;/a&gt; / &lt;a href="https://github.com/johnlindquist/kit"&gt;
        kit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Automate Anything.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Script Kit App&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://scriptkit.com/" rel="nofollow"&gt;https://scriptkit.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Join the Discussion&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/johnlindquist/kit/discussions"&gt;https://github.com/johnlindquist/kit/discussions&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/johnlindquist/kit"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#3-vanillaextract"&gt;
  &lt;/a&gt;
  3. vanilla-extract
&lt;/h3&gt;

&lt;p&gt;Zero-runtime Stylesheets-in-TypeScript. Write your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/seek-oss"&gt;
        seek-oss
      &lt;/a&gt; / &lt;a href="https://github.com/seek-oss/vanilla-extract"&gt;
        vanilla-extract
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Zero-runtime Stylesheets-in-TypeScript
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
üßÅ vanilla-extract&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Zero-runtime Stylesheets-in-TypeScript.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Write your styles in TypeScript (or JavaScript) with locally scoped class names and CSS Variables, then generate static CSS files at build time.&lt;/p&gt;
&lt;p&gt;Basically, it‚Äôs &lt;a href="https://github.com/css-modules/css-modules"&gt;‚ÄúCSS Modules&lt;/a&gt;-in-TypeScript‚Äù but with scoped CSS Variables + heaps more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;üöß ¬† Please note, this is an alpha release.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üî• ¬† All styles generated at build time ‚Äî just like &lt;a href="https://sass-lang.com" rel="nofollow"&gt;Sass&lt;/a&gt;, &lt;a href="http://lesscss.org" rel="nofollow"&gt;Less&lt;/a&gt;, etc.&lt;/p&gt;
&lt;p&gt;‚ú® ¬† Minimal abstraction over standard CSS.&lt;/p&gt;
&lt;p&gt;ü¶Ñ ¬† Works with any front-end framework ‚Äî or even without one.&lt;/p&gt;
&lt;p&gt;üå≥ ¬† Locally scoped class names ‚Äî just like &lt;a href="https://github.com/css-modules/css-modules"&gt;CSS Modules.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üöÄ ¬† Locally scoped &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties" rel="nofollow"&gt;CSS Variables&lt;/a&gt;, &lt;code&gt;@keyframes&lt;/code&gt; and &lt;code&gt;@font-face&lt;/code&gt; rules.&lt;/p&gt;
&lt;p&gt;üé® ¬† High-level theme system with support for simultaneous themes. No globals!&lt;/p&gt;
&lt;p&gt;üõ† ¬† Utils for generating variable-based &lt;code&gt;calc&lt;/code&gt; expressions.&lt;/p&gt;
&lt;p&gt;üí™ ¬† Type-safe styles via &lt;a href="https://github.com/frenic/csstype"&gt;CSSType.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;üèÉ‚Äç‚ôÇÔ∏è ¬† Optional runtime version for development and testing.&lt;/p&gt;
&lt;p&gt;üôà ¬† Optional API for dynamic runtime theming.&lt;/p&gt;

&lt;p&gt;üñ• ¬† &lt;a href="https://codesandbox.io/s/github/seek-oss/vanilla-extract/tree/master/examples/webpack-react?file=/src/App.css.ts" rel="nofollow"&gt;Try it out for yourself in CodeSandbox.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write your styles in &lt;/strong&gt;‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/seek-oss/vanilla-extract"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-tiptap"&gt;
  &lt;/a&gt;
  4. Tiptap
&lt;/h3&gt;

&lt;p&gt;The headless editor framework for web artisans.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ueberdosis"&gt;
        ueberdosis
      &lt;/a&gt; / &lt;a href="https://github.com/ueberdosis/tiptap"&gt;
        tiptap
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The headless editor framework for web artisans.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
tiptap 2&lt;/h1&gt;
&lt;p&gt;A headless, framework-agnostic and extendable rich text editor, based on &lt;a href="https://github.com/ProseMirror/prosemirror"&gt;ProseMirror&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ueberdosis/tiptap/actions"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MaKMQgVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ueberdosis/tiptap/workflows/build/badge.svg" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/@tiptap/core" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/74c0dfc51b1e06eff235eda9fb03485f06b27210dd5104b97baba4a31b6b21a5/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f407469707461702f636f72652e7376673f6c6162656c3d76657273696f6e" alt="Version"&gt;&lt;/a&gt;
&lt;a href="https://npmcharts.com/compare/@tiptap/core?minimal=true" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8132f7a67c7760468a8aeddb66c289b0a2246ab5fc5572649092e06dc4e12f7b/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f407469707461702f636f72652e737667" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/@tiptap/core" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/de6ac53f9e1757ee2fe6f6c009e690749f290953297d69f254156801e6e6b677/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f407469707461702f636f72652e737667" alt="License"&gt;&lt;/a&gt;
&lt;a href="https://discord.gg/WtJ49jGshW" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e1833c7e063a9706c5c5916d41ea2475f7e0e002dc2b5cf4ff83ddec9a0db8c0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d6f6e253230646973636f72642d3732383964612e7376673f73616e6974697a653d74727565" alt="Chat"&gt;&lt;/a&gt;
&lt;a href="https://github.com/sponsors/ueberdosis"&gt;&lt;img src="https://camo.githubusercontent.com/713b10927e0f1948b88bb4bc8688808df702762244f2c975940fde3885597733/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d53706f6e736f72266d6573736167653d254532253944254134266c6f676f3d476974487562" alt="Sponsor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you‚Äôre looking for tiptap 1, &lt;a href="https://github.com/ueberdosis/tiptap/tree/v1"&gt;click here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Examples&lt;/h2&gt;
&lt;p&gt;Have a look at the &lt;a href="https://www.tiptap.dev/examples" rel="nofollow"&gt;examples to see tiptap in action&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;p&gt;The full documentation is a available on &lt;a href="https://www.tiptap.dev/installation" rel="nofollow"&gt;www.tiptap.dev&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Community&lt;/h2&gt;
&lt;p&gt;For help, discussion about best practices, or any other conversation that would benefit from being searchable:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ueberdosis/tiptap/discussions"&gt;Discuss tiptap on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
üíñ Sponsors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ueberdosis.io/" rel="nofollow"&gt;√ºberdosis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ziffmedia.com/" rel="nofollow"&gt;Ziff Media Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://incytestudios.com/" rel="nofollow"&gt;Incyte Studios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dotcms.com/" rel="nofollow"&gt;dotCMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://restruct.nl/" rel="nofollow"&gt;Restruct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bitcrowd.net/" rel="nofollow"&gt;Bitcrowd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reflect.app/" rel="nofollow"&gt;Reflect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://mymind.com/" rel="nofollow"&gt;mymind&lt;/a&gt;
&lt;a href="https://www.dociq.io/" rel="nofollow"&gt;DocIQ&lt;/a&gt;
&lt;a href="https://apostrophecms.com/" rel="nofollow"&gt;Apostrophe CMS&lt;/a&gt;
&lt;a href="https://www.ycode.com/" rel="nofollow"&gt;Ycode&lt;/a&gt;,
&lt;a href="https://github.com/impactvelocity"&gt;@impactvelocity&lt;/a&gt;,
&lt;a href="https://www.flowmobile.app/" rel="nofollow"&gt;Flow Mobile&lt;/a&gt;,
&lt;a href="http://www.gretel.co/" rel="nofollow"&gt;Gretel&lt;/a&gt;,
&lt;a href="https://www.omicsautomation.com/" rel="nofollow"&gt;Omics Data Automation&lt;/a&gt;,
&lt;a href="http://www.novadiscovery.com/" rel="nofollow"&gt;Novadiscovery&lt;/a&gt;,
&lt;a href="https://atlan.com/" rel="nofollow"&gt;Atlan Technologies&lt;/a&gt;,
&lt;a href="https://gamma.app/" rel="nofollow"&gt;Gamma&lt;/a&gt;,
&lt;a href="https://kirchnerconsulting.ch/" rel="nofollow"&gt;Kirchner Consulting&lt;/a&gt;,
&lt;a href="https://itxpert.ch/" rel="nofollow"&gt;IT Xpert&lt;/a&gt; and hundreds of awesome inviduals.&lt;/p&gt;
&lt;p&gt;Using tiptap in production? Invest in the future of tiptap and &lt;a href="https://github.com/sponsors/ueberdosis"&gt;become a sponsor!&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Contributing&lt;/h2&gt;
&lt;p&gt;Please see &lt;a href="https://raw.githubusercontent.com/ueberdosis/tiptap/main/CONTRIBUTING.md"&gt;CONTRIBUTING&lt;/a&gt; for details.&lt;/p&gt;
&lt;h2&gt;
Contributors&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/samwillis"&gt;Sam Willis&lt;/a&gt;
&lt;a href="https://github.com/Chrissi2812"&gt;Christoph Flathmann&lt;/a&gt;,
&lt;a href="https://github.com/erickwilder"&gt;Erick Wilder&lt;/a&gt;,
&lt;a href="https://github.com/mariux"&gt;Marius Tolzmann&lt;/a&gt;,
&lt;a href="https://github.com/jjangga0214"&gt;jjangga0214&lt;/a&gt;‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ueberdosis/tiptap"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#5-dompurify"&gt;
  &lt;/a&gt;
  5. DOMPurify
&lt;/h3&gt;

&lt;p&gt;DOMPurify - a DOM-only, super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/cure53"&gt;
        cure53
      &lt;/a&gt; / &lt;a href="https://github.com/cure53/DOMPurify"&gt;
        DOMPurify
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      DOMPurify - a DOM-only, super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG. DOMPurify works with a secure default, but offers a lot of configurability and hooks. Demo:
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
DOMPurify&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://badge.fury.io/js/dompurify" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3e4a3d8a27931710f0ff1a6738b16533e86c067dbd5e4216ea9ce2d0674dbef6/68747470733a2f2f62616467652e667572792e696f2f6a732f646f6d7075726966792e737667" alt="npm version"&gt;&lt;/a&gt;  &lt;a rel="noopener noreferrer" href="https://github.com/cure53/DOMPurify/workflows/Build%20and%20Test/badge.svg?branch=main"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SbfQ7gE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/cure53/DOMPurify/workflows/Build%2520and%2520Test/badge.svg%3Fbranch%3Dmain" alt="Build and Test"&gt;&lt;/a&gt;  &lt;a href="https://www.npmjs.com/package/dompurify" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/eda396af9ad46df76f3eeba2eb01235a3922da0dc6424734ef3b7ebaa1a3dfaa/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f646f6d7075726966792e737667" alt="Downloads"&gt;&lt;/a&gt;  &lt;a href="https://cdn.jsdelivr.net/npm/dompurify/dist/purify.min.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7f411602aa708b689bba11717d8f72fcf278cb4e614af726f8f9d0738543326e/68747470733a2f2f62616467656e2e6e65742f62756e646c6570686f6269612f6d696e2f646f6d7075726966793f636f6c6f723d677265656e266c6162656c3d6d696e6966696564" alt="minified size"&gt;&lt;/a&gt;  &lt;a href="https://packagephobia.now.sh/result?p=dompurify" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0c651076efd7598e82ecfaf2e0cd5edfc76b942491b522f94844ffaeea243da1/68747470733a2f2f62616467656e2e6e65742f62756e646c6570686f6269612f6d696e7a69702f646f6d7075726966793f636f6c6f723d677265656e266c6162656c3d677a6970706564" alt="gzip size"&gt;&lt;/a&gt;  &lt;a href="https://github.com/cure53/DOMPurify/network/dependents"&gt;&lt;img src="https://camo.githubusercontent.com/17f3dfa026ea2677dc53ea819be18e272540fc5474185500c1a29a1d583aa3db/68747470733a2f2f62616467656e2e6e65742f6769746875622f646570656e64656e74732d7265706f2f6375726535332f646f6d7075726966793f636f6c6f723d677265656e266c6162656c3d646570656e64656e7473" alt="dependents"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nodei.co/npm/dompurify/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/22a0154c2377d096d902cdc45ed74a099e464f801c1e206f2da6334e287fd440/68747470733a2f2f6e6f6465692e636f2f6e706d2f646f6d7075726966792e706e67" alt="NPM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DOMPurify is a DOM-only, super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG.&lt;/p&gt;
&lt;p&gt;It's also very simple to use and get started with. DOMPurify was &lt;a href="https://github.com/cure53/DOMPurify/commit/a630922616927373485e0e787ab19e73e3691b2b"&gt;started in February 2014&lt;/a&gt; and, meanwhile, has reached version 2.2.8.&lt;/p&gt;
&lt;p&gt;DOMPurify is written in JavaScript and works in all modern browsers (Safari (10+), Opera (15+), Internet Explorer (10+), Edge, Firefox and Chrome - as well as almost anything else using Blink or WebKit). It doesn't break on MSIE6 or other legacy browsers. It either uses &lt;a href="https://raw.githubusercontent.com/cure53/DOMPurify/main/#what-about-older-browsers-like-msie8"&gt;a fall-back&lt;/a&gt; or simply does nothing.&lt;/p&gt;
&lt;p&gt;Our automated tests cover &lt;a href="https://github.com/cure53/DOMPurify/blob/main/test/karma.custom-launchers.config.js#L5"&gt;15 different browsers&lt;/a&gt; right now, more to come. We also cover Node.js v14.15.1, v15.4.0, running DOMPurify on &lt;a href="https://github.com/tmpvar/jsdom"&gt;jsdom&lt;/a&gt;. Older Node.js versions are known to work as well.&lt;/p&gt;
&lt;p&gt;DOMPurify is written by security people who have vast background in web attacks and XSS. Fear not. For more details please also read about our &lt;a href="https://github.com/cure53/DOMPurify/wiki/Security-Goals-&amp;amp;-Threat-Model"&gt;Security Goals &amp;amp; Threat Model&lt;/a&gt;‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/cure53/DOMPurify"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#6-fig"&gt;
  &lt;/a&gt;
  6. Fig
&lt;/h3&gt;

&lt;p&gt;Fig adds VSCode style autocomplete to your terminal&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/withfig"&gt;
        withfig
      &lt;/a&gt; / &lt;a href="https://github.com/withfig/autocomplete"&gt;
        autocomplete
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Fig adds VSCode style autocomplete to your terminal
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://github.com/withfig/fig/blob/main/static/FigBanner.png?raw=true"&gt;&lt;img width="300" src="https://res.cloudinary.com/practicaldev/image/fetch/s--lcXqgRzh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/withfig/fig/raw/main/static/FigBanner.png%3Fraw%3Dtrue"&gt;&lt;/a&gt;
&lt;/p&gt;




&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/89c1f9c13fd34e9269b57cacadc0061150088b6441cdfb3812816a8aac3eda40/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6f732d2545462541332542462532306d61634f532d6c69676874"&gt;&lt;img src="https://camo.githubusercontent.com/89c1f9c13fd34e9269b57cacadc0061150088b6441cdfb3812816a8aac3eda40/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6f732d2545462541332542462532306d61634f532d6c69676874" alt="os"&gt;&lt;/a&gt;
&lt;a href="https://withfig.com?ref=github_autocomplete" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/aa34e6ec1c90279364a673fd04a75b1bed902f5ff9686326b293e43aeb31ccd3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7369676e75702d70726976617465253230626574612d626c756576696f6c6574" alt="Signup"&gt;&lt;/a&gt;
&lt;a href="https://withfig.com/docs/autocomplete/getting-started" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7f5c4e30ba65ad299f04f2e59d69626db88fc87fdc38790e0c9e5cb35a1159a6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63756d656e746174696f6e2d626c61636b" alt="Documentation"&gt;&lt;/a&gt;
&lt;a href="https://raw.githubusercontent.com/withfig/autocomplete/master/#Contributors"&gt;&lt;img src="https://camo.githubusercontent.com/58930c5a3df37eb5e63cd0078ef85ee7d650632496804e4c447ed1569cee3060/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f616c6c2d636f6e7472696275746f72732f776974686669672f6175746f636f6d706c657465" alt="All-Contributors"&gt;&lt;/a&gt;
&lt;a href="https://withfig.com/community" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7ccc4e495a205a2b456d340325988de9cc6fb088b87afdb5aa7e66b1d01e2a09/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f736c61636b2d707572706c65" alt="Slack"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/intent/follow?screen_name=fig" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/486789790fb702c4471e47610e8e49724298301af6c030f39109ebec05d94179/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f6669672e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f77" alt="Twitter"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://withfig.com?ref=github_autocomplete" rel="nofollow"&gt;Fig&lt;/a&gt; adds autocomplete to the terminal.&lt;/strong&gt; As you type, Fig pops up subcommands, options, and contextually relevant arguments in your existing terminal on macOS.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7baf1f0f8bd3cf3883f44f26c2393904712d87e03a2d2bc85693bc524bcaa088/68747470733a2f2f776974686669672e636f6d2f676966732f64656d6f2d776974682d6865616465722e676966"&gt;&lt;img src="https://camo.githubusercontent.com/7baf1f0f8bd3cf3883f44f26c2393904712d87e03a2d2bc85693bc524bcaa088/68747470733a2f2f776974686669672e636f6d2f676966732f64656d6f2d776974682d6865616465722e676966" alt="Fig Visual Autocomplete For Your Terminal Demo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Add a completion spec for a CLI tool&lt;/h2&gt;
&lt;p&gt;Looking to improve autocomplete functionality or add support for your favorite CLI tool? We welcome contributions for new specs!&lt;/p&gt;
&lt;p&gt;Completion specs are defined in a &lt;em&gt;declarative&lt;/em&gt; schema that specifies &lt;code&gt;subcommands&lt;/code&gt;, &lt;code&gt;options&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt;. Suggestions can be generated dynamically by running shell commands or reading local files, in addition to the information in the spec itself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For more documentation and tutorials&lt;/strong&gt;, visit &lt;a href="https://withfig.com/docs/autocomplete/getting-started" rel="nofollow"&gt;withfig.com/docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To request completions for a CLI tool&lt;/strong&gt;, open an &lt;a href="https://github.com/withfig/autocomplete/issues/new/choose"&gt;issue&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Get Started&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;git clone https://github.com/withfig/autocomplete.git fig-autocomplete
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; fig-autocomplete
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Install packages&lt;/span&gt;
npm install
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Go into testing mode&lt;/span&gt;
npm run dev&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Edit your spec in the &lt;code&gt;dev/&lt;/code&gt; folder. It will compile to the &lt;code&gt;specs/&lt;/code&gt; folder on save. Start testing your spec‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/withfig/autocomplete"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#7-puppeteerextra"&gt;
  &lt;/a&gt;
  7. puppeteer-extra
&lt;/h3&gt;

&lt;p&gt;Teach puppeteer new tricks through plugins.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/berstend"&gt;
        berstend
      &lt;/a&gt; / &lt;a href="https://github.com/berstend/puppeteer-extra"&gt;
        puppeteer-extra
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üíØ  Teach puppeteer new tricks through plugins.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
puppeteer-extra&lt;/h1&gt;
&lt;p&gt;This is the monorepo for &lt;a href="https://raw.githubusercontent.com/berstend/puppeteer-extra/master/./packages/puppeteer-extra"&gt;&lt;code&gt;puppeteer-extra&lt;/code&gt;&lt;/a&gt;, a modular plugin framework for &lt;a href="https://github.com/GoogleChrome/puppeteer"&gt;&lt;code&gt;puppeteer&lt;/code&gt;&lt;/a&gt;. :-)&lt;/p&gt;
&lt;p&gt;üåü &lt;strong&gt;For the main documentation, please head over to the &lt;a href="https://raw.githubusercontent.com/berstend/puppeteer-extra/master/./packages/puppeteer-extra"&gt;&lt;code&gt;puppeteer-extra&lt;/code&gt;&lt;/a&gt; package.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In case you're interested in the available plugins, check out the &lt;a href="https://raw.githubusercontent.com/berstend/puppeteer-extra/master/./packages/"&gt;packages folder&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Monorepo&lt;/h2&gt;

 &lt;strong&gt;Contributing&lt;/strong&gt;
&lt;h3&gt;
Contributing&lt;/h3&gt;
&lt;p&gt;PRs and new plugins are welcome! The plugin API for &lt;code&gt;puppeteer-extra&lt;/code&gt; is clean and fun to use. Have a look the &lt;a href="https://raw.githubusercontent.com/berstend/puppeteer-extra/master/./packages/puppeteer-extra-plugin"&gt;&lt;code&gt;PuppeteerExtraPlugin&lt;/code&gt;&lt;/a&gt; base class documentation to get going and check out the &lt;a href="https://raw.githubusercontent.com/berstend/puppeteer-extra/master/./packages/"&gt;existing plugins&lt;/a&gt; (minimal example is the &lt;a href="https://raw.githubusercontent.com/berstend/puppeteer-extra/master/./packages/puppeteer-extra-plugin-anonymize-ua/index.js"&gt;anonymize-ua&lt;/a&gt; plugin) for reference.&lt;/p&gt;
&lt;p&gt;We use a &lt;a href="https://github.com/berstend/puppeteer-extra"&gt;monorepo&lt;/a&gt; powered by &lt;a href="https://github.com/lerna/lerna#--use-workspaces"&gt;Lerna&lt;/a&gt; (and yarn workspaces), &lt;a href="https://github.com/avajs/ava"&gt;ava&lt;/a&gt; for testing, the &lt;a href="https://standardjs.com/" rel="nofollow"&gt;standard&lt;/a&gt; style for linting and &lt;a href="http://usejsdoc.org/about-getting-started.html" rel="nofollow"&gt;JSDoc&lt;/a&gt; heavily to auto-generate markdown &lt;a href="https://github.com/documentationjs/documentation"&gt;documentation&lt;/a&gt; based on code. :-)&lt;/p&gt;


 &lt;strong&gt;Lerna&lt;/strong&gt;
&lt;h3&gt;
Lerna&lt;/h3&gt;
&lt;p&gt;This monorepo is powered by &lt;a href="https://github.com/lerna/lerna"&gt;Lerna&lt;/a&gt; and yarn workspaces.&lt;/p&gt;
&lt;h4&gt;
Initial setup&lt;/h4&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Install deps&lt;/span&gt;
yarn
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Bootstrap the packages in the current Lerna repo.&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Installs all of their dependencies and links&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/berstend/puppeteer-extra"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#8-swc"&gt;
  &lt;/a&gt;
  8. swc
&lt;/h3&gt;

&lt;p&gt;swc is a super-fast compiler written in rust; producing widely-supported javascript from modern standards and typescript.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/swc-project"&gt;
        swc-project
      &lt;/a&gt; / &lt;a href="https://github.com/swc-project/swc"&gt;
        swc
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      swc is a super-fast compiler written in rust; producing widely-supported javascript from modern standards and typescript.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://swc.rs/" rel="nofollow"&gt;
    &lt;img alt="babel" src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5vNwLC0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/swc-project/logo/master/swc.png" width="546"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   Make the web (development) faster
&lt;/p&gt;

&lt;p&gt;
   &lt;a href="https://www.npmjs.com/package/@swc/core" rel="nofollow"&gt;
      &lt;img alt="npm Downloads" src="https://camo.githubusercontent.com/91e00ffa161fb5b8ec2e905fa0823bfa9136fa41f0f2dc9a13096bfb3214e307/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64772f407377632f636f7265"&gt;
   &lt;/a&gt;
    &lt;a href="https://crates.io/crates/swc_ecma_parser" rel="nofollow"&gt;
      &lt;img alt="undefined" src="https://camo.githubusercontent.com/dc1728d68d6ac27362d5e0471b8561743aae9a5ed577531339f086bcf17b7594/68747470733a2f2f696d672e736869656c64732e696f2f6372617465732f642f7377635f65636d615f7061727365722e7376673f6c6162656c3d6372617465732e696f253230646f776e6c6f616473"&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   &lt;a href="https://travis-ci.com/github/swc-project/swc" rel="nofollow"&gt;
      &lt;img alt="Travis Status" src="https://camo.githubusercontent.com/a7f605e19fb59d310b78e6183548facad910efc2f178eef3d85c943975d3d510/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7377632d70726f6a6563742f7377632f6d61737465722e7376673f6c6162656c3d747261766973266d61784167653d3433323030"&gt;
   &lt;/a&gt;
   &lt;a href="https://codecov.io/gh/swc-project/swc" rel="nofollow"&gt;
      &lt;img alt="Coverage" src="https://camo.githubusercontent.com/31626bd7e8f078bc52b7bd669a76feb5b3e93710010a37efb582a440d5ec5575/68747470733a2f2f636f6465636f762e696f2f67682f7377632d70726f6a6563742f7377632f6272616e63682f6d61737465722f67726170682f62616467652e737667"&gt;
   &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;swc is a super-fast typescript / javascript compiler written in rust.&lt;/p&gt;

&lt;h1&gt;
Documentation&lt;/h1&gt;

&lt;p&gt;Check out the documentation &lt;a href="https://swc.rs/docs/installation/" rel="nofollow"&gt;in the website&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
Features&lt;/h1&gt;

&lt;p&gt;Please see &lt;a href="https://swc.rs/docs/comparison-babel" rel="nofollow"&gt;comparison with babel&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
Performance&lt;/h1&gt;

&lt;p&gt;The lower bound of the speedup compared to babel is &lt;strong&gt;18&lt;/strong&gt;. The benchmarks were run on Macbook pro, dual core, 2.3GHz Intel Core i5, 16 GB ram&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;performance&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;swc (es3)&lt;/td&gt;
&lt;td&gt;761 ops/sec ¬±0.23% (89 runs sampled)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;swc (es2015)&lt;/td&gt;
&lt;td&gt;800 ops/sec ¬±1.02% (87 runs sampled)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;swc (es2016)&lt;/td&gt;
&lt;td&gt;2123 ops/sec ¬±0.84% (88 runs sampled)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;swc (es2017)&lt;/td&gt;
&lt;td&gt;2131 ops/sec ¬±1.13% (90 runs sampled)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;swc (es2018)&lt;/td&gt;
&lt;td&gt;2981 ops/sec ¬±0.25% (90 runs sampled)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;swc-optimize (es3)&lt;/td&gt;
&lt;td&gt;712 ops/sec ¬±0.21% (86 runs sampled)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;babel&lt;/td&gt;
&lt;td&gt;41.75 ops/sec ¬±8.07% (56 runs sampled)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
Supporting swc&lt;/h2&gt;

&lt;p&gt;
   &lt;a href="https://raw.githubusercontent.com/swc-project/swc/master/#backers"&gt;
      &lt;img alt="Backers on Open Collective" src="https://camo.githubusercontent.com/f240802efd7b4b4b50f088ae37b4a9d441a232292b3049e5cddcfbc5ee789e8e/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7377632f74696572732f6261636b65722f62616467652e7376673f6c6162656c3d6261636b657226636f6c6f723d627269676874677265656e"&gt;
   &lt;/a&gt;
   &lt;a href="https://raw.githubusercontent.com/swc-project/swc/master/#gold-sponsors"&gt;
      &lt;img alt="Gold sponsors on Open Collective" src="https://camo.githubusercontent.com/1173651a01c306c016b5d2cb0cdaea2f8274d6aee441b410ac8b4d2dbbf9105c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7377632f74696572732f676f6c642d73706f6e736f72732f62616467652e7376673f6c6162656c3d476f6c6425323073706f6e736f727326636f6c6f723d627269676874677265656e"&gt;
   &lt;/a&gt;
   &lt;a href="https://raw.githubusercontent.com/swc-project/swc/master/#silver-sponsors"&gt;
      &lt;img alt="Silver sponsors on Open Collective" src="https://camo.githubusercontent.com/a283bd354137b20d8f7da82b4fe6208e40da700311a979a32cc328c4fdd6a8dd/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7377632f74696572732f73696c7665722d73706f6e736f72732f62616467652e7376673f6c6162656c3d53696c76657225323073706f6e736f727326636f6c6f723d627269676874677265656e"&gt;
   &lt;/a&gt;
   &lt;a href="https://raw.githubusercontent.com/swc-project/swc/master/#bronze-sponsors"&gt;
      &lt;img alt="Bronze sponsors on Open Collective" src="https://camo.githubusercontent.com/5244f0b3200456c160f4968035681e93d7ab6382b073bec11ae48179d6c4287c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7377632f74696572732f62726f6e7a652d73706f6e736f72732f62616467652e7376673f6c6162656c3d42726f6e7a6525323073706f6e736f727326636f6c6f723d627269676874677265656e"&gt;
   &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;swc is a community-driven project, and is maintained by a group of &lt;a href="https://opencollective.com/swc#team" rel="nofollow"&gt;volunteers&lt;/a&gt;. If you'd like to help support the future of the project, please consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Giving developer time on‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/swc-project/swc"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#9-inkline"&gt;
  &lt;/a&gt;
  9. Inkline
&lt;/h3&gt;

&lt;p&gt;Inkline is the customizable Vue.js UI/UX Library designed for creating flawless responsive websites.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/inkline"&gt;
        inkline
      &lt;/a&gt; / &lt;a href="https://github.com/inkline/inkline"&gt;
        inkline
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Inkline is the customizable Vue.js UI/UX Library designed for creating flawless responsive websites.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
    &lt;a href="https://inkline.io/" rel="nofollow"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--olD514Qh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/inkline/inkline/master/packages/docs/static/images/logo.png" alt="Inkline logo" width="72" height="72"&gt;
    &lt;/a&gt;
&lt;/p&gt;
&lt;h1&gt;
Inkline&lt;/h1&gt;
&lt;p&gt;
    Inkline is the customizable Vue.js UI/UX Library designed for creating flawless responsive websites. Inkline is written and maintained by &lt;a href="https://twitter.com/alexgrozav" rel="nofollow"&gt;@alexgrozav&lt;/a&gt;
    &lt;br&gt;
    &lt;br&gt;
    &lt;br&gt;
    &lt;a href="https://inkline.io" rel="nofollow"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3s7WmQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/inkline/inkline/master/packages/docs/static/images/github/homepage.png" width="1009" alt="Vue.js UI/UX Library - Inkline"&gt;
    &lt;/a&gt;
    &lt;br&gt;
    &lt;br&gt;
    &lt;br&gt;
    &lt;a href="https://inkline.io" rel="nofollow"&gt;Homepage&lt;/a&gt;
    ¬∑
    &lt;a href="https://inkline.io/docs/introduction/getting-started" rel="nofollow"&gt;Documentation&lt;/a&gt;
    ¬∑
    &lt;a href="https://github.com/inkline/inkline/issues"&gt;Issue Tracker&lt;/a&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;
    &lt;a href="https://www.npmjs.com/package/@inkline/inkline" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/9477b61faf49440e87b64d3d1f0de28ded48e8e8388bff1109dc938e577da2d6/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40696e6b6c696e652f696e6b6c696e652e737667" alt="npm version"&gt;
    &lt;/a&gt;
    &lt;a href="https://github.com/inkline/inkline/actions"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzckWNWO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/inkline/inkline/workflows/Build/badge.svg" alt="Build"&gt;
    &lt;/a&gt;
    &lt;a href="https://coveralls.io/github/inkline/inkline?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b03ad55febfef729e9af0d59a8c358b4c9b6f8f8ee9616d6fef39e567eed16f5/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f696e6b6c696e652f696e6b6c696e652f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status"&gt;&lt;/a&gt;
    &lt;a href="https://www.npmjs.com/package/@inkline/inkline" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/c5e6ceb2068b6a9712469bd174e20777396b0f3a4127df9bca0c41dbc907fa95/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f40696e6b6c696e652f696e6b6c696e652e737667" alt="Downloads"&gt;
    &lt;/a&gt;
    &lt;a href="https://discord.gg/2w5UGnK" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/79163d99e7904cac3c22208ee46bed4cf1e2a1cf0c3af7583a9dbc33e665922e/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3535303433363730343438323439323432392e737667" alt="Discord"&gt;
    &lt;/a&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;
&lt;h2&gt;
Table of contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/inkline/inkline/master/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/inkline/inkline/master/#bugs-and-feature-requests"&gt;Bugs and feature requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/inkline/inkline/master/#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/inkline/inkline/master/#community"&gt;Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/inkline/inkline/master/#releases"&gt;Releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/inkline/inkline/master/#versioning"&gt;Versioning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/inkline/inkline/master/#creators"&gt;Creators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/inkline/inkline/master/#copyright-and-license"&gt;Copyright and license&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Installation&lt;/h2&gt;

&lt;p&gt;Read the &lt;a href="https://inkline.io/docs/introduction/getting-started/" rel="nofollow"&gt;Getting Started&lt;/a&gt; page and find information on framework contents, templates, examples, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://inkline.io/docs/introduction/installation/vue-cli" rel="nofollow"&gt;&lt;br&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1LgGFpnM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/inkline/inkline/master/packages/docs/static/images/github/vue-cli.png" width="510" alt="Vue CLI Installation - Inkline"&gt;&lt;br&gt;
&lt;/a&gt;&lt;br&gt;
&lt;a href="https://inkline.io/docs/introduction/installation/nuxt" rel="nofollow"&gt;&lt;br&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zSZy164z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/inkline/inkline/master/packages/docs/static/images/github/nuxt.png" width="510" alt="Nuxt.js Installation - Inkline"&gt;&lt;br&gt;
&lt;/a&gt;&lt;br&gt;
&lt;a href="https://inkline.io/docs/introduction/installation/custom" rel="nofollow"&gt;&lt;br&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ban-PvMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/inkline/inkline/master/packages/docs/static/images/github/custom.png" width="510" alt="Custom Installation - Inkline"&gt;&lt;br&gt;
&lt;/a&gt;&lt;br&gt;
&lt;a href="https://inkline.io/docs/introduction/installation/cdn" rel="nofollow"&gt;&lt;br&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zuzF4GAV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/inkline/inkline/master/packages/docs/static/images/github/cdn.png" width="510" alt="CDN Installation - Inkline"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Bugs and feature requests&lt;/h2&gt;

&lt;p&gt;Have a bug or a feature request? Please first search for existing and closed issues
If your problem or idea is not addressed yet, &lt;a href="https://github.com/inkline/inkline/issues/new"&gt;please open a new issue&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Community&lt;/h2&gt;
&lt;p&gt;Get updates on Inkline's development and chat with the project maintainers and community members.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follow &lt;a href="https://twitter.com/inkline" rel="nofollow"&gt;@inkline on Twitter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Join &lt;a href="https://discord.com/invite/2w5UGnK" rel="nofollow"&gt;Inkline on Discord&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Developers should use the keyword &lt;code&gt;inkline&lt;/code&gt; on packages which modify or add to the functionality of Inkline when distributing through &lt;a href="https://www.npmjs.com/browse/keyword/inkline" rel="nofollow"&gt;npm&lt;/a&gt; or similar delivery mechanisms for maximum discoverability.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Releases&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/inkline/inkline/releases"&gt;Previous releases&lt;/a&gt;‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/inkline/inkline"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#10-foal"&gt;
  &lt;/a&gt;
  10. Foal
&lt;/h3&gt;

&lt;p&gt;Elegant and all-inclusive Node.Js web framework based on TypeScript.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/FoalTS"&gt;
        FoalTS
      &lt;/a&gt; / &lt;a href="https://github.com/FoalTS/foal"&gt;
        foal
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Elegant and all-inclusive Node.Js web framework based on TypeScript. üöÄ.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/FoalTS/foal/master/./docs/static/img/logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A2qPIeOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/FoalTS/foal/master/./docs/static/img/logo.png"&gt;&lt;/a&gt;
  &lt;br&gt;
  &lt;a href="https://foalts.org" rel="nofollow"&gt;https://foalts.org&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://github.com/FoalTS/foal/blob/master/LICENSE"&gt;
    &lt;img src="https://camo.githubusercontent.com/5fab2edf3816ef9fb3ebcaf6e613fa7b40ff7652ec69e5f6e7f695aa24bf5ce6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667" alt="License: MIT"&gt;
  &lt;/a&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0fcf92aefb90b93ad47f327f2fe527585e7973224a6a356130547efd6cdca50b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6f64652d25334525334431302d627269676874677265656e2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/0fcf92aefb90b93ad47f327f2fe527585e7973224a6a356130547efd6cdca50b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6f64652d25334525334431302d627269676874677265656e2e737667" alt="node version"&gt;&lt;/a&gt;
  &lt;a href="https://badge.fury.io/js/%40foal%2Fcore" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/65655e3a665506655478f35e61a1efd18f958549c53da9118a81e25595bbcaca/68747470733a2f2f62616467652e667572792e696f2f6a732f253430666f616c253246636f72652e737667" alt="npm version"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/FoalTS/foal/actions"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K_OQdrct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/FoalTS/foal/workflows/Test/badge.svg" alt="Build Status"&gt;
  &lt;/a&gt;
  &lt;a href="https://codecov.io/github/FoalTS/foal" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/d38610a44e3cc5bd80ecef1697dcbd4e223e48dfd77eda15b1646e77dceff6c6/68747470733a2f2f636f6465636f762e696f2f67682f466f616c54532f666f616c2f6272616e63682f6d61737465722f6772617068732f62616467652e737667" alt="Code coverage"&gt;
  &lt;/a&gt;
  &lt;a href="https://snyk.io/test/npm/@foal/core" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/af178349db496ba5d86b7e64b051b8119d03a9fb9f20e2007c11e2e61ec3ea73/68747470733a2f2f736e796b2e696f2f746573742f6e706d2f40666f616c2f636f72652f62616467652e737667" alt="Known Vulnerabilities"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/FoalTS/foal/commits/master"&gt;
    &lt;img src="https://camo.githubusercontent.com/928eb18aaab6dd87667814bcc2ebf0e521d6d3e6fd4d87eaf533c2144d54399f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d69742d61637469766974792f792f466f616c54532f666f616c2e737667" alt="Commit activity"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/FoalTS/foal/commits/master"&gt;
    &lt;img src="https://camo.githubusercontent.com/85e9d1f7e85392a35368d036911e192903ce75996b36c406c74adff8b13f9fb4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f466f616c54532f666f616c2e737667" alt="Last commit"&gt;
  &lt;/a&gt;
  &lt;a href="https://img.shields.io/badge/2FA-npm,%20GitHub-green.svg" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/7246b94cead0b785d44e7e475d07a770677e677c9a8adbb6feedc0c17cffb2be/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f3246412d6e706d2c2532304769744875622d677265656e2e737667" alt="2FA"&gt;
  &lt;/a&gt;
  &lt;a href="https://discord.gg/QUrJv98" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/61ec305222254d103302686db9462439352afc7e173055294bda94e4782be5ac/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436861742d446973636f72642d626c75652e737667" alt="2FA"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
What is Foal?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Foal&lt;/em&gt; (or &lt;em&gt;FoalTS&lt;/em&gt;) is a Node.JS framework for creating web applications.&lt;/p&gt;

&lt;p&gt;It provides a set of ready-to-use components so you don't have to reinvent the wheel every time. In one single place, you have a complete environment to build web applications. This includes a CLI, testing tools, frontend utilities, scripts, advanced authentication, ORM, deployment environments, GraphQL and Swagger API, AWS utilities, and more. You no longer need to get lost on npm searching for packages and making them work together. All is provided.&lt;/p&gt;

&lt;p&gt;But while offering all these features, the framework remains simple. Complexity and unnecessary abstractions are put aside to provide the most intuitive and expressive syntax. We believe that concise and elegant code is the best way to develop an application and maintain it in the future. It also allows you to spend more time coding rather than trying to understand how the‚Ä¶&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/FoalTS/foal"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing üìà
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  Top risers over last 7 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +2,453 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/danistefanovic/build-your-own-x"&gt;Build Your Own X&lt;/a&gt;  +2,383 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;Web Developer Roadmap&lt;/a&gt;  +2,178 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +1,804 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +1,341 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  Top growth(%) over last 7 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/js-image-carver"&gt;JS Image Carver&lt;/a&gt;  +37%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/yiliansource/party-js"&gt;party.js&lt;/a&gt;  +26%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/anubra266/choc-ui"&gt;Choc UI&lt;/a&gt;  +24%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pankod/superplate"&gt;Superplate&lt;/a&gt;  +22%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/withfig/autocomplete"&gt;Fig&lt;/a&gt; +8%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  Top risers over last 30 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; +7,913 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +4,655 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;Web Developer Roadmap&lt;/a&gt;  +4,498 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +4,497 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/GorvGoyl/Clone-Wars"&gt;Clone Wars&lt;/a&gt; +3,905 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  Top growth(%) over last 30 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/appsmithorg/appsmith"&gt;Appsmith&lt;/a&gt;  +105%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/wbkd/react-flow"&gt;React Flow&lt;/a&gt;  +84%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/arnelenero/simpler-state"&gt;Simpler State&lt;/a&gt;  +59%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/GorvGoyl/Clone-Wars"&gt;Clone Wars&lt;/a&gt; +59%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tailwindlabs/headlessui"&gt;Headless UI&lt;/a&gt; +55%&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/iain_freestone"&gt;follow me&lt;/a&gt; on Twitter where I regularly post bite size tips relating to HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>news</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Why You Should Meditate Daily (As Developer)</title>
      <author>Thu Htet Tun</author>
      <pubDate>Fri, 30 Apr 2021 13:32:33 +0000</pubDate>
      <link>https://dev.to/thuhtetdev/why-you-should-meditate-daily-as-developer-247f</link>
      <guid>https://dev.to/thuhtetdev/why-you-should-meditate-daily-as-developer-247f</guid>
      <description>&lt;p&gt;Hello My Devs Friends,&lt;/p&gt;

&lt;p&gt;About Six years ago, I started my meditation journey because of an accident of mine. Some books helped me to become meditating. It helps me a lot in my daily life.&lt;/p&gt;

&lt;p&gt;Today, I decide to write an article about why you should meditate daily (as developer).&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meditation"&gt;
  &lt;/a&gt;
  Meditation
&lt;/h2&gt;

&lt;p&gt;Simply, Meditation is awareness of yourself.&lt;br&gt;
Meditation practices you to know yourself in every seconds of your life.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-you-need-meditation"&gt;
  &lt;/a&gt;
  Why You Need Meditation
&lt;/h2&gt;

&lt;p&gt;Formally, when you meditate, you have to be sitting down and focus on one thing. And Control your mind tightly. But that's misunderstanding. we need more understanding of what real meditation is. &lt;/p&gt;

&lt;p&gt;Whenever you are sitting down or walking or lying down, it is all about being aware and stay in the present moment (second by second).&lt;/p&gt;

&lt;p&gt;Don't control your mind tightly. Let it be flow. But keep knowing along with your current thoughts. Once you've known your are thinking about the past, drag those thoughts to the present moment. Sometimes, you may think about the future. Just aware it and drag those thoughts to the present softly. &lt;/p&gt;

&lt;p&gt;You don't have to worry about them. It is nature that our thoughts are jumping from one place to another. In general, we have multiple of thoughts changing in every 5 minutes. Thoughts are mostly bad for us. They give us many emotional such as pain, anger, anxiety, depression and so much more. We called it the negative thoughts.&lt;br&gt;
Then, thoughts become actions, Right? Your negative thoughts will make you to act unstable actions.&lt;/p&gt;

&lt;p&gt;How do we reduce and avoid those negative thoughts and actions?&lt;br&gt;
Meditation can solve those problems of our daily lives.&lt;/p&gt;

&lt;p&gt;It is like a filter of mind. if you have awareness, You will be knowing every things of your mind. In this way, Negative thoughts are not becoming your action. On the other hand, you don't also have to think about positive thoughts so hard.&lt;/p&gt;

&lt;p&gt;Be awareness of something in the present. &lt;br&gt;
And maintain that awareness. &lt;/p&gt;

&lt;p&gt;If you are walking, you could aware of your foot steps.&lt;br&gt;
If you are sitting down, you could aware of your breathing (in and out).&lt;br&gt;
If you are working, you could aware of your work.&lt;br&gt;
If you are driving, you could aware that your are driving.&lt;br&gt;
If you are in anger, you could aware of your angry mind.&lt;br&gt;
If you are talking to someone, you could aware of listening or speaking.&lt;br&gt;
Whatever you do, you can apply meditation in daily life.&lt;/p&gt;

&lt;p&gt;That is meditation.&lt;/p&gt;

&lt;p&gt;As a developer, &lt;br&gt;
You need to relax your mind without screen time.&lt;br&gt;
Also, sleeping is not the best way to reset your mind.&lt;br&gt;
Sleeping and meditation are not same. They are a lot of different.&lt;br&gt;
Try to clear your mind with meditation.&lt;br&gt;
Only practical lesson will teach you. &lt;br&gt;
So, just do it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonus-tips"&gt;
  &lt;/a&gt;
  Bonus Tips
&lt;/h2&gt;

&lt;p&gt;&lt;b&gt;"To know and not to do is not yet to know"&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Let me know your meditation experience in this comment section.&lt;/p&gt;

&lt;p&gt;If you prefer to watch this content,&lt;br&gt;
I also uploaded it on my YouTube Channel with nice editing.&lt;br&gt;
Watch Here:&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=CkLb9jqjf8o"&gt;https://www.youtube.com/watch?v=CkLb9jqjf8o&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you got some awareness from this article.&lt;br&gt;
If you enjoy this article, follow me to get new updates from me.&lt;/p&gt;

&lt;p&gt;I have also plan to write about my personal experience of meditation in one of my coming articles.&lt;/p&gt;

&lt;p&gt;See you in the next article.&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>mentalhealth</category>
    </item>
    <item>
      <title>Stack Data Structure Using Javascript
</title>
      <author>Nikhil Bobade </author>
      <pubDate>Fri, 30 Apr 2021 13:28:08 +0000</pubDate>
      <link>https://dev.to/nikhil27b/stack-data-structure-using-javascript-3516</link>
      <guid>https://dev.to/nikhil27b/stack-data-structure-using-javascript-3516</guid>
      <description>&lt;h1&gt;
  &lt;a href="#stack"&gt;
  &lt;/a&gt;
  Stack:-
&lt;/h1&gt;

&lt;p&gt;A Stack is a commonly used linear data structure a stack data structure follows particular operations that are performed Stack is behaved like Last in first out (LIFO) In this, we have three basic operations.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Push Method&lt;/li&gt;
&lt;li&gt;Pop Method&lt;/li&gt;
&lt;li&gt;Peek Method&lt;/li&gt;
&lt;li&gt;Is Empty Method&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#push-method-"&gt;
  &lt;/a&gt;
  Push Method :
&lt;/h4&gt;

&lt;p&gt;The push method is adding data into any type of data into the stack.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#peek-method"&gt;
  &lt;/a&gt;
  Peek Method:
&lt;/h4&gt;

&lt;p&gt;Peek is a very easy operation this method is given you which item or data is on the top of the list so this peek method returns the top element&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pop-method"&gt;
  &lt;/a&gt;
  Pop Method:
&lt;/h4&gt;

&lt;p&gt;Pop is removed the top item from the stack &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#is-empty-method"&gt;
  &lt;/a&gt;
  Is Empty Method:
&lt;/h4&gt;

&lt;p&gt;The is empty method is very important this return if the stack is empty then its return true.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uLGMxrly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3o0u27va3q0onaa6l9h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uLGMxrly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3o0u27va3q0onaa6l9h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we use push D is added then call stack on top is D then we use pop then D is removed from the stack.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#stack-example-using-javascript"&gt;
  &lt;/a&gt;
  Stack example using Javascript
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//¬© Inspiration from coding garden&lt;/span&gt;


&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;launguage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;launguage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Typescript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;launguage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Angular&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;launguage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;launguage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C++&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;launguage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;launguage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;launguage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;launguage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;launguage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8jW3NeG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyl0i826163o0wx6ixth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8jW3NeG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyl0i826163o0wx6ixth.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to more support me then buy me a &lt;a href="https://www.buymeacoffee.com/nikhilbobade27"&gt;coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>HEL/BER/REMOTE - Smartly.io l Fullstack Javascript Developer (NodeJS/React)</title>
      <author>AlicePhamFI</author>
      <pubDate>Fri, 30 Apr 2021 12:57:38 +0000</pubDate>
      <link>https://dev.to/alicephamfi/hel-ber-remote-smartly-io-l-fullstack-javascript-developer-nodejs-react-4d1a</link>
      <guid>https://dev.to/alicephamfi/hel-ber-remote-smartly-io-l-fullstack-javascript-developer-nodejs-react-4d1a</guid>
      <description>&lt;p&gt;Location: Helsinki/Berlin/Remote&lt;/p&gt;

&lt;p&gt;About Us:&lt;br&gt;
Smartly.io is a fast growing SaaS product company with over 400 Smartlies with footholds in 17 cities, serving more than 650 brands worldwide, including eBay, Uber and Zalando.&lt;/p&gt;

&lt;p&gt;As a Fullstack Developer within our optimisation team called Autopsy, you will help us save our customer's time and money while decreasing the amount of manual work needed to create beautifully effective campaigns. The team is building an extremely powerful tool that is in the core of our product - triggers, automations and automated optimisations that make customers' ad spend more efficient and aligned with their goals. The team is also currently scaling the architecture by implementing new multiplatform microservices. &lt;/p&gt;

&lt;p&gt;Autopsy is a team of currently six developers and one product manager. It is an independent fullstack team, so communicating with other engineers, product managers and designers, and even customers is essential. We use NodeJS, Typescript, Postgres, RabbitMQ and Kubernetes as the base for new microservices we spin up in the backend, React in the frontend. &lt;/p&gt;

&lt;p&gt;(&lt;a href="https://www.smartly.io/careers/fullstack-javascript-developer-nodejs-react-4001721004"&gt;https://www.smartly.io/careers/fullstack-javascript-developer-nodejs-react-4001721004&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Key Resposibilities:&lt;br&gt;
‚Ä¢ Designing, building and maintaining end-to-end data pipelines featuring Automated Optimisation&lt;br&gt;
‚Ä¢ Contributing to a high-load multiplatform automation service&lt;br&gt;
‚Ä¢ Building an integration service for optimisation features&lt;br&gt;
‚Ä¢ Collaborating with different team members to provide recommendations on implementation details of certain features&lt;br&gt;
‚Ä¢ Working in close cooperation with our customers to make sure that we are creating features that benefit them the most&lt;/p&gt;

&lt;p&gt;Benefits:&lt;br&gt;
‚Ä¢ Relocation Supports&lt;br&gt;
‚Ä¢ Comprehensive salary and bonus&lt;br&gt;
‚Ä¢ Full 5 weeks of paid vacation&lt;br&gt;
‚Ä¢ Health coverage&lt;br&gt;
‚Ä¢ Wellness program&lt;br&gt;
‚Ä¢ Company-paid learning opportunities (courses, conferences, books)&lt;br&gt;
‚Ä¢ Computer (MAC or PC) + phone with plan + Bose headphones&lt;br&gt;
‚Ä¢ Offsite and team outings&lt;/p&gt;

&lt;p&gt;If you look to step-up your career as a senior developer, a Smartly.io self-organizing team could be your next home!&lt;/p&gt;

&lt;p&gt;Contact:&lt;br&gt;
Alice Pham - Technical Sourcer @ Smartly.io&lt;br&gt;
Email: &lt;a href="mailto:alice.thungan@smartly.io"&gt;alice.thungan@smartly.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¢ Smartly.io‚Äôs Next Phase of Growth: &lt;a href="https://bit.ly/3t3D9F9"&gt;https://bit.ly/3t3D9F9&lt;/a&gt;&lt;br&gt;
‚Ä¢ Software Engineering at Smartly.io: &lt;a href="https://bit.ly/3x2lUYg"&gt;https://bit.ly/3x2lUYg&lt;/a&gt;&lt;br&gt;
‚Ä¢ Smartly.io DevTalks over the years: &lt;a href="https://bit.ly/3aR2nk9"&gt;https://bit.ly/3aR2nk9&lt;/a&gt;&lt;/p&gt;

</description>
      <category>german</category>
      <category>react</category>
      <category>javascript</category>
      <category>career</category>
    </item>
    <item>
      <title>Introduction to Amazon SageMaker</title>
      <author>Adit Modi</author>
      <pubDate>Fri, 30 Apr 2021 12:52:38 +0000</pubDate>
      <link>https://dev.to/aws-builders/introduction-to-amazon-sagemaker-1dij</link>
      <guid>https://dev.to/aws-builders/introduction-to-amazon-sagemaker-1dij</guid>
      <description>&lt;h2&gt;
  &lt;a href="#amazon-sagemaker-overview"&gt;
  &lt;/a&gt;
  Amazon SageMaker Overview
&lt;/h2&gt;

&lt;p&gt;When it comes to Machine Learning (ML) and giving it as a service, it requires Data Engineering, ML, and DevOps expertise. While deploying a production model, several issues arise like versioning issues, problems in the model pipeline, etc. Solving out these issues is time-consuming. ML Research Scientists and practitioners at Amazon came out with a solution to run the entire pipeline of machine learning-powered by AWS called Amazon Sagemaker. With the availability of tools for every stage, various in-house tools are available to ease the model building and deployment.&lt;/p&gt;

&lt;p&gt;Amazon SageMaker uses Jupyter Notebook and Python with boto to connect with the s3 bucket, or it has its high-level Python API for model building. The compatibility with modern deep learning libraries like TensorFlow, PyTorch, and MXNet reduces the model building time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fZPvlwA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jei1395jlo8nxkh9861z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fZPvlwA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jei1395jlo8nxkh9861z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My Background: I am Cloud , DevOps &amp;amp; Big Data Evangelist | 4x AWS Certified | 3x OCI Certified | 3x Azure Certified | AWS Community Builder | AWS Educate Cloud Ambassador .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-machine-learning-pipeline"&gt;
  &lt;/a&gt;
  What is Machine Learning Pipeline?
&lt;/h2&gt;

&lt;p&gt;A Machine Learning Pipeline is an executable workflow of the machine learning task. It helps to optimize, build, and manage ML workflows. Listed below are the features of the ML pipeline:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fetch data ‚Äì&lt;/strong&gt; Get real-time data from Kafka streams or repository hosting data. SageMaker requires the data to be in an AWS s3 bucket for setting up the training job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Pre-processing ‚Äì&lt;/strong&gt; This step involves data wrangling and data preparation for training. Data wrangling is one of the most time-consuming steps in a machine learning project. Amazon SageMaker Processing enables the running jobs to pre-process data for training and post-process for generating the inference, feature engineering, and model evaluation at scale.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Model Training ‚Äì&lt;/strong&gt; The pre-processing pipeline is for both training and testing data. Amazon SageMaker has popular algorithms already built in it. Import the library and use it.&lt;br&gt;
The following is the working training pipeline at Amazon SageMaker:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;import the training data from the s3 bucket.&lt;/li&gt;
&lt;li&gt;The training is started by calling the ML to compute instances stored in the EC2 container registry.&lt;/li&gt;
&lt;li&gt;The model artifacts s3 bucket store the trained model artifacts.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Many different approaches are possible when using ML to recognize patterns in data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NoIYJS0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/352k0wp3t3qfim2h25af.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NoIYJS0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/352k0wp3t3qfim2h25af.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-amazon-sagemaker-important"&gt;
  &lt;/a&gt;
  Why is Amazon SageMaker Important?
&lt;/h2&gt;

&lt;p&gt;There are several important features of Amazon SageMaker to streamline the ML workflow. Listed below are the :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Model Evaluation-&lt;/strong&gt; Evaluating a trained model on SageMaker in two ways offline testing or online testing. In offline testing, requests are made through Jupyter notebook‚Äôs endpoint on historical data (data separated previously) by validation set or using cross-validation. In online testing, the model is deployed, and a traffic threshold is set to handle requests. The traffic threshold is 100% if it is working fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Model Deployment-&lt;/strong&gt; The model has crossed the baseline, and it‚Äôs time to deploy it: the trained model artifacts path and the Docker registry path of the inference code. In SageMaker, the model can be implemented by using CreateModel API, defining the configuration of HTTPS endpoint and creating it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Monitoring-&lt;/strong&gt; The model performance is monitored in real-time, the ground values of data are saved into s3, and the performance deviation is analyzed. This will give the instance where the drift started; then, it is trained on new samples saving in real-time in a bucket.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-preparation-using-sagemaker"&gt;
  &lt;/a&gt;
  Data Preparation using SageMaker
&lt;/h3&gt;

&lt;p&gt;A machine learning model depends entirely upon the data. Higher the data quality more efficient the model will be.&lt;/p&gt;

&lt;p&gt;At Amazon SageMaker, the labeling of data is not too difficult. The user can either opt for the private, public, or vendor workforce. In the private and vendor, the user runs the labeling job on its own or uses third-party APIs, and it requires some agreement of confidentiality statements. In the public workforce, a service called Amazon Mechanical Turk Workforce creates a labeling job and gives the status of successful or failed labeled jobs. Below are the steps ‚Äì&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Store data in the s3 bucket and define a manifest file for which the labeling job will run.&lt;/li&gt;
&lt;li&gt;Create a labeling workforce by choosing the workforce type.&lt;/li&gt;
&lt;li&gt;Create a labeling job by choosing the job type such as Image Classification, Text Classification, Bounding Box, etc.&lt;/li&gt;
&lt;li&gt;For example, the chosen job is of Bounding Box, then draw a bounding box around your desired object and give it a label.
Visualize your results by seeing the confidence score and other metrics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RxInrb_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hi4whfl0uo1bixnxrjo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RxInrb_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hi4whfl0uo1bixnxrjo.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-hyperparameter-tuning-at-sagemaker"&gt;
  &lt;/a&gt;
  What is Hyperparameter Tuning at SageMaker?
&lt;/h2&gt;

&lt;p&gt;Parameters that define the model architecture Known as hyperparameters, and the process of searching for the ideal model architecture is called hyperparameter tuning. It consists of listed below methods:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Random Search-&lt;/strong&gt; As the defined list of hyperparameters for the name implies, select the combinations at random, and a training job is run on it. SageMaker provides the concurrent running of jobs for finding the best hyperparameter without interrupting the current training job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bayesian Search-&lt;/strong&gt; SageMaker has its Bayesian Search algorithm. The algorithm works by checking the performance of previously used combinations of hyperparameters in a job and explores the new combination using the supplied list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-for-hyperparameter-tuning"&gt;
  &lt;/a&gt;
  Steps for Hyperparameter Tuning
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;For the testing of a training task, the metrics are specified when developing a hyperparameter tuning work. Only 20 criteria can be specified for a single task; the parameters have a unique name with their regular expression to extract information from the logs.&lt;/li&gt;
&lt;li&gt;The defined hyperparameter ranges for the parameter type, i.e., a distinction is between the parameter type in the ParameterRanges JSON object.&lt;/li&gt;
&lt;li&gt;Create a notebook on SageMaker and connect with SageMaker‚Äôs Boto3 client.&lt;/li&gt;
&lt;li&gt;Specify the bucket and data output location and launch the configured hyperparameter tuning job defined in step 1. and 2.&lt;/li&gt;
&lt;li&gt;Monitor the progress of concurrently running hyperparameter tuning jobs and find the best model on SageMaker‚Äôs console by clicking on the best training job.
&lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html"&gt;Read more about How Hyperparameter Tuning Works.&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#best-practices-for-amazon-sagemaker"&gt;
  &lt;/a&gt;
  Best practices for Amazon Sagemaker
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Defining the number of parameters:&lt;/strong&gt; To limit the search space and find the best variables for a model, SageMaker allows the use of 20 parameters in a hyperparameter tuning job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Defining the range of hyperparameters:&lt;/strong&gt; Defining a broader range for hyperparameters allows finding the best possible values, but it is time-consuming. Find the best value by limiting the range of benefits, and limit the search space for that range.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Logarithmic scaling of hyperparameters:&lt;/strong&gt; If the search space is small, define hyperparameters‚Äô scaling as linear. If the search space is a large opt logarithmic scaling because it decreases the running time of jobs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finding the best number of concurrent training jobs:&lt;/strong&gt; More work done quickly in concurrent jobs, but the tuning jobs depend upon previous runs‚Äô results. In other words, running a job can achieve the best results with the least amount of computing time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Running training jobs on multiple instances:&lt;/strong&gt; Running a training job on multiple instances uses the last-reported objective metric. For examining all the parameters, design a distributed training job architecture for getting the logs of the desired metric.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-amazon-sagemaker-studio"&gt;
  &lt;/a&gt;
  What is Amazon SageMaker Studio?
&lt;/h2&gt;

&lt;p&gt;SageMaker studio is for doing machine learning with a fully functional Integrated Development Environment (IDE). It is a unification of all the key features of SageMaker. In SageMaker Studio, the user can write code in the notebook environment, perform visualization, debugging, model tracking, and monitor the model performance in a single window. It uses the following features of SageMaker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e0f3XlX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvj3qe2lm0wplsqi4v5n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e0f3XlX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvj3qe2lm0wplsqi4v5n.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-sagemaker-debugger"&gt;
  &lt;/a&gt;
  Amazon SageMaker Debugger
&lt;/h2&gt;

&lt;p&gt;The SageMaker debugger will monitor the values of feature vectors and hyperparameters. Store the logs of a debug job in CloudWatch, check the exploding tensors, examine the vanishing gradient problems, and save the tensor values in the s3 bucket. By placing SaveConfig from the debugger SDK at the instance where the value of the tensors needs to be checked and SessionHook will be associated at the start of every debugging job run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OA0FGxR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0ewfzyj61c0g8zjq0ut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OA0FGxR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0ewfzyj61c0g8zjq0ut.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-sagemaker-model-monitor"&gt;
  &lt;/a&gt;
  Amazon SageMaker Model Monitor
&lt;/h2&gt;

&lt;p&gt;SageMaker model monitors the model performance by examining the data drift. The defined constraints and statistics file of features are in JSON. The constraint.json file contains the list of features with their type, and the required status is defined by the completeness field whose value ranges from 0-1, and statistics.json the file contains the mean, median, quantile, etc. information for each feature. The reports are saved in s3 and can be viewed in detail under constraint_violations.json which consists of feature names and type of violation (data type, min or max value of a feature, etc.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-sagemaker-model-experiment"&gt;
  &lt;/a&gt;
  Amazon SageMaker Model Experiment
&lt;/h2&gt;

&lt;p&gt;Tracking several experiments (training, hyperparameter tuning jobs, etc.) is easier than SageMaker. Just initialize an Estimator object and log the experiment values. It is possible to import values stored in the experiment into a pandas data frame and makes analysis easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FW9wdLiz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqk9klqutcels1tj9z17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FW9wdLiz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqk9klqutcels1tj9z17.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-sagemaker-autopilot"&gt;
  &lt;/a&gt;
  Amazon SageMaker AutoPilot
&lt;/h2&gt;

&lt;p&gt;ML using AutoPilot is just a click away. Specify the data path and the target attribute(regression, binary classification, or multi-class classification) type. If not specified, the built-in algorithms automatically specify the target type and run the data preprocessing and model according to it. The data preprocessing step automatically generates Python code to use for further jobs. A defined custom pipeline use for it. DescribeAutoMlJob API.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Objective of the Machine learning pipeline is to exercise control over the ML model.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#running-custom-training-algorithms"&gt;
  &lt;/a&gt;
  Running custom training algorithms
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Run the dockerized training image on SageMaker&lt;/li&gt;
&lt;li&gt;The SageMaker calls a CreateTrainingJob the function which runs training for a specific period&lt;/li&gt;
&lt;li&gt;Specify the hyperparameters in TrainingJobName&lt;/li&gt;
&lt;li&gt;Check the status by TrainingJobStatus&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#security-at-sagemaker"&gt;
  &lt;/a&gt;
  Security at SageMaker
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Cloud Security:&lt;/strong&gt; AWS uses a shared responsibility model, which involves security in the cloud by AWS for securing the infrastructure and security of the cloud, which involves the services opted by a customer, IAM key management, and privileges to different users, keeping the credentials secure, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Security:&lt;/strong&gt; SageMaker keeps the data and model artifacts encrypted in transit and rest. Requests for a secure (SSL) connection to the Amazon SageMaker API and console. Encrypted notebooks and scripts are using AWS KMS(Key Management Service) Key. If the key is not available, these are encrypted by using the transient key. After the decryption, this transient key becomes obsolete.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-advantages-of-sagemaker"&gt;
  &lt;/a&gt;
  What are the Advantages of SageMaker?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It uses a debugger in training that has a specified range of hyperparameters automatically.&lt;/li&gt;
&lt;li&gt;Helps to deploy End to end ML pipeline quickly.&lt;/li&gt;
&lt;li&gt;It helps to deploy ML models at the edge using SageMaker Neo.&lt;/li&gt;
&lt;li&gt;ML compute instance suggests the instance type while running the training.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;AWS charges each SageMaker customer for the computation, storage, and data processing tools used to build, train, perform and log machine learning models and predictions, along with the S3 costs to maintain the data sets used for training and ongoing predictions. The SageMaker framework‚Äôs design supports ML applications‚Äô and end-to-end lifecycle, from model data creation to model execution, and the scalable construction also makes it versatile. That means you can choose to use SageMaker independently for model construction, training, or deployment.&lt;/p&gt;

&lt;p&gt;Hope this guide helps you understand on How to Get Started With AWS SageMaker, feel free to connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn.&lt;/a&gt;&lt;br&gt;
You can view my badges &lt;a href="https://www.youracclaim.com/users/adit-modi/badges"&gt;here.&lt;/a&gt;&lt;br&gt;
If you are interested in learning more about AWS Services then follow me on &lt;a href="https://github.com/AditModi"&gt;github.&lt;/a&gt;&lt;br&gt;
If you liked this content then do clap and share it . Thank You .&lt;/p&gt;

</description>
    </item>
    <item>
      <title>My process for writing blog articles with actionable steps you can follow</title>
      <author>Kieran Roberts üëã</author>
      <pubDate>Fri, 30 Apr 2021 12:25:38 +0000</pubDate>
      <link>https://dev.to/kieran6roberts/my-process-for-writing-blog-articles-with-actionable-steps-you-can-follow-2all</link>
      <guid>https://dev.to/kieran6roberts/my-process-for-writing-blog-articles-with-actionable-steps-you-can-follow-2all</guid>
      <description>&lt;p&gt;If you've ever tried writing blog articles yourself I'm sure you've realized it is not an easy thing. There are difficulties at every stage of the process from planning all the way through to publishing. I want to share my process from beginning to end which so far seems to be working &lt;strong&gt;for me&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Everyone is different. What works for me might not work for you. But in the very least it will give you some idea of how you can go about it. &lt;/p&gt;

&lt;p&gt;Consistency is key and consistency becomes easier if you are able to break down the problem into manageable steps.&lt;/p&gt;

&lt;p&gt;Here are my steps for writing articles üëè.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-blogging-steps"&gt;
  &lt;/a&gt;
  My Blogging Steps
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Pick a topic

&lt;ul&gt;
&lt;li&gt;What should I write about?&lt;/li&gt;
&lt;li&gt;Use your experiences with the chosen topic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Plan the the main points

&lt;ul&gt;
&lt;li&gt;Write out the main headings&lt;/li&gt;
&lt;li&gt;Show the reader a preview of the main topics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write the introduction

&lt;ul&gt;
&lt;li&gt;Start with what you want the article to achieve&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Start writing 

&lt;ul&gt;
&lt;li&gt;Write/read/check and repeat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Proof read your work

&lt;ul&gt;
&lt;li&gt;From the heading to the last character&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Publishing

&lt;ul&gt;
&lt;li&gt;Where to publish?&lt;/li&gt;
&lt;li&gt;Create a custom article preview image&lt;/li&gt;
&lt;li&gt;Share it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-pick-a-topic"&gt;
  &lt;/a&gt;
  1) Pick a Topic
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What should I write about?&lt;/strong&gt; ü§î&lt;/p&gt;

&lt;p&gt;This is usually one of my biggest problems for new writers. It was difficult for me to know what to write about at first. I would think that I didn't know enough about something to write a whole article on it. But I soon realized you don't need to be an expert.&lt;/p&gt;

&lt;p&gt;Just sharing your experience on a topic is enough. More than enough, it's awesome üòâ. If you're stuck on ideas I will offer a solution that's worked for me thus far.&lt;/p&gt;

&lt;p&gt;Think about what you're currently learning/ working on or recently worked with. &lt;/p&gt;

&lt;p&gt;Maybe your learning about the CSS Box Model. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write about that!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Or maybe your working on or recently finished a personal project. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write about that!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Or perhaps you've been optimizing your site for performance scores.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write about that!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As developers we're always working on something so why not use that as a focus for your articles.&lt;/p&gt;

&lt;p&gt;I promise that if you keep writing consistently then ideas will start to flow and it will become easier. Now I regularly have multiple drafts on the go which is great because now I can plan ahead. &lt;/p&gt;

&lt;p&gt;If you think of an idea &lt;strong&gt;write a few points inside a draft&lt;/strong&gt; or wherever else you can in case you forget later on!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use your experiences with the chosen topic&lt;/strong&gt; üôÇ&lt;/p&gt;

&lt;p&gt;Great! Now you have a topic and you've chosen something you've recently worked with and because you have, you are in a position where you can apply your own experience. It is an awesome thing when you can apply this knowledge to your articles.&lt;/p&gt;

&lt;p&gt;One of my earlier articles was all about the benefits I had personally experienced since taking up a blog. Because it was something I was actively working with I was able to provide tips I knew were real.&lt;/p&gt;

&lt;p&gt;You can check out that article here üëâ &lt;a href="https://blog.kieranroberts.dev/why-its-awesome-for-new-developers-to-blog-as-they-learn"&gt;Why it's awesome for new developers to blog as they learn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will help your articles to connect with the readers if you apply your own experience to the problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-plan-the-main-points"&gt;
  &lt;/a&gt;
  2.) Plan the main points
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Write out the main headings&lt;/strong&gt; ‚úç&lt;/p&gt;

&lt;p&gt;Now that you have a great topic in mind let's start with the article üòÉ.&lt;/p&gt;

&lt;p&gt;Start by listing the main topics that you expect to cover in the article and format them into headers. This gives you an idea of the structure of your article and also means you won't forget to cover an important point later on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Show the reader a preview of the main topics&lt;/strong&gt; üòÉ&lt;/p&gt;

&lt;p&gt;This is something I like to do but it's up to you. Unless it's a very short article I like to see a content list near the top that gives me an outline of the main topics covered. You can use the headings you created and turn them into a list.&lt;/p&gt;

&lt;p&gt;It's nice to cater to the reader when possible. Not every reader is going to read the whole article. Listing the main content covered gives them the ability to better find the things they might be looking for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-write-the-introduction"&gt;
  &lt;/a&gt;
  3.) Write the introduction
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Start with what you want the article to achieve&lt;/strong&gt; üëè&lt;/p&gt;

&lt;p&gt;I sometimes write my introduction before I do anything else. Usually I know the problem I want to write about and what I hope to achieve with the article. &lt;/p&gt;

&lt;p&gt;You could also write it at the end when you know exactly what the outcome of the article is. Sometimes the article goes a different direction than you were expecting so this might be a good idea. It's up to you!&lt;/p&gt;

&lt;p&gt;These are my primary tips for writing it üëá&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep it concise. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It doesn't need to be longer than a couple of paragraphs. If it has to be then maybe there is enough content for multiple articles and you should consider splitting things up.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Outline the main topic/problem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Give the reader a quick summary of the overall topic. This could be explaining what it means or why it is a thing/problem/amazing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What you hope the reader will get from your article&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, explain briefly what the reader should know after reading through your piece.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-start-writing"&gt;
  &lt;/a&gt;
  4.) Start writing
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Write/read/check and repeat&lt;/strong&gt; ‚úç&lt;/p&gt;

&lt;p&gt;I'm not going to get too deep into writing tips in this article but I will offer a few things to look out for. &lt;/p&gt;

&lt;p&gt;Try to keep it concise with simple language. When I look back to my earlier articles I noticed I was not doing this. My sentences were long and I was using far too many breaks. It breaks the reading flow for the reader.&lt;/p&gt;

&lt;p&gt;Another tip is to watch out for what you include in the article. Keep this in mind when your writing üëá.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Work through your headings from top to bottom and write about the things that will help you accomplish the tasks/problem/topic you outlined in the introduction&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If it doesn't help with this then leave it out or link to another article that goes into more depth.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-proofread-your-work"&gt;
  &lt;/a&gt;
  5.) Proofread your work
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;From the heading to the last character&lt;/strong&gt; üßê&lt;/p&gt;

&lt;p&gt;Great! Now you might think you're done? &lt;strong&gt;Guess again&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It's time to read back through the article from top to the bottom. Read every sentence from the heading to the final character. You'd be surprised to see all of the mistakes I've caught in the headings üòÖ.&lt;/p&gt;

&lt;p&gt;By doing this you'll not only catch spelling mistakes but you'll spot sentences that don't make sense in the flow of the rest of the work. &lt;/p&gt;

&lt;p&gt;Once you get in the flow of writing you become oblivious to spelling and grammar errors so this is a really important step (I make a lot of typing errors üòÇ).&lt;/p&gt;

&lt;p&gt;But after reading through you can catch them before anyone finds out üòã.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-publishing"&gt;
  &lt;/a&gt;
  6.) Publishing
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Where to publish?&lt;/strong&gt; ü§î&lt;/p&gt;

&lt;p&gt;The final step is to publish your article. &lt;strong&gt;Congrats!! You're nearly there.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are a couple of great platforms that I would recommend. Firstly here on Dev.to. It has a great community and your articles are almost guaranteed to be viewed by lots of people. It's where I started writing and I would be happy to recommend this platform to others.&lt;/p&gt;

&lt;p&gt;Another great option is over on &lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt;. The great thing about Hashnode is that you can publish your articles to your own domain while still seeing the flow of traffic to your articles that you get from a community blogging site.&lt;/p&gt;

&lt;p&gt;If you like to cross-post your articles to other sites then you should be careful. Don't forget to set the canonical link to the location it was first posted. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a custom article preview image&lt;/strong&gt; üôÇ&lt;/p&gt;

&lt;p&gt;Adding a preview image to the top of your article can help it to stand out from the crowd. It's not too difficult to come up with something reasonable. &lt;/p&gt;

&lt;p&gt;If you've read any of my other articles you will have noticed I created a template that I customize each time. Yours doesn't have to be like this but it might be good to create something that is unique to you.&lt;/p&gt;

&lt;p&gt;As a developer you could create one yourself using CSS like I did or you could use a design tool like Figma. An attractive preview image can help attract readers to your content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Share it&lt;/strong&gt; ü§ù&lt;/p&gt;

&lt;p&gt;Now you have it deployed it's time to share the article! It's likely that you use social media so share it with friends and other like-minded developers. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this look into my process is able to help or motivate you in some way. It is important to know that you don't have to be an expert to blog. It's given me so much in so little time since I started two months ago. &lt;/p&gt;

&lt;p&gt;Just start and see where you end up!!&lt;/p&gt;

&lt;p&gt;You can find me over &lt;a href="https://twitter.com/Kieran6dev"&gt;@Kieran6dev&lt;/a&gt; so come and say hi! If you liked the article please leave some likes or consider following me for future articles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/kieran6roberts"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EHf27Dhb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520beer%26emoji%3D%25F0%259F%258D%25BA%26slug%3Dkieran6roberts%26button_colour%3DFFDD00%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3Dffffff"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks!! üëã&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>I (roughly) defined (almost) every array method using recursion üòÇ</title>
      <author>Jason Yu</author>
      <pubDate>Fri, 30 Apr 2021 12:07:51 +0000</pubDate>
      <link>https://dev.to/ycmjason/i-roughly-defined-almost-every-array-methods-using-recursion-741</link>
      <guid>https://dev.to/ycmjason/i-roughly-defined-almost-every-array-methods-using-recursion-741</guid>
      <description>&lt;p&gt;So... I have decided to define every array methods using recursion. (I haven't really tested all of them... so there might be some errors.)&lt;/p&gt;

&lt;p&gt;Also, I only defined the "essence" of most methods. Didn't follow the complete spec for most.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h1&gt;

&lt;p&gt;Why not?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-is-this-useful"&gt;
  &lt;/a&gt;
  How is this useful?
&lt;/h1&gt;

&lt;p&gt;It is not.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-raw-arrayfrom-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.from&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Array.from&lt;/code&gt; takes in two kinds of objects.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Array-like objects that have a &lt;code&gt;length&lt;/code&gt; property with zero-indexed elements&lt;/li&gt;
&lt;li&gt;Iterable objects that have an iterator at &lt;code&gt;[Symbol.iterator]&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayFrom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;length&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arrayFromArrayLike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iterator&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arrayFromIterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;]())&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayFromArrayLike&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayLikeObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayLikeObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arrayFromArrayLike&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arrayLikeObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;arrayLikeObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="nx"&gt;arrayLikeObject&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arrayLikeObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayFromIterator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arrayFromIterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: we ignore the 2nd and 3rd arguments of &lt;code&gt;Array.from&lt;/code&gt;. (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from"&gt;see docs&lt;/a&gt;)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-raw-arrayof-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.of&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arrayOf&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-arrayprototypeconcat-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.concat&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;concat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arrays&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;restArrays&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrays&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;restArrays&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ys&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;restArrays&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: assuming concat only takes in 2 parameters&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-raw-arrayprototypeentries-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.entries&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;note: &lt;code&gt;i&lt;/code&gt; does not exist in &lt;code&gt;Array.prototype.entries&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-raw-arrayprototypeevery-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.every&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;every&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-arrayprototypefill-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.fill&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fillFromStart&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fillFromStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;fillFromStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-arrayprototypefilter-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.filter&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...(&lt;/span&gt;&lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]),&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-arrayprototypefind-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.find&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;find&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-arrayprototypefindindex-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.findIndex&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-arrayprototypeforeach-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.forEach&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;forEach&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;notes: ignoring index&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-raw-arrayprototypeincludes-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.includes&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;includes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-arrayprototypeindexof-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.indexOf&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;indexOf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-arrayprototypejoin-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.join&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;separator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;separator&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;separator&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-arrayprototypemap-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.map&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-arrayprototypereduce-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.reduce&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Reduce of empty array with no initial value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-arrayprototypereverse-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.reverse&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-arrayprototypeslice-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.slice&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;Slice is a surprisingly annoying one to define. It needs to deal with negative indices, but you can't simply "mod" the numbers...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-arrayprototypesome-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.some&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>recursion</category>
    </item>
    <item>
      <title>Digit Emoji Predictor: Build UI for Deep Learning model in Notebook</title>
      <author>Aravind Ramalingam</author>
      <pubDate>Fri, 30 Apr 2021 12:03:13 +0000</pubDate>
      <link>https://dev.to/6aravind/digit-emoji-predictor-build-ui-for-deep-learning-model-in-notebook-2gf0</link>
      <guid>https://dev.to/6aravind/digit-emoji-predictor-build-ui-for-deep-learning-model-in-notebook-2gf0</guid>
      <description>&lt;p&gt;Build a digit emoji predictor in Jupyter notebook by passing data between JavaScript &amp;amp; Python. Typically, JavaScripts are used for data visualization in notebooks, but it can also be used for prototyping front-end/UI for deep learning models.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-the-hell-build-ui-in-notebook"&gt;
  &lt;/a&gt;
  Why the hell build UI in notebook?
&lt;/h1&gt;

&lt;p&gt;Short Answer: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Share the Deep Learning model notebook with colleagues from different teams like Business, Data Science, Front End developer, DevOps for their opinion before the real software development takes place.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jupyter notebook is meant for quick prototyping and everyone knows this but what many misses is we can also do a quick prototype of UI as well. Many data scientists are &lt;b&gt;quick to start&lt;/b&gt; building the big deep learning model with whatever little data they have without even thinking about what they are developing and for whom ü§∑‚Äç‚ôÇÔ∏è. Trust me, the first model you are satisfied with (based on the metrics like accuracy) won't be deployed into production for various reasons like slow inference time, no on-device support, memory hogging blah blah. &lt;br&gt; &lt;br&gt;


Even experienced project/product managers sometimes won't know what they really want so first try to get the workflow or pipeline agreement from all the players involved, even with this some things will slip through the crack.  "&lt;u&gt;I am data scientist, My job is only to build ML models is not the right mindset, at least in my opinion.&lt;/u&gt;" A tad bit of knowledge in  Business, Web development, DevOps can help you save a ton of time in trying to debug, or explain why the model/workflow you built is the best for business. Better to be jack of all trades here. BTW, this does not mean that you should take over the responsibilities of your colleagues. Just try to get a sense of what is happening outside your circle. In this post, Let me share an example of how creating a simple UI for input &amp;amp; output for deep learning model can help you see the cracks in your workflow and increase productivity.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#application"&gt;
  &lt;/a&gt;
  Application
&lt;/h1&gt;

&lt;p&gt;If you are not familiar with &lt;a href="https://www.kaggle.com/c/digit-recognizer"&gt;MNIST&lt;/a&gt; dataset  then just know that you can build a &lt;strong&gt;Digit Emoji Predictor&lt;/strong&gt; as the dataset contains gray-scale images of hand-drawn digits, from zero through nine. So our UI is going to let the user draw a digit &amp;amp; display the corresponding emoji.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u6CpIwhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jrpa04jefxsq1l46agl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6CpIwhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jrpa04jefxsq1l46agl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#okay-i-am-somewhat-convinced-to-build-ui-but-now-what"&gt;
  &lt;/a&gt;
  Okay, I am somewhat convinced to build UI but now what?
&lt;/h1&gt;

&lt;p&gt;Firstly, we will decide what we are going to build? Instead of creating from scratch let us try to recreate &lt;a href="https://towardsdatascience.com/deploying-your-first-deep-learning-model-mnist-in-production-environment-510bfdc4808d"&gt;Digit Recognizer&lt;/a&gt; in notebook without using Django. The use case we have chosen is great because we can't simply use &lt;code&gt;pywidgets&lt;/code&gt;, this forces us to dig deep into the world of HTML &amp;amp; Javascript. In the longer run this route has more benefits because of unlimited capability, free resource and more importantly closer to the actual front-end. Ofcourse if all you want is a slider then just roll with &lt;code&gt;pywidgets&lt;/code&gt;. We will first setup the back-end and then get back to the UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H2N6SKzb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/600/1%2AO7dIAVNyGA-J4U3fcQLZNg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H2N6SKzb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/600/1%2AO7dIAVNyGA-J4U3fcQLZNg.gif" alt="Digit Recognizer"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#digit-emoji-recognizer"&gt;
  &lt;/a&gt;
  Digit Emoji Recognizer
&lt;/h1&gt;

&lt;p&gt;I have trained the CNN Deep learning model using the &lt;code&gt;pytorch&lt;/code&gt;, we will just download the model &amp;amp; weights from &lt;a href="https://github.com/6aravind/tidbits/blob/main/assets/models/mnist_model.pth"&gt;here&lt;/a&gt;. This is a simple model with 3 &lt;em&gt;Conv blocks&lt;/em&gt; and 2 &lt;em&gt;Fully connected layer&lt;/em&gt;. The Transformations used for this model are &lt;code&gt;Resize&lt;/code&gt; &amp;amp; &lt;code&gt;ToTensor&lt;/code&gt;. Upon calling the &lt;code&gt;predict&lt;/code&gt; function on the image, we will get the predicted digit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;torch&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;torch.nn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;torch.nn.functional&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;torchvision&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;transforms&lt;/span&gt;

&lt;span class="c1"&gt;# Digit Recognizer model definition
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CNN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CNN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conv1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conv2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conv2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conv2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conv3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conv2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fc1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fc2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conv1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;training&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;training&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_pool2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conv2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;training&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;training&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_pool2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conv3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;training&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;training&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fc1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;training&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;training&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fc2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;



&lt;span class="c1"&gt;# Predict the digit given the tensor
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;modelName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'mnist_model.pth'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# Resize before converting the image to Tensor
&lt;/span&gt;    &lt;span class="n"&gt;Trfms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Compose&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;transforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;transforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToTensor&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;

    &lt;span class="c1"&gt;# Apply transformations and increase dim for mini-batch dimension
&lt;/span&gt;    &lt;span class="n"&gt;imageTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Trfms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unsqueeze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Download model from URL and load it
&lt;/span&gt;    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modelName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Activate Eval mode
&lt;/span&gt;    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Pass the image tensor by the model &amp;amp; return max index of output
&lt;/span&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;no_grad&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageTensor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need a helper function to convert &lt;strong&gt;BASE64 Image&lt;/strong&gt; (canvas area in which the user is going to draw the digit) to &lt;strong&gt;PIL Image&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BytesIO&lt;/span&gt;

&lt;span class="c1"&gt;# Decode the image drawn by the user
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decodeImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;codec&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# remove the front part of codec
&lt;/span&gt;    &lt;span class="n"&gt;base64_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'^data:image/.+;base64,'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;codec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# base64 decode
&lt;/span&gt;    &lt;span class="n"&gt;byte_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base64_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Convert to bytes
&lt;/span&gt;    &lt;span class="n"&gt;image_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BytesIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;byte_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Convert to image &amp;amp; convert to grayscale
&lt;/span&gt;    &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'L'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us combine the two functions namely &lt;code&gt;decodeImage&lt;/code&gt; and &lt;code&gt;predict&lt;/code&gt; as a separate function. This way is easier because the output of the function (emoji html code) can be directly passed to the HTML tag via JavaScript. Hang on for a bit if you are confused, things will get much easier to follow in the next section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Decode the image and predict the value
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decode_predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imgStr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# Decode the image
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decodeImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imgStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Declare html codes for 0-9 emoji
&lt;/span&gt;    &lt;span class="n"&gt;emojis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
            &lt;span class="s"&gt;"&amp;amp;#48;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#49;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#50;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#51;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#52;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#53;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#54;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#55;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#56;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#57;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# Call the predict function
&lt;/span&gt;    &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# get corresponding emoji
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;emojis&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#ui"&gt;
  &lt;/a&gt;
  UI
&lt;/h1&gt;

&lt;p&gt;The HTML &amp;amp; CSS part are quite straight forward, the JavaScript lets the user to draw inside the canvas and call functions via the buttons &lt;code&gt;Predict&lt;/code&gt; &amp;amp; &lt;code&gt;Clear&lt;/code&gt;. The &lt;code&gt;Clear&lt;/code&gt; button cleans up the canvas and sets the result to ü§î emoji. We will setup the &lt;code&gt;Predict&lt;/code&gt; button JS function in the next section.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt;

&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""
&amp;lt;div class="outer"&amp;gt;
        &amp;lt;! -- HEADER SECTION --&amp;gt;
    &amp;lt;div&amp;gt; 
        &amp;lt;h3 style="margin-left: 30px;"&amp;gt; Digit Emoji Predictor &amp;amp;#128640; &amp;lt;/h3&amp;gt; 
        &amp;lt;br&amp;gt;
        &amp;lt;h7 style="margin-left: 40px;"&amp;gt; Draw a digit from &amp;amp;#48;&amp;amp;#65039;&amp;amp;#8419; - &amp;amp;#57;&amp;amp;#65039;&amp;amp;#8419;&amp;lt;/h7&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div&amp;gt;
           &amp;lt;! -- CANVAS TO DRAW THE DIGIT --&amp;gt;
        &amp;lt;canvas id="canvas" width="250" height="250" style="border:2px solid; float: left; border-radius: 5px; cursor: crosshair;"&amp;gt;
        &amp;lt;/canvas&amp;gt;

            &amp;lt;! -- SHOW PREDICTED DIGIT EMOJI--&amp;gt;
        &amp;lt;div class="wrapper1"&amp;gt; &amp;lt;p id="result"&amp;gt;&amp;amp;#129300;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;

            &amp;lt;! -- BUTTONS TO CALL DL MODEL &amp;amp; CLEAR THE CANVAS --&amp;gt;
        &amp;lt;div class="wrapper2"&amp;gt;
            &amp;lt;button type="button" id="predictButton" style="color: #4CAF50;margin:10px;"&amp;gt;  Predict &amp;lt;/button&amp;gt;  
            &amp;lt;button type="button" id="clearButton" style="color: #f44336;margin:10px;"&amp;gt;  Clear &amp;lt;/button&amp;gt;  
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
"""&lt;/span&gt;


&lt;span class="n"&gt;css&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""
&amp;lt;style&amp;gt;
    .wrapper1 {
      text-align: center;
      display: inline-block;
      position: absolute;
      top: 82%;
      left: 25%;
      justify-content: center;
      font-size: 30px;
    }
    .wrapper2 {
      text-align: center;
      display: inline-block;
      position: absolute;
      top: 90%;
      left: 19%;
      justify-content: center;
    }

    .outer {
        height: 400px; 
        width: 400px;
        justify-content: center;
    }

&amp;lt;/style&amp;gt;
"""&lt;/span&gt;


&lt;span class="n"&gt;javascript&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""

&amp;lt;script type="text/javascript"&amp;gt;
(function() {
    /* SETUP CANVAS &amp;amp; ALLOW USER TO DRAW */
    var canvas = document.querySelector("#canvas");
    canvas.width = 250;
    canvas.height = 250;
    var context = canvas.getContext("2d");
    var canvastop = canvas.offsetTop
    var lastx;
    var lasty;
    context.strokeStyle = "#000000";
    context.lineCap = 'round';
    context.lineJoin = 'round';
    context.lineWidth = 5;

    function dot(x, y) {
        context.beginPath();
        context.fillStyle = "#000000";
        context.arc(x, y, 1, 0, Math.PI * 2, true);
        context.fill();
        context.stroke();
        context.closePath();
    }

    function line(fromx, fromy, tox, toy) {
        context.beginPath();
        context.moveTo(fromx, fromy);
        context.lineTo(tox, toy);
        context.stroke();
        context.closePath();
    }
    canvas.ontouchstart = function(event) {
        event.preventDefault();
        lastx = event.touches[0].clientX;
        lasty = event.touches[0].clientY - canvastop;
        dot(lastx, lasty);
    }
    canvas.ontouchmove = function(event) {
        event.preventDefault();
        var newx = event.touches[0].clientX;
        var newy = event.touches[0].clientY - canvastop;
        line(lastx, lasty, newx, newy);
        lastx = newx;
        lasty = newy;
    }
    var Mouse = {
        x: 0,
        y: 0
    };
    var lastMouse = {
        x: 0,
        y: 0
    };
    context.fillStyle = "white";
    context.fillRect(0, 0, canvas.width, canvas.height);
    context.color = "black";
    context.lineWidth = 10;
    context.lineJoin = context.lineCap = 'round';
    debug();
    canvas.addEventListener("mousemove", function(e) {
        lastMouse.x = Mouse.x;
        lastMouse.y = Mouse.y;
        Mouse.x = e.pageX - canvas.getBoundingClientRect().left;
        Mouse.y = e.pageY - canvas.getBoundingClientRect().top;
    }, false);
    canvas.addEventListener("mousedown", function(e) {
        canvas.addEventListener("mousemove", onPaint, false);
    }, false);
    canvas.addEventListener("mouseup", function() {
        canvas.removeEventListener("mousemove", onPaint, false);
    }, false);
    var onPaint = function() {
        context.lineWidth = context.lineWidth;
        context.lineJoin = "round";
        context.lineCap = "round";
        context.strokeStyle = context.color;
        context.beginPath();
        context.moveTo(lastMouse.x, lastMouse.y);
        context.lineTo(Mouse.x, Mouse.y);
        context.closePath();
        context.stroke();
    };

    function debug() {
        /* CLEAR BUTTON */
        var clearButton = $("#clearButton");
        clearButton.on("click", function() {
            context.clearRect(0, 0, 250, 250);
            context.fillStyle = "white";
            context.fillRect(0, 0, canvas.width, canvas.height);

            /* Remove Result */
            document.getElementById("result").innerHTML = "&amp;amp;#129300;";
        });
        $("#colors").change(function() {
            var color = $("#colors").val();
            context.color = color;
        });
        $("#lineWidth").change(function() {
            context.lineWidth = $(this).val();
        });
    }
}());

&amp;lt;/script&amp;gt;

"""&lt;/span&gt;


&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;css&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;javascript&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Unpws4oG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vdy7hbwv96nrsm05p2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Unpws4oG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vdy7hbwv96nrsm05p2q.png" alt="Digit Emoji Recognizer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! We are able to draw inside the canvas and upon clicking the &lt;code&gt;Clear&lt;/code&gt; button, canvas is cleaned up. The tricky part starts when the user clicks the &lt;code&gt;Predict&lt;/code&gt; button as we have do the following: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://jakevdp.github.io/blog/2013/06/01/ipython-notebook-javascript-python-communication/"&gt;JS to Python üëâ&lt;/a&gt; Grab the drawing inside the canvas and pass it to python
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="cm"&gt;/* PASS CANVAS BASE64 IMAGE TO PYTHON VARIABLE imgStr*/&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;imgData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvasObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDataURL&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;imgVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;imgStr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;passImgCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;imgVar&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; = '&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;imgData&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;kernel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;IPython&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notebook&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;passImgCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://towardsdatascience.com/javascript-charts-on-jupyter-notebooks-dd25f794cf6a"&gt;Python to JS üëâ&lt;/a&gt; Set the predicted emoji as the value of HTML element (&lt;code&gt;#result&lt;/code&gt;)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="cm"&gt;/* CALL PYTHON FUNCTION "decode_predict" WITH "imgStr" AS ARGUMENT */&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handle_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* UPDATE THE HTML BASED ON THE OUTPUT */&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/plain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;callbacks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iopub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;handle_output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;getPredictionCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;decode_predict(imgStr)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getPredictionCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callbacks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Linking all together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;predictJS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""
&amp;lt;script type="text/javascript"&amp;gt;

/* PREDICTION BUTTON */
$("#predictButton").click(function() {
    var canvasObj = document.getElementById("canvas");
    var context = canvas.getContext("2d");

    /* PASS CANVAS BASE64 IMAGE TO PYTHON VARIABLE imgStr*/
    var imgData = canvasObj.toDataURL();
    var imgVar = 'imgStr';
    var passImgCode = imgVar + " = '" + imgData + "'";
    var kernel = IPython.notebook.kernel;
    kernel.execute(passImgCode);

    /* CALL PYTHON FUNCTION "decode_predict" WITH "imgStr" AS ARGUMENT */
    function handle_output(response) {
        /* UPDATE THE HTML BASED ON THE OUTPUT */
        var result = response.content.data["text/plain"].slice(1, -1);
        document.getElementById("result").innerHTML = result;
    }
    var callbacks = {
        'iopub': {
            'output': handle_output,
        }
    };
    var getPredictionCode = "decode_predict(imgStr)";
    kernel.execute(getPredictionCode, callbacks, { silent: false });
});
&amp;lt;/script&amp;gt;

"""&lt;/span&gt;
&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predictJS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--euTku_zY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpbgrqdwn7sw1h5rgywm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--euTku_zY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpbgrqdwn7sw1h5rgywm.gif" alt="Wrong Predictions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have both good &amp;amp; bad news, the good thing is data connection between Python and Javascript works but the prediction values are all wrong (mapped to same value - 8). Let us compare the canvas image passed to python and MNIST dataset image.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;center&gt; Canvas Image &lt;center&gt;&lt;/center&gt;
&lt;/center&gt;&lt;/th&gt;
&lt;th&gt;&lt;center&gt; MNIST Image &lt;center&gt;&lt;/center&gt;
&lt;/center&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2lGtl15Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfy3ue69lz8xn7ns9xf1.png" alt="Canvas Image 2"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DGY20AVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qemc6brwd2p2mute6xu.png" alt="MNIST Image 2"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;It is very clear now that we need to &lt;code&gt;invert&lt;/code&gt; the image because the model was trained on the dataset with black background and white strokes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Invert the image as model expects black background &amp;amp; white strokes
&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PIL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImageOps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;PIL.ImageOps&lt;/span&gt;

&lt;span class="c1"&gt;# Decode the image and predict the value
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decode_predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imgStr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# Decode the image
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decodeImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imgStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Invert the image as model expects black background &amp;amp; white strokes
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PIL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImageOps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Declare html codes for 0-9 emoji
&lt;/span&gt;    &lt;span class="n"&gt;emojis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
            &lt;span class="s"&gt;"&amp;amp;#48;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#49;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#50;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#51;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#52;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#53;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#54;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#55;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#56;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;"&amp;amp;#57;&amp;amp;#65039;&amp;amp;#8419;"&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# Call the predict function
&lt;/span&gt;    &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# get corresponding emoji
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;emojis&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4xXQs-l6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/6aravind/tidbits/main/assets/gifs/Correct%2520Digit%2520Emoji%2520Prediction.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4xXQs-l6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/6aravind/tidbits/main/assets/gifs/Correct%2520Digit%2520Emoji%2520Prediction.gif" alt="Correct Digit Emoji Predictor"&gt;&lt;/a&gt;&lt;br&gt;
Awesome! It works.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Now you can quickly share this notebook with everyone and ask for their opinion. Don't forget to mention the caveat that this is an early prototype. Without much effort, we sort of replicated the functionalities of a web app. The biggest plus is we never left the comfort of notebook and potentially bridged the gap between Training &amp;amp; Test data.&lt;/p&gt;

&lt;p&gt;Hopefully I managed to convince you that basic web developer skills are really helpful for a data scientist. The notebook can be accessed from &lt;a href="https://github.com/6aravind/tidbits/blob/main/notebook/Digit%20Emoji%20Predictor_Build%20UI%20for%20Deep%20Learning%20model%20in%20Jupyter%20Notebook.ipynb"&gt;here&lt;/a&gt;. Feel free to reach out via comments or &lt;a href="//twitter.com/@6aravind"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>jupyter</category>
      <category>deeplearning</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Concurrency in modern programming languages: Java</title>
      <author>Deepu K Sasidharan</author>
      <pubDate>Fri, 30 Apr 2021 11:42:20 +0000</pubDate>
      <link>https://dev.to/deepu105/concurrency-in-modern-programming-languages-java-3l2c</link>
      <guid>https://dev.to/deepu105/concurrency-in-modern-programming-languages-java-3l2c</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://deepu.tech/concurrency-in-modern-languages-java/"&gt;deepu.tech&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Please follow me on &lt;a href="https://twitter.com/deepu105"&gt;Twitter&lt;/a&gt; for updates and let me know what can be improved in the post.&lt;/p&gt;




&lt;p&gt;This is a multi-part series where I'll be talking about concurrency in modern programming languages and will be building and benchmarking a concurrent web server, inspired by the example from the &lt;a href="https://doc.rust-lang.org/book/ch20-00-final-project-a-web-server.html"&gt;Rust book&lt;/a&gt;, in popular languages like Rust, Go, JavaScript (NodeJS), TypeScript (Deno), Kotlin and Java to compare concurrency and its performance between these languages/platforms. The chapters of this series are as below.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-introduction-ckk"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-rust-19co"&gt;Concurrent web server in Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-golang-439i"&gt;Concurrent web server in Golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-javascript-on-nodejs-epo"&gt;Concurrent web server in JavaScript with NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-typescript-on-deno-hkb"&gt;Concurrent web server in TypeScript with Deno&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concurrent web server in Java with JVM&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Concurrent web server in Kotlin with JVM&lt;/li&gt;
&lt;li&gt;Comparison and conclusion of benchmarks&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#concurrency-in-java"&gt;
  &lt;/a&gt;
  Concurrency in Java
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The Java programming language and the Java virtual machine (JVM) have been designed to support concurrent programming, and all execution takes place in the context of threads&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wikipedia&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Java had support for concurrent programming from its early days. Prior to Java 1.1 it even had support for green threads (virtual threads). Spoiler Alert! It's coming back again with &lt;a href="https://wiki.openjdk.java.net/display/loom/Main"&gt;Project Loom&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Concurrent programming has always been at the core of Java as it was aimed at multi-threaded and multi-core CPUs. While not as simple as &lt;code&gt;goroutines&lt;/code&gt; to use, it was powerful and flexible for almost any use case. While powerful, it's also quite complex especially when you have to access data between threads since the default mechanism in Java, due to its OOP roots, is to use shared state concurrency by synchronizing the threads.&lt;/p&gt;

&lt;p&gt;Threads are at the core of concurrent &amp;amp; asynchronous programming in Java. From JDK 1.1 onwards these threads would map 1:1 to OS threads. Due to its early inception, the ecosystem has really mature libraries as well, from HTTP servers to concurrent message processors and so on. Asynchronous programming caught up a bit late in Java, the building blocks were there but it was practically useable only from Java 8, but it has matured as well and now has a great ecosystem with support for reactive programming and asynchronous concurrency.&lt;/p&gt;

&lt;p&gt;Java 8 bought a lot of improvements and simplifications to make it easier to do concurrency. For example, standard Java APIs like the Stream API even provides a way to do &lt;a href="https://docs.oracle.com/javase/tutorial/collections/streams/parallelism.html"&gt;parallel processing&lt;/a&gt; easily by just invoking a method call on complex and CPU intensive pipelines.&lt;/p&gt;

&lt;p&gt;With Java, it's possible to do multi-threaded concurrency or parallel programming as well as asynchronous programming. This means as we saw in the &lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-introduction-ckk"&gt;first chapter&lt;/a&gt;, we can mix and match these models to get the best possible performance for any use case.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multithreading"&gt;
  &lt;/a&gt;
  Multi-threading
&lt;/h3&gt;

&lt;p&gt;Java provides building blocks to create and manage OS threads as part of the standard library and it also provides implementations required for &lt;a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/sync.html"&gt;shared-state concurrency&lt;/a&gt; using locks and synchronization. Message-passing concurrency is not provided by default but can be done using external libraries like &lt;a href="https://akka.io/"&gt;Akka&lt;/a&gt; or using an &lt;a href="https://en.wikipedia.org/wiki/Actor_model"&gt;Actor model&lt;/a&gt; implementation. However, due to the memory model, it's up to the developer to ensure there are no data races or memory leaks in the concurrent program.&lt;/p&gt;

&lt;p&gt;In order to make multi-threading even more efficient, Java provides ways to create thread pools and reuse those threads to increase throughput. This will become even better once Project loom is released, hopefully with Java 17 or 18. Technically Java has one of the most mature ecosystems when it comes to multi-threading and most Java frameworks that you would end up using will be making use of it internally for performance improvements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#asynchronous-processing"&gt;
  &lt;/a&gt;
  Asynchronous processing
&lt;/h3&gt;

&lt;p&gt;Technically asynchronous programming is not part of concurrency but in practice, it goes hand in hand for many use cases and improves performance, and makes resource usage more efficient. In Java asynchronous programming is achieved using the same building blocks as concurrent/parallel programming. a.k.a, Threads. This wasn't very popular in Java before Java 8 due to complexity and, let's be honest, the lack of things like lambdas, functional programming support, CompletableFuture, and so on.&lt;/p&gt;

&lt;p&gt;The latest versions of Java provide the building blocks required for asynchronous programming with standard interfaces and implementations. But do keep in mind that using an asynchronous programming model increases the overall complexity and the ecosystem is still evolving. There are also many popular libraries and frameworks like Spring and RxJava that support asynchronous/reactive programming.&lt;/p&gt;

&lt;p&gt;Java still doesn't have any syntax sugar for async/await though but there are alternatives like the &lt;a href="https://github.com/electronicarts/ea-async"&gt;EA Async&lt;/a&gt; library that's close enough.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benchmarking"&gt;
  &lt;/a&gt;
  Benchmarking
&lt;/h2&gt;

&lt;p&gt;Now that we have some basic understanding of concurrency features in Java, let us build a simple concurrent web server in Java. Since Java offers multiple ways to achieve this we'll be building two sample applications and comparing them. The Java version used is the latest (16.0.1) at the time of writing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multithreaded-concurrent-webserver"&gt;
  &lt;/a&gt;
  Multi-threaded concurrent webserver
&lt;/h3&gt;

&lt;p&gt;This example is closer to the Rust multi-threaded example we built in the &lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-rust-19co"&gt;rust chapter&lt;/a&gt;, I have omitted import statements for brevity. You can find the full example on &lt;a href="https://github.com/deepu105/concurrency-benchmarks/tree/main/javaws"&gt;GitHub here&lt;/a&gt;. We use &lt;code&gt;java.net.ServerSocket&lt;/code&gt; for this. We are not using any external dependency in this case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JavaHTTPServer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// count used to introduce delays&lt;/span&gt;
        &lt;span class="c1"&gt;// bind listener&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;serverSocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ServerSocket&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Server is listening on port 8080"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
                &lt;span class="c1"&gt;// listen to all incoming requests and spawn each connection in a new thread&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ServerThread&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverSocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Server exception: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMessage&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ServerThread&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Thread&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Socket&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ServerThread&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Socket&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello.html"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="c1"&gt;// get the input stream&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;BufferedReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;InputStreamReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInputStream&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
                &lt;span class="c1"&gt;// get character output stream to client (for headers)&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PrintWriter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getOutputStream&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
                &lt;span class="c1"&gt;// get binary output stream to client (for requested data)&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dataOut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;BufferedOutputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getOutputStream&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fileIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;FileInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// add 2 second delay to every 10th request&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Adding delay. Count: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// read the request first to avoid connection reset errors&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;requestLine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readLine&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestLine&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;requestLine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// read the HTML file&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fileLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fileData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileLength&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;fileIn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileData&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;contentMimeType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"text/html"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="c1"&gt;// send HTTP Headers&lt;/span&gt;
            &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"HTTP/1.1 200 OK"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-type: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;contentMimeType&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-length: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fileLength&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Connection: keep-alive"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// blank line between headers and content, very important!&lt;/span&gt;
            &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// flush character output stream buffer&lt;/span&gt;

            &lt;span class="n"&gt;dataOut&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileData&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileLength&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// write the file data to output stream&lt;/span&gt;
            &lt;span class="n"&gt;dataOut&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error with exception : "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we bind a TCP listener using &lt;code&gt;ServerSocket&lt;/code&gt; to port 8080 and listen to all incoming requests. Each request is processed in a new thread.&lt;/p&gt;

&lt;p&gt;Let us run a benchmark using ApacheBench. We will make 10000 requests with 100 concurrent requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚ùØ ab &lt;span class="nt"&gt;-c&lt;/span&gt; 100 &lt;span class="nt"&gt;-n&lt;/span&gt; 10000 http://127.0.0.1:8080/
This is ApacheBench, Version 2.3 &amp;lt;&lt;span class="nv"&gt;$Revision&lt;/span&gt;: 1879490 &lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt;
...

Document Path:          /
Document Length:        176 bytes

Concurrency Level:      100
Time taken &lt;span class="k"&gt;for &lt;/span&gt;tests:   20.326 seconds
Complete requests:      10000
Failed requests:        0
Total transferred:      2600000 bytes
HTML transferred:       1760000 bytes
Requests per second:    491.98 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c"&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       203.262 &lt;span class="o"&gt;[&lt;/span&gt;ms] &lt;span class="o"&gt;(&lt;/span&gt;mean&lt;span class="o"&gt;)&lt;/span&gt;
Time per request:       2.033 &lt;span class="o"&gt;[&lt;/span&gt;ms] &lt;span class="o"&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class="o"&gt;)&lt;/span&gt;
Transfer rate:          124.92 &lt;span class="o"&gt;[&lt;/span&gt;Kbytes/sec] received

Connection Times &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
              min  mean[+/-sd] median   max
Connect:        0    1   1.5      0      13
Processing:     0  201 600.0      1    2023
Waiting:        0  201 600.0      0    2023
Total:          0  202 600.0      1    2025

Percentage of the requests served within a certain &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
  50%      1
  66%      2
  75%      4
  80%      6
  90%   2000
  95%   2001
  98%   2003
  99%   2006
 100%   2025 &lt;span class="o"&gt;(&lt;/span&gt;longest request&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the request handler thread sleeps for 2 seconds for every 10th request. In a real-world scenario, the thread pool itself could become the bottleneck and you may not be able to set so many threads as the OS may not be able to provide so many thus creating increased resource usage and bottleneck. In this simple use case, since each thread spawns and processes the request really fast we won't encounter an issue.&lt;/p&gt;

&lt;p&gt;So let's see if we can have another solution without such a bottleneck.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#asynchronous-concurrent-webserver"&gt;
  &lt;/a&gt;
  Asynchronous concurrent webserver
&lt;/h3&gt;

&lt;p&gt;This example is closer to the asynchronous example from the &lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-rust-19co"&gt;rust chapter&lt;/a&gt;, I have omitted import statements for brevity. You can find the full example on &lt;a href="https://github.com/deepu105/concurrency-benchmarks/tree/main/javaws"&gt;GitHub here&lt;/a&gt;. Notice that we are using &lt;code&gt;java.nio.channels.AsynchronousServerSocketChannel&lt;/code&gt;here and no external dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JavaAsyncHTTPServer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;JavaAsyncHTTPServer&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentThread&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Wait forever&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// we shouldn't use try with resource here as it will kill the stream&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;AsynchronousServerSocketChannel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;InetSocketAddress&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"127.0.0.1"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// bind listener&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setOption&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;StandardSocketOptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Server is listening on port 8080"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// count used to introduce delays&lt;/span&gt;

        &lt;span class="c1"&gt;// listen to all incoming requests&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CompletionHandler&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;@Override&lt;/span&gt;
            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;completed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;AsynchronousSocketChannel&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;attachment&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]++;&lt;/span&gt;
                &lt;span class="n"&gt;handleAcceptConnection&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="nd"&gt;@Override&lt;/span&gt;
            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Throwable&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;attachment&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Connection handler error: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;});&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;handleAcceptConnection&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;AsynchronousSocketChannel&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello.html"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fileIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;FileInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// add 2 second delay to every 10th request&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Adding delay. Count: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Read the first 1024 bytes of data from the stream&lt;/span&gt;
                &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;ByteBuffer&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ByteBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;allocate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="c1"&gt;// read the request fully to avoid connection reset errors&lt;/span&gt;
                &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

                &lt;span class="c1"&gt;// read the HTML file&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fileLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fileData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileLength&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;fileIn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileData&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

                &lt;span class="c1"&gt;// send HTTP Headers&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"HTTP/1.1 200 OK\n"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                        &lt;span class="s"&gt;"Connection: keep-alive\n"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                        &lt;span class="s"&gt;"Content-length: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fileLength&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"\n"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                        &lt;span class="s"&gt;"Content-Type: text/html; charset=utf-8\r\n\r\n"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;String&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileData&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;StandardCharsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;UTF_8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;getBytes&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

                &lt;span class="c1"&gt;// write the to output stream&lt;/span&gt;
                &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ByteBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wrap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

                &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;InterruptedException&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;ExecutionException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Connection handler error: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we bind an asynchronous listener to port 8080 and listen to all incoming requests. Each request is processed in a new task provided by &lt;code&gt;AsynchronousServerSocketChannel&lt;/code&gt;. We are not using any thread pools here and all the incoming requests are processed asynchronously and hence we don't have a bottleneck for maximum connections. But one thing you may immediately notice is that the code is much more complex now.&lt;/p&gt;

&lt;p&gt;Let us run a benchmark using ApacheBench. We will make 10000 requests with 100 concurrent requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ab &lt;span class="nt"&gt;-c&lt;/span&gt; 100 &lt;span class="nt"&gt;-n&lt;/span&gt; 10000 http://127.0.0.1:8080/

This is ApacheBench, Version 2.3 &amp;lt;&lt;span class="nv"&gt;$Revision&lt;/span&gt;: 1879490 &lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt;
...

Document Path:          /
Document Length:        176 bytes

Concurrency Level:      100
Time taken &lt;span class="k"&gt;for &lt;/span&gt;tests:   20.243 seconds
Complete requests:      10000
Failed requests:        0
Total transferred:      2770000 bytes
HTML transferred:       1760000 bytes
Requests per second:    494.00 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c"&gt;#/sec] (mean)&lt;/span&gt;
Time per request:       202.431 &lt;span class="o"&gt;[&lt;/span&gt;ms] &lt;span class="o"&gt;(&lt;/span&gt;mean&lt;span class="o"&gt;)&lt;/span&gt;
Time per request:       2.024 &lt;span class="o"&gt;[&lt;/span&gt;ms] &lt;span class="o"&gt;(&lt;/span&gt;mean, across all concurrent requests&lt;span class="o"&gt;)&lt;/span&gt;
Transfer rate:          133.63 &lt;span class="o"&gt;[&lt;/span&gt;Kbytes/sec] received

Connection Times &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
              min  mean[+/-sd] median   max
Connect:        0    0   0.6      0       5
Processing:     0  201 600.0      0    2026
Waiting:        0  201 600.0      0    2026
Total:          0  202 600.0      0    2026

Percentage of the requests served within a certain &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ms&lt;span class="o"&gt;)&lt;/span&gt;
  50%      0
  66%      1
  75%      3
  80%      4
  90%   2000
  95%   2001
  98%   2002
  99%   2003
 100%   2026 &lt;span class="o"&gt;(&lt;/span&gt;longest request&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We got almost identical results here, this one is even faster by 100ms. Hence this version seems much more efficient than the multi-threaded version for this particular use case. However at the cost of added complexity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As I explained in the &lt;a href="https://dev.to/deepu105/concurrency-in-modern-programming-languages-introduction-ckk"&gt;first part&lt;/a&gt; of this serious, this simple benchmarking is not an accurate representation for all concurrency use cases. It's a simple test for a very particular use case, a simple concurrent web server that just serves a file. The idea is to see the differences in solutions and to understand how concurrency works in Java. And for this particular use case, asynchronous solutions do seem to be the best choice.&lt;/p&gt;

&lt;p&gt;So stay tuned for the next post where we will look at concurrency in Kotlin and build the same use case in Kotlin.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blogs.oracle.com/javamagazine/going-inside-javas-project-loom-and-virtual-threads"&gt;blogs.oracle.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dzone.com/articles/java-concurrency-evolution"&gt;dzone.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.vogella.com/tutorials/JavaConcurrency/article.html"&gt;www.vogella.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dzone.com/articles/a-birds-eye-view-on-java-concurrency-frameworks-1"&gt;dzone.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.baeldung.com/java-asynchronous-programming"&gt;www.baeldung.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dzone.com/articles/async-await-in-java"&gt;dzone.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.baeldung.com/akka-actors-java"&gt;www.baeldung.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/deepu105"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/deepu05/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cover image credit: Photo by &lt;a href="https://unsplash.com/@grape_eve"&gt;Evgeniya Litovchenko&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>concurrency</category>
      <category>java</category>
      <category>jvm</category>
      <category>languages</category>
    </item>
    <item>
      <title>What is Stored Procedure in SQL</title>
      <author>Abdur Rehman Khalid</author>
      <pubDate>Fri, 30 Apr 2021 11:37:21 +0000</pubDate>
      <link>https://dev.to/abdurrehmaan/what-is-stored-procedure-in-sql-4g9b</link>
      <guid>https://dev.to/abdurrehmaan/what-is-stored-procedure-in-sql-4g9b</guid>
      <description>&lt;p&gt;The new capabilities provided by stored procedures, require new disciplines for MySQL developers, only some of whom will have prior experience in stored program development using other relational databases.&lt;/p&gt;

&lt;h2&gt;what is store procedure &lt;/h2&gt;


&lt;p&gt;Stored Procedures are pre-compiled code which compiled for first time and its compiled format is saved, we call the compiled saved format whenever we want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H8yWkobd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkd01dzi0tda5398yuyb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H8yWkobd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkd01dzi0tda5398yuyb.png" alt="Store Procedure example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;How to create store procedure in sql ? &lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B9rEAmJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/835v8tvzx3j3ihc1lz3c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B9rEAmJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/835v8tvzx3j3ihc1lz3c.png" alt="How to create store procedur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt; Stored Procedure Syntax &lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
CREATE PROCEDURE procedure_name
AS
sql_statement
GO;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt; Execute a Stored Procedure &lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
EXEC procedure_name; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>sql</category>
      <category>mysql</category>
      <category>database</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My roadmap to create makeresume.co</title>
      <author>Maximiliano Schvindt</author>
      <pubDate>Fri, 30 Apr 2021 11:36:21 +0000</pubDate>
      <link>https://dev.to/cuchu/my-roadmap-to-create-makeresume-co-27aa</link>
      <guid>https://dev.to/cuchu/my-roadmap-to-create-makeresume-co-27aa</guid>
      <description>&lt;p&gt;Hello people, this is my first post. I want to share a personal project and the roadmap (list of tools, languages or technologies) that I used to complete it. &lt;br&gt;
The project is &lt;strong&gt;&lt;a href="https://makeresume.co"&gt;makeresume.co&lt;/a&gt;&lt;/strong&gt;. There are a lot of similar projects with better qualities and features, but I was looking for the opportunity to learn and/or refresh some technologies, so, that wasn't a problem for me.&lt;/p&gt;

&lt;p&gt;The idea of this project was to learn/refresh some new technologies because I am currently working with some old ones (ColdFusion and AngularJS).&lt;/p&gt;

&lt;p&gt;So, some time ago I used &lt;a href="https://resume.io"&gt;resume.io&lt;/a&gt; and for me, that app is beautiful and I love it. "I can do something similar", I said.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Intro&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I worked between 45 and 50 days (in my free time).&lt;/li&gt;
&lt;li&gt;The resume is generated using something similar to &lt;a href="https://jsonresume.org"&gt;jsonresume.org&lt;/a&gt; but with a few updates.&lt;/li&gt;
&lt;li&gt;The UI is like a copy (poor quality) of the &lt;a href="https://resume.io"&gt;resume.io&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Before starting the project, I watched some videos on YouTube to identify the best way to structure the code in the API (node.js) and also, I did a 5 hours duration free course to learn the basics about react.js.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;:&lt;br&gt;
&lt;em&gt;API&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9FLsZKS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfdjaama4e9pi0ffs16s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9FLsZKS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfdjaama4e9pi0ffs16s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
There is nothing strange here, a basic node.js project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;node.js - &lt;a href="https://nodejs.org"&gt;https://nodejs.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;express - &lt;a href="https://expressjs.com"&gt;https://expressjs.com&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;mongoose - &lt;a href="https://mongoosejs.com"&gt;https://mongoosejs.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;handlebars - &lt;a href="https://handlebarsjs.com"&gt;https://handlebarsjs.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;puppeteer - &lt;a href="https://pptr.dev"&gt;https://pptr.dev&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;nanoid - &lt;a href="https://www.npmjs.com/package/nanoid"&gt;https://www.npmjs.com/package/nanoid&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;dayjs - &lt;a href="https://day.js.org"&gt;https://day.js.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;PM2 - &lt;a href="https://pm2.keymetrics.io"&gt;https://pm2.keymetrics.io&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The API receives a json with the resume's data and it is processed with some services generating an HTML file (Handlebars) and then, generating a PDF (Puppeteer and Chrome).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;APP&lt;/em&gt;&lt;br&gt;
I tried to create most of the components and my idea is to create a repo with them and share it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;react.js using create-react-app - &lt;a href="https://create-react-app.dev/docs/getting-started"&gt;https://create-react-app.dev/docs/getting-started&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;react router dom - &lt;a href="https://reactrouter.com/web/guides/quick-start"&gt;https://reactrouter.com/web/guides/quick-start&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;axios - &lt;a href="https://www.npmjs.com/package/axios"&gt;https://www.npmjs.com/package/axios&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;fontawesome - &lt;a href="https://fontawesome.com"&gt;https://fontawesome.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;flexbox - &lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox"&gt;https://css-tricks.com/snippets/css/a-guide-to-flexbox&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;react draft wysiwyg - &lt;a href="https://www.npmjs.com/package/react-draft-wysiwyg"&gt;https://www.npmjs.com/package/react-draft-wysiwyg&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;smooth scrollbar - &lt;a href="https://idiotwu.github.io/smooth-scrollbar"&gt;https://idiotwu.github.io/smooth-scrollbar&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;react tooltip - &lt;a href="https://wwayne.github.io/react-tooltip"&gt;https://wwayne.github.io/react-tooltip&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;react device detect - &lt;a href="https://www.npmjs.com/package/react-device-detect"&gt;https://www.npmjs.com/package/react-device-detect&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Deploy&lt;/em&gt;&lt;br&gt;
AWS - I am currently studying to get the AWS Practitioner Certification and the best way to learn something is using it.&lt;/p&gt;

&lt;p&gt;The landing page and the UI are in S3 buckets with a CloudFront. I am using CloudFront because I wanted to implement an SSL certificate.&lt;br&gt;
Domain and sub-domains with Route 53.&lt;br&gt;
The API runs with PM2 in an EC2 instance (Linux) with a Load Balancer (to use SSL).&lt;/p&gt;

&lt;p&gt;The database is hosted on MongoDB Atlas.&lt;/p&gt;

&lt;p&gt;And that is all at this moment, I will continue working to improve the application and learning new things.&lt;/p&gt;

&lt;p&gt;I made my resume with the app: &lt;a href="https://s.makeresume.co/4AQzSi8lCV"&gt;https://s.makeresume.co/4AQzSi8lCV&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading this article!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>career</category>
      <category>100daysofcode</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
