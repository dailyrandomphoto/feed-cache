<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Jamstack and Serverless with Jason Lengstorf</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 07 May 2021 03:21:25 +0000</pubDate>
      <link>https://dev.to/devteam/jamstack-and-serverless-with-jason-lengstorf-3jdl</link>
      <guid>https://dev.to/devteam/jamstack-and-serverless-with-jason-lengstorf-3jdl</guid>
      <description>&lt;p&gt;On &lt;time&gt;April 21st&lt;/time&gt;, Jason Lengstorf (VP of Developer Experience at Netlify and DEV Community member) joined &lt;a class="mentioned-user" href="https://dev.to/coffeecraftcode"&gt;@coffeecraftcode&lt;/a&gt;
 and me on the Walkthrough Wednesday stream to discuss Jamstack, serverless, and Jamstack Explorers.&lt;/p&gt;

&lt;p&gt;We used Netlify's serverless functions to quickly set up an API to grab DEV posts with the DEV API.&lt;/p&gt;

&lt;p&gt;Thanks again for joining us, Jason! üòé I had a great time pairing with you on the stream.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Watch the Walkthrough Wednesday with Jason and catch up on what you missed:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dXr0iJE10tQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Take a look at the repository we created and worked on.&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nickytonline"&gt;
        nickytonline
      &lt;/a&gt; / &lt;a href="https://github.com/nickytonline/fun-with-jason"&gt;
        fun-with-jason
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Walkthrough Wednesdays with Jason Lengstorf: DEV API project using serverless&lt;/h1&gt;
&lt;p&gt;We talked Jamstack, serverless, and I got to have some fun and pair with Jason. We used Netlify's serverless functions to quickly set up an API to grab DEV posts with the DEV API, i.e. this repository.&lt;/p&gt;
&lt;p&gt;Thanks again for coming on the stream Jason! üòé&lt;/p&gt;
&lt;p&gt;
    &lt;a href="https://www.youtube.com/watch?v=dXr0iJE10tQ" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/f58637dc8c500399005776b4c8d44c07be4ef132bf19cdde69e2af098e33905d/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f64587230694a45313074512f302e6a7067" alt="Walkthrough Wednesdays Project with Jason Lengstorf"&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Installation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install the Netlify CLI, &lt;code&gt;npm install netlify-cli -g&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;ntl dev&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;A browser will open at &lt;a href="http://localhost:8888" rel="nofollow"&gt;http://localhost:8888&lt;/a&gt; with a message saying "Not Found". That's OK. üòÖ
&lt;/li&gt;
&lt;li&gt;Navigate to &lt;a href="http://localhost:8888/api/posts" rel="nofollow"&gt;http://localhost:8888/api/posts&lt;/a&gt;. A list of posts from DEV will load.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Play with the API&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Load posts for a specific user by adding their username to the API call, e.g. &lt;a href="http://localhost:8888/api/posts/nickytonline" rel="nofollow"&gt;http://localhost:8888/api/posts/nickytonline&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Fork this and have some fun!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Before and After Calling API with On-demand Builders Enabled&lt;/h2&gt;

&lt;p&gt;In this example we query the posts for DEV community member &lt;a href="https://dev.to/coffeecraftcode" rel="nofollow"&gt;coffeecraftcode&lt;/a&gt;. The initial call comes‚Ä¶&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nickytonline/fun-with-jason"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#on-this-stream-we-covered"&gt;
  &lt;/a&gt;
  On this stream, we covered:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cli/cli#installation"&gt;GitHub CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.netlify.com/cli/get-started/"&gt;Netlify CLI&lt;/a&gt; and how to quickly deploy and update our API&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/configure-builds/on-demand-builders/"&gt;Netlify On-demand builders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.forem.com/api/"&gt;The DEV API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://explorers.netlify.com/"&gt;Jamstack Explorers&lt;/a&gt; - We forgot to cover this one, but Christina gave it a shoutout at the end of the stream. It's really good. I did the NEXT.js course with &lt;a class="mentioned-user" href="https://dev.to/cassidoo"&gt;@cassidoo&lt;/a&gt;
 a little while back. üòé&lt;/li&gt;
&lt;/ul&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/nFFguNjdeotwc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/nFFguNjdeotwc/giphy.gif" alt="Amy Poehler slouching in a seat in a theater putting both her hands out as if to say cool!"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Thanks again for coming on the stream, Jason!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#you-can-also-find-the-three-of-us-all-over-the-web-here"&gt;
  &lt;/a&gt;
  You can also find the three of us all over the web here:
&lt;/h3&gt;


&lt;div class="ltag__user ltag__user__id__88635"&gt;
  
    .ltag__user__id__88635 .follow-action-button {
      background-color: #0030b3 !important;
      color: #ffffff !important;
      border-color: #0030b3 !important;
    }
  
    &lt;a href="/jlengstorf" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oIpIYcbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2LRVCYj---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/88635/4bff9730-fc39-4480-bf6a-af1e4fd8217a.jpeg" alt="jlengstorf image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/jlengstorf"&gt;Jason Lengstorf&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/jlengstorf"&gt;‚ö°Ô∏è a.k.a. Blitz Jackson
üì∫ live coding on LearnWithJason.dev
üìù blogging at http://lengstorf.com
ü•ë Dev Experience at Netlify
‚è≥ previously at Gatsby, IBM

he/him&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/jlengstorf"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jason.af/"&gt;Website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__user ltag__user__id__9597"&gt;
  
    .ltag__user__id__9597 .follow-action-button {
      background-color: #fb4881 !important;
      color: #ffffff !important;
      border-color: #fb4881 !important;
    }
  
    &lt;a href="/nickytonline" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BmhzwLSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zhsA-ZEm--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/9597/68d6245f-3152-4ed2-a245-d015fca4160b.jpeg" alt="nickytonline image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/nickytonline"&gt;Nick Taylor (he/him)&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/nickytonline"&gt;Lead software engineer at Forem. Caught the live coding bug on Twitch at livecoding.ca&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/nickytonline"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://livecoding.ca"&gt;livecoding.ca&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtube.iamdeveloper.com"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__user ltag__user__id__129358"&gt;
  
    .ltag__user__id__129358 .follow-action-button {
      background-color: #f0065c !important;
      color: #ffffff !important;
      border-color: #f0065c !important;
    }
  
    &lt;a href="/coffeecraftcode" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yuBMmi-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--u8pzDZEU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/129358/190252c3-ce2d-4df8-b4b1-b42f7ae7d08a.png" alt="coffeecraftcode image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/coffeecraftcode"&gt;Christina Gorton&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/coffeecraftcode"&gt;Open Source Community Manager, Technical Writer,  Developer, and Instructor. 
Courses on LinkedIn, Egghead, Design+Code, and Skillshare. 

https://egghead.io/instructors/christina-gorton/?af=1c6fpu&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/coffeecraftcode"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope to see you on future DEV streams! If you're interested in pairing, fill out &lt;a href="https://iamdeveloper.com/pair"&gt;this form&lt;/a&gt;. Christina and I would love to tackle an issue with you that the whole community could learn from.&lt;/p&gt;

&lt;p&gt;P.S. &lt;a href="https://twitch.tv/thepracticaldev"&gt;Follow DEV on Twitch&lt;/a&gt; to be notified when future streams begin and catch old streams on &lt;a href="https://www.youtube.com/c/thepracticaldevteam"&gt;YouTube&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devstream</category>
      <category>pairprogramming</category>
      <category>serverless</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>Project 70 of 100 - Rick Redux</title>
      <author>James Hubert</author>
      <pubDate>Fri, 07 May 2021 02:48:39 +0000</pubDate>
      <link>https://dev.to/jwhubert91/project-70-of-100-rick-redux-4oan</link>
      <guid>https://dev.to/jwhubert91/project-70-of-100-rick-redux-4oan</guid>
      <description>&lt;p&gt;&lt;em&gt;Hey! I'm on a mission to make 100 React.js projects ending May 31st. Please follow my dev.to profile or my &lt;a href="https://www.twitter.com/jwhubert91"&gt;twitter&lt;/a&gt; for updates and feel free to reach out if you have questions. Thanks for your support!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Link to today's deployed app: &lt;a href="https://100-react-projects-day-70-redux-rick-ranker.netlify.app/"&gt;Link&lt;/a&gt;&lt;br&gt;
Link to the repo: &lt;a href="https://github.com/jwhubert91/100daysofreact/tree/master/day-70-redux-rick-ranker"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;Today was another day of interacting with Redux at the most basic level. For those curious about my process or how I come up with these nearly useless project ideas, I do an hour a day of online programming coursework and follow it with an hour where I'm free to build whatever I can think of to practice the day's concepts.&lt;/p&gt;

&lt;p&gt;Right now I'm in the final segment of &lt;a href="https://scrimba.com/learn/react"&gt;Bob Ziroll's React Bootcamp on Scrimba&lt;/a&gt;, which I highly recommend if you're interested in learning React. I also highly recommend Scrimba for anyone learning web development.&lt;/p&gt;

&lt;p&gt;Anyway, on to the project. Today I built a web application from Create React App that embedded a Youtube video of the famous &lt;a href="https://en.wikipedia.org/wiki/Rickrolling"&gt;Rick Roll&lt;/a&gt; music video. The goal was to build a little application that interacted with a totally basic vanilla Javascript implementation of Redux for storing state. The actual Redux functionality was almost identical to &lt;a href="https://dev.to/jwhubert91/project-69-of-100-basic-redux-subscriber-16n6"&gt;yesterday's project&lt;/a&gt; except that it includes functionality for changing the title of the video, which changes the way the reducer looks.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-redux"&gt;
  &lt;/a&gt;
  Setting up Redux
&lt;/h2&gt;

&lt;p&gt;Here I'll walk you through what that Redux file looks like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, we have to &lt;strong&gt;import Redux&lt;/strong&gt; (after installing it with &lt;code&gt;npm i redux&lt;/code&gt;) and include it in the file.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// require redux&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redux&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Second, we need to set up our &lt;strong&gt;actions&lt;/strong&gt;. These tell our reducer (more on that later) what to do when it interacts with state. Notice this formally creates and at the same time restricts the ways in which we can interact with the application's state.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// define actions&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;upVote&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;UPVOTE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;downVote&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DOWNVOTE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;RENAME&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Next, we create a &lt;strong&gt;state object&lt;/strong&gt; just to put some initial values. This isn't a required part of using Redux, but it makes our lives easier in this particular application.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create state object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;votes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Never Gonna Give You Up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;After defining our actions, it's time to &lt;strong&gt;create the reducer&lt;/strong&gt;. This is the function that receives as an argument a previously-defined action, which typically has a payload, or data, that all together tell the reducer exactly how it should retrieve data from state to deliver that data in a meaningful way to components using the data.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create reducer&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;UPVOTE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;votes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;votes&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DOWNVOTE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;votes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;votes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;RENAME&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;After our actions and reducer are set up, we can &lt;strong&gt;create a store&lt;/strong&gt;, which uses the built-in &lt;code&gt;createStore()&lt;/code&gt; method from the redux package. This, as the method says, creates a special store that has a lot of built in functionality that comes with the redux package. It's kind of like a really buffed-up version of the native React state.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create store from reducer&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Then, we need to &lt;strong&gt;subscribe&lt;/strong&gt; to changes in the store. This is one of those pre-built redux methods I mentioned earlier that is available on redux stores. This method provides a callback that you can use to interact with the data in the store, as it is changed.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// subscribe to store changes and console.log() them&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;free&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;exporting&lt;/span&gt; &lt;span class="nx"&gt;them&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;other&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
JS&lt;br&gt;
// export&lt;br&gt;
export {upVote,downVote,rename,store};&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
##Interacting with our Reducer, and the Store
The next part of this project is to build out functionality in our React components that allows the user to interact with state. I *know for a fact* that I am not using Redux in the React way. I'm pretty sure there's even a special library for using Redux in React that I'm not using here. But remember what I said about using tech from my courses in that day's projects? Yeah, so we'll hopefully get to the React uses tomorrow.

OK- with warnings out of the way, here was my solution for interacting with Redux in other components. In my Control component, which is a JSX component that appears below the embedded Youtube video and has the buttons and votes readout, I have upvote and downvote buttons. In order for these buttons to interact with the store from our Redux file and actually use the actions we built to get data from the reducer, we have to bring in the store and our `upVote` and `downVote` functions: 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
JS&lt;br&gt;
import React,{useState,useEffect} from 'react'&lt;br&gt;
import {store,upVote,downVote} from '../redux'&lt;/p&gt;

&lt;p&gt;function Contol() {&lt;br&gt;
  const [videoState,setVideoState] = useState({})&lt;/p&gt;

&lt;p&gt;useEffect(() =&amp;gt; {&lt;br&gt;
    setVideoState(setVideoState(store.getState()))&lt;br&gt;
  }, [])&lt;/p&gt;

&lt;p&gt;store.subscribe(() =&amp;gt; {&lt;br&gt;
    setVideoState(store.getState())&lt;br&gt;
  })&lt;/p&gt;

&lt;p&gt;const handleUpVote = () =&amp;gt; {&lt;br&gt;
    store.dispatch(upVote())&lt;br&gt;
  }&lt;/p&gt;

&lt;p&gt;const handleDownVote = () =&amp;gt; {&lt;br&gt;
    store.dispatch(downVote())&lt;br&gt;
  }&lt;/p&gt;

&lt;p&gt;return(...)&lt;br&gt;
...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
As you can see I handle up and down votes with their own handler functions which call `store.dispatch()` to dispatch the actions and trigger a change in the store, which the subscriber has access to, and when changes are detected there I save those changes in a local state variable for use in this component. 

Here is how the component uses it, in the JSX:

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
JS&lt;br&gt;
  return (&lt;br&gt;
    &lt;/p&gt;
&lt;br&gt;
      &lt;br&gt;
        &lt;h3&gt;Votes: {videoState ? videoState.votes : 0}&lt;/h3&gt;
&lt;br&gt;
      &lt;br&gt;
      &lt;br&gt;
        Vote Down üëé&lt;br&gt;
        Vote Up üëç&lt;br&gt;
      &lt;br&gt;
    &lt;br&gt;
  )&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
Above you can see that we are using the votes from state, and the two actions we imported from our redux file.

Next, I built the edit functionality into the `TitleEdit` component. For that, I only imported the store and my rename action. I also used an isEditing boolean flag to display either an input or the title in plain text. If the user clicks 'Save' after editing, we trigger the rename action in the `handleRename()` function.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
JS&lt;br&gt;
import React,{useState} from 'react'&lt;br&gt;
import {store,rename} from '../redux'&lt;/p&gt;

&lt;p&gt;function TitleEdit() {&lt;br&gt;
  const [isEditing,setIsEditing] = useState(false)&lt;br&gt;
  const [currentName,setCurrentName] = useState("Never Gonna Give You Up")&lt;/p&gt;

&lt;p&gt;store.subscribe(() =&amp;gt; {&lt;br&gt;
    const storeObject = store.getState()&lt;br&gt;
    setCurrentName(storeObject.name)&lt;br&gt;
  })&lt;/p&gt;

&lt;p&gt;const handleRename = () =&amp;gt; {&lt;br&gt;
    store.dispatch(rename(currentName))&lt;br&gt;
  }&lt;/p&gt;

&lt;p&gt;function handleEditClick() {&lt;br&gt;
    isEditing &amp;amp;&amp;amp; (&lt;br&gt;
      // was editing, now save and go back to normal&lt;br&gt;
      handleRename()&lt;br&gt;
    )&lt;br&gt;
    setIsEditing(prevState =&amp;gt; !prevState)&lt;br&gt;
  }&lt;br&gt;
  return(...)&lt;br&gt;
...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
Now here is the JSX:

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
JS&lt;br&gt;
return (&lt;br&gt;
    &lt;/p&gt;
&lt;br&gt;
      &lt;h1&gt;
&lt;br&gt;
        {isEditing ? &lt;br&gt;
          &lt;br&gt;
            
              type="text" &lt;br&gt;
              placeholder="Enter new title"&lt;br&gt;
              value={currentName}&lt;br&gt;
              className="form-control"&lt;br&gt;
              onChange={e =&amp;gt; setCurrentName(e.currentTarget.value)}&lt;br&gt;
            &amp;gt;&lt;br&gt;
           :&lt;br&gt;
         &lt;span&gt;{currentName}{' '}&lt;/span&gt;&lt;br&gt;
        }&lt;br&gt;
      
        onClick={handleEditClick} &lt;br&gt;
        className="btn btn-light btn-sm"&lt;br&gt;
      &amp;gt;&lt;br&gt;
        {isEditing ? "Save" : "Edit"}&lt;br&gt;
      &lt;br&gt;
      &lt;/h1&gt;
&lt;br&gt;
    &lt;br&gt;
  )



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;


And that is my fully interactive custom made Redux state. If you're interested in this subject, I highly recommend you read more about it [here](https://www.youtube.com/watch?v=oHg5SJYRHA0), where it is handled in more detail.

**If you like projects like this and want to stay up to date with more, check out my Twitter [@jwhubert91](https://twitter.com/jwhubert91), I follow back! See you tomorrow for another project.**
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Criando Readme incr√≠veis! üìñ</title>
      <author>Tulio Calil</author>
      <pubDate>Fri, 07 May 2021 01:44:40 +0000</pubDate>
      <link>https://dev.to/tuliocalil/criando-readme-incriveis-48h4</link>
      <guid>https://dev.to/tuliocalil/criando-readme-incriveis-48h4</guid>
      <description>&lt;p&gt;Voc√™ sabe criar arquivos readme para seus reposit√≥rios de uma forma atrativa e informativa, ou apenas deixa o &lt;a href="https://github.com/facebook/create-react-app/tree/master/packages/cra-template/template"&gt;readme padr√£o do React&lt;/a&gt; (just a joke) ?&lt;br&gt;
Nesse post vamos ver alguns exemplos e dicas de como deixar nosso arquivo de readme super legal e organizado, ent√£o vamos por a m√£o na massa.md. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#badges"&gt; Badges&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#logo"&gt; Logo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#titulo-e-descri%C3%A7%C3%A3o"&gt; Titulo e descri√ß√£o&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#gif-ou-imagem-demo"&gt; Gif ou imagem demo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#sess%C3%B5es"&gt; Sess√µes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#sobre"&gt; Sobre&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#como-utilizar"&gt; Como utilizar&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#instalar"&gt; Instalar&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#como-rodar-e-como-utilizar"&gt; Como rodar e como utilizar&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#demo"&gt; Demo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#campos-do-github"&gt; Campos do Github&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#utilize-todo-o-poder-do-markdown"&gt; Utilize todo o poder do Markdown&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#conclus%C3%A3o"&gt; Conclus√£o&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#generated-with-summaryze-forem"&gt;
  &lt;/a&gt;
  generated with &lt;a href="https://summaryze-forem.vercel.app/"&gt;Summaryze Forem üå±&lt;/a&gt;
&lt;/h6&gt;
&lt;h2&gt;
  &lt;a href="#badges"&gt;
  &lt;/a&gt;
  Badges
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f2w0QONO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmeglsi08f0b593k1io5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f2w0QONO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmeglsi08f0b593k1io5.png" alt="Github Badges"&gt;&lt;/a&gt;&lt;br&gt;
Badges s√£o super legais para adicionar no nosso arquivo, al√©m de dar um overview super r√°pido e deixar o projeto bem bonito.&lt;br&gt;
Algumas que eu gosto muito de utilizar s√£o as de tecnologia, dizendo algum framework/lib que utilizei, status da pipeline, stars e licen√ßa.&lt;br&gt;
Alguns exemplos legais:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WpIkG3NH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/-TypeGraphQL-%2523C04392%3F%26style%3Dfor-the-badge" class="article-body-image-wrapper"&gt;&lt;img alt="Type-graphql" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WpIkG3NH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/-TypeGraphQL-%2523C04392%3F%26style%3Dfor-the-badge"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TQxGeZvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/nextjs-%2523000000.svg%3F%26style%3Dfor-the-badge%26logo%3Dnext.js%26logoColor%3Dwhite" class="article-body-image-wrapper"&gt;&lt;img alt="Next JS" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TQxGeZvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/nextjs-%2523000000.svg%3F%26style%3Dfor-the-badge%26logo%3Dnext.js%26logoColor%3Dwhite"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qGNajCcg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/firebase-%2523039BE5.svg%3F%26style%3Dfor-the-badge%26logo%3Dfirebase" class="article-body-image-wrapper"&gt;&lt;img alt="Firebase" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qGNajCcg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/firebase-%2523039BE5.svg%3F%26style%3Dfor-the-badge%26logo%3Dfirebase"&gt;&lt;/a&gt;&lt;br&gt;
Voc√™ pode criar suas pr√≥prias badges utilizando o &lt;a href="https://shields.io/"&gt;shields.io&lt;/a&gt; ou pode encontrar varias prontas, inclusive nesse reposit√≥rio aqui: &lt;a href="https://github.com/Ileriayo/markdown-badges"&gt;https://github.com/Ileriayo/markdown-badges&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#logo"&gt;
  &lt;/a&gt;
  Logo
&lt;/h2&gt;

&lt;p&gt;Criar uma logo ou utilizar algo pra representar √© algo super legal e que da um toque super bonito pra o repo, √© uma dica bem opcional, mas que faz muita diferen√ßa.&lt;br&gt;
Uma dica que eu dou pra quem n√£o tem tanta afinidade com design √© utilizar servi√ßos de cria√ß√£o de logo online, como o &lt;a href="https://www.launchaco.com/logo/"&gt;Launchaco&lt;/a&gt; ou encontrar uma logo open source aqui: &lt;a href="https://openlogos.org/"&gt;https://openlogos.org/&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tuliocll"&gt;
        tuliocll
      &lt;/a&gt; / &lt;a href="https://github.com/tuliocll/elixir-http-request"&gt;
        elixir-http-request
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      a study project with elixir to make N requests on some url
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
HttpRequest&lt;/h1&gt;
&lt;div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/428ac5bbb0a1201ff8b1209ac359456bd69a1324416953c153b2f2dacb0cebcd/68747470733a2f2f656c697869722d6c616e672e6f72672f696d616765732f6c6f676f2f6c6f676f2e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/428ac5bbb0a1201ff8b1209ac359456bd69a1324416953c153b2f2dacb0cebcd/68747470733a2f2f656c697869722d6c616e672e6f72672f696d616765732f6c6f676f2f6c6f676f2e706e67" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;A simple "application" to make requests n times for a url&lt;/strong&gt;
&lt;strong&gt;this is a study project with elixir and i used it to do a simple stress test on my server/database&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;You can execute the Iex and call the module and the function&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;iex -S mix&lt;/pre&gt;

&lt;/div&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;iex(1)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;HttpRequest.execute(5, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;https://www.google.com&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This will make five request for '&lt;a href="http://www.google.com" rel="nofollow"&gt;www.google.com&lt;/a&gt;'.
You can pass a token too:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;iex(1)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;HttpRequest.execute(5, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;https://www.google.com&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Bearer 123123123&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;And you can check the doc running:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;iex(1)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; h(HttpRequest.execute)&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Made with ‚ù§ in Bahia, Brasil.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/tuliocll/elixir-http-request"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#titulo-e-descri%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Titulo e descri√ß√£o
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7l6L8Kwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyep52sph2l8ulyivff4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7l6L8Kwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyep52sph2l8ulyivff4.png" alt="Titulo e descri√ß√£o"&gt;&lt;/a&gt;&lt;br&gt;
Esse √© super importante, lembre sempre de adicionar o titulo e a descri√ß√£o do seu projeto de forma simples e bem direta.&lt;br&gt;
Voc√™ pode criar o titulo e logo abaixo a descri√ß√£o, ou criar uma sess√£o para a descri√ß√£o depois do titulo.&lt;/p&gt;

&lt;p&gt;Utilize as tags do markdown para isso:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# Meu projeto&lt;/span&gt;
Descri√ß√£o do meu projeto...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#gif-ou-imagem-demo"&gt;
  &lt;/a&gt;
  Gif ou imagem demo
&lt;/h2&gt;

&lt;p&gt;√â super legal quando a gente entra em um repo e tem logo de cara uma pr√©via do que esperamos ver, adicionar uma imagem ou um v√≠deo para isso √© uma dica super valida.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tuliocll"&gt;
        tuliocll
      &lt;/a&gt; / &lt;a href="https://github.com/tuliocll/summaryze-forem"&gt;
        summaryze-forem
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Create posts summary from forem platform(like dev.to) easy
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Summaryze Forem üìë
&lt;/h1&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/tuliocll/summaryze-forem/master/public/images/how-to.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7sHc5gf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/tuliocll/summaryze-forem/master/public/images/how-to.gif"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cc96d7d28a6ca21ddbb1f2521d751d375230ed840271e6a4c8694cf87cc60c14/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6f64652e6a732532302d2532333433383533442e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6e6f64652e6a73266c6f676f436f6c6f723d7768697465"&gt;&lt;img alt="NodeJS" src="https://camo.githubusercontent.com/cc96d7d28a6ca21ddbb1f2521d751d375230ed840271e6a4c8694cf87cc60c14/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6f64652e6a732532302d2532333433383533442e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6e6f64652e6a73266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/62d37abe760867620e0baea1066303719d630a82936837ba7bff6b0c754e3c9f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6a6176617363726970742532302d2532333332333333302e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6a617661736372697074266c6f676f436f6c6f723d253233463744463145"&gt;&lt;img alt="JavaScript" src="https://camo.githubusercontent.com/62d37abe760867620e0baea1066303719d630a82936837ba7bff6b0c754e3c9f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6a6176617363726970742532302d2532333332333333302e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6a617661736372697074266c6f676f436f6c6f723d253233463744463145"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/43bf48f000ca16dcd5cc91cb1ad4491b2e8d2547e4abe7fc8fe6e36ae682e584/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6578742532306a732532302d2532333030303030302e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6e6578742e6a73266c6f676f436f6c6f723d7768697465"&gt;&lt;img alt="Next JS" src="https://camo.githubusercontent.com/43bf48f000ca16dcd5cc91cb1ad4491b2e8d2547e4abe7fc8fe6e36ae682e584/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6578742532306a732532302d2532333030303030302e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6e6578742e6a73266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/77d868d39224471e479794e6fc439e2951f4a044d1facded66c048bae75aa00f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f76657263656c2532302d2532333030303030302e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d76657263656c266c6f676f436f6c6f723d7768697465"&gt;&lt;img alt="Vercel" src="https://camo.githubusercontent.com/77d868d39224471e479794e6fc439e2951f4a044d1facded66c048bae75aa00f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f76657263656c2532302d2532333030303030302e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d76657263656c266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/a9a2d68ad493ff831774f24528ff151a3fd455c80122dcaa44af2475300b51b5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6465762e746f2d3041304130413f7374796c653d666f722d7468652d6261646765266c6f676f3d6465762e746f266c6f676f436f6c6f723d7768697465"&gt;&lt;img alt="Dev.to blog" src="https://camo.githubusercontent.com/a9a2d68ad493ff831774f24528ff151a3fd455c80122dcaa44af2475300b51b5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6465762e746f2d3041304130413f7374796c653d666f722d7468652d6261646765266c6f676f3d6465762e746f266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/42b5cd94dbe9961d5b1071ea4dae36e2b63d35a8e6e56e7bf91fedf28988c80c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6669676d612532302d2532334632344531452e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6669676d61266c6f676f436f6c6f723d7768697465"&gt;&lt;img alt="Figma" src="https://camo.githubusercontent.com/42b5cd94dbe9961d5b1071ea4dae36e2b63d35a8e6e56e7bf91fedf28988c80c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6669676d612532302d2532334632344531452e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6669676d61266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
About itüìñ
&lt;/h2&gt;
&lt;p&gt;Inspired on my &lt;a href="https://github.com/Cledersonbc"&gt;friend&lt;/a&gt; project: &lt;a href="https://github.com/autociencia/summaryze"&gt;Summaryze&lt;/a&gt;, Summaryze Forem is a tool write on javascript with &lt;a href="https://nextjs.org/" rel="nofollow"&gt;NextJS&lt;/a&gt; that use web scrap to get all anchor links from a post on &lt;a href="https://www.forem.com/" rel="nofollow"&gt;forem&lt;/a&gt; plataforms(like dev.to), format it and create a markdown summary fast and easy
I have this necessity after write &lt;a href="https://dev.to/tuliocalil/criando-extensoes-para-o-google-chrome-com-react-1laa" rel="nofollow"&gt;this post&lt;/a&gt; and being too lazy to do the summary, so i decide to create this tool, hope you like it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.figma.com/file/ywNwI4gYMH3cXiUIZ9ZiuS/summaryze-dev?node-id=0%3A1" rel="nofollow"&gt;Here&lt;/a&gt; you can see the figma prototype.&lt;/p&gt;
&lt;h3&gt;
Frameworks and Libs üõ†
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Nextjs&lt;/li&gt;
&lt;li&gt;Node Fetch&lt;/li&gt;
&lt;li&gt;Cheerio&lt;/li&gt;
&lt;li&gt;React Tabs&lt;/li&gt;
&lt;li&gt;React Toastify&lt;/li&gt;
&lt;li&gt;React Icons&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
How to use it ‚ùì
&lt;/h2&gt;
&lt;p&gt;Check &lt;a href="https://summaryze-forem.vercel.app/#how-to-use-it" rel="nofollow"&gt;here&lt;/a&gt; a quick guide.&lt;/p&gt;
&lt;h2&gt;
Install üöÄ
&lt;/h2&gt;
&lt;p&gt;Clone the project:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;git clone https://github.com/tuliocll/summaryze-forem.git&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Navigate to project folder and install dependencies:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; summaryze-forem
yarn
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;or&lt;/span&gt;
npm install&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Run the project on dev mode:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;yarn dev
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;or&lt;/span&gt;
npm run dev&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Buy me a coffe! ‚òï
&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ko-fi.com/tuliocll" rel="nofollow"&gt;&lt;img alt="Ko-Fi" src="https://camo.githubusercontent.com/e9940c47ca681beefe2d68eb806f77ee026a91a6976e53f50449e2f9f60187a7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4b6f2d2d66692d4631363036313f7374796c653d666f722d7468652d6261646765266c6f676f3d6b6f2d6669266c6f676f436f6c6f723d7768697465"&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
&lt;h3&gt;
Made with &lt;/h3&gt;‚Ä¶&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/tuliocll/summaryze-forem"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sess%C3%B5es"&gt;
  &lt;/a&gt;
  Sess√µes
&lt;/h2&gt;

&lt;p&gt;Eu gosto de dividir o projeto em varias sess√µes: sobre, como funciona, como instalar etc...&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sobre"&gt;
  &lt;/a&gt;
  Sobre
&lt;/h4&gt;

&lt;p&gt;Gosto de criar uma sess√£o de sobre e detalhar mais sobre o projeto, o que me motivou, como ele foi feito etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#como-utilizar"&gt;
  &lt;/a&gt;
  Como utilizar
&lt;/h4&gt;

&lt;p&gt;√â legal uma parte falando como utilizar o projeto (caso seja necess√°rio).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#instalar"&gt;
  &lt;/a&gt;
  Instalar
&lt;/h4&gt;

&lt;p&gt;Uma sess√£o mostrando comando a comando como instalar o projeto tamb√©m √© super valido.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#como-rodar-e-como-utilizar"&gt;
  &lt;/a&gt;
  Como rodar e como utilizar
&lt;/h4&gt;

&lt;p&gt;Sempre deixo os comandos de como rodar em cada ambiente(caso seja o caso), prontos para serem copiados e colados.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kiN5cmFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jp2b7qlackf4zjbflhqz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kiN5cmFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jp2b7qlackf4zjbflhqz.png" alt="Sess√µes"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6chjzcl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j0lyli3stbnmoh52oun.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6chjzcl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j0lyli3stbnmoh52oun.png" alt="Demo de projeto"&gt;&lt;/a&gt;&lt;br&gt;
Caso seja poss√≠vel, √© sempre legal deixar um link de uma demo online, dessa forma, se for um projeto pessoal ou algum estudo que voc√™ fez, quem estiver vendo conseguir√° ter a experi√™ncia de uso sem precisar fazer todo o processo de instala√ß√£o.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#campos-do-github"&gt;
  &lt;/a&gt;
  Campos do Github
&lt;/h2&gt;

&lt;p&gt;Preencha campos espec√≠ficos do github, como: about e as tag.&lt;br&gt;
Ajuda seu reposit√≥rio ser encontrado facilmente e deixa mais organizado tamb√©m.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UTLfGEoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kaeoc7p7jnncn64vnni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UTLfGEoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kaeoc7p7jnncn64vnni.png" alt="Github"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#utilize-todo-o-poder-do-markdown"&gt;
  &lt;/a&gt;
  Utilize todo o poder do Markdown
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ME9GNUZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91wqym60u9v38ixsn67v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ME9GNUZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91wqym60u9v38ixsn67v.png" alt="Tabelas"&gt;&lt;/a&gt;&lt;br&gt;
O Markdown nos oferece coisas incr√≠veis, assim como no html conseguimos criar links, tabelas, t√≠tulos e varias outras coisas. Eu recomendo duas coisas aqui nesse ponto, a primeira √© que voc√™ &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet"&gt;leia essa documenta√ß√£o&lt;/a&gt; sobre as tags do markdown e a segunda √© um &lt;a href="https://stackedit.io/app#"&gt;editor em markdown online&lt;/a&gt; com varias dessas tags em forma de um editor de texto.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclus√£o
&lt;/h2&gt;

&lt;p&gt;Vou deixar aqui alguns reposit√≥rios meus que tem uns readme que eu gosto bastante e caso voc√™s queiram se inspirar.&lt;br&gt;
Conhece algum repo que tem um readme muito legal ? Comenta pra gente!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tuliocll"&gt;
        tuliocll
      &lt;/a&gt; / &lt;a href="https://github.com/tuliocll/rn-darkmode"&gt;
        rn-darkmode
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Arquivos do tutorial Darkmode para React Native‚öõÔ∏è, confira no YT
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Tutorial Darkmode com React Native‚öõÔ∏è e Styled componentsüíÖüèæ!&lt;/h1&gt;
&lt;div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/a1636ccbe7ae4e15bd36c3be09cddebe5f3cbd6b24d716dacf07d061b96b83c4/68747470733a2f2f312e62702e626c6f6773706f742e636f6d2f2d5f4957326371796f5776592f586f357171557943317a492f41414141414141424152512f7236467853476e626b6849736d61424b6b4c5253694451534e30456a6f48594951434c63424741735948512f733332302f6361706125324225323532383125323532392e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/a1636ccbe7ae4e15bd36c3be09cddebe5f3cbd6b24d716dacf07d061b96b83c4/68747470733a2f2f312e62702e626c6f6773706f742e636f6d2f2d5f4957326371796f5776592f586f357171557943317a492f41414141414141424152512f7236467853476e626b6849736d61424b6b4c5253694451534e30456a6f48594951434c63424741735948512f733332302f6361706125324225323532383125323532392e6a7067" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="http://youtube.com/tuliocalil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2d6d5bee035f276482b63818e64d522d399241dd15afdddf5a48f3f87e1dba36/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f596f75747562652d496e7363726576612d2d73652d726564" alt="Followers"&gt;&lt;/a&gt;&lt;a href="https://github.com/tuliocll"&gt;&lt;img src="https://camo.githubusercontent.com/7ada08b365a1178195f5bf688ac5dfc2daa2b814a327fd7b69c13da516c8a118/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f6c6c6f776572732f74756c696f636c6c3f7374796c653d736f6369616c" alt="Followers"&gt;&lt;/a&gt;&lt;a href="https://raw.githubusercontent.com/tuliocll/rn-darkmode/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/f8ae7861942e1cf172ac74be8f4aba7c656a01b3bc1faf52ded387133b7b1dff/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f74756c696f636c6c2f7361677265732d626f743f7374796c653d736f6369616c" alt="Stars"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/BotSagres" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a5f3d892efae170dc494fd7b5f86b153d625adad0dd0eaaa5d9b1f93c260125e/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f74756c696f63616c696c3f7374796c653d736f6369616c" alt="Follow"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;
üìñSobre&lt;/h2&gt;
&lt;p&gt;Este repositorio contem o projeto final e o projeto base para o tutorial do darkmode com styled components, Anima√ß√£o com React Native, Contexto e estado global com React Native e afins, confira na tabela mais abaixo.&lt;/p&gt;
&lt;h3&gt;
üîÄBranchs:&lt;/h3&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nome da Branch&lt;/th&gt;
&lt;th&gt;Descri√ß√£o&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;Conte√∫do inicial do tutorial, projeto base.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;darkModeComplete&lt;/td&gt;
&lt;td&gt;Tutorial do darkmode completo, todos os arquivos configurados e funcionando.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;darkModeAnimation&lt;/td&gt;
&lt;td&gt;Conte√∫do tutorial de anima√ß√£o e handle completo, configurado e funcionando.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;darkModePersist&lt;/td&gt;
&lt;td&gt;Cont√©udo final do tutorial de persist√™ncia de dados e estado global, configurado e funcionando.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
üë®üèø‚ÄçüíªIniciando&lt;/h2&gt;
&lt;p&gt;Clonar o repositorio:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/tuliocll/rn-darkmode.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instale as dependencias:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn
ou
npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
üé¶Siga o(s) v√≠deo(s);&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tutorial&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DarkMode StyledComponents&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/nJN7UNZetlg" rel="nofollow"&gt;https://youtu.be/nJN7UNZetlg&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Anima√ß√£o Tutorial Pt.1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/AAYd5Vob0jY" rel="nofollow"&gt;https://youtu.be/AAYd5Vob0jY&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Anima√ß√£o Tutorial Pt.2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/Qc3j55C_1U8" rel="nofollow"&gt;https://youtu.be/Qc3j55C_1U8&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Context API e React Navigation&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/cLkX5MtZjEo" rel="nofollow"&gt;https://youtu.be/cLkX5MtZjEo&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Context API e Async Storage&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/gPpH-mTEwbM" rel="nofollow"&gt;https://youtu.be/gPpH-mTEwbM&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;React Navigation: Alterando Rotas e Par√¢metros&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/C2k6kwSi9FY" rel="nofollow"&gt;https://youtu.be/C2k6kwSi9FY&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
üôÖüèø‚Äç‚ôÇÔ∏èEnd&lt;/h3&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/tuliocll/rn-darkmode"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tuliocll"&gt;
        tuliocll
      &lt;/a&gt; / &lt;a href="https://github.com/tuliocll/sagres-bot"&gt;
        sagres-bot
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Um bot que diz diariamente se o sagres est√° online ou n√£o e posta no twitter.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Sagres Bot - Twitter&lt;/h1&gt;
&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/tuliocll/sagres-bot/blob/master/logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gJk31zKS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tuliocll/sagres-bot/raw/master/logo.png" alt="Sagres bot preview" width="320px"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;div&gt;
&lt;p&gt;&lt;a href="https://github.com/tuliocll"&gt;&lt;img src="https://camo.githubusercontent.com/7ada08b365a1178195f5bf688ac5dfc2daa2b814a327fd7b69c13da516c8a118/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f6c6c6f776572732f74756c696f636c6c3f7374796c653d736f6369616c" alt="Followers"&gt;&lt;/a&gt;
&lt;a href="https://raw.githubusercontent.com/tuliocll/sagres-bot/master/Readme.md/#"&gt;&lt;img src="https://camo.githubusercontent.com/f8ae7861942e1cf172ac74be8f4aba7c656a01b3bc1faf52ded387133b7b1dff/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f74756c696f636c6c2f7361677265732d626f743f7374796c653d736f6369616c" alt="Stars"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/BotSagres" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8bdfdc7f19ad683666e10a20fbfac97834dc67e3f0cd1669c59038042efbef7a/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f426f745361677265733f7374796c653d736f6369616c" alt="Follow"&gt;&lt;/a&gt;
&lt;a href="https://nodejs.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/73686fc6e292982441a269ff09b6b2f9a5e0d9b54221c0b8b452f0aeff8fded6/68747470733a2f2f696d672e736869656c64732e696f2f6e6f64652f762f6c7473" alt="Node"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;  

&lt;p&gt;&lt;strong&gt;Instalando&lt;/strong&gt;
Clonar o repositorio:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/tuliocll/sagres-bot.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dentro da pasta do projeto, instale as dependencias:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn
ou
npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Configure as api keys (voc√™ precisa criar uma conta de desenvolvedor no twitter)
E por fim, √© s√≥ rodar&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node src/index.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;
End&lt;/h3&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/tuliocll/sagres-bot"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tuliocll"&gt;
        tuliocll
      &lt;/a&gt; / &lt;a href="https://github.com/tuliocll/todo-google-chrome"&gt;
        todo-google-chrome
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      C√≥digo utilizado para escrever o tutorial "Criando uma extens√£o para o Google Chrome com React", leia aqui:
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Criando uma extens√£o para o Google Chrome com React&lt;/h1&gt;
&lt;div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/tuliocll/todo-google-chrome/master/logo.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kb4Mj33D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/tuliocll/todo-google-chrome/master/logo.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;
Este projeto foi utilizado como base para o tutorial que escrevi &lt;a href="https://dev.to/tuliocalil/criando-extensoes-para-o-google-chrome-com-react-1laa" rel="nofollow"&gt;aqui no dev.to, clique para ler&lt;/a&gt;.&lt;/h3&gt;

&lt;h2&gt;
üöÄ Rodando o projeto&lt;/h2&gt;
&lt;p&gt;Para rodar o projeto em modo de desenvolvimento, basta executar:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;yarn start
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;ou&lt;/span&gt;
npm start&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
üî• Gerando build&lt;/h2&gt;
&lt;p&gt;Para gerar build e usar a extens√£o, consulte o post &lt;a href="https://dev.to/tuliocalil/criando-extensoes-para-o-google-chrome-com-react-1laa" rel="nofollow"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
üéØ Me siga&lt;/h2&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/tuliocalil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9be8550de2c37674f3d40bd4f2f26894a6c5eba03d34ad31804529b6ba5632f6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f796f75747562652d2532334646303030302e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d796f7574756265266c6f676f436f6c6f723d7768697465" alt="Youtube"&gt;&lt;/a&gt;
&lt;a href="https://dev.to/tuliocalil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/84a496c552d03a422342f681f8a81b2ea653b1ad4da007b3503114e8c21a03e9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6465762e746f2d2532333041304130412e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6465762e746f266c6f676f436f6c6f723d7768697465" alt="Dev.to"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/tuliocalil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e1c2fd3bcd4ed13889ed78d1e814261a7cfbc79ae826198b7813850b15a8d956/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f747769747465722d2532333144413146322e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d74776974746572266c6f676f436f6c6f723d7768697465" alt="Twitter"&gt;&lt;/a&gt;
&lt;a href="https://www.linkedin.com/in/tuliocalil/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a493f6833f99fb3c85788d6d9305e6b7a42b838e5ee5d138fd9a8214a7e77472/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c696e6b6564696e2d2532333030373742352e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6c696e6b6564696e266c6f676f436f6c6f723d7768697465" alt="LinkedIn"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Feito com üíô na Bahia, Brasil.&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/tuliocll/todo-google-chrome"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>github</category>
      <category>git</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Typescript vs Javascript</title>
      <author>kpiteng</author>
      <pubDate>Fri, 07 May 2021 01:38:53 +0000</pubDate>
      <link>https://dev.to/kpiteng/typescript-vs-javascript-1pcd</link>
      <guid>https://dev.to/kpiteng/typescript-vs-javascript-1pcd</guid>
      <description>&lt;p&gt;TypeScript is a programming language developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript and adds optional static typing to the language. Current Stable release: 4.2.3 / 5 March 2021. It has extensions: ts,.tsx.&lt;/p&gt;

&lt;p&gt;TypeScript used to develop JavaScript applications for both client-side and server-side execution. Typescipt describe the shape of an object, also validate that your code is working correctly. All valid JavaScript code is also TypeScript code.&lt;/p&gt;

&lt;p&gt;TypeScript code is transformed into JavaScript code via the TypeScript compiler or Babel. This JavaScript is clean, simple code which runs anywhere JavaScript runs: In a browser, on Node.JS or in your apps.&lt;/p&gt;

&lt;p&gt;Typescript support in Visual Studio, Visual Studio Code, Nova, Atom, Sublime Text, Emacs, Vim, WebStorm and Eclipse. Provide wide range of accessibility &amp;amp; usablity.&lt;/p&gt;

&lt;p&gt;Typescript is combination of static type checking with intelligent code completion provides a significant boost in developer productivity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript-vs-javascript"&gt;
  &lt;/a&gt;
  TypeScript vs JavaScript
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;br&gt;
TS: TS is strongly type object oriented compiled langauge.&lt;br&gt;
JS: Javascript is a light weight, interpreted programming language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Design &amp;amp; Developed by&lt;/strong&gt;&lt;br&gt;
TS: Anders Heijsberg at Microsoft&lt;br&gt;
JS: J Brendan Eich at Netscape Communications Coropration, Mozilla Foundation, ECMA International&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Light/Heavy Weight&lt;/strong&gt;&lt;br&gt;
TS: Heavy Weighted interpreted programming language&lt;br&gt;
JS - Light weighted, design for development of large application and trans compile to JS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Client Side/Server Side&lt;/strong&gt;&lt;br&gt;
TS: Specially used in Client Side&lt;br&gt;
JS: Both client side &amp;amp; server side&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File Extension&lt;/strong&gt;&lt;br&gt;
TS: .ts, .tsx&lt;br&gt;
JS: .js, .jsx&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
TS: Modules, Functions, Variable, Statement &amp;amp; Expression, Comments&lt;br&gt;
JS: All Statement are written within Script tag, tell browser to start interpreting text between script tag&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits&lt;/strong&gt;&lt;br&gt;
TS: Static Typing, Better Choice Of large Coding Projects, Better For Collaboration - Type Safetly, Warning, Options, Required, Better Productivity, ECMA 6 code, Dynamic Typing, Auto Compilation are help developers to boost their productivity&lt;br&gt;
JS: Huge active community, Supported Native Browsers, While for TS will first complied and convert to js, which is extra step, More flexibility&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Want to start with Typescript, Let's start!&lt;/strong&gt; Join Us &lt;a href="http://www.kpiteng.com"&gt;www.kpiteng.com&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-us-"&gt;
  &lt;/a&gt;
  Connect Us -
&lt;/h3&gt;

&lt;p&gt;KPITENG&lt;br&gt;
Digital Transformation Service Provider&lt;br&gt;
&lt;a href="http://www.kpiteng.com"&gt;www.kpiteng.com&lt;/a&gt;&lt;br&gt;
&lt;a href="mailto:hello@kpiteng.com"&gt;hello@kpiteng.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>react</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Breaking up with Flutter, getting along with PWA</title>
      <author>Anurag Vohra</author>
      <pubDate>Fri, 07 May 2021 01:37:06 +0000</pubDate>
      <link>https://dev.to/anuragvohraec/breaking-up-with-flutter-getting-along-with-pwa-4fic</link>
      <guid>https://dev.to/anuragvohraec/breaking-up-with-flutter-getting-along-with-pwa-4fic</guid>
      <description>&lt;p&gt;Yeah! I had enough of flutter. I will like to keep it short.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-problems-i-had-with-flutter"&gt;
  &lt;/a&gt;
  7 problems I had with Flutter:
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;No separation of style, coding and layout&lt;/strong&gt;. An infinite depth widget tree for creating a simple animated button. The code looks ugly as hell, the bigger the project gets the uglier and difficult it becomes to manage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Its not cross platform in true sense&lt;/strong&gt;, once you dwelve into the world of plugin writings. You will often be in position wher you have to write code in swift (For IOS) and C/C++/Kotlin for android. So how can it be called cross platform, when some one else does have to write a code for both platform!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;App Size is too big&lt;/strong&gt;. You use 3 Plugins and your project become bigger than any app on the planet!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unecessary &lt;strong&gt;Programming Context Switching&lt;/strong&gt; : Front end code in Dart, Back end code in Javascript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Requires App store to publish app&lt;/strong&gt;: Publishing through some kind of App store! We all know their &lt;a href="https://www.bbc.com/news/technology-53777379"&gt;monopoly and dictatorial regimes&lt;/a&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The development time of any decent app will be too big!&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Requires Heavy machine to do the job: One requires pretty good machine to do the job.&lt;/strong&gt; A Flutter full stack developer would have to open follwing big apps to work.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;IDE: Say Android studio (Very big in itself) and if you are creating a modular project, one has to open two to four instance of Android studio.&lt;/li&gt;
&lt;li&gt;Chrome/Firefox: You would have to google code many times, and that too many tabs!&lt;/li&gt;
&lt;li&gt;Emulator. Its pretty Big app in itself.&lt;/li&gt;
&lt;li&gt;IDE for back end code. Which again if is modular (which every big project must be), then you need to open two to three instance of such IDE.&lt;/li&gt;
&lt;li&gt;Docker with local instance of DB/ Micro services.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have a 8 GB Linux machine with 16 GB swap memory and it made me cry, as apart from writing codes in DART, Javascript (for backend), DB programming , I would have to manually manage memory on my system.&lt;/p&gt;

&lt;p&gt;So why &lt;a href="https://web.dev/what-are-pwas/"&gt;PWA: Progressive Web App&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Its a new breed of websites , which user can install on IOS, Android and Desktop, just if they were some mobile apps. Yeah install, just like regular mobile apps user can install them on their mobile phone. By installing it means one can cache any big file at user machine, and it wont be fetched from server again and again! (Just as your regaulr mobile app gets installed once).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As they are plain simple websites, one can create them with just HTML, CSS, and Javascript.&lt;/p&gt;

&lt;p&gt;There are &lt;a href="https://www.youtube.com/results?search_query=progressive+web+app"&gt;tons of better articles&lt;/a&gt; which will give you what PWA are and their capabilities. I will like to rather focus on how PWA solve above problems.&lt;/p&gt;

&lt;p&gt;In the rest of the article, I assume you already know what PWA are.&lt;/p&gt;

&lt;p&gt;Solutions to above problems solved by PWA:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;No separation of style , coding and layout.&lt;/strong&gt;&lt;br&gt;
I think any one who knows HTML,CSS and JS knows how it solves this problem pretty good.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Not cross platform in true sense.&lt;/strong&gt; &lt;br&gt;
Well web works every where*. If something is web standard, its gauranteed to work on all system which adheres to it.&lt;br&gt;
Yeah I will be fair here I do need to acutally write code sometimes to target specific machine, but its a one time job. I wanted to to access contacts on user machine, and PWA only offers this kind of access on newer Systems, to target old system, I wrapped my PWA in pure Android JAVA code!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;App Size is too big.&lt;/strong&gt;&lt;br&gt;
A decent flutter app which uses few plugins, will end up of being pretty Big!&lt;br&gt;
A same flutter app which was half completed was of 30 MB in size, and the one developed in PWA was mere 88 KB!&lt;br&gt;
I started this app with Flutter ended up with 30 MB code during mid development, then I tried it on PWA! and developed whole app in JS, HTML and CSS, latter at last moment came to know I cannot read contacts on old mobile phones !&lt;br&gt;
I googles some shell projects which can give me access to Contacts and expose javascript functions to my webviews. I created such shells, and such shell only were of 88 KB size. If I had to design any app in future which requires contacts, I can reuse this shells.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Programming Context Switching.&lt;/strong&gt;&lt;br&gt;
Front in dart and back end in javascript.&lt;br&gt;
My story on this goes like this. I had been a JAVA developer for almost a decade , and then I switched to javascript as I hated Context switching and simplicity of Javascript and NPM at that time.&lt;br&gt;
Now when I swicthed to flutter I am again to the same problem I solved many years back: Context switching!&lt;br&gt;
Well now on PWA all I have to code is in javascript every where. I have chosen my database too which uses Javascript for most of its functioning (CouchDB).&lt;br&gt;
All I need to focus is on one langauge and I am good to go.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Requires App store to publish app&lt;/strong&gt;&lt;br&gt;
Well PWA can be published on App store and can be hosted on your own servers too, from where user can install them fearlessly!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The development time of any decent app will be too big.&lt;/strong&gt;&lt;br&gt;
Coding in HTML/CSS/JS is way faster then coding widgets tree with the depths of hell.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Requires Heavy machine to do the job&lt;/strong&gt;&lt;br&gt;
All I need is one IDE with integerated browser. Say VSCODE to work on my back end / front end , runnig dockers and no eumlators required.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>flutter</category>
      <category>pwa</category>
      <category>javascript</category>
      <category>mobile</category>
    </item>
    <item>
      <title>Docker run ‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ network ‡∏Ç‡∏≠‡∏á container ‡∏≠‡∏∑‡πà‡∏ô</title>
      <author>Weerasak Chongnguluam</author>
      <pubDate>Fri, 07 May 2021 01:10:42 +0000</pubDate>
      <link>https://dev.to/iporsut/docker-run-network-container-118m</link>
      <guid>https://dev.to/iporsut/docker-run-network-container-118m</guid>
      <description>&lt;p&gt;‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô package chromedp &lt;a href="https://github.com/chromedp/chromedp"&gt;https://github.com/chromedp/chromedp&lt;/a&gt; ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô package ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Go ‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Chrome Engine ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ‡πÑ‡∏î‡πâ‡πÅ‡∏ö‡∏ö browser ‡∏ó‡∏≥ ‡πÇ‡∏î‡∏¢‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏≠‡∏á ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏Å‡πá‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥ web bot ‡∏ó‡∏≥ web crawler/scrapper ‡∏ï‡πà‡∏≤‡∏á‡πÜ‡∏ô‡∏±‡πà‡∏ô‡πÄ‡∏≠‡∏á&lt;/p&gt;

&lt;p&gt;‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏≠‡∏≤‡∏°‡∏±‡∏ô‡πÑ‡∏õ‡∏£‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ Docker ‡∏ã‡∏∂‡πà‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Chrome ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ô‡∏±‡πâ‡∏ô ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏Å‡πá‡∏ï‡∏≤‡∏° Chrome ‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏≤‡∏°‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô remote ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Chrome DevTools Websocket endpoint&lt;/p&gt;

&lt;p&gt;‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ï‡πà‡∏≠‡∏°‡∏≤ ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô Chrome headless ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô Chrome engine ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Chrome application ‡∏ô‡∏±‡πà‡∏ô‡πÄ‡∏≠‡∏á ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ó‡∏≥ docker image ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà &lt;a href="https://hub.docker.com/r/chromedp/headless-shell/"&gt;https://hub.docker.com/r/chromedp/headless-shell/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô headless-shell ‡∏Å‡πá‡∏£‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô docker ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -d -p 9222:9222 --rm --name headless-shell chromedp/headless-shell
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‡∏ï‡πà‡∏≠‡∏°‡∏≤‡∏ú‡∏°‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á chromedp ‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ &lt;a href="https://github.com/chromedp/examples/blob/master/remote/main.go"&gt;https://github.com/chromedp/examples/blob/master/remote/main.go&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Command remote is a chromedp example demonstrating how to connect to an&lt;/span&gt;
&lt;span class="c"&gt;// existing Chrome DevTools instance using a remote WebSocket URL.&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"context"&lt;/span&gt;
    &lt;span class="s"&gt;"flag"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/chromedp/chromedp"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;devtoolsWsURL&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"devtools-ws-url"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"DevTools WebSsocket URL"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;devtoolsWsURL&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"must specify -devtools-ws-url"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// create allocator context for use with creating a browser context later&lt;/span&gt;
    &lt;span class="n"&gt;allocatorContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;chromedp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRemoteAllocator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;devtoolsWsURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// create context&lt;/span&gt;
    &lt;span class="n"&gt;ctxt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;chromedp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allocatorContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// run task list&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;chromedp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctxt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;chromedp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://duckduckgo.com"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;chromedp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WaitVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#logo_homepage_link"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;chromedp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OuterHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Failed getting body of duckduckgo.com: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Body of duckduckgo.com starts with:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‡πÇ‡∏î‡∏¢‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡πÉ‡∏™‡πà go.mod ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ package ‡πÉ‡∏´‡πâ ‡∏ã‡∏∂‡πà‡∏á go.mod ‡∏°‡∏µ‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module example-chromedp-remote

go 1.16

require github.com/chromedp/chromedp v0.7.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏™‡∏£‡πâ‡∏≤‡∏á Dockerfile ‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM golang:1.16.4-alpine as builder

WORKDIR /app

COPY go.mod /app
COPY main.go /app

RUN go mod download
RUN go build -o app

FROM alpine
COPY --from=builder /app/app /app
ENTRYPOINT ["/app"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ build docker ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t example-chromedp-remote .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏£‡∏±‡∏ô example-chromedp-remote ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á ws url ‡∏Ç‡∏≠‡∏á headless ‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô option ‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô ‡∏™‡πà‡∏ß‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏´‡∏≤ ws url ‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl 127.0.0.1:9222/json/version
{
   "Browser": "Chrome/90.0.4430.93",
   "Protocol-Version": "1.3",
   "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36",
   "V8-Version": "9.0.257.23",
   "WebKit-Version": "537.36 (@4df112c29cfe9a2c69b14195c0275faed4e997a7)",
   "webSocketDebuggerUrl": "ws://127.0.0.1:9222/devtools/browser/68424ed8-a10a-4633-9618-f93b443e0aa9"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏≠‡∏≤ URL ‡∏ï‡∏£‡∏á &lt;code&gt;"webSocketDebuggerUrl"&lt;/code&gt; ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏±‡πà‡∏ô‡πÄ‡∏≠‡∏á&lt;/p&gt;

&lt;p&gt;‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏Å‡πá‡∏™‡∏±‡πà‡∏á‡∏£‡∏±‡∏ô example-chromedp-remote ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run --rm --network="container:headless-shell" example-chromedp-remote -devtools-ws-url="ws://127.0.0.1:9222/devtools/browser/68424ed8-a10a-4633-9618-f93b443e0aa9"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô network ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô IP ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏≠ option &lt;code&gt;--network="container:headless-shell"&lt;/code&gt; ‡∏ô‡∏±‡πà‡∏ô‡πÄ‡∏≠‡∏á pattern ‡∏°‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏°‡∏µ &lt;code&gt;container:&lt;/code&gt; ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠ container ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡πÑ‡∏õ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (ref: &lt;a href="https://docs.docker.com/engine/reference/run/#network-container"&gt;https://docs.docker.com/engine/reference/run/#network-container&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;‡πÅ‡∏ñ‡∏°‡∏ó‡πâ‡∏≤‡∏¢ ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ docker compose ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡πÜ‡∏ô‡∏±‡πâ‡∏ô ‡∏à‡∏∞‡πÉ‡∏ä‡πâ config key ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠ network_mode ‡πÅ‡∏ï‡πà‡∏ß‡πà‡∏≤‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠ container ‡∏ï‡∏£‡∏á‡πÜ ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ service ‡πÅ‡∏ó‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ prefix &lt;code&gt;service:&lt;/code&gt; ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠ service ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.8"&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;chrome-headless&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;chromedp/headless-shell"&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;9222:9222"&lt;/span&gt;

  &lt;span class="na"&gt;example-chromedp-remote&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
    &lt;span class="na"&gt;network_mode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;service:chrome-headless"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡πá‡∏™‡∏±‡πà‡∏á‡∏£‡∏±‡∏ô chrome-headless ‡∏ú‡πà‡∏≤‡∏ô docker compose ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker compose up -d chrome-headless
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏£‡∏±‡∏ô example-chromedp-remote ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker compose run --rm example-chromedp-remote -devtools-ws-url="ws://127.0.0.1:9222/devtools/browser/cdaa6d7f-3d08-4593-ad4d-0d630abcd627"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#%E0%B8%AA%E0%B8%A3%E0%B8%B8%E0%B8%9B"&gt;
  &lt;/a&gt;
  ‡∏™‡∏£‡∏∏‡∏õ
&lt;/h2&gt;

&lt;p&gt;‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏ä‡πâ network ‡∏Ç‡∏≠‡∏á container ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ú‡πà‡∏≤‡∏ô docker run ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ option --network ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏≠ &lt;code&gt;container:&lt;/code&gt; ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠ container ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏õ‡∏ï‡πà‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô &lt;code&gt;--network="conatiner:headless"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ docker compose ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏î‡∏¢‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤ &lt;code&gt;network_mode&lt;/code&gt; ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏≠ &lt;code&gt;service:&lt;/code&gt; ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠ service ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏õ‡∏ï‡πà‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô &lt;code&gt;network_mode: "service:chrome-headless"&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E0%B8%82%E0%B8%AD%E0%B8%9D%E0%B8%B2%E0%B8%81-buy-me-a-coffee"&gt;
  &lt;/a&gt;
  ‡∏Ç‡∏≠‡∏ù‡∏≤‡∏Å Buy Me a Coffee
&lt;/h2&gt;

&lt;p&gt;‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ô‡πÉ‡∏î‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ä‡∏≠‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ‡∏Ç‡∏≠‡∏á‡∏ú‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡πÅ‡∏ü‡πÄ‡∏•‡πá‡∏Å‡πÜ‡∏ô‡πâ‡∏≠‡∏¢‡πÜ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏≤‡∏á Buy Me a Coffee ‡∏Ñ‡∏•‡∏¥‡πä‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/weerasak"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πà‡∏≤‡∏ô‡πÉ‡∏î‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ‡∏´‡∏£‡∏∑‡∏≠ Paypal ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏≤‡∏á PromptPay ‡πÇ‡∏î‡∏¢‡∏î‡∏π QR Code ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏ô‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà Page DevDose ‡∏Ñ‡∏£‡∏±‡∏ö &lt;a href="https://web.facebook.com/devdoseth"&gt;https://web.facebook.com/devdoseth&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>go</category>
    </item>
    <item>
      <title>"Let me wait-for-it and call you back", said wait-for-it.js</title>
      <author>Muhammad Tayyab Sheikh</author>
      <pubDate>Fri, 07 May 2021 00:26:09 +0000</pubDate>
      <link>https://dev.to/cstayyab/let-me-wait-for-it-and-call-you-back-said-wait-for-it-js-50h1</link>
      <guid>https://dev.to/cstayyab/let-me-wait-for-it-and-call-you-back-said-wait-for-it-js-50h1</guid>
      <description>&lt;p&gt;Ever encountered as situation where you had to wait for some HTML element in a webpage before you can execute a function?&lt;br&gt;
Wait no more, because &lt;code&gt;wait-for-it.js&lt;/code&gt; is at your service.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-does-it-offer"&gt;
  &lt;/a&gt;
  What does it offer?
&lt;/h2&gt;

&lt;p&gt;It offers you a much simpler way to execute a function (callback) when your specified (selector) element gets added to the page.&lt;/p&gt;

&lt;p&gt;## How does it work?&lt;br&gt;
It uses nothing else but your very own JavaScript to accomplish the task i.e. JavaScript's &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"&gt;&lt;code&gt;MutationObserver&lt;/code&gt; API&lt;/a&gt;. You can have a detailed look at its code here:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/cstayyab"&gt;
        cstayyab
      &lt;/a&gt; / &lt;a href="https://github.com/cstayyab/wait-for-it.js"&gt;
        wait-for-it.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A JavaScript Library that allows you to execute function when a certain element gets added to the document
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#how-do-i-use-it"&gt;
  &lt;/a&gt;
  How do I use it?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Include it in your webpage using jsDelivr CDN&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/gh/cstayyab/wait-for-it.js@0.1.0/wait-for-it.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Register a &lt;code&gt;selector&lt;/code&gt; to listen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;waitForElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#food&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your Food is Here!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Voil√†!!&lt;/p&gt;




&lt;br&gt;&lt;br&gt;
&lt;em&gt;Feel free to star and fork it on &lt;a href="https://github.com/cstayyab/wait-for-it.js"&gt;GitHub&lt;/a&gt;&lt;/em&gt;

</description>
      <category>javascript</category>
      <category>showdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>CSS Selectors</title>
      <author>rafaelvieirab</author>
      <pubDate>Fri, 07 May 2021 00:19:47 +0000</pubDate>
      <link>https://dev.to/rafaelvieirab/css-selectors-3pi3</link>
      <guid>https://dev.to/rafaelvieirab/css-selectors-3pi3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#basic-selectors"&gt;
  &lt;/a&gt;
  Basic Selectors
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-raw-endraw-"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;*&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
* {
 margin: 0;
 padding: 0;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The star symbol will target every single element on the page. Many developers will use this trick to zero out the margins and padding. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-x"&gt;
  &lt;/a&gt;
  2. #X
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
#container {
   width: 960px;
   margin: auto;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Prefixing the hash symbol to a selector allows us to target by id.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-x"&gt;
  &lt;/a&gt;
  3. .X
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
.error {
  color: red;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a class selector.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-x"&gt;
  &lt;/a&gt;
  4. X
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
a { color: red; }
ul { margin-left: 0; }
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a element selector.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#combinator-selectors"&gt;
  &lt;/a&gt;
  Combinator Selectors
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#5-x-y"&gt;
  &lt;/a&gt;
  5. X Y
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
li a { text-decoration: none; }
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select the &lt;code&gt;Y&lt;/code&gt; element that is inside&lt;code&gt;X&lt;/code&gt;, but not necessarily the immediate children.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-x-y"&gt;
  &lt;/a&gt;
  6. X + Y
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
ul + p {
   color: red;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is referred to as an adjacent selector. It will select only the element that is immediately preceded by the former element. In this case, only the first paragraph after each ul will have red text.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-x-gt-y"&gt;
  &lt;/a&gt;
  7. X &amp;gt; Y
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
div#container &amp;gt; ul {
  border: 1px solid black;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The difference between the standard X Y and X &amp;gt; Y is that the latter will only select direct childrenIn the example above, all elements &lt;code&gt;ul&lt;/code&gt; children of &lt;code&gt;div#container&lt;/code&gt; will be selected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-x-y"&gt;
  &lt;/a&gt;
  8. X ~ Y
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
ul ~ p {
   color: red;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This sibling combinator is similar to X + Y, but it's less strict. While an adjacent selector (ul + p) will only select the first element that is immediately preceded by the former selector, this one is more generalized. It will select, referring to our example above, any p elements, as long as they follow a ul.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#attribute-selectors"&gt;
  &lt;/a&gt;
  Attribute Selectors
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#9-xtitle"&gt;
  &lt;/a&gt;
  9. X[title]
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
.error {
  color: red;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Referred to as an attributes selector, in our example above, this will only select the anchor tags that have a title attribute. Anchor tags which do not will not receive this particular styling. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-xhreffoo"&gt;
  &lt;/a&gt;
  10. X[href="foo"]
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
a[href="https://code.tutsplus.com"] {
  color: #83b348; /* Envato green */
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The snippet above will style all anchor tags which link to &lt;a href="https://code.tutsplus.com"&gt;https://code.tutsplus.com&lt;/a&gt;; they'll receive our branded green color. All other anchor tags will remain unaffected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-xhreffoo"&gt;
  &lt;/a&gt;
  11. X[href*="foo"]
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
a[href*="tutsplus"] {
  color: #83b348; /* Envato green */
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There we go; that's what we need. The star designates that the proceeding value must appear somewhere in the attribute's value. That way, this covers tutsplus.com, code.tutsplus.com, and even webdesign.tutsplus.com.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-xhrefhttp"&gt;
  &lt;/a&gt;
  12. X[href^="http"]
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
a[href^="http"] {
   background: url(path/to/external/icon.png) no-repeat;
   padding-left: 10px;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ever wonder how some websites are able to display a little icon next to the links which are external? I'm sure you've seen these before; they're nice reminders that the link will direct you to an entirely different website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-xhrefhttp"&gt;
  &lt;/a&gt;
  13. X[href$="http"]
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
a[href^=".jpg"] {
   color: red
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, we use a regular expressions symbol, &lt;code&gt;$&lt;/code&gt;, to refer to the end of a string. In this case, we're searching for all anchors which link to an image‚Äîor at least a URL that ends with .jpg. Keep in mind that this won't capture GIF and PNG images.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-xdatafoo"&gt;
  &lt;/a&gt;
  14. X[data-*="foo"]]
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
a[data-filetype="image"] {
   color: red;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selects all &lt;code&gt;a&lt;/code&gt;'s with &lt;code&gt;data-filetype&lt;/code&gt; equal to "image".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#xfoobar"&gt;
  &lt;/a&gt;
  X[foo~="bar"]
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
a[data-info~="external"] {
   color: red;
}
a[data-info~="image"] {
   border: 1px solid black;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a special one that'll impress your friends. Not too many people know about this trick. The tilde (~) symbol allows us to target an attribute which has a space-separated list of values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pseudo-selectors"&gt;
  &lt;/a&gt;
  Pseudo Selectors
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#16-xvisited-and-xlink"&gt;
  &lt;/a&gt;
  16. X:visited and X:link
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
a:link { color: red; }
a:visited { color: purple; }
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#17-xchecked"&gt;
  &lt;/a&gt;
  17. X:checked
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
input[type=radio]:checked {
    border: 1px solid black;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#18-xafter"&gt;
  &lt;/a&gt;
  18. X:after
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
.clearfix:after {
    content: "";
    display: block;
    clear: both;
    visibility: hidden;
    font-size: 0;
    height: 0;
} 
.clearfix { 
    *display: inline-block; 
    _height: 1%;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This hack uses the :after pseudo class to append a space after the element, and then clear it. It's an excellent trick to have in your tool bag, particularly in the cases when the overflow: hidden; method isn't possible.&lt;/p&gt;

&lt;p&gt;This hack uses the :after pseudo class to append a space after the element, and then clear it. It's an excellent trick to have in your tool bag, particularly in the cases when the overflow: hidden; method isn't possible&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#19-xhover"&gt;
  &lt;/a&gt;
  19. X:hover
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
adiv:hover {
  background: #e3e3e3;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#20-xnotselector"&gt;
  &lt;/a&gt;
  20. X:not(selector)
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
div:not(#container) {
   color: blue;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The negation pseudo class is particularly helpful. Let's say I want to select all divs, except for the one which has an id of container. The snippet above will handle that task perfectly.&lt;/p&gt;

&lt;p&gt;Or, if I wanted to select every single element (not advised) except for paragraph tags, we could do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#21-xpseudoelement"&gt;
  &lt;/a&gt;
  21. X::pseudoElement
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
p::first-line {
   font-weight: bold;
   font-size: 1.2em;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use pseudo elements (designated by ::) to style fragments of an element, such as the first line or the first letter. Keep in mind that these must be applied to block-level elements in order to take effect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nth-child-and-type-selectors"&gt;
  &lt;/a&gt;
  Nth Child and Type Selectors
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#22-xnthchildn"&gt;
  &lt;/a&gt;
  22. X:nth-child(n)
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
li:nth-child(3) {
   color: red;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note that nth-child accepts an integer as a parameter, but this is not zero-based. If you wish to target the second list item, use &lt;code&gt;li:nth-child(2)&lt;/code&gt;.&lt;br&gt;
We can even use this to select a variable set of children. For example, we could do &lt;code&gt;li:nth-child(4n)&lt;/code&gt; to select every fourth list item.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#23-xnthlastchildn"&gt;
  &lt;/a&gt;
  23. X:nth-last-child(n)
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
li:nth-last-child(2) {
   color: red;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What if you had a huge list of items in a ul, and you only needed to access, say, the third to last item? Rather than doing li:nth-child(397), you could instead use the nth-last-child pseudo class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#24-xnthoftypen"&gt;
  &lt;/a&gt;
  24. X:nth-of-type(n)
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
ul:nth-of-type(3) {
    border: 1px solid black;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There will be times when, rather than selecting a child, you instead need to select according to the type of element.&lt;br&gt;
Imagine markup that contains five unordered lists. If you wanted to style only the third ul, and didn't have a unique id to hook into, you could use the nth-of-type(n) pseudo class. In the snippet above, only the third ul will have a border around it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#25-xnthlastoftypen"&gt;
  &lt;/a&gt;
  25. X:nth-last-of-type(n)
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
ul:nth-last-of-type(3) {
   border: 1px solid black;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And yes, to remain consistent, we can also use nth-last-of-type to begin at the end of the selectors list and work our way back to target the desired element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#26-xfirstchild"&gt;
  &lt;/a&gt;
  26. X:first-child
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
ul:nth-of-type(3) {
    border: 1px solid black;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This structural pseudo class allows us to target only the first child of the element's parent. You'll often use this to remove borders from the first and last list items.&lt;br&gt;
For example, let's say you have a list of rows, and each one has a border-top and a &lt;code&gt;border-bottom&lt;/code&gt;. Well, with that arrangement, the first and last item in that set will look a bit odd.&lt;br&gt;
Many designers apply classes of &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt; to compensate for this. Instead, you can use these pseudo classes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#27-xlastchild"&gt;
  &lt;/a&gt;
  27. X:last-child
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
ul &amp;gt; li:last-child {
   color: green;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The opposite of first-child, last-child will target the last item of the element's parent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#28-xonlychild"&gt;
  &lt;/a&gt;
  28. X:only-child
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
div p:only-child {
    color: red;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Truthfully, you probably won't find yourself using the &lt;code&gt;only-child&lt;/code&gt; pseudo class too often. Nonetheless, it's available, should you need it.&lt;/p&gt;

&lt;p&gt;It allows you to target elements which are the only child of its parent. For example, referencing the snippet above, only the paragraph that is the only child of the &lt;code&gt;div&lt;/code&gt; will be colored red.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#29-xonlyoftype"&gt;
  &lt;/a&gt;
  29. X:only-of-type
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
li:only-of-type {
   font-weight: bold;
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This structural pseudo class can be used in some clever ways. It will target elements that do not have any siblings within its parent container. As an example, let's target all uls which have only a single list item.&lt;/p&gt;

&lt;p&gt;First, ask yourself how you would accomplish this task. You could do ul li, but this would target all list items. The only solution is to use only-of-type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#30-xfirstoftype"&gt;
  &lt;/a&gt;
  30. X:first-of-type
&lt;/h3&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```css
ul:first-of-type li:nth-last-child(1) {
    font-weight: bold;   
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first-of-type pseudo class allows you to select the first siblings of its type.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048"&gt;The 30 CSS Selectors You Must Memorize&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 10 mistakes to avoid when using React</title>
      <author>Erin Schaffer</author>
      <pubDate>Fri, 07 May 2021 00:11:24 +0000</pubDate>
      <link>https://dev.to/educative/top-10-mistakes-to-avoid-when-using-react-27hn</link>
      <guid>https://dev.to/educative/top-10-mistakes-to-avoid-when-using-react-27hn</guid>
      <description>&lt;p&gt;React has quickly become the most popular front-end framework in the tech world, used by big tech companies such as Facebook, Netflix, Airbnb, and many more. React developers are in high demand, and the demand continues to grow. &lt;/p&gt;

&lt;p&gt;Today, we‚Äôll explore the top 10 mistakes React developers make -- and how to fix them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We‚Äôll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#components"&gt;Not creating enough components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#state"&gt;Modifying the state directly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#number"&gt;Passing a number as a string when passing props&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#key"&gt;Not using key on a listing component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setstate"&gt;Forgetting that setState is asynchronous&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#redux"&gt;Using Redux too much&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#godcomponents"&gt;Creating and using God components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#folder"&gt;Not following the ReactJS folder structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#props"&gt;Sending props as strings (instead of numbers)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#capital"&gt;Forgetting to start a component name with a capital letter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nextsteps"&gt;What to learn next&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-not-creating-enough-components"&gt;
  &lt;/a&gt;
  1. Not creating enough components
&lt;/h2&gt;

&lt;p&gt;A common mistake that React developers make is that they don‚Äôt create enough components. With React, you‚Äôre able to create large components that execute many tasks, but it‚Äôs &lt;strong&gt;better to keep components small&lt;/strong&gt;, with one component corresponding to one function. Not only does it &lt;strong&gt;save you time, but it also helps you with debugging&lt;/strong&gt; since you know which components are associated with any errors that may arise. &lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look at an example of the &lt;code&gt;TodoList&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ./components/TodoList.js

import React from 'react';

import { useTodoList } from '../hooks/useTodoList';
import { useQuery } from '../hooks/useQuery';
import TodoItem from './TodoItem';
import NewTodo from './NewTodo';

const TodoList = () =&amp;gt; {
  const { getQuery, setQuery } = useQuery();
  const todos = useTodoList();
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;ul&amp;gt;
        {todos.map(({ id, title, completed }) =&amp;gt; (
          &amp;lt;TodoItem key={id} id={id} title={title} completed={completed} /&amp;gt;
        ))}
        &amp;lt;NewTodo /&amp;gt;
      &amp;lt;/ul&amp;gt;
      &amp;lt;div&amp;gt;
        Highlight Query for incomplete items:
        &amp;lt;input value={getQuery()} onChange={e =&amp;gt; setQuery(e.target.value)} /&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default TodoList;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-modifying-the-state-directly"&gt;
  &lt;/a&gt;
  2. Modifying the state directly
&lt;/h2&gt;

&lt;p&gt;In React, &lt;strong&gt;state should be immutable&lt;/strong&gt;. If you modify the state directly, it‚Äôll cause performance issues that are difficult to fix.&lt;/p&gt;

&lt;p&gt;Let‚Äôs look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const modifyPetsList = (element, id) =&amp;gt; {
  petsList[id].checked = element.target.checked;
  setPetsList(petsList);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You want to update the checked key of an object in an array based on the state of a checkbox, but you have a problem. React can‚Äôt observe and trigger re-rendering because the object is being changed with the same reference. &lt;/p&gt;

&lt;p&gt;To fix this, you can either use the &lt;code&gt;setState()&lt;/code&gt; method or the &lt;code&gt;useState()&lt;/code&gt; hook. Either of these methods will ensure that your changes are acknowledged by React and your DOM is correctly re-rendered.&lt;/p&gt;

&lt;p&gt;Let‚Äôs rewrite the previous example and use the &lt;code&gt;useState()&lt;/code&gt; method. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You could also use &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;spread syntax&lt;/code&gt; to avoid mutating other state values.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const modifyPetsList = (element, id) =&amp;gt; {
  const { checked } = element.target;
  setpetsList((pets) =&amp;gt; {
    return pets.map((pet, index) =&amp;gt; {
      if (id === index) {
        pet = { ...pet, checked };
      }
      return pet;
    });
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-passing-a-number-as-a-string-when-passing-props"&gt;
  &lt;/a&gt;
  3. Passing a number as a string when passing props
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Passing a number as a string when passing props can lead to issues&lt;/strong&gt; in a React program. &lt;/p&gt;

&lt;p&gt;Let‚Äôs start with an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Arrival extends React.Component {
  render() {
    return (
      &amp;lt;h1&amp;gt;
        Hi! You arrived {this.props.position === 1 ? "first!" : "last!"} .
      &amp;lt;/h1&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, the component expects the position as a prop and declares that the position should be a number. Since you‚Äôre making a strict comparison, anything that‚Äôs not a number or not exactly equal to 1 would trigger the second expression and print ‚Äúlast!‚Äù. &lt;/p&gt;

&lt;p&gt;To fix this, you should insert curly brackets around the input like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const element = &amp;lt;Arrival position={1} /&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-not-using-raw-key-endraw-on-a-listing-component"&gt;
  &lt;/a&gt;
  4. Not using &lt;code&gt;key&lt;/code&gt; on a listing component
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs say you need to render a list of items and your code looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const lists = ['cat', 'dog', 'fish‚Äô];

render() {
  return (
    &amp;lt;ul&amp;gt;
      {lists.map(listNo =&amp;gt;
        &amp;lt;li&amp;gt;{listNo}&amp;lt;/li&amp;gt;)}
    &amp;lt;/ul&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you‚Äôre working with a smaller app, this could work. But when working with large lists, you‚Äôll run into rendering problems when wanting to modify or delete an item from the list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React tracks all of the list elements on the Document Object Model (DOM)&lt;/strong&gt;. React wouldn‚Äôt know what has changed in your list without this record. &lt;/p&gt;

&lt;p&gt;To fix this, &lt;strong&gt;you need to add keys to all of your list elements&lt;/strong&gt;. Keys give each element a unique identity, which helps React determine which items have been added, removed, modified, etc. &lt;/p&gt;

&lt;p&gt;Here‚Äôs how to do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  {lists.map(listNo =&amp;gt;
    &amp;lt;li key={listNo}&amp;gt;{listNo}&amp;lt;/li&amp;gt;)}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-forgetting-that-setstate-is-asynchronous"&gt;
  &lt;/a&gt;
  5. Forgetting that setState is asynchronous
&lt;/h2&gt;

&lt;p&gt;It‚Äôs easy to forget that &lt;strong&gt;the state in React is asynchronous&lt;/strong&gt;. It‚Äôs something that even the most seasoned React developers forget. &lt;/p&gt;

&lt;p&gt;Being asynchronous means that &lt;strong&gt;any modifications you make don‚Äôt take effect immediately&lt;/strong&gt; (and may take effect on the next render). &lt;strong&gt;React automatically batches update calls&lt;/strong&gt; to improve performance. If you access a state value right after setting it, you might not get the most accurate result.&lt;/p&gt;

&lt;p&gt;Let‚Äôs look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;handlePetsUpdate = (petCount) =&amp;gt; {
  this.setState({ petCount });
  this.props.callback(this.state.petCount); // Old value
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can fix this by giving an optional second parameter to &lt;code&gt;setState()&lt;/code&gt;, which will act as a callback function. The callback function will be called right after you update the state with your change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;handlePetsUpdate = (petCount) =&amp;gt; {
  this.setState({ petCount }, () =&amp;gt; {
    this.props.callback(this.state.petCount); // Updated value
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The same thing is true for &lt;code&gt;useState()&lt;/code&gt;, except they don‚Äôt have a similar callback argument to &lt;code&gt;setState()&lt;/code&gt;. Instead, you would use the &lt;code&gt;useEffect()&lt;/code&gt; hook to get the same result.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-using-redux-too-much"&gt;
  &lt;/a&gt;
  6. Using Redux too much
&lt;/h2&gt;

&lt;p&gt;With bigger React apps, many developers use Redux to manage global state. &lt;strong&gt;While Redux is useful, you don‚Äôt need to use it to manage every state in your apps&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;If you have an app that doesn‚Äôt have any parallel-level components that need to exchange information, you have no need to add an extra library to your project. It‚Äôs recommended to use a local state method or &lt;code&gt;useState&lt;/code&gt; over Redux when you use a form component and want to check the state of a check button every time it‚Äôs accessed.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-creating-and-using-god-components"&gt;
  &lt;/a&gt;
  7. Creating and using God components
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;God components are monolithic and not reusable&lt;/strong&gt;. They‚Äôre referred to as an ‚Äúanti-pattern‚Äù in React. You shouldn‚Äôt build an entire page with all of your UI elements crammed into one component. &lt;br&gt;
You should instead take the time to outline the different interconnected parts of your app and make them into their own components. When you separate components this way, all parts of your app are easier to maintain and restructure when needed.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#8-not-following-the-reactjs-folder-structure"&gt;
  &lt;/a&gt;
  8. Not following the ReactJS folder structure
&lt;/h2&gt;

&lt;p&gt;The projects you create aren‚Äôt just made for current development. They most likely will need to be maintained or manipulated in the future. &lt;strong&gt;Folder structure is very important when considering future possibilities for a project&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look at a standard folder structure followed by the ReactJS community:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ILFf5Zit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/091wqkv30hxzg5sj7aek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ILFf5Zit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/091wqkv30hxzg5sj7aek.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When navigating into any existing projects, it‚Äôs useful to have separate places for containers, assets, and components. It‚Äôs also useful to follow naming conventions to help with readability and organization. This helps you easily identify the purpose of any code written in your projects.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#9-sending-props-as-strings-instead-of-numbers"&gt;
  &lt;/a&gt;
  9. Sending props as strings (instead of numbers)
&lt;/h2&gt;

&lt;p&gt;React developers with experience writing a lot of HTML find it natural to write something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;MyComponent value=‚Äù4‚Äù /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This value prop will actually be sent to MyComponent as a string. If you do need it as a number, you can fix this issue by using something like the &lt;code&gt;parseInt()&lt;/code&gt; function or inserting curly brackets instead of quotation marks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;MyComponent value={4} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-forgetting-to-start-a-component-name-with-a-capital-letter"&gt;
  &lt;/a&gt;
  10. Forgetting to start a component name with a capital letter
&lt;/h2&gt;

&lt;p&gt;Forgetting to start component names with capital letters is a small mistake that‚Äôs very easy to make. &lt;strong&gt;In JSX, a component that begins with a lowercase letter compiles down to an HTML element&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Let‚Äôs say you wrote something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class demoComponentName extends React.Component {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will cause an error that tells you that if you meant to render a React component, you need to start its name with an uppercase letter. &lt;/p&gt;

&lt;p&gt;This mistake has an easy fix, which is starting component names with capital letters like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class DemoComponentName extends React.Component {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-learn-next"&gt;
  &lt;/a&gt;
  What to learn next
&lt;/h2&gt;

&lt;p&gt;Now that we‚Äôve explored the top ten mistakes React developers make, it‚Äôs time to start working with React and applying the skills you learned here today. React developers are in high demand, so adding React to your skillset is a wise career investment.&lt;/p&gt;

&lt;p&gt;Some recommended concepts to work with next are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Libraries in React&lt;/li&gt;
&lt;li&gt;Initializing Firebase in React&lt;/li&gt;
&lt;li&gt;App development with Global State in React&lt;/li&gt;
&lt;li&gt;Etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get hands-on experience with these concepts and more, check out Educative‚Äôs learning path, &lt;a href="https://www.educative.io/path/react-front-end-developer"&gt;&lt;strong&gt;React for Front-End Developers&lt;/strong&gt;&lt;/a&gt;. This learning path is perfect for you if you already have experience working with JavaScript and are ready to add React to your skillset. You‚Äôll cover everything from the fundamentals of React to making use of design patterns when creating apps in React, all with in-browser coding exercises.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-reading-about-react"&gt;
  &lt;/a&gt;
  Continue reading about React
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/what-is-react-tutorial"&gt;What is React? A tutorial on how to get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/best-practices-react-developer"&gt;Five best practices for React developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/react-instagram-tutorial"&gt;React Tutorial: How to build the Instagram UI with React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>programming</category>
      <category>javascript</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Filling and Flattening PDF Forms in Go</title>
      <author>Gunnsteinn Hall</author>
      <pubDate>Thu, 06 May 2021 23:09:58 +0000</pubDate>
      <link>https://dev.to/unidoc/filling-and-flattening-pdf-forms-in-go-5379</link>
      <guid>https://dev.to/unidoc/filling-and-flattening-pdf-forms-in-go-5379</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YRlObaYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s5y8bbh0173uvcx3yhr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YRlObaYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s5y8bbh0173uvcx3yhr.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;PDF forms are a convenient tool for gathering and storing information about your customers, users, or employees. For example, you can collect data from your website and insert it into PDF forms by injecting values from JSON files to create everlasting PDFs, i.e. PDF files that have been flattened and made uneditable.&lt;/p&gt;

&lt;p&gt;Go is often called the language of the cloud (for good reason) and enables you to create powerful programs and deploy as a single independent binary for convenient deployment in minimal Docker containers or otherwise. It is perfect for microservices and its blazing speed enables you to beat the rest of the class. Thus by processing PDFs in Go gives you fantastic performance, cloud-native applications, and simplicity, much higher security compared to C-based applications.&lt;/p&gt;

&lt;p&gt;You might have applications downloadable as PDF forms from your website that users could fill in and send via email or collect the data through forms on your website. Each application you could store for processing and then create a flattened copy which is essentially the form with the data filled out, but has been flattened where the values have been embedded into the content and become an uneditable part of the document.&lt;/p&gt;

&lt;p&gt;The next step would be to flatten the PDF form to ensure the immutability of the information. You can now archive the PDFs for your records and email a copy to your customer, user or employee. This is one use case of how you can fill and flatten PDF forms to smoothen your business processes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;p&gt;In this article we will cover the following cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a fillable PDF form on top of a template PDF&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fill a PDF form programmatically via input data in JSON format&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flatten a filled PDF and create an uneditable output PDF with no forms&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fill and flatten in one step as often required.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#creating-a-fillable-pdf-form-on-top-of-a-simple-template-pdf-file"&gt;
  &lt;/a&gt;
  Creating a fillable PDF form on top of a simple template PDF file
&lt;/h1&gt;

&lt;p&gt;In many cases you will have your forms already prepared. They might be created using Adobe Acrobat or prepared by your designer in more fancy design software and form fields added on top of that with Adobe Acrobat or other software.&lt;/p&gt;

&lt;p&gt;Let's look at what to do if we don't have any form prepared.  Let's start by preparing a simple PDF file with MS Word with some fields and export it to PDF. Figure 1 shows the resulting PDF file, where key entries are on the left such as "Full Name" followed by a blank where the value is intended to be entered, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NZEgoTtl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/koxaxgkvtoecmaybrixh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NZEgoTtl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/koxaxgkvtoecmaybrixh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Figure 1: Simple PDF form template with visible fields&lt;/p&gt;

&lt;p&gt;This kind of PDF is purely flat, meaning that if you open it in a PDF viewer such as Adobe Reader or any web browser, you can only see the text, not insert any values.&lt;/p&gt;

&lt;p&gt;To convert this into a fillable PDF form, we need to add some data to the PDF which indicates what fields are in the document, and where they are (i.e. in PDF space coordinates). We just need to define the coordinates of the rectangles where the input field should be present and then  let the annotator package of UniPDF take care of building the fields on your PDF document.&lt;/p&gt;

&lt;p&gt;We do this by defining&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Name&lt;/em&gt;.  Each field has a unique name so that it can be referenced directly. The name often indicates what the field represents.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Position&lt;/em&gt; (Rect). The bounding box representing the field area denoted by a rectangle in PDF coordinates.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Value&lt;/em&gt;. The value of the field (if filled).  This varies depending on field type.  For example for a checkbox it can be true/false (representing checked/unchecked).  A textbox would have the value as a simple string and a choice field (dropdown) would have a selected string from a list of options.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// textFieldsDef is a list of text fields to add to the form. &lt;/span&gt;
&lt;span class="c"&gt;// The Rect field specifies the coordinates of the field.&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;textFieldsDef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;Rect&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;
&lt;span class="p"&gt;}{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"full_name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;123.97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;619.02&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;343.99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;633.6&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"address_line_1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;142.86&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;596.82&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;347.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;611.4&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"address_line_2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;143.52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;574.28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;347.96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;588.86&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;95.15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;551.75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;125.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;566.33&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"city"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;96.47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;506.35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;168.37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;520.93&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"country"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;114.69&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;483.82&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;186.59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;498.4&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// checkboxFieldDefs is a list of checkboxes to add to the form.&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;checkboxFieldDefs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Name&lt;/span&gt;    &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;Rect&lt;/span&gt;    &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;
    &lt;span class="n"&gt;Checked&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;
&lt;span class="p"&gt;}{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"male"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;113.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;525.57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;125.96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;540.15&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Checked&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"female"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;157.44&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;525.24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;169.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;539.82&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Checked&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// choiceFieldDefs is a list of comboboxes to add to the form with specified options.&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;choiceFieldDefs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Name&lt;/span&gt;    &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;Rect&lt;/span&gt;    &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;
    &lt;span class="n"&gt;Options&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="s"&gt;"fav_color"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;144.52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;461.61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;243.92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;476.19&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;Options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Black"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Blue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Green"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Orange"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Red"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"White"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Yellow"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we create the fields for each type.  For instance, in the case of text fields, we create the TextField and add to the page annotations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fdef&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;textFieldsDef&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;annotator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextFieldOptions&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="n"&gt;textf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;annotator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewTextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fdef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fdef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fields&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;textf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PdfField&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddAnnotation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;textf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Annotations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PdfAnnotation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The process is similar for the other field types as can be seen in the full Playground code example below.&lt;/p&gt;

&lt;p&gt;Finally, the output PDF is written out with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt; &lt;span class="n"&gt;pdfWriter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetForms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pdfWriter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteToFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the output PDF file can be seen in Figure 2 below. The full code snippet follows with a Playground example that can be modified and run in our playground. It can be seen that the fields now have inputs where values can be inserted in the Viewer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WxDeBLK5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2ds2ikqckurial9bs5e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WxDeBLK5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2ds2ikqckurial9bs5e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Figure 2: PDF form created on top of the template PDF file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#playground-example-creating-a-pdf-form"&gt;
  &lt;/a&gt;
  Playground Example - Creating a PDF form
&lt;/h3&gt;

&lt;p&gt;The full Playground example for creating a form on top of a simple PDF template is shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pm9wVOwa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y81v9zx5jqjexqlywak1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pm9wVOwa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y81v9zx5jqjexqlywak1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;


 

&lt;p&gt;&lt;a href="https://play.unidoc.io/p/b1e80f0f92ddfa42"&gt;https://play.unidoc.io/p/b1e80f0f92ddfa42&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#listing-fields-in-a-pdf-form"&gt;
  &lt;/a&gt;
  Listing fields in a PDF form
&lt;/h1&gt;

&lt;p&gt;When you receive a PDF application form from the Sales department and are instructed to fill it with customer information from a database, you need to know what fields are in the PDF and how to match it to customer information.&lt;/p&gt;

&lt;p&gt;Powerful PDF editors such as Adobe Acrobat can show the field information visually, including the field names and properties such as default font, font size, etc.&lt;/p&gt;

&lt;p&gt;It can also be convenient to collect the field information programmatically.  When working with field data in UniPDF, it is particularly convenient to express the field information as JSON.  In fact, it is straightforward to get the full field information from a PDF with a form. The basic code for this is simply:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;fdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fjson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadFromPDFFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"template1_with_form.pdf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fdata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output for this, for instance on the PDF form shown in Figure 2 is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"full_name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"address_line_1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"address_line_2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"city"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"country"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"male"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"Off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"Yes"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"female"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"Off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"Yes"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"fav_color"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So this gives pretty clear indication on what fields we have and what values we can enter.  We will use this below and fill into those fields programmatically and finally flattening the PDF.&lt;/p&gt;

&lt;p&gt;The full Playground example for this can be found below where it can be Run and the output seen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#playground-example-listing-fields-in-pdf-form"&gt;
  &lt;/a&gt;
  Playground Example - Listing fields in PDF form
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dkwUcCLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tq9e2kcqkho7vyzunjhy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dkwUcCLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tq9e2kcqkho7vyzunjhy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://play.unidoc.io/p/c22768ba4fd68e90"&gt;https://play.unidoc.io/p/c22768ba4fd68e90&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#filling-a-pdf-form"&gt;
  &lt;/a&gt;
  Filling a PDF form
&lt;/h1&gt;

&lt;p&gt;Filling a PDF form involves inserting values into the fields.  In an editor, it will look like a person had entered values into the field and saved. The values can still be edited and changed.&lt;/p&gt;

&lt;p&gt;For an automated process, where values are collected from the user or a database and injected into the PDF, there is a need to perform filling of values programmatically.&lt;/p&gt;

&lt;p&gt;The  basic way to insert and write out a filled PDF form is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Load the form data to be inserted (key/values) from JSON file.&lt;/span&gt;
&lt;span class="n"&gt;fdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fjson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadFromJSONFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;`data.json`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// Load the PDF.&lt;/span&gt;
&lt;span class="n"&gt;pdfReader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewPdfReaderFromFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;`form.pdf`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// Options for default appearance of contents.&lt;/span&gt;
&lt;span class="n"&gt;fieldAppearance&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;annotator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FieldAppearance&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;OnlyIfMissing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RegenerateTextFields&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="c"&gt;// Populate the form data.&lt;/span&gt;
&lt;span class="n"&gt;pdfReader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AcroForm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FillWithAppearance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fieldAppearance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// Write out filled PDF.&lt;/span&gt;
&lt;span class="n"&gt;pdfWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;pdfReader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pdfWriter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteToFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"form_filled.pdf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note we used &lt;a href="https://apidocs.unidoc.io/unipdf/latest/github.com/unidoc/unipdf/v3/model/#PdfAcroForm.FillWithAppearance"&gt;FillWithAppearance&lt;/a&gt; rather than simply &lt;a href="https://apidocs.unidoc.io/unipdf/latest/github.com/unidoc/unipdf/v3/model/#PdfAcroForm.Fill"&gt;Fill&lt;/a&gt; to generate appearance based on the values we are setting. In most cases the default appearance is shown, but most viewers can generate appearances based on the values, if the values are edited. Further things like fonts, can be customized as well.&lt;/p&gt;

&lt;p&gt;The output file form_filled.pdf looks as follows afterward (Figure 3). We can clearly see that the values have been filled, but the form is still editable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v7esIt6f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idwkal6gsrccevfzvptv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v7esIt6f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idwkal6gsrccevfzvptv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Figure 3: Example of filled PDF form (not flattened).&lt;/p&gt;

&lt;p&gt;The full example is shared below which can be run in the UniDoc Playground.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#playground-example-filling-fields-with-values-in-pdf-form"&gt;
  &lt;/a&gt;
  Playground Example - Filling fields with values in PDF form
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BU62dn23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdvlxfwd4n8eaww7ff48.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BU62dn23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdvlxfwd4n8eaww7ff48.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://play.unidoc.io/p/a332fa2932e3f516"&gt;https://play.unidoc.io/p/a332fa2932e3f516&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#flattening-a-filled-pdf-form"&gt;
  &lt;/a&gt;
  Flattening a filled PDF form
&lt;/h1&gt;

&lt;p&gt;Once a PDF has been filled, it can still be edited when viewing it in a viewer. In many cases it is desirable to finalize or flatten the values such that they become contents, i.e. inherent part of the PDF that cannot be edited easily.&lt;/p&gt;

&lt;p&gt;To illustrate this, we will work with the filled PDF form from above (Figure 3) and flatten the contents to an uneditable PDF. Note, in the section below we will show how to fill and flatten in a single step, which is often desirable.&lt;/p&gt;

&lt;p&gt;The code for flattening a filled PDF form is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;pdfReader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewPdfReaderFromFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;// Flatten form.&lt;/span&gt;
&lt;span class="n"&gt;fieldAppearance&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;annotator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FieldAppearance&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;OnlyIfMissing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RegenerateTextFields&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;pdfReader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FlattenFields&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fieldAppearance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// Generate a PdfWriter instance from existing PdfReader.&lt;/span&gt;
&lt;span class="c"&gt;// AcroForm field is no longer needed in the output.&lt;/span&gt;
&lt;span class="n"&gt;pdfWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;pdfReader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReaderToWriterOpts&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SkipAcroForm&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c"&gt;// Write the output flattened file.&lt;/span&gt;
&lt;span class="n"&gt;pdfWriter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteToFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Applying this to the form we filled above (Figure 3), the output is as shown below, where the filled PDF has been flattened (Figure 4). The field appearances have been flattened and are a part of the content and the form/fields are no longer editable. The AcroForm dictionary which normally represents form and fields has been removed also as the information is now only part of the PDF contents like any other parts of the PDF.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PgbsLHhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3xkkeqoe852j547z1r6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PgbsLHhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3xkkeqoe852j547z1r6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Figure 4: Filled PDF has been flattened and values made part of the content.&lt;/p&gt;

&lt;p&gt;The full runnable example for flattening a PDF form is shown below Playground example which can be loaded and run in our Playground.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#playground-example-flattening-filled-pdf-form"&gt;
  &lt;/a&gt;
  Playground Example - Flattening filled PDF form
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nsolnzju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1vmnttb58bwr7696e04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nsolnzju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1vmnttb58bwr7696e04.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://play.unidoc.io/p/6b04a0779dfa37d3"&gt;https://play.unidoc.io/p/6b04a0779dfa37d3&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#filling-and-flattening-pdf-forms-in-a-single-step"&gt;
  &lt;/a&gt;
  Filling and Flattening PDF forms in a single step
&lt;/h1&gt;

&lt;p&gt;Above, we have covered the cases of creating, filling and flattening PDF forms separately. A common use case is to fill and flatten in a single step. This is usually desirable in applications where a prepared PDF form is to be filled with external information such as filling in customer information.&lt;/p&gt;

&lt;p&gt;Another example of how you can use PDF forms to improve your everyday business operations is by using them to collect and document orders, invoices and other engagement documents.&lt;/p&gt;

&lt;p&gt;Manually skimming through the data that you collect using PDF forms would be a time-consuming task, which is an inefficient use of your organizational resources. You can use UniPDF to programmatically sift through the data collected using the forms and clean it, process it, and perform meaningful operations on it.&lt;/p&gt;

&lt;p&gt;These steps come after you have collected the data. UniPDF can also help you with the data collection stage. You can use the power of Golang to convert data from any data source to beautifully crafted PDF reports built using UniPDF‚Äôs form builder.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#playground-example-fill-and-flatten-a-pdf-form"&gt;
  &lt;/a&gt;
  Playground Example - Fill and flatten a PDF form
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x_RhAMjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njc6cx0lvjg9ie2t8vaj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x_RhAMjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njc6cx0lvjg9ie2t8vaj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://play.unidoc.io/p/d142b775efc39cde"&gt;https://play.unidoc.io/p/d142b775efc39cde&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;You can use UniPDF to build beautifully crafted PDF forms through which you can gather information from your users. These forms can be shared and archived to maintain structured records of sales, queries and other engagement processes.&lt;/p&gt;

&lt;p&gt;With the help of UniPDF, this process can be streamlined and you can use the library in many ways to improve the efficiency of your office tasks.&lt;/p&gt;

&lt;p&gt;UniDoc is constantly improving its libraries based on customer feedback, if you want a feature included in the library, feel free to open a ticket on UniDoc‚Äôs GitHub, where you can also check out a whole repository of examples, built to get you started using UniDoc. You can also contact us through the form on the website.&lt;/p&gt;

&lt;p&gt;Sign up now in the Free Tier to get started with PDF forms in UniDoc and get in touch with us if you have any questions.&lt;/p&gt;

</description>
      <category>go</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>That boot camp might be lying to you</title>
      <author>sheriffderek</author>
      <pubDate>Thu, 06 May 2021 22:22:42 +0000</pubDate>
      <link>https://dev.to/perpetual_edu/that-boot-camp-might-be-lying-to-you-46ke</link>
      <guid>https://dev.to/perpetual_edu/that-boot-camp-might-be-lying-to-you-46ke</guid>
      <description>&lt;h2&gt;
  &lt;a href="#have-you-noticed-that-all-of-the-boot-camps-get-the-best-boot-camp-award-in-some-shape-or-form"&gt;
  &lt;/a&gt;
  Have you noticed that ALL of the boot camps get the "Best Boot Camp" award - in some shape or form?
&lt;/h2&gt;

&lt;p&gt;Had you noticed that they almost all get 5/5 scores? Can they really ALL be &lt;em&gt;the best&lt;/em&gt;. Well, if you didn't notice &lt;em&gt;that&lt;/em&gt; - then you definitely didn't notice all of the really sneaky stuff.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/luxIa3Qs2lA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Before you fall into the high-pressure sales trap, take a second look. Just because they are lying to &lt;em&gt;you&lt;/em&gt; doesn't mean you have to lie to yourself.&lt;/p&gt;




&lt;p&gt;Also - if anyone needs some fake awards, &lt;em&gt;we have Photoshop&lt;/em&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Advanced YAML Syntax Cheatsheet</title>
      <author>Ryan Thelin</author>
      <pubDate>Thu, 06 May 2021 22:21:58 +0000</pubDate>
      <link>https://dev.to/educative/advanced-yaml-syntax-cheatsheet-59ij</link>
      <guid>https://dev.to/educative/advanced-yaml-syntax-cheatsheet-59ij</guid>
      <description>&lt;p&gt;YAML (YAML Ain‚Äôt Markup Language) is a data serialization language used to create key-value pair configuration files and app APIs. It's a superset of JSON and is formatted using line breaks and whitespace to improve readability. &lt;/p&gt;

&lt;p&gt;While not a daily use technology, it's an important foundation for many modern technologies like &lt;a href="https://www.educative.io/blog/ansible-for-beginners"&gt;Ansible&lt;/a&gt; and is, therefore, a prerequisite for higher-paying developer roles. &lt;/p&gt;

&lt;p&gt;Today, we'll help you perfect your YAML knowledge so you can impress your next interviewer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here‚Äôs what we‚Äôll cover today:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#validator"&gt;Validator and Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#anchors"&gt;Anchors and Alias&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#schemas"&gt;Schemas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#escape-seq"&gt;Escape Sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#separators"&gt;Separators and Directives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next"&gt;Wrapping up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h4&gt;&lt;b&gt; Become a certified YAML professional &lt;/b&gt;&lt;/h4&gt;
 

&lt;p&gt;Stand out from other applicants with a YAML certification that you can earn in less than an hour.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://www.educative.io/courses/introduction-to-yaml"&gt;Introduction to YAML&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yaml-validator-and-parser"&gt;
  &lt;/a&gt;
  YAML Validator and Parser
&lt;/h2&gt;

&lt;p&gt;While YAML is more readable than XML, it's easy to miss mistakes in formattings like the number of spaces across a multi-line section or forgetting &lt;a href="https://www.educative.io/blog/yaml-tutorial"&gt;newline markers&lt;/a&gt;. These can cause sweeping errors for the YAML parser, which interprets YAML into more machine-readable actions.&lt;/p&gt;

&lt;p&gt;Parsing errors are hard to find by hand, so many developers choose to use a web validator or linter. These tools review your YAML document and highlight any potential errors to ensure you have valid YAML before putting it into use.&lt;/p&gt;

&lt;p&gt;The most popular validator is YAMLLint, a free &lt;a href="https://www.educative.io/blog/contribue-open-source-python-project"&gt;open-source&lt;/a&gt; tool available in your browser or on &lt;a href="https://www.educative.io/blog/git-github-tutorial-beginners"&gt;Github&lt;/a&gt;. YAMLLint is considered the most convenient linter because it provides error highlighting, autoformatting for copy/pasted YAML, and auto-correct options.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yaml-anchors-and-alias"&gt;
  &lt;/a&gt;
  YAML Anchors and Alias
&lt;/h2&gt;

&lt;p&gt;Anchors and Aliases are YAML constructions that allow you to reduce repeat syntax and extend existing data nodes. You can place Anchors (&lt;code&gt;&amp;amp;&lt;/code&gt;) on an entity to mark a multi-line section.  You can then use an Alias (&lt;code&gt;*&lt;/code&gt;) call that anchor later in the document to reference that section. Anchors and Aliases are very helpful for larger projects as they cut visual clutter caused by extra lines.&lt;/p&gt;

&lt;p&gt;The Alias essentially acts as a "see above'' command, which makes the program pause standard traversal, return to the anchor point, then resume standard traversal after the Anchored portion is finished. If you're familiar with Object-Oriented Programming designs, you'll feel right at home with Anchors.&lt;/p&gt;

&lt;p&gt;Below, the &lt;code&gt;build-test&lt;/code&gt; Anchor begins on &lt;strong&gt;line 3&lt;/strong&gt; and is called by Aliases on &lt;strong&gt;lines 13 and 15&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;definitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;build-test&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and test&lt;/span&gt;
        &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;mvn package&lt;/span&gt;
        &lt;span class="na"&gt;artifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;target/**&lt;/span&gt;

&lt;span class="na"&gt;pipelines&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;develop&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*build-test&lt;/span&gt;
    &lt;span class="na"&gt;master&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*build-test&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#overrides-and-extensions"&gt;
  &lt;/a&gt;
  Overrides and Extensions
&lt;/h3&gt;

&lt;p&gt;You can also tweak the Anchor when called by entering &lt;code&gt;&amp;lt;&amp;lt;:&lt;/code&gt; before the Alias. Below this, you can write any desired changes. Mappings are overridden if the new mapping has the same name or is added afterward if different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;definitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;build-test&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and test&lt;/span&gt;
        &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;mvn package&lt;/span&gt;
        &lt;span class="na"&gt;artifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;target/**&lt;/span&gt;


&lt;span class="na"&gt;pipelines&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;develop&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*build-test&lt;/span&gt;
    &lt;span class="na"&gt;master&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;step&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
          &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*build-test&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Testing on Master&lt;/span&gt; &lt;span class="c1"&gt;#override&lt;/span&gt;
          &lt;span class="na"&gt;ongoing&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;#extension&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yaml-schemas"&gt;
  &lt;/a&gt;
  YAML Schemas
&lt;/h2&gt;

&lt;p&gt;Schemas are rulesets in YAML 1.2 that tell the loader/parser what each part of your YAML file converts to in actual commands. They're essentially a collection of if/then statements to process human-readable YAML tags into. For example, the YAML Core schema states that both &lt;code&gt;!!str my string&lt;/code&gt; and &lt;code&gt;my string&lt;/code&gt; are equivalent and should be parsed to the same action.&lt;/p&gt;

&lt;p&gt;There is a default schema for general-purpose YAML, and many special-use schemas that are each suited for certain niche scenarios. You can even create your own custom schemas or download other user's schemas on the JSON Schema Store.&lt;/p&gt;

&lt;p&gt;Custom schemas are helpful when configuration files include custom objects or if you want to create language-specific object serialization&lt;br&gt;
s.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="c1"&gt;# Ruby Psych&lt;/span&gt;
&lt;span class="na"&gt;dice&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!ruby/Object:Dice&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;6&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="c1"&gt;# perl YAML::XS, YAML.pm, YAML::Syck (Dump and Load)&lt;/span&gt;
&lt;span class="na"&gt;dice&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!!perl/array:Dice&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;6&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="s"&gt;--------&lt;/span&gt;
&lt;span class="c1"&gt;# perl YAML.pm, YAML::Syck (Load)&lt;/span&gt;
&lt;span class="na"&gt;dice&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!perl/array:Dice&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;6&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="s"&gt;--------&lt;/span&gt;
&lt;span class="c1"&gt;# Pyyaml&lt;/span&gt;
&lt;span class="na"&gt;dice&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!!python/object/new:__main__.Dice&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!!python/tuple&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;6&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are three default schemas for YAML are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Failsafe Schema&lt;/strong&gt;: A minimalist schema that only supports String (&lt;code&gt;!!str&lt;/code&gt;), Map (&lt;code&gt;!!map&lt;/code&gt;), and Sequence (&lt;code&gt;!!seq&lt;/code&gt;) tags. Failsafe is guaranteed to work with any YAML document due to its simplicity, but it does not support any complex tags.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;JSON schema&lt;/strong&gt;: A foundational schema designed to reliably parse equivalent YAML and JSON files to the same end result. This is the most commonly used schema and is the starting point for most schemas. It supports all failsafe tags, as well as Boolean (&lt;code&gt;!!bool&lt;/code&gt;), null (&lt;code&gt;!!null&lt;/code&gt;), Integer (&lt;code&gt;!!int&lt;/code&gt;), and Float (&lt;code&gt;!!float&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Core Schema&lt;/strong&gt;: The default YAML schema that widens the matching criteria on the YAML side. It is essentially a less opinionated version of the JSON schema. For example, JSON accepts Booleans that achieve the criteria "Match: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt;". By comparison, here is Core's Boolean criteria: "&lt;code&gt;true&lt;/code&gt; | &lt;code&gt;True&lt;/code&gt; | &lt;code&gt;TRUE&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; | &lt;code&gt;False&lt;/code&gt; | &lt;code&gt;FALSE&lt;/code&gt;". &lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;
  &lt;a href="#keep-the-learning-going" class="anchor"&gt;
  &lt;/a&gt;
  Keep the learning going.
&lt;/h4&gt;

&lt;p&gt;Brush up on your expert YAML skills and earn a certificate at the same time. Educative's text-based courses are easy to skim and feature live coding environments, meaning you can better your skills in half the time. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://www.educative.io/courses/introduction-to-yaml"&gt;Introduction to YAML&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yaml-escape-sequences"&gt;
  &lt;/a&gt;
  YAML Escape Sequences
&lt;/h2&gt;

&lt;p&gt;YAML's readable syntax is only possible because it uses indents and whitespace over inline syntactic markers like square brackets or curly braces. However, this can get difficult when using special characters with quotation mark scalars.&lt;/p&gt;

&lt;p&gt;YAML offers Escape Sequences to allow you to indicate if the character should be interpreted as a special character or as part of the scalar. For example, you could escape a single space using &lt;code&gt;&amp;amp;#x20;&lt;/code&gt; to create a string with a value of &lt;code&gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Escape Sequences come in 3 types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Entity Escapes&lt;/strong&gt;, which allow you to use otherwise syntactically important characters by space (&lt;code&gt;&amp;amp;#x20;&lt;/code&gt;), colon (&lt;code&gt;&amp;amp;#58;&lt;/code&gt;), ampersand (&lt;code&gt;&amp;amp;amp;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Unicode Escapes&lt;/strong&gt;, which let you add a space (&lt;code&gt;\u0020&lt;/code&gt;), single quote (&lt;code&gt;\u0027&lt;/code&gt;), or double quote (&lt;code&gt;\u0022&lt;/code&gt;) by calling their unique key directly from the Unicode key-value pairs list.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quoted Escapes&lt;/strong&gt;, which let you display quoted sentences using additional quotes. For example, double quotes can be shown within single quotes (‚Äò "quote" ‚Äô) or nested within another set of double quotes ("abc "quote" cba") and with nested single quotes (‚Äò ‚Äòquote‚Äô ‚Äô).&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; A full list of YAML Escape Sequences can be found in the official YAML Specification.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yaml-separators-and-directives"&gt;
  &lt;/a&gt;
  YAML Separators and Directives
&lt;/h2&gt;

&lt;p&gt;You may have noticed that all YAML documents begin with &lt;code&gt;---&lt;/code&gt;. This notifies the parser that this data is a separate chunk but was sent as part of the same request for efficiency.&lt;/p&gt;

&lt;p&gt;Another more advanced separator is &lt;code&gt;...&lt;/code&gt;, which marks the end of a document. The end-of-document separator must be followed either by a beginning-of-document separator (&lt;code&gt;---&lt;/code&gt;) or a set of directives. Directives are defined settings marked by &lt;code&gt;%&lt;/code&gt; that comes before a document and are followed by &lt;code&gt;---&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This means &lt;code&gt;...&lt;/code&gt; and &lt;code&gt;---&lt;/code&gt; are needed to mark the boundaries of the directive space. The two current directives are &lt;code&gt;%YAML&lt;/code&gt;, which lets you set the YAML version for the coming document, and &lt;code&gt;%TAGS&lt;/code&gt;, which lets you create custom shorthands for tags you'll use in the document.&lt;/p&gt;

&lt;p&gt;Directives are only useful in niche circumstances, like using an old YAML document that's too large to update. Usually, you will not need directives or a document separator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;doc 1&lt;/span&gt; 
&lt;span class="nn"&gt;...&lt;/span&gt; 

&lt;span class="nt"&gt;%TAG&lt;/span&gt; &lt;span class="kt"&gt;!foo!&lt;/span&gt; &lt;span class="kt"&gt;!&lt;/span&gt;&lt;span class="err"&gt;foo-types/&lt;/span&gt; 

&lt;span class="s"&gt;--------&lt;/span&gt; 

&lt;span class="s"&gt;doc &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yaml-timestamp"&gt;
  &lt;/a&gt;
  YAML Timestamp
&lt;/h2&gt;

&lt;p&gt;Timestamp is a helpful data type that lets you store times as a unit rather than as a collection of different numbers. It's marked by the &lt;code&gt;!!timestamp&lt;/code&gt; data tag and can hold various levels of specificity such as simple &lt;code&gt;yyyy/mm/dd&lt;/code&gt; or down to a fraction of a second &lt;code&gt;2001-12-15T2:59:43.10&lt;/code&gt;. &lt;br&gt;
You can also separate date and time using spaces to make the timestamp more readable, like &lt;code&gt;2001-12-15 2:59:43.10&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;All timestamps are recorded as Coordinated Universal Time (UTC) unless another timezone is specified at the end of the timestamps. You define the timezone by including how many hours it is ahead or behind UTC. &lt;/p&gt;

&lt;p&gt;For example, I could set a timestamp as Pacific Standard Time (PST) with a &lt;code&gt;-8&lt;/code&gt; at the end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2001-12-15 2:59:43.10 -8`. 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is similar to DateTime used in popular programming languages like JavaScript or Python, except with how it handles timezone. DateTime records the time listed in the timezone of the host server by default. &lt;/p&gt;

&lt;p&gt;This can lead to problems if working with networks from outside their native timezone. The computer needs to convert to UTC then to the destination timezone every time the date is called, slowing down processes.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Good job tackling this advanced YAML syntax. While YAML might seem like a niche skill, it's a prerequisite for many jobs across the market. However, most coding interviews will not include YAML. The best way to demonstrate your YAML knowledge is to use it in a portfolio project or be able to show past experience with the technology.&lt;/p&gt;

&lt;p&gt;To help you wow recruiters with your YAML skills, Educative has created &lt;a href="https://www.educative.io/courses/introduction-to-yaml"&gt;&lt;strong&gt;Introduction to YAML&lt;/strong&gt;&lt;/a&gt;. This course covers beginner to expert level syntax and techniques in a condensed, hands-on format. By the end of the course, you'll be able to use YAML with confidence and will have your own YAML certification to put on your resume.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#continue-reading-about-yaml-and-foundational-skills"&gt;
  &lt;/a&gt;
  Continue reading about YAML and foundational skills
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/yaml-tutorial"&gt;YAML Tutorial: get started with YAML in 5 minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/data-structures-algorithms"&gt;Top Data Structures and Algorithms every developer must know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/big-o-notation-cheat-sheet"&gt;Big-O Notation Cheat Sheet: quick answers to Big-O questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>yaml</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>serverless</category>
    </item>
  </channel>
</rss>
