<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best Path to Twitter API using JavaScript | 3 Clear Steps</title>
      <author>Sahil</author>
      <pubDate>Fri, 20 Aug 2021 11:50:16 +0000</pubDate>
      <link>https://dev.to/sahilfruitwala/best-path-to-twitter-api-using-javascript-3-clear-steps-dem</link>
      <guid>https://dev.to/sahilfruitwala/best-path-to-twitter-api-using-javascript-3-clear-steps-dem</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#Introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#Fetch"&gt;Extract Data using Fetch&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#ThenCatch"&gt;Using then() and catch()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#AsyncAwait"&gt;Using async/await&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  &lt;a id="Introduction"&gt;&lt;/a&gt;Introduction
&lt;/h2&gt;

&lt;p&gt;Twitter is a popular social media platform where users can share their views, ideas and read posts from other users on a variety of topics. Researchers, developers, bloggers and people from many fields use Twitter for data gathering. You can find a well-written &lt;a href="https://blog.learncodeonline.in/introduction-to-twitter-api"&gt;&lt;strong&gt;blog&lt;/strong&gt;&lt;/a&gt; on how to create a developer's account for the Twitter API.  In this blog, all the parameters and filters are mentioned that one can use with the Standard Search API. It is highly suggested to go through that blog and get a basic idea about &lt;a href="https://blog.learncodeonline.in/introduction-to-twitter-api"&gt;Twitter Search API&lt;/a&gt;. You can find the official documentation of API &lt;a href="https://developer.twitter.com/en/docs/twitter-api/v1/tweets/search/api-reference/get-search-tweets"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will look at how to use the Twitter API in conjunction with JavaScript in this blog post. Instead of using any package wrapped around Twitter API, we will use the core &lt;strong&gt;Fetch&lt;/strong&gt; library to get desire data from Twitter. We are not using any module that is wrapped around Twitter API, such as &lt;strong&gt;twitter-v2&lt;/strong&gt; and &lt;strong&gt;twitter-lite&lt;/strong&gt;. The purpose is to make you understand how to use core Twitter API using the Fetch library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  &lt;a id="Prerequisites"&gt;&lt;/a&gt;Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before we start using Fetch(), the following things need to be installed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Node&lt;br&gt;
To get and install the &lt;strong&gt;node&lt;/strong&gt; on your system, go to &lt;a href="https://nodejs.dev/"&gt;nodejs.dev&lt;/a&gt; and download the LTS(Long-term Support) version. After installation, open the terminal on your system and try the following commands and, you will see version numbers. Here, npm is a package manager for node applications. We need npm to install third-party libraries for our application.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Text Editor / IDE (Integrated development environment)&lt;br&gt;
You can use any text editor or IDE. However, I recommend using VSCode that is a free and open-source code editor from Microsoft.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Twitter API Keys&lt;br&gt;
To set up the developer’s account and get API keys, follow my previous &lt;a href="https://blog.learncodeonline.in/introduction-to-twitter-api"&gt;blog&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node &lt;span class="nt"&gt;-v&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#extract-data-using-fetch"&gt;
  &lt;/a&gt;
  &lt;a id="Fetch"&gt;&lt;/a&gt;Extract Data using Fetch
&lt;/h2&gt;

&lt;p&gt;In this section, we will see how to extract data from Twitter using the Fetch module. Fetch is a promise-based function used for sending and receiving data from the server. For this blog, we will focus only on getting data using Fetch.&lt;/p&gt;

&lt;p&gt;JavaScript that we use in the browsers (Vanilla JavaScript) has a Fetch module in it. Here, we are using &lt;strong&gt;node&lt;/strong&gt; that is a &lt;strong&gt;JavaScript Runtime Environment&lt;/strong&gt; through which we can run JavaScript on our local machine. This runtime environment does not have Fetch in its core modules. Therefore, we need to install it externally for our projects.&lt;/p&gt;

&lt;p&gt;Before installing &lt;strong&gt;node-fetch&lt;/strong&gt;, go to any directory/folder you desire to work in and create a folder with the name of your choice. Now, to install Fetch, open the terminal in the folder you created on your system and write as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;node-fetch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;There are two ways to handle the fetch() method:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Using then() and catch()&lt;/li&gt;
&lt;li&gt; Using async/await&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#using-then-and-catch"&gt;
  &lt;/a&gt;
  &lt;a id="ThenCatch"&gt;&lt;/a&gt;Using then() and catch()
&lt;/h2&gt;

&lt;p&gt;The fetch method returns a response object that contains a range of useful promise-based methods. Those methods are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;response.json()&lt;/strong&gt; returns a promise resolved to a JSON object.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;response.text()&lt;/strong&gt; returns a promise resolved to raw text.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;response.formData()&lt;/strong&gt; returns a promise resolved to FormData.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;response.blob()&lt;/strong&gt; returns a promise resolved to a Blob (a file-like object of raw data).&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;response.arrayBuffer()()&lt;/strong&gt; returns a promise resolved to an ArryBuffer (raw generic binary data).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the Twitter API returns JSON data, we will only use the &lt;strong&gt;response.json()&lt;/strong&gt; method. The following code is an example to fetch all tweets that contain the python keyword and does not contain any retweets:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bearer BEARER_TOKEN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Replace BEARER_TOKEN with your token&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;python -filter:retweets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`https://api.twitter.com/1.1/search/tweets.json?q=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Replace BEARER_TOKEN word with your Bearer Token that you got from the developers portal.&lt;/p&gt;

&lt;p&gt;We can assign any search string and filter to the query. As shown in the code block, we used &lt;strong&gt;response.json()&lt;/strong&gt; to get data in JSON format. Instead of a response, we can use any name that we pass as an argument in the first &lt;strong&gt;then()&lt;/strong&gt; block. As mentioned earlier that response.json() again returns a promise. So, to resolve this promise, we used one more then() block and got the final response as &lt;strong&gt;data&lt;/strong&gt;. In the process of resolving promises, if we get any error, then control will be passed to the &lt;strong&gt;catch()&lt;/strong&gt; block. This block is used for handling any kind of error.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-asyncawait"&gt;
  &lt;/a&gt;
  &lt;a id="AsyncAwait"&gt;&lt;/a&gt;Using async/await
&lt;/h2&gt;

&lt;p&gt;To use async/await, we need to create an async function and put our logic in that function. The following code shows how we can use the async/await with fetch() method.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bearer BEARER_TOKEN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// Replace BEARER_TOKEN with your token&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;python -filter:retweets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`https://api.twitter.com/1.1/search/tweets.json?q=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;options&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ERROR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As shown in the code, await will resolve promises and return the response. Here, we have used two awaits as fetch() method and response.json() both return promises.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I have used the arrow function which is the syntax of JavaScript version ES6.&lt;/p&gt;

&lt;p&gt;For the common data retrieval tasks, the above code is sufficient. You can use any query parameters and filters as per need and then assign them to the &lt;strong&gt;query.&lt;/strong&gt; If you have used any different methods or filters, please share your expertise/methodology in the comments below.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;a id="Conclusion"&gt;&lt;/a&gt;Conclusion
&lt;/h2&gt;

&lt;p&gt;We can use any of the methods suitable to them. There can be other ways to get data. I have only mentioned one of them here. Many people prefer to use &lt;a href="https://www.npmjs.com/package/axios"&gt;Axios&lt;/a&gt; that can be used in the same way as we used the fetch() method to get data using Twitter API.  If you want to know about API, you can understand it easily through the "&lt;strong&gt;What is API?&lt;/strong&gt;" blog. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/sahilfruitwala" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d2sSMDwn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HeZTdk-2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/419742/5e242d87-9327-4bc3-a899-ff30d06cefda.jpg" alt="sahilfruitwala"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sahilfruitwala/what-is-an-api-5clj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is an API?&lt;/h2&gt;
      &lt;h3&gt;Sahil ・ Aug 19 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Variables and Data Types in Dart</title>
      <author>Baransel</author>
      <pubDate>Fri, 20 Aug 2021 11:38:42 +0000</pubDate>
      <link>https://dev.to/baransel/variables-and-data-types-in-dart-n4e</link>
      <guid>https://dev.to/baransel/variables-and-data-types-in-dart-n4e</guid>
      <description>&lt;p&gt;In addition to general data types such as String, integer, we use different; We will talk about 2 important data types.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;var&lt;/li&gt;
&lt;li&gt;dynamic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; data type does not have a specific value. We can assign any variable we want, it doesn't matter. You can give a string or an integer value if you wish, to the variable defined by &lt;code&gt;var&lt;/code&gt;. You can see examples below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Baransel Arslan'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Welcome! &lt;/span&gt;&lt;span class="si"&gt;$name&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;message2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Welcome! &lt;/span&gt;&lt;span class="si"&gt;${name.toUpperCase()}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;dynamic&lt;/code&gt; data type has a mutable structure. We can define the variable we created with &lt;code&gt;dynamic&lt;/code&gt; in the first string data type and then assign an &lt;code&gt;integer&lt;/code&gt; value to the same variable. Of course, I use this &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;integer&lt;/code&gt; example all the time because they are the most common variable types. Variables such as &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt; can also be used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Baransel Arslan'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Follow my blog for more &lt;a href="https://baransel.dev/"&gt;baransel.dev&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Go like error handling in TypeScript</title>
      <author>Karan Pratap Singh</author>
      <pubDate>Fri, 20 Aug 2021 10:59:30 +0000</pubDate>
      <link>https://dev.to/karanpratapsingh/go-like-error-handling-in-typescript-4plm</link>
      <guid>https://dev.to/karanpratapsingh/go-like-error-handling-in-typescript-4plm</guid>
      <description>&lt;p&gt;In this article we'll learn about how we can handle our errors like Go with TypeScript.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; In TypeScript this is probably not a "best practice", or even a good practice at all but let's have fun experimenting nonetheless!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's take the following as an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs/promises&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./package.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Do something with result&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Handle error&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Go, this should look as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"io/ioutil"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./package.json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Handle error&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Do something with data&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's write our &lt;code&gt;async&lt;/code&gt; handler helper function! This function basically returns a Tuple of result and error as TypeScript doesn't have multiple returns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Maybe&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AsyncResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AsyncError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AsyncReturn&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Maybe&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Maybe&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AsyncFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AsyncResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;AsyncResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;AsyncError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AsyncFn&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AsyncReturn&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use our &lt;code&gt;async&lt;/code&gt; utility as below. We can pass our Result and Error generics types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs/promises&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./package.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NodeJS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ErrnoException&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Handle error&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Do something with data&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perfect! We now have isolated our &lt;code&gt;try/catch&lt;/code&gt; with Go like error handling pattern.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>go</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Python3, APIs and Docker Two Weeks Boot Camp By Lux Academy and Data Science East Africa.</title>
      <author>Mwenda Harun Mbaabu</author>
      <pubDate>Fri, 20 Aug 2021 10:31:12 +0000</pubDate>
      <link>https://dev.to/grayhat/python3-apis-and-docker-two-weeks-boot-camp-by-lux-academy-and-data-science-east-africa-5h68</link>
      <guid>https://dev.to/grayhat/python3-apis-and-docker-two-weeks-boot-camp-by-lux-academy-and-data-science-east-africa-5h68</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c3u69hmK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5e1g8lzm6hwuyl4xjcc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c3u69hmK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5e1g8lzm6hwuyl4xjcc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will be an intensive programming and technical writing free bootcamp where you will learn how to develop, ship, and run APIs using python with the help of docker. &lt;/p&gt;

&lt;p&gt;TOOLS &amp;amp; TECHNOLOGIES:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python3.&lt;/li&gt;
&lt;li&gt;Docker.&lt;/li&gt;
&lt;li&gt;Flask and FastAPI.&lt;/li&gt;
&lt;li&gt;Postman. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Important Dates:&lt;/p&gt;

&lt;p&gt;1). 30th August, Application  Deadline. &lt;/p&gt;

&lt;p&gt;2). 6th September BootCamp Starts&lt;/p&gt;

&lt;p&gt;3). 17th September  2021 Training Ends&lt;/p&gt;

&lt;p&gt;All learners will be required  to:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Attend two online classes per week.&lt;/li&gt;
&lt;li&gt;Write two technical articles per week.&lt;/li&gt;
&lt;li&gt;Complete two weeks  Capstone  Project, you will be required to build an open-source application with Beyonic API, &lt;a href="https://apidocs.beyonic.com/"&gt;https://apidocs.beyonic.com/&lt;/a&gt; using Python &amp;amp; Docker. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;Connect with the community members:&lt;/em&gt;&lt;br&gt;
Lux Tech Academy:   &lt;a href="https://twitter.com/lux_academy"&gt;https://twitter.com/lux_academy&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Data Science East Africa: &lt;a href="https://twitter.com/HarunMbaabu"&gt;https://twitter.com/HarunMbaabu&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Beyonic Developer's Group : &lt;a href="https://t.me/joinchat/AeUYkRMxslY0MjVh"&gt;https://t.me/joinchat/AeUYkRMxslY0MjVh&lt;/a&gt; &lt;/p&gt;




&lt;p&gt;Application Link 👉🏻 : &lt;a href="https://bit.ly/PythonAPIsBootCamp"&gt;https://bit.ly/PythonAPIsBootCamp&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Better file structure in React projects</title>
      <author>Victor Ocnarescu</author>
      <pubDate>Fri, 20 Aug 2021 10:30:05 +0000</pubDate>
      <link>https://dev.to/victorocna/better-file-structure-in-react-projects-51h1</link>
      <guid>https://dev.to/victorocna/better-file-structure-in-react-projects-51h1</guid>
      <description>&lt;p&gt;Is there a perfect file structure for React projects? Probably not. But some are far better than others.&lt;/p&gt;

&lt;p&gt;Over the years I discovered that I tend to structure files in some specific ways, which I believe are easier to understand and reasonable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meaningful-folder-names"&gt;
  &lt;/a&gt;
  Meaningful folder names
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://martinfowler.com/bliki/TwoHardThings.html"&gt;Naming things&lt;/a&gt; is one of the toughest things to get right in programming. One of my favorite tactics to naming folders is to extract the subject and use it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;want a place for &lt;strong&gt;public&lt;/strong&gt; resources? the &lt;code&gt;public&lt;/code&gt; folder should be a good fit;&lt;/li&gt;
&lt;li&gt;have some custom &lt;strong&gt;hooks&lt;/strong&gt; that you are proud of? keep them easy to find in the &lt;code&gt;hooks&lt;/code&gt; folder;&lt;/li&gt;
&lt;li&gt;want to include yet another &lt;strong&gt;css&lt;/strong&gt; file? store them in the &lt;code&gt;css&lt;/code&gt; folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And so on and so forth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#little-to-no-folder-nesting"&gt;
  &lt;/a&gt;
  Little to no folder nesting
&lt;/h2&gt;

&lt;p&gt;I always wondered about the &lt;code&gt;src&lt;/code&gt; folder and why it exists. And to this day it still is one of the many mysteries of programming.&lt;/p&gt;

&lt;p&gt;I like to keep all my folders as close to the project root as possible. This way, they can be discovered more easily by any new dev working on the project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/faq-structure.html#avoid-too-much-nesting"&gt;Avoiding too much nesting&lt;/a&gt; is also recommended by the official React documentation as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grouping-by-feature"&gt;
  &lt;/a&gt;
  Grouping by feature
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;components&lt;/code&gt; folder is one of my exceptions: it has two (2) levels of nesting. Common components are accessible right from the folder root, while "specialized" components have they own folder.&lt;/p&gt;

&lt;p&gt;The contents of the &lt;code&gt;components&lt;/code&gt; folder:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Button.jsx&lt;/code&gt; - common button components&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Link.jsx&lt;/code&gt; - common link component&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Forms&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;AddClientForm.jsx&lt;/code&gt; - specific "form" component&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;EditClientForm.jsx&lt;/code&gt; - another specific "form" component&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#minimal-example"&gt;
  &lt;/a&gt;
  Minimal example
&lt;/h2&gt;

&lt;p&gt;This is the project structure for a &lt;a href="https://github.com/victorocna/awesome-react-starter"&gt;starter project I authored&lt;/a&gt; and for many projects I'm working on right now.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;api&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;components&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;functions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hooks&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;models&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pages&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;README.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope the folder structure is self explanatory. If it is not, I have done a lousy job at naming folders. Let me know in the comment section below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h2&gt;

&lt;p&gt;My favorite file structure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;is easy to read and understand&lt;/li&gt;
&lt;li&gt;is shallow nested&lt;/li&gt;
&lt;li&gt;is grouped by features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a different opinion? Can't wait to hear it!&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How to add Auth0 to your Angular app</title>
      <author>Siddharth</author>
      <pubDate>Fri, 20 Aug 2021 09:48:12 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/how-to-add-auth0-to-your-angular-app-16j3</link>
      <guid>https://dev.to/siddharthshyniben/how-to-add-auth0-to-your-angular-app-16j3</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pro Tip:&lt;/strong&gt; look out for the 🛠 emoji if you want to skim&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The number of apps on the cloud are rising, and so are the challenges in maintaining them. Secure authentication is one way in which we can mitigate some of the challenges in building cloud apps.&lt;/p&gt;

&lt;p&gt;Here, I'll show you how to add authentication to your Angular app using &lt;a href="https://auth0.com"&gt;Auth0&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-authentication"&gt;
  &lt;/a&gt;
  What is authentication?
&lt;/h2&gt;

&lt;p&gt;Authentication is a term that refers to the process of proving that some fact or some document is genuine.&lt;/p&gt;

&lt;p&gt;In tech, this term is typically associated with proving a user’s identity. Usually, a user proves their identity by providing their credentials, like a username and password.&lt;/p&gt;

&lt;p&gt;Authentication is not to be confused with authorization. Authentication is the process of verifying who a user is, while authorization is the process of verifying what they have access to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-your-auth0-account"&gt;
  &lt;/a&gt;
  Set up your Auth0 account
&lt;/h2&gt;

&lt;p&gt;If you don't already have an Auth0 account, you need to sign up for one, and set it up. Here's how you do so:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;🛠 Sign up for &lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pn4AxjXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629431682325/vhV8KgeDf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pn4AxjXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629431682325/vhV8KgeDf.png" alt="Auth0 Signup"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🛠 Once you have signed up, you should have landed on the Auth0 dashboard. Choose &lt;strong&gt;Integrate Auth0 into your application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ht1Fdqab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629431989705/0oGE-oHYZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ht1Fdqab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629431989705/0oGE-oHYZ.png" alt="Integrate Auth0"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🛠 Fill in your app data. Choose &lt;strong&gt;Single Page Web Application&lt;/strong&gt; as the application type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B2HzV61K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629432085360/wiYy1RTlnj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B2HzV61K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629432085360/wiYy1RTlnj.png" alt="Fill in App data"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🛠 Next, you will be asked to choose which type of app to build. We are building an Angular app, so choose that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wd7luot_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629432757745/ATbIy97Cu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wd7luot_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629432757745/ATbIy97Cu.png" alt="Choose app type"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You are all set up!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-your-auth0-project"&gt;
  &lt;/a&gt;
  Configure your Auth0 project
&lt;/h2&gt;

&lt;p&gt;If you followed the steps above, you should be on you project's page. Go to the settings tab to get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CrbITff5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629434444966/swynYbyVC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CrbITff5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629434444966/swynYbyVC.png" alt="Settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 🛠 First thing to do is note down your client ID and secret.&lt;/li&gt;
&lt;li&gt; 🛠 You need to configure Allowed Callback URLs, Allowed Logout URLs, and Allowed Web Origins. For now, you can set them all to &lt;code&gt;http://localhost:4200&lt;/code&gt;. In production you should set them to whichever domain you use.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are the important ones, you can fill the rest later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-your-project"&gt;
  &lt;/a&gt;
  Set up your project
&lt;/h2&gt;

&lt;p&gt;🛠 First thing to do is create an Angular app if you don't have one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~&lt;span class="nv"&gt;$ &lt;/span&gt;ng new my-app
~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-app
~&lt;span class="nv"&gt;$ &lt;/span&gt;ng serve &lt;span class="nt"&gt;-o&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🛠 Open up a new terminal window/pane, and install the Auth0 Angular SDK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-app
~&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @auth0/auth0-angular
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🛠 Next, open up &lt;code&gt;src/app/app.module.ts&lt;/code&gt; (the default app module) and import &lt;code&gt;AuthModule&lt;/code&gt; from the SDK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;BrowserModule&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AuthModule&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@auth0/auth0-angular&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;declarations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nx"&gt;BrowserModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;AuthModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;domain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Domain from earlier&lt;/span&gt;
            &lt;span class="na"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clientid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// Client ID from earlier&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="na"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you see any errors, try restarting the &lt;code&gt;ng serve&lt;/code&gt; command. It often happens when you import a new module.&lt;/p&gt;

&lt;p&gt;🛠 Next, you can use the &lt;code&gt;AuthService.loginWithRedirect()&lt;/code&gt; to redirect to the Auth0 universal login page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AuthService&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@auth0/auth0-angular&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;button (click)="auth.loginWithRedirect()"&amp;gt;Log in&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AuthService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's basically it! You got the ability to log in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more"&gt;
  &lt;/a&gt;
  More
&lt;/h2&gt;

&lt;p&gt;🛠 You can add the ability to log out by making a call to &lt;code&gt;AuthService.logout()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;🛠 You can also get the users profile information from &lt;code&gt;AuthService.user$&lt;/code&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>auth0</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Add a YouTube-like Page Loading Animation in SvelteKit</title>
      <author>Shajid Hasan</author>
      <pubDate>Fri, 20 Aug 2021 09:11:55 +0000</pubDate>
      <link>https://dev.to/shajidhasan/add-a-youtube-like-page-loading-animation-in-sveltekit-58kp</link>
      <guid>https://dev.to/shajidhasan/add-a-youtube-like-page-loading-animation-in-sveltekit-58kp</guid>
      <description>&lt;p&gt;We've all seen it. A colored sliver at the top that indicates a page loading in modern websites. YouTube is an excellent example of this. While there might be libraries to do this with NextJS and other frameworks, I have yet to see one that does it for SvelteKit. But fortunately, it isn't so hard to implement yourself! If you're interested in only the code, here's the &lt;a href="https://github.com/shajidhasan/sveltekit-page-progress-demo"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello there! Welcome to my first blog post ever for developers(for anyone, actually). If you still haven't got a clear picture of what we're going to do, here's a GIF for you:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1qg1iGFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/shajidhasan/sveltekit-page-progress-demo/raw/main/demo/screen-cap.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1qg1iGFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/shajidhasan/sveltekit-page-progress-demo/raw/main/demo/screen-cap.gif" alt="GIF demo"&gt;&lt;/a&gt;&lt;br&gt;
You can &lt;a href="https://sveltekit-progress.vercel.app"&gt;click here&lt;/a&gt; for a demo as well. In SvelteKit, you can have a &lt;code&gt;load&lt;/code&gt; function that will run on the server/client before a page is loaded. While the load function does its job, our page loading bar on top will continue to increase for a nice visual feedback. It's awesome!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h2&gt;

&lt;p&gt;Before we get down to write some code, let me quickly explain how it'll work. I will assume you have at least some experience with Svelte, Svelte's stores and SvelteKit.&lt;br&gt;
We'll have a &lt;code&gt;PageLoader.svelte&lt;/code&gt; component. It starts animating right from the time it's mounted(which is when a user clicks a link). Its width starts to go from 0 to 70%. And as soon as the next page is done loading, it'll quickly animate to 100%, and then disappear nicely. We'll know when navigation is started and ended with SvelteKit's &lt;code&gt;sveltekit:navigation-start&lt;/code&gt; and &lt;code&gt;sveltekit:navigation-end&lt;/code&gt; window events. We'll keep this navigation state data in a Svelte &lt;code&gt;writable&lt;/code&gt; store so that we can control &lt;code&gt;PageLoader.svelte&lt;/code&gt; component's animation.&lt;br&gt;
That's about it! If this sounds simple enough, go ahead and give this a try!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;You will most likely do this in an existing project of yours. But for the sake of this tutorial, let me scaffold a new SvelteKit project with &lt;code&gt;npm init svelte@next&lt;/code&gt;. I will enable TypeScript for this example. After installing the required packages with &lt;code&gt;npm install&lt;/code&gt;, I'll create some files. Here's the directory structure we'll have after that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src
└───routes
|   |   __layout.svelte
|   |   page-1.svelte
|   |   page-2.svelte
|   |   index.svelte
|   |
└───components
|   |   PageLoader.svelte
|   |
└───stores
|   |   navigationState.ts
|   |
└───styles
|   |   global.css

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty simple, right? I'll add some styling to the &lt;code&gt;global.css&lt;/code&gt; file. I could do that in the Svelte components, but this is a tiny project with shared styles across the pages. You can refer to the GitHub repository of this tutorial if you want the code.&lt;br&gt;
Now it's time to create the pages. I'll just link the &lt;code&gt;page-1.svelte&lt;/code&gt; and &lt;code&gt;page-2.svelte&lt;/code&gt; using anchor tags inside the &lt;code&gt;index.svelte&lt;/code&gt;. Here's the code for these three:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- routes/index.svelte --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Page loading progress bar in action with SvelteKit.&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"links"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/page-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Page 1&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/page-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Page 2&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- routes/page-1.svelte --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;You're on Page 1.&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"links"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/page-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Page 2&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- routes/page-2.svelte --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;You're on Page 2.&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"links"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/page-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Page 1&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing too fancy. Now let's move on to the code that's actually relevant.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-do-this"&gt;
  &lt;/a&gt;
  Let's do this
&lt;/h2&gt;

&lt;p&gt;We'll go to the &lt;code&gt;routes/__layout.svelte&lt;/code&gt; file. All the pages will be rendered inside this layout file, so we'll have to add a slot so that other pages have a place. We'll also import the &lt;code&gt;global.css&lt;/code&gt; here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- routes/__layout.svelte --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/global.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point you can run &lt;code&gt;npm run dev&lt;/code&gt; to see if everything's working properly.&lt;/p&gt;

&lt;p&gt;Svelte has a special element called &lt;code&gt;&amp;lt;svelte:window&amp;gt;&lt;/code&gt;. You can easily add window event listeners with this element. Upon inspecting the docs, I've come to know SvelteKit emits &lt;code&gt;sveltekit:navigation-start&lt;/code&gt; and &lt;code&gt;sveltekit-navigation-end&lt;/code&gt; window events. Let's just grab them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- routes/__layout.svelte --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/global.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;svelte:window&lt;/span&gt;
    &lt;span class="na"&gt;on:sveltekit:navigation-start=&lt;/span&gt;&lt;span class="s"&gt;{()&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; {
        console.log('Navigation started!');
    }}
    on:sveltekit:navigation-end={() =&amp;gt; {
        console.log('Navigation ended!');
    }}
/&amp;gt;

&lt;span class="nt"&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open up the browser's console, and see if you get the navigation messages properly. All's good on my side so let's go ahead and create the &lt;code&gt;stores/navigationState.ts&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// stores/navigationState.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;NavigationState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;loaded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NavigationState&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have a way to know the navigation state from anywhere within the app. We haven't edited the event listeners for this yet, but we'll get to that.&lt;/p&gt;

&lt;p&gt;Before doing anything else, let's create the &lt;code&gt;components/PageLoader.svelte&lt;/code&gt; component. Let's write the markup first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- components/PageLoader.svelte --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-sliver"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;{`--width:&lt;/span&gt; &lt;span class="err"&gt;${$&lt;/span&gt;&lt;span class="na"&gt;progress&lt;/span&gt; &lt;span class="na"&gt;*&lt;/span&gt; &lt;span class="err"&gt;100}%`}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.progress-bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.progress-sliver&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--width&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f8485e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we're passing in a &lt;code&gt;$progress * 100&lt;/code&gt; variable into a CSS custom property with the style attribute. &lt;code&gt;progress&lt;/code&gt; is going to be a Svelte &lt;code&gt;tweened&lt;/code&gt; value.&lt;br&gt;
Initially &lt;code&gt;progress&lt;/code&gt; will be 0, and then as soon as the component is mounted, we'll animate it to 0.7 to go to 70%. We'll also listen for the &lt;code&gt;navigationState&lt;/code&gt; change from the store we created earlier. When the state is &lt;code&gt;'loaded'&lt;/code&gt;, we'll set the progress to 1 (100%). Here's full code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- components/PageLoader.svelte --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tweened&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte/motion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;cubicOut&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte/easing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;navigationState&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../stores/navigationState&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;progress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tweened&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;easing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cubicOut&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unsubscribe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;navigationState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loaded&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;


&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-sliver"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;{`--width:&lt;/span&gt; &lt;span class="err"&gt;${$&lt;/span&gt;&lt;span class="na"&gt;progress&lt;/span&gt; &lt;span class="na"&gt;*&lt;/span&gt; &lt;span class="err"&gt;100}%`}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.progress-bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.progress-sliver&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--width&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f8485e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we did not forget to unsubscribe the store when the component is destroyed. Also, notice the duration. When we're animating from 0 to 70%, we'll go a bit slow. When the page is loaded, we'll go to 100% much faster.&lt;br&gt;
Now there's only one thing left to do. Let's go back to &lt;code&gt;routes/__layout.svelte&lt;/code&gt; file. We'll change the event listeners so that they can set the &lt;code&gt;navigationState&lt;/code&gt; when navigation is occurring. We're going to import the &lt;code&gt;PageLoader.svelte&lt;/code&gt; component here, and show it only when &lt;code&gt;navigationState&lt;/code&gt; is equal to &lt;code&gt;'loading'&lt;/code&gt;. We'll bring in Svelte's fade transition as well to make the PageLoader component fade out once a page is loaded. But &lt;em&gt;remember&lt;/em&gt;, we'll have to add some delay to it so that the progress bar reaches 100% before it disappears. Take a look at the code now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- routes/__layout.svelte --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fade&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte/transition&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;navigationState&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../stores/navigationState&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PageLoader&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/PageLoader.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/global.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;svelte:window&lt;/span&gt;
    &lt;span class="na"&gt;on:sveltekit:navigation-start=&lt;/span&gt;&lt;span class="s"&gt;{()&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; {
        $navigationState = 'loading';
    }}
    on:sveltekit:navigation-end={() =&amp;gt; {
        $navigationState = 'loaded';
    }}
/&amp;gt;
{#if $navigationState === 'loading'}
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;out:fade=&lt;/span&gt;&lt;span class="s"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;delay:&lt;/span&gt; &lt;span class="err"&gt;500&lt;/span&gt; &lt;span class="err"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;PageLoader&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
{/if}

&lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#thats-it-folks"&gt;
  &lt;/a&gt;
  That's it, folks!
&lt;/h2&gt;

&lt;p&gt;Your page loading animation is ready now. Restart the dev server and check if it works properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;For my first post ever, I hope that was okay! Check out the &lt;a href="https://github.com/shajidhasan/sveltekit-page-progress-demo"&gt;GitHub repository&lt;/a&gt; if you still have any doubts. I understand this might not be the best way to do this, but it'll work fine for most cases. Feel free to leave any feedback/comments/questions.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What's your PC Specification?</title>
      <author>Adeleye Ayodeji</author>
      <pubDate>Fri, 20 Aug 2021 08:54:07 +0000</pubDate>
      <link>https://dev.to/adeleyeayodeji/what-s-your-pc-specification-4fmg</link>
      <guid>https://dev.to/adeleyeayodeji/what-s-your-pc-specification-4fmg</guid>
      <description>&lt;p&gt;Mine is ASUS G73Jh-B1 17.3&lt;/p&gt;

&lt;p&gt;2.0GHz Intel Core i7-2630QM Quad-Core&lt;br&gt;
14GB RAM&lt;br&gt;
1.5TB (500GB SSD x 1TB SSD) SSD&lt;br&gt;
Blu-ray ROM with DVD Burning&lt;br&gt;
Nvidia Geforce GTX 460M&lt;br&gt;
17.3" Widescreen Display&lt;br&gt;
Integrated Camera and Microphone&lt;br&gt;
Bluetooth, 802.11b/g/n Wi-Fi&lt;br&gt;
Windows 10 Pro (64-bit)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>React Environment Variables</title>
      <author>Suprabha</author>
      <pubDate>Fri, 20 Aug 2021 08:48:49 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/react-environment-variables-k0n</link>
      <guid>https://dev.to/suprabhasupi/react-environment-variables-k0n</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-env"&gt;
  &lt;/a&gt;
  &lt;span&gt;W&lt;/span&gt;hat is ENV 🤔
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;env&lt;/strong&gt; file to store your sensitive credentials like API keys.&lt;br&gt;
Environment variables can also help you to store your API link in one location so that you don't have to change the link in each file manually.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#do-you-have-to-install-any-plugin-to-use-env-file"&gt;
  &lt;/a&gt;
  Do you have to install any plugin to use ENV file 🙄
&lt;/h3&gt;

&lt;p&gt;No, A React frontend connected to a Node backend is a rock-solid combination for any application you want to build. So you can create and use &lt;code&gt;.env&lt;/code&gt; file without installing any plugins.&lt;/p&gt;

&lt;p&gt;Usually, you create one &lt;code&gt;.env&lt;/code&gt; file which triggers for local, integration and production.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-if-you-want-to-create-different-keys-for-integration-and-production"&gt;
  &lt;/a&gt;
  What if you want to create different Keys for integration and production
&lt;/h3&gt;

&lt;p&gt;If you have to use different keys for integration and production, in that case you have to customise your environment.&lt;/p&gt;

&lt;p&gt;Now, let's see what are we going to cover in this article:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Customise Environment Variable for build environment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Use Environment variable in HTML&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-customise-environment-variable-for-build-environment"&gt;
  &lt;/a&gt;
  1. Customise Environment Variable for build environment
&lt;/h3&gt;

&lt;p&gt;There are already few environment which React supports like &lt;code&gt;.env.development&lt;/code&gt;, &lt;code&gt;.env.test&lt;/code&gt;, &lt;code&gt;.env.production&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;.env&lt;/code&gt; files can be used:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.env&lt;/code&gt;: Default&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.env.local&lt;/code&gt;: Local overrides. This file is loaded for all environments except test&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.env.development&lt;/code&gt;, &lt;code&gt;.env.test&lt;/code&gt;, &lt;code&gt;.env.production&lt;/code&gt;: Environment-specific settings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can create your own &lt;code&gt;env&lt;/code&gt; file which is not added in react. You need to install one package called &lt;code&gt;env-cmd&lt;/code&gt; for setup the custom environment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a file called &lt;code&gt;.env.integration&lt;/code&gt; where &lt;code&gt;.env&lt;/code&gt; exists&lt;/li&gt;
&lt;li&gt;Set the environment variable which you wanted for integration in &lt;code&gt;.env.integration&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;REACT_APP_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;XXXX&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;code&gt;env-cmd&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Add a new script to your &lt;code&gt;package.json&lt;/code&gt;, building with your new environment:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build:integration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"env-cmd -f .env.integration yarn run build"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now you can run the integration command &lt;code&gt;yarn run build:integration&lt;/code&gt; to build with the integration environment config.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;📝 Variables in &lt;code&gt;.env.production&lt;/code&gt; will be used as fallback because &lt;code&gt;NODE_ENV&lt;/code&gt; will always be set to production for a build.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-if-you-want-to-install-devdependencies-when-nodeenvproduction"&gt;
  &lt;/a&gt;
  What if you want to install devDependencies when NODE_ENV=production 🤔
&lt;/h3&gt;

&lt;p&gt;As you know if &lt;code&gt;NODE_ENV=production&lt;/code&gt;, then devDependencies packages will not get installed. &lt;/p&gt;

&lt;p&gt;However, You can install the devDependencies in &lt;code&gt;NODE_ENV=production&lt;/code&gt; with setting  &lt;code&gt;yarn install --production=false&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;Checkout this &lt;a href="https://classic.yarnpkg.com/en/docs/cli/install#toc-yarn-install-production-true-false"&gt;Link&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-use-env-variables-in-html"&gt;
  &lt;/a&gt;
  2. Use ENV variables in HTML
&lt;/h3&gt;

&lt;p&gt;You only use environment variable in JavaScript files. But what when you need to use environment variable in HTML, It can be Google Map keys or any secret keys of script. &lt;/p&gt;

&lt;p&gt;You can access the environment variables in the index.html, just to remember that the env variable should be prefix with &lt;code&gt;REACT_APP_&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;%REACT_APP_NAME%&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Define permanent environment variables in &lt;code&gt;.env&lt;/code&gt; file in root of the project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.env:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;REACT_APP_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;ProjectName&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;📝 Remember to restart the server when you make any changes in &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference 🧐
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://create-react-app.dev/docs/adding-custom-environment-variables/"&gt;CRA adding custom environment variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://create-react-app.dev/docs/deployment/#customizing-environment-variables-for-arbitrary-build-environments"&gt;CRA deployment docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://create-react-app.dev/docs/deployment/#customizing-environment-variables-for-arbitrary-build-environments"&gt;CRA env variables for build env&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#summary-%E2%85%80"&gt;
  &lt;/a&gt;
  Summary ⅀
&lt;/h3&gt;

&lt;p&gt;If you want to add any other env which is not mentioned in react app, you have to setup env-cmd and can use it. Also, you can use .env variables in HTML file using REACT_APP_&lt;/p&gt;

&lt;p&gt;Thanks for reading the article ❤️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/suprabhasupi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDe0OdcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4t25pJE.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        🌟 &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        📚 &lt;a href="https://gum.co/css-pseudo-class-elements"&gt; Ebooks&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        🌟 &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>HTML5 Semantics: Structure Tags</title>
      <author>briannaxrene</author>
      <pubDate>Fri, 20 Aug 2021 08:14:13 +0000</pubDate>
      <link>https://dev.to/briannaxrene/html5-semantics-structure-tags-7a6</link>
      <guid>https://dev.to/briannaxrene/html5-semantics-structure-tags-7a6</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Semantic elements were introduced in HTML5 to reflect important distinctions in the meaning of content. These elements aren't meant for &lt;em&gt;presentation&lt;/em&gt;, but for &lt;strong&gt;accessibility&lt;/strong&gt; (and Search Engine Optimization).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you're structuring your HTML page, these tags should be used in place of divs or spans. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#main-containers"&gt;
  &lt;/a&gt;
  Main Containers
&lt;/h2&gt;

&lt;p&gt;→ &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;&lt;br&gt;
This tag is meant to hold &lt;em&gt;introductory page content or article content&lt;/em&gt;. The header element can nest navigation, a site logo, an h1 tag or anything else "introductory" to the site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This tag can be used more than once on a page, nested in other structural tags&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;→ &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;&lt;br&gt;
This element should hold any &lt;em&gt;major page navigation&lt;/em&gt;. This could be major site navigation across the top of a page, or a table of contents sidebar. Any group of major related site links should be in this tag.&lt;/p&gt;

&lt;p&gt;→ &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; &lt;br&gt;
This element should hold &lt;em&gt;all primary or unique page content&lt;/em&gt;. Screen readers can also use it as a landmark to skip a page's introductory content. &lt;strong&gt;This tag should only be used once on a page.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One common practice is to use a common header (with a nested &lt;code&gt;nav&lt;/code&gt;, logo, etc) and footer component for every page, then use a unique main element for each one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grouping-content"&gt;
  &lt;/a&gt;
  Grouping Content
&lt;/h2&gt;

&lt;p&gt;The next couple of tags can be a bit confusing at first when deciding what to use in code, but once you get a handle on what content they're meant to hold, usage is much easier.&lt;/p&gt;

&lt;p&gt;→ &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; &lt;br&gt;
This element should hold &lt;em&gt;content that could stand on its own out of context&lt;/em&gt;. If a chunk of your content could be understood without the rest of the page around it, this is the right tag to use. Examples are things like separate blog posts, user comments, anything that can stand on its own.&lt;br&gt;
&lt;strong&gt;This element can nest header, footer, section, and aside tags.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;→ &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; &lt;br&gt;
This element seems more generic than the rest, but still has its semantic purpose. It's used to group &lt;em&gt;thematically related content&lt;/em&gt;. Content that makes sense grouped together should be put here. &lt;br&gt;
&lt;strong&gt;If grouped content just needs styling and truly has no common theme, a generic div element is still alright&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;→ &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; &lt;br&gt;
This element should hold &lt;em&gt;secondary related page content&lt;/em&gt;, like any content considered as bonus or extra information. This could be a quote in an article, a sidebar, table of contents, etc.&lt;/p&gt;

&lt;p&gt;→ &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; &lt;br&gt;
This element can hold &lt;strong&gt;any kind of visual representation&lt;/strong&gt;, like an image, illustration, diagram, code snippet, etc.&lt;/p&gt;

&lt;p&gt;It also has a paired tag, &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt; (which is optional to use).&lt;/p&gt;

&lt;p&gt;→ &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; &lt;br&gt;
This final semantic element should hold &lt;em&gt;content/info about the creator, or creation of a page/article&lt;/em&gt;. Common examples would be copyright information, links to social media, contact info, etc. &lt;strong&gt;This tag can also be used more than once on a page, nested in other structural tags&lt;/strong&gt;.&lt;/p&gt;




&lt;p&gt;This is my first post on dev.to, if anything isn't clear enough or you see a mistake, please let me know! I'm hoping to be able to contribute more for those just starting in web dev, and clear up concepts that may be harder to grasp out of the gate.&lt;/p&gt;

</description>
      <category>html</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How HttpOnly cookies help mitigate XSS attacks 🍪</title>
      <author>Peter Perlepes</author>
      <pubDate>Fri, 20 Aug 2021 08:14:08 +0000</pubDate>
      <link>https://dev.to/clerk/how-httponly-cookies-help-mitigate-xss-attacks-14af</link>
      <guid>https://dev.to/clerk/how-httponly-cookies-help-mitigate-xss-attacks-14af</guid>
      <description>&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; HttpOnly cookies do not prevent &lt;a href="https://owasp.org/www-community/attacks/xss/"&gt;cross-site scripting (XSS)&lt;/a&gt; attacks, but they do lessen the impact and prevent the need to sign out users after the XSS is patched. HttpOnly cookies are not a substitute for XSS prevention measures.&lt;/p&gt;

&lt;p&gt;Our very first architecture decision at Clerk was to use HttpOnly cookies for session management. It has long been understood that HttpOnly cookies help mitigate cross-site scripting (XSS) attacks, and we felt it was important to include this best-practice directly in our product.&lt;/p&gt;

&lt;p&gt;But while there's strong consensus that using HttpOnly cookies is a best practice, we've found many developers are unsure of how they help with XSS. We think this stems from the guidance, which often just says what to do rather than explaining why:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A cookie with the HttpOnly attribute is inaccessible to the JavaScript &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie"&gt;Document.cookie API&lt;/a&gt;; it is sent only to the server. For example, cookies that persist server-side sessions don't need to be available to JavaScript, and should have the HttpOnly attribute. This precaution helps mitigate cross-site scripting (XSS) attacks.&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies"&gt;Mozilla MDN Web Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cookies [...] SHOULD be tagged to be inaccessible via JavaScript (HttpOnly).&lt;br&gt;
&lt;a href="https://pages.nist.gov/800-63-3/sp800-63b.html#711-browser-cookies"&gt;NIST 800-63B&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-attack-vector-%E2%9A%94"&gt;
  &lt;/a&gt;
  The attack vector ⚔
&lt;/h2&gt;

&lt;p&gt;After reading this guidance, you might be surprised to learn that HttpOnly cookies do not prevent XSS attacks.&lt;/p&gt;

&lt;p&gt;Instead, HttpOnly cookies are helpful when you assume an XSS attack will happen and want to &lt;strong&gt;lessen the impact&lt;/strong&gt;. Ultimately, they mitigate XSS attacks by making it easier for organizations to respond.&lt;/p&gt;

&lt;p&gt;The specific threat HttpOnly cookies protect against is called session &lt;strong&gt;token exfiltration&lt;/strong&gt;, which is a fancy way of saying that the attacker is able to steal a user's session token.&lt;/p&gt;

&lt;p&gt;When a session token is stored in a cookie without the HttpOnly flag, the token can be stolen during an XSS attack with &lt;code&gt;document.cookie&lt;/code&gt;. This is problematic because session tokens are the primary mechanism used by backends to authenticate a user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Once an attacker has access to a session token, they can often act on behalf of a user until that token expires or is revoked&lt;/strong&gt;. Actions can be taken remotely - even if the user is no longer visiting the page with the XSS vulnerability - which can serve to dramatically increase the surface area of the attack.&lt;/p&gt;

&lt;p&gt;Conversely, when a session token is stored in a cookie with the HttpOnly flag, that token cannot be directly exfiltrated during an XSS attack. This minimizes the surface area of the XSS attack and makes it easier for organizations to respond.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responding-to-xss-attacks-without-httponly-cookies"&gt;
  &lt;/a&gt;
  Responding to XSS attacks - without HttpOnly cookies
&lt;/h2&gt;

&lt;p&gt;When an organization is responding to an XSS attack, the first step is always patching the XSS vulnerability.&lt;/p&gt;

&lt;p&gt;If HttpOnly cookies were not used, organizations should then assume that session tokens were exfiltrated. This means that - even with the XSS vulnerability patched - the attacker may still have the ability to act on behalf of users.&lt;/p&gt;

&lt;p&gt;The next step is revoking the session of any user who may have been subjected to the XSS vulnerability, since those are the users who may have had their session tokens exfiltrated. These users will need to sign in again next time they visit the website.&lt;/p&gt;

&lt;p&gt;Lastly, the organization will need to reverse any actions the attacker took on behalf of their users, from the time the vulnerability began to the time session tokens were revoked.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responding-to-xss-attacks-with-httponly-cookies"&gt;
  &lt;/a&gt;
  Responding to XSS attacks - with HttpOnly cookies 🍪
&lt;/h2&gt;

&lt;p&gt;With HttpOnly cookies, organizations still need to patch the XSS vulnerability and reverse any actions taken on behalf of their users, but they do not need to revoke sessions and ask users to sign in again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-localstorage-and-sessionstorage"&gt;
  &lt;/a&gt;
  What about localStorage and sessionStorage? 🤔
&lt;/h2&gt;

&lt;p&gt;Although &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"&gt;window.localStorage&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage"&gt;window.sessionStorage&lt;/a&gt; are newer client-side storage APIs, they function like cookies without the HttpOnly flag. HttpOnly cookies are still the only standard mechanism for persisting session tokens that cannot be exfiltrated during an XSS attack.&lt;/p&gt;

</description>
      <category>security</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>authentication</category>
    </item>
    <item>
      <title>"youtube_video_info" flutter package</title>
      <author>Baransel</author>
      <pubDate>Fri, 20 Aug 2021 07:58:18 +0000</pubDate>
      <link>https://dev.to/baransel/youtubevideoinfo-flutter-package-2mn7</link>
      <guid>https://dev.to/baransel/youtubevideoinfo-flutter-package-2mn7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#pubdevyoutubevideoinfo"&gt;
  &lt;/a&gt;
  &lt;a href="https://pub.dev/packages/youtube_video_info"&gt;pub.dev/youtube_video_info&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#githubcomkaexyoutubevideoinfo"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/kaex/youtube_video_info"&gt;github.com/kaex/youtube_video_info&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is a lightweight⚡ package to fetch video info for YouTube from the url&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-install-add-to-pubspecyaml"&gt;
  &lt;/a&gt;
  To install, add to pubspec.yaml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;flutter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;sdk&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;flutter&lt;/span&gt;
&lt;span class="na"&gt;youtube_video_info&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^1.0.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then run &lt;code&gt;flutter pub get&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Import the library&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:youtube_video_info/youtube.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#calling-the-method"&gt;
  &lt;/a&gt;
  Calling the method
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;YoutubeDataModel videoData = await YoutubeData.getData(link);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;videoData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// "Ed Sheeran - Bad Habits [Official Video]"&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;averageRating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;videoData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;averageRating&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 4.13242&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;durationSeconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;videoData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;durationSeconds&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 167&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--foorDjdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/qhrpkPloaPHcuZa9N9/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--foorDjdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/qhrpkPloaPHcuZa9N9/giphy.gif" alt="example gif"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>package</category>
    </item>
  </channel>
</rss>
