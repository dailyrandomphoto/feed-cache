<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Accessibility automated tools - what to expect</title>
      <author>Neha Sharma </author>
      <pubDate>Sun, 03 Oct 2021 12:53:26 +0000</pubDate>
      <link>https://dev.to/hellonehha/accessibility-automated-tools-what-to-expect-546m</link>
      <guid>https://dev.to/hellonehha/accessibility-automated-tools-what-to-expect-546m</guid>
      <description>&lt;p&gt;There are a few popular tools available for the accessibility testing such as Lighthouse, AXE Tool , and plugins.&lt;/p&gt;

&lt;p&gt;Developers and Testers expect that these tools magically help them cover 100% accessibility issues. However, accessibility tools cannot provide you 100% cover from the issues but it can help you to atleast report some % of issues and how to fix them. &lt;/p&gt;

&lt;p&gt;Today we are going to learn the issues automated took can and cannot report:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-tools"&gt;
  &lt;/a&gt;
  Common Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.deque.com/axe/devtools/"&gt;Axe tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/nerdefocus/lpfiljldhgjecfepfljnbjnbjfhennpd"&gt;Keyboard focus Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/eslint-plugin-jsx-a11y"&gt;ESlint JSX A11y Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coolors.co/contrast-checker/112a46-acc8e5"&gt;Color Contrast Analyser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Can&lt;/th&gt;
&lt;th&gt;Can't&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;alt tags&lt;/td&gt;
&lt;td&gt;Can identify if alt tags are missing&lt;/td&gt;
&lt;td&gt;Can't identify if alt tags are meaningful&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Labels&lt;/td&gt;
&lt;td&gt;Can identify if labels are missing &amp;amp; order is incorrect&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Color contrast&lt;/td&gt;
&lt;td&gt;Can identify if color contrast is failing&lt;/td&gt;
&lt;td&gt;Can't identify if color contrast on images and gradient&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Focus&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Can't identify if the focus order is correct&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Order of Headings&lt;/td&gt;
&lt;td&gt;Can identify if order of H1-H6 is correct&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ARIA&lt;/td&gt;
&lt;td&gt;Can identify if ARIA tag is missing&lt;/td&gt;
&lt;td&gt;Can't identify if the usage is correct&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Role &amp;amp; landmarks&lt;/td&gt;
&lt;td&gt;Can identify if ARIA role and landmarks is missing&lt;/td&gt;
&lt;td&gt;Can't identify if the usage is correct&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Semantic&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Can't identify if the semantic tags are used or not&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Responsive&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Tools cannot identify if app is not responsive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Experience&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Can't identify if the experience of assertive technologies is similar to non-assertive technologies&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The above points are important to understand the scope of automated testing. While using the tools one should be aware 'what' the tools will be testing and do the manual testing of 'what cannot' be tested by tools.&lt;/p&gt;

&lt;p&gt;Happy Learning!!&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Starting off as a UX/UI Designer.</title>
      <author>Nderitu</author>
      <pubDate>Sun, 03 Oct 2021 12:10:23 +0000</pubDate>
      <link>https://dev.to/nderitumwanu/starting-off-as-a-ui-ux-designer-8n</link>
      <guid>https://dev.to/nderitumwanu/starting-off-as-a-ui-ux-designer-8n</guid>
      <description>&lt;p&gt;Being a designer means you bring things to life, from a thought, into a concept that will actually be used by people you've never met. In this year alone I've seen more designers, most self-taught, confess that this is the best career choice they've made because they enjoy what they are doing. &lt;/p&gt;

&lt;p&gt;I have a developer background, precisely frontend development and in my time, I got introduced to &lt;a href="https://dribbble.com"&gt;Dribbble&lt;/a&gt;. What an inspirational site! I could see all the trends in design implemented. This is where every designer should start, from inspiration and beyond!. In line with this, here are a few easy steps on how to start off as a UX/UI Designer today.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1grow-your-passion-with-inspiration"&gt;
  &lt;/a&gt;
  1.GROW YOUR PASSION WITH INSPIRATION
&lt;/h3&gt;

&lt;p&gt;You need somewhere to conduct a study and view trends in the design world. You need motivation to start and competitors to match up to. Find all these on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dribbble.com"&gt;Dribble&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pinterest.com"&gt;Pinterest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://behance.com"&gt;Behance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2enroll-in-a-design-course"&gt;
  &lt;/a&gt;
  2.ENROLL IN A DESIGN COURSE
&lt;/h3&gt;

&lt;p&gt;There are a number of sites/online institutions that offer Design courses at a fee or even for free. My personal favorite and recommendation is &lt;a href="https://app.uxcel.com/courses/"&gt;Uxcel&lt;/a&gt;. They have a great interface, easy to learn with, which means they teach and implement.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3start-off-with-a-design-tool"&gt;
  &lt;/a&gt;
  3.START OFF WITH A DESIGN TOOL
&lt;/h3&gt;

&lt;p&gt;Every designer has to choose their preferred design tool where they can implement their prototypes.Try &lt;a href="https://figma.com"&gt;Figma&lt;/a&gt;, &lt;a href="https://sketch.com"&gt;Sketch&lt;/a&gt;and &lt;a href="https://www.adobe.com/africa/products/xd.html"&gt;Adobe XD&lt;/a&gt;. These are the main tools, try each and find your favorite, as for me I love Figma(Very good in collaboration).  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4learn-practice-post"&gt;
  &lt;/a&gt;
  4.LEARN, PRACTICE, POST
&lt;/h3&gt;

&lt;p&gt;With the above tools and courses, visit &lt;a href="https://www.dailyui.co"&gt;dailyUI&lt;/a&gt;, signup, and you will receive daily design challenges to keep you on toes. Post your designs on Behance and Dribbble as much as you can to keep perfecting skills and concepts you've learnt.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5create-a-portfolio"&gt;
  &lt;/a&gt;
  5.CREATE A PORTFOLIO
&lt;/h3&gt;

&lt;p&gt;A portfolio is like an online resume. Its a webpage that showcases who you are, what tools you have used, processes, experience and previous designs that you have worked on. You can create your portfolio in two ways. One, code it all in HTML, CSS &amp;amp; Javascript or use sites like &lt;a href="http://webflow.com"&gt;Webflow&lt;/a&gt;,&lt;a href="http://quest.ai"&gt;Quest ai&lt;/a&gt; and &lt;a href="http://uxfol.io/"&gt;Uxfolio&lt;/a&gt; to do it with no code.&lt;/p&gt;

&lt;p&gt;With that, I believe you are on the right path to getting a role as a Designer, either in interface, experience or even product. Remember, keep on practicing and learning. To making more users happy🥂.&lt;/p&gt;

&lt;p&gt;Oh, some bonus sites for stuff you might need in between your journey:&lt;a href="https://www.evernote.design"&gt;Evernote&lt;/a&gt;, &lt;a href="https://www.ui8.net"&gt;ui8&lt;/a&gt;, &lt;a href="https://www.ls.graphics"&gt;lsgraphics&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cheers friends!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>Git Cheat Sheet</title>
      <author>Sriram Rajamani</author>
      <pubDate>Sun, 03 Oct 2021 11:59:30 +0000</pubDate>
      <link>https://dev.to/ramjisriram/git-cheat-sheet-57j</link>
      <guid>https://dev.to/ramjisriram/git-cheat-sheet-57j</guid>
      <description>&lt;p&gt;Git is an open source version control system that works locally to help developers work together on software projects that matter. This cheat sheet provides a quick reference to commands that are useful for working and collaborating in a Git repository (repo).&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#initializing"&gt;
  &lt;/a&gt;
  Initializing
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Starting up Git within a project and getting it connected.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initializes (or starts) your current working directory (folder) as a Git repository (repo).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://www.github.com/username/repo-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copies an existing Git repo hosted remotely.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote  (or)  git remote -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Shows your current Git directory's remote repo. Use the -v flag for more info.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add upstream https://www.github.com/username/repo-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adds the Git upstream to a URL.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#staging"&gt;
  &lt;/a&gt;
  Staging
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Creating files staged after modifying a file and marking it ready to go in the next commit.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checks the status of your Git repo, including files added that are not staged.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add  .   (or)   git add my_script.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Stages modified files. If you make changes that you want included in the next commit, you can run add again. Use "git add." for all files to be staged, or specify specific files by name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset my_script.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Removes a file from staging while retaining changes within your working directory.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#committing"&gt;
  &lt;/a&gt;
  Committing
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Recording changes made to the repo.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "Commit message"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Commits staged files with a meaningful commit message so that you and others can track commits.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -am "Commit message"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Condenses all tracked files by committing them in one step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit --amend -m "New commit message" 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Modifies your commit message.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#branching"&gt;
  &lt;/a&gt;
  Branching
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Isolating work and managing feature development in one place.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lists all current branches. An asterisk (*) will appear next to your currently active branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch new-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creates a new branch. You will remain on your currently active branch until you switch to the new one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout another-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Switches to any existing branch and checks it out into your current working directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -b new-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Consolidates the creation and checkout of a new branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch -d branch-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Deletes a branch.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#collaborating-and-sharing"&gt;
  &lt;/a&gt;
  Collaborating and Sharing
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Downloading changes from another repository or sharing changes with the larger codebase.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pushes or sends your local branch commits to the remote repo. Note: some repos use master instead of main in their commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fetches and merges any commits from the tracking remote branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git merge upstream/main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Merges the fetched commits.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#showing-changes"&gt;
  &lt;/a&gt;
  Showing Changes
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;See changes between commits, branches, and more.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git diff --staged
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Compares modified files that are in the staging area.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git diff a-branch..b-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Displays the diff of what is in 'a-branch' but is not in 'b-branch'.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git diff 99abcde..1122gghh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Uses commit id to show the diff between two specific commits.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#log"&gt;
  &lt;/a&gt;
  Log
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;The history of changes.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Displays important information about our commit history, like the ID of the commits, the author, the date and where is the head.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log --all --decorate --oneline --graph
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Draws a graphical representation in one line and it's very visual.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#download-git-cheatsheet"&gt;
  &lt;/a&gt;
  Download Git Cheatsheet
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HKt2DnH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d29nlbojtknrgol13do8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HKt2DnH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d29nlbojtknrgol13do8.jpg" alt="Git Cheatsheet Single Page"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>cheatsheet</category>
      <category>cheat</category>
    </item>
    <item>
      <title>How can you embed a simple CODE EDITOR.</title>
      <author>Kavindu Santhusa</author>
      <pubDate>Sun, 03 Oct 2021 11:25:57 +0000</pubDate>
      <link>https://dev.to/ksengine/how-can-you-embed-a-simple-code-editor-1kni</link>
      <guid>https://dev.to/ksengine/how-can-you-embed-a-simple-code-editor-1kni</guid>
      <description>&lt;p&gt;Today we're going to embed an code editor in website.&lt;br&gt;
I found a code editor called codemirror. which is lighter than monaco.&lt;/p&gt;

&lt;blockquote&gt; See my last article -  
&lt;div class="ltag__link"&gt;
  &lt;a href="/ksengine" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qf9ueStI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--873xoY8Q--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/714827/d419ccd6-7e6f-4a23-b3c3-33fc69131069.png" alt="ksengine"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ksengine/embed-vscode-single-file-editor-in-your-website-176j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Embed VSCode single file editor in your website.&lt;/h2&gt;
      &lt;h3&gt;Kavindu Santhusa ・ Oct 2 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;blockquote&gt; **CodeMirror** is a versatile text editor implemented in JavaScript for the browser. It is specialized for editing code, and comes with a number of language modes and addons that implement more advanced editing functionality.&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFuVTx_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/codemirror/CodeMirror/raw/master/doc/logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFuVTx_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/codemirror/CodeMirror/raw/master/doc/logo.png" alt="Codemirror Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For features visit &lt;a href="https://codemirror.net/#features"&gt;CodeMirror WebSite&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ksenginew/embed/gORJpQv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-explained"&gt;
  &lt;/a&gt;
  Example Explained
&lt;/h2&gt;

&lt;p&gt;The easiest way to use CodeMirror is to simply load the script and style sheet , plus a mode script (Here I'm using Javascript mode script). For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.1/codemirror.min.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.1/codemirror.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.1/mode/javascript/javascript.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then Create a dummy text box for your Editor&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"editor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  your code here...
&lt;span class="nt"&gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Having done this, an editor instance can be created like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CodeMirror&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromTextArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;editor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then enjoy it.&lt;br&gt;
I hope to write more articles with advanced use cases of embedded editor. &lt;br&gt;
Follow 🏃‍♂️ me for more articles.&lt;br&gt;
Ask🙏 any question on comments section.&lt;br&gt;
Star⭐ me if you love this article.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;cover image by &lt;a href="https://unsplash.com/photos/oXlXu2qukGE?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditShareLink"&gt;Unsplash&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding 👩‍💻👩‍💻👩‍💻...&lt;br&gt;
Thanks. ❤️❤️❤️&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>VIM - Beginners Guide</title>
      <author>Vishwa Mittar</author>
      <pubDate>Sun, 03 Oct 2021 10:58:54 +0000</pubDate>
      <link>https://dev.to/vishwasluhana/vim-beginners-guide-274m</link>
      <guid>https://dev.to/vishwasluhana/vim-beginners-guide-274m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;VIM is a text editor for writing code, where you navigate around the screen with the &lt;strong&gt;Keyboard&lt;/strong&gt; instead of a &lt;strong&gt;Mouse&lt;/strong&gt;.&lt;br&gt;
It is based on original UNIX text editor named &lt;strong&gt;VI&lt;/strong&gt; which came about in 1976 by &lt;em&gt;Bill Joy&lt;/em&gt;. It was later improved by &lt;em&gt;Bram Mooleenar&lt;/em&gt; in 1991 with bunch of improvements and named &lt;strong&gt;VIM&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-vim"&gt;
  &lt;/a&gt;
  Why VIM?
&lt;/h2&gt;

&lt;p&gt;Why would you use VIM when we have modern IDEs? The answer is, when you write code, your fingers should be bound to keyboard all the time. Every time you touch mouse your work rate is interrupted.&lt;br&gt;
Learning to code with VIM is same as learning something new from scratch, it will be painful at first but that pain will lead you to more precise and productive code editing in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;/&lt;strong&gt;MacOS&lt;/strong&gt;: VIM comes preinstalled.&lt;br&gt;
&lt;strong&gt;Windows&lt;/strong&gt;: &lt;a href="https://www.vim.org/download.php"&gt;Download VIM&lt;/a&gt;, Download the installer and install it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;/&lt;strong&gt;MacOS&lt;/strong&gt;: Type "vim filename.txt" in terminal (without quotations)&lt;br&gt;
&lt;strong&gt;Windows&lt;/strong&gt;: Open "gVim8.1" from desktop or search in start menu.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vim-modes-press-esc-to-switch-between-modes"&gt;
  &lt;/a&gt;
  Vim Modes (Press &lt;strong&gt;Esc&lt;/strong&gt; to switch between modes)
&lt;/h2&gt;

&lt;p&gt;VIM has many modes, but these four are commonly used:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#normal-mode"&gt;
  &lt;/a&gt;
  Normal mode
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;If you see cursor thicker or little wide, means you're in normal mode.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Normal mode is Vim's default mode and you'll be using it most of the time. When you are in normal mode you can navigate and perform operations throughout the file.&lt;/p&gt;

&lt;p&gt;You can move cursor between characters, words, lines, sentences, paragraphs. code blocks and more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#characters"&gt;
  &lt;/a&gt;
  Characters
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;"h"&lt;/strong&gt; (move left to character)&lt;br&gt;
&lt;strong&gt;"l"&lt;/strong&gt; (move right to character)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#words"&gt;
  &lt;/a&gt;
  Words
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;"w"&lt;/strong&gt; (move to next word)&lt;br&gt;
&lt;strong&gt;"e"&lt;/strong&gt; (move the end of current word)&lt;br&gt;
&lt;strong&gt;"b"&lt;/strong&gt; (move back to the previous word)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lines"&gt;
  &lt;/a&gt;
  Lines
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;"j"&lt;/strong&gt; (previous line)&lt;br&gt;
&lt;strong&gt;"k"&lt;/strong&gt; (next line)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sentences"&gt;
  &lt;/a&gt;
  Sentences
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;"("&lt;/strong&gt; (previous sentence)&lt;br&gt;
&lt;strong&gt;")"&lt;/strong&gt; (next sentence)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#paragraphs"&gt;
  &lt;/a&gt;
  Paragraphs
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;"{"&lt;/strong&gt; (previous Paragraph)&lt;br&gt;
&lt;strong&gt;"}"&lt;/strong&gt; (next Paragraph)&lt;/p&gt;

&lt;p&gt;For simplification:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8f4IeCto--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2g9sh1mf3rotebof7yo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8f4IeCto--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2g9sh1mf3rotebof7yo.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;k&lt;/strong&gt; (up)&lt;br&gt;
&lt;strong&gt;j&lt;/strong&gt; (down)&lt;br&gt;
&lt;strong&gt;h&lt;/strong&gt; (left)&lt;br&gt;
&lt;strong&gt;l&lt;/strong&gt; (right)&lt;br&gt;
You can also use arrow keys to navigate but for best practice you must use (k,j,h,l).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#insert-mode"&gt;
  &lt;/a&gt;
  Insert mode
&lt;/h3&gt;

&lt;p&gt;Press &lt;strong&gt;i&lt;/strong&gt; key in the normal mode to get into &lt;strong&gt;insert&lt;/strong&gt; mode. &lt;em&gt;The word INSERT will appear at the bottom of the screen.&lt;/em&gt;&lt;br&gt;
You can think of it like &lt;em&gt;edit&lt;/em&gt; mode, because now you can write/delete inside the file.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#keys-to-get-into-insert-mode"&gt;
  &lt;/a&gt;
  Keys to get into &lt;em&gt;insert&lt;/em&gt; mode:
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Make sure you're in normal mode then press,&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;i&lt;/strong&gt; (insert from the right of the character)&lt;br&gt;
&lt;strong&gt;a&lt;/strong&gt; (insert from the left of the character)&lt;br&gt;
&lt;strong&gt;I&lt;/strong&gt; (insert from the start of the line)&lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt; (insert from the end of the line)&lt;/p&gt;

&lt;p&gt;Once you are done with editing your file, press &lt;strong&gt;Esc&lt;/strong&gt; key to go back to the normal mode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#command-mode"&gt;
  &lt;/a&gt;
  Command mode
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Commands can only be typed in **Normal&lt;/em&gt;* mode.*&lt;br&gt;
When you're in normal mode, you can write commands. Every command starts with &lt;strong&gt;":"&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#basic-commands"&gt;
  &lt;/a&gt;
  Basic commands:
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;:w&lt;/strong&gt; (save file)&lt;br&gt;
&lt;strong&gt;:q&lt;/strong&gt; (quit file. &lt;em&gt;but the file must be saved first&lt;/em&gt;)&lt;br&gt;
&lt;strong&gt;:wq&lt;/strong&gt; (save and quit)&lt;br&gt;
&lt;strong&gt;:q!&lt;/strong&gt; (quit without saving)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There are many more commands, but these are the common and you'll need these all the time.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-mode"&gt;
  &lt;/a&gt;
  Visual mode
&lt;/h3&gt;

&lt;p&gt;When editing text with Vim, visual mode can be extremely useful for identifying chunks of text to be manipulated.&lt;/p&gt;

&lt;p&gt;Press the &lt;strong&gt;v&lt;/strong&gt; key to enter &lt;strong&gt;visual&lt;/strong&gt; mode. &lt;em&gt;The word VISUAL will appear at the bottom of the screen.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Use the Arrow keys to highlight the desired text. You can use other navigation commands, such as &lt;strong&gt;w&lt;/strong&gt; to highlight to the beginning of the next word or &lt;strong&gt;$&lt;/strong&gt; to include the rest of the line.&lt;br&gt;
Once the text is highlighted, press the &lt;strong&gt;d&lt;/strong&gt; key to delete/cut the text.&lt;br&gt;
If you deleted too much or not enough, press &lt;strong&gt;u&lt;/strong&gt; to undo and start again.&lt;br&gt;
Move your cursor to the new location and press &lt;strong&gt;p&lt;/strong&gt; to paste the text.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tips-and-tricks"&gt;
  &lt;/a&gt;
  Tips and tricks
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;To go forward 3 words, instead of &lt;strong&gt;www&lt;/strong&gt;, we can do &lt;strong&gt;3w&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;To go down 10 lines, instead of &lt;strong&gt;jjjjjjjjjj&lt;/strong&gt;, we can do &lt;em&gt;10j&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;dw&lt;/strong&gt; to delete a word.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;dd&lt;/strong&gt; to delete a word in a line.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;x&lt;/strong&gt; to delete a character.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;r&lt;/strong&gt; followed by new character to replace a character.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There's still a lot to learn. Keep exploring. Happy coding.&lt;/p&gt;

&lt;p&gt;If you learnt something from this article, please like, comment and share.&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://www.instagram.com/vishwas_luhana"&gt;Instagram&lt;/a&gt;.&lt;br&gt;
Follow me on &lt;a href="https://www.facebook.com/luhanavishwas"&gt;Facebook&lt;/a&gt;.&lt;br&gt;
Follow me on &lt;a href="https://twitter.com/vixvos"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vim</category>
      <category>programming</category>
      <category>linux</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Building a Tailwind CSS button group component</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Sun, 03 Oct 2021 10:44:38 +0000</pubDate>
      <link>https://dev.to/themesberg/building-a-tailwind-css-button-group-component-o51</link>
      <guid>https://dev.to/themesberg/building-a-tailwind-css-button-group-component-o51</guid>
      <description>&lt;p&gt;I've been using Tailwind CSS for quite some time and I am in love with how easy it is to set up user interfaces directly from your HTML/React/Vue or other templating files.&lt;/p&gt;

&lt;p&gt;One thing that I noticed is that it is quite bothersome when I have to start a new project not having a set of components to work with out of the box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0fey3lHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n7jb9rcnum345yedh82.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0fey3lHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n7jb9rcnum345yedh82.png" alt="Tailwind CSS button group"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is why I started a tutorial series on how to build some of the most commonly used web components with the utility classes from Tailwind CSS.&lt;/p&gt;

&lt;p&gt;Last time I talked about how you can build a &lt;a href="https://dev.to/themesberg/building-a-tailwind-css-button-component-variants-55dp"&gt;Tailwind CSS button component&lt;/a&gt; including different styles and using SVG icons as well.&lt;/p&gt;

&lt;p&gt;Today I want to talk about how you can create a group of buttons stacked together that you can use for more advanced user interfaces.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-button-group-component"&gt;
  &lt;/a&gt;
  Tailwind CSS button group component
&lt;/h2&gt;

&lt;p&gt;First of all I want to specify the fact that the button component can either be a link using the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag or simply just a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;We'll start with using the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element and create the basic HTML that we'll need for this component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div role="group"&amp;gt;
  &amp;lt;button type="button"&amp;gt;
    Flowbite
  &amp;lt;/button&amp;gt;
  &amp;lt;button type="button"&amp;gt;
    Tailwind
  &amp;lt;/button&amp;gt;
  &amp;lt;button type="button"&amp;gt;
    The Practical Dev
  &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that we've added the &lt;code&gt;role="group"&lt;/code&gt; attribute to the parent &lt;code&gt;div&lt;/code&gt; element? &lt;/p&gt;

&lt;p&gt;This &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_group_role"&gt;helps browsers identify&lt;/a&gt; it as a group of components stacked together which in turn helps people with disabilities browse your website more easily.&lt;/p&gt;

&lt;p&gt;Next up we should add some styles to the parent &lt;code&gt;div&lt;/code&gt; element to stack the buttons together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="inline-flex shadow-sm rounded-md" role="group"&amp;gt;
  &amp;lt;button type="button"&amp;gt;
    Flowbite
  &amp;lt;/button&amp;gt;
  &amp;lt;button type="button"&amp;gt;
    Tailwind
  &amp;lt;/button&amp;gt;
  &amp;lt;button type="button"&amp;gt;
    The Practical Dev
  &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's apply some styles to the button components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="inline-flex shadow-sm rounded-md" role="group"&amp;gt;
  &amp;lt;button class="rounded-l-lg border border-gray-200 bg-white text-sm font-medium px-4 py-2 text-gray-900" type="button"&amp;gt;
    Flowbite
  &amp;lt;/button&amp;gt;
  &amp;lt;button class="border-t border-b border-gray-200 bg-white text-sm font-medium px-4 py-2 text-gray-900" type="button"&amp;gt;
    Tailwind
  &amp;lt;/button&amp;gt;
  &amp;lt;button class="rounded-r-md border border-gray-200 bg-white text-sm font-medium px-4 py-2 text-gray-900" type="button"&amp;gt;
    The Practical Dev
  &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the button in the middle has only a top and border bottom? All of the buttons between the first and last element should only have a border on the Y axis to prevent a wider border between the elements.&lt;/p&gt;

&lt;p&gt;Now let's add some &lt;code&gt;hover&lt;/code&gt; and &lt;code&gt;focus&lt;/code&gt; styles to the buttons as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="inline-flex shadow-sm rounded-md" role="group"&amp;gt;
  &amp;lt;button type="button" class="rounded-l-lg border border-gray-200 bg-white text-sm font-medium px-4 py-2 text-gray-900 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700"&amp;gt;
    Flowbite
  &amp;lt;/button&amp;gt;
  &amp;lt;button type="button" class="border-t border-b border-gray-200 bg-white text-sm font-medium px-4 py-2 text-gray-900 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700"&amp;gt;
    Tailwind
  &amp;lt;/button&amp;gt;
  &amp;lt;button type="button" class="rounded-r-md border border-gray-200 bg-white text-sm font-medium px-4 py-2 text-gray-900 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700"&amp;gt;
    The Practical Dev
  &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! We're done with the first button group component. It should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sTJ5Qw48--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quwhe1rd79530lu3kdg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sTJ5Qw48--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quwhe1rd79530lu3kdg1.png" alt="Tailwind CSS button group example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#button-group-as-links"&gt;
  &lt;/a&gt;
  Button group as links
&lt;/h2&gt;

&lt;p&gt;You can also use the button group components as a stack of links.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;div class="inline-flex shadow-sm rounded-md"&amp;gt;
  &amp;lt;a href="#" aria-current="page" class="rounded-l-lg border border-gray-200 bg-white text-sm font-medium px-4 py-2  hover:bg-gray-100 text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700"&amp;gt;
    Profile
  &amp;lt;/a&amp;gt;
  &amp;lt;a href="#" class="border-t border-b border-gray-200 bg-white text-sm font-medium px-4 py-2 text-gray-900 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700"&amp;gt;
    Settings
  &amp;lt;/a&amp;gt;
  &amp;lt;a href="#" class="rounded-r-md border border-gray-200 bg-white text-sm font-medium px-4 py-2 text-gray-900 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700"&amp;gt;
    Messages
  &amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#button-group-with-icons"&gt;
  &lt;/a&gt;
  Button group with icons
&lt;/h2&gt;

&lt;p&gt;You can also use SVG icons with the button group element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;div class="inline-flex shadow-sm rounded-md" role="group"&amp;gt;
  &amp;lt;button type="button" class="rounded-l-lg border border-gray-200 bg-white text-sm font-medium px-4 py-2 text-gray-900 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700 inline-flex items-center "&amp;gt;
    &amp;lt;svg class="w-4 h-4 mr-2 fill-current" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
    Profile
  &amp;lt;/button&amp;gt;
  &amp;lt;button type="button" class="border-t border-b border-gray-200 bg-white text-sm font-medium px-4 py-2 text-gray-900 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700 inline-flex items-center"&amp;gt;
    &amp;lt;svg class="w-4 h-4 mr-2 fill-current" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path d="M5 4a1 1 0 00-2 0v7.268a2 2 0 000 3.464V16a1 1 0 102 0v-1.268a2 2 0 000-3.464V4zM11 4a1 1 0 10-2 0v1.268a2 2 0 000 3.464V16a1 1 0 102 0V8.732a2 2 0 000-3.464V4zM16 3a1 1 0 011 1v7.268a2 2 0 010 3.464V16a1 1 0 11-2 0v-1.268a2 2 0 010-3.464V4a1 1 0 011-1z"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
    Settings
  &amp;lt;/button&amp;gt;
  &amp;lt;button type="button" class="rounded-r-md border border-gray-200 bg-white text-sm font-medium px-4 py-2 text-gray-900 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700 inline-flex items-center"&amp;gt;
    &amp;lt;svg class="w-4 h-4 mr-2 fill-current" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M2 9.5A3.5 3.5 0 005.5 13H9v2.586l-1.293-1.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 15.586V13h2.5a4.5 4.5 0 10-.616-8.958 4.002 4.002 0 10-7.753 1.977A3.5 3.5 0 002 9.5zm9 3.5H9V8a1 1 0 012 0v5z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
    Downloads
  &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all for now! I hope you liked this tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flowbite-tailwind-component-library"&gt;
  &lt;/a&gt;
  Flowbite - Tailwind component library
&lt;/h2&gt;

&lt;p&gt;This &lt;a href="https://flowbite.com/docs/components/button-group/"&gt;Tailwind CSS button group&lt;/a&gt; component is part of a larger open-source component library called Flowbite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--49Z09V2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7e74xtygspba1qcp5ayi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--49Z09V2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7e74xtygspba1qcp5ayi.png" alt="Flowbite - Tailwind CSS components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can view more components and examples by checking out &lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;Flowbite's Tailwind components documentation&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>opensource</category>
      <category>tutorial</category>
      <category>css</category>
    </item>
    <item>
      <title>6 Things I Learned Writing My First App</title>
      <author>Callum Connolly</author>
      <pubDate>Sun, 03 Oct 2021 10:24:16 +0000</pubDate>
      <link>https://dev.to/11cconnolly/6-things-i-learned-writing-my-first-app-2alb</link>
      <guid>https://dev.to/11cconnolly/6-things-i-learned-writing-my-first-app-2alb</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-i-learned-spending-6-months-making-my-first-app-i-can-now-make-in-6-hours"&gt;
  &lt;/a&gt;
  What I learned spending 6 months making my first app I can now make in 6 hours.
&lt;/h1&gt;

&lt;p&gt;I've finished my first mobile application which took me 6 months to write. I've started many projects that took maybe a few weeks but this was the first side project I did which persevered over the course of months, in an area I previously knew nothing about.&lt;/p&gt;

&lt;p&gt;A bit about my situation; For my shiny new graduate job I was put onto a Front-end Engineering position and had to self-learn JS, HTML, CSS, React etc. as well as how to navigate working professionally for the first time. Before this, I had no knowledge of Front-end Engineering whatsoever. How people got boxes of all shapes and sizes to appear on a screen was beyond me. Moving any of those boxes was part of the mystic arts. This mobile app was a way of consolidating all that knowledge as I learned, as well as trying to find a way to help people. Here are 6 of the most important things I learned along the way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-hardest-part-is-letting-go-is-figuring-out-what-to-do-exactly"&gt;
  &lt;/a&gt;
  The hardest part &lt;del&gt;is letting go&lt;/del&gt; is figuring out what to do exactly
&lt;/h2&gt;

&lt;p&gt;A lot of time when creating the application was spent figuring out what exactly I need to actually develop. This included item such as: a broad roadmap of where I wanted it to go, wireframes and mockups, and more specific requirements written down at each stage as I went along. The time spent figuring out what those exact requirements were, paid dividends later. The fuzzier the requirements were, generally the more issues and roadblocks they caused later. It can be difficult to figure out which steps will require more time over others but that intuition will come with practice and being able to recognize similar situations you've dealt with before.&lt;/p&gt;

&lt;p&gt;Personally, and I would recommend this to most people, is to write down, draw, make a note of whatever you must do and the steps to get you there. It makes forgetting important steps more difficult and gives your brain a way to process and work through things more easily with a more defined structure. Furthermore, if you're like me you have only a fairly limited experience of agile processes, using certain tools can limit the effectiveness of the process. Don't take my word for it though, &lt;a href="https://changelog.com/podcast/367"&gt;take Uncle Bob's word&lt;/a&gt;. For this reason, the intensely manual approach of post-its on a wall was used to keep track of work items, which worked for my dissertation project and this project likewise. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#worse-is-better-until-it-isnt"&gt;
  &lt;/a&gt;
  Worse is better, until it isn't
&lt;/h2&gt;

&lt;p&gt;This is a play on &lt;a href="https://en.wikipedia.org/wiki/Worse_is_better"&gt;the common mantra in software acceptance&lt;/a&gt;. If your goal was, like me, just to make &lt;em&gt;something&lt;/em&gt; then the mantra of worse is better you should stick to. Just get something out; Learn enough so you kind of know what to do then go with it. Even if it's a little messy, you can find a brute force solution first which will help you understand the problem more clearly. Then you can find the eloquent solution afterwards.&lt;/p&gt;

&lt;p&gt;However, if your goal is to make something that won't be &lt;em&gt;a royal pain in the arse to maintain&lt;/em&gt;, or something you want to potentially put to market, then the time spent understanding the right processes and procedures will make your life factorially easier. This means researching file structure, testing (&lt;a href="https://www.kaizenko.com/what-is-the-testing-pyramid/"&gt;at as many levels as you can&lt;/a&gt;), version control, CI, deployment and figuring how to get them to all integrate together into a proper workflow will pay exponential dividends later, especially if you have others join onto the project.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#understand-the-fundamentals-even-if-that-takes-time"&gt;
  &lt;/a&gt;
  Understand the fundamentals, even if that takes time
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"What I cannot create, I do not understand" - Richard Feynman&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Understanding the fundamentals and building up mental models, as well as the context of where things sit in the development process are key tools to not solidifying knowledge that you learn. To learn React, I first had to &lt;a href="https://justjavascript.com/"&gt;learn JavaScript&lt;/a&gt;, HTML, CSS, which meant understanding web frameworks. Break things down into their most atomic parts, so you can build the knowledge up again on a strong foundation. One really good idea from &lt;a href="https://www.linkedin.com/pulse/how-kickass-new-software-engineer-raymond-gan/"&gt;a post by Raymond Gan's&lt;/a&gt; is to &lt;em&gt;create whatever you're learning&lt;/em&gt;. If you're learning React, code your own mini-React. Learning Java? Write your own Java-jr. This gives you a much better appreciation and understanding of what you're learning. &lt;a href="https://www.coursera.org/learn/learning-how-to-learn"&gt;Learning how to learn&lt;/a&gt;, and pairing the above steps with practice, and you're in a better position than the vast majority of others and it &lt;em&gt;will&lt;/em&gt; make you a better and much more productive engineer.&lt;/p&gt;

&lt;p&gt;Equally important as well is continuing the process of learning, even if you know how to do something. There's a hundred different ways to scare a cat, cook an egg, or write a sorting algorithm. There is always room for improvement, especially in software which constantly changes and shifts, maybe less so when it comes to cooking an egg though. So it's important to keep up to date with the latest trends, releases etc. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#have-a-couple-different-avenues-to-pursue"&gt;
  &lt;/a&gt;
  Have a couple different avenues to pursue
&lt;/h2&gt;

&lt;p&gt;When I did some across some impediment to development, mainly due to lack of knowledge, sometimes due to not being in the right zone, I felt like bashing my head against a wall; A feeling I'm sure that's common to anyone who has ventured further than printing "Hello World". It is not a sustainable feeling to have, especially in personal projects where your only motivation is yourself. This is one of the many reasons why, even in small, personal projects, using &lt;a href="https://learngitbranching.js.org/"&gt;branches for your VCS&lt;/a&gt; is important. Having the ability to switch between problems was something I learned later in the process, but which made things a lot easier. &lt;/p&gt;

&lt;p&gt;Oftentimes coming back to a problem after having spent time elsewhere, on another part or just having a break, will give clarity on the issue and you'll be in a better place to figure things out.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#roles-in-software-engineering-are-there-for-a-reason"&gt;
  &lt;/a&gt;
  Roles in Software Engineering are there for a reason
&lt;/h2&gt;

&lt;p&gt;Tester, team lead, project manager, developer, UI/UX, intern who fetches coffee are all key roles in the software engineering process. Having the independence to decide exactly where a project goes in it's entirety is intensely liberating. Wearing all the hats yourself, however, can very tiring. This requires a lot of context switching and is where we start to see how each of the roles, with their own specific target, work together. The team lead who is able to tell a developer what to do next and keep them deeply focused on the next feature. Testers who has no ego associated with a piece of code are able to test that code to oblivion and uncovers bugs we would not be able to. As someone new to a team, it's an enlightening experience to be able to understand up close that multiple people, when working together cohesively, really make a project succeed more than a single person could, and create something greater than the sum of its parts.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#keep-going"&gt;
  &lt;/a&gt;
  Keep going
&lt;/h2&gt;

&lt;p&gt;Standard motivational advice, I know. The satisfaction from finally making a project is something that is going to stay with you. It's important to know that your first draft won't be your last, and it shouldn't either. It's also important to know that it is okay to take a break when you feel like you're hitting a wall; Some walls are there for you to rest against for a time, some are there to break through. Oftentimes, it's when you break through these walls that you'll do your best work.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#whats-the-app"&gt;
  &lt;/a&gt;
  What's the App?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M8dMQvLV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ph0k7cty309h6xnyzbor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M8dMQvLV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ph0k7cty309h6xnyzbor.png" alt="App feature graphic"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://play.google.com/store/apps/details?id=com.callumc11.chainsmobileapp"&gt;You can find the app here&lt;/a&gt;, it's a super simple tool for tracking habits and, I hope, will be able to help people make some changes in their lives. I am working on a new app, similar to this one, with more features as well as a proper workflow and taking into account all the lessons learned. If you could try it out and give some feedback that would be great.&lt;/p&gt;

</description>
      <category>react</category>
      <category>programming</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>API Integration and Agile Business simulation game in Task force</title>
      <author>Ntwari Egide</author>
      <pubDate>Sun, 03 Oct 2021 09:49:22 +0000</pubDate>
      <link>https://dev.to/ntwariegide/api-integration-and-agile-business-simulation-game-in-task-force-567g</link>
      <guid>https://dev.to/ntwariegide/api-integration-and-agile-business-simulation-game-in-task-force-567g</guid>
      <description>&lt;p&gt;Today, we are closing week 5 in the task force, this week was very different to all other 4 weeks we've covered.&lt;/p&gt;

&lt;p&gt;This week started with improving the ShowApp project. We wanted to add functionality of cropping image upload which was tough but educational. In the afternoon APIs for the LOT dashboard were ready, so we started integrating APIs.&lt;/p&gt;

&lt;p&gt;It was tough because APIs were not working well, so it took us time to know how we could integrate. It was also educational because of learning new things like Google Auths with Firebase.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x4FWcQrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/swiftsenpai.com/wp-content/uploads/2020/06/Google-Sign-In-Firebase-Feature-Image.jpeg%3Fw%3D1065%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x4FWcQrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/swiftsenpai.com/wp-content/uploads/2020/06/Google-Sign-In-Firebase-Feature-Image.jpeg%3Fw%3D1065%26ssl%3D1" alt="google auth"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In soft skills, this week we did &lt;strong&gt;Agile simulation game&lt;/strong&gt; which was fun bug educative.&lt;br&gt;
I wanted to try new things because I used to be a scrum master, so I wanted to try being a Software Consultant from RISA. &lt;br&gt;
Being a software consultant was very difficult because It was tough to convince the Team to make sure that they followed the rules from RISA.&lt;br&gt;
I learned to talk to teams, making them understand what I want, making sure that they have the best DONE deliverable at the end of the sprint.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pPwrV49K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.easytechjunkie.com/group-of-well-dressed-people-at-a-desk-looking-at-a-tablet.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pPwrV49K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.easytechjunkie.com/group-of-well-dressed-people-at-a-desk-looking-at-a-tablet.jpg" alt="software consultant"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also enjoyed working with the best team: scrum master, scrum team. I also noticed how it is not easy to be scrum master because in the sprint retrospective you have to be ready for questions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--No3QaarQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.squarespace-cdn.com/content/v1/53252e4ce4b026a30a70a340/1542331531936-AY0OKYCOU9FIOXV3PIB7/IMG_4194.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--No3QaarQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.squarespace-cdn.com/content/v1/53252e4ce4b026a30a70a340/1542331531936-AY0OKYCOU9FIOXV3PIB7/IMG_4194.PNG" alt="scrum master meme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This week, we also implemented a game in the codewars session. It was important because It made me understand how important it is to understand every detail of a problem to solve.&lt;/p&gt;

&lt;p&gt;On Friday we had a brainstorming session, our team also discussed Problem breakdown and we came up with the solution to help in the process of vaccination for children in Rwanda. &lt;/p&gt;

&lt;p&gt;In conclusion, this week was tough but educational because we tried new things. &lt;br&gt;
See you next week :)&lt;/p&gt;

</description>
      <category>codeofafrica</category>
      <category>awesomitylab</category>
      <category>agile</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>5 HTML tags that make the text italic</title>
      <author>Beginner Developer</author>
      <pubDate>Sun, 03 Oct 2021 08:52:21 +0000</pubDate>
      <link>https://dev.to/beginnerdeveloper/5-html-tags-that-make-the-text-italic-5a0i</link>
      <guid>https://dev.to/beginnerdeveloper/5-html-tags-that-make-the-text-italic-5a0i</guid>
      <description>&lt;p&gt;As I was reading the documentation of HTML, I saw the var tag. Initially, I thought it was related to variables. However, I had seen that it was making the text Italic. So I asked myself, how many HTML tags make text Italic.&lt;/p&gt;

&lt;p&gt;I began researching how many HTML tags make the text italic and found 5 tags that do so.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-raw-ltigt-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag
&lt;/h1&gt;

&lt;p&gt;It is a common and well-known tag.&lt;br&gt;
Display style- Inline&lt;br&gt;
&lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; elements are used to differentiate words from the surrounding text by styling italicized text without adding any emphasis to italicized text.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-raw-ltemgt-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; tag
&lt;/h1&gt;

&lt;p&gt;Display Style - Inline.&lt;br&gt;
The &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; element is used to indicate text that should receive more emphasis than the surrounding text.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-raw-ltcitegt-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt; tag
&lt;/h1&gt;

&lt;p&gt;Display style - Inline&lt;br&gt;
Use the cite element to identify the source of a quotation or creative work, rather than the author or creator.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-raw-ltdfngt-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;dfn&amp;gt;&lt;/code&gt; tag
&lt;/h1&gt;

&lt;p&gt;Display style- Inline&lt;br&gt;
When a term is enclosed in a &lt;code&gt;&amp;lt;dfn&amp;gt;&lt;/code&gt; tag, browsers and web crawlers will understand that nearby text contains a definition of the term.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-raw-ltvargt-endraw-tag"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;var&amp;gt;&lt;/code&gt; tag
&lt;/h1&gt;

&lt;p&gt;Display style - Inline&lt;br&gt;
Most browsers display text marked with  tags in italics. This element indicates a variable in a mathematical equation or computer program.&lt;/p&gt;

&lt;p&gt;My Blog:- &lt;a href="https://beginners-developer.blogspot.com"&gt;Beginner Developer Blog&lt;/a&gt;&lt;br&gt;
Website:- &lt;a href="https://ejaazrkhan.github.io/portfolio"&gt;https://ejaazrkhan.github.io/portfolio&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to import large csv file in Django-admin.</title>
      <author>RJ-1998</author>
      <pubDate>Sun, 03 Oct 2021 08:47:40 +0000</pubDate>
      <link>https://dev.to/u_cancall_me_rj/how-to-import-large-csv-file-in-django-admin-3fgj</link>
      <guid>https://dev.to/u_cancall_me_rj/how-to-import-large-csv-file-in-django-admin-3fgj</guid>
      <description>&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#you-can-also-read-the-whole-article-on-my-blog"&gt;
  &lt;/a&gt;
  You can also read the whole article on &lt;a href="https://rishabh-tech-blog.vercel.app/blog/how-to-import-large-csv-file-in-django-admin"&gt;my blog&lt;/a&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;In this tutorial, we will look at an alternative approach to import csv files in django-admin. This tutorial is intended for intermediate to advanced level developers. All the code related to the tutorial is available in the &lt;a href="https://github.com/RJ-1998/django-import-large-csv-tutorial"&gt;github repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;If you have worked on django, then there's a high probability that you have already used the popular &lt;code&gt;django-import-export&lt;/code&gt; library which works smoothly in django-admin and gives developers lots of freedom to import/export all sorts of files. (If you haven't seen it do check it out &lt;a href="https://django-import-export.readthedocs.io/en/latest/"&gt;here&lt;/a&gt; because we'll be using it 😉).&lt;/p&gt;

&lt;p&gt;Although it's good for importing model-specific files as it gives the specific headers for that particular model. But what if you want to import data that leads to different tables in your database and you want to perform some custom logic and data validation. Also, suppose you want to import very large files (say 20k rows), it will be computation heavy and will run a lot of queries. I came across the same requirement while I was working on a project and using default django-import-export is not the way to do it. We have to CUSTOMIZE it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-the-project"&gt;
  &lt;/a&gt;
  Setup the project
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Setup a virtual environment&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install Django and create a new project&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install django-import-export&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install django-import-export
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;django-import-export&lt;/code&gt; to your INSTALLED_APPS
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSTALLED_APPS = [
    ...
    'import_export',
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Define your models. I've used &lt;a href="https://swapi.dev/"&gt;StarWars API&lt;/a&gt; so accordingly, I've created the following model
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#models.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="c1"&gt;# Create your models here.
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Characters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FloatField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FloatField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hair_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;skin_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;eye_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;birth_year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Characters"&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Apply &lt;code&gt;ImportExportModelAdmin&lt;/code&gt; in your admin
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#admin.py
# your imports
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;import_export.admin&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ImportExportModelAdmin&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Characters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CharactersAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ImportExportModelAdmin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# your admin logic for the model
&lt;/span&gt;    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have done the setup correctly then you should be able to see the &lt;strong&gt;import/export&lt;/strong&gt; buttons in the django admin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-template"&gt;
  &lt;/a&gt;
  Create a template
&lt;/h2&gt;

&lt;p&gt;In this step, we'll be overriding the default &lt;code&gt;import&lt;/code&gt; view of django and provide our custom template. This template will be essential in sending and receiving requests to and from the Django-admin. For this, we have to first override the default import method of &lt;code&gt;ImportExportModelAdmin&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#admin.py
# your imports
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;

&lt;span class="c1"&gt;# create a form field which can input a file
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CsvImportForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;csv_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Characters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CharactersAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ImportExportModelAdmin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;list_display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"birth_year"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"gender"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;import_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CsvImportForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"form_title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Upload StarWars characters csv file."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"The file should have following headers: "&lt;/span&gt;
                                    &lt;span class="s"&gt;"[NAME,HEIGHT,MASS,HAIR COLOR,EYE COLOR,SKIN COLOR,BIRTH YEAR,GENDER]."&lt;/span&gt;
                                    &lt;span class="s"&gt;" The Following rows should contain information for the same."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="s"&gt;"endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"/admin/starwars/characters/import/"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"admin/import_starwars_characters.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create a new html template called &lt;code&gt;import_starwars_characters.html&lt;/code&gt;&lt;br&gt;
inside the &lt;code&gt;templates/admin&lt;/code&gt; folder in your app. You can find the template &lt;a href="https://github.com/RJ-1998/django-import-large-csv-tutorial/blob/master/starwars/templates/admin/import_starwars_characters.html"&gt;here&lt;/a&gt; in my git repo.&lt;/p&gt;

&lt;p&gt;Once you're done then you'll be able to see your custom template when you click the import button.&lt;/p&gt;


  
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kZEdYy14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dnd2qugjk/image/upload/v1632679694/cover_photos/import_characters_template_wpaoo2.png" alt="Custom template to import csv files"&gt;
  

&lt;h2&gt;
  &lt;a href="#add-jquery-and-ajax"&gt;
  &lt;/a&gt;
  Add Jquery and AJAX
&lt;/h2&gt;

&lt;p&gt;This is the main step of this recipe. Here we will be doing the paginated AJAX calls to our python logic inside django itself!&lt;/p&gt;

&lt;p&gt;Let's do it step by step.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step1-create-a-promise-to-read-the-csv"&gt;
  &lt;/a&gt;
  Step1:- Create a promise to read the csv
&lt;/h4&gt;

&lt;p&gt;Yes, you heard it right! We will utilize Javascript's Promises to read the csv file contents. Here is the code with some useful comments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//import_starwars_characters.html&lt;/span&gt;

&lt;span class="c1"&gt;// this is the secure way to get some hidden data into javascript from python&lt;/span&gt;
&lt;span class="c1"&gt;// to learn about it more find the resources at the end&lt;/span&gt;
&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="na"&gt;json_script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;endpoint&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c1"&gt;// all the javascript goes here .....&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//import_starwars_characters.html&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// to store csv file headers&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;allData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// to store all the rows except headers&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;totalentries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// get the endpoint we want our AJAX call to hit&lt;/span&gt;
&lt;span class="c1"&gt;// reading it from json_script&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#endpoint&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// &amp;lt;!--  pagination variables--&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// it will store limit-offset objects&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pageObjs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;// &amp;lt;!--  promise to read csv so that submit button gets enabled--&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;lt;!--  only after file has been read--&amp;gt;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;readCSVPromise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// store headers and rows&lt;/span&gt;
    &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;allData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A brief explanation of the above code is that we resolve our promise if we have the data with length &amp;gt; 0 otherwise we reject the promise.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step2-add-event-listener-to-read-the-input-file"&gt;
  &lt;/a&gt;
  Step2:- Add event listener to read the input file
&lt;/h4&gt;

&lt;p&gt;Let's add an event listener to our file input button that will run when we upload the file through it. We will then run our promise and wait till it gets finished. Once it's done, we then start paginating the data using &lt;strong&gt;limit-offset&lt;/strong&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//import_starwars_characters.html&lt;/span&gt;

&lt;span class="c1"&gt;//&amp;lt;!--  read csv file and perform pagination of rows--&amp;gt;&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#csvfile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// regex to validate file name and extension&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;([^\s]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z0-9&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;_&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sr"&gt;.&lt;/span&gt;&lt;span class="se"&gt;\-&lt;/span&gt;&lt;span class="sr"&gt;:()&lt;/span&gt;&lt;span class="se"&gt;\[\]])&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.csv&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#csvfile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// initialize javascript's FileReader&lt;/span&gt;
    &lt;span class="c1"&gt;// Read more here https://developer.mozilla.org/en-US/docs/Web/API/FileReader&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FileReader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="c1"&gt;// start storing all the data&lt;/span&gt;
      &lt;span class="nx"&gt;readCSVPromise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// when done start paginating the data&lt;/span&gt;
          &lt;span class="nx"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pageNo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;pageNo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;pageNo&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pageNo&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pageNo&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;allData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;pageObjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="c1"&gt;// enable submit button&lt;/span&gt;
          &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;disabled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;disabled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readAsText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Please select a csv file!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step3-send-ajax-requests-to-django"&gt;
  &lt;/a&gt;
  Step3:- Send AJAX requests to Django
&lt;/h4&gt;

&lt;p&gt;Now that we have read the csv file and its contents, we are good to call the AJAX requests to Django. Since we want to do the paginated requests, there can be &lt;strong&gt;n&lt;/strong&gt; number of calls, so we will call them sequentially. Here's how we do it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//import_starwars_characters.html&lt;/span&gt;

&lt;span class="c1"&gt;//&amp;lt;!--  Perform multiple sequential AJAX Calls on submit click event  --&amp;gt;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;looper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Deferred&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// $.when.apply is the way to call multiple AJAX calls&lt;/span&gt;
  &lt;span class="c1"&gt;// apply functions accepts two arguments =&amp;gt; (this,array of requests)&lt;/span&gt;
  &lt;span class="c1"&gt;// for array of requests we are using map function to loop over pageObjs&lt;/span&gt;
  &lt;span class="c1"&gt;// that returns AJAX request&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;when&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageObjs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageObj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;looper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;looper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;callImportRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageObj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;looper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// once all requests are finished then enable download report button&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Upload Finished!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#downloadReport&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now to call the actual AJAX request we will do like the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//import_starwars_characters.html&lt;/span&gt;

&lt;span class="c1"&gt;//&amp;lt;!--  Paginated AJAX call to initiate file upload  --&amp;gt;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callImportRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageObj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;deferred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Deferred&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pageObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pageObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// contains paginated data&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dataType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;csv_headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;page_no&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;csrfmiddlewaretoken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input[name=csrfmiddlewaretoken]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;beforeSend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#spinner&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// here we will update our DOM to show the object status&lt;/span&gt;
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#file_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;totalentries&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#entries&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;totalentries&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;table&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`&amp;lt;tr class="parent" onclick="handlecollapse($(this))"&amp;gt;&amp;lt;td class="checkpoint"&amp;gt;Entries: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; to &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;`&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;table&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="s2"&gt;`&amp;lt;tr class="child"&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;`&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="nx"&gt;deferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#spinner&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;deferred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#custom-import-logic"&gt;
  &lt;/a&gt;
  Custom import logic
&lt;/h2&gt;

&lt;p&gt;We have made it this far! Now the last step is to Custom import logic to create the objects in our database. Here we write our custom logic of import and try to save some queries using &lt;code&gt;bulk_create&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#admin.py
&lt;/span&gt;
&lt;span class="c1"&gt;# your imports
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;starwars.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ImportUtils&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;starwars&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;import_export.admin&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ImportExportModelAdmin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;import_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;import_object_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;create_new_characters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# clear the list for every new request
&lt;/span&gt;        &lt;span class="n"&gt;create_new_characters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="c1"&gt;# capture payload from request
&lt;/span&gt;        &lt;span class="n"&gt;csv_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"file_name"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"rows"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;column_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"csv_headers"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# helper class for validation and other stuff
&lt;/span&gt;        &lt;span class="c1"&gt;# look into git repo
&lt;/span&gt;        &lt;span class="n"&gt;util_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImportUtils&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;util_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"NAME"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
            &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;util_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;util_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"HEIGHT"&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
            &lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;util_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;util_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MASS"&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
            &lt;span class="n"&gt;hair_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;util_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"HAIR COLOR"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
            &lt;span class="n"&gt;eye_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;util_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"EYE COLOR"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
            &lt;span class="n"&gt;skin_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;util_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SKIN COLOR"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
            &lt;span class="n"&gt;birth_year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;util_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"BIRTH YEAR"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
            &lt;span class="n"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;util_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GENDER"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
            &lt;span class="n"&gt;create_new_characters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Characters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hair_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hair_color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eye_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;eye_color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;skin_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;skin_color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;birth_year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;birth_year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;import_object_status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"character"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"FINISHED"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                        &lt;span class="s"&gt;"msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Character created successfully!"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="c1"&gt;# bulk create objects
&lt;/span&gt;        &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Characters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bulk_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_new_characters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# return the response to the AJAX call
&lt;/span&gt;        &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"file"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"entries"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;import_object_status&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s"&gt;"results"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;import_object_status&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# below code just displays the template once in the django-admin
&lt;/span&gt;    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CsvImportForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"form_title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Upload users csv file."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"The file should have following headers: "&lt;/span&gt;
                &lt;span class="s"&gt;"[NAME,HEIGHT,MASS,HAIR COLOR,EYE COLOR,SKIN COLOR,BIRTH YEAR,GENDER]."&lt;/span&gt;
                &lt;span class="s"&gt;" The Following rows should contain information for the same."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"endpoint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"/admin/starwars/characters/import/"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"admin/import_user_from_csv.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In brief, the above code just listens to every AJAX request and captures the payload. Then with that payload, it creates new entries in the &lt;code&gt;Characters&lt;/code&gt; model and returns the response back to the call.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#points-to-remember"&gt;
  &lt;/a&gt;
  Points to remember
&lt;/h2&gt;

&lt;p&gt;Although the above implementation works pretty well and can handle large csv files, there are some points to remember while considering this approach.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Clicking &lt;code&gt;Cancel&lt;/code&gt; does not cancel the whole operation. This means that if you close the browser window or close the tab or click on cancel, then the operations which have already run can not be reverted.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It does not provide you a preview of your data. This is implemented in &lt;code&gt;django-import-export&lt;/code&gt; pretty well, but sadly not here. I will try to include this feature also in the next iteration.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You have to do your own data validation either before uploading the file or inside your import logic in Python.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Django-import-export&lt;/strong&gt; is great and works pretty well for most cases, but when it comes to adding customize business logic then you have to look for some other alternatives. In this article, I tried to convince you that it is possible to customize the default &lt;code&gt;django-import-export&lt;/code&gt; features and you can import large &lt;strong&gt;csv&lt;/strong&gt; files. I hope this article has given you some new information and approach to customizing django-admin. I hope you have learned something new from here and if so then please appreciate the efforts by liking the post and share it with your peers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Official Django docs explaining about &lt;a href="https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#json-script"&gt;json_script&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Here is an article for &lt;a href="https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/"&gt;further reading on json_script&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A great article that explains how to use &lt;a href="http://michaelsoriano.com/working-with-jquerys-ajax-promises-and-deferred-objects/"&gt;deffered objects&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>import</category>
      <category>tutorial</category>
      <category>django</category>
    </item>
    <item>
      <title>Controlling mobile Phone using Python</title>
      <author>Yash Makan</author>
      <pubDate>Sun, 03 Oct 2021 08:23:04 +0000</pubDate>
      <link>https://dev.to/yash_makan/controlling-mobile-phone-using-python-192o</link>
      <guid>https://dev.to/yash_makan/controlling-mobile-phone-using-python-192o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#story"&gt;
  &lt;/a&gt;
  Story
&lt;/h2&gt;

&lt;p&gt;Hi, I am Yash Makan, a 17-year-old self-taught programmer. I was thinking a couple of days ago about sending messages from whatsapp using python. Like you guys, I started lurking the internet to find some solutions and found about &lt;a href="https://www.twilio.com/whatsapp"&gt;twilio&lt;/a&gt;. In the beginning, it seems a good solution but it is not free and I have to buy a twilio phone number. Also, I was not able to find any whatsapp API available on the internet. So I drop the idea of using twilio and any other whatsapp API. After thinking a lot, I got tired and opened android studio to start working on one of my apps. I connected my phone and then started the process. When the app was building a thought came to my mind to automate the whatsapp messaging using the phone itself. I searched a little about the same and found something which has great potential to solve my problem. I found a command-line tool known as &lt;code&gt;adb&lt;/code&gt; which helps one to control phone without touching the phone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-you-should-have"&gt;
  &lt;/a&gt;
  Things you should have
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic understanding of Python&lt;/li&gt;
&lt;li&gt;Some Free time to read this blog&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;First, go to this &lt;a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip"&gt;link&lt;/a&gt; and download adb in your system.&lt;/li&gt;
&lt;li&gt;Extract the folder and put adb in the environment variables. Below is a complete process to add adb in environment variable,
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJ5Tb43z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/matjf4dier920xhdl3xv.png" alt="Complete process of adding environment variables"&gt;
&lt;/li&gt;
&lt;li&gt;Enable usb debugging in your mobile phone and connect your mobile with pc using usb cable.&lt;/li&gt;
&lt;li&gt;Check if the connection is proper by opening cmd and type, &lt;code&gt;adb devices&lt;/code&gt;. You will see a device in List of devices attached.&lt;/li&gt;
&lt;li&gt;If you can see your device then you can open any code editor. I am using visual studio code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-begin"&gt;
  &lt;/a&gt;
  Let's Begin
&lt;/h2&gt;

&lt;p&gt;Let's first import some dependencies that we'll require. You can install them using &lt;code&gt;pip&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import cv2
import subprocess
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will be needing subprocess to call adb via command-line and get the output and we need cv2 to do some image processing so that python will able to click on the screen or any other task. &lt;br&gt;
Now let's create a basic function named adb below,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def adb(command):
    proc = subprocess.Popen(command.split(' '), stdout=subprocess.PIPE, shell=True)
    (out, _) = proc.communicate()
    return out.decode('utf-8')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What basically the above function is doing to call adb via subprocess and retrieve the output that we will be needing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tap"&gt;
  &lt;/a&gt;
  Tap
&lt;/h3&gt;

&lt;p&gt;Now let's write code where python will click the screen of the mobile device. So we will create a function named tap which will click on a specific location on the screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def tap(tap_x, tap_y):
    adb("adb shell input tap {} {}".format(tap_x, tap_y))
tap(100,100)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will click 100 px from x and 100 px from y. Now you must be thinking that it is very difficult to hard-code the coordinates for each command and it will not work when the device is changed that is why in the next sections of this blog we are going to use image processing to detect the coordinates automatically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#taking-screenshot"&gt;
  &lt;/a&gt;
  Taking screenshot
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def take_screenshot(final):
    adb(f"adb exec-out screencap -p &amp;gt; ./images/{final}.png")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code is simple. We have made a function that save the screenshot of the mobile inside images directory. In the function, we can pass the name of the image file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advanced-tap"&gt;
  &lt;/a&gt;
  Advanced Tap
&lt;/h3&gt;

&lt;p&gt;Now instead of passing coordinates, we will be using a target image to detect coordinates automatically. To understand this much better let's take an example, I have this screen&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tk9AUM8R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ri161mxpbgqhbnav3v3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tk9AUM8R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ri161mxpbgqhbnav3v3.png" alt="Screenshot of mobile screen"&gt;&lt;/a&gt;&lt;br&gt;
and I want to open the among us app then will use a process known as &lt;code&gt;TemplateMatching&lt;/code&gt;. With this process we will take screenshot of the screen &amp;gt; calculate the coordinates of among us icon using template matching &amp;gt; click there&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Here small_image is among us icon and big_image is the complete screenshot containing the among us icon
def image_position(small_image, big_image):
    img_rgb = cv2.imread(big_image)
    img_gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)
    template = cv2.imread(small_image, 0)
    height, width = template.shape[::]
    res = cv2.matchTemplate(img_gray, template, cv2.TM_SQDIFF)
    _, _, top_left, _ = cv2.minMaxLoc(res)
    bottom_right = (top_left[0] + width, top_left[1] + height)
    return (top_left[0]+bottom_right[0])//2, (top_left[1]+bottom_right[1])//2

screen="screen"
take_screenshot(screen)
x, y  = image_position("images/among_us_icon.png", f"images/{screen}")
click(x,y)
# WOWWW Python successfully opened among us app.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the above code even if you change the location of among us game on your mobile screen, python will still be able to open the game.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-more-can-we-do"&gt;
  &lt;/a&gt;
  What more can we do?
&lt;/h2&gt;

&lt;p&gt;There are many more things you can do with adb and python. Let's talk about some of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#swipe"&gt;
  &lt;/a&gt;
  Swipe
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def swipe(start_x, start_y, end_x, end_y, duration_ms):
    adb("adb shell input swipe {} {} {} {} {}".format(start_x, start_y, end_x, end_y, duration_ms))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#call-someone"&gt;
  &lt;/a&gt;
  Call someone
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def call(number):
    adb(f"adb shell am start -a android.intent.action.CALL -d tel:{number}")
call('+91xxxxxxxxxx') # +[CODE][NUMBER]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#download-file-from-mobile-to-pc"&gt;
  &lt;/a&gt;
  Download file from Mobile to PC
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def download(path, output_path):
    adb(f"adb pull {path} {output_path}")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#remove-file-from-mobile"&gt;
  &lt;/a&gt;
  Remove file from Mobile
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def remove(path):
    adb(f"adb shell rm {path}") #/sdcard/...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#screen-recording-of-mobile"&gt;
  &lt;/a&gt;
  Screen Recording of Mobile
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# name is the video_file name and time is the seconds you want to record
def screen_record(name, time):
    adb(f"adb shell screenrecord /sdcard/{name} --time-limit {time}")
    download(f"/sdcard/{name}",f"./mobile/{name}")
    remove(f"/sdcard/{name}")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#switch-on-mobile-phone"&gt;
  &lt;/a&gt;
  Switch on Mobile Phone
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def switch_phone_on_off():
    adb("adb shell input keyevent 26")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are many more keyevent like 26. If you want to know then visit &lt;a href="https://stackoverflow.com/a/8483797/10566556"&gt;this&lt;/a&gt; link.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opening-urls"&gt;
  &lt;/a&gt;
  Opening urls
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def open_url(url):
    adb(f'adb shell am start -a android.intent.action.VIEW -d {url}')
open_url("https://www.google.co.in/")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sending-whatsapp-message"&gt;
  &lt;/a&gt;
  Sending Whatsapp Message
&lt;/h3&gt;

&lt;p&gt;Alright, So I think this is very cool. After getting all of this basic understanding we have arrived at my main issue that was to send whatsapp message without QR code, without PAID methods like twilio. It's a little tricky but It worked on my phone. I hope it works on your's as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def send_whatsapp_message(phone, message):
    adb(f'adb shell am start -a android.intent.action.VIEW -d "https://api.whatsapp.com/send?phone={phone}"') # Opening whatsapp url
    adb('ping 127.0.0.1 -n 2 &amp;gt; nul') # delay
    adb(f'adb shell input text "{message}"')  # entering message
    adb('adb shell keyevent 22') # Right arrow
    adb('adb shell keyevent 22') # Right arrow
    adb('adb shell input keyevent 22') # Right arrow 
    adb('adb shell input keyevent 22') # Right arrow
    adb('adb shell input keyevent 66') # Enter Key

send_whatsapp_message('+91xxxxxxxxxx', 'blah blah blah')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Message Sent!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So that was it for today. I hope you like the content I've posted in the blog post and it adds some value to your day. This is my first blog post and I was quite nervous before about my grammar, spelling, syntax errors and all that stuff. But I love when developers help each other in developing stuff. So it's my time to help others and spread what I know. With that being said I would like to end this blog here and wish to see you again.&lt;/p&gt;

&lt;p&gt;🥳 Happy Coding!&lt;/p&gt;

</description>
      <category>python</category>
      <category>android</category>
      <category>automation</category>
      <category>adb</category>
    </item>
    <item>
      <title>Google Core Web Vitals Explained</title>
      <author>Pranav</author>
      <pubDate>Sun, 03 Oct 2021 08:16:43 +0000</pubDate>
      <link>https://dev.to/codedamn/google-core-web-vitals-explained-2ojk</link>
      <guid>https://dev.to/codedamn/google-core-web-vitals-explained-2ojk</guid>
      <description>&lt;p&gt;If you are a web developer, you should understand the concept of core web vitals very well because there are parameters that help make your website more performant and faster and all the best practices to optimize your website perfectly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google-web-vitals"&gt;
  &lt;/a&gt;
  Google Web Vitals
&lt;/h2&gt;

&lt;p&gt;There are many web vitals defined by google, and they have handpicked some of them and gave them the name core, and hence they are called &lt;strong&gt;core web vitals&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bh6rTnue--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hz3kwozbouuav6ha5876.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bh6rTnue--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hz3kwozbouuav6ha5876.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The three core web vitals are Cumulative Layout Shift, Largest Contentful Paint, and First Input Delay. These are mostly the guidelines that google follows to evaluate your website as software. And if the tests are passed then, that's a thumbs up from google.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-cumulative-layout-shift"&gt;
  &lt;/a&gt;
  1) Cumulative Layout Shift
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZmTajUl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8520urlmsshds0qb8gm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZmTajUl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8520urlmsshds0qb8gm.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Cumulative Layout Shift is the metric to measure the unexpected layout shifts within the viewport that occur during a page's entire lifecycle. This metric states the visual stability of the webpage as it also determines the User Experience for the most part. It's essential to understand the metrics unit, the unit of CLS is not in seconds because it's not measured in time. It measures the change in the viewport size or the shift of elements on the page. The lower the value, the better the score for this web vital.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-largest-contentful-paint"&gt;
  &lt;/a&gt;
  2) Largest Contentful Paint
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cRdOXGCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkrjl93kgtp5vov9dtq8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cRdOXGCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkrjl93kgtp5vov9dtq8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This metric delivers the time. It says how fast the largest part of your page gets loaded. Let's say you have a small web page with a heading, paragraph, and an image that takes most of the web page. As the web page's largest part is the image, Google tracks the load of the image to determine the Largest Contentful Paint of the website. You can see in the below image what is the largest part of the web page in each loading phase.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VuUj1Ro4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/020ed9t9gzzy1b1mf7hr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VuUj1Ro4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/020ed9t9gzzy1b1mf7hr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Its best in the LCP is in the range from 0 - 2.5 seconds. Also, Largest Contentful Paint and Cumulative Layout shift are somewhat interconnected. If you add the image to the web page dynamically, which takes a lot more time to load than the static pages, it affects both the values. After all, there is a cumulative shift in the user interface without any user input, which is unexpected for the user. The user experience of the web page is torn apart at the start itself.&lt;/p&gt;

&lt;p&gt;3) First Input Delay&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--emuqrczO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1qkyuisrrh9gw8htgf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--emuqrczO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1qkyuisrrh9gw8htgf7.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Once the server responds with the necessary file to load your website, the first page that your web browser renders is the index.html page, and this HTML page might need some resources like CSS files, JavaScript files, or .wasm in some cases. If you are not familiar with how the HTML document is mounted on the browser, it is done by a single thread, and this thread is often referred to as UI thread or the main thread of the website. So, when the additional resources are fetched from the network, the process is asynchronous, which means the UI thread is not blocked. But once the downloading of the JavaScript files is completed, it must be executed. The execution of JavaScript blocks the main thread of the website.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DMy90hOv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3n5sg7ur0kk8531amkqo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DMy90hOv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3n5sg7ur0kk8531amkqo.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The longer the JavaScript takes to complete its execution, the longer your page will be unresponsive and the larger the penalty you face for more prolonged inactivity. The phase of the loading is measured as the first input delay by google. It's measured in seconds as it's a time metric. This is the most important metric of all the three that we have discussed because the whole interactivity of the page depends on the output reaction of your application. The FID value should be under 100 ms to maintain better responsiveness of your website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5cqY6Z2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18xelvcipwbwc7qpwe75.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5cqY6Z2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18xelvcipwbwc7qpwe75.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As mentioned in the above image, our website passes the Core Web Vitals assessment from the data collected over the previous 28 days. Our website is well under the maximum value that google puts in. The core web vitals play an essential role in determining the overall score of the website. Well, there is room for improvement on each page of the website. If you are aiming for the highest score possible on your website's main pages, that's enough.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--azEsMnI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypca9x1bmju98239d3ba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--azEsMnI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypca9x1bmju98239d3ba.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google also uses the Core Web Vitals as one of the Ranking factors of the SEO of your website, so make sure if you have a website than to maximize your core web vitals till the possible extent. There are a lot of factors that might affect the core web vitals, but the most important being the code of your website, which should be properly maintained to score an extra mile in the Page insights meter.&lt;/p&gt;

&lt;p&gt;You can watch the full YouTube video &lt;a href="https://www.youtube.com/watch?v=NItNEiWmJdU"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>google</category>
      <category>corewebvitals</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
