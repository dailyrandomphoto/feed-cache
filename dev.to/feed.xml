<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Materialized Views: An Introduction</title>
      <author>Mia Liang</author>
      <pubDate>Wed, 03 Feb 2021 15:08:23 +0000</pubDate>
      <link>https://dev.to/mia_liang/materialized-views-an-introduction-455b</link>
      <guid>https://dev.to/mia_liang/materialized-views-an-introduction-455b</guid>
      <description>&lt;p&gt;A &lt;a href="https://materialize.com/"&gt;materialized view&lt;/a&gt; is one that is precomputed, allowing it to periodically cache the results of an incoming query in the name of increasing performance and efficiency as much as possible. Generally speaking, those queries that use materialized views are faster and consume fewer resources than those that process queries to base tables - something that is true even if they're both retrieving the exact same data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-materialized-view" class="anchor"&gt;
  &lt;/a&gt;
  What is a Materialized View?
&lt;/h2&gt;

&lt;p&gt;Based on all the above, it's easy to see why &lt;a href="https://cloud.google.com/bigquery/docs/materialized-views-intro"&gt;materialized views&lt;/a&gt; have become one of the best opportunities that organizations have to boost the performance of workloads that use common and repeated queries. Materialized views are also notable because they require no maintenance to speak of, as the view is always recomputed in the background after the base table in question has been changed. Any incremental changes from that base table is added to the materialized view automatically, with absolutely no inputs required on behalf of users.&lt;/p&gt;

&lt;p&gt;Another major benefit is that a materialized view is always 100% consistent with the base table, meaning that you're always working from fresh data without exception. Even if a base table is changed in some way due to an update, or because of the expiration of a partition, the materialized view tools you're using will invalidate anything that was impacted and re-read the portion of the base table in question to guarantee accuracy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases-for-materialized-views" class="anchor"&gt;
  &lt;/a&gt;
  Use Cases for Materialized Views
&lt;/h2&gt;

&lt;p&gt;One of the biggest use cases for materialized views involves unlocking faster query performance whenever possible. Organizations who are working with raw tables to perform online analytical processing aggregation that depend on significant processing, for example, stand to benefit enormously from materialized views. The same is true if they are working within a situation that has predictable and repeatable queries, like if they were hoping to improve their business intelligence pipeline.&lt;/p&gt;

&lt;p&gt;But as referenced, one of the main use cases for materialized views involves the aggregation of real time data across an enterprise. Some materialized views tools you may be using perform all aggregations in real time, thus making sure that organizational leaders always have up-to-date and totally accurate information to work from when making decisions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started-with-materialized-views" class="anchor"&gt;
  &lt;/a&gt;
  How to Get Started With Materialized Views
&lt;/h2&gt;

&lt;p&gt;To get a better understanding of how to get started with materialized views, one must first learn more about the actual flow of data across a materialized view to begin with.&lt;/p&gt;

&lt;p&gt;After the users of your application or other system begin to trigger events and create transactions, that data will then be committed to the source table that you're working with. At that point, an internal trigger in the source table will populate the materialized view log table.&lt;/p&gt;

&lt;p&gt;Then, a fast refresh will be executed and any changes that have been created since the last time this happened will be applied to the materialized view. All users can now query data from the materialized view using a variety of tools, all with the confidence that comes with knowing they're working with the latest information from the most recent version of that table's data.&lt;/p&gt;

&lt;p&gt;To create a materialized view in the tool you're working with, you can use a DML statement to create a basic table, to load data into it, and to create a materialized view as a result. An example of an SQL command that could be used to create a materialized view is as follows:&lt;/p&gt;

&lt;p&gt;CREATE [ OR REPLACE ] [ SECURE ] MATERIALIZED VIEW [ IF NOT EXISTS ] &lt;br&gt;
  &lt;a href="https://dev.tocolumn_list"&gt; COPY GRANTS &lt;/a&gt;&lt;br&gt;
  [ COMMENT = '' ]&lt;br&gt;
  [ CLUSTER BY (  [,  ... ] ) ]&lt;br&gt;
  AS &lt;br&gt;
Of course, there are a number of potential limitations that you should be aware of. By its nature, materialized views are only as "current" as they were the last time you ran the query. This is why you should make an effort to do so as often as possible. Likewise, a materialized view will only ever be able to query a single table - so you should keep that in mind when making decisions moving forward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#materialized-views-tools" class="anchor"&gt;
  &lt;/a&gt;
  Materialized Views Tools
&lt;/h2&gt;

&lt;p&gt;There are a wide range of different materialized views tools you can choose to work from depending on your needs. They were first implemented by the Oracle Database, for example, and the "Query Rewrite" feature is available from version 8I onward. Any version of PostgreSQL after 9.3 also natively supports materialized views, and you can even use the "Concurrently" syntax to refresh the contents automatically.&lt;/p&gt;

&lt;p&gt;SQL Server works with materialized views, although here they go by a different name - "Indexed Views." They're the same basic concept, but they don't require a refresh because they are always in full sync with the original data of the tables by design. This has been a part of every version of SQL Server released since the year 2000.&lt;/p&gt;

&lt;p&gt;Just a few of the other materialized views tools you may use include but are not limited to Sybase SQL Anywhere, ClickHouse, Amazon DynamoDB, BigQuery and others. The one that makes the most sense given your use case will obviously vary depending on your needs.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>materializedviews</category>
      <category>tutorial</category>
      <category>googlecloud</category>
    </item>
    <item>
      <title>Avoid These Terrible Web Notifications Mistakes! ü§¶‚Äç‚ôÇüí•</title>
      <author>Francesco Leardini</author>
      <pubDate>Wed, 03 Feb 2021 09:18:47 +0000</pubDate>
      <link>https://dev.to/paco_ita/avoid-these-terrible-web-notifications-rules-1n82</link>
      <guid>https://dev.to/paco_ita/avoid-these-terrible-web-notifications-rules-1n82</guid>
      <description>&lt;p&gt;This article is a brief introduction to some best practices about web notifications and some typical mistakes we should avoid. &lt;/p&gt;

&lt;p&gt;We have several instruments to measure users engagement, such as downloads or clicks. Highly engaged users tend to be more profitable as typically they conclude purchases and share the website content within their network.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When we consider push notifications, engagement can be measured as the average number of sessions the recipients generated by receiving the message within a defined period of time. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Localytics web notification statistics found that recipients of notifications increased their level of engagement with apps of one third in April 2018 as compared with the beginning of 2017.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JZdosePd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/myslu3jc5phbzcpcsf80.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JZdosePd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/myslu3jc5phbzcpcsf80.PNG" alt="engagement"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Push notifications are a powerful channel to keep an interactive contact with our users and reach out to them even when they aren't visiting our web site.&lt;/p&gt;

&lt;p&gt;Commercial newsletters allow for fake user data (do you always provide your real information in any newsletter? üòÑ).&lt;br&gt;
Conversely, it is not possible to falsify credentials with web notifications, but they can be a double-edged sword.&lt;/p&gt;

&lt;p&gt;We can build an amazing web app but if we do not use notifications properly, we flood the users with irrelevant information. Either they will be annoyed or the message we wanted to send across will be swallowed by too much information.&lt;br&gt;
¬†&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-benefits-of-push-notifications" class="anchor"&gt;
  &lt;/a&gt;
  The benefits of push notifications
&lt;/h1&gt;

&lt;p&gt;Push notifications can bring benefits to different business fields.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hM01ZvKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/yl132dobm4jktlikgaaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hM01ZvKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/yl132dobm4jktlikgaaz.png" alt="push-benefits"&gt;&lt;/a&gt;&lt;br&gt;
¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ecommerce-a-practical-case" class="anchor"&gt;
  &lt;/a&gt;
  E-commerce: a practical case
&lt;/h2&gt;

&lt;p&gt;Let's take a common scenario. A potential customer browses among our e-shop articles and puts one item in the cart for the purchase. However at the very last checkout step additional costs - shippings costs, gift options, express delivery - might pile on top of the original price. At this point the customer second-guesses his/her choices and aborts the purchase.&lt;br&gt;&lt;br&gt;
 A study by &lt;a href="https://hostingfacts.com/internet-facts-stats/"&gt;hosting facts&lt;/a&gt; says that 66 percent of shoppers have decided not to buy an item they were considering buying due to shipping costs.&lt;/p&gt;

&lt;p&gt;We can track these "abandoned" items left in the shopping cart. At a certain point our marketing department might decide to launch a new sales campaign. This would be the perfect time to send a message to all those users who left some articles in the cart. If those objects are now 30% - 40% cheaper, it is more likely that the user is going to conclude the purchase this time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TJgp6dHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/w4owuzdw38qxz582dwrz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJgp6dHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/w4owuzdw38qxz582dwrz.png" alt="usefuls_notification"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is just one possible example, but there are many more opportunities: shopping websites can send an email when a piece of clothing that was out of stock is available again or when a parcel has been handed over to the shipping courier.&lt;br&gt;
¬†&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#common-mistakes-to-avoid" class="anchor"&gt;
  &lt;/a&gt;
  Common mistakes to avoid
&lt;/h1&gt;

&lt;p&gt;As we mentioned earlier, the misuse of web notifications results into a negative user experience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UeXfNVDW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/vp2mu3pe6106tjbhs7g5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UeXfNVDW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/vp2mu3pe6106tjbhs7g5.PNG" alt="push-spam"&gt;&lt;/a&gt;¬†&lt;/p&gt;
source: https://vwo.com/ebooks/push-notifications-report-2018



&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;What can go wrong:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Wrong timing&lt;/strong&gt;. You should be able to collect geographical details to segment the audience according to their location. This allows for so called &lt;em&gt;geo-push&lt;/em&gt; notifications. If you want to inform that your latest tech article has been published, probably the best time to reach your readers is between 6am and 9am when many people are commuting to work. In order to do this, the server push logic needs to take into account the recipients time zone.&lt;br&gt;
¬†&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Impersonal data&lt;/strong&gt;. Provide information tailored to the recipient, addressing him/her by name or references to previous interactions. For this reason we should always record the transactions with our users in order to create a detailed context allowing for a more precise customers segmentation.&lt;br&gt;
¬†&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Unclear actions&lt;/strong&gt;. The context and interaction option of a notification have to be immediately clear and accessible. In the example below, the type of notification and the actions that can be taken are easily identified:&lt;br&gt;
¬†&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PS73bF0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ix5pzmu6bsrw0krhlw3h.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PS73bF0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ix5pzmu6bsrw0krhlw3h.PNG" alt="push_action"&gt;&lt;/a&gt;&lt;br&gt;
¬†&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Too many&lt;/strong&gt;. Even if we can provide information of interest for our recipients, we should carefully evaluate the frequency of a notification. Otherwise our messages will be simply perceived as annoying spam.&lt;br&gt;
¬†&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xjbAqsAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/mbf5z8s9e7gt71ljrxoq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xjbAqsAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/mbf5z8s9e7gt71ljrxoq.png" alt="too_many"&gt;&lt;/a&gt;&lt;br&gt;
¬†&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these concepts in mind, you should be ready to plan your notifications strategy with the most effective impact on your target users.&lt;/p&gt;

&lt;p&gt;Do you have any further methods or measures you adopt in your web notifications strategy? Share them with us in the comment below!&lt;/p&gt;

</description>
      <category>performance</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to log PHP errors and warnings into a file</title>
      <author>Dennis Maina</author>
      <pubDate>Wed, 03 Feb 2021 08:43:19 +0000</pubDate>
      <link>https://dev.to/dennismaina/how-to-log-php-errors-and-warnings-into-a-file-544d</link>
      <guid>https://dev.to/dennismaina/how-to-log-php-errors-and-warnings-into-a-file-544d</guid>
      <description>&lt;p&gt;When writing server-side code in PHP, it's always a good practice to consider security first. When dealing with PHP errors that could occur at runtime, it's advisable to hide these error messages from the users and instead log them into a file for developers or system admins to review them. This is a good security practice as the error messages can expose an existing vulnerability or give an attacker an entry point into your system.&lt;/p&gt;

&lt;p&gt;Enough of talking, how can we do that effectively and efficiently?&lt;/p&gt;

&lt;p&gt;We are going to create a class that's going to be invoked every time an error occurs in the system.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you are using an MVC place this code at the top of your main index file.&lt;/li&gt;
&lt;li&gt;If you are not using an MVC, place this code at the top of every PHP file that you want the errors handled.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;REPLACE WITH THE LOCATION OF YOUR FILE&amp;gt;.php'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ERR_HANDLER_ENABLED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nb"&gt;register_shutdown_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sysFatalErr'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="nb"&gt;set_error_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sysErrorhandler'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This class collects all the errors reported from a PHP script, classifies them as either general errors or fatal errors. After classification, it passes the error to the respective method which then calls the log function that writes them out.&lt;/p&gt;

&lt;p&gt;Let's define some constant variables here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cd"&gt;/**
 * if your error class file resides in a folder called classes and the index file is in the base folder use:
 *
 * define('ERR_HANDLER_PATH', substr(dirname(__file__), 0, strpos(dirname(__file__), 'classes') - 1) . '/'); // DO NOT change!!
 * 
 * after using the above line comment or remove the fisrt line down here
**/&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ERR_HANDLER_PATH'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// DO NOT change!!&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ERR_HANDLER_LOG_FOLDER'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'logs'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Name of logs folder.. Create if it does not exist.&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ERR_HANDLER_ENABLED'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Enable custom error handler?&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ERR_HANDLER_DISPLAY'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Display a message on screen?&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ERR_APPEND_RAND_STRING'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Adds random string to file name for security. Prevents someone attempting browser access.&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'MASK_FILE_PATH'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Hide file path if error occurs..&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'FILE_ERR_LOG_FILE'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'errors.log'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// File name of error log&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'FILE_FATAL_ERR_LOG_FILE'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'fatal_errors.log'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// File name of fatal error log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We create our class which has four functions and each function calls the log function when invoked:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;generalErr - This function is invoked when a general error occurs.&lt;/li&gt;
&lt;li&gt;mailErr - This function is invoked when an email error occurs.(if you have an email sending script)&lt;/li&gt;
&lt;li&gt;fataErr - This function is invoked when a fatal error occurs and no further execution can happen.&lt;/li&gt;
&lt;li&gt;log - calls the write function which then writes the error into a file.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Errs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;generalErr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Errs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;FILE_ERR_LOG_FILE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;mailErr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Errs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;FILE_ERR_LOG_FILE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fatalErr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Errs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;FILE_FATAL_ERR_LOG_FILE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;is_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ERR_HANDLER_PATH&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="no"&gt;ERR_HANDLER_LOG_FOLDER&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ERR_HANDLER_PATH&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="no"&gt;ERR_HANDLER_LOG_FOLDER&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nc"&gt;Errs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;raStr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nf"&gt;linending&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'***** - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - *****'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nf"&gt;linending&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;raStr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ERR_APPEND_RAND_STRING&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;uniqid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'-'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Initiate the class..&lt;/span&gt;
&lt;span class="nv"&gt;$DDEH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Errs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we check to see if the error handler is enabled. If it is enabled, we turn of displaying all the errors to the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ERR_HANDLER_ENABLED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Switch off display errors&lt;/span&gt;
  &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;ini_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'display_errors'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Set error reporting level..&lt;/span&gt;
  &lt;span class="nb"&gt;error_reporting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;E_ALL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;On the Error reporting levels, we're going to be using E_ALL. PHP provides lots of them which you can look at here &lt;a href="https://www.php.net/manual/en/errorfunc.constants.php"&gt;PHP Error Levels&lt;/a&gt;.&lt;br&gt;
Here's just a few that I think are useful together with their error codes.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;Error&lt;/th&gt;
&lt;th&gt;Error Code&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E_ERROR&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Fatal runtime error that can be recovered, The execution of the script is stopped immediately&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E_WARNING&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;A runtime warning, not fatal and most errors fall here, execution is not stopped&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E_NOTICE&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Runtime notice indicating something that could possibly be an error was encountered when running a script normally&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E_COMPILE_ERROR&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;Fatal error that occurs while the script was being compiled generated by the Zend Scripting engine&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E_USER_ERROR&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;td&gt;A fatal user-generated error, generated by the PHP code using the function trigger_error() rather than the PHP engine&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E_USER_WARNING &lt;/td&gt;
&lt;td&gt;512&lt;/td&gt;
&lt;td&gt;NON FATAL USER GENERATED warning message, generated by the PHP code using the function trigger_error() rather than the PHP engine&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E_STRICT&lt;/td&gt;
&lt;td&gt;2048&lt;/td&gt;
&lt;td&gt;Not strictly an error but it's triggered whenever PHP encounters code that could lead to problems or forward incompatibilities&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E_ALL&lt;/td&gt;
&lt;td&gt;32767&lt;/td&gt;
&lt;td&gt;All errors and warnings except from level E_STRICT&lt;/td&gt;
&lt;/tr&gt;


&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;TIP:&lt;/strong&gt; Passing a value of (-1) to the error_reporting() function will show every possible error when new levels and constants are added in future PHP versions.&lt;/p&gt;

&lt;p&gt;Now, we create a function that inserts a newline depending on the OS architecture.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;linending&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$newline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_SERVER&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"HTTP_USER_AGENT"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;strstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;strtolower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_SERVER&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"HTTP_USER_AGENT"&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="s1"&gt;'win'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$newline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_SERVER&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"HTTP_USER_AGENT"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;strstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;strtolower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_SERVER&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"HTTP_USER_AGENT"&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="s1"&gt;'mac'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$newline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$newline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'PHP_EOL'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;PHP_EOL&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$newline&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This function will be called whenever a fatal error occurs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;sysFatalErr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="nv"&gt;$DDEH&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nv"&gt;$error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;error_get_last&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'type'&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'E_ERROR'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'type'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;E_ERROR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'type'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[Error Code: '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'type'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'] '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nf"&gt;linending&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[Date/Time: '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'j F Y @ H:iA'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nf"&gt;linending&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[Fatal error on line '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'line'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' in file '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'file'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ERR_HANDLER_DISPLAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;div style="background:#ff9999"&amp;gt;&amp;lt;p style="padding:10px;color:#fff"&amp;gt;A fatal error has occurred. For more details please view "'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="no"&gt;ERR_HANDLER_LOG_FOLDER&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="no"&gt;FILE_FATAL_ERR_LOG_FILE&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'".&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nv"&gt;$DDEH&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fatalErr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This other function is called when general errors occur, and can further classify them accordingly. &lt;em&gt;You can add more in the switch block.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;sysErrorhandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$errno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$errstr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$errfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$errline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="nv"&gt;$DDEH&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;error_reporting&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$errno&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;method_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$DDEH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'generalErr'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;method_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$DDEH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'fatalErr'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$errno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kc"&gt;E_USER_ERROR&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[Error Code: '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$errno&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'] '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$errstr&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nf"&gt;linending&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[Date/Time: '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'j F Y @ H:iA'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nf"&gt;linending&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[Error on line '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$errline&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' in file '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$errfile&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ERR_HANDLER_DISPLAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;div style="background:#ff9999"&amp;gt;&amp;lt;p style="padding:10px;color:#fff"&amp;gt;A fatal error has occurred. For more details please view "'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="no"&gt;ERR_HANDLER_LOG_FOLDER&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="no"&gt;FILE_FATAL_ERR_LOG_FILE&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'".&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nv"&gt;$DDEH&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fatalErr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kc"&gt;E_USER_WARNING&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[Error Code: '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$errno&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'] '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$errstr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[Date/Time: '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'j F Y @ H:iA'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nf"&gt;linending&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[Error on line '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$errline&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' in file '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$errfile&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ERR_HANDLER_DISPLAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;div style="background:#ff9999"&amp;gt;&amp;lt;p style="padding:10px;color:#fff"&amp;gt;An error has occurred. For more details please view "'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="no"&gt;ERR_HANDLER_LOG_FOLDER&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="no"&gt;FILE_ERR_LOG_FILE&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'".&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nv"&gt;$DDEH&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;generalErr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kc"&gt;E_USER_NOTICE&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[Error Code: '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$errno&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'] '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$errstr&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nf"&gt;linending&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[Date/Time: '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'j F Y @ H:iA'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nf"&gt;linending&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[Error on line '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$errline&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' in file '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$errfile&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ERR_HANDLER_DISPLAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;div style="background:#ff9999"&amp;gt;&amp;lt;p style="padding:10px;color:#fff"&amp;gt;An error has occurred. For more details please view "'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="no"&gt;ERR_HANDLER_LOG_FOLDER&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="no"&gt;FILE_ERR_LOG_FILE&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'".&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nv"&gt;$DDEH&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;generalErr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[Error Code: '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$errno&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'] '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$errstr&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nf"&gt;linending&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[Date/Time: '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'j F Y @ H:iA'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nf"&gt;linending&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[Error on line '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$errline&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' in file '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$errfile&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ERR_HANDLER_DISPLAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;div style="background:#ff9999"&amp;gt;&amp;lt;p style="padding:10px;color:#fff"&amp;gt;An error has occurred. For more details please view "'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="no"&gt;ERR_HANDLER_LOG_FOLDER&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="no"&gt;FILE_ERR_LOG_FILE&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'".&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nv"&gt;$DDEH&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;generalErr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, we write out our errors into a file. Remember to have the logs folder created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;FILE_APPEND&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can get the whole code on my GitHub &lt;a href="https://github.com/Maina-Dennis/php-class-for-php-and-sql-error-logging-into-a-file"&gt;Here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React Native Animated Credit Card Library</title>
      <author>Halil Bilir</author>
      <pubDate>Wed, 03 Feb 2021 06:38:24 +0000</pubDate>
      <link>https://dev.to/halilb/react-native-animated-credit-card-library-1na6</link>
      <guid>https://dev.to/halilb/react-native-animated-credit-card-library-1na6</guid>
      <description>&lt;p&gt;I built a new library upon the tutorials I posted about React Native forms, and published it on Github.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Byr2dmZ3TRU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I won't go into the implementation details this time. You can check out the source code and let me know about any questions you might have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features" class="anchor"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Works on iOS and Android.&lt;/li&gt;
&lt;li&gt;Validations.&lt;/li&gt;
&lt;li&gt;Card icon animation with Lottie.&lt;/li&gt;
&lt;li&gt;Card flip animation with react-native-card-flip.&lt;/li&gt;
&lt;li&gt;Possible to access all react-hook-form methods.&lt;/li&gt;
&lt;li&gt;TypeScript code base.&lt;/li&gt;
&lt;li&gt;Works on Expo.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installation" class="anchor"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Install the library first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install rn-credit-card
// OR
yarn add rn-credit-card
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Install &lt;code&gt;react-hook-form&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-hook-form
// OR
yarn add react-hook-form
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You also need to install &lt;code&gt;lottie-react-native&lt;/code&gt; if you want to display card icon animations. Please note that this is optional, and the library will display simple card icons if &lt;code&gt;Lottie&lt;/code&gt; is not present:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install lottie-react-native
// OR
yarn add lottie-react-native
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you'd like to use the library on Android, make sure you're using a &lt;code&gt;lottie-react-native&lt;/code&gt; version greater than &lt;code&gt;3.0.0&lt;/code&gt;. The animations are not working on &lt;code&gt;2.x.x&lt;/code&gt; versions.&lt;/p&gt;

&lt;p&gt;Additional steps might be needed depending on your platform. Please check &lt;a href="https://github.com/lottie-react-native/lottie-react-native#installing-react-native--0600"&gt;lottie-react-native documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-fonts" class="anchor"&gt;
  &lt;/a&gt;
  Configuring Fonts
&lt;/h3&gt;

&lt;p&gt;The library uses &lt;a href="https://fonts.google.com/specimen/Roboto+Mono"&gt;Roboto Mono&lt;/a&gt; font by default. If you'd like to keep it that way, you need to import &lt;code&gt;RobotoMono_400Regular&lt;/code&gt; and &lt;code&gt;RobotoMono_700Bold&lt;/code&gt; fonts to your project. Please see &lt;a href="https://docs.expo.io/versions/latest/sdk/font/"&gt;Expo&lt;/a&gt; or &lt;a href="https://dev.to/aneeqakhan/add-custom-fonts-in-react-native-0-63-for-ios-and-android-3a9e"&gt;this dev.to post&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;You may also use custom fonts with this library. Please see &lt;a href="#fonts"&gt;#fonts&lt;/a&gt; section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;You need to create a &lt;code&gt;react-hook-form&lt;/code&gt; and pass it down to the &lt;code&gt;CreditCardForm&lt;/code&gt; through &lt;code&gt;FormProvider&lt;/code&gt; context. This structure helps you accessing every propery and method of the form so you can build some features on top of the library.&lt;/p&gt;

&lt;p&gt;The library is written in TypeScript, and types are also available out of the box. You may use &lt;code&gt;FormModel&lt;/code&gt; to type your form.&lt;/p&gt;

&lt;p&gt;Here is a fully functional example with &lt;code&gt;KeyboardAvodingView&lt;/code&gt;, which manages the scroll position when keyboard is open.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FormProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-hook-form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;KeyboardAvoidingView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Platform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;SafeAreaView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LottieView&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lottie-react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CreditCardForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FormModel&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rn-credit-card&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formMethods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FormModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="c1"&gt;// to trigger the validation on the blur event&lt;/span&gt;
    &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;onBlur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;defaultValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;holderName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;cardNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;expiration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;cvv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formMethods&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FormModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Success: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormProvider&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;formMethods&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SafeAreaView&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;KeyboardAvoidingView&lt;/span&gt;
          &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avoider&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;behavior&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Platform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OS&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;padding&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CreditCardForm&lt;/span&gt;
            &lt;span class="na"&gt;LottieView&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;LottieView&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;horizontalStart&lt;/span&gt;
            &lt;span class="na"&gt;overrides&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;labelText&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;KeyboardAvoidingView&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValid&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;
            &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CONFIRM PAYMENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;onPress&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SafeAreaView&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;avoider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you are not using TypeScipt on your project, simply remove &lt;code&gt;FormModel&lt;/code&gt; references from the example above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#available-props" class="anchor"&gt;
  &lt;/a&gt;
  Available Props
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#lottieview" class="anchor"&gt;
  &lt;/a&gt;
  LottieView
&lt;/h3&gt;

&lt;p&gt;This prop takes the default exported value of &lt;code&gt;lottie-react-native&lt;/code&gt; library. This is optional because &lt;code&gt;Lottie&lt;/code&gt; might require additional configuration steps. The library will display simple png card icons if this prop is not provided.&lt;/p&gt;

&lt;p&gt;Please remember you need a &lt;code&gt;lottie-react-native&lt;/code&gt; version greater than &lt;code&gt;3.x.x&lt;/code&gt; to make it work on Android.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;th&gt;platform&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;any&lt;/td&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;td&gt;iOS/Android&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LottieView&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lottie-react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CreditCardForm&lt;/span&gt; &lt;span class="nx"&gt;LottieView&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;LottieView&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#horizontalstart" class="anchor"&gt;
  &lt;/a&gt;
  horizontalStart
&lt;/h3&gt;

&lt;p&gt;This makes the form start with a horizontal scroll. This is the default behaviour.&lt;/p&gt;

&lt;p&gt;This feature is not working on Android due to a weird problem happening when the &lt;code&gt;ScrollView&lt;/code&gt; is switched from &lt;code&gt;horizontal&lt;/code&gt;.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;th&gt;platform&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;td&gt;iOS only&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This is the outcome when &lt;code&gt;horizontalStart&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9P48_X3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/halilb/rn-credit-card/master/assets/card-form-second-low.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9P48_X3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/halilb/rn-credit-card/master/assets/card-form-second-low.gif" alt="vertical"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backgroundimage" class="anchor"&gt;
  &lt;/a&gt;
  backgroundImage
&lt;/h3&gt;

&lt;p&gt;You may use this prop to replace the background image of the card preview.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;th&gt;platform&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;React.ReactNode&lt;/td&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;td&gt;iOS/Android&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CreditCardForm&lt;/span&gt;
  &lt;span class="na"&gt;backgroundImage&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Image&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;absolute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fonts" class="anchor"&gt;
  &lt;/a&gt;
  fonts
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;fonts&lt;/code&gt; props take an object with two fields:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;field&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;fonts.regular&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;RobotoMono_400Regular&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fonts.bold&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;RobotoMono_700Bold&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Please note that you should use a &lt;a href="https://en.wikipedia.org/wiki/Monospaced_font"&gt;Monospaced font&lt;/a&gt; for the best user experience. The fixed width helps maintaining the same card number width while the user types.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CreditCardForm&lt;/span&gt;
  &lt;span class="na"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;regular&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RobotoMono_400Regular&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RobotoMono_700Bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#inputcolors" class="anchor"&gt;
  &lt;/a&gt;
  inputColors
&lt;/h3&gt;

&lt;p&gt;You may modify the &lt;code&gt;TextInput&lt;/code&gt; colors using this. It's an object with three optional fields:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;field&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;focused&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;#080F9C&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;errored&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;#B00020&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;regular&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;#B9C4CA&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CreditCardForm&lt;/span&gt;
  &lt;span class="na"&gt;inputColors&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;focused&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#080F9C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;errored&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#B00020&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;regular&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#B9C4CA&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#translations" class="anchor"&gt;
  &lt;/a&gt;
  translations
&lt;/h3&gt;

&lt;p&gt;An optional object that takes a string for each displayed text on the library. You may use it to modify any or all of those displayed texts.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;th&gt;platform&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Translations&lt;/td&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;td&gt;iOS/Android&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CreditCardForm&lt;/span&gt;
  &lt;span class="c1"&gt;// those are the default values&lt;/span&gt;
  &lt;span class="na"&gt;translations&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;cardNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Card Number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cardHolderName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cardholder Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;nameSurname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name Surname&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;mmYY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MM/YY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;expiration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Expiration&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;securityCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Security Code&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Done&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cardNumberRequired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Card number is required.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cardNumberInvalid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This card number looks invalid.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cardHolderNameRequired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cardholder name is required.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cardHolderNameInvalid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This cardholder name looks invalid.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;expirationRequired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Expiration date is required.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;expirationInvalid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This expiration date looks invalid.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;securityCodeRequired&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Security code is required.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;securityCodeInvalid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This security date looks invalid.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#overrides" class="anchor"&gt;
  &lt;/a&gt;
  overrides
&lt;/h3&gt;

&lt;p&gt;This props might be used to override some component styles within the library. All fields are optional.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;field&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cardPreview&lt;/td&gt;
&lt;td&gt;ViewStyle or TextStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;labelText&lt;/td&gt;
&lt;td&gt;TextStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cardHolderPreview&lt;/td&gt;
&lt;td&gt;TextStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;expirationPreview&lt;/td&gt;
&lt;td&gt;ViewStyle or TextStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;outline&lt;/td&gt;
&lt;td&gt;ViewStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;input&lt;/td&gt;
&lt;td&gt;ViewStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;labelContainer&lt;/td&gt;
&lt;td&gt;ViewStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inputLabel&lt;/td&gt;
&lt;td&gt;TextStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;errorText&lt;/td&gt;
&lt;td&gt;TextStyle&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>reactnative</category>
      <category>typescript</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Dreams from the multiverse where Crystal is as popular as Go and Rust</title>
      <author>Sam Johnson</author>
      <pubDate>Wed, 03 Feb 2021 06:29:45 +0000</pubDate>
      <link>https://dev.to/sam0x17/dreams-from-the-multiverse-where-crystal-is-as-popular-as-go-and-rust-5626</link>
      <guid>https://dev.to/sam0x17/dreams-from-the-multiverse-where-crystal-is-as-popular-as-go-and-rust-5626</guid>
      <description>&lt;p&gt;I often look in dismay at the growing popularity of Go and wonder if Crystal could ever catch up.&lt;/p&gt;

&lt;p&gt;Really, programming languages are a lot like people in real life... popularity is seldom deserved, but very roughly correlates with some degree of skill or utility.&lt;/p&gt;

&lt;p&gt;For me, Crystal is like the unpopular, down-to-earth nerdy kid, who once you meet him you wonder why he isn't running the whole school ‚Äì or at least, the nerdy non-mainstream parts of the school where Go and Rust rule supreme. Obviously JavaScript and probably Python are running the show at the top of the hierarchy, wearing their undeserved varsity jackets and cheer-leading uniforms or whatever the modern zoomer equivalent is of this worn-out 90s trope.&lt;/p&gt;

&lt;p&gt;If Crystal could just become, like, the head of the drama club or something, I'd be super happy.&lt;/p&gt;

&lt;p&gt;I really like Crystal. I think it absolutely &lt;em&gt;nails&lt;/em&gt; that sweet spot between high level syntactic sugar and low level systems programming features and performance. With Crystal I feel like I really can have my cake and eat it too. As advertised I get the slickness of Ruby with the performance of optimized C/C++, or so goes the tagline.&lt;/p&gt;

&lt;p&gt;If that is the case, though, why didn't Crystal take off with the same viral popularity enjoyed by other languages? When Crystal was introduced in 2014, Ruby was all the rage. Why didn't Crystal take over?&lt;/p&gt;

&lt;p&gt;I have some theories:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#audience" class="anchor"&gt;
  &lt;/a&gt;
  Audience
&lt;/h2&gt;

&lt;p&gt;Crystal is laser-focused on poaching Rubyists, but Ruby is on the decline, and never had the market penetration of languages like JavaScript ‚Äì as Ruby languishes, so does Crystal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#naming" class="anchor"&gt;
  &lt;/a&gt;
  Naming
&lt;/h2&gt;

&lt;p&gt;I think naming has a lot to do with the virality of a language, and there is tons of unrelated competition for the keyword "crystal" with everything from people selling quartz on Etsy to the millions of "crystal reports" stackoverflow posts. Crystal content gets buried.&lt;/p&gt;

&lt;p&gt;This has happened before if we look at what happened to D lang. How do you google D?? That poor, amazing, early language never had a chance :/&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#association" class="anchor"&gt;
  &lt;/a&gt;
  Association
&lt;/h2&gt;

&lt;p&gt;I think the association with Ruby scares away non-Rubyists. It really is a shame because Crystal is a great languages regardless of your experience with Ruby.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#timing" class="anchor"&gt;
  &lt;/a&gt;
  Timing
&lt;/h2&gt;

&lt;p&gt;In a lot of ways, Crystal has been both too late and too early. The 1.0 release still isn't out and the ideal time for it to come out was right when Go started showing up in tons of job postings and the world was looking for an easy to use systems language that isn't terrible.&lt;/p&gt;

&lt;p&gt;At the same time it was &lt;em&gt;too early&lt;/em&gt; in that most of the excitement around Crystal happened in 2015, before the "hipster systems programming language wars" really started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stewardship" class="anchor"&gt;
  &lt;/a&gt;
  Stewardship
&lt;/h2&gt;

&lt;p&gt;Languages like Rust and Go have enormous institutional backers (Mozilla, Google, etc) and thousands of companies who contribute money and resources.&lt;/p&gt;

&lt;p&gt;Manas has held the line for Crystal for years, but at the same time they have also been rather vacant and neglectful stewards at times, in particular doing a very poor job of communicating status to the community.&lt;/p&gt;

&lt;p&gt;In any case, it's &lt;em&gt;ridiculous&lt;/em&gt; that Rust gets the kind of community support it gets considering how difficult to use and anti-user it is. Don't get me wrong ‚Äì it's a great language ‚Äì but how many people chadding Rust would be happier coding Crystal? Probably a lot.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#last-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Last Thoughts
&lt;/h2&gt;

&lt;p&gt;Anyway, if you read this far and you haven't tried Crystal, you totally should. It's my favored choice for the winner of the hipster systems languages war, and you'll find that unlike Go, it has real generics, and unlike Rust, it won't cripple every attempt you make to get something done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://crystal-lang.org"&gt;https://crystal-lang.org&lt;/a&gt;&lt;/p&gt;

</description>
      <category>crystal</category>
      <category>ruby</category>
      <category>go</category>
      <category>programming</category>
    </item>
    <item>
      <title>Flex of flexbox</title>
      <author>Pushkar Thakur</author>
      <pubDate>Wed, 03 Feb 2021 05:15:08 +0000</pubDate>
      <link>https://dev.to/push9828/flex-of-flexbox-jd8</link>
      <guid>https://dev.to/push9828/flex-of-flexbox-jd8</guid>
      <description>&lt;p&gt;The way you represent the content on your website or on the company website tells almost everything about your product or whatever the website is representing. It doesn‚Äôt matter even if you have great content but if that‚Äôs not displayed in a proper way then it doesn't serve the purpose of the existing content. So, showing content in a user-friendly way is very important.&lt;/p&gt;

&lt;p&gt;From the early days of browsers, CSS is playing a significant role in web development and we are improving ourselves along with the regular updates coming to CSS and web. It is getting simpler and more efficient to provide new experiences on web pages. &lt;/p&gt;

&lt;p&gt;Now let's jump to the main topic, we have two CSS layout systems - &lt;strong&gt;Flexbox&lt;/strong&gt; and &lt;strong&gt;CSS Grid&lt;/strong&gt;. I personally prefer using both of them to unlock the full potential of CSS. In this article, we will dive in and discuss flexbox. And at the end, we will see how to use CSS Grid and flexbox together and create amazing user experiences and improve the look and feel of the web applications.&lt;/p&gt;

&lt;p&gt;The basic thing while getting started with the flexbox is you need a flex container, which will work as a parent container in which we will be setting the basic structure of display, using Set &lt;code&gt;display: flex&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LHQsESdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a3xqecep1hh33z1c1qb5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LHQsESdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a3xqecep1hh33z1c1qb5.png" alt="Asset 11@"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container{
display:flex; /* or inline flex */
}

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note: CSS columns have no effect on a flex container.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#flex-direction" class="anchor"&gt;
  &lt;/a&gt;
  Flex Direction
&lt;/h4&gt;

&lt;p&gt;The default direction of flex is a row&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZgxhZcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rghukz0bq4vqf91z7gza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZgxhZcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rghukz0bq4vqf91z7gza.png" alt="Row"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;change direction by &lt;code&gt;flex-direction:column&lt;/code&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3AuUVajN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ja034t5d01d13hj86l8m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3AuUVajN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ja034t5d01d13hj86l8m.png" alt="Asset 3"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container{
 flex-direction: row | row-reverse | column | column-reverse;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#flexwrap" class="anchor"&gt;
  &lt;/a&gt;
  Flex-Wrap
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;Flex items try to fix in one line but you can change that behavior.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TDCy6hof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vdjs1dxc3dy52d3si1ci.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TDCy6hof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vdjs1dxc3dy52d3si1ci.png" alt="FlexWrap"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
flex-wrap: nowrap | wrap | wrap-reverse;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;nowrap&lt;/code&gt;(default): All items will be on one line.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;wrap&lt;/code&gt;: Items will go on the next line from top to bottom.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;wrap-reverse&lt;/code&gt;: Items will go on the next line from bottom to top.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#justify-content" class="anchor"&gt;
  &lt;/a&gt;
  Justify Content
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;This property helps us to align objects along the main axis. It gives more control over the alignment when items overflow the line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
  justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;flex-start&lt;/code&gt;(default): Items are towards the start of the container.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;flex-end&lt;/code&gt;: Items are towards the end of the container.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;center&lt;/code&gt;: Items are center along the line.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;space-between&lt;/code&gt;: Items are evenly distributed. The first item will at the start and the last item at the end.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;space-around&lt;/code&gt;: Items get equal face around them. Note that when you look at it space is not equal. The first item will have 1unit space from the container but from the next item, it will be 2units. 1unit from itself and 1unit of the next item.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;space-evenly&lt;/code&gt;: Items are distributed in such a way that they equal space for each.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#alignitems" class="anchor"&gt;
  &lt;/a&gt;
  Align-Items
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the version of &lt;code&gt;justify-content&lt;/code&gt; along with the cross axis;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
  align-items: stretch | flex-start | flex-end | center | baseline
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;stretch&lt;/code&gt;(default): stretch to fill the container still it follows min-width/max-width rule.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;flex-start&lt;/code&gt;: Items are placed at the start of the cross-axis.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;flex-end&lt;/code&gt;: Items are placed at the end of the cross-axis.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;center&lt;/code&gt;: Items are centered in the cross-axis.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;baseline&lt;/code&gt;: Items are aligned such as their baselines align.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now here is one question that might pop in your head, like mine did when I first learn about it. Which is better to use CSS Grid or Flexbox?&lt;/p&gt;

&lt;p&gt;It depends if you have a small design to implement, let's say you just need to align an element in a viewport, then you can go with the flexbox. You can go with CSS Grid whenever you have complex layouts, overlapping elements to handle, and so on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://demos.scotch.io/visual-guide-to-css3-flexbox-flexbox-playground/demos/"&gt;Here&lt;/a&gt; is a resource from scotch that will help you to visualize it better.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;We learned about the flexbox use cases, where and how to use them effectively. I personally prefer CSS grid and flexbox. CSS grid for outer layout and for inside flexbox that‚Äôs it!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can check the &lt;a href="https://rick-and-morty-api-kohl.vercel.app/"&gt;project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank You for reading. Signing off üôå&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#feel-free-to-reach-out" class="anchor"&gt;
  &lt;/a&gt;
  Feel free to reach out üëá
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;GitHub: &lt;a href="https://github.com/Push9828"&gt;https://github.com/Push9828&lt;/a&gt;&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/PushkarThakur28"&gt;https://twitter.com/PushkarThakur28&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="http://www.linkedin.com/in/pushkarthakur28"&gt;www.linkedin.com/in/pushkarthakur28&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Algorithm Practice: Two Sum</title>
      <author>Andrew Williams</author>
      <pubDate>Wed, 03 Feb 2021 05:05:14 +0000</pubDate>
      <link>https://dev.to/andrewjwilliams/algorithm-practice-two-sum-44of</link>
      <guid>https://dev.to/andrewjwilliams/algorithm-practice-two-sum-44of</guid>
      <description>&lt;h1&gt;
  &lt;a href="#why-algorithms" class="anchor"&gt;
  &lt;/a&gt;
  Why Algorithms?
&lt;/h1&gt;

&lt;p&gt;By definition, in software development, Algorithms are computer procedures designed to accomplish a specific task. Each algorithm consists of a number of steps the computer takes in order to produce a result. The ultimate goal in using algorithms is to find a result or solution in the most efficient way possible.&lt;/p&gt;

&lt;p&gt;Creating and studying algorithms is an essential part of being a software engineer. Sure, you may not run into a situation where you have to fulfill the requirements present in many of your study questions, but the techniques you learn will prove beneficial when performing technical analysis. You may find part of an algorithm you studied makes your application run more efficiently or returns the results your end-user needs. &lt;/p&gt;

&lt;p&gt;Regardless of how you use them, algorithms are a great problem-solving tool, and for that reason, I have made it a personal goal to practice algorithm development. For however long it takes, I will be working my way through a series of coding challenges, each designed to test my knowledge (or lack of knowledge) on certain software concepts. I will be using this blog as an outlet to discuss what went well and what didn't go so well with each challenge. If you yourself are a new software developer or are exploring the possibility of becoming one, I hope these posts can be encouraging and motivating for you in your own personal journey!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-problem-two-sum" class="anchor"&gt;
  &lt;/a&gt;
  The Problem: Two Sum
&lt;/h1&gt;

&lt;p&gt;The prompt for this challenge is pretty straightforward: write a function, taking in a non-empty array of integers and a target value, that returns a new array with two values from our input array whose sum equals the target value. Below is an example of what we would expect our function to do:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Array&lt;/strong&gt; = [8, 1, 7, 5, -9, -11, 3]&lt;br&gt;
&lt;strong&gt;Target Value&lt;/strong&gt; = 10&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt; = [7, 3] or [3, 7]&lt;/p&gt;

&lt;p&gt;If no two numbers in the array sum up to the target value, we simply return an empty array. It should also be noted that the function cannot add an integer to itself (ex. 5 + 5) and that it should be assumed that there is at most one pair of numbers summing up to the target value.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#my-initial-solution" class="anchor"&gt;
  &lt;/a&gt;
  My Initial Solution
&lt;/h1&gt;

&lt;p&gt;While this problem is classified as "easy" on the platform I'm using, I did find it challenging at first since I had little experience with these kinds of questions. After about 30-35 minutes I finally came up with a solution that cleared all the tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function twoSum(array, targetSum) {
    let finalArray = []
    let newArray = array

    for(i=0; i &amp;lt; array.length; i++){
        let targetValue = array[i]
        newArray.splice(i,1)

        newArray.map(value =&amp;gt; {
            if (targetValue + value === targetSum){
                finalArray.push(targetValue)
                finalArray.push(value)
            }
        })

        if (finalArray.length === 0){
            newArray.splice(i, 0, targetValue)
        } else {
            return finalArray;
        }
    }
    return finalArray
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Breaking down the code, I first defined two arrays, one set to an empty array and another set to the array that was passed into the function. I then initiate a for loop that is set to run the length of the array. Within the for loop, I define another variable equal to a value in the array where &lt;em&gt;i&lt;/em&gt; is the index number. This variable's value will change each time the loop increments. I then took my newArray and spliced out the value that the index of &lt;em&gt;i&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After removing this value, I then map through newArray to check and see if any other value added with the targetValue equals the targetSum. If these two values return the correct sum, I then push each value into the finalArray.&lt;/p&gt;

&lt;p&gt;Once the map is complete, I run another conditional that checks the length of our finalArray. If the length is equal to zero, then the target value is inserted back into newArray at the index value of &lt;em&gt;i&lt;/em&gt;, continuing the loop's run. If the length is greater than zero, it indicates there are values present and the program returns finalArray. The last return line after this conditional exists to return the empty array if the loop has cycled all the way through and failed to have found a pair of integers.     &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#refining-my-approach" class="anchor"&gt;
  &lt;/a&gt;
  Refining My Approach
&lt;/h1&gt;

&lt;p&gt;While this algorithm does pass the challenge presented in the prompt, it is a mess on more levels than one. In fact, I was so happy I simply cleared the tests I submitted this problem without taking time to refactor my work. After a few days I finally decided to take a look, and oh boy was it rough! &lt;/p&gt;

&lt;p&gt;For starters, I defined a couple of redundant variables, the most obvious example being newArray at the very beginning. The code becomes cluttered with a large number of variables and it becomes increasingly difficult for someone reading the code to figure out what the function is actually doing. For refactoring purposes, I knew I needed to cut out the redundancy. &lt;/p&gt;

&lt;p&gt;I had the right approach incorporating a for loop, but somehow made the puzzling decision to incorporate map. Sure, map can be used to iterate over an array and examine each value, but the purpose is to return a new array. Instead of map, I should have used a second for loop, which would have accomplished same goal of iteration without the need to return a value.&lt;/p&gt;

&lt;p&gt;Finally, I made the task of returning a final array more difficult than it needed to be. Instead of a complicated exercise in creating an empty array, pushing the correct values into that array, and checking to see if there are any values in the array, I could have just returned an array with the values inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return [value1, value2]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I would have to set my code up differently, but this is definitely the preferred way of doing things.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#coding-an-alternative-solution" class="anchor"&gt;
  &lt;/a&gt;
  Coding an Alternative Solution
&lt;/h1&gt;

&lt;p&gt;After reviewing these issues, researching big-O notation, and getting advice from some other developers, I submitted a second solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function twoSum(array, targetSum) {
   array.sort((a,b) =&amp;gt; a - b);
   let leftIndex = 0
   let rightIndex = array.length-1

   while(leftIndex &amp;lt; rightIndex){
    const currentSum = array[leftIndex] + array[rightIndex]

    if(currentSum === targetSum){
       return [array[leftIndex], array[rightIndex]]
    } else if (currentSum &amp;lt; targetSum){
            leftIndex++
    } else if (currentSum &amp;gt; targetSum){
            rightIndex--
    }
   }
   return [];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this version, the first thing I did was sort the integers in the array from smallest to largest. I then created two variables to represent the first and last index of the array. Then I initiated a while loop, which runs continuously until either the leftIndex is greater than or equal to the rightIndex or a return statement is executed.&lt;/p&gt;

&lt;p&gt;Within the loop, I created another variable, currentSum, responsible for holding the sum of the left index value and the right index value. Armed with this variable, I created a conditional that checks to see if this value is equal to the targetSum. If it is, the function returns an array with both index values. The other statements check to see if the currentSum is either greater than or less than the targetSum, adjusting the value of either index in order to change the currentSum. If every value in the array has been evaluated and no pairs have produced the targetSum, the algorithm returns an empty array.&lt;/p&gt;

&lt;p&gt;This approach works thanks to numeric ordering and the use of left and right "pointers". Let's use the array I defined earlier and pass it into this algorithm. Below would be our initial values before entering the loop:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Target Value&lt;/strong&gt; = 10&lt;br&gt;
&lt;strong&gt;Sorted Array&lt;/strong&gt; = [-11, -9, 1, 3, 5, 7, 8]&lt;br&gt;
&lt;strong&gt;leftIndex&lt;/strong&gt; = 0&lt;br&gt;
&lt;strong&gt;rightIndex&lt;/strong&gt; = 6&lt;/p&gt;

&lt;p&gt;Once we entered the loop, we sum -11 and 8, which results in -3. Since -3 is less than 10, the first &lt;em&gt;else if&lt;/em&gt; statement is executed and leftIndex value is increased by one, which is the index for -9 in the array. Over time the function adjusts the position of each index accordingly until a pair is summed equal to the targetSum. In the case of the example above, this would occur when the leftIndex equals 3 and the rightIndex equals 5.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;It feels so good to go back, even with the easier problems, and nail down how and why an algorithm is working. Being able to learn from your mistakes and make your code run more efficiently gives you that confidence boost to tackle another coding challenge. Hopefully, when my future self looks back, I can recognize these small accomplishments as stepping stones of knowledge that helped make me a more well-rounded developer! &lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Fake API - An API to generate fake data</title>
      <author>Amal Shaji</author>
      <pubDate>Wed, 03 Feb 2021 03:32:22 +0000</pubDate>
      <link>https://dev.to/amal/fake-api-an-api-to-generate-fake-data-390b</link>
      <guid>https://dev.to/amal/fake-api-an-api-to-generate-fake-data-390b</guid>
      <description>&lt;p&gt;Here is an API for all the frontend developers. An API to generate fake data, lots of it. This tool comes in handy when you are developing a frontend for applications that requires data a lot of data. &lt;/p&gt;

&lt;p&gt;Frontend frameworks like &lt;code&gt;React&lt;/code&gt;, &lt;code&gt;Vue&lt;/code&gt;, etc., are trendy, and many applications are built on these frameworks. Hot reloading is one of the features of such libraries. So when you press &lt;code&gt;save&lt;/code&gt;, the whole app reloads, and all the APIs are called. &lt;/p&gt;

&lt;p&gt;Making multiple API calls every few seconds is a costly task. Keeping the backend running the whole time to prototype the frontend is also an expensive process. This is where an API generating fake data comes into play. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-base-url" class="anchor"&gt;
  &lt;/a&gt;
  API Base URL
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fakedataapi.vercel.app"&gt;https://fakedataapi.vercel.app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fakeapi.tk"&gt;https://fakeapi.tk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#source-code" class="anchor"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/amalshaji/fakeapi"&gt;https://github.com/amalshaji/fakeapi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-does-the-api-work" class="anchor"&gt;
  &lt;/a&gt;
  How does the API work?
&lt;/h2&gt;

&lt;p&gt;The API is built using &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;, and the fake data is generated using the &lt;a href="https://faker.readthedocs.io/en/master/"&gt;Faker&lt;/a&gt; library. All the data types(the type of data generated) supported by the API are the ones in Faker. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#endpoints" class="anchor"&gt;
  &lt;/a&gt;
  Endpoints
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;[GET] /api/types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This endpoint returns all the data types supported. Only these types should be provided as values to any key.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[POST] /api/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This endpoint does all the heavy lifting. It generates fake data based on the JSON payload. Each key in the payload is an identifier, i.e., the key in the resulting fake data. The value to each key must be one of the valid data types. For an invalid type, the API ignores the entry. &lt;/p&gt;

&lt;p&gt;For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Will generate something like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Amal Shaji"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-kind-of-payload-can-the-api-handle" class="anchor"&gt;
  &lt;/a&gt;
  What kind of payload can the API handle?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Simple Payloads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VgS9lueU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612265041320/PSAqL8-Aj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VgS9lueU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612265041320/PSAqL8-Aj.png" alt="simple.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complex payloads (nested JSON)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wsayIkGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612265167197/pkYlNC1lT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wsayIkGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612265167197/pkYlNC1lT.png" alt="complex1.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complex payloads (Maybe the person has multiple contact information)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2HO_szs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612265231436/aCrLJLekD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2HO_szs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612265231436/aCrLJLekD.png" alt="complex2.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can use the &lt;code&gt;repeat&lt;/code&gt; key for repeating any block of data. Max repeat count is 10.&lt;br&gt;
Use the &lt;code&gt;repeat&lt;/code&gt; key in the outer block to get data for &lt;code&gt;n&lt;/code&gt; users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The function to generate data based on the payload is recursive. So whenever the function encounters a &lt;code&gt;dict&lt;/code&gt;, it calls itself, solving all the nested structures. You can read about it in the source code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MhWPqt3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612265406349/_xDGUfex7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MhWPqt3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612265406349/_xDGUfex7.png" alt="interesting.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hmm. Interesting...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Navigate to &lt;a href="https://fakeapi.tk/api/types"&gt;https://fakeapi.tk/api/types&lt;/a&gt; to know about all the supported data types. Fire up your favorite API testing client and test it out with various data types. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment" class="anchor"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#deploy-to-vercel" class="anchor"&gt;
  &lt;/a&gt;
  Deploy to Vercel
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://vercel.com/new/git/external?repository-url=https%3A%2F%2Fgithub.com%2Famalshaji%2Ffakeapi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--45UgOyrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vercel.com/button" alt="Deploy with Vercel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-locally-using-docker" class="anchor"&gt;
  &lt;/a&gt;
  Deploy locally using docker
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/amalshaji/fakeapi
&lt;span class="nb"&gt;cd &lt;/span&gt;fakeapi
docker build &lt;span class="nt"&gt;-t&lt;/span&gt; fakeapi &lt;span class="nb"&gt;.&lt;/span&gt;
docker run &lt;span class="nt"&gt;-p&lt;/span&gt; 8000:8000 fakeapi
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you find any bugs, feel free to open an issue or create a pull request. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#happy-hunting" class="anchor"&gt;
  &lt;/a&gt;
  Happy Huntingü•≥ü•≥
&lt;/h3&gt;

</description>
      <category>python</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Creating a weather app with Reactjs - Part 1</title>
      <author>Rafael</author>
      <pubDate>Wed, 03 Feb 2021 03:09:32 +0000</pubDate>
      <link>https://dev.to/rafavls/creating-a-weather-app-with-reactjs-part-1-5a</link>
      <guid>https://dev.to/rafavls/creating-a-weather-app-with-reactjs-part-1-5a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello! In this series, I'll show you how I went about creating a weather forecast app entirely with Reactjs. The app uses &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React Hooks&lt;/a&gt;, API calls from &lt;a href="https://openweathermap.org/"&gt;OpenWeatherMap&lt;/a&gt; &amp;amp; &lt;a href="https://developers.google.com/maps/documentation/geocoding/overview"&gt;Google Geocoding Services&lt;/a&gt;, and some CSS modules to make it all responsive (and look nice too, of course). Let's begin!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Node &amp;gt;= 8.10&lt;/li&gt;
&lt;li&gt;npm &amp;gt;= 5.6&lt;/li&gt;
&lt;li&gt;A text editor (VSCode recommended).&lt;/li&gt;
&lt;li&gt;Some previous knowledge of Reactjs and React Hooks.&lt;/li&gt;
&lt;li&gt;Some familiarity with using a command-line tool.&lt;/li&gt;
&lt;li&gt;Usage of git/github is optional but recommended.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#starting-out" class="anchor"&gt;
  &lt;/a&gt;
  Starting out
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-creating-the-react-folder" class="anchor"&gt;
  &lt;/a&gt;
  1. Creating the React folder
&lt;/h3&gt;

&lt;p&gt;To begin, open up a new terminal and initialize a new react-app in a directory called react-weather with the create-react-app command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app react-weather
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will create a template Reactjs app that we can modify to make it our own.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-cleaning-up-our-template" class="anchor"&gt;
  &lt;/a&gt;
  2. Cleaning up our template
&lt;/h3&gt;

&lt;p&gt;We won't use all files or sections of code created by the template, so let's take some time to clean up our workspace. We can go ahead and delete all of these files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;README.md&lt;/li&gt;
&lt;li&gt;All files in the &lt;strong&gt;/src&lt;/strong&gt; directory&lt;/li&gt;
&lt;li&gt;All files in the &lt;strong&gt;/public&lt;/strong&gt; directory but &lt;strong&gt;index.html&lt;/strong&gt;, &lt;strong&gt;manifest.json&lt;/strong&gt; and robots.txt&lt;/li&gt;
&lt;li&gt;We can delete all the commented lines in &lt;strong&gt;index.html&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-create-initial-component" class="anchor"&gt;
  &lt;/a&gt;
  3. Create initial component
&lt;/h3&gt;

&lt;p&gt;Now that our src folder is empty, nothing will be rendered to the webpage if we were to run our app. To create our first component, and see it in action, we're gonna need two files: &lt;strong&gt;index.js&lt;/strong&gt; and &lt;strong&gt;App.js&lt;/strong&gt;. Each one will look like this for now:&lt;/p&gt;

&lt;p&gt;index.js&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C9kgl1_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2b11nms1znmgpfhp7rkq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C9kgl1_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2b11nms1znmgpfhp7rkq.png" alt="Initial index.js code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;App.js&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S3Obxtqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3x3m43ily01t6vmw8m68.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S3Obxtqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3x3m43ily01t6vmw8m68.png" alt="Initial App.js code"&gt;&lt;/a&gt;&lt;br&gt;
Now, we can finally start creating our weather forecast app!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-hooks" class="anchor"&gt;
  &lt;/a&gt;
  Working with hooks
&lt;/h2&gt;

&lt;p&gt;Since this is a weather forecast app, I'd like to give the user their initial location's forecast, and after that, they can choose to look for a different city's data. To do that, we'll use the &lt;a href="https://reactjs.org/docs/hooks-effect.html"&gt;useEffect()&lt;/a&gt; hook, the &lt;a href="https://reactjs.org/docs/hooks-state.html"&gt;useState()&lt;/a&gt; hook and the &lt;a href="https://developer.mozilla.org/es/docs/Web/API/Geolocation/getCurrentPosition"&gt;getCurrentPosition()&lt;/a&gt; function from the Geolocation API.&lt;/p&gt;

&lt;p&gt;So, when the user launches the app, we want to get their current geographical coordinates and store them in state as an object. This is what that looks like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--okwKG2D7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/73lqcmqv5lj2wyka4mqj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--okwKG2D7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/73lqcmqv5lj2wyka4mqj.png" alt="Code for getting current location and sending it to the console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Woah! Where did all that code come from? Let me explain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usestate" class="anchor"&gt;
  &lt;/a&gt;
  useState()
&lt;/h3&gt;

&lt;p&gt;The useState() hook sets state for a React component. It returns two values that we can get by declaring an array. First, a default value for the state variable that we want to set (an empty object in this case). Second, a function that we can call later to set the value of this state variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useeffect" class="anchor"&gt;
  &lt;/a&gt;
  useEffect()
&lt;/h3&gt;

&lt;p&gt;useEffect() is a tricky but powerful hook. It runs after initial render and also after every update. By specifying an empty array as a second argument, we tell this hook to only run on initial render. If we populate that array with one or more state variables, the hook will run after any of those variables changes. &lt;br&gt;
So, this hook will run as the page renders, it will ask the user for permission to access their location, and will save that location data in state.&lt;/p&gt;

&lt;p&gt;Now, as soon as the app launches, it'll ask the user for their location. If the user allows geolocation, we'll store their coordinates as an object in state. We'll handle the case in which the user blocks location in the future, for now, we'll assume that users always allow us to know their current location.&lt;/p&gt;

&lt;p&gt;You can see that we have a button for displaying the geological information to the devtools console. Try it!&lt;/p&gt;

</description>
      <category>react</category>
      <category>hooks</category>
      <category>webdev</category>
      <category>fetch</category>
    </item>
    <item>
      <title>What's the longest you've ever spent debugging a single bug?</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 03 Feb 2021 02:56:23 +0000</pubDate>
      <link>https://dev.to/ben/what-s-the-longest-you-ve-ever-spent-debugging-a-single-bug-op4</link>
      <guid>https://dev.to/ben/what-s-the-longest-you-ve-ever-spent-debugging-a-single-bug-op4</guid>
      <description></description>
      <category>discuss</category>
    </item>
    <item>
      <title>JavaScript Monorepo Tools</title>
      <author>üÖ∞Ô∏è Geek</author>
      <pubDate>Wed, 03 Feb 2021 01:56:25 +0000</pubDate>
      <link>https://dev.to/ageekdev/javascript-monorepo-tools-34g9</link>
      <guid>https://dev.to/ageekdev/javascript-monorepo-tools-34g9</guid>
      <description>&lt;p&gt;If you're new to monorepo, read my previous post &lt;a href="https://ageek.dev/monorepo"&gt;on adoption of monorepo&lt;/a&gt; first to have a good understanding of what it is, who's using it, and whether it is a thing for you.&lt;/p&gt;

&lt;p&gt;To manage a multi-language monorepo, you have to use powerful and complicated build systems like &lt;a href="https://buck.build"&gt;Buck&lt;/a&gt;, &lt;a href="https://bazel.build"&gt;Bazel&lt;/a&gt;, &lt;a href="https://www.pantsbuild.org/"&gt;Pants&lt;/a&gt;, or &lt;a href="https://please.build"&gt;Please&lt;/a&gt;. These tools are great for enterprise-level projects but seem a bit overkill for individuals or small teams.&lt;/p&gt;

&lt;p&gt;This post focuses only managing an almost pure JavaScript/TypeScript monorepo (Also called multi-package monorepo) including websites built with JavaScript frameworks, Node-based servers, React Native mobile apps, or shared npm packages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;monorepo-root
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ package-one
‚îÇ   ‚îú‚îÄ‚îÄ package.json
‚îÇ   ‚îî‚îÄ‚îÄ index.js
‚îî‚îÄ‚îÄ package-two
    ‚îú‚îÄ‚îÄ package.json
    ‚îî‚îÄ‚îÄ index.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The expectation is low when you just want a streamline workflow of dealing with git, npm packages, and npm scripts. You can use built-in workspaces feature provided by &lt;a href="https://ageek.dev/javascript-package-managers"&gt;JavaScript package managers&lt;/a&gt; or dedicated JavaScript monorepo tools like &lt;a href="https://lerna.js.org/"&gt;Lerna&lt;/a&gt;, &lt;a href="https://rushjs.io/"&gt;Rush&lt;/a&gt;, &lt;a href="https://nx.dev/"&gt;Nx&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workspaces-by-package-managers" class="anchor"&gt;
  &lt;/a&gt;
  Workspaces by Package Managers
&lt;/h2&gt;

&lt;p&gt;Notable package managers like Yarn, Npm, or Pnpm have built-in feature called workspaces aim to make working with monorepo easy.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://yarnpkg.com/features/workspaces"&gt;Yarn workspaces&lt;/a&gt; (since v1)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.npmjs.com/cli/v7/using-npm/workspaces"&gt;Npm workspaces&lt;/a&gt; (since v7)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pnpm.js.org/en/workspaces"&gt;Pnpm workspaces&lt;/a&gt; (since v3.7.0)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Workspaces is a generic term that refers to the set of features in package manager CLI that provides support to managing multiple packages from your local files system from within a singular top-level, root package. Workspaces are usually defined via the workspaces property of the package.json file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"monorepo-root"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"workspaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"package-one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"package-two"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"packages/*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This set of features makes up for a much more streamlined workflow handling linked packages from the local file system. Automating the linking process as part of &lt;strong&gt;install&lt;/strong&gt; command and avoiding manually having to use &lt;strong&gt;link&lt;/strong&gt; command in order to add references to packages that should be symlinked into the current node_modules folder.&lt;/p&gt;

&lt;p&gt;When a workspace is packed into an archive (whether it's through &lt;strong&gt;pack&lt;/strong&gt; or &lt;strong&gt;publish&lt;/strong&gt;), package manager will dynamically update associated semver range.&lt;/p&gt;

&lt;p&gt;At minimum, you‚Äôll be able to keep multiple related packages all together in a single repository, and test changes in an integrated environment, without continually re-linking.&lt;/p&gt;

&lt;p&gt;Not possible for more advanced workspace management features like building, versioning, managing permissions, and publishing all the packages within a workspace together with a single command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lerna" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://lerna.js.org/"&gt;Lerna&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Lerna is a tool that optimizes the workflow around managing multi-package repositories with git and npm. Your repository will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;monorepo-root
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ lerna.json
‚îú‚îÄ‚îÄ packages
‚îÇ   ‚îú‚îÄ‚îÄ package-three
‚îÇ       ‚îú‚îÄ‚îÄ package.json
‚îÇ       ‚îî‚îÄ‚îÄ index.js
‚îú‚îÄ‚îÄ package-one
‚îÇ   ‚îú‚îÄ‚îÄ package.json
‚îÇ   ‚îî‚îÄ‚îÄ index.js
‚îî‚îÄ‚îÄ package-two
    ‚îú‚îÄ‚îÄ package.json
    ‚îî‚îÄ‚îÄ index.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Your lerna.json will look similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.1.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"npmClient"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"bootstrap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"npmClientArgs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"--no-package-lock"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"packages"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"package-one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"package-two"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"packages/*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lerna is good at versioning in both fixed and independent mode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Fixed mode Lerna projects operate on a single version line kept in lerna.json. If a module has been updated since the last time a release was made, it will be updated to the new version you're releasing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Independent mode Lerna projects allows maintainers to increment package versions independently of each other. Each time you publish, you will get a prompt for each package that has changed to specify if it's a patch, minor, major or custom change.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lerna support filtering packages by name, hoisting common dependencies to root, automatic local linking, versioning, bulk publishing, diffing changes since last release, or running arbitrary commands.&lt;/p&gt;

&lt;p&gt;Lerna operates in a higher level than above package managers' workspaces but not close to a build system when it has no support for build languages, caching, action directed graphs, or incremental builds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rush" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://rushjs.io/"&gt;Rush&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Rush makes life easier for JavaScript developers who build and publish many packages from a common Git repo.&lt;/p&gt;

&lt;p&gt;Rush's unique installation strategy produces a single shrinkwrap/lock file for all your projects that installs extremely fast. Rush supports parallel builds, subset builds, and incremental builds.&lt;/p&gt;

&lt;p&gt;Repo policies allow new package dependencies to be reviewed before they are accepted. Rush can enforce consistent dependency versions across your repo. Different subsets of projects can publish separately with lockstep or independent versioning strategies, private releases, and so forth.&lt;/p&gt;

&lt;p&gt;Rush's isolated symlinking model eliminates npm phantom dependencies, ensuring you'll never again accidentally import a library that was missing from package.json.&lt;/p&gt;

&lt;p&gt;Rush helps to ensure that installs and builds are completely deterministic. If you define custom commands or options, they are strictly validated and documented as part of Rush's command-line help.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nx" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://nx.dev/"&gt;Nx&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Nx is a set of extensible dev tools for monorepo, has first-class support for many frontend and backend technologies like Angular, React, and Node.&lt;/p&gt;

&lt;p&gt;Nx is smart when it analyzes your workspace and figures out what can be affected by every code change and only rebuilds what is necessary.&lt;/p&gt;

&lt;p&gt;Nx has support for distributed and incremental builds. If someone has already built or tested similar code, Nx will use their results to speed up the command for everyone else instead of rebuilding or retesting the code from scratch.&lt;/p&gt;

&lt;p&gt;Nx is an open platform with plugins for many modern tools and frameworks. It has support for TypeScript, React, Angular, Cypress, Jest, Prettier, Nest.js, Next.js, Storybook, Ionic among others. With Nx, you get a consistent dev experience regardless of the tools used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Package managers' workspaces is good at optimizing &lt;code&gt;node_modules&lt;/code&gt; installation and nothing else, you need dedicated tools to actually orchestrate a monorepo.&lt;/p&gt;

&lt;p&gt;Lerna is fast to get started with very little configuration, good at running scripts in packages, can be used together with package managers' workspaces to improve bootstrap performance. Following are notable public lerna-based monorepos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebook/jest"&gt;jest&lt;/a&gt; - delightful JavaScript testing&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/babel/babel"&gt;babel&lt;/a&gt; - compiler for writing next generation JavaScript&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebook/create-react-app"&gt;create-react-app&lt;/a&gt; - create React apps with no build configuration&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ReactTraining/react-router"&gt;react-router&lt;/a&gt; - declarative routing for React&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nx and Rush are way more complicated, optimized for &lt;a href="https://ageek.dev/javascript-tooling"&gt;JavaScript Tooling&lt;/a&gt;, close to a build system in terms of features and learning curve.&lt;/p&gt;

&lt;p&gt;Above tools makes life easier for JavaScript developers who build and publish many npm packages at once. Lerna is a safe start, switch to Rush when build time getting out of hand, or a complete build system when monorepo is not pure JavaScript anymore.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>monorepo</category>
    </item>
    <item>
      <title>How to setup scheduled cron jobs in Node.js</title>
      <author>Michael Burrows</author>
      <pubDate>Tue, 02 Feb 2021 22:36:05 +0000</pubDate>
      <link>https://dev.to/michaelburrows/how-to-setup-scheduled-cron-jobs-in-node-js-4926</link>
      <guid>https://dev.to/michaelburrows/how-to-setup-scheduled-cron-jobs-in-node-js-4926</guid>
      <description>&lt;p&gt;In this tutorial you‚Äôll learn how to schedule cron jobs in Node.js. Typically cron jobs are used to automate system maintenance but can also be used for scheduling file downloads or sending emails at regular intervals.&lt;/p&gt;

&lt;p&gt;Let‚Äôs first setup our project by running the following commands :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir cron-jobs
cd cron jobs
npm init -y
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We‚Äôll be using the &lt;a href="https://www.npmjs.com/package/node-cron"&gt;node-cron&lt;/a&gt; package which simplifies creating cron jobs in node.js using the full crontab syntax. Run the following command to install &lt;code&gt;node-cron&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install node-cron
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With node-cron installed create a new &lt;code&gt;index.js&lt;/code&gt; file with a sample cron job that will run every minute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cron&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-cron&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;* * * * *&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Running each minute&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The asterisks are part of the crontab syntax used to represent different units of time. Five asterisks represents the crontab default which will run every minute.&lt;/p&gt;

&lt;p&gt;Here‚Äôs what unit of time each of the asterisks represent and the values allowed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ second (optional 0 - 59) 
| ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ minute (0 - 59)
| | ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ hour (0 - 23)
| | | ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of month (1 - 31)
| | | | ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ month (1 - 12)
| | | | | ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of week (0 - 7, 0 or 7 are sunday)
| | | | | | 
| | | | | |
* * * * * *
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#schedule-cron-jobs-dailyweeklymonthly" class="anchor"&gt;
  &lt;/a&gt;
  Schedule cron jobs daily/weekly/monthly
&lt;/h2&gt;

&lt;p&gt;Run at midnight every day:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 * * *&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// task to run daily&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Run every Sunday at midnight:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 * * 0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// task to run weekly&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Run on the first day of every month at midnight:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 1 * *&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// task to run monthly&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you‚Äôre struggling to understand exactly how the crontab syntax works check out &lt;a href="https://crontab.guru/"&gt;crontab guru&lt;/a&gt;. This website provides a simple editor that displays the cron schedule based on the cron syntax you input:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kdCLXp3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9gyyjefjijcrfuakfwjl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kdCLXp3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9gyyjefjijcrfuakfwjl.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That‚Äôs all for this tutorial. Hopefully you now know how to a setup a cron job to save time on things you may have done manually in the past. As always thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
