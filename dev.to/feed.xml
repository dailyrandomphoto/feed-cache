<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Quick Sort (JS Example)</title>
      <author>Clean Code Studio</author>
      <pubDate>Tue, 13 Jul 2021 17:04:43 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/quick-sort-1hjp</link>
      <guid>https://dev.to/cleancodestudio/quick-sort-1hjp</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: This is not a "professionally written" post. This is a post sharing personal notes I wrote down while preparing for FAANG interviews.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.cleancode.studio/notes/faang-interview-notes"&gt;See all of my Google, Amazon, &amp;amp; Facebook interview study notes&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#quicksort-breakdown"&gt;
  &lt;/a&gt;
  Quicksort Breakdown
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Worst Complexity: n^2&lt;/li&gt;
&lt;li&gt;Average Complexity: n*log(n)&lt;/li&gt;
&lt;li&gt;Best Complexity: n*log(n)&lt;/li&gt;
&lt;li&gt;Method: Partitioning&lt;/li&gt;
&lt;li&gt;Class: Comparison Sort&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#quicksort-explained"&gt;
  &lt;/a&gt;
  Quicksort Explained
&lt;/h2&gt;

&lt;p&gt;Quicksort is an in-place sorting algorithm. Developed by British computer scientist Tony Hoare in 1959 and published in 1961, it is still a commonly used algorithm for sorting. When implemented well, it can be somewhat faster than merge sort and about two or three times faster than heapsort. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quicksort-notes"&gt;
  &lt;/a&gt;
  Quicksort Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Inventor: Tony Hoare&lt;/li&gt;
&lt;li&gt;Unstable Sorting Algorithm&lt;/li&gt;
&lt;li&gt;Quicksort has a better space complexity than merge sort&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#quicksort-javascript-implementation"&gt;
  &lt;/a&gt;
  Quicksort JavaScript Implementation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*----------------------------------------------------------
 |   Quick Sort
 *----------------------------------------------------------
 |
 |   Time Complexity 
 |      . Best: O(n log n)
 |      . Aver: O(n log n)
 |      . Worst: O(n^2) 
 | 
 |   Space Complexity
 |      . O(log n)
 |
 |   Divide And Conquer Sort
 |   UnStable Sort
 |
 |   Better Space Complexity Than Merge Sort
 |   Time Complexity Worst Case Is Worse Than Merge Sort
 |   Merge Sort is A Stable Sort While Quick Sort is an Unstable Sort
 |
 */&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;QuickSort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;
    &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;pivot&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;QuickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[]),&lt;/span&gt; &lt;span class="nx"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;QuickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[])]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;QuickSort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.cleancode.studio/notes/faang-interview-notes"&gt;My FAANG interview study notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/zhorton34/data-structures-algorithms-101/blob/master/src/sorts/QuickSort.js"&gt;Quick Sort Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cleancode.studio/clean-code"&gt;Clean Code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
      <category>quicksort</category>
      <category>faang</category>
    </item>
    <item>
      <title>Merge Sort (JS Example)</title>
      <author>Clean Code Studio</author>
      <pubDate>Tue, 13 Jul 2021 16:56:08 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/merge-sort-javascript-example-3d6d</link>
      <guid>https://dev.to/cleancodestudio/merge-sort-javascript-example-3d6d</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: This is not a "professionally written" post. This is a post sharing personal notes I wrote down while preparing for FAANG interviews.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.cleancode.studio/notes/faang-interview-notes"&gt;See all of my Google, Amazon, &amp;amp; Facebook interview study notes&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#merge-sort-breakdown"&gt;
  &lt;/a&gt;
  Merge Sort Breakdown
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Worst Complexity: n*log(n)&lt;/li&gt;
&lt;li&gt;Average Complexity: n*log(n)&lt;/li&gt;
&lt;li&gt;Best Complexity: n*log(n)&lt;/li&gt;
&lt;li&gt;Space Complexity: n&lt;/li&gt;
&lt;li&gt;Method: Merging&lt;/li&gt;
&lt;li&gt;Stable: Yes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#merge-sort-explained"&gt;
  &lt;/a&gt;
  Merge Sort Explained
&lt;/h2&gt;

&lt;p&gt;In computer science, merge sort is an efficient, general-purpose, and comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the order of equal elements is the same in the input and output. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#merge-sort-notes"&gt;
  &lt;/a&gt;
  Merge Sort Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Divide &amp;amp; Conquer sorting algorithm&lt;/li&gt;
&lt;li&gt;Stable sorting algorithm&lt;/li&gt;
&lt;li&gt;Quick sort has a better space complexity than merge sort&lt;/li&gt;
&lt;li&gt;Merge sort is a stable sort while quick sort is unstable&lt;/li&gt;
&lt;li&gt;Merge sort's worst case time complexity is better than quick sorts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#merge-sort-javascript-implementation"&gt;
  &lt;/a&gt;
  Merge Sort JavaScript Implementation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*----------------------------------------------------------
 |   Merge Sort
 *----------------------------------------------------------
 |
 |   Time Complexity 
 |      . Best: O(n log n)
 |      . Aver: O(n log n)
 |      . Worst: O(n log n) 
 | 
 |   Space Complexity
 |      . O(n)
 |
 |   Divide And Conquer Sort
 |   Stable Sort
 |   Quick Sort Has A Better Space Complexity Than Merge Sort
 |   Merge Sorts Worst Case Time Complexity Is Better Than Quick Sort
 |   Merge Sort is A Stable Sort While Quick Sort is an Unstable Sort
 */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;merge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;merged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;compare&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;side&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;merged&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;side&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;merged&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;merged&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;merged&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MergeSort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;middle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;MergeSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;MergeSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MergeSort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.cleancode.studio/notes/faang-interview-notes"&gt;My FAANG interview study notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/zhorton34/data-structures-algorithms-101/blob/master/src/sorts/MergeSort.js"&gt;Merge Sort Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cleancode.studio/clean-code"&gt;Clean Code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
      <category>faang</category>
      <category>sort</category>
    </item>
    <item>
      <title>Selection Sort (JS Example)</title>
      <author>Clean Code Studio</author>
      <pubDate>Tue, 13 Jul 2021 16:48:27 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/selection-sort-js-example-2n57</link>
      <guid>https://dev.to/cleancodestudio/selection-sort-js-example-2n57</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: This is not a "professionally written" post. This is a post sharing personal notes I wrote down while preparing for FAANG interviews.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.cleancode.studio/notes/faang-interview-notes"&gt;See all of my Google, Amazon, &amp;amp; Facebook interview study notes&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#selection-sort-breakdown"&gt;
  &lt;/a&gt;
  Selection Sort Breakdown
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Worst Complexity: n^2&lt;/li&gt;
&lt;li&gt;Average Complexity: n^2&lt;/li&gt;
&lt;li&gt;Best Complexity: n^2&lt;/li&gt;
&lt;li&gt;Space Complexity: 1&lt;/li&gt;
&lt;li&gt;Method: Selection&lt;/li&gt;
&lt;li&gt;Stable: No&lt;/li&gt;
&lt;li&gt;Class: Comparison Sort&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#selection-sort-notes"&gt;
  &lt;/a&gt;
  Selection Sort Notes
&lt;/h2&gt;

&lt;p&gt;In computer science, selection sort is an in-place comparison sorting algorithm. It has an O(n²) time complexity, which makes it inefficient on large lists, and generally performs worse than the similar insertion sort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selection-sort-javascript-implementation"&gt;
  &lt;/a&gt;
  Selection Sort JavaScript Implementation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*----------------------------------------------------------
 |   Selection Sort
 *----------------------------------------------------------
 |
 |   Time Complexity 
 |      . Best: O(n^2)
 |      . Aver: O(n^2)
 |      . Worst: O(n^2) 
 | 
 |   Space Complexity
 |      . O(1)
 |
 */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SelectionSort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;passes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;passes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;passes&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;passes&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;passes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
        &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;passes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;temporary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;passes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;passes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temporary&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SelectionSort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="https://www.cleancode.studio/notes/faang-interview-notes"&gt;My FAANG interview study notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/zhorton34/data-structures-algorithms-101/blob/master/src/sorts/SelectionSort.js"&gt;Selection Sort Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cleancode.studio/clean-code"&gt;Clean Code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>selectionsort</category>
      <category>javascript</category>
      <category>faang</category>
    </item>
    <item>
      <title>Insertion Sort (JS Example)</title>
      <author>Clean Code Studio</author>
      <pubDate>Tue, 13 Jul 2021 16:40:03 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/insertion-sort-18g7</link>
      <guid>https://dev.to/cleancodestudio/insertion-sort-18g7</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: This is not a "professionally written" post. This is a post sharing personal notes I wrote down while preparing for FAANG interviews.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.cleancode.studio/notes/faang-interview-notes"&gt;See all of my Google, Amazon, &amp;amp; Facebook interview study notes&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#insertion-sort-breakdown"&gt;
  &lt;/a&gt;
  Insertion Sort Breakdown
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Worst Complexity: n^2&lt;/li&gt;
&lt;li&gt;Average Complexity: n^2&lt;/li&gt;
&lt;li&gt;Best Complexity: n&lt;/li&gt;
&lt;li&gt;Space Complexity: 1&lt;/li&gt;
&lt;li&gt;Method: Insertion&lt;/li&gt;
&lt;li&gt;Stable: Yes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#insertion-sort-notes"&gt;
  &lt;/a&gt;
  Insertion Sort Notes
&lt;/h2&gt;

&lt;p&gt;Insertion sort is a simple sorting algorithm that builds the final sorted array one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort. Wikipedia&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#insertion-sort-javascript-implementation"&gt;
  &lt;/a&gt;
  Insertion Sort JavaScript Implementation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;InsertionSort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;+&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;temporary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

      &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;temporary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;          
        &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temporary&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;InsertionSort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.cleancode.studio/notes/faang-interview-notes"&gt;My FAANG interview study notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/zhorton34/data-structures-algorithms-101/blob/master/src/sorts/InsertSort.js"&gt;Insertion Sort Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cleancode.studio/clean-code"&gt;Clean Code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>insertionsort</category>
      <category>javascript</category>
      <category>algorithms</category>
      <category>faang</category>
    </item>
    <item>
      <title>Firebase Auth | Understanding The Auth</title>
      <author>Nukala Suraj</author>
      <pubDate>Tue, 13 Jul 2021 16:21:54 +0000</pubDate>
      <link>https://dev.to/lucidmach/firebase-auth-understanding-the-auth-17go</link>
      <guid>https://dev.to/lucidmach/firebase-auth-understanding-the-auth-17go</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;NOTE: This blog post assumes that you are at-least familiar with setting up firebase SDK&lt;br&gt;
If you don't I'd recommend reading my blog on &lt;a href="https://dev.to/lucidmach/the-20-firebase-that-ll-do-80-of-the-task-a-firestore-cheatsheet-304p"&gt;firebase firestore&lt;/a&gt; first&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you've built an application, you've probably had to deal with authentication and authorization&lt;/p&gt;

&lt;p&gt;Contrary to Popular Belief&lt;br&gt;
&lt;code&gt;authentication !== authorization&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#difference-between-authentication-and-authorization"&gt;
  &lt;/a&gt;
  Difference Between Authentication and Authorization
&lt;/h2&gt;

&lt;p&gt;Consider A School&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TOA-8Zgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.pngall.com/wp-content/uploads/2018/04/School-PNG-Pic.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TOA-8Zgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.pngall.com/wp-content/uploads/2018/04/School-PNG-Pic.png" alt="School"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The School has a Principal&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Fe03fx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://image.flaticon.com/icons/png/512/1999/1999321.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Fe03fx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://image.flaticon.com/icons/png/512/1999/1999321.png" alt="Principal"&gt;&lt;/a&gt;&lt;br&gt;
He Decides&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If a Student Joins the School&lt;/li&gt;
&lt;li&gt;If a Student Gets Debarred&lt;/li&gt;
&lt;li&gt;If a Student Gets Promoted (Despite Failing Tests)&lt;/li&gt;
&lt;li&gt;If a Student Gets Demoted
...&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The School also has a Security Guard&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9h-2E746--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://image.flaticon.com/icons/png/512/2124/2124268.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9h-2E746--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://image.flaticon.com/icons/png/512/2124/2124268.png" alt="Security"&gt;&lt;/a&gt;&lt;br&gt;
He Decides&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If/When a Person can Enter the Campus&lt;/li&gt;
&lt;li&gt;If/When a Person can Leave the Campus
...&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now as an Analogy&lt;br&gt;
&lt;code&gt;Authentication: Principal&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Authorization: Security Guard&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-authentication"&gt;
  &lt;/a&gt;
  What is Authentication
&lt;/h3&gt;

&lt;p&gt;The Process of Verifying the Identity of a User&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#steps-in-authentication"&gt;
  &lt;/a&gt;
  Steps in Authentication
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Creating An Account&lt;/li&gt;
&lt;li&gt;Verifying An Account Email Address&lt;/li&gt;
&lt;li&gt;Login/Sign-In&lt;/li&gt;
&lt;li&gt;Password Recovery&lt;/li&gt;
&lt;li&gt;Sign Out&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#firebase-authentication"&gt;
  &lt;/a&gt;
  Firebase Authentication
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-creating-an-account"&gt;
  &lt;/a&gt;
  1. Creating An Account
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase.auth().createUserWithEmailAndPassword(
  email,
  password
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE: You Receive a Promise from any Function from Firebase &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#2-signout"&gt;
  &lt;/a&gt;
  2. SignOut
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase.auth().signOut()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE: Firebase removes the token stored on the client's localStorage (indexdb to be precise). It'll talk about it in detail in &lt;code&gt;Authorization&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#3-login"&gt;
  &lt;/a&gt;
  3. Login
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase.auth().signInWithEmailAndPassword(
  email, 
  password
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4-verifying-an-account-email"&gt;
  &lt;/a&gt;
  4. Verifying An Account Email
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// sends a pre-templated message to a specified email address
firebase.auth().sendEmailVerification(
  email,
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#5-password-recovery"&gt;
  &lt;/a&gt;
  5. Password Recovery
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase.auth().sendPasswordResetEmail(
  email
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#authorization"&gt;
  &lt;/a&gt;
  Authorization
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-authorization"&gt;
  &lt;/a&gt;
  What is Authorization
&lt;/h3&gt;

&lt;p&gt;The Process of Controlling Access to an Asset &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-firebase-authorize"&gt;
  &lt;/a&gt;
  How Does Firebase Authorize
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;When Ever A User's Auth State Changes

&lt;ol&gt;
&lt;li&gt;It Updates A User Token
&amp;gt; Very Similar To JWT but not restricted to web application&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;If A Valid User Token is Present, A User is allowed to Access the Resource&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#accessing-user-token-checking-auth-state"&gt;
  &lt;/a&gt;
  Accessing User Token / Checking Auth State
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firebase.auth().onAuthStateChanged((user) =&amp;gt; {
  if (user) {
    // User is signed in, see docs for a list of available properties
    // https://firebase.google.com/docs/reference/js/firebase.User
    var uid = user.uid;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>firebase</category>
      <category>security</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Compound components - React</title>
      <author>Sune Seifert</author>
      <pubDate>Tue, 13 Jul 2021 16:07:35 +0000</pubDate>
      <link>https://dev.to/bqardi/compound-components-react-1ag8</link>
      <guid>https://dev.to/bqardi/compound-components-react-1ag8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-are-compound-components"&gt;
  &lt;/a&gt;
  What are compound components?
&lt;/h3&gt;

&lt;p&gt;Compound components are just a set of components that belong to each other and work great together.&lt;br&gt;
They are also super flexible and very scalable.&lt;/p&gt;

&lt;p&gt;In this tutorial I will focus on a very simple card component example that hopefully explains itself and how easy the compound component pattern really is.&lt;/p&gt;

&lt;p&gt;If you want more information on compound components, you can find a good amount of tutorials/videos out on the great internet, here are some of my favourites that made me start using the compound components pattern:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kentcdodds.com/blog/compound-components-with-react-hooks"&gt;Kent C. Dodds - React Hooks: Compound Components&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;He uses function components with hooks and explains compound components well, but while he uses a great example for a use case, I think it's a little too hard to understand for beginners, because he uses useCallback and useMemo together with custom hooks and context (I also use context and custom hooks, but not using useCallback and useMemo I believe it is much easier to understand the concept of compound components).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=hEGg-3pIHlE"&gt;Ryan Florence - Compound Components&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This guy is funny and also explains compound components well. He uses class components which is just another (old?) way to create components and in my tutorial I focus on function components, just bear that in mind.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#card-component-as-compound-component"&gt;
  &lt;/a&gt;
  Card component as compound component
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#the-basics"&gt;The basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#creating-a-scope-using-context"&gt;Creating a scope using context&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#condition-check-inside-the-child-component"&gt;Condition check inside the child component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#combining-condition-check-and-context-with-a-custom-hook"&gt;Combining condition check and context with a custom hook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#state-management"&gt;State management&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#the-power-of-compound-components"&gt;The power of compound components&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#flexibility"&gt;Flexibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#scalability"&gt;Scalability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#the-basics"&gt;
  &lt;/a&gt;
  The basics
&lt;/h4&gt;

&lt;p&gt;Let's start with the example, which in the end is just a div that takes in the children prop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Card"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which is used like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  // Content goes here
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point this is just a "normal" component, nothing special there.&lt;/p&gt;

&lt;p&gt;Let's add a heading, say an h2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Card__heading"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Maybe you have already seen this way of defining components before (multiple components in the same file), or maybe you just know that this is possible. In theory this is actually almost all there is to compound components. It's that easy, because now you can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My title&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is not so obvious that the Heading component "belongs" to the Card component, because you can just use the Heading component outside of Card:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My title&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  // Oh no, I want my Heading to only be in here!
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me show you a slightly different way of exporting the components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how I added the Heading component to the Card component as a property so the Heading now is a method of the Card object. This is because every component you make gets added to Reacts virtual DOM, which is just an object (a giant object), so if the Card component is just a property in the virtual DOM object, why not just add whatever you want to this Card property.&lt;/p&gt;

&lt;p&gt;To illustrate it a little better, here is how you use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My title&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think this makes it more obvious that the Heading "belongs" to the Card component, but remember, it is just a component, so you can still use the Heading component outside the Card component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My title&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  // Oh no, I want my Heading to only be in here!
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the very basics of compound components and you could stop here and say to yourself that you know how to create compound components, but there is so much more to compound components that make them super powerful and useful, especially in larger projects or for very complex components.&lt;/p&gt;

&lt;p&gt;I'll go over most of them here:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-a-scope-using-context"&gt;
  &lt;/a&gt;
  Creating a scope using context
&lt;/h4&gt;

&lt;p&gt;If we really want our child components to &lt;strong&gt;only&lt;/strong&gt; work inside the Card component (what I call scope), we must do some extra work (obviously). Here we can take advantage of the context API (don't be scared if you don't fully understand the concept of context, just follow along and it should hopefully make sense. You can also read more about the &lt;a href="https://reactjs.org/docs/context.html"&gt;context API&lt;/a&gt; if you want).&lt;/p&gt;

&lt;p&gt;Let's start by creating the context by importing the createContext hook from React and create a variable called CardContext that uses this hook (you can call the variable whatever you like, but I think CardContext is a good, descriptive name):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;CardContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need a provider for the context, but since we don't have any states or values we want to share via context we just use an empty object as the value in the value prop for the provider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;CardContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CardContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Card"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;CardContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The CardContext.Provider is, simply put, a container that holds any value &lt;code&gt;value={// whatever you want}&lt;/code&gt; which is then available to all nested children.&lt;/p&gt;

&lt;p&gt;To access the values we simply use the useContext hook in the child component that needs this access:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CardContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Card__heading"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the &lt;code&gt;context&lt;/code&gt; variable holds whatever value we define in the value prop of the provider &lt;code&gt;value={// whatever you want}&lt;/code&gt;, in our case this is just an empty object &lt;code&gt;value={{}}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The beauty of what we have created so far is that if we where to render &lt;code&gt;&amp;lt;Card.Heading&amp;gt;&lt;/code&gt; outside &lt;code&gt;&amp;lt;Card&amp;gt;&lt;/code&gt; (which is the provider), the &lt;code&gt;context&lt;/code&gt; variable inside &lt;code&gt;&amp;lt;Card.Heading&amp;gt;&lt;/code&gt; would be &lt;code&gt;undefined&lt;/code&gt;, while if rendered inside, would contain the empty object &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since this part is about scope and not about values available to child components through the use of context, let's create that scope by using the knowledge described above to make a condition check:&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#condition-check-inside-the-child-component"&gt;
  &lt;/a&gt;
  Condition check inside the child component
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CardContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;Card__scopeError&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        I want to be inside the Card component!
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Card__heading"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we now try to render &lt;code&gt;&amp;lt;Card.Heading&amp;gt;&lt;/code&gt; outside &lt;code&gt;&amp;lt;Card&amp;gt;&lt;/code&gt;, a p-tag with our "error message" is rendered instead of our h2 which forces us to only use it inside &lt;code&gt;&amp;lt;Card&amp;gt;&lt;/code&gt;. Great!&lt;/p&gt;

&lt;p&gt;Although if we make a lot of child components we would have to copy/paste the context and the condition check into each and every one of them. That, I don't like very much. While it would work fine, the code would be very &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;wet and not dry enough&lt;/a&gt;!&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#combining-condition-check-and-context-with-a-custom-hook"&gt;
  &lt;/a&gt;
  Combining condition check and context with a custom hook
&lt;/h5&gt;

&lt;p&gt;All the code before the &lt;code&gt;return&lt;/code&gt; statement inside &lt;code&gt;&amp;lt;Card.Heading&amp;gt;&lt;/code&gt; can be boiled down to a single line using a custom hook which makes it a lot cleaner and easier to create new child components.&lt;/p&gt;

&lt;p&gt;A custom hook is just a normal function with the benefit of having access to other hooks whether they are Reacts built in hooks like useState, useEffect, useRef and so on, or other custom hooks.&lt;br&gt;
There is one important rule to creating custom hooks and that is to start your function names with the word "use":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useObjectState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;objectState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you will get the following error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;React Hook "useState" is called in function "objectState" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter  react-hooks/rules-of-hooks
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay then, let's create this custom hook (the hook is just copied from Kent C. Dodds' code. Link is at the top or click &lt;a href="https://kentcdodds.com/blog/compound-components-with-react-hooks"&gt;here&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useCardContext&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CardContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Child components of Card cannot be rendered outside the Card component!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The sweet thing now is that every child component only have to use this custom hook, and the scope + context still works fine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useCardContext&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCardContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Card__heading"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it!&lt;/p&gt;

&lt;p&gt;Now, we are still not using any value through the context, but trust me, it will work. Don't believe me? Okay then, let's do that next, shall we:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#state-management"&gt;
  &lt;/a&gt;
  State management
&lt;/h4&gt;

&lt;p&gt;Say we wanted a simple button in our card that when clicked, toggled the border color around our entire card and maybe the text color of our heading also toggles.&lt;/p&gt;

&lt;p&gt;How would we do that?&lt;/p&gt;

&lt;p&gt;Well let's create the button component first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCardContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCardContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Card__button"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My title&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Toggle&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The button needs some state handling, so let's add that.&lt;br&gt;
A rule of thumb:&lt;br&gt;
Whenever we need to share state between our parent or child components, we should declare it at the parent level, in our case &lt;code&gt;&amp;lt;Card&amp;gt;&lt;/code&gt;. And since we have already created our context, the sharing is just super easy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggled&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CardContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggled&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;CardContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we just did was to create a state with useState and added &lt;code&gt;toggled&lt;/code&gt; and &lt;code&gt;setToggled&lt;/code&gt; to the value prop of the provider (&lt;code&gt;&amp;lt;CardContext.Provider value={{toggled, setToggled}}&amp;gt;&lt;/code&gt;. Did you notice how I "changed" the destructured array to an object with &lt;code&gt;toggled&lt;/code&gt; and &lt;code&gt;setToggled&lt;/code&gt; as properties?)&lt;/p&gt;

&lt;p&gt;And then in &lt;code&gt;&amp;lt;Card.Button&amp;gt;&lt;/code&gt; we grab &lt;code&gt;setToggled&lt;/code&gt; and use it in our onClick event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setToggled&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCardContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
      &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Card__button"&lt;/span&gt;
      &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setToggled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I like the destructuring syntax, where we only "pull out" the things we need &lt;code&gt;var {setToggled} = useCardContext();&lt;/code&gt;.&lt;br&gt;
You could also use the &lt;code&gt;context&lt;/code&gt; variable from before, but be aware of the syntax in the button onClick event &lt;code&gt;onClick={() =&amp;gt; context.setToggled(prev =&amp;gt; !prev)}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the border to toggle in &lt;code&gt;&amp;lt;Card&amp;gt;&lt;/code&gt; we just use the &lt;code&gt;toggled&lt;/code&gt; state to toggle a CSS class on the &lt;code&gt;div&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggled&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CardContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggled&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggled&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Card Card--highlight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;CardContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last thing we need is to grab &lt;code&gt;toggled&lt;/code&gt; from the context to make our heading also toggle color:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggled&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCardContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;toggled&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Card__heading Card__heading--highlight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Card__heading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There you have it. You can now manage state inside your component and share it with the rest of your child components, without ever exposing it to the outside. As Ryan Florence says in his talk (link in the top or go to the video &lt;a href="https://www.youtube.com/watch?v=hEGg-3pIHlE"&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is state that lives inside of this system.&lt;br&gt;
It's not application state. This isn't stuff that we wanna put over in Redux.&lt;br&gt;
It's not component state because my component has its own state here.&lt;br&gt;
This is it's own little system, it's own little world of components that has some state that we need to shuffle around.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So in compound component systems, you can create state that only lives inside this system, which in my opinion is very powerful.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-power-of-compound-components"&gt;
  &lt;/a&gt;
  The power of compound components
&lt;/h4&gt;

&lt;p&gt;Compound components are super powerful, and if you read or have read this tutorial, you will see that I mention this a lot, and that's because they are both flexible and scalable, but also once you understand this pattern they are very easy to create, use and work with.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#flexibility"&gt;
  &lt;/a&gt;
  Flexibility
&lt;/h5&gt;

&lt;p&gt;Did you notice that each of our child components (&lt;code&gt;&amp;lt;Card.Heading&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Card.Button&amp;gt;&lt;/code&gt;) only holds a single html (jsx) element? This is one of the things that makes the compound component pattern so very powerful, because now your &lt;code&gt;&amp;lt;Card&amp;gt;&lt;/code&gt; component just became very flexible, for example you can do this if you want:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  // Who says the button should'nt be above the title?
  // Well you do...! You decide where it should go.
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Toggle&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My title&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In contrast we could do this, which makes it look much simpler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"My title"&lt;/span&gt; &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but who now decides which order the title and button is rendered in? Should we add a prop to place the button above?:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"My title"&lt;/span&gt; &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;buttonAbove&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine having much more than two child components, how would you control the order then? A huge amount of props and sooo many if statements... No thanks!&lt;/p&gt;

&lt;p&gt;Which leads me to the next powerful thing I want to talk about:&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#scalability"&gt;
  &lt;/a&gt;
  Scalability
&lt;/h5&gt;

&lt;p&gt;How hard is it to add new features then?&lt;/p&gt;

&lt;p&gt;Well, the short answer is: SUPER FREAKIN' EASY!&lt;/p&gt;

&lt;p&gt;Let's do an example:&lt;/p&gt;

&lt;p&gt;Say we want a flexible image. One where we can decide if it's a normal image that we just insert where we need it, or it is styled differently for example an avatar and maybe the option to insert an image as a background image.&lt;/p&gt;

&lt;p&gt;Let's try:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="nx"&gt;useCardContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;
      &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Card__image&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; Card__image--&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My title&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Image&lt;/span&gt;
    &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/path/to/image.jpg"&lt;/span&gt;
    &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Our trip to the beach"&lt;/span&gt;
  &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Toggle&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Image&lt;/span&gt;
    &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/path/to/avatar-image.jpg"&lt;/span&gt;
    &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"This is me"&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"avatar"&lt;/span&gt;
  &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My title&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Toggle&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You would off course need proper styling for &lt;code&gt;Card__image--avatar&lt;/code&gt; and any other &lt;code&gt;type&lt;/code&gt; you pass in.&lt;/p&gt;

&lt;p&gt;So whenever you need a new feature, just add it in, it's that simple...&lt;/p&gt;

&lt;p&gt;That's all folks. Hope you got some insights to the power of compound components and how easy it really is to use and create...&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>patterns</category>
    </item>
    <item>
      <title>4 UI Resources All Devs Should Look Out For</title>
      <author>Francisco Mendes</author>
      <pubDate>Tue, 13 Jul 2021 15:55:25 +0000</pubDate>
      <link>https://dev.to/franciscomendes10866/4-ui-resources-all-devs-should-look-out-for-5eea</link>
      <guid>https://dev.to/franciscomendes10866/4-ui-resources-all-devs-should-look-out-for-5eea</guid>
      <description>&lt;p&gt;Today I decided to create a list with some UI features I like to use. I see many friends of mine constantly using the same tools/resources, which ends up bringing some repetition in their personal projects.&lt;/p&gt;

&lt;p&gt;Exactly because of this I decided to share some of the resources I use almost daily, from illustrations, shapes, tools, among others.&lt;/p&gt;

&lt;p&gt;Many of the things I'm going to share here may have paid plans, however to be honest, I only use the free plan and I'm more than satisfied for what I need.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-tabbied"&gt;
  &lt;/a&gt;
  1 - &lt;a href="https://tabbied.com/"&gt;Tabbied&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4kjh1LEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1626189039/Kapture_2021-07-13_at_16.09.07-min_tq1l7u.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4kjh1LEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1626189039/Kapture_2021-07-13_at_16.09.07-min_tq1l7u.gif" alt="tabbied website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are a big fan of patterns and mainly like generative tools to help in the process of creating them, this platform is ideal for you. &lt;/p&gt;

&lt;p&gt;It has several variants of patterns of great quality, you can choose the color palette and the size of the pattern.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-shapefest"&gt;
  &lt;/a&gt;
  2 - &lt;a href="https://www.shapefest.com/"&gt;Shapefest&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KWFGHger--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1626189968/Screenshot_2021-07-13_at_16-25-12_Shapefest_-_A_massive_library_of_free_3D_shapes-min_sexrb1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KWFGHger--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1626189968/Screenshot_2021-07-13_at_16-25-12_Shapefest_-_A_massive_library_of_free_3D_shapes-min_sexrb1.png" alt="shapefest website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think we've all gotten to the point where we thought we were fed up with using 2D illustrations over and over again. This website has several 3D illustrations that we can use on our website. &lt;/p&gt;

&lt;p&gt;All of high quality and with a large number of angles, shapes and textures. I recommend everyone to take a look, in my opinion it's all worth it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-sapiens"&gt;
  &lt;/a&gt;
  3 - &lt;a href="https://sapiens.ui8.net"&gt;Sapiens&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SjXOgGXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1626190652/Kapture_2021-07-13_at_16.35.22-min_fkq8jj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SjXOgGXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1626190652/Kapture_2021-07-13_at_16.35.22-min_fkq8jj.gif" alt="sapiens character builder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only illustrations that I have used in the last ones we have in my personal projects come from this platform. I think it's the most interesting and complete one out there. &lt;/p&gt;

&lt;p&gt;Besides we can customize the characters we can change the scenery and we still have three design variants to choose from (Colorful, Duotone, Outline).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-socialsizes"&gt;
  &lt;/a&gt;
  4 - &lt;a href="https://socialsizes.io/"&gt;SocialSizes&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3NcKvKWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1626191236/Kapture_2021-07-13_at_16.45.24-min_oq941v.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3NcKvKWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1626191236/Kapture_2021-07-13_at_16.45.24-min_oq941v.gif" alt="SocialSizes website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This platform is different from all the others mentioned above. If you have an online presence on platforms such as LinkedIn and Instagram, you can check the ideal dimensions for the publications you will make. &lt;/p&gt;

&lt;p&gt;You also have the possibility to download templates with the correct dimensions for any kind of publications with compatibility with some of the most famous tools (Figma, Photoshop, etc).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope this article has helped you in any way, from giving your applications a new look, to improving your visual consistency on social media.&lt;/p&gt;

&lt;p&gt;Please mention in the comments other platforms that you use on a daily basis and that would be interesting to share with the community. I'm really curious to know.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>uiweekly</category>
      <category>productivity</category>
      <category>tooling</category>
    </item>
    <item>
      <title>AWS VPC Basics. Building your first VPC with a public and private subnet</title>
      <author>Lee Wynne</author>
      <pubDate>Tue, 13 Jul 2021 15:50:45 +0000</pubDate>
      <link>https://dev.to/leewynne/aws-vpc-basics-building-your-first-vpc-with-a-public-and-private-subnet-22ll</link>
      <guid>https://dev.to/leewynne/aws-vpc-basics-building-your-first-vpc-with-a-public-and-private-subnet-22ll</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;Manually building your first VPC with a public and private subnet should definitely be one of your AWS newbie tasks, it will allow you to quickly get a grasp of how VPCs work and what we are trying to do here and why.&lt;/p&gt;

&lt;p&gt;Of course you can use the VPC wizard to do this but it is helpful just to create your first VPC manually, this way you can get an indication of the subnet ranges and services required to get you going with your very first VPC that has both a public and private subnet, both ready to host ec2 instances.&lt;/p&gt;

&lt;p&gt;These are the things we want to accomplish here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select an AWS region&lt;/li&gt;
&lt;li&gt;Create a VPC (a virtual private data centre) within the selected region.&lt;/li&gt;
&lt;li&gt;Assign a /16 network address range to our VPC&lt;/li&gt;
&lt;li&gt;Consider the subnets ranges you want to use with the VPC address range (we will be using /24)&lt;/li&gt;
&lt;li&gt;Create a single public subnet for one availability zone&lt;/li&gt;
&lt;li&gt;Attach an Internet Gateway for our public subnet.&lt;/li&gt;
&lt;li&gt;Create a single private subnet for one availability zone.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are using single availability zones only (designing fault tolerant distributed systems across multiple availability zones would be something that you would definately do in production)&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#select-a-region"&gt;
  &lt;/a&gt;
  Select a region
&lt;/h2&gt;

&lt;p&gt;Login to the AWS console and then choose the region at the top right (I am going for London, eu-west-2)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gkm4NzUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/w9qfjexe99xntbqafpnh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gkm4NzUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/w9qfjexe99xntbqafpnh.png" alt="London AWS region selection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-vpc"&gt;
  &lt;/a&gt;
  Create a VPC
&lt;/h2&gt;

&lt;p&gt;Now hit the services drop down option at the top and choose VPC (under Networking &amp;amp; Content Delivery) - from there hit create VPC at the top right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EgoK3lLo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/lwmwnfv2idydexrtiseo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EgoK3lLo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/lwmwnfv2idydexrtiseo.png" alt="create a vpc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fill-in-the-new-vpc-details"&gt;
  &lt;/a&gt;
  Fill in the new VPC details
&lt;/h2&gt;

&lt;p&gt;Next up, use the following details to fill in the VPC form:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name tag [your-vpc-name]&lt;/li&gt;
&lt;li&gt;IPv4 CIDR block [10.0.0.0/16] - this will give us 65,536 IP addresses to split up across the whole VPC in various subnet ranges.&lt;/li&gt;
&lt;li&gt;Tenancy, choose Default&lt;/li&gt;
&lt;li&gt;I have put some resource tags in as examples&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xE7K0E0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/2zl9gej2uf5bgo65o50g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xE7K0E0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/2zl9gej2uf5bgo65o50g.png" alt="AWS basic vpc settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit create.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-the-public-subnet"&gt;
  &lt;/a&gt;
  Create the public subnet
&lt;/h1&gt;

&lt;p&gt;You should still be in the VPC part of the AWS console, so look to the left and there will be a link to subnets, hit that link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uh8870s8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/mg0l7icbwgbqirp0nuc2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uh8870s8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/mg0l7icbwgbqirp0nuc2.jpg" alt="aws console create public subnet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the top right, hit create new subnet&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select the VPC that we just created&lt;/li&gt;
&lt;li&gt;Let's give the subnet a relevant name. I am going for 'public-subnet-myawesomevpc-eu-west-2a' (specifying public or private, resource type, vpc name and then region/az)&lt;/li&gt;
&lt;li&gt;For this example I am going for a /24 subnet in each AZ giving us a total of 254 per subnet (excluding management IPs) so 10.0.0.0/24&lt;/li&gt;
&lt;li&gt;Hit create&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hBEo2_YM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/oaask2umye6t8ix7csby.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hBEo2_YM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/oaask2umye6t8ix7csby.png" alt="aws console, create new public subnet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-the-internet-gateway"&gt;
  &lt;/a&gt;
  Create the Internet Gateway
&lt;/h1&gt;

&lt;p&gt;Okay so what makes the public subnet actually 'public' and different than the private subnet? The answer is simple, you attach an Internet Gateway to your VPC and then update the associated routing table to allow Internet traffic in and out of the subnet.&lt;/p&gt;

&lt;p&gt;Let's do that now:&lt;/p&gt;

&lt;p&gt;Still in the VPC dashboard, under subnets, hit 'Internet gateways'&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P4KMUrKB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/d5uspvvlrsg8goqfjr61.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4KMUrKB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/d5uspvvlrsg8goqfjr61.png" alt="aws console how to add internet traffic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Top right again, hit create new Internet Gateway. From there, fill in the Internet gateway form:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name, fill in a descriptive name&lt;/li&gt;
&lt;li&gt;Tag the resource appropriately.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ejRaFY4Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/ttioh1kx023zbctbeu7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ejRaFY4Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/ttioh1kx023zbctbeu7i.png" alt="aws create new internet gateway"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit create! Done.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#associating-the-internet-gateway-with-our-vpc"&gt;
  &lt;/a&gt;
  Associating the Internet Gateway with our VPC
&lt;/h1&gt;

&lt;p&gt;Hit Internet gateways again in the console, then click on the Internet gateway ID in the list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P2XF7Bo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/xd367djd0cznkt03qe7o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P2XF7Bo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/xd367djd0cznkt03qe7o.png" alt="AWS console associate internet gateway id"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the top right, hit actions and then 'attach to VPC' and from there select the VPC we created earlier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tfJLFkdM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/1vjfaxk7rx8m9et7dwrs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tfJLFkdM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/1vjfaxk7rx8m9et7dwrs.png" alt="aws console attach internet gateway to vpc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#update-the-public-subnet-route-table-to-send-traffic-to-the-internet"&gt;
  &lt;/a&gt;
  Update the public subnet route table to send traffic to the Internet.
&lt;/h1&gt;

&lt;p&gt;Now when we created our public subnet, AWS kindly created a route table for it, so all we need to do here is associate our new Internet gateway with a new route out to the Internet. &lt;/p&gt;

&lt;p&gt;You'll still be under the VPC dashboard, hit subnets, then under subnets, hit route tables and select the link under the route table ID.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HjRwzhr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/rcu4gwowlkd1yibh5gcf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HjRwzhr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/rcu4gwowlkd1yibh5gcf.png" alt="aws console create route table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will open up the route table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W0EDq9h7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/lm9a9ieavfe3an4judsz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W0EDq9h7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/lm9a9ieavfe3an4judsz.png" alt="aws console add route table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Towards the right, hit edit routes&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RY4Q9EhA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/r62xw7045ntuwogj13bl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RY4Q9EhA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/r62xw7045ntuwogj13bl.png" alt="aws console edit routes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit add route and insert 0.0.0.0/0 and then to the right, select the Internet gateway that we created earlier:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l5c7PJfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/gsfyj3bk5iug8zicppvg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l5c7PJfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/gsfyj3bk5iug8zicppvg.png" alt="aws console associate route table with internet gateway"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit save changes.&lt;/p&gt;

&lt;p&gt;Okay, cool - now we have a VPC, public subnet, route table and Internet gateway setup. If you want to drop an ec2 instance into the public subnet, all you would need to do is give it an Elastic IP address and you'll be able to access it from the Internet ensuring that you configure the security group for the ec2 instance and lock it down.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-the-private-subnet"&gt;
  &lt;/a&gt;
  Create the private subnet
&lt;/h1&gt;

&lt;p&gt;This is somewhat easier. As all we are doing is following the steps above but not associating the route table associated with the subnet to an Internet gateway.&lt;/p&gt;

&lt;p&gt;You should still be in the VPC dashboard, so again head towards subnets. Again we need to select our existing VPC and we will provide another /24 subnet range.&lt;/p&gt;

&lt;p&gt;Fill in the form like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VPC ID, select the VPC we created earlier from the drop down.&lt;/li&gt;
&lt;li&gt;Subnet name, private-subnet-myawesomevpc-eu-west-2a&lt;/li&gt;
&lt;li&gt;Availability Zone, I am again choosing London eu-west-2a as both my public and private subnet are in the same data centre and subnets do not span availablity zones in AWS.&lt;/li&gt;
&lt;li&gt;IPv4 CIDR block, 10.0.1.0/24&lt;/li&gt;
&lt;li&gt;Add some optional tags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--De6wehiz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/h1tf1odpic6jz8ta9w7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--De6wehiz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/h1tf1odpic6jz8ta9w7t.png" alt="aws private subnet aws console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it!&lt;/p&gt;

&lt;p&gt;Now if you drop an ec2 instance into your private subnet, it won't be accessible from the Internet because there is no direct route out to the Internet however, ec2 instances in all subnets can communicate with each other because the VPC has a default router than ensures that all subnets know how to make contact with each other. It is therefore up to you to ensure that routes are locked down and source/destination configuration takes place through ec2 security groups and network access control lists.&lt;/p&gt;

&lt;p&gt;There is more to come, I'll write another post that explains how to add a NAT gateway to your private subnet that will allow ec2 instances to access the Internet through a mask but no traffic will be allowed back in directly, therefore it remains private. &lt;/p&gt;

&lt;p&gt;You may always want to route the AWS private network into an on premises network through a VPN or MPLS network, again that is for a later post.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>beginners</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Setup Mocha in watch mode for TDD in Node.js</title>
      <author>Cédric Teyton</author>
      <pubDate>Tue, 13 Jul 2021 15:25:33 +0000</pubDate>
      <link>https://dev.to/promyze/setup-mocha-in-watch-mode-for-tdd-in-node-js-1mah</link>
      <guid>https://dev.to/promyze/setup-mocha-in-watch-mode-for-tdd-in-node-js-1mah</guid>
      <description>&lt;p&gt;&lt;strong&gt;Test-Driven Development&lt;/strong&gt; is a great developement (not testing) methodology. It definitively helps you to produce :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Minimal code to implement business needs&lt;/li&gt;
&lt;li&gt;Small functions &lt;/li&gt;
&lt;li&gt;Code covered by tests, avoiding later regressions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We use it everyday at &lt;a href="https://promyze.com?utm_source=DevTo&amp;amp;utm_medium=referral"&gt;Promyze&lt;/a&gt; and we definitively saw the benefits of coding in this way. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#illustration"&gt;
  &lt;/a&gt;
  Illustration
&lt;/h2&gt;

&lt;p&gt;Now, let's see how you can apply TDD with &lt;a href="https://mochajs.org/"&gt;Mocha&lt;/a&gt; with &lt;strong&gt;Typescript&lt;/strong&gt; on a &lt;strong&gt;Node.js&lt;/strong&gt; project. &lt;/p&gt;

&lt;p&gt;All the code is available on this &lt;a href="https://github.com/promyze/node-tdd-watcher"&gt;Github project&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-structure"&gt;
  &lt;/a&gt;
  Code Structure
&lt;/h3&gt;

&lt;p&gt;In this example we have this simple structure :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── domains
│   └── Bowling
│       ├── Game.spec.ts
│       └── Game.ts
├── LICENSE
├── package.json
├── package-lock.json
├── README.md
└── test
    └── mocha.spec.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;domains&lt;/em&gt; contains our source code, and &lt;em&gt;test&lt;/em&gt; contains my main test suite.&lt;/p&gt;

&lt;p&gt;Let's have a look at the code now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#packagejson"&gt;
  &lt;/a&gt;
  package.json
&lt;/h3&gt;

&lt;p&gt;The interesting part here is the &lt;strong&gt;scripts&lt;/strong&gt; section. As you can see, we added the &lt;em&gt;--watch&lt;/em&gt; option of Mocha in addition with the &lt;em&gt;--watch-files&lt;/em&gt; option. Here, all the code in &lt;em&gt;domain&lt;/em&gt; and &lt;em&gt;test&lt;/em&gt; folders will be checked for modification, and tests will be automatically run again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node-tu-wacher"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"@types/chai"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.2.18"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"@types/mocha"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^8.2.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"@types/node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^15.6.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"chai"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.3.4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"mocha"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^8.4.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ts-node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^10.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"typescript"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.3.2"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"engines"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;=14.16.1"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;" mocha -r ts-node/register test/mocha.spec.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"test:watch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;" mocha -r ts-node/register --watch --watch-files domains/**/*.ts,test/*.ts test/mocha.spec.ts"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testmochaspects"&gt;
  &lt;/a&gt;
  test/mocha.spec.ts
&lt;/h3&gt;

&lt;p&gt;This is the root test file that will import all my test suites :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;GameSpec&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../domains/Bowling/Game.spec&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Suite&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mocha&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server unit testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Suite&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Game&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GameSpec&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#domainsbowlinggamespects"&gt;
  &lt;/a&gt;
  domains/Bowling/Game.spec.ts
&lt;/h3&gt;

&lt;p&gt;Here we assume that I've just started to code a Bowling app. I wrote my first test :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chai&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Game&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Game&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Game testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should start a bowling game&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentScore&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#domainsbowlinggamets"&gt;
  &lt;/a&gt;
  domains/Bowling/Game.ts
&lt;/h3&gt;

&lt;p&gt;And here a basic implementation so that my first test can run :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Game&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;currentScore&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#see-it-in-action"&gt;
  &lt;/a&gt;
  See it in action
&lt;/h2&gt;

&lt;p&gt;The command &lt;strong&gt;npm run test:watch&lt;/strong&gt; will help me for my TDD session. Everytime a file is saved (CTRL+S with in your favorite IDE), tests would be run again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cteyton@laptop:~/node-tu-watcher$ npm run test:watch

&amp;gt; node-tu-wacher@1.0.0 test:watch /home/cteyton/Work/Promyze/blog/node-tu-watcher
&amp;gt;  mocha -r ts-node/register --watch --watch-files domains/**/*.ts,test/*.ts test/mocha.spec.ts

  Server unit testing
    Game
      Game testing
        ✓ should start a bowling game


  1 passing (2ms)

ℹ [mocha] waiting for changes...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get started now and have fun with TDD ;-)&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>tdd</category>
      <category>mocha</category>
      <category>typescript</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 13 Jul 2021 15:18:50 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-1poi</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-1poi</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security-in-the-cloud-is-a-shared-responsibility"&gt;
  &lt;/a&gt;
  Security in the cloud is a shared responsibility
&lt;/h2&gt;

&lt;p&gt;In the words of a community member &lt;a href="https://dev.to/irby/comment/1g812"&gt;Matt Irby&lt;/a&gt;, this is a fantastic explanation of the shared responsibility model. &lt;/p&gt;

&lt;p&gt;Great work, &lt;a class="mentioned-user" href="https://dev.to/adityagaur"&gt;@adityagaur&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders "&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rD5QcmlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--sZoRtWsP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/665539/0ce2c26e-09d1-45d1-b96b-02ffb326cfe7.jpeg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/10-steps-to-secure-your-cloud-2mhn" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 Steps To Secure Your Cloud&lt;/h2&gt;
      &lt;h3&gt;Aditya Gaur for AWS Community Builders  ・ Jul 12 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#a-very-important-numeronym"&gt;
  &lt;/a&gt;
  A very important numeronym
&lt;/h2&gt;

&lt;p&gt;... "A11y" that is. Thank you for this thorough and clear breakdown of the term, &lt;a class="mentioned-user" href="https://dev.to/ashleemboyer"&gt;@ashleemboyer&lt;/a&gt;
. It's definitely a critical one to me familiar with in this field!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ashleemboyer" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HylI3VLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--psW6D24i--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/156486/36dfc2ab-7625-4dc8-ad22-a269201ef821.jpeg" alt="ashleemboyer"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ashleemboyer/what-the-heck-is-web-a11y-blp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What the heck is "web a11y"?&lt;/h2&gt;
      &lt;h3&gt;Ashlee (she/her) ・ Jul 6 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#numeronym&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#notes-on-inheriting-code"&gt;
  &lt;/a&gt;
  Notes on inheriting code
&lt;/h2&gt;

&lt;p&gt;"There will always be a time in your life when you inherit code that was written by another developer," writes &lt;a class="mentioned-user" href="https://dev.to/towernter"&gt;@towernter&lt;/a&gt;
. In their guide on the subject, you'll learn what to do in this inevitable situation. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/towernter" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sz9bfChu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--kepsrAMY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/393559/e536d6a8-f2a6-47dd-a600-682c1ea4a48e.jpg" alt="towernter"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/towernter/getting-started-with-a-project-written-by-another-developer-1l61" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Getting started with a project written by another developer&lt;/h2&gt;
      &lt;h3&gt;Tawanda Nyahuye ・ Jul 9 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#pedros-research-is-your-gain"&gt;
  &lt;/a&gt;
  Pedro's research is your gain!
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/arantespp"&gt;@arantespp&lt;/a&gt;
 created this guide because they needed to work on a project that uses MongoDB. Completing the steps outlined in this guide gave them an overview of how MongoDB works. Their research is your gain ✨ &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/arantespp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QMF0gfim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--yHSSYfHz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/205070/b2d4d4b7-968c-48cc-b881-456664c1f116.jpg" alt="arantespp"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/arantespp/mongodb-shell-commands-running-on-docker-101-1l73" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;MongoDB shell commands (running on Docker) 101&lt;/h2&gt;
      &lt;h3&gt;Pedro Arantes ・ Jul 5 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#mongodb&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#docker&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#on-scrubs-and-robots"&gt;
  &lt;/a&gt;
  On Scrubs and Robots
&lt;/h2&gt;

&lt;p&gt;This is such a powerful career-change story, &lt;a class="mentioned-user" href="https://dev.to/winnekes"&gt;@winnekes&lt;/a&gt;
. Thank you for sharing it with us on DEV!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/winnekes" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hCFktsJX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--t0huBvUv--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/616008/74d1598b-bdc9-4364-981a-b6bcd96e804a.jpg" alt="winnekes"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/winnekes/why-i-hung-up-my-stethoscope-and-became-a-web-developer-oa6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why I hung up my Stethoscope and became a Web Developer&lt;/h2&gt;
      &lt;h3&gt;Simona Winnekes ・ Jul 10 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#bootcamp&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#be-genuine-build-trust-have-fun"&gt;
  &lt;/a&gt;
  Be Genuine, Build Trust, Have Fun
&lt;/h2&gt;

&lt;p&gt;Those are some pretty great Developer Relations tenets, &lt;a class="mentioned-user" href="https://dev.to/kimmaida"&gt;@kimmaida&lt;/a&gt;
. This post explains just how cross-functional DevRel is — and why understanding that matters! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kimmaida" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VVgtsTeQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--LnXVbyab--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/142453/96ef3a65-ae73-42b1-9765-633de4690f71.jpeg" alt="kimmaida"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kimmaida/which-department-does-devrel-belong-in-3om" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Which Department Does DevRel Belong In?&lt;/h2&gt;
      &lt;h3&gt;Kim Maida ・ Jul 11 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devrel&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tech&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#decoding-cryptography"&gt;
  &lt;/a&gt;
  Decoding cryptography
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/0xjepsen"&gt;@0xjepsen&lt;/a&gt;
 has done a massive service in breaking down cryptography as it relates to distributed ledger tech. They also shared some seriously helpful resources if you're interested in this field (including respected open source cryptography libraries)!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/0xjepsen" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5XPD6Nv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--OGSCmBMC--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/660027/60470d10-9104-4c6b-bfd0-d7d687340972.jpeg" alt="0xjepsen"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/0xjepsen/an-introduction-to-cryptography-in-distributed-ledger-technology-268l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;An introduction to cryptography in distributed ledger technology&lt;/h2&gt;
      &lt;h3&gt;Waylon Jepsen ・ Jul 8 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cryptography&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#distributedsystems&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#blockchain&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>How to create an HTML generator with JavaScript?</title>
      <author>murtuza</author>
      <pubDate>Tue, 13 Jul 2021 15:17:54 +0000</pubDate>
      <link>https://dev.to/murtuzaalisurti/how-to-create-an-html-generator-with-javascript-gdg</link>
      <guid>https://dev.to/murtuzaalisurti/how-to-create-an-html-generator-with-javascript-gdg</guid>
      <description>&lt;p&gt;Ever tired of writing multiple lines of similar HTML? If you are, then you can automate the process by using template literals in JavaScript. Let's see how we can do that.&lt;/p&gt;

&lt;p&gt;Let's say you have multiple boxes which are actually hyperlinks and you want to create multiple of them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GhrAFk1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u01jbnqch3x47e2dknjl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GhrAFk1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u01jbnqch3x47e2dknjl.jpg" alt="HTML Hyperlinks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One way is to just copy and paste the HTML code and make changes to a particular section of the code. This approach can work for small projects but if your project is big enough, then it can become a mess.&lt;/p&gt;

&lt;p&gt;Alternatively, you can create your own HTML generator using &lt;code&gt;template literals&lt;/code&gt; in JavaScript which will generate HTML code for you!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#template-literals-in-javascript"&gt;
  &lt;/a&gt;
  Template Literals in JavaScript
&lt;/h2&gt;

&lt;p&gt;Template literals in JavaScript are nothing but string literals which allow you to embed various expressions into the string. They are enclosed in backticks. For embedding an expression the syntax goes like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`first part of the string &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; second part of the string`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's create the HTML generator.&lt;/p&gt;

&lt;p&gt;Create respective input fields for link URL, Title &amp;amp; a Tag. You can add your own input fields also if you want to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"contains"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Title&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;URL&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"tag"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tag"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Tag&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"tag"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"tag"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Generate&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create a &lt;code&gt;textarea&lt;/code&gt; field in which the resultant code will be displayed as well as create a button to copy the code to the clipboard.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"result"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"result_text"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;rows=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"copy_btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-clipboard"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MRkpED1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewjgd4wau9sythc3syem.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MRkpED1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewjgd4wau9sythc3syem.jpg" alt="HTML Generator User Interface"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;We will create a function named &lt;code&gt;generate()&lt;/code&gt;. This function has three parameters — &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;tag&lt;/code&gt;. It will take in the value of the &lt;code&gt;title&lt;/code&gt;, the &lt;code&gt;url&lt;/code&gt;, and the &lt;code&gt;tag&lt;/code&gt; that we have input in the field as arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="c1"&gt;//code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Further, we will use template literals and we will embed the &lt;code&gt;title&lt;/code&gt;, the &lt;code&gt;url&lt;/code&gt; &amp;amp; the &lt;code&gt;tag&lt;/code&gt; into the string. Then, set the value of the &lt;code&gt;result&lt;/code&gt; field to the string that is generated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#tag&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.result_text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;final_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;a href="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&amp;lt;div class="link"&amp;gt;&amp;lt;div class="banner"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/div&amp;gt;&amp;lt;/a&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;final_string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All of this will take place after the user clicks the generate button and so let's add an eventListener to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;submit_btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;submit_btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to copy the code from the &lt;code&gt;textarea&lt;/code&gt;, we can define a function called &lt;code&gt;copy()&lt;/code&gt; and then call the function when the user clicks on the 'copy to clipboard' button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;copy_btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.copy_btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;copy_btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;copy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a quick demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/seekertruth/embed/OJmWMpK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now, you can copy the code into your main project.&lt;br&gt;
This is just one of the use cases of template literals. You can do a lot of thins by using template literals in JavaScript. They make your life as a JavaScript developer easy.&lt;/p&gt;

&lt;p&gt;Signing off.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Should You Invent a New Query Language? (Probably Not)
</title>
      <author>Arctype Team</author>
      <pubDate>Tue, 13 Jul 2021 15:01:13 +0000</pubDate>
      <link>https://dev.to/arctype/should-you-invent-a-new-query-language-probably-not-2mof</link>
      <guid>https://dev.to/arctype/should-you-invent-a-new-query-language-probably-not-2mof</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---zHtcJL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626187654704/_O66zLi8V.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---zHtcJL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626187654704/_O66zLi8V.png" alt="Featured .png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"What's worse than data silos? Data silos that invent their own query language." - Erik Bernhardsson&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In his infamous and widely discussed blog post named '&lt;a href="https://erikbern.com/2018/08/30/i-dont-want-to-learn-your-garbage-query-language.html"&gt;I don't want to learn your garbage query language&lt;/a&gt;,' &lt;a href="https://erikbern.com/"&gt;Erik Bernhardsson&lt;/a&gt; expressed what so many other Data Engineers and Analysts related with so strongly. Namely, that he "really [doesn't] like software that invents its own query language" and that he "just [wants his] SQL back.&lt;/p&gt;

&lt;p&gt;The fairly short-yet-passionate rant summarized the almost universal experience that technologies that require their own language often produce a whole new different set of complexities.&lt;/p&gt;

&lt;p&gt;There has been an explosion of different types of databases in the last 10 years (Just take a look at the sheer number of NoSQL database types in &lt;a href="https://dev.to__GHOST_URL__/newsql/"&gt;my last article&lt;/a&gt;), and increased specialization is forcing Data Engineers and Analysts to learn an even greater number of new programming languages.&lt;/p&gt;

&lt;p&gt;Each of them has its own syntax and specific weirdness, and while ORMs sometimes help, they often make things even more difficult. &lt;/p&gt;

&lt;p&gt;That being said, new Query Languages are often necessary (like in the case of NoSQL databases). This begs the question, how can we tell whether a new language actually adds more value than problems it creates? To answer this, we need to take a deep look at what causes all this conflict.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-are-there-so-many-query-languages"&gt;
  &lt;/a&gt;
  Why are there so many Query Languages?
&lt;/h2&gt;

&lt;p&gt;There are a lot of Query Languages out there. So many that even the &lt;a href="https://github.com/AnanthaRajuC/List-of-programming-language-lists/blob/master/Query%20language.md"&gt;most comprehensive lists&lt;/a&gt; leave out many important players. I wouldn't even want to attempt to gather a list like this because it seems new ones are added every minute. So let's take a look at what causes this? &lt;/p&gt;

&lt;p&gt;In short, there are so many different Query Languages because there are so many different things to query. In addition, data often has to be stored in various models with varying kinds of schemas and varying degrees of separation between physical and logical schema. For example, data stored in a relational database requires different technology and syntax than data stored in JSON files.&lt;/p&gt;

&lt;p&gt;An early hierarchical or network database query language will look quite different from a relational query language. In the early days of databases, one had to explicitly navigate the paths between records. That also explains why the last decade has been particularly "fruitful" due to new challenges created by NoSQL. Just take a look at the number of different NoSQL categories in &lt;a href="https://www.coursera.org/"&gt;my last blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even within relational databases, different vendors want to offer special features and functions through their own SQL dialects (T-SQL, PostgreSQL, etc.). &lt;/p&gt;

&lt;p&gt;All of this adds up quickly, and in retrospect, it was inevitable that we would end up with a myriad of options to store and query data. Overall that is actually an excellent thing because that way, there is constant improvement through competition.&lt;/p&gt;

&lt;p&gt;However, development slowdowns due to too many different query languages persist, so Object-Relational-Mappers (ORMs) were invented. As we are about to see, though, they also often complicate things even more. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-orms-dont-always-help"&gt;
  &lt;/a&gt;
  Why ORMs Don't Always Help
&lt;/h2&gt;

&lt;p&gt;Let's first take a deeper look at what ORMs are and why you might want to use them.&lt;/p&gt;

&lt;p&gt;Object-Relational-Mapping is a process often used in computer science to convert data between incompatible &lt;a href="https://en.wikipedia.org/wiki/Type_system"&gt;type systems&lt;/a&gt; through &lt;a href="https://en.wikipedia.org/wiki/Object-oriented_programming"&gt;object-oriented programming languages&lt;/a&gt;. The goal is to create an abstract database layer of 'database objects' that can then be queried using the programming language of your choice. &lt;/p&gt;

&lt;p&gt;Long story short, it allows you to interact with your database using your language of choice &lt;strong&gt;instead&lt;/strong&gt; of that database's Query Language. This is best explained through a quick example using SQL:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SELECT * FROM users WHERE name = 'Jane Doe';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Object-relational mapping is the idea of writing queries like the one above and much more complicated ones, using the object-oriented paradigm of your preferred programming language. That is where ORMs come in. ORMs libraries that implement this technique in different programming languages. For example, using a JavaScript ORM, the above query would now look something like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var orm = require('generic-orm-library');var user = orm("users").where({ name: 'Jane Doe' });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;There are, of course, plenty of good things that can come from using an ORM:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;No SQL&lt;/strong&gt;: If you've read &lt;a href="https://dev.to__GHOST_URL__/reimagining-the-sql-curriculum/"&gt;my blog post about learning SQL&lt;/a&gt; but still aren't convinced that you should learn SQL, then ORMs allow you to use a programming language of your choice.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;No Dialects&lt;/strong&gt;: ORMs abstract away the database system so that switching from MySQL to PostgreSQL, for example, is much easier.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Extra Features&lt;/strong&gt;: Some ORMs have advanced features such as support for transactions, connection pooling, migrations, seeds,  and streams that can be useful in some cases.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Performance&lt;/strong&gt;: If you really aren't any good at SQL, then an  ORM will perform better than you for some queries.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you probably already deduced from the title of this section, there are also plenty of cons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Performance&lt;/strong&gt;: If you are a master at SQL, you can probably get more performant queries by writing them yourself.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learning&lt;/strong&gt;: ORMs don't work like normal Query Languages, so if that's what you are used to, there is overhead involved in learning how to use them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Too Many&lt;/strong&gt;: The learning problem only worsens when you consider just &lt;a href="https://en.wikipedia.org/wiki/List_of_object%E2%80%93relational_mapping_software"&gt;how many&lt;/a&gt; different ORMs there are, and each has its own learning process.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Configuration&lt;/strong&gt;: The initial configuration of an ORM can take a long time and be a pain.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Black Box&lt;/strong&gt;: The layer of abstraction that ORMs provide can hinder getting at the real problem of a query or database issue.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To summarize, ORM's alleged benefit is that they cut down development time by adding an abstraction layer, but it often produces an even bigger headache. Instead of using SQL, you now have to scroll back and forth in some ORM documentation to determine how to write the most basic queries. Debugging can also be an issue because sometimes an ORM translates a query "into some monstrosity that joins 17 tables using a full table scan",  and you end up "with bloated higher-level data classes rather than easy to understand tuples or dicts that contain the data in a dumb simple format that is trivial to introspect."&lt;/p&gt;

&lt;p&gt;So, ORMs can be useful but don't necessarily help with the underlying problem—there are already too many query languages. So what can be done? Should we follow Erik's advice and put a "30-year moratorium on inventing new query languages."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-should-you-invent-a-new-query-language"&gt;
  &lt;/a&gt;
  When Should You Invent a New Query Language?
&lt;/h2&gt;

&lt;p&gt;While Erik's call for a moratorium was certainly more of a joke than a serious solution (I think), it did express the sentiment that we need to stop adding so many query languages so quickly pretty well. &lt;/p&gt;

&lt;p&gt;It's certainly appreciated that many of these are necessary to deal with new classes of data, new ways that data is stored, or simply too much new data, but how do we know which ones were necessary and which ones weren't? &lt;/p&gt;

&lt;p&gt;This is why I suggest a few simple guiding questions and rules for any new developer who might feel the urge to add to the query language ecosystem:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-my-language-just-another-dialect"&gt;
  &lt;/a&gt;
  Is My Language Just Another Dialect?
&lt;/h3&gt;

&lt;p&gt;This one seems too obvious, but even big organizations like Oracle and Microsoft couldn't quite follow this rule, resulting in dialects like T-SQL and PL/SQL. &lt;/p&gt;

&lt;p&gt;At this point, almost every database has its own ways of defining stored procedures, functions, triggers, and differences that are even more pronounced than for queries and data definitions. &lt;/p&gt;

&lt;p&gt;For example, the scripting language for Sybase and SQL Server is called T-SQL. Strictly speaking, SQL Server is the database, and T-SQL is the language, but the two are often used interchangeably when referring to code.&lt;/p&gt;

&lt;p&gt;MySQL's scripting language is quite different from T-SQL, as can be seen in the documentation in the &lt;a href="https://dev.mysql.com/doc/refman/5.7/en/language-structure.html"&gt;reference&lt;/a&gt; manual. The first major difference you will probably encounter is that &lt;code&gt;IF&lt;/code&gt; is only allowed in programming blocks. The second will be the delimiter, then the word &lt;code&gt;go&lt;/code&gt;, and the differences multiply from there. &lt;/p&gt;

&lt;p&gt;So please don't create another SQL dialect. That doesn't mean that we shouldn't iterate and improve on SQL, but don't try to do something unnecessarily fancy that nobody asked for because no one will bother learning it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#does-my-language-solve-anything-new"&gt;
  &lt;/a&gt;
  Does My Language Solve Anything New?
&lt;/h3&gt;

&lt;p&gt;This rule is very similar to the first one, only more broadly applicable. There are many databases and types of data where standard SQL can't get the job done. Graph Databases are a good example of this because, in their case, both the storage and languages were designed specifically to do things that relational databases simply couldn't. &lt;/p&gt;

&lt;p&gt;That doesn't mean that you should add to the list of well-established Graph Query languages like &lt;strong&gt;&lt;a href="https://www.opencypher.org/about"&gt;Cypher&lt;/a&gt;&lt;/strong&gt;,which is already extremely popular. It was created by Neo4j for use with their own graph database and eventually open-sourced as a separate project called &lt;a href="https://www.opencypher.org/"&gt;openCypher&lt;/a&gt;, which allows any database to implement the same language. It's very visual—using ASCII characters to make shapes for clean and expressive queries.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MATCH (d:Database)-[:USES]-&amp;gt;(Cypher)-[:QUERIES]-&amp;gt;(:Model:Graph)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Another widely used graph query language is &lt;strong&gt;SPARQL&lt;/strong&gt;, which looks like SQL and was created by the W3C to query RDF graph models. It’s not as common as the other two languages but has unique features because of the subject-predicate-object data model. It can even be used with SQL databases that have tables modeled after RDF structures. Some graph databases also support their own languages like ArangoDB, DGraph, TigerGraph, etc.&lt;/p&gt;

&lt;p&gt;The most common graph query language at the moment would be &lt;a href="http://tinkerpop.apache.org/gremlin.html"&gt;&lt;strong&gt;Gremlin&lt;/strong&gt;&lt;/a&gt;, which is part of the &lt;a href="http://tinkerpop.apache.org/"&gt;Apache TinkePop&lt;/a&gt; graph computing framework. It is simple to write, easy to learn, and widely supported by many graph databases and even non-graph databases that can emulate graph queries. On the other hand, it can be verbose for long queries but generally works well for both OLTP and analysis work.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;g.V().has("lang","gremlin").out("supported_by").values("db_name")&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That being said, the time is ripe for an international standard graph query language. Industry vendors, including Neo4j and TigerGraph, have called this out, and I definitely agree. As graphs continue to see widespread adoption, we have certainly reached a tipping point for this industry, and at this point, you'd probably be doing more harm than good by adding another language to the mix.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-my-language-easy-to-use"&gt;
  &lt;/a&gt;
  Is My Language Easy to Use?
&lt;/h3&gt;

&lt;p&gt;If you have made it this far and your language solves a novel use case that no one has worked on before, you might actually have a point by making your own query language—this is why the last question focuses on how you should go about it that. &lt;/p&gt;

&lt;p&gt;Ask yourself, "How long will it take for others to learn my new language?". If your answer is "a couple of weeks," then you should start dedicating a lot of time to simplify your syntax as much as possible. &lt;/p&gt;

&lt;p&gt;This doesn't just mean creating tutorials and documentation, which should be self-explanatory. Instead, this means that you will have to make a serious effort to provide processes and abstractions that let a novice pick up your language and solve your main use case in a matter of hours, if not minutes.&lt;/p&gt;

&lt;p&gt;If you don't think you can do that, your language probably isn't ready yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;SQL is one of the most ubiquitous programming languages today, but countless others deserve recognition as well. These languages are often tied to specific technologies that solve use cases that relational databases simply can't. &lt;/p&gt;

&lt;p&gt;However, this has lead to an overproduction of query languages, which has significantly slowed down development times due to steep learning curves. ORMs were introduced to solve that problem but ended up complicating matters even more.&lt;/p&gt;

&lt;p&gt;That is why smart developers should be wary of introducing yet another query language to the mix. To guide this decision, I laid out some key questions they should be asking themselves to take a good look at the existing ecosphere, use cases, and simplicity.&lt;/p&gt;

&lt;p&gt;That being said, nothing quite beats working in good ole' SQL, especially when you have access to a world-class &lt;strong&gt;SQL editor&lt;/strong&gt; like Arctype.&lt;/p&gt;

&lt;p&gt;Arctype has built a collaborative SQL editor that allows you to share databases, queries, and dashboards with anyone easily. Join our growing community and &lt;a href="http://www.arctype.com/downloads"&gt;try out Arctype today&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>database</category>
      <category>ordbms</category>
      <category>softwaredevelopment</category>
    </item>
  </channel>
</rss>
