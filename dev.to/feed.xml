<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Understanding NFTs and Why We Need Push Notifications on NFT Marketplaces</title>
      <author>Olumide</author>
      <pubDate>Thu, 08 Jul 2021 12:08:29 +0000</pubDate>
      <link>https://dev.to/shittu_olumide_/understanding-nfts-and-why-we-need-push-notifications-on-nft-marketplaces-3aa1</link>
      <guid>https://dev.to/shittu_olumide_/understanding-nfts-and-why-we-need-push-notifications-on-nft-marketplaces-3aa1</guid>
      <description>&lt;p&gt;Conversations about cryptocurrencies and blockchains are finally making it to dinner tables. Multiple factors such as the involvement of institutional investors, the spiking prices of cryptos, and the evolution of DeFi are majorly impacting the adoption. The latest in the series of things taking crypto to greater heights is the popularity of NFTs, or non-fungible tokens.&lt;/p&gt;

&lt;p&gt;NFTs are now everywhere, from art to digital collectibles and real estate to gaming. In March alone, users spent over $440 million on these tokens across various NFT platforms. Just yesterday Twitter announced 140 NFT drop ü§Ø&lt;br&gt;
So, what exactly are NFTs?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-nfts"&gt;
  &lt;/a&gt;
  What are NFTs?
&lt;/h2&gt;

&lt;p&gt;The term ‚Äúfungible‚Äù is used to identify items that can easily replace or be replaced by other identical items without any change in value. Going by this, we can say fiat currencies such as the dollar or cryptos such as Bitcoin and Ether are fungible items or tokens.&lt;/p&gt;

&lt;p&gt;For example, you can easily exchange one Bitcoin for another Bitcoin without any change in value. You can also do the same with a dollar. Or, you may exchange a $100 bill with 20 bills of $5. This means a Bitcoin or a dollar bill does not have anything particularly unique that sets them apart from other Bitcoins or dollar bills. Thus, they are fungible items.&lt;br&gt;
Now, consider an art piece by Picasso. Can you replace the original art piece with any other art representing the exact same details and value? Not really. Sure, you may recreate the painting, but there will only ever be one original artwork that will always possess a unique value. This characteristic not only makes Picasso‚Äôs artwork but every artwork by every artist non-fungible as they‚Äôre each unique in their own way.&lt;br&gt;
Even your house is non-fungible. You may buy a new house or exchange your house with that of your friend‚Äôs, but you are not entirely replacing it with the new house. Why? Because the location of the new house, its design, the number of rooms, and so many other details of it will be completely different from your existing one.&lt;/p&gt;

&lt;p&gt;We can go further with examples of unique and rare items that are non-fungible. Music albums, in-game accessories, digital and real collectibles, and so on. And when we take these non-fungible items and represent their uniqueness through blockchain-based digital tokens pegged to the items, they become non-fungible tokens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-all-the-hype-around-nfts"&gt;
  &lt;/a&gt;
  What‚Äôs All the Hype Around NFTs?
&lt;/h2&gt;

&lt;p&gt;The fad around NFTs is fuelled by two distinct reasons. The first is the technical excellence they offer to the art, gaming, music, real estate, and so many other industries. The second is that many renowned artists, celebrities, tech entrepreneurs, and business owners have joined the NFT bandwagon. Let‚Äôs look into both.&lt;br&gt;
The fact that NFTs are stored on a blockchain makes them extremely secure. If you own the NFT pegged to a Picasso, you actually have the proof-of-ownership of the painting that is based on a blockchain. And blockchains are cryptographically secure, distributed ledgers that make it next to impossible for anyone to tamper with a record stored on it. This means, no one can hack a blockchain to steal your NFT or tamper with it.&lt;/p&gt;

&lt;p&gt;Additionally, blockchains are also transparent, public ledgers, and all records are publicly available. So you can easily check who has previously owned the NFT of the Picasso painting and verify its authenticity. This has the potential to curb the sale of counterfeit products in the art and luxury goods industries, which currently cuts losses worth billions of dollars annually.&lt;br&gt;
But that‚Äôs certainly not it. Famous people from digital artists like Beeple to technologists like Elon Musk and entrepreneurs like Jack Dorsey are all now involved in the world of NFTs.&lt;/p&gt;

&lt;p&gt;Recently, Twitter CEO Jack Dorsey put his first-ever tweet from 2006 up for sale as an NFT. The NFT of the tweet that reads ‚Äújust setting up my twttr‚Äù was sold for $2.9 million. Even Elon Musk created an animated music video about NFTs with an NFT song that he intended to sell as an NFT. He received bids worth millions of dollars but later ditched the idea of selling it.&lt;/p&gt;

&lt;p&gt;If all that makes your jaw drop, wait for the biggest one.&lt;br&gt;
The NFT of a digital art piece by Mike Winkelmann, famously known as Beeple, recently sold for over $69 million. It was a collage of 5,000 of the digital artworks that he had posted online daily since 2013. The sale made it the third most expensive artwork ever sold by a living artist.&lt;/p&gt;

&lt;p&gt;As you read this, celebrities are creating NFTs of their own. NBA already has NFTs that bring basketball to the world of blockchain. And yet, it only feels like the start‚Ä¶ a massive one.&lt;br&gt;
Bringing Push Notifications to NFT Marketplaces&lt;br&gt;
There are two popular ways you can get your hands on NFTs ‚Äî centralized and decentralized marketplaces. One of the most popular centralized marketplaces is Nifty Gateway. It makes the process easy by allowing you to use your credit card to purchase NFTs. But as with all things centralized, it is exposed to cyber threats, which is quite evident after the recent hack of the platform.&lt;br&gt;
So, your safest bet is a decentralized NFT marketplace like OpenSea, where you truly own the NFTs you buy. And as they are decentralized, no one can really hack them or exploit your account unless you somehow compromise the private keys and passwords to your wallet.&lt;/p&gt;

&lt;p&gt;However, like mobile applications from the early days of smartphones, these marketplaces still do not have push notifications. Now, suppose you use OpenSea to buy and trade NFTs. Of course, you would love to stay updated about the latest NFT sales and new NFT listings. Maybe, when you put an NFT up for sale, you would want to be notified when it gets a new bidder. The scenarios for the use of push notifications are endless.&lt;br&gt;
Sadly, decentralized platforms today cannot send push notifications to keep you notified of the latest events. That, however, changes with Ethereum Push Notification Service or EPNS. EPNS not only enables decentralized applications and services to send push notifications to their users but also incentivizes the entire process for users. This creates a win-win situation for everyone in the ecosystem.&lt;/p&gt;

&lt;p&gt;As we move further deep into the world of NFTs and decentralized marketplaces become a common hangout place for NFT fans, push notifications will become inevitable. And as that happens, we are sure EPNS will be able to effectively solve the challenge at hand.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How I take the guesswork out of my debugging process</title>
      <author>Kevin Gilpin</author>
      <pubDate>Thu, 08 Jul 2021 11:55:57 +0000</pubDate>
      <link>https://dev.to/appland/how-i-take-the-guesswork-out-of-my-debugging-process-52e5</link>
      <guid>https://dev.to/appland/how-i-take-the-guesswork-out-of-my-debugging-process-52e5</guid>
      <description>&lt;p&gt;There have never been more debuggers available, and it‚Äôs a good thing given how intricate most codebases are. Traditional ‚Äúbreakpoint‚Äù debuggers work great when you know what the bug is and roughly where the flawed code is located. But when you don‚Äôt know much about the bug or about the codebase, you have to get oriented before the debugger becomes a useful tool -- and debuggers aren‚Äôt designed to help you get oriented. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-breakpoint-debuggers-fall-short"&gt;
  &lt;/a&gt;
  How ‚Äúbreakpoint‚Äù debuggers fall short
&lt;/h2&gt;

&lt;p&gt;‚ÄúGet oriented‚Äù basically means ‚ÄúRead and interpret a lot of code.‚Äù And in a large codebase, it‚Äôs a real struggle to sift through all that code, and imagine possible causes and scenarios. It‚Äôs just too much to try to keep in your head. And breakpoints are a very tedious way to see the data flows, because (a) they only show you the variables and data in one location at a time (b) you can only step forward, not back.&lt;/p&gt;

&lt;p&gt;The problem is compounded when the bug is caused by changes not related to code, like when it‚Äôs introduced by a change in an external API or database schema -- because in these cases, inspecting the source diff may not point you in the right direction.&lt;/p&gt;

&lt;p&gt;So, when I‚Äôm tackling a tough bug with no obvious cause, I want to see the variables and data at any code location, without having to restart the process. I want to jump around the code to track down my theories and then be able to quickly backtrack. When I‚Äôm working with microservices, I want to be able to identify any unintended side-effects related to web services. And I want to see exactly what HTTP client requests and SQL queries are being issued, without having to step through client libraries and object-relational mappers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interactive-code-maps-to-the-rescue"&gt;
  &lt;/a&gt;
  Interactive code maps to the rescue
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/products/appmap"&gt;AppMap&lt;/a&gt; provides me with &lt;a href="///docs/guides/debug-code-using-visual-maps.html"&gt;a much more powerful way&lt;/a&gt; to dig through a lot of code at once and look for trouble. I don‚Äôt need to know where the bug is in order to get started, and I don‚Äôt have to try to keep possible causes and scenarios in my head. I can start from a high-level function (like an HTTP server request) or I can go bottom-up and start with a low-level function or SQL query. Either way, AppMap automatically generates interactive maps of all the factors that might be contributing to a bug and helps me figure out where things are going wrong.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s4kWJb9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49r8sbtqmb5dcet5ql5p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s4kWJb9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49r8sbtqmb5dcet5ql5p.png" alt="An AppMap showing where in the codebase login is required"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some other things AppMap has helped me with when debugging:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An AppMap that reproduces the bug shows only the code I might need to care about, and none of the code that‚Äôs irrelevant to the issue. So right off the bat, I can ignore 90% or more of the code base.&lt;/li&gt;
&lt;li&gt;I can explore code execution in any order I like (forwards, backwards, up, down). I never have to restart the process with new breakpoints, or wait through a tedious startup procedure.&lt;/li&gt;
&lt;li&gt;I can see not just code, but data -- parameter values, HTTP server and client requests, and complete SQL queries -- to get more context around the flaw.&lt;/li&gt;
&lt;li&gt;I have multiple options to reproduce the bug -- either with test cases, recording the app with &lt;a href="https://dev.to/docs/recording-methods"&gt;remote recording&lt;/a&gt;, or writing a test program using the AppMap language hooks.&lt;/li&gt;
&lt;li&gt;An AppMap is just a JSON file. So when a developer, QA person, or security tester finds a problem, they can create an AppMap and &lt;a href="///docs/guides/add-appmaps-to-a-code-issue.html"&gt;attach it to the bug report&lt;/a&gt;. The amount of information and detail in an AppMap is invaluable to the developer who works on the bug, and there‚Äôs no confusion about what the bug actually is, or how to reproduce it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-appmap-works"&gt;
  &lt;/a&gt;
  How AppMap works
&lt;/h2&gt;

&lt;p&gt;The first step in debugging with AppMap is to record a test case or example scenario that reproduces the bug. Once you have the AppMap you need, you can use the trace view to determine where the bug is happening in the codebase. &lt;/p&gt;

&lt;p&gt;In many cases, I‚Äôve been able to resolve bugs using just AppMap and no debugger. But when that‚Äôs not possible, AppMap kickstarts my debugging process by giving me a solid understanding of where to set my breakpoints.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a 7 minute demo of me &lt;a href="https://www.loom.com/embed/c94fabcbb24347d5aafaddd797e34fa6"&gt;debugging the Rails Sample App in VSCode&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;For an extended demo, where I show how to modify and create test cases, auto-generate Swagger and attach my AppMap to a PR, &lt;a href="https://dev.to/appland/video-upgrade-your-rails-workflows-using-visual-code-maps-3a02"&gt;check this out&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#share-your-debugging-thoughts"&gt;
  &lt;/a&gt;
  Share your debugging thoughts!
&lt;/h2&gt;

&lt;p&gt;If you‚Äôre curious to learn more about debugging with AppMap, check out &lt;a href="https://appland.com/docs/guides/debug-code-using-visual-maps.html"&gt;the AppMap documentation&lt;/a&gt;. If you have any questions, thoughts or suggestions, please reach out! You can find me on &lt;a href="https://discord.com/invite/N9VUap6"&gt;Discord&lt;/a&gt; or &lt;a href="https://dev.to/kgilpin"&gt;here on dev.to&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>debugging</category>
      <category>productivity</category>
      <category>rails</category>
    </item>
    <item>
      <title>Conditional Statements</title>
      <author>Eduardo Juli√£o</author>
      <pubDate>Thu, 08 Jul 2021 11:31:20 +0000</pubDate>
      <link>https://dev.to/eduardojuliao/conditional-statements-27pp</link>
      <guid>https://dev.to/eduardojuliao/conditional-statements-27pp</guid>
      <description>&lt;p&gt;Sometimes, we need to do things based on information we have.&lt;br&gt;
For these scenarios, we have the conditional statements such as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;if else&lt;/code&gt; and &lt;code&gt;switch case&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#if-statement"&gt;
  &lt;/a&gt;
  if statement
&lt;/h2&gt;

&lt;p&gt;The if statement enters if the condition returns true.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(*&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;*)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// Execute this code block&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// Do some work&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// More awesome work&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#else-statement"&gt;
  &lt;/a&gt;
  else statement
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;else&lt;/code&gt; statement works only after a &lt;code&gt;if&lt;/code&gt; statement and it's called if the condition in the &lt;code&gt;if&lt;/code&gt; statement above is false&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(*&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;*)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// This code block will not execute.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Execute this code block&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will not execute this code block&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Execute this code block&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;A good thing to notice, is that the &lt;code&gt;else&lt;/code&gt; statement will hit every time the &lt;code&gt;if&lt;/code&gt; statement is false.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#if-else"&gt;
  &lt;/a&gt;
  if else
&lt;/h2&gt;

&lt;p&gt;If you need to check for different values, there's the &lt;code&gt;if else&lt;/code&gt; statement.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(*&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;*)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will not execute this code block&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(*&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;*)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Execute this code block&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will not execute this code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will execute this code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will not execute this code since the condition above was met&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#ampamp-and-operator"&gt;
  &lt;/a&gt;
  &amp;amp;&amp;amp; and || operator
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#ampamp"&gt;
  &lt;/a&gt;
  &amp;amp;&amp;amp;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; means &lt;code&gt;and&lt;/code&gt; in programming language, which indicates that both checks must returns true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will execute since x value is 10 and y value is 5&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will not execute because the value of y is not 4&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  ||
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;||&lt;/code&gt; means &lt;code&gt;or&lt;/code&gt; in programming language, which indicates that at least one of the checks must returns true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will execute since x value is 10 or y value is 5&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will execute because the value of x is 10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#switch-case"&gt;
  &lt;/a&gt;
  switch case
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;switch case&lt;/code&gt; statement executes a single section from a list of candidates based on a pattern.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(*&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;look&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;*)&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="n"&gt;scenario&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;*:&lt;/span&gt;
    &lt;span class="c1"&gt;// code block&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="c1"&gt;// Will be called every time if no candidates are found.&lt;/span&gt;
   &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;useThis&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;useThis&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// This will not be called because we're looking for 2&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// This code block will be executed.&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// This code will be called if no candidate is found&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also use the same code block for different values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;useThis&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;

&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;useThis&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="c1"&gt;// Will not execute.&lt;/span&gt;
     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="c1"&gt;// Will execute if `useThis` values is 2 or 3&lt;/span&gt;
   &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>csharp</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Free Hosting for Website Lifetime | Get Free Domain and Web Hosting 2021</title>
      <author>Stacksjar</author>
      <pubDate>Thu, 08 Jul 2021 11:18:29 +0000</pubDate>
      <link>https://dev.to/stacksjar/free-hosting-for-website-lifetime-get-free-domain-and-web-hosting-2021-1j97</link>
      <guid>https://dev.to/stacksjar/free-hosting-for-website-lifetime-get-free-domain-and-web-hosting-2021-1j97</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q6p9YQhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42pzpqrohcdjr18hwcp4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q6p9YQhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42pzpqrohcdjr18hwcp4.jpg" alt="Free Hosting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post we are going to check Top Web Hosting available out there without spending a single penny. Such hosting services are very useful and handy mostly to students who are into web development or even to the fresher developers who are working and creating beautiful projects and want to show them out to world.&lt;/p&gt;

&lt;p&gt;This article curates a list of the best free hosting for website lifetime. Some of the services mentioned includes free hosting for wordpress and domain with free hosting. These hosting services are also best hosting for angular app. These services includes free domain and web hosting 2021 with some limitations.&lt;/p&gt;

&lt;p&gt;Ever wondered how people out there go on and create projects and showcase to on social media and networking websites like LinkedIn. Trust me on this they all use one of the below hosting to showcase their projects. You might wonder the people are nowadays create their portfolio websites to showcase their work.&lt;/p&gt;

&lt;p&gt;Oh don't tell me you didn't knew, Hold on my friend what are you doing ? You need to check out the world what's going on around you. I mean if you don't want to be left behind.&lt;/p&gt;

&lt;p&gt;So if you already have a website or would be creating now you would need a hosting. Hosting is basically a computer which we refer as server located somewhere around the world and connected through Internet.&lt;/p&gt;

&lt;p&gt;So you need your website to be stored on this server for which you will have to pay to the owner of this server which are basically the Hosting Service providers. But if you are just started into web development and need to showcase your work you don't need to pay just use the free hosting available on the web.&lt;/p&gt;

&lt;p&gt;Create a Beautiful Portfolio Website and host it on one of the below Free Web Hosting.&lt;/p&gt;

&lt;p&gt;Checkout the complete Article here: &lt;a href="https://stacksjar.com/post/free-hosting-for-website-lifetime-get-free-domain-and-web-hosting-2021"&gt;Free Hosting for Website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>hosting</category>
      <category>tutorial</category>
      <category>freebies</category>
    </item>
    <item>
      <title>Understand Hoisting in JavaScript once and for all</title>
      <author>Amarjit Singh</author>
      <pubDate>Thu, 08 Jul 2021 11:10:29 +0000</pubDate>
      <link>https://dev.to/amarjits/understand-hoisting-in-javascript-once-and-for-all-31o6</link>
      <guid>https://dev.to/amarjits/understand-hoisting-in-javascript-once-and-for-all-31o6</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-hoisting"&gt;
  &lt;/a&gt;
  What is Hoisting?
&lt;/h1&gt;

&lt;p&gt;Hoisting is a JavaScript behavior in which a function or variable can be used before declaring it. JavaScript moves the function and variable declarations to the top of their scope just before executing it, Due to which we can access them even before its declarations.&lt;br&gt;
Let's understand it by going through some examples.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#variable-declarations"&gt;
  &lt;/a&gt;
  Variable Declarations:
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#when-using-raw-var-endraw-keyword-"&gt;
  &lt;/a&gt;
  When using &lt;code&gt;var&lt;/code&gt; keyword :
&lt;/h3&gt;

&lt;p&gt;Below is an example where we have declared a &lt;code&gt;counter&lt;/code&gt; variable and set its value to 1. However we are trying to &lt;code&gt;console.log&lt;/code&gt; it before its declaration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On executing we get the counter value as &lt;code&gt;undefined&lt;/code&gt;. This is because JavaScript only hoists &lt;code&gt;declarations&lt;/code&gt;. &lt;br&gt;
JavaScript hoists the declaration of counter and initializes its value as &lt;code&gt;undefined&lt;/code&gt;. Therefore, the code looks something like this in the execution phase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#when-using-raw-let-endraw-or-raw-const-endraw-keyword-"&gt;
  &lt;/a&gt;
  When using &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; keyword :
&lt;/h3&gt;

&lt;p&gt;When using &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; keywords, JavaScript hoists the declarations to the top but it will not be &lt;code&gt;initialized&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Therefore when we try to console.log &lt;code&gt;counter&lt;/code&gt; before initializing it, we will get ReferenceError&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ReferenceError: Cannot access 'counter' before initialization
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same thing happens with the &lt;code&gt;const&lt;/code&gt; keyword.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#function-declarations"&gt;
  &lt;/a&gt;
  Function Declarations:
&lt;/h2&gt;

&lt;p&gt;Like Variables, JavaScript also hoists function declarations. It means that it moves the function declarations to the top of the script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the above example won't result in error even though we are calling the &lt;code&gt;add()&lt;/code&gt; function before defining it.&lt;br&gt;
The code looks something like this during execution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#when-using-an-arrow-function-or-anonymous-function"&gt;
  &lt;/a&gt;
  When using an Arrow Function or Anonymous Function:
&lt;/h3&gt;

&lt;p&gt;In the below example we change &lt;code&gt;add&lt;/code&gt; from a regular function to an anonymous function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when JavaScript hoists the declaration of &lt;code&gt;add&lt;/code&gt; variable it initializes it as &lt;code&gt;undefined&lt;/code&gt;. Therefore, we get an error like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TypeError: add is not a function
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, You might be wondering what will happen if we use &lt;code&gt;let&lt;/code&gt; instead of &lt;code&gt;var&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will get an error again but this time the error message will be different as JavaScript will hoist the declaration of &lt;code&gt;add&lt;/code&gt; but it will not be initialized.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Uncaught ReferenceError: greet is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same thing will happen if we use an Arrow Function because Arrow functions are nothing but syntactic sugar for defining function expressions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-tips-to-avoid-hoisting"&gt;
  &lt;/a&gt;
  Some Tips to avoid Hoisting:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Declaring your variables at the top is always a good rule.&lt;/li&gt;
&lt;li&gt;You can also use Strict Mode.&lt;/li&gt;
&lt;li&gt;In the case of variables, it is better to use &lt;code&gt;let&lt;/code&gt; than &lt;code&gt;var&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hoisting in JavaScript is an important concept to understand as it might lead to bugs and unexpected behavior in your code.&lt;br&gt;
That's it, I hope you learnt a lot from this blog. If you enjoyed this post, I‚Äôd be very grateful if you‚Äôd share it. Comment below if you have any doubts or questions.&lt;/p&gt;

&lt;p&gt;Thank you for Reading!üôÇ&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>A Brief Introduction To Supabase With JavaScript</title>
      <author>Rahul Shaw</author>
      <pubDate>Thu, 08 Jul 2021 10:38:46 +0000</pubDate>
      <link>https://dev.to/rahulshawdev/a-brief-introduction-to-supabase-with-javascript-3l19</link>
      <guid>https://dev.to/rahulshawdev/a-brief-introduction-to-supabase-with-javascript-3l19</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  INTRODUCTION
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt; is &lt;strong&gt;&lt;em&gt;The Open Source Firebase Alternative&lt;/em&gt;&lt;/strong&gt; that makes it easy to create a backend for your project in less than 2 minutes. So today, we will be talking about how to implement supabase auth, and database in your project. We are going to use Vite as our frontend build tool. If you don't know anything about Vite I'll suggest you read my blog about &lt;a href="https://dev.to/rahulshawdev/why-you-should-use-vite-2dh9"&gt;Vite&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-supabase"&gt;
  &lt;/a&gt;
  What is Supabase
&lt;/h4&gt;

&lt;p&gt;Supabase is an open-source Firebase alternative. Its features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Listen to database changes.&lt;/li&gt;
&lt;li&gt;Query your tables, including filtering, pagination, and deeply nested relationships (like GraphQL).&lt;/li&gt;
&lt;li&gt;Create, update, and delete rows.&lt;/li&gt;
&lt;li&gt;Manage your users and their permissions.&lt;/li&gt;
&lt;li&gt;Interact with your database using a simple UI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm not saying that it is better than firebase or it is an exact copy of firebase. It both has difference like firebase uses NoSQL as its database but supabase uses PostgreSQL. PostgreSQL is an object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance. Enough about Supabase let's talk about how to setup up and use it in your project.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setup-vite-amp-tailwind"&gt;
  &lt;/a&gt;
  Setup Vite &amp;amp; Tailwind
&lt;/h4&gt;

&lt;p&gt;We are going to use Vite for building our app and &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; for styling our mini project because I believe that making a project with Supabase will make you understand better than talking about it. If you are using VS Code as your code editor then I will suggest you install the Tailwind CSS Intellisense extension from VS Code marketplace.&lt;/p&gt;

&lt;p&gt;Copy the below command and paste it into your terminal for creating a Vite app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init @vitejs/app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Give the name of your project and choose vanilla js as it is a mini project. And then change your directory to that folder and install all the modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;your project name&lt;span class="k"&gt;*&lt;/span&gt;
npm &lt;span class="nb"&gt;install
&lt;/span&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, install Tailwind CSS by following the steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; tailwindcss@latest postcss@latest autoprefixer@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installing Tailwind, paste the following command to generate &lt;code&gt;tailwind.config.js&lt;/code&gt; &amp;amp; &lt;code&gt;postcss.config.js&lt;/code&gt; files automatically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx tailwindcss init &lt;span class="nt"&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add the following commands in &lt;code&gt;style.css&lt;/code&gt; file. Tailwind will start working perfectly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm not going to talk much about Tailwind as it is a Supabase blog. Maybe in the future, I may create a blog talking about Tailwind.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setup-supabase-database"&gt;
  &lt;/a&gt;
  Setup Supabase Database
&lt;/h4&gt;

&lt;p&gt;In order to set up Supabase Database in your project visit &lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt; official page and sign in. Then click on Start Project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vY2r4X-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625670278178/xRVGuUyii.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vY2r4X-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625670278178/xRVGuUyii.png" alt="create project.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking on Start Project you will redirect to Supabase Dashboard where you can manage your projects. Click on New Project to start a new project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--caBjViod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625670501739/DZkbUAw8o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--caBjViod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625670501739/DZkbUAw8o.png" alt="new project.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that give your project a name, and a password. Then, click on Create New Project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0QeGtDBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625670745624/s460pkPeO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0QeGtDBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625670745624/s460pkPeO.png" alt="details of the project.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, you will be redirected to a page where it will be showing that the database and API are building so, give it some time. After that, you will be redirected to your project's dashboard where you can use the database, auth, and many more features. Then click on Create a new table to start working with the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A5_M1Fpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625671217202/p4KdUzIRy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5_M1Fpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625671217202/p4KdUzIRy.png" alt="create new table.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, fill up the details of your table as I have done below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C3CXclSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625674965615/M2CsO4Hub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C3CXclSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625674965615/M2CsO4Hub.png" alt="details of the table changes.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then Click on New Column and there you can make columns.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Co6d86YD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625675398629/wmyS_Am7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Co6d86YD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625675398629/wmyS_Am7k.png" alt="add new column.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on Insert Row and then a sidebar will appear to give the details of your blog. In the below image I have filled in with some example blogs for learning purposes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EIayFS8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625675119815/2rEhHLYvO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EIayFS8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625675119815/2rEhHLYvO.png" alt="insert row.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sDt9nA9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625675037674/KPjy5vhbT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sDt9nA9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625675037674/KPjy5vhbT.png" alt="example table changes.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, in order to extract this data in your javascript file, we need to install only one extra dependency.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @supabase/supabase-js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, create the &lt;code&gt;.env&lt;/code&gt; file in your project's directory and copy your &lt;code&gt;anon key&lt;/code&gt; and &lt;code&gt;supabase URL&lt;/code&gt; and paste it in your &lt;code&gt;.env&lt;/code&gt; file as I have done below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tW-7-6Lb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625672061368/qNibtpZBc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tW-7-6Lb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625672061368/qNibtpZBc.png" alt="api keys.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;VITE_SUPABASE_URL=YOUR_SUPABASE_URL
VITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that create a &lt;code&gt;supabase.js&lt;/code&gt; file in your project's directory and paste the following commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@supabase/supabase-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;supabaseUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VITE_SUPABASE_URL&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;supabaseAnonKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VITE_SUPABASE_ANON_KEY&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;supabaseUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;supabaseAnonKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, Supabase has been successfully installed in your local machine. Next, we are going to make a mini-project with the database.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mini-blog-project"&gt;
  &lt;/a&gt;
  Mini Blog Project
&lt;/h4&gt;

&lt;p&gt;In this Mini Blog project, we will be extracting data from Supabase and adding it to our website. Also, we will be seeing how you can data into your database using the form.&lt;/p&gt;

&lt;p&gt;Copy the &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;main.js&lt;/code&gt; files and run them on your machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/svg+xml"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"favicon.svg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Vite App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"p-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"blogs"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"border-2 border-black mb-2"&lt;/span&gt;
          &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
          &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Title of the blog"&lt;/span&gt;
          &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;
        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt;
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"border-2 border-black mb-2"&lt;/span&gt;
          &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Description of the blog"&lt;/span&gt;
          &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue-400 p-1 text-white"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;const { data, error } = await supabase.from("blogs").select();&lt;/code&gt; gets all the data from supabase and &lt;code&gt;const { data, error } = await supabase.from("blogs").insert([{ title: title.value,content: content.value },]);&lt;/code&gt; insert the data into our table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./style.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./supabase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogsContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blogs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blogs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// gets the data from supabase&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;div data-id="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;
      &amp;lt;h1 class="text-2xl"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/h1&amp;gt;
      &amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;blogsContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DOMContentLoaded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blogs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// insert data into supabase&lt;/span&gt;

  &lt;span class="nx"&gt;useData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Code is nothing too fancy and very beginner-friendly. So you can see how easy it is to use Supabase Database. Now, we are going to create a mini authentication project with supabase.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mini-auth-project"&gt;
  &lt;/a&gt;
  Mini Auth Project
&lt;/h4&gt;

&lt;p&gt;In this Mini Auth project, we will be signing up users. Before jumping on the code we need to do a little setting. So, Supabase automatically allows email confirmations. For Example: If you sign up with supabase, then supabase will send you a confirmation message on your email. But we don't want that in this project so to disable it, go to your supabase project's database and click on the authentication icon and then click on Settings, you can see that there is an option for disabling email confirmations so simply click on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uZoF7tCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625737330731/sDas6KwGQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uZoF7tCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625737330731/sDas6KwGQ.png" alt="disable email confirmation.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, just copy the &lt;code&gt;index.html&lt;/code&gt; &amp;amp; &lt;code&gt;main.js&lt;/code&gt; code and run it on your machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/svg+xml"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"favicon.svg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Vite App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"p-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-3xl text-center mb-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign Up&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"border-2 border-black mb-2 p-1"&lt;/span&gt;
          &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
          &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Email Address"&lt;/span&gt;
          &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
          &lt;span class="na"&gt;autocomplete=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt;
        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
          &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;
          &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt;
          &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"border-2 border-black mb-2 p-1"&lt;/span&gt;
        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue-400 p-1 text-white"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;const { user, session, error } = await supabase.auth.signUp({ email: email.value, password: password.value });&lt;/code&gt; signUp users. &lt;strong&gt;&lt;em&gt;NOTE: IF YOU ARE NOT DISABLING EMAIL CONFIRMATION THEN THE SESSION VALUE WILL BE NULL&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./style.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./supabase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signUp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After submitting the form, you can see in your project's auth dashboard that the user has been added.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QULkssgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625737761583/8Bp_rA7VW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QULkssgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625737761583/8Bp_rA7VW.png" alt="signup.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h3&gt;

&lt;p&gt;So, I'm going to end this pretty lengthy blog by saying that give Supabase a try, I promise you'll not regret it. And also learn many more things like storage, function, etc from &lt;a href="https://supabase.io/"&gt;Supabase's&lt;/a&gt; documentation because that's where you will learn things more than any blog or youtube video will teach you. So that's it for today if you have any problems or if I made any mistake, feel free to comment it down. And also comment on what topic should I write on next.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Hosting Static Websites on AWS | AWS Whitepaper Summary</title>
      <author>Muhammad Elsaeed</author>
      <pubDate>Thu, 08 Jul 2021 10:35:55 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/hosting-static-websites-on-aws-aws-whitepaper-summary-3d9a</link>
      <guid>https://dev.to/awsmenacommunity/hosting-static-websites-on-aws-aws-whitepaper-summary-3d9a</guid>
      <description>&lt;p&gt;This whitepaper covers comprehensive architectural guidance for developing, deploying, and managing static websites on AWS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#static-website"&gt;
  &lt;/a&gt;
  Static website
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A static website delivers content in the same format in which it is stored. No server-side code execution is required.&lt;/li&gt;
&lt;li&gt;They usually consist of a mix of HTML documents, images, videos, CSS stylesheets, and JavaScript files.&lt;/li&gt;
&lt;li&gt;Static websites load quickly since content is delivered as-is and can be cached by a content delivery network (CDN).&lt;/li&gt;
&lt;li&gt;The web server doesn‚Äôt need to perform any application logic or database queries.&lt;/li&gt;
&lt;li&gt;They‚Äôre also relatively inexpensive to develop and host.&lt;/li&gt;
&lt;li&gt;Examples of static sites:

&lt;ul&gt;
&lt;li&gt;Marketing websites&lt;/li&gt;
&lt;li&gt;Product landing pages&lt;/li&gt;
&lt;li&gt;Microsites that display the same content to all users&lt;/li&gt;
&lt;li&gt;A website that lists available assets (e.g., image files, and     video files) allows the user to download the files as-is&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#dynamic-website"&gt;
  &lt;/a&gt;
  Dynamic Website
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Dynamic websites can display dynamic or personalized content.&lt;/li&gt;
&lt;li&gt;They usually interact with data sources and web services, and require code development expertise to create and maintain.&lt;/li&gt;
&lt;li&gt;For example, A sports news site can display information based on the visitor's preferences, and use server-side code to display updated sport scores.&lt;/li&gt;
&lt;li&gt;Examples of dynamic sites:

&lt;ul&gt;
&lt;li&gt;e-commerce shopping sites&lt;/li&gt;
&lt;li&gt;news portals&lt;/li&gt;
&lt;li&gt;social networking sites&lt;/li&gt;
&lt;li&gt;finance sites&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#core-architecture"&gt;
  &lt;/a&gt;
  Core Architecture
&lt;/h2&gt;

&lt;p&gt;In a traditional (non-AWS) architecture: Static sites usually are hosted on one or more web servers (for High Availability) that are backed by a local disk or else on a file share on network-accessible storage, such as NFS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AXEPSMVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rexjxew97po7u6fsk9n.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AXEPSMVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rexjxew97po7u6fsk9n.PNG" alt="Basic architecture of a traditional hosting environment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Moving to an AWS Architecture:&lt;/strong&gt; to translate the above architecture to AWS architecture we could use ‚Äúlift-and-shift‚Äù approach where we use various AWS services such as EC2, ELB, EBS, VPC, etc., and also benefit from security, scalability, cost, and agility of the cloud.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zi27jdmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zmzp54jgjejue8sk67q.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zi27jdmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zmzp54jgjejue8sk67q.PNG" alt="AWS architecture for a ‚ÄúLift and Shift"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-amazon-s3-website-hosting-to-host-without-a-single-web-server"&gt;
  &lt;/a&gt;
  Use Amazon S3 Website Hosting to Host Without a Single Web Server
&lt;/h2&gt;

&lt;p&gt;Amazon Simple Storage Service (Amazon S3) can host static websites with a fraction of the cost of a traditional web server. Amazon S3 is storage for the cloud, providing you with secure, durable, highly scalable object storage.&lt;br&gt;
You start by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;creating an Amazon S3 bucket.&lt;/li&gt;
&lt;li&gt;enabling the Amazon S3 website hosting feature.&lt;/li&gt;
&lt;li&gt;configuring access permissions for the bucket.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After you upload files, Amazon S3 takes care of serving your content to your visitors. You also need to make use of Amazon Route 53, a managed Domain Name System (DNS) service, to point your domain to your Amazon S3 bucket.&lt;br&gt;
In this solution there are no servers to manage, and no need to provision machines, install operating systems, or fine-tune web server configurations. There‚Äôs also no need to manage storage infrastructure.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KRrt0qt_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kf4ot1z7uqv8n2ttiylt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KRrt0qt_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kf4ot1z7uqv8n2ttiylt.PNG" alt="Amazon S3 website hosting"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#scalability-and-availability"&gt;
  &lt;/a&gt;
  Scalability and Availability
&lt;/h3&gt;

&lt;p&gt;Amazon S3 scales seamlessly to serve thousands of HTTP or HTTPS requests per second, in addition S3 is designed for 99.999999999% durability, and carries a service level agreement (SLA) of 99.9% availability.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#encrypt-data-in-transit"&gt;
  &lt;/a&gt;
  Encrypt Data in Transit
&lt;/h3&gt;

&lt;p&gt;S3 could use HTTPS to serve static websites securely, you also could use AWS Certificate Manager (ACM) which is a service that lets you easily provision, manage, and deploy public and private SSL/TLS certificates for use with AWS services.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configuration-basics"&gt;
  &lt;/a&gt;
  Configuration Basics
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open the AWS Management Console.&lt;/li&gt;
&lt;li&gt;On the AmazonS3 console, create an Amazon S3 bucket.

&lt;ol&gt;
&lt;li&gt;Choose the AWS Region in which the files will be geographically stored.&lt;/li&gt;
&lt;li&gt;Choose a bucket name that complies with DNS naming conventions.
&lt;strong&gt;Note:&lt;/strong&gt; If you plan to use your own custom domain, such as example.com your bucket name must be the same as your domain.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Toggle on the static website hosting feature for the bucket. This generates an Amazon S3website endpoint.
You can access your Amazon S3-hosted website at the following URL:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;http://&amp;lt;bucket-name&amp;gt;.s3-website-&amp;lt;AWS-region&amp;gt;.amazonaws.com&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#domain-names"&gt;
  &lt;/a&gt;
  Domain Names
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;For small, non-public websites:&lt;/strong&gt; The Amazon S3 website endpoint might be enough.&lt;br&gt;
&lt;strong&gt;For a public facing website:&lt;/strong&gt; We recommend using a custom domain name. This way, users can see user-friendly URLs in their browsers. You can use a DNS service to point to the bucket, but If you plan to use a root domain name (such as example.com), you must use Route s3.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7r1NFQnx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdomzq7ibcmmo4ildlvb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7r1NFQnx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdomzq7ibcmmo4ildlvb.PNG" alt="Configuring static website hosting using Amazon S3 console"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#making-your-content-publicly-accessible"&gt;
  &lt;/a&gt;
  Making Your Content Publicly Accessible
&lt;/h3&gt;

&lt;p&gt;All s3 objects are private by default, for your visitors to access content at S3 website endpoint you need to define a bucket policy for your content to be publicly accessible.&lt;br&gt;
The following S3bucket policy enables everyone to view all objects in a bucket:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{"Version":"2012-10-17",
 "Statement":[{
   "Sid":"PublicReadGetObject",
   "Effect":"Allow",
   "Principal": "*",
   "Action":["s3:GetObject"],
   "Resource":["arn:aws:s3:::S3_BUCKET_NAME_GOES_HERE/*"]
 }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#speeding-up-your-s3-based-website-using-amazon-cloudfront"&gt;
  &lt;/a&gt;
  Speeding Up Your S3 Based Website Using Amazon CloudFront
&lt;/h2&gt;

&lt;p&gt;The performance of your S3 based websites depends mainly on the location of that S3 bucket, for a bucket located in us-east-1 region, users in the USA will experience relatively fast page load times, whereas users in .e.g., Singapore, will experience slower page loads.&lt;br&gt;
CloudFront is a CDN that uses a global network of edge locations for content delivery that are located around the world.&lt;br&gt;
How it works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a CloudFront distribution, specify your S3 bucket as the origin server.&lt;/li&gt;
&lt;li&gt;When an end user requests a web page using CloudFront endpoint, CloudFront determines the best edge location to serve the content.&lt;/li&gt;
&lt;li&gt;If an edge location doesn‚Äôt yet have a cached copy of the requested content, CloudFront pulls a copy from the Amazon S3 origin server and holds it at the edge location to fulfill future requests.&lt;/li&gt;
&lt;li&gt;Subsequent users requesting the same content from that edge location experience faster page loads because that content is already cached.
The following diagram shows the flow in detail.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--keGhiSqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/it3y0bgiri7sbqtpt77b.PNG" alt="S3 backed static site with CloudFront"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#controlling-how-long-amazon-s3-content-is-cached-by-amazon-cloudfront"&gt;
  &lt;/a&gt;
  Controlling How Long Amazon S3 Content is Cached by Amazon CloudFront
&lt;/h2&gt;

&lt;p&gt;If you‚Äôre ever confused by a situation in which you‚Äôve updated your website, but you are still seeing stale content when visiting your CloudFront powered website, one likely reason is that CloudFront is still serving up cached content.&lt;br&gt;
You can control CloudFront caching behavior with:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Maximum Time-to-Live (TTL):&lt;/strong&gt; CloudFront will typically serve cached content from an edge location until the content expires. After it expires, the next time that content is requested by an end user, CloudFront goes back to the S3 origin server to fetch the content and then cache it. CloudFront edge locations automatically expire content after Maximum TTL seconds elapse (by default, this is 24 hours).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Minimum TTL:&lt;/strong&gt; expiration could be sooner because CloudFront reserves the flexibility to expire content if it needs to, before the Maximum TTL is reached. By default, the Minimum TTL is set to 0 (zero) seconds, but this value is configurable. Therefore, CloudFront may expire content anytime between the Minimum TTL (default is 0 seconds) and Maximum TTL (default is 24 hours).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Content Versioning:&lt;/strong&gt; every time you update website content, embed a version identifier in the file names. It can be a timestamp, a sequential number, or any other way. For example, instead of banner.jpg, call it banner_v1.jpg. When you update the image, name the new version banner_v2.jpg and update all files that need to link to the new image. Since new file names are involved, CloudFront immediately fetches the new files from Amazon S3 (and afterwards, cache them).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cache-Control Headers:&lt;/strong&gt; You can manage CloudFront expiration behavior by specifying Cache-Control headers for your website content. If you keep the Minimum TTL at the default 0 seconds, then CloudFront honors any Cache-Control: max-age HTTP header that is individually set for your content. If an image is configured with a Cache-Control: max-age=60 header, then CloudFront expires it at the 60 second mark. This gives you more precise control over content expiration for individual files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CloudFront Invalidation Requests:&lt;/strong&gt; are a way to force CloudFront to expire content. Invalidation requests aren‚Äôt immediate. It takes several minutes from the time you submit one to the time that CloudFront actually expires the content.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This whitepaper began with a look at traditional (non-AWS) architectures for static websites. We then showed you an AWS Cloud-native architecture based on Amazon S3, Amazon CloudFront, and Amazon Route53. The AWS architecture is highly available and scalable, secure, and provides for a responsive user experience at very low cost. Fewer moving parts means less maintenance is required. In addition, the architecture costs only a few dollars a month to run.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://d1.awsstatic.com/whitepapers/Building%20Static%20Websites%20on%20AWS.pdf?did=wp_card&amp;amp;trk=wp_card"&gt;Original Whitepaper&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>architecture</category>
      <category>cloud</category>
      <category>s3</category>
    </item>
    <item>
      <title>GraphCMS + Nuxt.js - Vote Your Favourite Tech Courses</title>
      <author>The Code Lounge</author>
      <pubDate>Thu, 08 Jul 2021 10:20:07 +0000</pubDate>
      <link>https://dev.to/codeloungedev/graphcms-nuxt-js-vote-your-favourite-tech-courses-2efl</link>
      <guid>https://dev.to/codeloungedev/graphcms-nuxt-js-vote-your-favourite-tech-courses-2efl</guid>
      <description>&lt;p&gt;In this tutorial, you are going to build a voting application for tech courses. The voting application allows people to vote courses from tech so people can find quality courses.&lt;/p&gt;

&lt;p&gt;If you like a course and think it's a quality course, you can upvote it. The more upvotes a course has, the higher it appears on the page.&lt;/p&gt;

&lt;p&gt;To build the application, you will use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GraphCMS&lt;/li&gt;
&lt;li&gt;Nuxt.js&lt;/li&gt;
&lt;li&gt;TailwindCSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without further ado, let's start building the application!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#about-graphcms"&gt;
  &lt;/a&gt;
  About GraphCMS
&lt;/h1&gt;

&lt;p&gt;GraphCMS is the first GraphQL native Headless CMS. It aims to eliminate the pain points of traditional content management by leveraging the power of GraphQL.&lt;/p&gt;

&lt;p&gt;Let's see how GraphQL aims to do that. Some of the most notable features of GraphCMS are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it has a single GraphQL endpoint that supports queries and mutations.&lt;/li&gt;
&lt;li&gt;it comes with an excellent user interface. You can use it to build, configure and maintain the backend of your application through their UI.&lt;/li&gt;
&lt;li&gt;it has content localization. That means you can localize and translate content into any language.&lt;/li&gt;
&lt;li&gt;it supports environments on paid plans, which allows you to work on new features in isolation and then promote that to the main environment.&lt;/li&gt;
&lt;li&gt;intelligent edge caching, which means that your query responses are cached across 190 edge points of presence around the world.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are just a handful of features to convince you of its power. However, you can read more about GraphCMS and its features &lt;a href="https://graphcms.com/features"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In a nutshell, you can use GraphCMS as a database or content management system, as can be inferred from the name&lt;/strong&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#create-a-graphcms-account"&gt;
  &lt;/a&gt;
  Create a GraphCMS account
&lt;/h1&gt;

&lt;p&gt;The first step of the tutorial is to create a GraphCMS account, so you can use it. &lt;/p&gt;

&lt;p&gt;Go to the &lt;a href="https://graphcms.com/"&gt;GraphCMS&lt;/a&gt; website and click on the &lt;em&gt;"Sign up"&lt;/em&gt; link. See figure 1 below for reference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i0eq6JRT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624468085377/3yhLG3_5n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i0eq6JRT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624468085377/3yhLG3_5n.png" alt="GraphCMS landing page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After that, it takes you to the registering page. On sign up page, you can register with the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;using your Facebook account&lt;/li&gt;
&lt;li&gt;with your GitHub account&lt;/li&gt;
&lt;li&gt;using your Google account&lt;/li&gt;
&lt;li&gt;with your email, a password and a name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use any method that fits your needs. In my case, I registered using my GitHub account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HAFYgG-6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624468345208/DBaXW0dlF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HAFYgG-6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624468345208/DBaXW0dlF.png" alt="GraphCMS Sign up page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Figure 2 illustrates the signup page. Before choosing your preferred signup method, tick the box that says you agree to their terms and policies. Lastly, click on the &lt;em&gt;"Sign up"&lt;/em&gt; button.&lt;/p&gt;

&lt;p&gt;After that, you are done. You should see the page from figure 3 below. If you want to take their tour, click on the &lt;em&gt;"Start tour"&lt;/em&gt; button. If not, skip straight to overview.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vYpeJF41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624468490855/GkAF2I5ex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vYpeJF41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624468490855/GkAF2I5ex.png" alt="GraphCMS Welcome page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's how you create a new GraphCMS account. If you click on &lt;em&gt;"Skip to overview"&lt;/em&gt; (as shown in figure 3), you are taken to the page where you can create a new project or choose from the existing starter projects.&lt;/p&gt;

&lt;p&gt;Thus, the next step is to create and configure the voting application for tech courses.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project structure
&lt;/h1&gt;

&lt;p&gt;The project stores courses in tech alongside their authors. Thus, you will have two models:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a model for courses&lt;/li&gt;
&lt;li&gt;a model for authors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, there will be a many-to-many relationship between the two. For example, a course can have multiple authors, and authors can have multiple courses.&lt;/p&gt;

&lt;p&gt;With that out of the way, let's start building the project!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#create-the-project"&gt;
  &lt;/a&gt;
  Create the project
&lt;/h1&gt;

&lt;p&gt;After creating the account, you are taken to a new page where you can create your new project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m7xtEmnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625662546006/15QxekzIF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m7xtEmnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625662546006/15QxekzIF.png" alt="GraphCMS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 4&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's important to note that you can choose from their starter projects. However, for this tutorial, you will create a new project.&lt;/p&gt;

&lt;p&gt;To create a new project, click on the &lt;strong&gt;+&lt;/strong&gt; button, which says &lt;em&gt;"From Scratch"&lt;/em&gt;. Figure 4, above, illustrates that.&lt;/p&gt;

&lt;p&gt;Clicking on the button takes you to a new page, where you need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add a name and a description for your project&lt;/li&gt;
&lt;li&gt;choose your preferred CDN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In figure 5, below, you can see the name and description for this project. Also, you can see that I choose the data center from &lt;em&gt;Europe (Frankfurt)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JZ3ZpIri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624513915987/XH8xScMl9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JZ3ZpIri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624513915987/XH8xScMl9.png" alt="GraphCMS create project.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you fill in all the details, click on the "Create Project" button from the bottom of the page. In figure 5, you cannot see it, but you should see it on your page.&lt;/p&gt;

&lt;p&gt;After creating the project, you are taken to the pricing page, which you can see in figure 6. You have four options to choose from. For this tutorial, you only need the free version, though. It's more than enough for most side projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yd3T4TC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624514554424/qUuAHsMOY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yd3T4TC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624514554424/qUuAHsMOY.png" alt="GraphCMS Pricing Plans.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 6&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Choose the "free forever" plan. After selecting the plan, you are taken to a new page where you can invite team members. However, you do not have any team members at the moment, so click on &lt;em&gt;"Invite later"&lt;/em&gt;, at the bottom of the page.&lt;/p&gt;

&lt;p&gt;Now you are done and ready to configure your application! You can see the project dashboard below, in figure 7.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1VSRzgKG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624514747808/amHBus-Eo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1VSRzgKG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624514747808/amHBus-Eo.png" alt="GraphCMS Project Dashboard.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 7&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's move onto the next step, which is creating the models.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#create-the-models"&gt;
  &lt;/a&gt;
  Create the models
&lt;/h1&gt;

&lt;p&gt;The next step is to create the models. When you create the models, you describe how your data is structured. For instance, you need a schema for courses and one for authors.&lt;/p&gt;

&lt;p&gt;From the project dashboard, click on the option saying &lt;em&gt;"Set up your schema"&lt;/em&gt;. See figure 8 below for reference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bkWRmvhm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624515003831/0Jumzv45D.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bkWRmvhm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624515003831/0Jumzv45D.png" alt="GraphCMS Project Dashboard.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 8&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After clicking on the option, you are taken to a new page to create models for your data. For instance, you will create the model for courses.&lt;/p&gt;

&lt;p&gt;Click on the button saying &lt;em&gt;"Create Model"&lt;/em&gt;, as shown in figure 9.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--omfUNHmy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624515266897/qT0rF8xs4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--omfUNHmy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624515266897/qT0rF8xs4.png" alt="GraphCMS Create Model.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 9&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next step is to create the model. Then, all you need to do is to choose a name and a description for your model.&lt;/p&gt;

&lt;p&gt;For this example, the display name for the model is &lt;code&gt;Course&lt;/code&gt;. Once you enter the display name, the &lt;code&gt;API ID&lt;/code&gt; and &lt;code&gt;Plural API ID&lt;/code&gt; fields update automatically. Thus, you can leave them as they are. Lastly, enter a description of your model.&lt;/p&gt;

&lt;p&gt;After you entered all the details, click on the button saying &lt;em&gt;"Create Model"&lt;/em&gt;. In figure 10, you can see an example of setting the &lt;code&gt;Course&lt;/code&gt; model.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W265wt-Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624515593035/dzYONorhY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W265wt-Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624515593035/dzYONorhY.png" alt="GraphCMS Create Model Process.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 10&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After you create the model, you have an empty model for the &lt;code&gt;Course&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As an exercise, create the model for the &lt;code&gt;Author&lt;/code&gt;. Go to the &lt;code&gt;Schema&lt;/code&gt; page and then click on the &lt;em&gt;+ Add&lt;/em&gt; button on the left-hand side. See figure 11 below for reference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c2kdOlzi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624546090126/GnHlVv4Bg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c2kdOlzi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624546090126/GnHlVv4Bg.png" alt="GraphCMS Schema page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 11&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After you click on the "add" button, you can create the &lt;code&gt;Author&lt;/code&gt; model as you created the &lt;code&gt;Course&lt;/code&gt; model.&lt;/p&gt;

&lt;p&gt;Figure 12 below illustrates the settings for the &lt;code&gt;Author&lt;/code&gt; model.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WKMHYJh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624546721878/v1jRxvBz8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WKMHYJh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624546721878/v1jRxvBz8.png" alt="Screenshot 2021-06-24 at 17.54.29.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 12&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next step is to configure the models by adding fields.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#configure-the-course-model"&gt;
  &lt;/a&gt;
  Configure the Course model
&lt;/h1&gt;

&lt;p&gt;Once the model is created, you need to add the fields. The fields describe what you store about courses. For instance, you would need a name and a description at the minimum.&lt;/p&gt;

&lt;p&gt;Once you create the model, you can access the page dedicated to it. From that page, you can add and remove fields. Figure 13 illustrates that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--18vXcA1h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624533433389/mN79F81Lq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18vXcA1h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624533433389/mN79F81Lq.png" alt="GraphCMS Model Page.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 13&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For this tutorial, the &lt;code&gt;Course&lt;/code&gt; model will have the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;description&lt;/li&gt;
&lt;li&gt;authors&lt;/li&gt;
&lt;li&gt;link&lt;/li&gt;
&lt;li&gt;votes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you look at figure 13 above, you can see that you can select fields from the right-hand side of the page. You can create fields such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;multi-line text&lt;/li&gt;
&lt;li&gt;markdown&lt;/li&gt;
&lt;li&gt;rich text editor&lt;/li&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And many more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0name-field"&gt;
  &lt;/a&gt;
  ¬†Name field
&lt;/h2&gt;

&lt;p&gt;Let's start by adding the name field. Start by clicking on the "single line text" field. Once you click on that field, a new box will appear, which you can see in figure 14.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YuxET3IW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624535214706/gK1SNwES2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YuxET3IW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624535214706/gK1SNwES2.png" alt="GraphCMS Create Model Field"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 14&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You need to specify the &lt;strong&gt;name&lt;/strong&gt;, the &lt;strong&gt;API ID&lt;/strong&gt;, and the &lt;strong&gt;description&lt;/strong&gt; for this field. You can use the same details like the ones in figure 14, or you can use yours.&lt;/p&gt;

&lt;p&gt;Also, you might want to display the field's value instead of the ID in relations, so check the field saying &lt;strong&gt;Use as title field&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Before moving on, go to the &lt;em&gt;"Validations"&lt;/em&gt; tab and make the field required. That means the &lt;code&gt;name&lt;/code&gt; field cannot be empty. See figure 15 for reference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LEVC5RAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624535022938/naAPUsM1D.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LEVC5RAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624535022938/naAPUsM1D.png" alt="Screenshot 2021-06-24 at 14.42.59.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 15&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you finish configuring the &lt;code&gt;name&lt;/code&gt; field, click on the "Create" button. After you create the field, you should see it in your dashboard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#description-field"&gt;
  &lt;/a&gt;
  Description Field
&lt;/h2&gt;

&lt;p&gt;The next step is to create the description field. Since the description is more complex than the &lt;code&gt;name&lt;/code&gt; field, let's choose the "Markdown" field.&lt;/p&gt;

&lt;p&gt;Click on the "Markdown" field, and the pop-up from figure 16 should appear. As usual, choose a name, an API ID and a description for your field.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ntKyOiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624535981633/X_oPa5q3Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ntKyOiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624535981633/X_oPa5q3Q.png" alt="GraphCMS Create Model Field"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 16&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a validation, let's make the field required and let's also add a character count between 100 and 1000 words. Thus, a course cannot be added to the database if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the description is empty&lt;/li&gt;
&lt;li&gt;the description has less than 100 words or more than 1000 words&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See figure 17, which illustrates the validations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ncpkD1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624536236638/QRQa1Y2MF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ncpkD1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624536236638/QRQa1Y2MF.png" alt="Screenshot 2021-06-24 at 15.03.18.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 17&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now click the button to create the field. At this point, you should have two fields, and you should see them in your dashboard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vote-field"&gt;
  &lt;/a&gt;
  Vote field
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Vote&lt;/code&gt; field is of type number. Thus, go to the right-hand side and click on the "Number" field.&lt;/p&gt;

&lt;p&gt;Figure 18 illustrates the information for this field. However, for this field, you need some validations and also a starting value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SBg9UDGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624536923908/PumXCQOkF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SBg9UDGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624536923908/PumXCQOkF.png" alt="Screenshot 2021-06-24 at 15.11.20.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 18&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go to the "Validations" tab and make the field required. You can mark this field as required by following the same steps you followed for other steps. To avoid repetitions, I did not include an image since it's the same thing.&lt;/p&gt;

&lt;p&gt;Now go to the "Advanced" tab and check the option saying &lt;em&gt;"Set initial value"&lt;/em&gt;. Set the initial value to "0" so the votes for all courses start from 0. See figure 19 below for reference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5bnnEw6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624537127719/--m6aqoND.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5bnnEw6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624537127719/--m6aqoND.png" alt="Screenshot 2021-06-24 at 15.12.40.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 19&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create the field, and it should appear in the dashboard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#url-field"&gt;
  &lt;/a&gt;
  URL field
&lt;/h2&gt;

&lt;p&gt;For the URL field, you can simply use the &lt;em&gt;"Single line text"&lt;/em&gt; field. Figure 20 shows the basic configuration for the URL field. It follows the same pattern as the other fields.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HzfTybb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624537454998/aPnM0Nt0L-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HzfTybb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624537454998/aPnM0Nt0L-.png" alt="Screenshot 2021-06-24 at 15.22.02.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 20&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, let's make the field required. Then, go to the "Validations" tab and check the option that makes the field required.&lt;/p&gt;

&lt;p&gt;Moreover, you want to avoid malicious or invalid URLs. Thus, enable the option saying &lt;em&gt;"Match a specific pattern"&lt;/em&gt;. With the option active, the application only accepts URLs that match a specific regular expression.&lt;/p&gt;

&lt;p&gt;Figure 21, below, illustrates that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hdMT7_2P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624537553715/l3d_qGlRRh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hdMT7_2P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624537553715/l3d_qGlRRh.png" alt="Screenshot 2021-06-24 at 15.22.14.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 21&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you go to the dashboard, you should be able to see all the fields you created. Figure 22 illustrates how your dashboard should look.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1k3pIA9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624597869618/RFsaq5nOH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1k3pIA9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624597869618/RFsaq5nOH.png" alt="GraphCMS Schema Model Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 22&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before configuring the "author" field and creating the relationship, let's configure the &lt;code&gt;Author&lt;/code&gt; model.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#configure-the-author-model"&gt;
  &lt;/a&gt;
  Configure the Author model
&lt;/h1&gt;

&lt;p&gt;For the author model, you might be interested in the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;full name&lt;/li&gt;
&lt;li&gt;short biography&lt;/li&gt;
&lt;li&gt;social media links such as Twitter profile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, you should be familiar with field types. Thus, the fields will have the following types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Single line text&lt;/code&gt; for the full name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Multi line text&lt;/code&gt; for the short biography&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Single line text&lt;/code&gt; for the Twitter profile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it comes to validation rules for the fields, the following applies to all of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;all fields are required - each author should have a name, a short biography and a Twitter profile&lt;/li&gt;
&lt;li&gt;all fields should be unique - no two authors should have the same name, biography or Twitter profile.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the schema dashboard, select &lt;em&gt;"Single line text"&lt;/em&gt; to create the full name. Figure 23 illustrates the details for this field.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--acQCj0U0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624595124343/O-2uUQ0l9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--acQCj0U0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624595124343/O-2uUQ0l9.png" alt="Screenshot 2021-06-25 at 07.24.14.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 23&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In figure 24, below, you can see the validations used for this field and the others.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--38v7QlUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624595176355/EsKCGHrGV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--38v7QlUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624595176355/EsKCGHrGV.png" alt="Screenshot 2021-06-25 at 07.24.47.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 24&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next step is to add the &lt;strong&gt;biography&lt;/strong&gt; field. Then, from the right-hand side sidebar, choose the &lt;em&gt;"Multi line text"&lt;/em&gt; field. Once you click on it, a new pop-up appears. You can see the details for this field in figure 25.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dENh6kzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624595982808/WhlVluxNA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dENh6kzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624595982808/WhlVluxNA.png" alt="Screenshot 2021-06-25 at 07.37.50.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 25&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;strong&gt;biography&lt;/strong&gt; field has an extra validation rule. You do not want authors to have an empty bio or a 5000 words bio. Thus, you can limit the character count between &lt;code&gt;100&lt;/code&gt; and &lt;code&gt;500&lt;/code&gt; words.&lt;/p&gt;

&lt;p&gt;Figure 26 illustrates how you can limit the character count. You can also see that you can customize the error message. Thus, you can add a descriptive error message that will help rather than confuse the user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PtUEsM8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624596056525/D0WJjtCEe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PtUEsM8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624596056525/D0WJjtCEe.png" alt="Screenshot 2021-06-25 at 07.38.31.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 26&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lastly, you need to set the field for the &lt;strong&gt;Twitter profile URL&lt;/strong&gt;. From the sidebar, select the &lt;em&gt;"Single line text"&lt;/em&gt; field and add a display name, API ID, description and validations.&lt;/p&gt;

&lt;p&gt;In figure 27, below, you can see the settings for the Twitter profile URL field.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5r4duJYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624597026781/U1TqXfA7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5r4duJYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624597026781/U1TqXfA7i.png" alt="Screenshot 2021-06-25 at 07.52.41.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 27&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As usual, you make the field required and unique. Thus, people cannot add authors without a Twitter profile or with a duplicate Twitter profile. Moreover, you want to avoid malicious or invalid URLs. Therefore, you can tick the checkbox for the &lt;strong&gt;Match a specific pattern&lt;/strong&gt; feature.&lt;/p&gt;

&lt;p&gt;See figure 28 below for reference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2xJ0BwNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624597229032/895rhxTYB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2xJ0BwNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624597229032/895rhxTYB.png" alt="Screenshot 2021-06-25 at 07.55.27.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 28&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You finished configuring the &lt;code&gt;Author&lt;/code&gt; model as well! If you look at your dashboard, you should see the fields you created. Figure 29, below, illustrates that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xx6LS741--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624597956438/_jq7a5JAW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xx6LS741--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624597956438/_jq7a5JAW.png" alt="GraphCMS Schema Model Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 29&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that you have both models configured, it's time to create a relationship between them. So that's what you will do in the next step!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#create-the-relationship"&gt;
  &lt;/a&gt;
  Create the relationship
&lt;/h1&gt;

&lt;p&gt;Before you can use the application, the last step is to create the many-to-many relationship between the &lt;code&gt;Course&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt; models. To recap, a course can have multiple authors, and authors can have multiple courses.&lt;/p&gt;

&lt;p&gt;The video below shows how to create the relationship between "course" and "author".&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Ffetb70QWvE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The first step in creating the relationship is to select the &lt;code&gt;Reference&lt;/code&gt; field from any of the models. The &lt;code&gt;Reference&lt;/code&gt; field allows you to create different types of relationships between models.&lt;/p&gt;

&lt;p&gt;Once you click on the field, a new pop-up appears, where you can define the relationship. First of all, you select the model to reference. Then, you have a dropdown box from where you can choose the model.&lt;/p&gt;

&lt;p&gt;After that, you can create the relationship in two ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you can tick/untick the checkboxes based on your needs. The relationship updates automatically as you tick/untick checkboxes.&lt;/li&gt;
&lt;li&gt;you can click on the dropdown to select the relationship you want.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Figure 30 illustrates both options.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8hfNnBYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624599998500/lIGRCplcN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8hfNnBYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624599998500/lIGRCplcN.png" alt="Create a relationship in GraphCMS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 30&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After that, you can configure the &lt;code&gt;reference&lt;/code&gt; and &lt;code&gt;reverse&lt;/code&gt; fields. They are pre-configured for you, but you can use custom options if you want. For this tutorial, the pre-configured details are enough.&lt;/p&gt;

&lt;p&gt;Lastly, press the "Create" button to create the relationship. As you can see in the video above, the relationship is created.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#add-content"&gt;
  &lt;/a&gt;
  Add content
&lt;/h1&gt;

&lt;p&gt;Before you can test and use the application, you need to add content.&lt;/p&gt;

&lt;p&gt;With GraphCMS, you can seamlessly add content from the user interface. Alternatively, you can do it programmatically. Thus, you have two options when it comes to adding content.&lt;/p&gt;

&lt;p&gt;To create content, click on the "pen" icon, as shown in figure 31. Alternatively, you can click on the second option from the &lt;em&gt;"Your quick start guide"&lt;/em&gt; section. See figure 31 for reference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--34ri_JoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624609960843/-82gHHWbt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--34ri_JoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624609960843/-82gHHWbt.png" alt="Create content GraphCMS.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 31&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clicking on any of the two options takes you to a new page where you can add authors and courses.&lt;/p&gt;

&lt;p&gt;Figure 32 shows the page where you can add content. On the left-hand side, you can select the type of content you want to add. For instance, if you want to add a new author, select the &lt;code&gt;Author&lt;/code&gt; from the column.&lt;/p&gt;

&lt;p&gt;Once you decide what type of content you want to add, click on the button saying &lt;em&gt;"+ Create Item"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LyUDHHoJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624610633839/7Mm1yGSNN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LyUDHHoJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624610633839/7Mm1yGSNN.png" alt="GraphCMS Add Content.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 32&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After that, you can create a new piece of content. In figure 33, you can see an example of creating an author. There are all the fields you added when you configured the model.&lt;/p&gt;

&lt;p&gt;Also, at the bottom, you can see that you can add &lt;strong&gt;existing courses&lt;/strong&gt; or you can &lt;strong&gt;create and add&lt;/strong&gt; a new course. Thus, you can link an existing author and a course.&lt;/p&gt;

&lt;p&gt;For the time being, &lt;strong&gt;save and publish&lt;/strong&gt; the author because you'll link the author and the course after creating a course.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--srrnvl1M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624610847157/VlTV8Xrbg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--srrnvl1M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624610847157/VlTV8Xrbg.png" alt="Screenshot 2021-06-25 at 11.36.32.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 33&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point, you should have the first piece of content - an author. Well done! You will follow the same steps to add a course.&lt;/p&gt;

&lt;p&gt;On the left-hand side, click on the "Course" option. Then click again on the button saying &lt;em&gt;"+ Create Item"&lt;/em&gt;. See figure 32 for reference.&lt;/p&gt;

&lt;p&gt;When the new page opens, feel free to add your course details, or you can use the same information like the ones from figure 34.&lt;/p&gt;

&lt;p&gt;At the bottom, you can see that you can add authors for your courses. Since you created an author in the previous step, let's add an author. Click on &lt;strong&gt;Add existing Authors&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_a9MSIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624611386843/Klow1Urpi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_a9MSIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624611386843/Klow1Urpi.png" alt="Screenshot 2021-06-25 at 11.55.11.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 34&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you click on the button, a new pop-up appears where you can select the authors you want to add. For example, in figure 35, below, you can see the author you created earlier.&lt;/p&gt;

&lt;p&gt;Select the author by ticking the box, as highlighted in the image. After that, add the author by clicking on the button &lt;em&gt;"Add selected Author"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZaO2pTh3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624612117948/1_hzP_5jr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZaO2pTh3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624612117948/1_hzP_5jr.png" alt="GraphCMS "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 35&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After that, you should see the author embedded into your course. Then, finally, you should see something similar to figure 36.&lt;/p&gt;

&lt;p&gt;Now click on the green button &lt;em&gt;"Save and publish"&lt;/em&gt; to create the relationship. The author and the course are linked now!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mvo5iRft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624612478495/cwvWAjerO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mvo5iRft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624612478495/cwvWAjerO.png" alt="Screenshot 2021-06-25 at 12.12.39.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 36&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that you are done with creating and configuring the application, you can play around with it!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#query-and-mutate-data"&gt;
  &lt;/a&gt;
  Query and mutate data
&lt;/h1&gt;

&lt;p&gt;GraphCMS has an integrated GraphQL playground. That means you can read and edit existing data or add new data.&lt;/p&gt;

&lt;p&gt;Thus, to access the playground, go to the project's dashboard and then click on the "play" icon, as shown in figure 37 below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YSTWqGfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624857900081/qKPad8HDh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YSTWqGfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624857900081/qKPad8HDh.png" alt="GraphCMS GraphQL Playground Icon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 37&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you get to the playground, you can either write queries and mutations manually, or you can use the explorer. Using the explorer, you can build queries and mutations interactively.&lt;/p&gt;

&lt;p&gt;After you click on the button and the GraphQL playground opens, you can start playing with the data.&lt;/p&gt;

&lt;p&gt;Figure 38 shows the playground page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M5y2BkO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624858643122/xr5fIh1iE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M5y2BkO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624858643122/xr5fIh1iE.png" alt="GraphCMS GraphQL Playground.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 38&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's start writing some GraphQL queries. The first GraphQL query shows all the courses and the authors. You can see all the details about each course and the information on each course author.&lt;/p&gt;

&lt;p&gt;See the query below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;query Courses {
  courses {
    name
    description
    publishedAt
    url
    vote
    authors {
      name
      biography
      twitterProfile
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following query shows all the authors alongside the courses they created. It retrieves all the details about the authors and their courses.&lt;/p&gt;

&lt;p&gt;Copy the following query into the playground:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;query Authors {
  authors {
    name
    biography
    twitterProfile
    courses {
      name
      url
      vote
      description
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The interactive builder makes it seamless to create queries. For example, in the video below, you can see I build the two queries with the GraphCMS explorer.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/evKB4XnrxPA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Moreover, you can use &lt;strong&gt;mutations&lt;/strong&gt;. That means you can add and edit existing data from your application or delete data.&lt;/p&gt;

&lt;p&gt;If you scroll at the bottom of the "Explorer" tab, you can see an option saying &lt;em&gt;"Add New Mutation"&lt;/em&gt;. After you click on that option, you will see all the available mutations in the "Explorer" tab.&lt;/p&gt;

&lt;p&gt;For example, you can create a new course with the following mutation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mutation CourseCreation {
  createCourse(data: {name: "Test Course", description: "Add a longer description", vote: 10, url: "https://google.com"}) {
    id
    name
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's important to remember that you added validations for some fields, such as the description. Thus, you need to add a longer description than the one from the example. After that, you can successfully add the new course to the application.&lt;/p&gt;

&lt;p&gt;Alternatively, you can remove a course. To delete a course (or an author), you need to pass the course's id (or the author) to the &lt;code&gt;deleteCourse&lt;/code&gt;. The mutation below shows how you can achieve that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mutation CourseDeletion {
  deleteCourse(where: {id: "ckqg8wi7s13ko0c56z71xw139"}) {
    id
    name
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create an author is similar to creating a course, except there are different fields. The mutation below shows how to do it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mutation AuthorCreation {
  createAuthor(data: {name: "Test Author", biography: "A short biography.", twitterProfile: "{% twitter testauthor"}) %} {
    id
    name
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below, in the video, you can see the following mutations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;adding and deleting a course&lt;/li&gt;
&lt;li&gt;adding and deleting an author&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/JDPyWUIR3-E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The "Explorer" option from GraphCMS is super handy, and it makes the process of creating queries and mutations straightforward. &lt;/p&gt;

&lt;p&gt;Now that you have seen examples of queries and mutations in this tutorial go and explore others as well. Play around and add new data or modify existing data.&lt;/p&gt;

&lt;p&gt;The next step is to set the access to the API so you can use it from your frontend application.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#set-the-api-access"&gt;
  &lt;/a&gt;
  Set the API access
&lt;/h1&gt;

&lt;p&gt;According to the &lt;a href="https://graphcms.com/docs/authorization#public-api-permissions"&gt;GraphCMS documentation&lt;/a&gt;, "queries and mutations by default require a Permanent Auth Token token".&lt;/p&gt;

&lt;p&gt;Thus, before you can use the API in your application, you need to set the permissions. Go to the project dashboard and click on any of the two options highlighted in figure 39 below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N5AkF4sD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624869562660/ZcfzNfFIA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N5AkF4sD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624869562660/ZcfzNfFIA.png" alt="GraphQL Project Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 39&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After you click on any of the options, a new page opens where you can configure the API access. On the new page, you should see the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;content and management APIs&lt;/li&gt;
&lt;li&gt;content API permissions&lt;/li&gt;
&lt;li&gt;permanent Auth tokens&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#permissions-for-unauthenticated-users"&gt;
  &lt;/a&gt;
  Permissions for unauthenticated users
&lt;/h3&gt;

&lt;p&gt;If you scroll at the bottom of the page, you will see the &lt;strong&gt;Public Content API&lt;/strong&gt;&lt;br&gt;
and &lt;strong&gt;Permanent Auth Tokens&lt;/strong&gt;. With the &lt;strong&gt;Public Content API&lt;/strong&gt;, you set the permissions for &lt;strong&gt;unauthenticated&lt;/strong&gt; users. &lt;/p&gt;

&lt;p&gt;For unauthenticated users, you probably only want "read" access. That means the unauthenticated users can only read the data.&lt;/p&gt;

&lt;p&gt;Thus, from the &lt;strong&gt;Public Content API&lt;/strong&gt;, you can click on the button &lt;em&gt;"Yes, initialize defaults"&lt;/em&gt;, as highlighted in figure 40.&lt;/p&gt;

&lt;p&gt;As shown in figure 40, the default permissions only allow unauthenticated people to read data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--95lOu3h4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624887685189/xEEDKRlJc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--95lOu3h4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624887685189/xEEDKRlJc.png" alt="Screenshot 2021-06-28 at 16.39.20.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 40&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After you click on the button, the default permissions are applied, and you are ready to set the permissions for authenticated users.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-auth-token"&gt;
  &lt;/a&gt;
  Create auth token
&lt;/h3&gt;

&lt;p&gt;According to the &lt;a href="https://graphcms.com/docs/authorization#permanent-auth-tokens"&gt;GraphCMS documentation&lt;/a&gt;, "Permanent Auth Tokens are used for controlling access to querying, mutating content, and comes in the form of Bearer token authentication". &lt;/p&gt;

&lt;p&gt;To create a new token for your application, click on the button saying &lt;em&gt;"+ Create token"&lt;/em&gt; at the bottom of the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QAJs1hzu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624885710200/hiV_afmgs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QAJs1hzu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624885710200/hiV_afmgs.png" alt="GraphCMS authentication tokens"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 41&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you click on the "create token" button, a new pop-up appears. From the pop-up, you can create a new token. You will be prompted to enter a &lt;strong&gt;name&lt;/strong&gt;, a &lt;strong&gt;description&lt;/strong&gt;, and the &lt;strong&gt;default stage for content delivery&lt;/strong&gt;. You want users to have access only to the published data, so leave the default option - &lt;code&gt;Published&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Figure 42 illustrates the pop-up where you configure your token.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zlPuTjiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624885416878/-OeAhcBRY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zlPuTjiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624885416878/-OeAhcBRY.png" alt="GraphCMS Create Token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 42&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#permissions-for-authenticated-users"&gt;
  &lt;/a&gt;
  Permissions for authenticated users
&lt;/h3&gt;

&lt;p&gt;After creating the token, it takes you to the token dashboard to configure the permissions. On the new page, you should see the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;your token name&lt;/li&gt;
&lt;li&gt;the token description&lt;/li&gt;
&lt;li&gt;token value&lt;/li&gt;
&lt;li&gt;the content API&lt;/li&gt;
&lt;li&gt;the management API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the moment, you are only interested in the content API. The content API permissions specify what can be done with the data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t8zBzDEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624886076880/ZuEv-JUTw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t8zBzDEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624886076880/ZuEv-JUTw.png" alt="GraphCMS Content API permissions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 43&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's create some permissions. To create new permissions, click on the button saying &lt;em&gt;"+ Create permission"&lt;/em&gt;, as shown in figure 43 above.&lt;/p&gt;

&lt;p&gt;Once you click on the "create permission" button, a new pop-up appears from where you can configure your models. There are two important steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;from the "&lt;strong&gt;Model&lt;/strong&gt;" dropdown, select each model individually. Do not leave the default option "All" because there are other models created by the system. Create the permissions for each model individually.&lt;/li&gt;
&lt;li&gt;tick the &lt;strong&gt;Publish&lt;/strong&gt; and &lt;strong&gt;Unpublish&lt;/strong&gt; options. You need to be able to publish courses for the voting functionality.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lastly, you want to be able to &lt;strong&gt;read&lt;/strong&gt;, &lt;strong&gt;create&lt;/strong&gt;, &lt;strong&gt;edit&lt;/strong&gt; and &lt;strong&gt;delete&lt;/strong&gt; data. Thus, tick the appropriate boxes.&lt;/p&gt;

&lt;p&gt;Figure 44 illustrates the process of creating the permissions. Mind you that in the figure, no model is selected. Therefore, when you create the permissions, you should do it individually for each model.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D3EyqTyA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625329941852/uiuvL3BdJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D3EyqTyA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625329941852/uiuvL3BdJ.png" alt="GraphCMS create permissions for the model"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 44&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After you follow all the steps and create the permissions, you should see them in your dashboard. For example, your dashboard should look like the one from figure 45 below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UafQzPa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625330088293/4uBY1kwZF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UafQzPa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625330088293/4uBY1kwZF.png" alt="Content API Permissions In GraphCMS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 45&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that you have an endpoint and the permissions set up, you are ready to build the frontend part!&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#how-to-get-your-endpoint-and-auth-token"&gt;
  &lt;/a&gt;
  How to get your endpoint and auth token
&lt;/h1&gt;

&lt;p&gt;This is the last step before building the frontend, I promise. In this step, you will gather all the information needed, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the endpoint&lt;/li&gt;
&lt;li&gt;and your token&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first step is to go to the settings as shown in figure 46 below. Click on the sliders.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dYn8HFIQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624889372598/qxXo-AXBY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dYn8HFIQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624889372598/qxXo-AXBY.png" alt="GraphCMS Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 46&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After you click on the settings, you are taken to another page. From there, click on the &lt;code&gt;API Access&lt;/code&gt; option from the left-hand sidebar, as highlighted in figure 47, below.&lt;/p&gt;

&lt;p&gt;After that, you should see your endpoints. Then, copy the &lt;code&gt;Content API&lt;/code&gt; highlighted in figure 47, below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U79BL79K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624889383375/Z98_KDLY0D.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U79BL79K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624889383375/Z98_KDLY0D.png" alt="Screenshot 2021-06-28 at 16.53.19.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 47&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lastly, scroll at the bottom of the page, and you should see a section called &lt;code&gt;Permanent Auth Tokens&lt;/code&gt;. Once you see it, click on the token to copy it, as shown in figure 48 below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yaBol9zL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624889394353/xvAV3gjRr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yaBol9zL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624889394353/xvAV3gjRr.png" alt="Screenshot 2021-06-28 at 16.53.38.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 48&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that you have the &lt;code&gt;endpoint&lt;/code&gt; and &lt;code&gt;auth token&lt;/code&gt;, you can use the GraphCMS application from outside - for example, from a JavaScript framework such as Nuxt.&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#create-and-configure-nuxt-application"&gt;
  &lt;/a&gt;
  Create and configure Nuxt Application
&lt;/h1&gt;

&lt;p&gt;For the frontend, you will use Nuxt.js, which is a Vue framework. If you want to read more about it or see its benefits, check &lt;a href="https://nuxtjs.org"&gt;their official website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first step is to create and configure the Nuxt application. Go to your terminal and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-nuxt-app voting-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you run the command, you will get a series of questions that allows you to configure your project.&lt;/p&gt;

&lt;p&gt;Figure 49 illustrates the settings for this project. You can use the same options or configure the project based on your needs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZV9ahmAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625204102486/bSipvbMlQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZV9ahmAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625204102486/bSipvbMlQ.png" alt="Screenshot 2021-07-02 at 08.33.09.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 49&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once all the dependencies are installed, you are ready to build the application. But before that, you need to clean it a little bit. Thus, open the directory with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd voting-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you go to the &lt;code&gt;components&lt;/code&gt; folder, you should see two components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NuxtLogo.vue&lt;/li&gt;
&lt;li&gt;Tutorial.vue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Delete both of them. The next step is to create new components. Create the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;CourseCard.vue&lt;/strong&gt; =&amp;gt; As you can infer from the name, this component is for creating a course card. Each course from the database has its card.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CourseList.vue&lt;/strong&gt; =&amp;gt; This component renders all the courses from the database. It also makes use of the &lt;code&gt;CourseCard.vue&lt;/code&gt; component to render each course.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hero.vue&lt;/strong&gt; and &lt;strong&gt;Footer.vue&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Figure 50, below, shows how the components folder should look.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bnbsdvWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625205120440/FIniVXgPZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bnbsdvWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625205120440/FIniVXgPZ.png" alt="Screenshot 2021-07-02 at 08.51.42.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 50&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#manage-environmental-variables"&gt;
  &lt;/a&gt;
  Manage environmental variables
&lt;/h3&gt;

&lt;p&gt;Before going further, you need to set up the environmental variables, which store sensitive information such as the:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GraphCMS Endpoint URL&lt;/li&gt;
&lt;li&gt;Bearer Token&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first step is to install the required package. Go to the project's root directory and install the package &lt;code&gt;dotenv&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @nuxtjs/dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have the package installed, you need to register it. Go to &lt;code&gt;nuxt.config.js&lt;/code&gt; and add the module to the &lt;code&gt;buildModules&lt;/code&gt; array. Your build modules should look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;buildModules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;// https://go.nuxtjs.dev/eslint&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nuxtjs/eslint-module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// https://go.nuxtjs.dev/tailwindcss&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nuxtjs/tailwindcss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nuxtjs/dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to create the &lt;code&gt;.env&lt;/code&gt; file, where you will add your sensitive information. Create the &lt;code&gt;.env&lt;/code&gt; file in the root directory of the project. You can do it as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open the file and add the following lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GRAPHCMS_ENDPOINT=
BEARER=
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, you need to add your information. Add your GraphCMS Endpoint URL and the bearer token. &lt;strong&gt;Before moving further&lt;/strong&gt;, you need to add the &lt;code&gt;.env&lt;/code&gt; file to &lt;code&gt;.gitignore&lt;/code&gt; so you do not make your sensitive information public.&lt;/p&gt;

&lt;p&gt;Now, you can access sensitive information such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;process.env.GRAPHCMS_ENDPOINT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process.env.BEARER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's move onto the next step, which is about creating the GraphCMS Nuxt plugin.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphcms-nuxt-plugin"&gt;
  &lt;/a&gt;
  GraphCMS Nuxt Plugin
&lt;/h3&gt;

&lt;p&gt;Before going further, you need to add the GraphCMS plugin. The GraphCMS client allows you to make requests to your GraphCMS database.&lt;/p&gt;

&lt;p&gt;So, first of all, you need to create a new folder called &lt;code&gt;plugins&lt;/code&gt; in the root directory of the project. After that, create a file called &lt;code&gt;graphcms.js&lt;/code&gt; inside the &lt;code&gt;plugins&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Once you create both the directory and the file, open &lt;code&gt;graphcms.js&lt;/code&gt; and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;graphql-request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;graphcmsClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GRAPHCMS_ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BEARER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;graphcms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;graphcmsClient&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code creates a new GraphQL Client instance, and it passes your &lt;code&gt;GraphCMS&lt;/code&gt; endpoint and the bearer token. Thus, you can use the &lt;code&gt;graphcms&lt;/code&gt; client everywhere in your Nuxt.js application.&lt;/p&gt;

&lt;p&gt;Now that you have everything set up, the next step is to build each component individually. &lt;strong&gt;The application will not work until you build and use all components.&lt;/strong&gt; Thus, only try to run it afterwards.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#build-herovue"&gt;
  &lt;/a&gt;
  Build Hero.vue
&lt;/h3&gt;

&lt;p&gt;The first component is &lt;code&gt;Hero.vue&lt;/code&gt;. This component only has two lines of text. Open it and add the following piece of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class="flex flex-col items-center text-center mt-10"&amp;gt;
      &amp;lt;h1 class="text-3xl"&amp;gt;Vote &amp;lt;span class="font-bold"&amp;gt;your favourite&amp;lt;/span&amp;gt; tech courses&amp;lt;/h1&amp;gt;
      &amp;lt;div class="m-4 text-lg"&amp;gt;
          &amp;lt;p&amp;gt;Finding the right courses in tech is difficult so we make it easier&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Figure 51, below, illustrates what you will see when you run the application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WBbK5GiB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625205584922/INBtxA9XU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WBbK5GiB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625205584922/INBtxA9XU.png" alt="Screenshot 2021-07-02 at 08.59.33.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 51&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now go to &lt;code&gt;pages &amp;gt; index.vue&lt;/code&gt; and delete everything that's inside the file. Then, add the following piece of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div class="relative flex flex-col items-top justify-center min-h-screen bg-gray-100 sm:items-center sm:pt-0"&amp;gt;
      &amp;lt;Hero/&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, you use the newly-created component, Hero. The next step is to build the course card component so you can display courses on the page.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#build-coursecardvue"&gt;
  &lt;/a&gt;
  Build CourseCard.vue
&lt;/h3&gt;

&lt;p&gt;The course card displays all the information about courses. It shows the name, the description, and other details. &lt;strong&gt;It also allows you to upvote a course.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's start by building the template. Everything you see inside the moustache notation - &lt;code&gt;{{ }}&lt;/code&gt; - it's the data coming from the database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div class="max-w-4xl mx-auto px-8 sm:px-6 lg:px-8 flex flex-row justify-center"&amp;gt;
        &amp;lt;div class="mt-8 bg-white overflow-hidden shadow sm:rounded-lg p-6"&amp;gt;
            &amp;lt;h2 class="text-2xl leading-7 font-semibold"&amp;gt;
                &amp;lt;NuxtLink :to='id' class="hover:underline"&amp;gt;{{ name }}&amp;lt;/NuxtLink&amp;gt;
            &amp;lt;/h2&amp;gt;
            &amp;lt;p class="mt-1 font-extralight italic text-gray-600"&amp;gt;by {{ authors.toString() }}&amp;lt;/p&amp;gt;
            &amp;lt;p class="mt-3 text-gray-600 italic"&amp;gt;
                {{ excerpt }} &amp;lt;br&amp;gt;
            &amp;lt;/p&amp;gt;
            &amp;lt;div class="flex flex-col items-center border-t border-dashed mt-5"&amp;gt;
                &amp;lt;p class="mt-4 pt-4 text-gray-800 font-bold text-xl tracking-wider"&amp;gt;
                    The course has &amp;lt;code class="bg-gray-100 text-2xl p-1 rounded border"&amp;gt;{{ newVote }}&amp;lt;/code&amp;gt; votes.
                &amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;
                    &amp;lt;button class="bg-white hover:bg-gray-200 mt-5 mb-2 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow" @click="fetchData"&amp;gt;Vote +1&amp;lt;/button&amp;gt;
                &amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the second part of the component, you describe the type of the props, a method and a computed property.&lt;/p&gt;

&lt;p&gt;The method &lt;code&gt;fetchData&lt;/code&gt; allows users to upvote courses. When the user clicks on the voting button, the &lt;code&gt;fetchData&lt;/code&gt; method is called, and it makes a POST request to the database. Then, it increments the number of votes and returns the new value.&lt;/p&gt;

&lt;p&gt;The endpoint &lt;code&gt;/upvote/${this.id}&lt;/code&gt; is a custom API endpoint created in Nuxt. In the next section, you will see how to do it.&lt;/p&gt;

&lt;p&gt;Since &lt;strong&gt;mutating props&lt;/strong&gt; is an anti-pattern, we created a new field called &lt;code&gt;newVote&lt;/code&gt;. You assign the value from the &lt;code&gt;vote&lt;/code&gt; prop to this new property. Also, the property &lt;code&gt;newVote&lt;/code&gt; is updated and displayed on the page when a user votes the course.&lt;/p&gt;

&lt;p&gt;Lastly, you have a computed property &lt;code&gt;excerpt&lt;/code&gt; that only shows part of the description.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
export default {
    props: {
        id: {
            type: String,
            required: true
        },
        name: {
            type: String,
            required: true
        },
        description: {
            type: String,
            required: true
        },
        url: {
            type: String,
            required: true
        },
        vote: {
            type: Number,
            required: true
        },
        authors: {
            type: Array,
            required: true
        }
    },
    data() {
        return {
            newVote: this.vote
        }
    },
    methods: {
        async fetchData() {
                const options = {
                method: "POST"
            };

            const upvoted = await fetch(`/upvote/${this.id}`, options).then(res =&amp;gt; res.json());

            this.newVote = upvoted.votes;
        }
    },
    computed: {
        excerpt() {
            return this.description.substring(0, 150) + "...";
        }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Figure 52 illustrates how the course card looks. Also, when you click on the course name, it takes you to the course page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5WZcHajg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625205965184/jteb3KrbYw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5WZcHajg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625205965184/jteb3KrbYw.png" alt="Screenshot 2021-07-02 at 09.05.36.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 52&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point, you have the card for each course. So the question is - how do you loop over the list of courses and render them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-api-endpoint-for-voting"&gt;
  &lt;/a&gt;
  Custom API Endpoint For Voting
&lt;/h3&gt;

&lt;p&gt;Nuxt.js allows you to create custom API endpoints in your application. For instance, you can create an Express server inside your Nuxt application.&lt;/p&gt;

&lt;p&gt;Nuxt.js has a &lt;code&gt;serverMiddleware&lt;/code&gt; property that allows you to use additional custom API routes without needing an external server. If you want to read more about the &lt;a href="https://nuxtjs.org/docs/2.x/configuration-glossary/configuration-servermiddleware"&gt;&lt;code&gt;serverMiddlware&lt;/code&gt;&lt;/a&gt; property, I recommend the official documentation.&lt;/p&gt;

&lt;p&gt;Thus, &lt;strong&gt;the first step&lt;/strong&gt; is to create a folder in the project's root directory. Create a new folder called &lt;code&gt;server-middleware&lt;/code&gt;. Then, create a new file, &lt;code&gt;upvoteCourse.js&lt;/code&gt; inside the directory.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;next step&lt;/strong&gt; is to open the file &lt;code&gt;nuxt.config.js&lt;/code&gt; and add the following line at the end of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;serverMiddleware: ['~/server-middleware/upvoteCourse.js']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your file &lt;code&gt;nuxt.config.js&lt;/code&gt; should look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default {
  // Target: https://go.nuxtjs.dev/config-target
  target: 'static',

  // Global page headers: https://go.nuxtjs.dev/config-head
  head: {
    title: 'Vote Tech Courses',
    htmlAttrs: {
      lang: 'en'
    },
    meta: [
      { charset: 'utf-8' },
      { name: 'viewport', content: 'width=device-width, initial-scale=1' },
      { hid: 'description', name: 'description', content: '' },
      { name: 'format-detection', content: 'telephone=no' }
    ],
    link: [
      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }
    ]
  },

  // Plugins to run before rendering page: https://go.nuxtjs.dev/config-plugins
  plugins: [
    '~/plugins/graphcms.js'
  ],

  // Auto import components: https://go.nuxtjs.dev/config-components
  components: true,

  // Modules for dev and build (recommended): https://go.nuxtjs.dev/config-modules
  buildModules: [
    // https://go.nuxtjs.dev/eslint
    '@nuxtjs/eslint-module',
    // https://go.nuxtjs.dev/tailwindcss
    '@nuxtjs/tailwindcss',
  ],

  serverMiddleware: ['~/server-middleware/upvoteCourse.js']
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you are ready to build the custom API endpoint for voting courses. Open the file &lt;code&gt;upvoteCourse.js&lt;/code&gt; and import the following packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;graphql-request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of all, you need &lt;code&gt;express&lt;/code&gt; to create the API endpoint. Secondly, you need &lt;code&gt;graphql-request&lt;/code&gt; to make GraphQL requests to the GraphCMS server.&lt;/p&gt;

&lt;p&gt;After that, you need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create an Express instance&lt;/li&gt;
&lt;li&gt;use the &lt;code&gt;json()&lt;/code&gt; middleware&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add the following lines after importing the above packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is one more step before building the API endpoint. You need to create a new GraphQL Client instance. The GraphQL instance requires your GraphCMS Content API URL and the bearer token.&lt;/p&gt;

&lt;p&gt;Add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GRAPHCMS_ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BEARER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, this is how your file &lt;code&gt;upvoteCourse.js&lt;/code&gt; should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;graphql-request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GRAPHCMS_ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BEARER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's time to build the API endpoint. Let's start with the function header.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/upvote/:slug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You need to make asynchronous requests to the &lt;code&gt;/upvote/:slug&lt;/code&gt; endpoint. Thus, you need to use the &lt;code&gt;POST&lt;/code&gt; method. &lt;/p&gt;

&lt;p&gt;Since the &lt;code&gt;:slug&lt;/code&gt; is a dynamic value, you need to retrieve it from the URL. You can get the slug from the URL as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/upvote/:slug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You access the &lt;code&gt;params&lt;/code&gt; property on the &lt;code&gt;request&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;After that, you will do &lt;strong&gt;three&lt;/strong&gt; actions in the method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you get the course from the database using the &lt;code&gt;slug&lt;/code&gt;, which is the course ID&lt;/li&gt;
&lt;li&gt;increment the votes&lt;/li&gt;
&lt;li&gt;re-publish the course&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, you need one GraphQL query and two mutations. You retrieve the course from the database with a query. However, to upvote and publish a course, you need a mutation.&lt;/p&gt;

&lt;p&gt;In the code snippet below, you can see the query and the two mutations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/upvote/:slug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getCourse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;`
        query getCourse($slug: ID!) {
            course(where: { id: $slug }) {
                id
                vote
                name
            }
        }
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;upvoteCourse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="s2"&gt;`
        mutation voteCourse($slug: ID!, $existingVotes: Int) {
            updateCourse(where: { id: $slug }, data: { vote: $existingVotes }) {
                id
                name
                vote
            }
        }
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;publishCourse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="s2"&gt;`
        mutation publishCourse($slug: ID!) {
            publishCourse(where: { id: $slug }) {
                id
                name
                vote
            }
        }
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will use the query and mutations when you make the requests to the GraphCMS database.&lt;/p&gt;

&lt;p&gt;Lastly, you use the GraphQL client to make the requests. The following request retrieves the course from the database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;course&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getCourse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the course is returned from the database, increment the number of votes and store it in a new variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;existingVotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vote&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, you upvote the course by making a request to the database and passing the &lt;code&gt;slug&lt;/code&gt; and &lt;code&gt;existingVotes&lt;/code&gt;, which is the new incremented number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;voteCourse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;upvoteCourse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;existingVotes&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you perform a mutation on the existing data, it goes to the &lt;code&gt;DRAFT&lt;/code&gt; stage. That means the updated data is not visible on the frontend unless you publish it.&lt;/p&gt;

&lt;p&gt;Thus, you make another request to the server to publish the data. You pass the slug, so the database knows what course to update.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;publishedCourse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;publishCourse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, after all the operations are successful, you send a JSON response containing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a message&lt;/li&gt;
&lt;li&gt;the updated number of votes
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Course upvoted successfully!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;votes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;publishedCourse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publishCourse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vote&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how the complete code for &lt;code&gt;upvoteCourse.js&lt;/code&gt; should be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;graphql-request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GRAPHCMS_ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BEARER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/upvote/:slug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getCourse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;`
        query getCourse($slug: ID!) {
            course(where: { id: $slug }) {
                id
                vote
                name
            }
        }
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;upvoteCourse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="s2"&gt;`
        mutation voteCourse($slug: ID!, $existingVotes: Int) {
            updateCourse(where: { id: $slug }, data: { vote: $existingVotes }) {
                id
                name
                vote
            }
        }
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;publishCourse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="s2"&gt;`
        mutation publishCourse($slug: ID!) {
            publishCourse(where: { id: $slug }) {
                id
                name
                vote
            }
        }
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;course&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getCourse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;existingVotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vote&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;voteCourse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;upvoteCourse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;existingVotes&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;publishedCourse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;publishCourse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Course upvoted successfully!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;votes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;publishedCourse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publishCourse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vote&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can use the custom API endpoint to upvote courses.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#build-courselistvue"&gt;
  &lt;/a&gt;
  Build CourseList.vue
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;CourseList.vue&lt;/code&gt; component loops over the array of courses and renders each course individually.&lt;/p&gt;

&lt;p&gt;In the code below, you call the &lt;code&gt;CourseCard&lt;/code&gt; component for each course, and you pass the required props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;ul&amp;gt;
            &amp;lt;li v-for="course in courses" :key="course.id"&amp;gt;
                &amp;lt;CourseCard
                    :id="course.id"
                    :name="course.name"
                    :description="course.description"
                    :url="course.url"
                    :vote="course.vote"
                    :authors="course.authors.map(author =&amp;gt; author.name)"
                /&amp;gt;
            &amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the second part of the component, you specify the prop details. You only have a prop for this component - &lt;code&gt;courses&lt;/code&gt;. It's of type array, it's required and by default, it's an empty array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
export default {
    props: {
        courses: {
            type: Array,
            default: () =&amp;gt; {
                return []
            },
            required: true
        }
    },
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can use the &lt;code&gt;CourseList&lt;/code&gt; component to render courses from the database on the page.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#build-footervue"&gt;
  &lt;/a&gt;
  Build Footer.vue
&lt;/h3&gt;

&lt;p&gt;The footer component only contains two icons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a GitHub icon&lt;/li&gt;
&lt;li&gt;a Twitter icon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below, you can see the code for the footer (&lt;em&gt;it uses SVGs for the icons&lt;/em&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div class="flex justify-center pt-4 space-x-2 mb-10"&amp;gt;
        &amp;lt;a href="https://github.com/" target="_blank"&amp;gt;&amp;lt;svg
            class="w-6 h-6 text-gray-600 hover:text-gray-800"
            xmlns="http://www.w3.org/2000/svg"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            aria-hidden="true"
            role="img"
            width="32"
            height="32"
            preserveAspectRatio="xMidYMid meet"
            viewBox="0 0 24 24"
        &amp;gt;&amp;lt;path d="M12 2.247a10 10 0 0 0-3.162 19.487c.5.088.687-.212.687-.475c0-.237-.012-1.025-.012-1.862c-2.513.462-3.163-.613-3.363-1.175a3.636 3.636 0 0 0-1.025-1.413c-.35-.187-.85-.65-.013-.662a2.001 2.001 0 0 1 1.538 1.025a2.137 2.137 0 0 0 2.912.825a2.104 2.104 0 0 1 .638-1.338c-2.225-.25-4.55-1.112-4.55-4.937a3.892 3.892 0 0 1 1.025-2.688a3.594 3.594 0 0 1 .1-2.65s.837-.262 2.75 1.025a9.427 9.427 0 0 1 5 0c1.912-1.3 2.75-1.025 2.75-1.025a3.593 3.593 0 0 1 .1 2.65a3.869 3.869 0 0 1 1.025 2.688c0 3.837-2.338 4.687-4.563 4.937a2.368 2.368 0 0 1 .675 1.85c0 1.338-.012 2.413-.012 2.75c0 .263.187.575.687.475A10.005 10.005 0 0 0 12 2.247z" fill="currentColor" /&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/a&amp;gt;
        &amp;lt;a href="{% twitter " %} target="_blank"&amp;gt;&amp;lt;svg
            class="w-6 h-6 text-gray-600 hover:text-gray-800"
            xmlns="http://www.w3.org/2000/svg"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            aria-hidden="true"
            role="img"
            width="32"
            height="32"
            preserveAspectRatio="xMidYMid meet"
            viewBox="0 0 24 24"
        &amp;gt;&amp;lt;path d="M22.46 6c-.77.35-1.6.58-2.46.69c.88-.53 1.56-1.37 1.88-2.38c-.83.5-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29c0 .34.04.67.11.98C8.28 9.09 5.11 7.38 3 4.79c-.37.63-.58 1.37-.58 2.15c0 1.49.75 2.81 1.91 3.56c-.71 0-1.37-.2-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21a4.22 4.22 0 0 1-1.93.07a4.28 4.28 0 0 0 4 2.98a8.521 8.521 0 0 1-5.33 1.84c-.34 0-.68-.02-1.02-.06C3.44 20.29 5.7 21 8.12 21C16 21 20.33 14.46 20.33 8.79c0-.19 0-.37-.01-.56c.84-.6 1.56-1.36 2.14-2.23z" fill="currentColor" /&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#build-the-homepage"&gt;
  &lt;/a&gt;
  Build the homepage
&lt;/h1&gt;

&lt;p&gt;As usual, let's take the homepage and split it into two parts. The homepage lives in the &lt;code&gt;pages&lt;/code&gt; directory, and it's called &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The homepage is made of the following components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The hero component&lt;/li&gt;
&lt;li&gt;The CourseList component, which renders all the courses from the database&lt;/li&gt;
&lt;li&gt;The footer component&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thus, add them to your template as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div class="relative flex flex-col items-top justify-center min-h-screen bg-gray-100 sm:items-center sm:pt-0"&amp;gt;
      &amp;lt;Hero/&amp;gt;
      &amp;lt;CourseList :courses="courses" /&amp;gt;
      &amp;lt;Footer/&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you look at the &lt;code&gt;CourseList&lt;/code&gt; component, you see that the &lt;code&gt;courses&lt;/code&gt; prop being passed. The &lt;code&gt;courses&lt;/code&gt; prop is an array with objects, each object representing an individual course.&lt;/p&gt;

&lt;p&gt;You get the &lt;code&gt;courses&lt;/code&gt; array from the database. You can load data from the database asynchronously using the &lt;code&gt;asyncData&lt;/code&gt; hook. Also, you make a GraphQL request, so you need a special package.&lt;/p&gt;

&lt;p&gt;In the code snippet below, you use the &lt;code&gt;graphql-request&lt;/code&gt; package and the &lt;code&gt;asyncData&lt;/code&gt; hook to make a request to GraphCMS. You also specify what fields to return. Then, once you have the data from the database, you return it and pass it as a prop to &lt;code&gt;CourseList&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
import { gql } from 'graphql-request';

export default {
  async asyncData({ $graphcms }) {
    const { courses } = await $graphcms.request(
      gql`
        {
          courses(orderBy: vote_DESC) {
            id
            name
            description
            url
            vote
            authors {
              name
            }
          }
        }
      `
    );

    return { courses };
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the application, the homepage should display all the courses from the database in descending order. That means the courses with the most votes are shown first. Figure 53, below, illustrates an example with the courses from my database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lF-dFN4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625304765910/TnJV0mNBl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lF-dFN4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625304765910/TnJV0mNBl.png" alt="Screenshot 2021-07-03 at 12.30.55.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 53&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next step is to create an individual page for each course. On the page, you will see all the course details and details about the author.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#create-the-individual-course-page"&gt;
  &lt;/a&gt;
  Create the individual course page
&lt;/h1&gt;

&lt;p&gt;The last step of the tutorial is to build the individual page for each course. The individual page shows more information about the course and author or authors.&lt;/p&gt;

&lt;p&gt;Before going further, it's important to form an idea of how dynamic pages work in Nuxt. To create a dynamic page in Nuxt, you need to use the underscore (&lt;strong&gt;_&lt;/strong&gt;) in front of the page name.&lt;/p&gt;

&lt;p&gt;Thus, create a new page &lt;code&gt;_slug.vue&lt;/code&gt; in the' pages' folder. Since you prefixed it with the underscore, it will be a dynamic page. &lt;strong&gt;Then, you can access the value from the params.&lt;/strong&gt; In this case, you can get the value through &lt;code&gt;params.slug&lt;/code&gt;, as you will see in the code below. &lt;/p&gt;

&lt;p&gt;Now, let's move onto the first step, which is to build the template. Everything you see inside the moustache notation - &lt;code&gt;{{ }}&lt;/code&gt; - it's dynamic data coming from the database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div class="relative flex flex-col items-top justify-center min-h-screen bg-gray-100 sm:items-center sm:pt-0"&amp;gt;
      &amp;lt;div class="max-w-4xl mx-auto px-8 sm:px-6 lg:px-8 flex flex-col justify-center"&amp;gt;
          &amp;lt;Hero/&amp;gt;
          &amp;lt;div class="mt-8 bg-white overflow-hidden shadow sm:rounded-lg p-6"&amp;gt;
              &amp;lt;h2 class="text-2xl leading-7 font-semibold"&amp;gt;
                {{ course.name }}
              &amp;lt;/h2&amp;gt;
              &amp;lt;p class="mt-1 font-extralight italic text-gray-600"&amp;gt;by {{ course.authors.map(author =&amp;gt; author.name).toString() }}&amp;lt;/p&amp;gt;
              &amp;lt;p class="mt-3 text-gray-600"&amp;gt;
                  {{ course.description }} &amp;lt;br&amp;gt;
              &amp;lt;br&amp;gt;
                  We recommend you take a look at the &amp;lt;a :href="course.url" target="_blank" class="text-green-500 hover:underline"&amp;gt;course&amp;lt;/a&amp;gt; page.&amp;lt;br&amp;gt;
              &amp;lt;/p&amp;gt;
              &amp;lt;div class="flex flex-col items-center border-t border-dashed mt-5"&amp;gt;
                  &amp;lt;p class="mt-4 pt-4 text-gray-800 font-bold text-xl tracking-wider"&amp;gt;
                      The course has &amp;lt;code class="bg-gray-100 text-2xl p-1 rounded border"&amp;gt;{{ course.vote }}&amp;lt;/code&amp;gt; votes.
                  &amp;lt;/p&amp;gt;
              &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class="max-w-4xl mx-auto px-8 sm:px-6 lg:px-8 flex flex-col justify-center"&amp;gt;
          &amp;lt;div class="mt-8 bg-white overflow-hidden shadow sm:rounded-lg p-6"&amp;gt;
              &amp;lt;h2 class="text-2xl leading-7 font-semibold mb-3"&amp;gt;
                {{ course.authors.map(author =&amp;gt; author.name).toString() }}
              &amp;lt;/h2&amp;gt;
              &amp;lt;a :href="course.authors.map(author =&amp;gt; author.twitterProfile).toString()" class="mt-1 font-extralight italic text-gray-600"&amp;gt;&amp;lt;code class="bg-gray-100 p-2 rounded border"&amp;gt;@catalinmpit&amp;lt;/code&amp;gt; Twitter&amp;lt;/a&amp;gt;
              &amp;lt;div class="flex flex-col items-center border-t border-dashed mt-5"&amp;gt;
                  &amp;lt;p class="mt-4 pt-4 text-gray-800 tracking-wider"&amp;gt;
                    {{ course.authors.map(author =&amp;gt; author.biography).toString() }}
                  &amp;lt;/p&amp;gt;
              &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the second part, you use the &lt;code&gt;graphql-request&lt;/code&gt; to make a GraphQL request to the GraphCMS database. You also pass the &lt;code&gt;slug&lt;/code&gt; to the request, which represents the ID of the course.&lt;/p&gt;

&lt;p&gt;Using the ID, the GraphCMS database knows which course to retrieve and send back. Also, you retrieve information about the course authors.&lt;/p&gt;

&lt;p&gt;Once the course is retrieved, it returns it so you can render it on the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;graphql-request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;$graphcms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
      &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
        query getCourse($slug: ID!) {
          course(where: { id: $slug }) {
            id
            name
            description
            url
            vote
            authors {
              name
              biography
              twitterProfile
            }
          }
        }
      `&lt;/span&gt;
    &lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;course&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$graphcms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;course&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Figure 54 illustrates how the individual course page looks. You can see all the details about the course and the authors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ACwkcFRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625311551745/-FPUDyHtt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ACwkcFRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625311551745/-FPUDyHtt.png" alt="Screenshot 2021-07-03 at 14.25.32.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Figure 54&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And you are done!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Well done for building the application! Now you can store tech courses and allow people to vote them.&lt;/p&gt;

&lt;p&gt;The application is not perfect, and there are improvements that you could make. Some of them are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add images for courses and authors&lt;/li&gt;
&lt;li&gt;allow people to comment&lt;/li&gt;
&lt;li&gt;only allow one vote per user&lt;/li&gt;
&lt;li&gt;add authentication and authorization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And more.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can see the live application &lt;a href="https://vapp-ten.vercel.app/"&gt;here&lt;/a&gt;. In addition, the GitHub repository is available &lt;a href="https://github.com/catalinpit/vote-tech-courses"&gt;at this link&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Article originally published on &lt;a href="https://catalins.tech/graphcms-nuxtjs-vote-your-favourite-tech-courses"&gt;catalins.tech&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Overview of Amazon EC2 Spot Instances | AWS Whitepaper Summary</title>
      <author>Mohamed Zahra</author>
      <pubDate>Thu, 08 Jul 2021 09:25:53 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/overview-of-amazon-ec2-spot-instances-3kph</link>
      <guid>https://dev.to/awsmenacommunity/overview-of-amazon-ec2-spot-instances-3kph</guid>
      <description>&lt;h6&gt;
  &lt;a href="#abstract"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Abstract&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;This paper provides an overview of Amazon EC2 Spot Instances, as well as best practices for using them effectively.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#when-to-use-spot-instances"&gt;
  &lt;/a&gt;
  &lt;strong&gt;When to Use Spot Instances&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;Spot Instances is the fourth Amazon Elastic Compute Cloud (Amazon EC2) pricing model. With Spot Instances, you can use spare Amazon EC2 computing capacity at discounts of up to 90% compared to On-Demand pricing. Unlike Reserved Instances or Savings Plans, Spot Instance do not require a commitment in order to achieve cost savings. Because they can be terminated by EC2 if there is no available capacity in the capacity pool, they are best suited for flexible workloads.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#how-to-launch-spot-instances"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to Launch Spot Instances&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;The most recommended service for launching Spot Instances is Amazon EC2 Auto Scaling. If you require more flexibility, have built your own instance launch workflows, or want to control individual aspects of the instance launches or the scaling mechanisms, you can use EC2 Fleet in Instant mode. When you use AWS services for running your cloud workloads, you can also use them for launching Spot Instances. Examples include Amazon EMR, Amazon EKS, Amazon ECS, AWS Batch, and AWS Elastic Beanstalk.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#how-spot-instances-work"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How Spot Instances Work&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;Amazon's Spot Instances can be interrupted by Amazon EC2 when EC2 needs the capacity back. When EC2 interrupts your Spot Instance, it either terminates, stops, or hibernates the instance, depending on the interruption behavior that you choose. You're not charged for the first hour of running time if you stop or terminate your Spot instance. If you pay for any partial hour used (as you do for On-Demand or Reserved Instances), you will have to pay for the full hour. The Spot price for each instance type in each Availability Zone is determined by long-term trends in supply and demand for EC2 spare capacity. You pay the Spot price that is in effect, billed to the nearest second. We recommend that you do not specify a maximum price, but rather let the maximum price default to the On-Demand price. A high maximum price does not increase your chances of launching a Spot Instance.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#managing-spot-instance-interruptions"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Managing Spot Instance Interruptions&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;Amazon EC2 instance rebalance recommendations is a signal that notifies you when a Spot Instance is at elevated risk of interruption also Spot Instance interruption notices can help you manage your application to be fault tolerant.&lt;br&gt;&lt;br&gt;
You can decide to rebalance your workload to new or existing Spot Instances that are not at an elevated risk of interruption. You can take advantage of EC2's Capacity Rebalancing feature in EC2 Auto Scaling groups.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#spot-instance-limits"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Spot Instance Limits&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;There is a limit on the number of running and requested Spot Instances per AWS account per region. There are six Spot Instance limits, listed in the following table. Each limit specifies the vCPU limit for one or more instance families. If you terminate your Spot instances but do not cancel the requests, the requests count against your Spot Instances vCPU limit until Amazon EC2 detects the terminations and closes them. &lt;/p&gt;

&lt;p&gt;With vCPU limits, you can use your limit in terms of the number of vCPUs that are required to launch any combination of instance types that meet your changing application needs. With an All-Standard Spot Instance Requests limit of 256 vCPUs, you could request 32 m5.2xlarge Spot Instances (32 x 8 vCPU) or 16 c5.4xlarge spot instances (16 x 16 vPCs) or a combination of all sizes that total 256 vCPU's.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#spot-instance-best-practices"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Spot Instance Best Practices&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;Your instance type requirements, budget requirements, and application design will determine how to apply the following best practices for your application:&lt;br&gt;
     ‚Ä¢Be flexible about instance types. A Spot Instance pool is a set of unused EC2 instances with the same instance type and Availability Zone. You should be flexible about which instance types you request and in which Availability Zones you can deploy your workload. Don't just ask for c5.large if you'd be willing to use larges from the c4, m5, and m4 families.&lt;br&gt;
   ‚Ä¢ Use the capacity optimized allocation strategy Allocation strategies in EC2 Auto Scaling groups help you to provision your target capacity without the need to manually look for the Spot Instance pools with spare capacity. We recommend using the capacity optimized strategy because this strategy automatically provisions instances from the most-available Spot Instances pools. Because your Spot Instancy capacity is sourced from pools with optimal capacity, this decreases the possibility that your spot Instances are interrupted.&lt;br&gt;
   ‚Ä¢ Use proactive capacity rebalancing. Capacity Rebalancing helps you maintain workload availability by proactively augmenting your Auto Scaling group with a new Spot Instance before a running Spot Instances receives the two-minute interruption notice. When capacity rebalancing is enabled, auto-scaling attempts to proactively replace Spot instances that have received a rebalance recommendation. This gives you the opportunity to rebalance your workload to new spots that are not at elevated risk of interruption.&lt;br&gt;
  ‚Ä¢ Use integrated AWS services to manage your Spot Instances. Other AWS services integrate with Spot to reduce overall compute costs without the need to manage the individual instances or fleets. We recommend that you consider the following solutions for your applicable workloads: Amazon EMR, Amazon ECS, AWS Batch, Amazon EKS, SageMaker, AWS Elastic Beanstalk, and Amazon GameLift.&lt;br&gt;
 ‚Ä¢ Choose the modern and correct launch tool for Spot Instances. If you need to build your application with control over the launch of Spot Instances, use the right tool. For most workloads, you should use EC2 Auto Scaling because it supplies a more comprehensive feature set for a wide variety of workloads. If you need more control over individual requests and are looking for a "launch only" tool, try EC2 Fleet in Instant mode.&lt;br&gt;
Spot Integration with Other AWS Services&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#amazon-emr-integration"&gt;
  &lt;/a&gt;
  Amazon EMR Integration
&lt;/h6&gt;

&lt;p&gt;You can run Amazon EMR clusters on Spot Instances and significantly reduce the cost of processing vast amounts of data for your analytics workloads. You can easily mix Spot Instance with On-Demand and Reserved Instances using the EMR Instance Fleets feature. &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#ec2-auto-scaling-integration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;EC2 Auto Scaling Integration&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;You can use Amazon EC2 Auto Scaling groups to launch and manage Spot Instances, maintain application availability, diversify instance type and purchase option (On-Demand/Spot) selection, and scale your Amazon EC2 capacity using dynamic, scheduled, and predictive scaling policies.  &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#amazon-eks-integration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Amazon EKS Integration&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;Amazon EKS is a cloud computing platform that lets you cost-optimize your Kubernetes-based workloads. EKS managed node groups manage the entire Spot Instance lifecycle, by replacing soon-to-be-interrupted Spot Instances with newly launched instances. This reduces the chances of impact on application performance or availability when EC2 is interrupted.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#amazon-ecs-integration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Amazon ECS Integration&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;You can run Amazon ECS clusters on Spot Instances to reduce the operational cost of running containerized applications. Amazon ECS supports automatic draining of Spot Instances that are soon-to-be interrupted.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#amazon-ecs-with-aws-fargate-spot-integration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Amazon ECS with AWS Fargate Spot Integration&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;If your containerized tasks are interruptible and flexible, you can choose to run your ECS tasks with the AWS Fargate Spot capacity provider, meaning that your tasks will run on AWS Fargate, a serverless containers platform, and you will benefit from cost savings driven by Fargate Spot&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#amazon-batch-integration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Amazon Batch Integration&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;AWS Batch plans, schedules, and executes your batch computing workloads on AWS. AWS Batch dynamically requests Spot Instances on your behalf, reducing the cost of running your batch jobs.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#amazon-sagemaker-integration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Amazon SageMaker Integration&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;Amazon SageMaker makes it easy to train machine learning models using managed Spot Instances. Managed Spot training can optimize the cost of training models by up to 90% over On-Demand Instances. SageMaker manages the Spot interruptions on your behalf.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#amazon-gamelift-integration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Amazon Gamelift Integration&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;Amazon GameLift is a game server hosting solution that deploys, operates, and scales cloud servers for multiplayer games. Support for Spot Instances in Amazon Gamelift gives you the opportunity to significantly lower your hosting costs. When creating fleets of hosting resources, you can choose between On-Demand Instances or Spot Instances. While Spot Instances might be interrupted with two minutes of notification, Amazon GameLift's FleetIQ minimizes the chance of interruptions&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#aws-elastic-beanstalk-integration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;AWS Elastic Beanstalk Integration&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;AWS Elastic Beanstalk is an easy-to-use service for deploying and scaling web applications and services developed with Java, .NET, PHP, Node.js, Python, Ruby, Go, and Docker on familiar servers such as Apache, Nginx, Passenger, and IIS. You can simply upload your code, and Elastic Beanstalk automatically handles the deployment, from capacity provisioning, load balancing, and auto scaling, to application health monitoring. You can use Spot Instances in your Elastic Beanstalk environments for cost optimizing the underlying infrastructure of your web application&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Original Document&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://docs.aws.amazon.com/whitepapers/latest/cost-optimization-leveraging-ec2-spot-instances/introduction.html?did=wp_card&amp;amp;trk=wp_card"&gt;Overview of Amazon EC2 Spot Instances&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloudcompute</category>
      <category>architecture</category>
      <category>design</category>
    </item>
    <item>
      <title>Serverless Computing: Security And Challenges
</title>
      <author>Febna V M</author>
      <pubDate>Thu, 08 Jul 2021 09:23:48 +0000</pubDate>
      <link>https://dev.to/febnavm/serverless-computing-security-and-challenges-h6c</link>
      <guid>https://dev.to/febnavm/serverless-computing-security-and-challenges-h6c</guid>
      <description>&lt;p&gt;Serverless computing has been on the rise for the past few years. Serverless computing is a new economic model to cloud computing that has proven popular and has emerged to be a boon to many companies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Types Of Serverless Infrastructures&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Serverless architectures are cloud-based and service-based. This means that, instead of provisioning and managing their own servers, organizations buy cloud computing services such as the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Software as a Service, or SaaS&lt;/strong&gt;, delivers centrally hosted and managed software on-demand to end-users over the internet (e.g, Slack, Jira, Salesforce, HubSpot, etc).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Infrastructure as a Service, or IaaS&lt;/strong&gt;, delivers resources such as networks, data storage, and computers which must be managed by the end-users and offers essential compute, storage and networking resources on-demand, on a pay-as-you-go basis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Platform as a Service, or PaaS&lt;/strong&gt;, builds on IaaS by allowing users to deploy and run applications on managed platforms. Deliver everything from simple cloud-based apps to sophisticated, cloud-enabled enterprise applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Function as a Service, or FaaS&lt;/strong&gt;, is a specialized type of PaaS that allows users to develop, manage, and run application functions on managed platforms (e.g, AWS Lambda) without the complexity of building and maintaining the infrastructure.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How Does A Serverless Environment Reduce The Attack Surface?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The greatest advantage of serverless computing is that enterprises can build back-end applications without being directly involved in maintaining and securing servers. Maintaining and patching up the security loopholes is assigned to the cloud provider.&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look at some of the major responsibilities of the cloud provider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Patching the infrastructure periodically.&lt;/li&gt;
&lt;li&gt;Securely configuring the infrastructure with the proper security settings to protect itself.&lt;/li&gt;
&lt;li&gt;Setting up the proper account management for the infrastructure.&lt;/li&gt;
&lt;li&gt;Ensure that it only uses currently supported operating systems and software runtimes.&lt;/li&gt;
&lt;li&gt;Responsible for keeping the software runtime up-to-date and configuring it securely.&lt;/li&gt;
&lt;li&gt;Securely configuring the database and network connectivity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Serverless Security Risks &amp;amp; Challenges&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;However, like any other existing technology, it‚Äôs not immune to risks and threats. Some of the security risks faced by serverless computing includes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Insecure Configuration&lt;/li&gt;
&lt;li&gt;Overprivileged Function Permissions&lt;/li&gt;
&lt;li&gt;Event-Data Injection&lt;/li&gt;
&lt;li&gt;Inadequate Function Monitoring And Logging&lt;/li&gt;
&lt;li&gt;Improper Exception Handling And Verbose Error Messages&lt;/li&gt;
&lt;li&gt;Insecure Third-Party Dependencies&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Read more on the security and challenges of serverless computing and the best practices for enhancing security in  serverless applications&lt;/em&gt; &lt;a href="https://beaglesecurity.com/blog/article/serverless-computing-security.html"&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>cybersecurity</category>
      <category>security</category>
    </item>
    <item>
      <title>Dockerize your React app</title>
      <author>Karan Pratap Singh</author>
      <pubDate>Thu, 08 Jul 2021 09:10:43 +0000</pubDate>
      <link>https://dev.to/karanpratapsingh/dockerize-your-react-app-4j2e</link>
      <guid>https://dev.to/karanpratapsingh/dockerize-your-react-app-4j2e</guid>
      <description>&lt;p&gt;Hey, welcome back. This article is part of the Dockerize series, make sure to checkout the &lt;a href="https://dev.to/karanpratapsingh/introduction-to-dockerize-series-28l1"&gt;Introduction&lt;/a&gt; where I go over some concepts we are going to use.&lt;/p&gt;

&lt;p&gt;Today we'll dockerize our React application by taking advantage of builder pattern with multi stage builds for optimization!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1QK27MUr2Dk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I've also made a video, if you'd like to follow along&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h3&gt;

&lt;p&gt;I've initialized a pretty standard react project using the default &lt;a href="https://github.com/facebook/create-react-app"&gt;create react app&lt;/a&gt; (CRA) template.&lt;/p&gt;

&lt;p&gt;All the code from this article will be available in &lt;a href="https://github.com/karanpratapsingh/tutorials"&gt;this repo&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚îú‚îÄ‚îÄ node_modules
‚îú‚îÄ‚îÄ public
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ favicon.ico
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.html
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ manifest.json
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ robots.txt
‚îú‚îÄ‚îÄ src
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ App.css
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ App.js
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.css
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.js
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ logo.svg
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ yarn.lock
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-development"&gt;
  &lt;/a&gt;
  For development
&lt;/h3&gt;

&lt;p&gt;Let's start by adding a &lt;code&gt;Dockerfile&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14-alpine AS development&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; NODE_ENV development&lt;/span&gt;
&lt;span class="c"&gt;# Add a work directory&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="c"&gt;# Cache and Install dependencies&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json .&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; yarn.lock .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="c"&gt;# Copy app files&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="c"&gt;# Expose port&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;span class="c"&gt;# Start the app&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "yarn", "start" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add a &lt;code&gt;.dockerignore&lt;/code&gt;, this will help us ignore &lt;code&gt;node_modules&lt;/code&gt;, &lt;code&gt;.env&lt;/code&gt; etc&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**/node_modules
**/npm-debug.log
build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's create a &lt;code&gt;docker-compose.dev.yml&lt;/code&gt;. Here we'll also mount our code in a &lt;a href="https://www.cloudsavvyit.com/7500/what-are-docker-volumes-and-how-do-you-use-them/"&gt;volume&lt;/a&gt; so that we can sync our changes with the container while developing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.8"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app-dev&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app-dev&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;development&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./src:/app/src&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;3000:3000&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start our react app for development!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose -f docker-compose.dev.yml up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also add it to our &lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"docker-compose -f docker-compose.dev.yml up"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;we can use the &lt;code&gt;-d&lt;/code&gt; flag to run in daemon mode&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's check our container!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REPOSITORY          TAG                   IMAGE ID       CREATED              SIZE
app-dev            latest                5064f3e40c97   About a minute ago    436MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Over &lt;code&gt;400mb&lt;/code&gt;!! Don't worry, this is just for development. We'll optimize our production build with builder pattern!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-production"&gt;
  &lt;/a&gt;
  For production
&lt;/h3&gt;

&lt;p&gt;We'll use &lt;a href="https://www.nginx.com/"&gt;nginx&lt;/a&gt; to serve our static assets and will help resolve routes when we're using &lt;a href="https://reactrouter.com/"&gt;React Router&lt;/a&gt; or any kind of routing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Personally, I do not recommend using static server packages like &lt;a href="https://www.npmjs.com/package/serve"&gt;serve&lt;/a&gt; in production, nginx gives us much more performance and control&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's create a &lt;code&gt;nginx.conf&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/usr/share/nginx/html/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="n"&gt;/etc/nginx/mime.types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;try_files&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt;&lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="n"&gt;/index.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's update our &lt;code&gt;Dockerfile&lt;/code&gt; for &lt;code&gt;production&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14-alpine AS builder&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; NODE_ENV production&lt;/span&gt;
&lt;span class="c"&gt;# Add a work directory&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="c"&gt;# Cache and Install dependencies&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json .&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; yarn.lock .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--production&lt;/span&gt;
&lt;span class="c"&gt;# Copy app files&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="c"&gt;# Build the app&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn build

&lt;span class="c"&gt;# Bundle static assets with nginx&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; nginx:1.21.0-alpine as production&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; NODE_ENV production&lt;/span&gt;
&lt;span class="c"&gt;# Copy built assets from builder&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=builder /app/build /usr/share/nginx/html&lt;/span&gt;
&lt;span class="c"&gt;# Add your nginx.conf&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; nginx.conf /etc/nginx/conf.d/default.conf&lt;/span&gt;
&lt;span class="c"&gt;# Expose port&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 80&lt;/span&gt;
&lt;span class="c"&gt;# Start nginx&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["nginx", "-g", "daemon off;"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add a &lt;code&gt;docker-compose.prod.yml&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.8"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app-prod&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app-prod&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;production&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build production image&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose -f docker-compose.prod.yml build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's check out our built production image&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using builder pattern we reduced out image size to just &lt;code&gt;~23mb&lt;/code&gt;!!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REPOSITORY          TAG                   IMAGE ID       CREATED              SIZE
app-prod           latest                c5db8d308bb9   About a minute ago   23.1MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let's start our production container on port &lt;code&gt;80&lt;/code&gt; with the name &lt;code&gt;react-app&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -p 80:80 --name react-app app-prod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#optimizing-static-assets-bonus"&gt;
  &lt;/a&gt;
  Optimizing static assets (Bonus)
&lt;/h2&gt;

&lt;p&gt;You can also add the following inside the &lt;code&gt;location&lt;/code&gt; block to introduce caching for our static assets and javascript bundle.&lt;/p&gt;

&lt;p&gt;You can refer this &lt;a href="https://gist.github.com/philipstanislaus/654adafad91efb6de230845b5bdeae61"&gt;guide&lt;/a&gt; to dive deep into optimizing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Cache static assets&lt;/span&gt;
&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s"&gt;.(?:jpg|jpeg|gif|png|ico|svg)&lt;/span&gt;$ &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;expires&lt;/span&gt; &lt;span class="s"&gt;7d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;add_header&lt;/span&gt; &lt;span class="s"&gt;Cache-Control&lt;/span&gt; &lt;span class="s"&gt;"public"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Cache css and js bundle&lt;/span&gt;
&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s"&gt;.(?:css|js)&lt;/span&gt;$ &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;add_header&lt;/span&gt; &lt;span class="s"&gt;Cache-Control&lt;/span&gt; &lt;span class="s"&gt;"no-cache,&lt;/span&gt; &lt;span class="s"&gt;public,&lt;/span&gt; &lt;span class="s"&gt;must-revalidate,&lt;/span&gt; &lt;span class="s"&gt;proxy-revalidate"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;With that, we should be able to take advantage of docker in our workflow and deploy our production images faster to any platform of our choice.&lt;/p&gt;

&lt;p&gt;Feel free to reach out to me on &lt;a href="https://twitter.com/karan_6864"&gt;Twitter&lt;/a&gt; if you face any issues.&lt;/p&gt;

</description>
      <category>react</category>
      <category>docker</category>
      <category>devops</category>
    </item>
    <item>
      <title>Introduction to Dockerize series</title>
      <author>Karan Pratap Singh</author>
      <pubDate>Thu, 08 Jul 2021 08:44:04 +0000</pubDate>
      <link>https://dev.to/karanpratapsingh/introduction-to-dockerize-series-28l1</link>
      <guid>https://dev.to/karanpratapsingh/introduction-to-dockerize-series-28l1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hey, welcome to the Dockerize series. Here, I will be discussing how to use docker with your applications during both development and production.&lt;/p&gt;

&lt;p&gt;We'll also use techniques like Builder pattern, multi stage builds to optimize our production builds.&lt;/p&gt;

&lt;p&gt;This will serve as in introduction to upcoming articles where we'll dockerize our React, Node, Go applications!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dockerwhat-and-why"&gt;
  &lt;/a&gt;
  Docker...What and Why?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zJ3D2dHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxmtjpt9xsbw9ekirvtb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zJ3D2dHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxmtjpt9xsbw9ekirvtb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Docker is a software platform for building applications based on containers, which are small and lightweight execution environments.&lt;/p&gt;

&lt;p&gt;It also helps to eliminate environment specific issues since you can replicate your production environment locally, which provides consistency across our teams.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker-compose"&gt;
  &lt;/a&gt;
  Docker compose
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c1jbCvYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dggbomqzi96semopyqj7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1jbCvYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dggbomqzi96semopyqj7.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application's services. Then, with a single command, you create and start all the containers from your configuration.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: It's is not advised to use &lt;code&gt;docker-compose&lt;/code&gt; to run your application in production environment. Use a container orchestration tools like &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;, &lt;a href="https://www.openshift.com/"&gt;Openshift&lt;/a&gt;, &lt;a href="https://aws.amazon.com/ecs/"&gt;AWS ECS&lt;/a&gt; etc.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#builder-pattern"&gt;
  &lt;/a&gt;
  Builder pattern
&lt;/h2&gt;

&lt;p&gt;In Builder pattern we use a docker image (which usually contains the whole runtime) to create small build artifacts and then use those binaries/artifacts in another smaller image hence reducing size of our built image.&lt;/p&gt;

&lt;p&gt;Let's take Node images for example, They're usually upwards of &lt;code&gt;850mb&lt;/code&gt; in general (some slim variants are bit smaller) as they contain the full runtime and other things which might not be useful to us in production. So we can use builder pattern to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Derive from a Node base image with the whole runtime/SDK&lt;/li&gt;
&lt;li&gt;Copy your source code&lt;/li&gt;
&lt;li&gt;Install dependencies&lt;/li&gt;
&lt;li&gt;Produce build artifact/bundle (usually done with bundlers like &lt;a href="https://webpack.js.org/"&gt;webpack&lt;/a&gt;, &lt;a href="https://parceljs.org/"&gt;parcel&lt;/a&gt;) etc&lt;/li&gt;
&lt;li&gt;Use the built artifacts in a much smaller images like &lt;a href="https://hub.docker.com/_/alpine/"&gt;Alpine&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Push the small image to a repository of your choice like &lt;a href="https://aws.amazon.com/ecr/"&gt;AWS ECS&lt;/a&gt;, &lt;a href="https://hub.docker.com/"&gt;Dockerhub&lt;/a&gt; etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#multi-stage-builds"&gt;
  &lt;/a&gt;
  Multi stage builds
&lt;/h2&gt;

&lt;p&gt;Multi-stage builds makes it easier to use the builder pattern without hassle of creating multiple files, copying builds to host system and other things we had to do to implement builder pattern. More info &lt;a href="https://docs.docker.com/develop/develop-images/multistage-build/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n_UmwmkQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr60sw1164d4eye8lew7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n_UmwmkQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr60sw1164d4eye8lew7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're good to go! See you in the next part!&lt;/p&gt;

</description>
      <category>docker</category>
      <category>react</category>
      <category>go</category>
      <category>node</category>
    </item>
  </channel>
</rss>
