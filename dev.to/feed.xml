<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Don't attend a bootcamp in 2021</title>
      <author>Jasterix</author>
      <pubDate>Fri, 12 Feb 2021 18:37:36 +0000</pubDate>
      <link>https://dev.to/jasterix/don-t-attend-a-bootcamp-in-2021-3l4b</link>
      <guid>https://dev.to/jasterix/don-t-attend-a-bootcamp-in-2021-3l4b</guid>
      <description>&lt;p&gt;Since a few people have messaged me with their bootcamp questions, I thought to aggregate my suggestions into a blog post. Please share with anyone who is struggling to transition to tech or considering a bootcamp as their best bet for becoming a developer.&lt;/p&gt;

&lt;p&gt;This article isn't to say that all bootcamps are terrible. There are great programs out there and free ones, too. Personally, though, I think bootcamps reached their peak years ago. But attending a bootcamp in 2021 just doesn't make financial, career, or educational sense. Why?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;There are too many bootcamps and bootcamp grads&lt;/strong&gt;. It used to be that attending a bootcamp was a way to stand out in a sea of would-be developers. But now we see a new one popping up every season and individual bootcamps churning out hundreds of graduates every month.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unfortunately, this also means larger classes, fewer instructors, and, worse of all, inexperienced TAs. Many bootcamps hire TAs directly from their graduate pool, which is a great way for the TA to continue learning. But is that fair to the future students who need support from a qualified teacher?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The curriculum is mostly ineffective&lt;/strong&gt;. I graduated from Flatiron School, one of the largest bootcamps in New York. The reviews were great, their marketing even better, and at the time, they had a reimbursement program. This meant grads unable to land a job within 6 months of graduation had that debt written. Enrolling at the time felt like a relatively safe choice.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Even for a free education, I took issue with the school curriculum. Students were promised to &lt;strong&gt;learn Ruby, Rails, JavaScript, and React &lt;strong&gt;over 12 weeks&lt;/strong&gt;&lt;/strong&gt;. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2bRDtCK5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/dbb00eff1924d068539f58f039eeb43d/tenor.gif" alt="How"&gt;
&lt;/li&gt;
&lt;li&gt;We're talking about 1 new topic/framework/language every 3 weeks. With 1 week dedicated to passing that module's "code challenge", we technically received 2 week's instruction on each topic. This was barely enough time to grasp the high-level concepts, before moving on to something new.&lt;/li&gt;
&lt;li&gt;In addition to the watered-down curriculum, many of us struggled with the school's course material. Instead, we relied on each other, overworked instructors who stayed behind after class, and mostly free resources online to learn just enough to pass each code challenge.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;There isn't enough career support&lt;/strong&gt;. Many bootcamps parade their high job placement rates and post-grad career support in front of eager applicants. Some bootcamps have career coaches and career fairs that guarantee you a job interview.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In my case, that career support was basically weekly emails of job posts I could find online. The career advice and resume feedback were pretty outdated. And rather than tailor each resume to the student, my career coach insisted I use the same boring template that every student was forced to use.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bootcamps are too expensive&lt;/strong&gt;. Flatiron was $17K. If not for the reimbursement program available at the time, I would be kicking myself now. Given that all of the material is available online for FREE, I would have basically paid for the structure.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I understand new devs often feeling unsure and overwhelmed by the wealth of information online. There seem to be a million languages, frameworks, and places to start. That's how I felt before attending a bootcamp.&lt;/li&gt;
&lt;li&gt;After graduating, I still felt totally unprepared for the job market. But I did have a much better idea of where to focus my attention. But honestly, &lt;strong&gt;&lt;em&gt;is that worth $17,000&lt;/em&gt;&lt;/strong&gt;? I've seen people go into major debt to attend a bootcamp, only to graduate without the career they were promised, and without the basic knowledge they should have gained. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One of the best things I did after graduating was to create a self-study curriculum focused on learning the fundamentals. I would recommend starting there before spending over $10,000 to enroll in a bootcamp.&lt;/p&gt;

&lt;p&gt;This blog was initially supposed to offer a list of alternatives to attending a bootcamp. But it was important to cover some of the issues first. I'm still going to write the article. I'll be going to detail on how to best use each resource. I'll also be sharing a list of &lt;strong&gt;FREE BOOTCAMPS&lt;/strong&gt; I learned about too late.&lt;/p&gt;

&lt;p&gt;Below is what the bootcamp alternatives list is looking like so far:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Udemy&lt;/li&gt;
&lt;li&gt;Coursera&lt;/li&gt;
&lt;li&gt;Frontend Masters Handbook&lt;/li&gt;
&lt;li&gt;FreeCodeCamp&lt;/li&gt;
&lt;li&gt;Chingu&lt;/li&gt;
&lt;li&gt;Technical blog&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Photo by Gabby K from Pexels&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to build a QR Code Generator in Python</title>
      <author>Rishabh Singh ⚡</author>
      <pubDate>Fri, 12 Feb 2021 17:26:26 +0000</pubDate>
      <link>https://dev.to/mindninjax/how-to-build-a-qr-code-generator-in-python-1c13</link>
      <guid>https://dev.to/mindninjax/how-to-build-a-qr-code-generator-in-python-1c13</guid>
      <description>&lt;p&gt;Hey amazing people, today we are gonna build a &lt;strong&gt;QR Code generator in Python&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-qr-code-generator-works" class="anchor"&gt;
  &lt;/a&gt;
  How QR Code Generator works?
&lt;/h2&gt;

&lt;p&gt;Our QR code generator takes some data as input. That data can be anything like a URL or some text. And then it creates a QR code from that input data. And in the final step, the QR Code is saved as an SVG file. Noe since you have a rough idea of how our QR generator is going to work, let's move on to the Project Setup section and make this magic happen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zKdmJ2qk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ck8g7wf6qjzi1ck0m4w7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zKdmJ2qk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ck8g7wf6qjzi1ck0m4w7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gTrQZuAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s2vgqohwgzbk4to68kfu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gTrQZuAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s2vgqohwgzbk4to68kfu.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-setup" class="anchor"&gt;
  &lt;/a&gt;
  Project Setup
&lt;/h2&gt;

&lt;p&gt;Before we jump to coding, we need to install one module for our project. We are talking about &lt;strong&gt;&lt;code&gt;pyqrcode&lt;/code&gt;&lt;/strong&gt; module which doesn't come pre-installed with python and hence we have to install it manually.&lt;/p&gt;

&lt;p&gt;We can install this by simply running &lt;strong&gt;&lt;code&gt;pip install pyqrcode&lt;/code&gt;&lt;/strong&gt; command from the terminal. So let's do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pyqrcode
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we go it's done! Now let's move on to the fun part, the coding part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-code" class="anchor"&gt;
  &lt;/a&gt;
  Let's Code
&lt;/h2&gt;

&lt;p&gt;Alright so remember the first thing we always do is import required modules into our project. In our case, we need to make use of &lt;strong&gt;&lt;code&gt;pyqrcode&lt;/code&gt;&lt;/strong&gt; module which we just installed onto our system. So now let's import it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyqrcode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Awesome! So next thing we need to do is to get some user input to create a QR Code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter the text or link to generate QR code: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we are simply using an &lt;strong&gt;&lt;code&gt;input()&lt;/code&gt;&lt;/strong&gt; function to obtain user input and storing it in the &lt;strong&gt;&lt;code&gt;data&lt;/code&gt;&lt;/strong&gt; variable.&lt;/p&gt;

&lt;p&gt;Now it's time we create the QR Code!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;qr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyqrcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we are simply using &lt;strong&gt;&lt;code&gt;pyqrcode.create()&lt;/code&gt;&lt;/strong&gt; function which is a part of our &lt;strong&gt;&lt;code&gt;pyqrcode&lt;/code&gt;&lt;/strong&gt; module. This function will take our user input as a parameter and will generate a QR code. That QR code will then be stored in the &lt;strong&gt;&lt;code&gt;qr&lt;/code&gt;&lt;/strong&gt; variable.&lt;/p&gt;

&lt;p&gt;However, we cannot see that QR code yet. To see it, we have to export it into a file. That can be easily done using another function... Here's how:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'qr_code.svg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we are using &lt;strong&gt;&lt;code&gt;svg('FILE_NAME', scale = 8)&lt;/code&gt;&lt;/strong&gt; function were we have to provide the name of the QR code file to be generated and a scale parameter which by default will be &lt;strong&gt;&lt;code&gt;8&lt;/code&gt;&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;And here we did it. Now go ahead and try this one out on your own. 🤩&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code" class="anchor"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h2&gt;

&lt;p&gt;You can find the complete source code of this project here -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mindninjaX/Python-Projects-for-Beginners/tree/master/QR%20code%20generator"&gt;mindninjaX/Python-Projects-for-Beginners&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support" class="anchor"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;Thank you so much for reading! I hope you found this beginner project useful. &lt;/p&gt;

&lt;p&gt;If you like my work please consider &lt;a href="https://buymeacoff.ee/mindninjaX"&gt;Buying me a Coffee&lt;/a&gt; so that I can bring more projects, more articles for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNezDmj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNezDmj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png" alt="https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also if you have any questions or doubts feel free to contact me on &lt;a href="https://twitter.com/mindninjaX"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/mindninjax/"&gt;LinkedIn&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/mindninjaX"&gt;GitHub&lt;/a&gt;. Or you can also post a comment/discussion &amp;amp; I will try my best to help you :D&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to watch your code interact with the Rails framework (and other gems)</title>
      <author>Kevin Gilpin</author>
      <pubDate>Fri, 12 Feb 2021 16:50:46 +0000</pubDate>
      <link>https://dev.to/kgilpin/how-to-watch-your-code-interacting-with-rails-5894</link>
      <guid>https://dev.to/kgilpin/how-to-watch-your-code-interacting-with-rails-5894</guid>
      <description>&lt;p&gt;Rails + Your Code = ❤️. Most of the time!&lt;/p&gt;

&lt;p&gt;The one criticism that sticks to the Rails framework (and any other big framework, to be honest), is that Rails does so much for you it can be hard to understand what's really going on. Usually, we can just follow the Rails cookbooks and watch the magic happen. But sometimes, we really need to understand how Rails (and projects in the Rails ecosystem like Rack, Devise, Sequel, Delayed Job | Resque | Sidekiq,  database drivers, etc) actually work. And even more importantly, how they work &lt;strong&gt;with your code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You're probably already familiar with REPL and debugging tools like &lt;a href="https://github.com/pry/pry"&gt;pry&lt;/a&gt; and &lt;a href="https://github.com/deivid-rodriguez/byebug"&gt;byebug&lt;/a&gt;. These tools take an "inside-out" approach to troubleshooting. You choose a point in your code where you want to start, and then you can explore outwards from there. But while you can get a lot of detailed information that way, it's hard to build an understanding of what's going on overall in the codebase.&lt;/p&gt;

&lt;p&gt;So what happens when you don't even know where to start? Then you need more of an "outside-in" approach. Here's a cookbook you can follow to see how your code is working with Rails and other gems, starting from the widest scope and narrowing in on details.&lt;/p&gt;

&lt;p&gt;We will be using a an open source tool called &lt;a href="https://marketplace.visualstudio.com/items?itemName=appland.appmap"&gt;AppMap for VSCode&lt;/a&gt; (disclaimer: I'm an AppMap developer). AppMap automatically builds diagrams of software architecture and runtime behavior. Here's how you do it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zpjkmNB9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://vscode-appmap.s3.us-east-2.amazonaws.com/media/AppMap%2Bextension%2Bfor%2BVSCode%2B-%2Bquick%2Band%2Beasy%2Bsetup.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zpjkmNB9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://vscode-appmap.s3.us-east-2.amazonaws.com/media/AppMap%2Bextension%2Bfor%2BVSCode%2B-%2Bquick%2Band%2Beasy%2Bsetup.gif" alt="Install appmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-install-and-configure-the-raw-appmap-endraw-gem" class="anchor"&gt;
  &lt;/a&gt;
  1. Install and configure the &lt;code&gt;appmap&lt;/code&gt; gem
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/applandinc/appmap-ruby/#installation"&gt;Install the &lt;code&gt;appmap&lt;/code&gt; gem&lt;/a&gt; by following the instructions in the README. Here's a quick checklist:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the &lt;code&gt;appmap&lt;/code&gt; gem to the Gemfile.&lt;/li&gt;
&lt;li&gt;Add the Railtie.&lt;/li&gt;
&lt;li&gt;Configure &lt;code&gt;config.appmap.enabled&lt;/code&gt; in &lt;code&gt;application.rb&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Update the &lt;code&gt;spec_helper&lt;/code&gt; or &lt;code&gt;test_helper&lt;/code&gt;, if applicable.&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;appmap.yml&lt;/code&gt; and configure the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;packages&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-add-dependency-gems-to-raw-appmapyml-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  2. Add dependency gems to &lt;code&gt;appmap.yml&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Quit your VSCode session and use this Gist to &lt;a href="https://gist.github.com/kgilpin/3c8cf4e67e5cbc80c5c3221936bfcbe3"&gt;open a VSCode project with all the Rails source code&lt;/a&gt;. You are doing this so that you will be able to click into dependency gem source code from the diagrams.&lt;/p&gt;

&lt;p&gt;When you run the &lt;code&gt;rails_gem_paths.rb&lt;/code&gt; script, it will print out a list of &lt;code&gt;action*&lt;/code&gt; and &lt;code&gt;active*&lt;/code&gt; gem names.&lt;/p&gt;

&lt;p&gt;Copy and paste these lines into your &lt;em&gt;appmap.yml&lt;/em&gt; file, so that it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my_project&lt;/span&gt;
&lt;span class="na"&gt;packages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app/models&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app/controllers&lt;/span&gt;
  &lt;span class="s"&gt;... any other project source folder&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;gem&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rack&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;gem&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;paperclip&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;gem&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actionview&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;gem&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;activerecord&lt;/span&gt;
  &lt;span class="s"&gt;... any other dependency gem you want&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can also add other gems, such as &lt;code&gt;paperclip&lt;/code&gt;, &lt;code&gt;aws-sdk&lt;/code&gt;, &lt;code&gt;imagemagick&lt;/code&gt;, etc. Whatever you need.&lt;/p&gt;

&lt;p&gt;Here's an example &lt;a href="https://github.com/land-of-apps/sample_app_6th_ed/blob/basic-login/appmap.yml"&gt;&lt;em&gt;appmap.yml&lt;/em&gt;&lt;/a&gt; that I use with the my fork of the Rails Sample App 6th Edition.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-record-the-code-trace" class="anchor"&gt;
  &lt;/a&gt;
  3. Record the code trace
&lt;/h2&gt;

&lt;p&gt;Now you have a choice of how to record your code. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Option 1: Run tests&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have an RSpec or Minitest test that performs the behavior that you want to observe, run this test with &lt;code&gt;APPMAP=true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Option 2: Run the server and use the app&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you don't have a test that does what you need, run the server with &lt;code&gt;WEB_CONCURRENCY=1&lt;/code&gt; and &lt;code&gt;APPMAP_RECORD=true&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Then open your app in the browser and interact with it. If your app is an API server, run the server and send API requests. Either way, you'll get an &lt;em&gt;appmap.json&lt;/em&gt; file when the server exits.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-view-the-diagrams" class="anchor"&gt;
  &lt;/a&gt;
  4. View the diagrams
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=appland.appmap"&gt;AppMap for VSCode&lt;/a&gt; enables you to open any &lt;em&gt;*.appmap.json&lt;/em&gt; and explore it visually. If you ran test cases, you can find the diagrams in &lt;em&gt;tmp/appmap/[minitest | rspec]&lt;/em&gt;. If you generated an &lt;em&gt;appmap.json&lt;/em&gt;, rename it something representative, like &lt;em&gt;login.appmap.json&lt;/em&gt;. Then click on it in VSCode to view it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here are some diagram examples, for which I'm using the Rails Sample App 6th Edition. I mapped a test case in which a &lt;a href="https://github.com/land-of-apps/sample_app_6th_ed/blob/basic-login/test/integration/users_signup_test.rb#L16"&gt;user signs up for the sample app using valid information&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I open the AppMap, the first thing that I see is the Dependency map, which shows the HTTP server requests, code packages (both app code and the gems we included in &lt;em&gt;appmap.yml&lt;/em&gt;), as well as the database. Lines on the graph correspond to function calls (not just statically inferred dependencies; actual runtime calls). You can see how the controller makes calls to &lt;code&gt;activemodel&lt;/code&gt;, &lt;code&gt;app/helpers&lt;/code&gt;, and &lt;code&gt;activerecord&lt;/code&gt;. On the left hand side, you can see the controller methods which are used in this test case (&lt;code&gt;new&lt;/code&gt;, &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;show&lt;/code&gt;), as well as the inbound and outbound functions.&lt;/p&gt;

&lt;p&gt;You can navigate from any code component to the source code, and you can step from the dependency map view over to the detailed Trace view. The Trace view shows details of code execution, including parameter values, return values, and SQL.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/gE50vG7e_bs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;How about if I want to explore the app from a SQL perspective? This video clip shows how to find a SQL query of interest and then step back up through the Rails framework that generates the query, all the way back into user code (&lt;code&gt;UsersController#create&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7bYCe5DnAR4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapup" class="anchor"&gt;
  &lt;/a&gt;
  Wrap-up
&lt;/h2&gt;

&lt;p&gt;I hope you find this helpful! You can find more resources about using AppMap for VS Code on the extension page, and on the &lt;a href="https://appland.com/blog"&gt;AppLand blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>debugging</category>
    </item>
    <item>
      <title>Changing careers into tech: Why perseverance and mindset matters.</title>
      <author>Rita Correia</author>
      <pubDate>Fri, 12 Feb 2021 16:39:36 +0000</pubDate>
      <link>https://dev.to/ritaxcorreia/changing-careers-into-tech-why-perseverance-and-mindset-matters-3g6j</link>
      <guid>https://dev.to/ritaxcorreia/changing-careers-into-tech-why-perseverance-and-mindset-matters-3g6j</guid>
      <description>&lt;p&gt;2020 was the year of &lt;em&gt;change&lt;/em&gt; for all of us. We had to adapt to a new reality, where draconian words like “lockdown” and “pandemic” became the new normal. It was also the year I decided to turned my life around and change careers…  &lt;/p&gt;

&lt;p&gt;What in Summer 2020 seemed to be a huge mountain to climb, it became a reality in early February 2021 and I still have to pinch myself that I actually pulled this off, and &lt;strong&gt;landed my first role and a Frontend Engineer&lt;/strong&gt;! 🎉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-true-what-they-say-it-aint-easy" class="anchor"&gt;
  &lt;/a&gt;
  It's true what they say, it ain't easy
&lt;/h2&gt;

&lt;p&gt;I must say that changing careers in your early 30’s with a young child in tow sure is challenging, although having a lot of self-discipline and focus definitely helped keeping me in the right track.&lt;/p&gt;

&lt;p&gt;If you’re on the same path and pursuing a career in tech, please don’t give up! Stepping out of our comfort zone and trying something new requires a level of mental strength that we might not be used to anymore, especially as adults.&lt;br&gt;
The uncertainty and self-doubt can be hard to manage at times, and in these moments a new mindset must come into play: the &lt;strong&gt;growth mindset&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-mindset-had-to-change" class="anchor"&gt;
  &lt;/a&gt;
  My mindset had to change
&lt;/h2&gt;

&lt;p&gt;Whether I liked or not, I grew up both being moulded by or fighting against what the people around me thought would be the best for me. Good intentions, of course. But it was always implicit that because I wasn’t getting straight As in Maths, pursuing studies or a career in STEM wouldn’t be the best option for me. Unfortunately, lots of girls and young women go through these exact same feelings of inadequacy, having invisible barriers put up in front of them.&lt;br&gt;
I developed my personality under the assumption I wasn’t good enough or smart enough, and with that came a fixed mindset that lasted throughout my early adulthood. Although I always considered myself hardworking and goal-driven, this mindset eventually led me to follow the path of least resistance. I always tended to dedicate time to things I was comfortable with, where it was easy to see what was on the other side of the tunnel.&lt;/p&gt;

&lt;p&gt;Software engineering wasn’t even an option for me while growing up in countryside Portugal, especially as a young female. For some time I wanted to be a journalist while my family tried hard to convince me I should study Law. I wasn't having it. I enjoyed being creative and ended up studying New Communication Technologies in University, which thankfully gave me a good mix of user-centric design, coding and computer science fundamentals. I learnt HTML, CSS, ActionScript&lt;br&gt;
(you know Flash was all the rage in 2005) and some PHP (which I now remember absolutely nothing about), with some 3D modeling and video in the mix.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Perseverance is your most powerful weapon when it comes to learning new skills.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I did finish my Bachelor's Degree but I didn’t even consider pursuing a technical role because &lt;em&gt;again&lt;/em&gt; I didn’t think I was smart enough, good enough or that i could possibly succeed in the tech world. My Uni experience definitely felt like a "boys club", where the men were into programming and I once again leaned towards the creative aspects of my degree, finding comfort hanging out with other like minded females, who highly likely felt a bit lost like me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-career-path-doesnt-have-to-be-linear" class="anchor"&gt;
  &lt;/a&gt;
  A career path doesn't have to be linear
&lt;/h2&gt;

&lt;p&gt;Being professionally stagnated to a point of having no real sense of direction was consuming me. With age and increasing dissatisfaction in regards to my choice of career, I eventually stopped caring about what people expected of me.&lt;br&gt;
I stopped believing in the notion that you are born with only one talent, and that you are expected to stay in what will likely be a fifty-year work-life.&lt;/p&gt;

&lt;p&gt;No.&lt;/p&gt;

&lt;p&gt;We are multidisciplinary beings with a plethora of interests and capabilities and we can find ways to channel them, if we're audacious enough to step outside our own box. &lt;/p&gt;

&lt;p&gt;Being a mother, I also wanted to set a good example for my daughter, hoping to become someone she can look up to as she grows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#persevere-and-believe-in-yourself" class="anchor"&gt;
  &lt;/a&gt;
  Persevere and believe in yourself
&lt;/h2&gt;

&lt;p&gt;You can be anything you want to be, if you work hard enough and keep persevering.&lt;/p&gt;

&lt;p&gt;Our talents can be developed through hard work, good strategies and discipline. People with a growth mindset tend to achieve more than those who believe their talents are innate gifts, and because of this they will put more energy into learning.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For the first time, I stuck with something I was inherently both fascinated and scared by.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Countless times I considered giving up and taking a U-turn, but I am glad I persevered and kept at it. If changing careers into tech is something you're currently attempting, &lt;strong&gt;DO NOT GIVE UP!&lt;/strong&gt;&lt;br&gt;
Sharing goals with close family and friends will help massively as they will likely be rooting for you, while making you accountable.&lt;/p&gt;

&lt;p&gt;It was also extremely important having some badass role models and an incredible sense of support from the &lt;a href="https://twitter.com/"&gt;Twitter&lt;/a&gt; community, where I could share my journey with other folks like me.&lt;br&gt;
There are great initiatives to help you stick to your goals such as #100DaysOfCode, #Javascript30, #7Days7Projects or even #30Days30Projects. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xOaKl55m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b72e0dijbavzhndt12xs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xOaKl55m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b72e0dijbavzhndt12xs.jpg" alt="if-we-persevere"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;On my next blogpost, I will share some tips and advice from my experience in landing my first tech role!&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>womenintech</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>I  wrote a crawler for the first time.</title>
      <author>Kayla Sween</author>
      <pubDate>Fri, 12 Feb 2021 15:58:51 +0000</pubDate>
      <link>https://dev.to/kaylasween/i-wrote-a-crawler-for-the-first-time-58l3</link>
      <guid>https://dev.to/kaylasween/i-wrote-a-crawler-for-the-first-time-58l3</guid>
      <description>&lt;p&gt;Early on in the pandemic, I decided that I wanted a way to track the moving average of cases per day in my state, Mississippi, since that wasn't something our Department of Health had a graph for at the time. Since I thought, "you know, this won't be too long... I could definitely just do this for a few months," I had been manually adding data for every single day until the end of January. I would frequently forget or just not want to look at the data for a month or more at a time. I realized I needed to find a way to automate this process so I didn't have to go back through the last month's data to update my graph. So, I decided to finally write a crawler to get all that data from our state’s Department of Health website without even thinking about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-crawler" class="anchor"&gt;
  &lt;/a&gt;
  The Crawler
&lt;/h2&gt;

&lt;p&gt;For me, this was the easy part. I wanted to write a web crawler in a language I was comfortable with to get it up relatively quickly, so I decided on JavaScript. I took bits and pieces from various tutorials I had found and decided on using Axios to grab the data and Cheerio to parse it.&lt;/p&gt;

&lt;p&gt;To start out, I added Axios and Cheerio to my site.&lt;/p&gt;

&lt;p&gt;for yarn: &lt;code&gt;yarn add axios cheerio&lt;/code&gt;&lt;br&gt;
for npm: &lt;code&gt;npm install axios cheerio&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, I included them in the JavaScript file I used for my crawler code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const axios = require('axios')
const cheerio = require('cheerio')&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You could also do it the ✨ES6 way✨:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import axios from 'axios'
import cheerio from 'cheerio'&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also included my JSON file and filestream so I could add the newest data to that JSON file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const fs = require('fs')
const data = require('../src/constants/covidData.json')&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, I created a function to get the latest cases for the day off of the MSDH website. I fetched the data with Axios, loaded it into Cheerio, and then pulled the value out of the section of the DOM that contained the current day's data. I found this selector by going into the dev tools in the browser and looking for the section of the page that contained the daily case data. In this case, there was a &lt;code&gt;data-description&lt;/code&gt; attribute on a &lt;code&gt;p&lt;/code&gt; tag that helped me locate the correct HTML element. I removed any commas from the string it returned and made sure that it was getting saved as an integer so it would work with my charts.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const msdh = 'https://msdh.ms.gov/msdhsite/_static/14,0,420.html'
const getDailyCases = async () =&amp;gt; {
  try {
    const { data } = await axios.get(msdh)
    const $ = cheerio.load(data);
    let dailyCases = parseInt($('[data-description="New cases"]').text().replace(/,/g, ''))

    return dailyCases
  } catch (error) {
    throw error;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I created a new date object. And since All data is from the previous day, I set the date to the day before.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let today = new Date()
today.setDate(today.getDate() - 1)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then initialized my data object to eventually add those two pieces of information to an object to add to my JSON file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let dailyCases = {
    newCases: 0,
    date: today.getFullYear() + '-' + today.getMonth() + '-' + today.getDate() //formatting date to match what I needed
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, I wrote another async function to call my &lt;code&gt;getDailyCases&lt;/code&gt; function and, after it gets that data, add it to my JSON file as long as there are new cases, and that date doesn't exist in the JSON file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const getCovidData = async () =&amp;gt; {
  dailyCases.newCases = await getDailyCases()

  if (!data.data.includes(daily.date) &amp;amp;&amp;amp; daily.newCases != 0) {
    data.data.push(dailyCases)

    fs.writeFile('src/constants/covidData.json', JSON.stringify(data), (err) =&amp;gt; {
      if (err) {
        throw err;
      }
    })
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, of course, call that function so that it'll actually run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;getCovidData()&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's all there is to the crawler! You can check out the &lt;a href="https://github.com/kaylasween/KaylaSweenWebsite/blob/main/functions/msdatacrawler-background.js"&gt;full crawler file on my GitHub&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-it-to-run-regularly" class="anchor"&gt;
  &lt;/a&gt;
  Getting it to run regularly
&lt;/h2&gt;

&lt;p&gt;My first thought was to use a combination of Netlify functions to run the web crawler and Zapier to schedule the daily deployment. I quickly realized this wasn't going to work. Since my database was just a JSON file in my GitHub repo, I needed to make sure that the data was getting added every day. When I tried using the Netlify/Zapier combination, it would run the crawler and "overwrite" the last entry daily, since that data wasn't getting pushed back to GitHub.&lt;/p&gt;

&lt;p&gt;After that didn't pan out, I decided to try GitHub Actions, which I had never used before. (&lt;strong&gt;Spoiler&lt;/strong&gt;, this is what I ended up using.)&lt;/p&gt;

&lt;p&gt;I just jumped right into GitHub Actions without any real research or planning. Normally, that's not something I'd recommend. However, it worked out pretty well this time because of how well the default YAML file was commented. I used a lot of the default YAML file for the action.&lt;/p&gt;

&lt;p&gt;To get the Action to run daily, I used &lt;a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07"&gt;POSIX cron syntax&lt;/a&gt; to set the interval.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;on:
  schedule:
    - cron: "00 20 * * *"&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of those places separated by spaces represents a unit of time. This will determine how often your Action will run. A lot of times, you may see that denoted by five asterisks (&lt;code&gt;"* * * * *"&lt;/code&gt;). The first place is the minute field. The second place is the hour (which hour in UTC). The third is the day. The fourth is the month (&lt;code&gt;1&lt;/code&gt;-&lt;code&gt;12&lt;/code&gt; or &lt;code&gt;JAN&lt;/code&gt;-&lt;code&gt;DEC&lt;/code&gt;). Finally, the fifth place is the day of the week (&lt;code&gt;0&lt;/code&gt;-&lt;code&gt;6&lt;/code&gt; or &lt;code&gt;SUN&lt;/code&gt;-&lt;code&gt;SAT&lt;/code&gt;). If you leave any of these as a star, it'll run for every one of those units of time. In my code, I wanted my Action to run every day at UTC 20:00 (or 2PM CST) to ensure the Department of Health had time to publish data that day. Therefore, I only put units of time in the minute and hour places and left the rest as asterisks.&lt;/p&gt;

&lt;p&gt;Once I determined how often I needed it to run, I needed to define what the actual job (with steps!) was that I need it to run. So I set up Node.js, installed my dependencies (Axios and Cheerio), ran my crawler, and then pushed the changes to my repository.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on (I left it as the default)
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.4
    
      - name: Install axios and cheerio
        run: |
          npm install axios
          npm install cheerio
    
      - name: Get Covid Data
        run: |
          node functions/crawler.js
          
      - name: Push changes
        uses: actions-go/push@v1
        with:
          # The commit message used when changes needs to be committed
          commit-message: "running daily COVID data crawler"&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's all there is to it! Now the web crawler is running every day! You can check out the &lt;a href="https://github.com/kaylasween/KaylaSweenWebsite/blob/main/.github/workflows/main.yml"&gt;GitHub Action file on my GitHub&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You can also see the final product in action on the &lt;a href="https://www.kaylasween.com/COVID-19/"&gt;COVID-19 page on my website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seniorish-developers-get-intimidated-too" class="anchor"&gt;
  &lt;/a&gt;
  Senior-ish developers get intimidated too.
&lt;/h2&gt;

&lt;p&gt;Writing a web crawler was something I put off for a LONG time in my career. It was probably the first thing I was asked to do as a developer (which I didn't). Quite honestly, it intimidated me a lot and took me around 9 years to get over that intimidation. I just assumed that I wouldn't be able to do it, and I let that consume me. Now, every single time I see that commit message "running daily COVID data crawler," I feel so proud. I've built many things throughout my career, but this may be the thing I'm most proud of because &lt;strong&gt;I proved to myself that I could do it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let this be a lesson for new developers that sometimes things don't get less scary. You just get less afraid of failing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Illustration from &lt;a href="https://undraw.co/illustrations"&gt;Undraw&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Announcing the Release of Appwrite 0.7 - The Open Source Firebase Alternative</title>
      <author>Eldad A. Fux</author>
      <pubDate>Fri, 12 Feb 2021 15:43:20 +0000</pubDate>
      <link>https://dev.to/eldadfux/announcing-the-release-of-appwrite-0-7-the-open-source-firebase-alternative-530d</link>
      <guid>https://dev.to/eldadfux/announcing-the-release-of-appwrite-0-7-the-open-source-firebase-alternative-530d</guid>
      <description>&lt;p&gt;After months of hard work, +1,800 commits, 650+ pull-requests, and lots of new contributors joining the Appwrite community, we're excited to announce the release of &lt;a href="https://github.com/appwrite/appwrite/releases/tag/0.7.0"&gt;Appwrite 0.7&lt;/a&gt;, our biggest ever release. The new &lt;a href="https://appwrite.io"&gt;Appwrite&lt;/a&gt; version includes over 100 new features, bug fixes, upgrades and security patches, and some significant features like Cloud Functions and the new Appwrite CLI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://appwrite.io"&gt;Appwrite&lt;/a&gt; is an open-source backend server packaged as a set of Docker containers. Deploying Appwrite on any host is extremely simple, and once setup completes, you'll get access to all the Appwrite APIs and services designed to help you build modern software fast and secure.&lt;/p&gt;

&lt;p&gt;You can easily &lt;a href="https://appwrite.io/docs/installation"&gt;install&lt;/a&gt; the new Appwrite version on your localhost or any cloud/hosting provider with a single command from your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--volume&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--volume&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;/appwrite:/usr/src/code/appwrite:rw &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"install"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    appwrite/appwrite:0.7.0
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cloud-functions-%F0%9F%8C%A9" class="anchor"&gt;
  &lt;/a&gt;
  Cloud Functions 🌩
&lt;/h2&gt;

&lt;p&gt;The new version of Appwrite includes the latest &lt;a href="https://appwrite.io/docs/functions"&gt;Cloud Functions&lt;/a&gt; service. The new service allows you to customize your Appwrite backend server behavior using custom code in 7 supported coding languages, including Node.js, Deno, Ruby, Python, PHP, .NET, and Dart (with more to come soon)!&lt;br&gt;
.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--itHVZ2BB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vr7lunkvsxw1u5ntiw93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--itHVZ2BB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vr7lunkvsxw1u5ntiw93.png" alt="Appwrite Functions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appwrite-cli" class="anchor"&gt;
  &lt;/a&gt;
  Appwrite CLI 👩‍💻
&lt;/h2&gt;

&lt;p&gt;This release was accompanied by the release of the new Appwrite CLI. The &lt;a href="https://appwrite.io/docs/command-line"&gt;Appwrite CLI&lt;/a&gt; allows you to interact with Appwrite from your terminal, integrate with Appwrite as part of your CI, and easily package your cloud functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flutter-web-%F0%9F%95%B8" class="anchor"&gt;
  &lt;/a&gt;
  Flutter Web 🕸
&lt;/h2&gt;

&lt;p&gt;Appwrite 0.7, and the new Appwrite Flutter SDK 0.3.0 have added support for Flutter Web. To build web apps that integrate with Appwrite successfully, all you have to do is add a web platform on your Appwrite project’s dashboard and list the domain your website will use to allow communication to the Appwrite API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-more" class="anchor"&gt;
  &lt;/a&gt;
  Learn More 💡
&lt;/h2&gt;

&lt;p&gt;Although Appwrite is still in beta, the new Appwrite version is a huge step forward towards the Appwrite first stable release, and it was only made possible due to the awesome help of the Appwrite community.  &lt;/p&gt;

&lt;p&gt;Visit our &lt;a href="https://github.com/appwrite/appwrite/blob/master/CHANGES.md"&gt;change-log&lt;/a&gt; to view a full list of the available updates for the latest release.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next" class="anchor"&gt;
  &lt;/a&gt;
  What’s Next? 🚀
&lt;/h2&gt;

&lt;p&gt;After you got yourself a copy of the new version of the Appwrite server, you can check some of our getting started guides for  &lt;a href="https://appwrite.io/docs/getting-started-for-web"&gt;Web&lt;/a&gt;,  &lt;a href="https://appwrite.io/docs/getting-started-for-flutter"&gt;Flutter&lt;/a&gt;, or  &lt;a href="https://appwrite.io/docs/getting-started-for-server"&gt;Server&lt;/a&gt;, and visit our  &lt;a href="https://appwrite.io/discord"&gt;Discord community&lt;/a&gt;  where we chat about Appwrite non-stop with over 1,200 fellow Appwriters.&lt;/p&gt;

&lt;p&gt;If you’re excited about this release, you should probably also track what is coming up next by visiting our &lt;a href="https://github.com/appwrite/appwrite/projects"&gt;Github projects&lt;/a&gt;. You can also ask for new features on our  &lt;a href="https://github.com/appwrite/appwrite/issues"&gt;Github issues&lt;/a&gt;  and go over our upcoming feature specs on the  &lt;a href="https://github.com/appwrite/rfc"&gt;Appwrite RFCs repository&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>flutter</category>
      <category>opensource</category>
    </item>
    <item>
      <title>The top 5 ReactJs chart libraries, video review.</title>
      <author>Keerthi</author>
      <pubDate>Fri, 12 Feb 2021 15:17:49 +0000</pubDate>
      <link>https://dev.to/keefdrive/the-top-5-reactjs-chart-libraries-video-review-7f8</link>
      <guid>https://dev.to/keefdrive/the-top-5-reactjs-chart-libraries-video-review-7f8</guid>
      <description>&lt;p&gt;Further to my one of my previous posts titled "The top four React chart libraries that you need to know for 2021", I have created a video review of the chart libraries plus a an extra chart library called "react-chartjs-2". This is basically the react version of the popular javascript library chart.js. &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/keefdrive" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nf6szdql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Ansl3OA_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/448846/7ea69e79-c855-4dc4-85db-ca8f47463ae1.jpg" alt="keefdrive image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/keefdrive/the-top-four-react-chart-libraries-that-you-need-to-know-for-2021-2nl8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The top four React chart libraries that you need to know for 2021&lt;/h2&gt;
      &lt;h3&gt;Keerthi ・ Jan  8 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#reactnative&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;In the video I go through some sample codes, how to install and use and cover the range of charts each library is capable of producing.You can see the whole video here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wA_rMg8jqfs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-recap-i-have-listed-the-reviews-of-the-5-chart-libraries-in-the-below-section" class="anchor"&gt;
  &lt;/a&gt;
  To recap I have listed the reviews of the 5 chart libraries in the below section
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#1recharts" class="anchor"&gt;
  &lt;/a&gt;
  📊 1.Recharts
&lt;/h2&gt;

&lt;p&gt;Recharts is an easy to use component based chart library that works nicely with React. The good thing about recharts is that it provides very nice looking charts out the box. The bad point is that its difficult to customize if you don't like the chart designs it provides. This is one of the first goto chart libraries that most developers turn to first, and is been popular for many years, so has a large community and is well maintained.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github Stars:&lt;/strong&gt;  15.5k &lt;br&gt;
Dev Community: large community size and a very good number of developers contributing to the continual development&lt;br&gt;
&lt;strong&gt;Built With:&lt;/strong&gt;  ReactJS and D3.js&lt;br&gt;
&lt;strong&gt;Drawing support:&lt;/strong&gt;  SVG Only&lt;br&gt;
&lt;strong&gt;Mobile Support:&lt;/strong&gt;  No version specifically for React Native&lt;br&gt;
&lt;strong&gt;Client Side/ Server side:&lt;/strong&gt; Client side&lt;br&gt;
&lt;strong&gt;Animation:&lt;/strong&gt; Very basic animation, NO custom animation support&lt;br&gt;
&lt;strong&gt;Responsive:&lt;/strong&gt; Not by default, need to add wrapper component&lt;br&gt;
&lt;strong&gt;Customisation flexibility:&lt;/strong&gt; There are quite a few little things that are difficult to customize like rendering order and animation.&lt;br&gt;
&lt;strong&gt;Example with live code:&lt;/strong&gt; Good documentation and live code examples at &lt;a href="https://recharts.org/en-US/examples"&gt;https://recharts.org/en-US/examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recharts Demo with code:&lt;/strong&gt; Area chart with cool gradients and animated tooltips &lt;a href="https://codesandbox.io/s/bar-chart-recharts-cqsbn"&gt;https://codesandbox.io/s/bar-chart-recharts-cqsbn&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GkRx44ms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2vieh00mnqeipcw0ol2v.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GkRx44ms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2vieh00mnqeipcw0ol2v.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2victory" class="anchor"&gt;
  &lt;/a&gt;
  📊 2.Victory
&lt;/h2&gt;

&lt;p&gt;Victory charts provide average looking charts out the box, but it gives you the option to fine tune the designs the way you want it. It also provides some flexibility on the animation front. Its selling point is that it's designer friendly and supports Android  and IOS through a React Native version that uses the same API&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github Stars:&lt;/strong&gt;  7k &lt;br&gt;
&lt;strong&gt;Dev Community:&lt;/strong&gt; Its maintained by team of designers and developers from a respected software development company, Formidable.&lt;br&gt;
&lt;strong&gt;Built With:&lt;/strong&gt;  React and D3.js&lt;br&gt;
&lt;strong&gt;Drawing support:&lt;/strong&gt;  SVG&lt;br&gt;
&lt;strong&gt;Mobile Support:&lt;/strong&gt;  Has a React Native version so can develop for ios and Android&lt;br&gt;
&lt;strong&gt;Client Side/ Server side:&lt;/strong&gt; Client side&lt;br&gt;
&lt;strong&gt;Animation:&lt;/strong&gt; fairly good animation support without external animation Libraries.&lt;br&gt;
&lt;strong&gt;Responsive:&lt;/strong&gt; Provides responsive feature by default for SVG charts&lt;br&gt;
&lt;strong&gt;Customisation flexibility:&lt;/strong&gt; Provides adequate customization through its properties, very designer friendly library. But there is a little bit of a learning curve on using it.&lt;br&gt;
&lt;strong&gt;Examples with live code:&lt;/strong&gt; Good interactive documentation with editable code at &lt;a href="https://formidable.com/open-source/victory/docs"&gt;https://formidable.com/open-source/victory/docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Victory Demo with code:&lt;/strong&gt; Animated pie chart &lt;a href="https://codesandbox.io/s/victory-pie-chart-bcmx6"&gt;https://codesandbox.io/s/victory-pie-chart-bcmx6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--81xWUIoF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/paq9s3qp171zheso4ksl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--81xWUIoF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/paq9s3qp171zheso4ksl.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3visx-vx" class="anchor"&gt;
  &lt;/a&gt;
  📊 3.VISX (VX)
&lt;/h2&gt;

&lt;p&gt;VISX (VX) uses D3 to perform mathematical computations while you use React to update the DOM. It comprises of small primitive visualization components that can be used to construct complex visualizations like chord, dendrograms, treemap, and Voronoi diagram. It evolved from projects carried out at Airbnb&lt;/p&gt;

&lt;p&gt;From Airbnb developer site :&lt;br&gt;
"At Airbnb, we made it a goal to unify our visualization stack across the company, and in the process, we created a new project that brings together the power of D3 with the joy of React."&lt;br&gt;
Advantages are: Keep bundle sizes down, Un-opinionated on purpose, and Not a charting library&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github Stars:&lt;/strong&gt;  12k stars on Github&lt;br&gt;
&lt;strong&gt;Dev Community:&lt;/strong&gt; Originally developed by Airbnb, Fairly Large community, well maintained&lt;br&gt;
&lt;strong&gt;Built With:&lt;/strong&gt;  React and D3.js&lt;br&gt;
&lt;strong&gt;Drawing support:&lt;/strong&gt;  SVG&lt;br&gt;
&lt;strong&gt;Mobile Support:&lt;/strong&gt;  No support for Mobile&lt;br&gt;
&lt;strong&gt;Client Side/ Server side:&lt;/strong&gt; Client side&lt;br&gt;
&lt;strong&gt;Animation:&lt;/strong&gt; Can support animation with react-spring&lt;br&gt;
&lt;strong&gt;Responsive:&lt;/strong&gt; Not by default, need to add wrapper component&lt;br&gt;
&lt;strong&gt;Customisation flexibility:&lt;/strong&gt; The Use small d3 based primitive visualization components allows you the freedom to build complex visualizations.&lt;br&gt;
&lt;strong&gt;Examples with live code:&lt;/strong&gt; Quite hard to navigate the documentation, Doesn't explain things very well, but do provide examples with code at &lt;a href="https://vx-demo.now.sh/gallery"&gt;https://vx-demo.now.sh/gallery&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VX Demo with code:&lt;/strong&gt; Advanced animated Pie chart with inner and outer segments  &lt;a href="https://vx-demo.now.sh/pies"&gt;https://vx-demo.now.sh/pies&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-7DBir_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lmt17vqmvsz86hu72p4x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-7DBir_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lmt17vqmvsz86hu72p4x.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4nivo" class="anchor"&gt;
  &lt;/a&gt;
  📊 4.nivo
&lt;/h2&gt;

&lt;p&gt;Nivo s the only Charting library on this list that provides us the ability to generate charts on the server-side as well.&lt;/p&gt;

&lt;p&gt;Nivo is capable of generating responsive charts using pure HTML, SVG, and canvas. Canvas charts are faster than SVG for extremely large datasets. HTML charts are ideal for email. So Nivo is a very complete library, unlike the rest in the list. Its also designer friendly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github Stars:&lt;/strong&gt;  8.1k stars on Github&lt;br&gt;
&lt;strong&gt;Dev Community:&lt;/strong&gt; Fairly good community and well maintained&lt;br&gt;
&lt;strong&gt;Built With:&lt;/strong&gt;  React and D3.js&lt;br&gt;
&lt;strong&gt;Drawing support:&lt;/strong&gt;  SVG,Canvas,HTML&lt;br&gt;
&lt;strong&gt;Mobile Support:&lt;/strong&gt;  No support for Mobile&lt;br&gt;
&lt;strong&gt;Client Side/ Server side:&lt;/strong&gt; Both&lt;br&gt;
&lt;strong&gt;Animation:&lt;/strong&gt; Supports animation.&lt;br&gt;
&lt;strong&gt;Responsive:&lt;/strong&gt; Provides responsive feature by default for most charts&lt;br&gt;
&lt;strong&gt;Customization flexibility:&lt;/strong&gt; Fairly good customization, can build a chart using their interactive playground or Storybook.&lt;br&gt;
Examples with live code: Very good interactive documentation and live code on storybook at &lt;a href="https://nivo.rocks/storybook/?path=/story/bar--stacked"&gt;https://nivo.rocks/storybook/?path=/story/bar--stacked&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nivo Demo with code:&lt;/strong&gt; Race chart &lt;a href="https://codesandbox.io/s/race-chart-lz5s3"&gt;https://codesandbox.io/s/race-chart-lz5s3&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OfP9mXx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pblpl2nfeexhe6bob7tu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OfP9mXx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pblpl2nfeexhe6bob7tu.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5reactchartjs2" class="anchor"&gt;
  &lt;/a&gt;
  📊 5.REACT-CHARTJS-2
&lt;/h2&gt;

&lt;p&gt;REACT-CHARTJS-2 Is the ReactJS version of Chart.js. It has very good out the box features. The vanilla javascript version has been a very popular javascript chart library for many years, but it has no specific documentation on the usage with React framework. It produces canvas based charts, so that means it good on performance when dealing with large data sets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github Stars:&lt;/strong&gt;  3.7k stars on Github&lt;br&gt;
&lt;strong&gt;Dev Community:&lt;/strong&gt; Fairly maintained, considering that it is a wrapper for chart.js&lt;br&gt;
&lt;strong&gt;Built With:&lt;/strong&gt;  Vanilla javascript&lt;br&gt;
&lt;strong&gt;Drawing support:&lt;/strong&gt;  Canvas&lt;br&gt;
&lt;strong&gt;Mobile Support:&lt;/strong&gt;  No support for Mobile&lt;br&gt;
&lt;strong&gt;Client Side/ Server side:&lt;/strong&gt; Client side&lt;br&gt;
&lt;strong&gt;Animation:&lt;/strong&gt; Can support animation &lt;br&gt;
&lt;strong&gt;Responsive:&lt;/strong&gt; Responsive out the box&lt;br&gt;
&lt;strong&gt;Customisation flexibility:&lt;/strong&gt; Fairly customizable with extra plugins&lt;br&gt;
&lt;strong&gt;Examples with live code:&lt;/strong&gt; There's no specific documentation for react.js, but refer to github page &lt;a href="https://github.com/reactchartjs/react-chartjs-2"&gt;https://github.com/reactchartjs/react-chartjs-2&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>reactnative</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Let's build a responsive navbar from scratch</title>
      <author>crayoncode</author>
      <pubDate>Fri, 12 Feb 2021 15:15:30 +0000</pubDate>
      <link>https://dev.to/crayoncode/let-s-build-a-responsive-navbar-from-scratch-1923</link>
      <guid>https://dev.to/crayoncode/let-s-build-a-responsive-navbar-from-scratch-1923</guid>
      <description>&lt;p&gt;Today let's build a responsive navbar, an animated burger icon and a beautiful uncovering effect from scratch using HTML, CSS, clip-path, flexbox, grid layout and so much more...&lt;/p&gt;

&lt;p&gt;Read the full article or watch me code this on Youtube:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8BoVfb5LbH8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/crayon-code/embed/QWGNJPK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blank-html5-document" class="anchor"&gt;
  &lt;/a&gt;
  Blank HTML5 Document
&lt;/h2&gt;

&lt;p&gt;Let's start with a blank HTML5 Document. This is our starting point which we're going to extend bit by bit throughout the following chapters.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Did you know that typing an exclamation mark (!) and hitting tab in VS CODE generates a blank HTML5 Document?&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Responsive Navbar&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- content will go here --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-styles-and-external-fonts" class="anchor"&gt;
  &lt;/a&gt;
  Using Styles and External Fonts
&lt;/h2&gt;

&lt;p&gt;There are three (more or less) external resources we have to include in the documents &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Our own stylesheet in &lt;code&gt;styles.css&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We'll be using the font &lt;em&gt;Nunito&lt;/em&gt; as the page's default font. Therefore it is loaded via Google Fonts. The font weights 200 and 400 will be used.&lt;/li&gt;
&lt;li&gt;Font Awesome via &lt;code&gt;cdnjs.com&lt;/code&gt;. Watch out for the &lt;code&gt;integrity&lt;/code&gt; attribute as it is a nice security feature. If the SHA checksum of the file downloaded by the user agent differs from the SHA checksum given in the &lt;code&gt;integrity&lt;/code&gt; attribute, the browser knows that the downloaded content was tampered with and is therefore rejected. See &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity"&gt;this MDN Article&lt;/a&gt; for more about &lt;em&gt;subresource integrity&lt;/em&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  ....

  &lt;span class="c"&gt;&amp;lt;!-- or own styles --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; 
    &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"styles.css"&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- "Nunito" font via google fonts --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; 
    &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.gstatic.com"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
    &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=Nunito:wght@200;400&amp;amp;display=swap"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- Font Awesome via CDNJS  --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; 
    &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css"&lt;/span&gt; 
    &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha512-HK5fgLBL+xu6dm/Ii3z4xhlSUyZgTT9tuc/hSrtw6uzJOvgRr2a9jyxxT1ely+B+xFAmJKVSTbpM/CuL7qxO8w=="&lt;/span&gt; 
    &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#variables-and-basic-styles" class="anchor"&gt;
  &lt;/a&gt;
  Variables and Basic Styles
&lt;/h2&gt;

&lt;p&gt;Now, in our &lt;code&gt;styles.css&lt;/code&gt; file, let's start with a few basic things. For instance, &lt;em&gt;variables&lt;/em&gt;. It's extremely useful for customization to have the colors we'll be using in variables and common, repetitive things like the transition setup also.&lt;/p&gt;

&lt;p&gt;Note the &lt;code&gt;nav-height&lt;/code&gt; variable as it will allow us to control the navigation bar's height and many other elements' position and size are going to depend on that variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--fg-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--bg-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2b2b2b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--highlight-primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#008aff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--gradient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;300deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#ba4aff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;186&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;74&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;227deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#008aff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;138&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;104deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#00ffc6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;198&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;74%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="py"&gt;--nav-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="py"&gt;--transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250ms&lt;/span&gt; &lt;span class="n"&gt;ease-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="py"&gt;--transition-long&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500ms&lt;/span&gt; &lt;span class="n"&gt;ease-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This block resets &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;margin&lt;/code&gt; and &lt;code&gt;box-sizing&lt;/code&gt; for each element, so it brings us a great deal of consistency across browsers and elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;On the root &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element we're defining the basic text color as well as the basic font, including the font size. This is quite important, as we're going to use a lot of &lt;code&gt;rem&lt;/code&gt; values and they are always relative to the font size being set on the root &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Nunito"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; is simply going to be a flex container that centers content horizontally and puts content to the very top. &lt;code&gt;min-height: 100vh&lt;/code&gt; ensures that the body always takes at least the full viewport height, which spans the background color across the entire page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--nav-height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bg-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--fg-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#header-markup-amp-css-setup" class="anchor"&gt;
  &lt;/a&gt;
  Header Markup &amp;amp; CSS Setup
&lt;/h2&gt;

&lt;p&gt;Let's start with a simple &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; tag...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;... which is going to be positioned &lt;code&gt;fixed&lt;/code&gt;, i.e. independently of the scrolling position in the document, it is always going to have the position provided through &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--nav-height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bg-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--fg-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-2px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--highlight-primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For managing the flow of content inside the header, we'll use a CSS grid that automatically generates a new column for each element through &lt;code&gt;grid-auto-flow: column&lt;/code&gt;. Setting &lt;code&gt;grid-auto-columns&lt;/code&gt; to &lt;code&gt;max-content&lt;/code&gt; tells the CSS grid to fit each cell nicely around the content of each element without enforcing line breaks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;...&lt;/span&gt;

  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-auto-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-auto-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-logo" class="anchor"&gt;
  &lt;/a&gt;
  The Logo
&lt;/h2&gt;

&lt;p&gt;On the left there's going to be a logo which is simply a feather icon from font awesome:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-feather-alt"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The feature will be styled such that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is placed in the center of the containing &lt;code&gt;div.logo&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Has a background accorindg to the variable &lt;code&gt;--highlight-primary&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Has its top left and bottom right corner rounded off to make it fit the shape of the feather.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0rem&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--highlight-primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.logo&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-top-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-bottom-right-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--highlight-primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bg-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-navigation-bar-itself" class="anchor"&gt;
  &lt;/a&gt;
  The navigation bar itself
&lt;/h2&gt;

&lt;p&gt;Let's put a few items into our navigation bar. Which means that we're going to use the contextual HTML5 &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; tag as a container for the navigation bar. Inside it, an unordered list is used and visually tailred to our needs. The basic structure of each navigation item is a link with an icon and a label.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"far fa-chart-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;Dashboard&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"far fa-edit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;Projects&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"far fa-envelope-open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;Posts&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In order to align all navigation items next to each other, the unordered list &lt;code&gt;ul&lt;/code&gt; is also setup to be a grid container just like we already did on the header tag. There are two slight differences:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;grid-template-rows&lt;/code&gt; property is set to &lt;code&gt;1fr&lt;/code&gt;, stating that there is only one row and this row should consume all the space that is available.&lt;/li&gt;
&lt;li&gt;There is a &lt;code&gt;gap&lt;/code&gt; between each cell of &lt;code&gt;0.5rem&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-auto-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-auto-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0rem&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;list-style-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;li&lt;/code&gt; list item is again set up to be a grid container and by default the only child element (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) is nicely stretched to the items dimensions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#link-styling" class="anchor"&gt;
  &lt;/a&gt;
  Link Styling
&lt;/h2&gt;

&lt;p&gt;Since we want to center the content of each link vertically, it is a &lt;code&gt;flex&lt;/code&gt; container with &lt;code&gt;align-items&lt;/code&gt; set to &lt;code&gt;center&lt;/code&gt;. The rest of the styling is there for&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;putting some padding and slightly rounded of corners&lt;/li&gt;
&lt;li&gt;setting the text and background color&lt;/li&gt;
&lt;li&gt;removing the unnecessary underline styling of the link&lt;/li&gt;
&lt;li&gt;making the background color transitionable, which is useful for the hover style. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The icon in each link has a slightly decreased font size in order to achieve a good proportion with respect to the actual text's size.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0rem&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--fg-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;background-color&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--transition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--highlight-primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--transition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So for the hover styling the links background color is changed to the highlight color and the icon's color is is also changed to the darker background color:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--highlight-primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bg-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-burger-menu-button" class="anchor"&gt;
  &lt;/a&gt;
  The burger menu button
&lt;/h2&gt;

&lt;p&gt;The menu items will be put into a separate navigation bar attached to the right corner, once the screen gets too small to contain all navigation items. However, then we're going to need some sort of trigger or button that will make the menu visible or invisible if clicked again. For this reason we're going to use a checkbox as we can react to the state of it through the &lt;code&gt;:checked&lt;/code&gt; pseudo-class. And since styling a checkbox can be really messy, we'll be using a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; that is referencing the checkbox via the &lt;code&gt;for&lt;/code&gt; attribute. This allows us to put all the styling that we need on the label and since the &lt;code&gt;for&lt;/code&gt; attribute contains the same id as the one given on the checkbox, clicking the label will also toggle the checkbox itself. So we can safely hide the checkbox without losing functionality (Not talking about accessibility at this point - which I want to cover in a seperate post).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"nav-toggle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"nav-toggle"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"nav-toggle-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
  &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, as indicated above, the label &lt;em&gt;and&lt;/em&gt; the checkbox are hidden by default, since we assume by default that there is enough space for the navigation items.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#nav-toggle-label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#nav-toggle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By using &lt;code&gt;@media&lt;/code&gt; queries we can now determine the state of the viewport which we define as &lt;em&gt;too small&lt;/em&gt; to display the navigation items. In our case, if the screen/viewport size is less than &lt;code&gt;768px&lt;/code&gt; wide, certain styles are applied that change the appearance and behaviour of the navigation bar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* 
    styles which are applied only if the page is
    rendered on a screen (e.g. not printed) and
    the viewport's width is less thant 768px wide
  */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first thing we're going to do is to position the &lt;code&gt;nav&lt;/code&gt; element similar to the header in &lt;code&gt;fixed&lt;/code&gt; mode, but not attached to the top edge of the viewport, but to the right:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--nav-height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gradient&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-2px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clip-path&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--transition-long&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
      &lt;span class="n"&gt;background-color&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--transition-long&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we also have to change the flow of the grid inside the unordered list &lt;code&gt;ul&lt;/code&gt; via &lt;code&gt;grid-auto-flow&lt;/code&gt; from &lt;code&gt;column&lt;/code&gt; to &lt;code&gt;row&lt;/code&gt;. That way the navigation items become arranged vertically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-auto-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-auto-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The rest of the styling slightly changes the alignment of the links to left (&lt;code&gt;place-content&lt;/code&gt;) and changes the colors in default and hover state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;place-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bg-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bg-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--highlight-primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#menu-button" class="anchor"&gt;
  &lt;/a&gt;
  Menu button
&lt;/h2&gt;

&lt;p&gt;Finally it's time to style the menu button. First, let's configure the &lt;code&gt;header&lt;/code&gt; tag to keep the logo on the left and push the menu button to the right, which is achieved by setting &lt;code&gt;justify-content&lt;/code&gt; to &lt;code&gt;space-between&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To create a menu button that is able to transition from being a button with a menu icon (three bars stacked on top of each other) to a button with a close icon, we simply put three &lt;code&gt;div.bars&lt;/code&gt; inside the &lt;code&gt;label&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"nav-toggle"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"nav-toggle-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  ...
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, let's setup a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;--size&lt;/code&gt; variable controls the size of the menu button and is proportionally to the nav bar's height&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;--bar-height&lt;/code&gt; variable tells each bar how high it should to be.&lt;/li&gt;
&lt;li&gt;The bars are arranged in a stacked way by using flex-box in &lt;code&gt;column&lt;/code&gt; direction with &lt;code&gt;space-between&lt;/code&gt; such that all bears are distributed evenly through the containing element's height.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;#nav-toggle-label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--nav-height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="py"&gt;--bar-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-basis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--nav-height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Each bar itself is simply setup to have the &lt;code&gt;--bg-color&lt;/code&gt; variable as background color and to use the &lt;code&gt;--bar-height&lt;/code&gt; variable from above. With &lt;code&gt;width: 100%;&lt;/code&gt; is is stretched to consume the entire horizontal space being available.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nf"&gt;#nav-toggle-label&lt;/span&gt; &lt;span class="nc"&gt;.bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bar-height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bg-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;250ms&lt;/span&gt; &lt;span class="n"&gt;ease-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now it get's interesting as we're going to define how the three bars are reshaped to a close icon. Each selector is bound to the &lt;code&gt;:checked&lt;/code&gt; pseudo-class of the checkbox, so this styles are not applied if the checkbox is not checked.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The topmost bar is rotated by 225 degrees and shifted down to the center of the containing element.&lt;/li&gt;
&lt;li&gt;The lowest bar is rotated by 135 degrees (225 degrees minus 90 degrees) and shifted upwards to the center of the containing element.&lt;/li&gt;
&lt;li&gt;The middle element is simply made invisible by scaling it to zero on the x-axis.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;#nav-toggle&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;#nav-toggle-label&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.bar&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
      &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bar-height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
      &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;225deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nf"&gt;#nav-toggle&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;#nav-toggle-label&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.bar&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scaleX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nf"&gt;#nav-toggle&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;#nav-toggle-label&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.bar&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
      &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bar-height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
      &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;135deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#expanding-and-collapsing-the-nav-menu" class="anchor"&gt;
  &lt;/a&gt;
  Expanding and collapsing the nav menu
&lt;/h2&gt;

&lt;p&gt;We're almost done! Now we need to cut down the navigation bar to a small circle positioned right behind the menu icon if the checkbox is not checked. That's why we use a &lt;code&gt;clip-path&lt;/code&gt; with radius of &lt;code&gt;1rem&lt;/code&gt; (one third of the navbar's height) and a center point in the top right corner of the viewport but shifted slightly left and down to match the navigation bar's height.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;...&lt;/span&gt;

    &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--nav-height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;at&lt;/span&gt; 
        &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--nav-height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--nav-height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This circle is then expanded to 125% of the larger edge of the viewport (&lt;code&gt;125vmax&lt;/code&gt;). The &lt;code&gt;vmax&lt;/code&gt; unit is really convenient as it dynamically changes its base measure to either the viewport's width or height - depending on which one of the both is the larger one. So 125% of the larger edge gives us enough space to cover the height of the viewport.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;#nav-toggle&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;125vmax&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bg-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As a final touch, the &lt;code&gt;clip-path&lt;/code&gt; property is made transitionable to make expanding and collapsing the menu quite smooth. And that's already it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;...&lt;/span&gt;    
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clip-path&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--transition-long&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
      &lt;span class="n"&gt;background-color&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--transition-long&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>ui</category>
    </item>
    <item>
      <title>How to Implement Google Photos Grid in javascript</title>
      <author>Shailesh</author>
      <pubDate>Fri, 12 Feb 2021 13:59:08 +0000</pubDate>
      <link>https://dev.to/shaileshpandit/how-to-implement-google-photos-grid-in-javascript-575i</link>
      <guid>https://dev.to/shaileshpandit/how-to-implement-google-photos-grid-in-javascript-575i</guid>
      <description>&lt;p&gt;This is a step by step tutorial of how I implemented Scrubbable Photos Grid in javascript.&lt;/p&gt;

&lt;p&gt;Google Photos uses virtual scrubbable photos grid. Scrubbable photos grid is laying out all your photos in grid so that users can jump to any random year/month/day in their timeline. This grid is virtual so that we are efficiently using the user's resources like cpu, memory, disk and network.&lt;/p&gt;

&lt;p&gt;In this blog post I will cover how to implement such a grid in javascript, whether we can substitute this with a simple navigation mechanism for jumping to random year/month/day is separate design discussion all together.&lt;/p&gt;

&lt;p&gt;This implementation will use many techniques to make this virtual grid as close to actual grid including&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Estimating and maintaining grid height as close to actual&lt;/li&gt;
&lt;li&gt;Loading only visible photos to DOM&lt;/li&gt;
&lt;li&gt;Detaching not visible photos from DOM&lt;/li&gt;
&lt;li&gt;Positioning photos absolutely inside grid&lt;/li&gt;
&lt;li&gt;Adjusting scroll position to compensate layout shifts in some scenarios&lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;
  &lt;a href="#design" class="anchor"&gt;
  &lt;/a&gt;
  Design
&lt;/h1&gt;

&lt;p&gt;Throughout the blog I will give summary of design decisions Google has taken for their scrubbable grid, but I will recommend to check this &lt;a href="https://medium.com/google-design/google-photos-45b714dfbed1"&gt;Google Design Blog&lt;/a&gt; for details.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are going to keep our design goals same as stated in Google Design Blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"&lt;strong&gt;Scrubbable Photos&lt;/strong&gt; - the ability to quickly jump to any part of the photo library.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Justified Layout&lt;/strong&gt; - fill the width of the browser and preserve the aspect-ratio of each photo (no square crops).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;60fps Scrolling&lt;/strong&gt; - ensuring the page remains responsive even when looking at many thousands of photos.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Instantaneous Feel&lt;/strong&gt; - minimize the time waiting for anything to load."
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Google has gone extra mile to ensure row heights are uniform and near the target height while implementing justified layout, we will just use Flicker's justified layout lib for this demo.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#implementation" class="anchor"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h1&gt;

&lt;p&gt;I will be implementing this step by step, each step is a commit in the &lt;a href="https://github.com/shaileshpandit/scrubbable-photos-grid"&gt;scrubbable-photos-grid&lt;/a&gt; Github Repo. If you want to skip all detailed explanation and check final implementation, check this &lt;a href="https://glitch.com/edit/#!/scrubbable-photos-grid?path=script.js%3A15%3A0"&gt;Glitch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our grid will be divided into sections, sections will have segments, segments will have tiles and tiles will have an image tag. Will cover reasons for these divisions in detail when we need to add them.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EE58vtid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fg27c23lcwzbdcve5rhj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EE58vtid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fg27c23lcwzbdcve5rhj.png" alt="Section Segments and Tiles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I chose javascript to demonstrate how things should happen at runtime, you should be able to implement this in any client side framework of your choice.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-1-dividing-whole-grid-in-sections-and-estimating-their-heights" class="anchor"&gt;
  &lt;/a&gt;
  Step 1 - Dividing whole grid in sections and estimating their heights
&lt;/h2&gt;

&lt;p&gt;In contrast to pagination and infinite scrolling, scrubbable grid always has all the photos present in the grid giving correct representation of finite height and size of scroll knob. This also gives the user ability to jump to any random time in the whole timeline of photos instantly.&lt;/p&gt;

&lt;p&gt;An inefficient implementation of this will load metadata like width and height of all photos in the whole timeline as soon as page loads. Using the width and height of each photo we can allocate space on page for actual height of the grid. This will waste a lot of bandwidth and initial load time will be unacceptable.&lt;/p&gt;

&lt;p&gt;To reduce this initial metadata payload, we will divide the whole timeline into virtual sections and estimate the height of each section to get the estimated height of the grid. Our initial payload will consist of an array of all sections with a number of images in those sections. Simplest way to divide the whole grid into sections is to have a section per month in the timeline. So if users timeline spans 10 years, our initial payload will consist of max 120 sections and number of photos in each section.&lt;/p&gt;

&lt;p&gt;We start by adding basic html with a &lt;code&gt;grid div&lt;/code&gt; as a container of our  grid.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;Apis used are simulated in &lt;code&gt;api.js&lt;/code&gt;, it basically depends on included &lt;code&gt;store.json&lt;/code&gt; for all section details. We add the &lt;code&gt;getSections&lt;/code&gt; api to retrieve all sections and count of images inside each section. Apis are using random latency of 50-550ms.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;Sample output of &lt;code&gt;getSections&lt;/code&gt; api&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;We add &lt;code&gt;script.js&lt;/code&gt; for loading our grid. Our entry point is &lt;code&gt;loadUi&lt;/code&gt;, in this we call &lt;code&gt;getSections&lt;/code&gt; api. After getting all sections we allocate space by creating an empty &lt;code&gt;div&lt;/code&gt; for each section with estimated height.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As described in Google Design Blog, to estimate height of sections we will assume average aspect ratio of all images being 3:2, approximate total width of all images in that section if laid horizontally and divide it by our grid width to approximate height of section when these images are wrapped at grid width.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;Next we add basic &lt;code&gt;style.css&lt;/code&gt; to highlight sections&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/shaileshpandit/scrubbable-photos-grid/commit/7ddef4c73ee010f248a0235bddc3a80496ec4bb5"&gt;Step 1 Full Commit&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Step 1 Result&lt;/strong&gt; - Observe that all empty section divs with estimated heights are created on load and give estimated height to the whole grid and scroll knob.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9JpUmHmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bsrtdeavyr84276gzyj4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9JpUmHmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bsrtdeavyr84276gzyj4.gif" alt="Step 1"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-2-populating-section-with-segments" class="anchor"&gt;
  &lt;/a&gt;
  Step 2 - Populating section with segments
&lt;/h2&gt;

&lt;p&gt;While sections are virtual divisions of the whole grid to minimize initial load resources, segments are visible divisions of the grid for users to navigate and see photos in logical groups. We are going to use static segments for each day, but can be dynamic based on location or more granular time slots based on the number of photos a user has in a day.&lt;/p&gt;

&lt;p&gt;We add &lt;code&gt;getSegments(sectionId)&lt;/code&gt; api to retrieve all segments of a section and images inside each segment.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;Here is a sample output of a &lt;code&gt;getSegments(sectionId)&lt;/code&gt; call&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;Next we add &lt;code&gt;populateSection(sectionDiv)&lt;/code&gt; method in &lt;code&gt;script.js&lt;/code&gt; to populate a section div. While populating a section div we call &lt;code&gt;getSegments(sectionId)&lt;/code&gt; api, get segment html for all inner segments, add it to section div and update its height to 100% from the estimated height set initially.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;For generating segment html we use &lt;a href="https://www.npmjs.com/package/justified-layout"&gt;justified-layout&lt;/a&gt; lib. It gives us an absolute layout for all the tiles inside the segment. We generate individual tile html using this absolute layout and add it as segment childs.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;We call &lt;code&gt;populateSection&lt;/code&gt; eagerly in &lt;code&gt;populateGrid&lt;/code&gt; for all sections to demonstrate how populated sections will look like in ui and in DOM.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;Finally we make tiles absolutely positioned relative to segments and highlight segments and tiles in &lt;code&gt;style.css&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/shaileshpandit/scrubbable-photos-grid/commit/200db9fc752ae537c8f8d153148a27c5add6e0d4"&gt;Step 2 Full Commit&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Step 2 Result&lt;/strong&gt; - Observe all sections and segments eagerly loaded.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fJZRGi21--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hl2mghdchvvmc04udpns.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fJZRGi21--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hl2mghdchvvmc04udpns.gif" alt="Step 2"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-3-lazily-load-and-unload-sections" class="anchor"&gt;
  &lt;/a&gt;
  Step 3 - Lazily load and unload sections
&lt;/h2&gt;

&lt;p&gt;While in previous step we eagerly loaded all sections on page load for demo, we want to attach sections when they are about to come in viewport and detach when they go out of viewport. We will use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;intersection observer&lt;/a&gt; to implement this.&lt;/p&gt;

&lt;p&gt;First we create &lt;code&gt;sectionObserver&lt;/code&gt; IntersectionObserver with &lt;code&gt;handleSectionIntersection&lt;/code&gt; as the intersection handler and use &lt;code&gt;200px&lt;/code&gt; of margin so that intersection will be triggered when our sections cross virtual viewport of actual viewport + 200px extra on both sides vertically.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;We handle intersection events by populating incoming sections and detaching outgoing sections from the virtual viewport. As populating a section needs fetching segments which is async, actual population can go out of order from intersection order. To mitigate this we maintain &lt;code&gt;lastSectionUpdateTimes&lt;/code&gt; for all sections and only populate if this section was not updated meanwhile.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;We detach the section by removing all child segments and not changing height.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;We attach &lt;code&gt;sectionObserver&lt;/code&gt; to all sections instead of eagerly loading all sections in &lt;code&gt;populateGrid&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/shaileshpandit/scrubbable-photos-grid/commit/b6cab98216964a789f250285cf725e91cad535a7"&gt;Step 3 Full Commit&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Step 3 Result&lt;/strong&gt; - Observe how section divs are getting loaded and unloaded as we scroll.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9EYyEfaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z04umeikzxp2exgz6i6q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9EYyEfaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z04umeikzxp2exgz6i6q.gif" alt="Step 3"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-4-moving-segments-and-sections-to-absolute-positioning" class="anchor"&gt;
  &lt;/a&gt;
  Step 4 - Moving segments and sections to absolute positioning
&lt;/h2&gt;

&lt;p&gt;Ideally browsers will calculate positioning changes of all segments and sections efficiently when height of some section changes. But if we want to make sure we control all positioning changes, we can move both segments and sections to absolute positioning. Our sections will be positioned absolutely within the grid and segments will be positioned absolutely within sections. Our tiles are already positioned absolutely within segments.&lt;/p&gt;

&lt;p&gt;First we set sections and segments to absolute positioning and remove margins in css.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;Next we maintain &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;lastUpdateTime&lt;/code&gt; of all sections as a state in &lt;code&gt;sectionStates&lt;/code&gt;. We initialize it in &lt;code&gt;populateGrid&lt;/code&gt; and use it while creating initial detached sections.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;Next we update &lt;code&gt;populateSection&lt;/code&gt; to generate segments with absolute positioning, calculating top of each segment. We calculate the new height of the section, check if it has changed, in case it is changed, we move all next sections by adding &lt;code&gt;heightDelta&lt;/code&gt; to their tops. We also keep &lt;code&gt;sectionStates&lt;/code&gt; in sync of these changes.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;We don't need to keep the old height any more after detaching the section now, because absolute height remains the same after removing child segments.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/shaileshpandit/scrubbable-photos-grid/commit/ce0d430f51550ea6c69dd0a81cde9fcb5b5b8b26"&gt;Step 4 Full Commit&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Step 4 Result&lt;/strong&gt; - Observe how absolute positioning is maintained by updating the top of all following section divs.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Xb6aDN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bu4sw6mx9bfstiya2v7y.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Xb6aDN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bu4sw6mx9bfstiya2v7y.gif" alt="Step 4"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#step-5-adjust-scroll-position-in-case-of-layout-shift" class="anchor"&gt;
  &lt;/a&gt;
  Step 5 - Adjust scroll position in case of layout shift
&lt;/h2&gt;

&lt;p&gt;At this point if you try to scroll down, sections will get attached and detached as expected and scrolling will feel normal. This works as the user scrolls linearly, sections get attached, their height changes, top of further sections increases, grid height changes, whole layout changes and yet we don't feel jumps while scrolling. This is because all layout changes are after current scroll position.&lt;/p&gt;

&lt;p&gt;This will change if we allow random jumps to the scroll position. e.g. If we jump to a random scroll position on page load, we will be in state with some detached sections with estimated height prior to our current scroll position. Now if we scroll up, sections will get attached before scroll position and will result in layout changes before scroll position. It will feel like the whole page is jumping when we scroll. To try this just add the following to Step 4 commit inside &lt;code&gt;loadUi&lt;/code&gt; and try scrolling up.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;strong&gt;Page Jumping&lt;/strong&gt; - Observe how it feels like page is jumping to new position while scrolling&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P1ABhhoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sp8rhw5l0ii046gsk5n2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P1ABhhoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sp8rhw5l0ii046gsk5n2.gif" alt="Page Jumping"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;To fix this, we check if our current scroll position is ahead of the section for which we adjusted height and adjust scroll by &lt;code&gt;heightDelta&lt;/code&gt; at end of &lt;code&gt;populateSection&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/shaileshpandit/scrubbable-photos-grid/commit/df9599074b011876b9b31b2466503d47b20e98ef"&gt;Step 5 Full Commit&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Final Result&lt;/strong&gt; - Observe how page jumping is fixed by adjusting scroll position&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JCdbb4Ql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jq46vi1o3gsmhgin8b8c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JCdbb4Ql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jq46vi1o3gsmhgin8b8c.gif" alt="Final"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Final Glitch&lt;/strong&gt; - Open &lt;a href="https://scrubbable-photos-grid.glitch.me"&gt;live app&lt;/a&gt;. Use rewind in Glitch to see each step in action.&lt;br&gt;
&lt;/p&gt;
&lt;div class="glitch-embed-wrap"&gt;
  &lt;iframe src="https://glitch.com/embed/#!/embed/scrubbable-photos-grid?path=script.js" alt="scrubbable-photos-grid on glitch"&gt;&lt;/iframe&gt;
&lt;/div&gt;




&lt;h1&gt;
  &lt;a href="#whats-next" class="anchor"&gt;
  &lt;/a&gt;
  Whats next
&lt;/h1&gt;

&lt;p&gt;There is lot to add to this, here are some things you can try:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add actual images.&lt;/li&gt;
&lt;li&gt;Go through google blog and add improvements they mentioned.&lt;/li&gt;
&lt;li&gt;Cancel ongoing api call to fetch segments when that section goes out of the virtual viewport to save bandwidth when the user is scrolling fast. We can even defer fetching when the speed of scrolling is high.&lt;/li&gt;
&lt;li&gt;Add intersection observers to tiles to load low-res thumbnails for distant tiles and high-res thumbnails for nearer ones.&lt;/li&gt;
&lt;li&gt;Add Google Photos like timeline instead of scroll knob, with this user will be able to jump to any year/month.&lt;/li&gt;
&lt;li&gt;Implement whole thing in some framework like React, you can create components for Section, Segment and Tile.&lt;/li&gt;
&lt;li&gt;This demo assumes that the grid consumes the whole viewport width, you can use grid container's width. It is currently not handling viewport resize also.&lt;/li&gt;
&lt;li&gt;One can even make open source component for scrubbable grid.&lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Google Design Blog - &lt;a href="https://medium.com/google-design/google-photos-45b714dfbed1"&gt;Building the Google Photos Web UI&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Flickr's Justified Layout Lib - &lt;a href="https://www.npmjs.com/package/justified-layout"&gt;justified-layout npm&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Intersection Observer - &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;Intersection Observer Api - Web Apis - MDN&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github Repo for this implementation, with commits for each Step - &lt;a href="https://github.com/shaileshpandit/scrubbable-photos-grid"&gt;scrubbable-photos-grid&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Live App with Source Code for this implementation - &lt;a href="https://glitch.com/edit/#!/scrubbable-photos-grid?path=script.js%3A15%3A0"&gt;Glitch&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If you made it this far, kudos to you! I enjoyed implementing this and even more, writing about it. This is my first tech article in long time, so any feedback is much appretiated.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Protecting your API keys with Next JS</title>
      <author>Ivan Maximiliano Saldano</author>
      <pubDate>Fri, 12 Feb 2021 13:36:49 +0000</pubDate>
      <link>https://dev.to/ivanms1/protecting-your-api-keys-with-next-js-21ej</link>
      <guid>https://dev.to/ivanms1/protecting-your-api-keys-with-next-js-21ej</guid>
      <description>&lt;h4&gt;
  &lt;a href="#this-is-the-story-of-max" class="anchor"&gt;
  &lt;/a&gt;
  This is the story of Max.
&lt;/h4&gt;

&lt;p&gt;Max thought his API keys were safe because he put them inside an &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/XreQmk7ETCak0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img width="100%" src="https://i.giphy.com/media/XreQmk7ETCak0/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Max didn't know his keys were visible in the network tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B9IgU_U4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613111422990/i0K3IR3U3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B9IgU_U4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613111422990/i0K3IR3U3.jpeg" alt="Screenshot from 2021-02-12 15-25-47.jpg"&gt;&lt;/a&gt;&lt;br&gt;
🥲&lt;/p&gt;

&lt;p&gt;Max is actually me, Max is actually everyone.&lt;/p&gt;

&lt;p&gt;Especially when we are just learning and start playing with public APIs that require a private key.&lt;/p&gt;

&lt;p&gt;There is not a good (or any) way to protect your keys in the frontend.&lt;br&gt;
One good alternative is to create a proxy in your own server, since backend code is not exposed to the browser. But many people using these APIs are beginners that don't know much about backend yet.&lt;/p&gt;

&lt;p&gt;Well, Next JS comes to save the with its integrated and ready to use &lt;a href="https://nextjs.org/docs/api-routes/introduction"&gt;API Routes&lt;/a&gt;. Which is basically a Node JS environment that you can use to create API endpoints, a server ready to go.&lt;/p&gt;

&lt;p&gt;Let's take a look.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#initial-setup" class="anchor"&gt;
  &lt;/a&gt;
  Initial setup
&lt;/h3&gt;

&lt;p&gt;First let's create a next js app.&lt;/p&gt;

&lt;p&gt;In the terminal run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app next-api-key
&lt;span class="c"&gt;# or&lt;/span&gt;
yarn create next-app next-api-key
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then move to the app folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;next-api-key
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#a-different-env-file" class="anchor"&gt;
  &lt;/a&gt;
  A different .env file
&lt;/h3&gt;

&lt;p&gt;Once inside the project we can create a &lt;code&gt;.env.local&lt;/code&gt; file. This looks the same as your normal &lt;code&gt;.env&lt;/code&gt; files if you are familiar with them. The difference is that the variables inside &lt;code&gt;.env.local&lt;/code&gt; are only available in the Node JS environment of Next. This means the browser doesn't have access to them.&lt;/p&gt;

&lt;p&gt;So where can we use these variables?&lt;/p&gt;

&lt;p&gt;Inside &lt;code&gt;pages&lt;/code&gt;, there is another folder called &lt;code&gt;api&lt;/code&gt;, any file inside here will be treated as an API endpoint.&lt;/p&gt;

&lt;p&gt;It works more or less like this.&lt;/p&gt;

&lt;p&gt;On the server side we have &lt;code&gt;pages/api/hello.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;On the client side we can call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchHello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/hello`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// notice the naming&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// data = { name: "John Doe" }&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#protecting-the-keys" class="anchor"&gt;
  &lt;/a&gt;
  Protecting the keys
&lt;/h3&gt;

&lt;p&gt;So now that we know how that works, let's add a key in the &lt;code&gt;.env.local&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Let's pretend I have a key that I need to send in the url of my request.&lt;/p&gt;

&lt;p&gt;Let's add the key inside &lt;code&gt;.env.local&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;someSecretKeyThatNoOneShouldSee
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And instead of using our key on the client side, we use it inside &lt;code&gt;hello.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This variable won't work on the client anyways, read more &lt;a href="https://nextjs.org/docs/basic-features/environment-variables#exposing-environment-variables-to-the-browser"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/api/hello.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://api.i.require.keys/?&amp;amp;api_key=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;You will need to install axios, node-fetch  or a similar library to manage the fetching, since &lt;code&gt;fetch&lt;/code&gt; API is not available in Node.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Nothing really changes on the client side, but let's use &lt;code&gt;axios&lt;/code&gt; since we already installed it for the server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchHello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;And that's about it, our key is nowhere to be seen in the network tab.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That wasn't too hard right?&lt;/p&gt;

&lt;p&gt;Please like and share if you found this helpful.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

</description>
      <category>react</category>
      <category>next</category>
      <category>security</category>
    </item>
    <item>
      <title>Polyfills - What are they ?</title>
      <author>Issam Mani</author>
      <pubDate>Fri, 12 Feb 2021 13:35:10 +0000</pubDate>
      <link>https://dev.to/issammani/polyfills-what-are-they-2ha5</link>
      <guid>https://dev.to/issammani/polyfills-what-are-they-2ha5</guid>
      <description>&lt;p&gt;The web is full of weird terminology, that can be especially daunting for newcomers. The idea behind this blog post and ( hopefully 🤞 ) upcoming blog posts is to demistify "fancy" terms. In this article we will discuss polyfills.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#in-plain-english" class="anchor"&gt;
  &lt;/a&gt;
  In plain english
&lt;/h1&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Polyfills are &lt;strong&gt;pieces of code&lt;/strong&gt; that aim to make new features available on browsers ( or JS environments in general ) that don't or won't support said features. Two things to keep in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not all features are polyfillable ( new syntactic features cannot be polyfilled e.g. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"&gt;spread syntax(...)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A polyfill only runs, when the feature is missing. Otherwise it should use the native implementation.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;
  &lt;a href="#a-brief-history" class="anchor"&gt;
  &lt;/a&gt;
  A brief history...
&lt;/h1&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
The word polyfill was initially introduced [ coined and popularized] by &lt;a href="https://remysharp.com/2010/10/08/what-is-a-polyfill/"&gt;Remy Sharp&lt;/a&gt; in 2009. The word itself originates from the name Polyfilla, a british product used to fill cracks and holes in walls.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Polyfilla is a UK product known as Spackling Paste in the US. With that in mind: think of the browsers as a wall with cracks in it. These polyfills help smooth out the cracks and give us a nice smooth wall of browsers to work with.&lt;/p&gt;

&lt;p&gt;-- &lt;em&gt;Remy Sharp&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Enough history. I said brief, didn't I !&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#polyfills-vs-transpilers" class="anchor"&gt;
  &lt;/a&gt;
  Polyfills vs Transpilers
&lt;/h1&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Before digging any deeper, let's try to make the difference between the terms &lt;strong&gt;&lt;em&gt;Polyfill&lt;/em&gt;&lt;/strong&gt; and  &lt;strong&gt;&lt;em&gt;Transpiler&lt;/em&gt;&lt;/strong&gt; clear.&lt;/p&gt;

&lt;p&gt;Remember how I said there is no way to polyfill new js syntax. Well a transpiler ( transformer + compiler ) does just that. &lt;/p&gt;

&lt;p&gt;It transforms new syntax into equivalent old syntax that is supported by old browsers. So unlike a polyfill, the code you write is transpiled into alternate code, that would eventually run in the browser.&lt;/p&gt;

&lt;p&gt;Keep in mind that a transpiler like babel will use, depending on your target browsers, underneath the hood polyfills to support new features. &lt;/p&gt;

&lt;p&gt;If you are still unsure about the difference, here is an &lt;a href="https://stackoverflow.com/a/48149493"&gt;SO&lt;/a&gt; response that goes into a bit more detail.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#lets-write-our-own-polyfill" class="anchor"&gt;
  &lt;/a&gt;
  Let's write our own polyfill
&lt;/h1&gt;

&lt;p&gt;All right, let's dig in. As I mentioned before a polyfill is just a piece of code, that aims to make some functionality available across all browsers. Usually a good polyfill will check if the target feature already is supported in the browser. If so do nothing da! Otherwise use the available APIs to mimic the behavior of this new feature.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#js-raw-elementclosestselectorlist-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  JS : &lt;code&gt;Element.closest(selectorList)&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href=""&gt;MDN&lt;/a&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;closest()&lt;/code&gt;&lt;/strong&gt; method traverses the &lt;code&gt;Element&lt;/code&gt; and its parents (heading toward the document root) until it finds a node that matches the provided selector string. Will return itself or the matching ancestor. If no such element exists, it returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So basically given an HTML Element the &lt;strong&gt;&lt;code&gt;closest()&lt;/code&gt;&lt;/strong&gt; method returns the closest element in the elements tree that matches at least one of the selectors in the selectorList.&lt;/p&gt;

&lt;p&gt;Assume we have the following HTML DOM:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;...
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"level-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"level-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"level-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Polyfills are awesome 🎉 &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paragraph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.level-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns &amp;lt;div class="level-1"&amp;gt;...&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.level-1, .level-2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns &amp;lt;div class="level-2"&amp;gt;...&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.level-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns paragrah itself&lt;/span&gt;
&lt;span class="nx"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.level-bla&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;All right ! Now that we know how this function works , we can start implementing.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
👋 &lt;strong&gt;Beginner's Tip&lt;/strong&gt;: This is a good time to open &lt;a href="https://codepen.io/pen/"&gt;codepen&lt;/a&gt; and start experimenting.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Let's think about the problem for a second (or more). We need:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A way to traverse the DOM upwards.&lt;/li&gt;
&lt;li&gt;To check if element matches the selectorList.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, let's talk solutions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A way to traverse the DOM upwards *=&amp;gt; use a while loop and the &lt;a href=""&gt;&lt;code&gt;.parentElement&lt;/code&gt;&lt;/a&gt; prop.&lt;/li&gt;
&lt;li&gt;To check if element matches the selectorList &lt;em&gt;=&amp;gt; use the &lt;a href=""&gt;&lt;code&gt;.matches()&lt;/code&gt;&lt;/a&gt; method&lt;/em&gt;.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;selectorList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectorList&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;So in the snippet above, we are defining a function that takes two arguments: &lt;code&gt;element&lt;/code&gt; and &lt;code&gt;selectorList&lt;/code&gt;. Then we are looping until one of two things happen: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;element&lt;/code&gt; is null, and therefore we have reached the root element.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;element.matches(selectorList)&lt;/code&gt; returns true, and therefore we found the closest element that matches our &lt;code&gt;selectorList&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can check that this beahves the same way on our previous test set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paragraph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;closest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.level-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns &amp;lt;div class="level-1"&amp;gt;...&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;closest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.level-1, .level-2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns &amp;lt;div class="level-2"&amp;gt;...&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;closest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.level-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns paragrah itself&lt;/span&gt;
&lt;span class="nx"&gt;closest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.level-bla&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The last step is to add the function to the Element's &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes"&gt;&lt;code&gt;prototype&lt;/code&gt;&lt;/a&gt;, so that it's available to all instances of the &lt;code&gt;Element&lt;/code&gt; object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectorList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectorList&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;One last detail, is that we would rather prefer if our polyfill somehow adds this function to the prototype only if the browser doesn't support it. In other words, we would rather use the browser's native implementation if it's available. A simple if will do !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectorList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectorList&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
✨ &lt;strong&gt;NOTE:&lt;/strong&gt; This is by no means a production-ready polyfill. For simplicity I assumed a lot of things. A production-ready polyfill would also account for the fact that &lt;code&gt;.matches()&lt;/code&gt; may not exist and also check different browser vendor prefixes. A more complete version can be found &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill"&gt;here&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#css-raw-blank-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  CSS: &lt;code&gt;:blank&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;As of the time of writing the &lt;code&gt;:blank&lt;/code&gt; pseudo-class has very &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:blank"&gt;low&lt;/a&gt; support . In this section we will try to write a rough polyfill (not complete by any means) just to demonstrate the idea of polyfilling CSS functionality.&lt;/p&gt;

&lt;p&gt;Again I will quote the MDN definition ( as one normally does ! ) : &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The :blank CSS pseudo-class selects empty user input elements (e.g. &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So using the &lt;code&gt;:blank&lt;/code&gt; pseudo-class will look something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:blank&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;textarea&lt;/span&gt;&lt;span class="nd"&gt;:blank&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
✨ &lt;strong&gt;NOTE1:&lt;/strong&gt; Since this is a syntactic proprety of CSS using &lt;code&gt;textarea:blank&lt;/code&gt; will be ruled out as an invalid selector by the CSS Parser. So instead we will use &lt;code&gt;textarea[blank]&lt;/code&gt;. Just keep in mind that in the rest of this post I will use &lt;code&gt;:blank&lt;/code&gt; and &lt;code&gt;[blank]&lt;/code&gt; interchangeably.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
✨ &lt;strong&gt;NOTE2:&lt;/strong&gt; This is actually what &lt;a href="https://github.com/csstools/css-blank-pseudo/blob/HEAD/README-POSTCSS.md"&gt;PostCSS&lt;/a&gt; does underneath the hood. It replaces all occurences of &lt;code&gt;:blank&lt;/code&gt; with &lt;code&gt;[blank]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Let's think about how we can achieve this. We need :&lt;br&gt;
&lt;strong&gt;1.&lt;/strong&gt; Some way to access our stylesheet(s).&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt; Detect selectors of the form &lt;code&gt;selector[blank]&lt;/code&gt;.&lt;br&gt;
&lt;strong&gt;3.&lt;/strong&gt; Bind our the blank pseudo-class to the selected elements.&lt;br&gt;
&lt;strong&gt;4.&lt;/strong&gt; Update styles when value of input is changed.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
👋 &lt;strong&gt;Beginner's Tip&lt;/strong&gt;: This is a good time to open &lt;a href="https://codepen.io/pen/"&gt;codepen&lt;/a&gt; and start experimenting. &lt;br&gt;
&lt;/p&gt;

&lt;p&gt;These are our requirements. Let's talk about how we can tackle each and everyone:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Some way to access our stylesheet &lt;strong&gt;=&amp;gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model"&gt;&lt;code&gt;CCSOM&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt; Detect &lt;code&gt;:blank&lt;/code&gt; function &lt;strong&gt;=&amp;gt; use a regex&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;3.&lt;/strong&gt; Bind our the blank pseudo-class to the selected elements &lt;strong&gt;=&amp;gt; Add an attribute to the selected inputs&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;4.&lt;/strong&gt; Update the value of the state of the input when the the value is changed via JS &lt;strong&gt;=&amp;gt; listen for the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event"&gt;&lt;code&gt;input event&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-access-our-stylesheets" class="anchor"&gt;
  &lt;/a&gt;
  1. Access our stylesheets
&lt;/h3&gt;

&lt;p&gt;First we need to access our CSS Stylesheets. We do so by using CCSOM, specifically by accessing the &lt;code&gt;styleSheets&lt;/code&gt; prop on the document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;  &lt;span class="nx"&gt;styleSheet&lt;/span&gt;  &lt;span class="k"&gt;of&lt;/span&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;styleSheets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;  &lt;span class="nx"&gt;cssRule&lt;/span&gt;  &lt;span class="k"&gt;of&lt;/span&gt;  &lt;span class="nx"&gt;styleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssRules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cssRule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Prints each css rule in our stylesheets&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;More on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule"&gt;&lt;code&gt;CSSRule&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-locate-selectors-with-raw-blank-endraw-pseudoclass" class="anchor"&gt;
  &lt;/a&gt;
  2. Locate selectors with &lt;code&gt;:blank&lt;/code&gt; pseudo-class
&lt;/h3&gt;

&lt;p&gt;Now that we have access to all the CSS rules we can check if any of them have the &lt;code&gt;:blank&lt;/code&gt; pseudo-class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blankRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;)\[&lt;/span&gt;&lt;span class="sr"&gt;blank&lt;/span&gt;&lt;span class="se"&gt;\]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;  &lt;span class="nx"&gt;styleSheet&lt;/span&gt;  &lt;span class="k"&gt;of&lt;/span&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;styleSheets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;  &lt;span class="nx"&gt;cssRule&lt;/span&gt;  &lt;span class="k"&gt;of&lt;/span&gt;  &lt;span class="nx"&gt;styleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssRules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cssRule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectorText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blankRegex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);}&lt;/span&gt; &lt;span class="c1"&gt;// Prints matched selector name i.e input, textarea without the [blank]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
🛑 Refactoring detour&lt;br&gt;
Let's try to refactor our code so that it doesn't get messy.&lt;br&gt;
Let's start by defining a function that's responsible for returning an array of selectors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extractBlankSelectors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blankRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;)\[&lt;/span&gt;&lt;span class="sr"&gt;blank&lt;/span&gt;&lt;span class="se"&gt;\]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="c1"&gt;// Returns an array of of all CSSRules&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cssRules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
        &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;styleSheets&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;styleSheet&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;styleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssRules&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="c1"&gt;// Returns an array with our desired selectors&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blankSelectors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
        &lt;span class="nx"&gt;cssRules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cssRule&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;cssRule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectorText&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectorText&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;selectorText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blankRegex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;selectorText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blankRegex&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selector&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;blankSelectors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here I used a functional approach instead of using for loops as before, but you can achieve the same with the nested for loops. If this looks weird or confusing to you here a nice &lt;a href="https://opensource.com/article/17/6/functional-javascript"&gt;article&lt;/a&gt; talking about this. Also feel free to ask in the comments section.&lt;/p&gt;

&lt;p&gt;🛑Refactoring detour end&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#34-bind-our-the-blank-pseudoclass-to-the-selected-elements-and-watch-for-change-" class="anchor"&gt;
  &lt;/a&gt;
  3,4. Bind our the blank pseudo-class to the selected elements and watch for change !
&lt;/h3&gt;

&lt;p&gt;Now that we have access to the the desired selectors via &lt;code&gt;extractBlankSelectors&lt;/code&gt; we can easily select and add attributes to our target elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;....&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bindBlankElements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Select all elements from DOM that match our SelectorList&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extractBlankSelectors&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Add blank attribute if value is empty&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blank&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// Attach an input event listener&lt;/span&gt;
        &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blank&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blank&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Initially we select all the elements returned from &lt;code&gt;extractBlankSelectors&lt;/code&gt;. Then for each one of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add blank attribute if the value is empty.&lt;/li&gt;
&lt;li&gt;Attach an input event listener.
On eah input the callback checks wether the input value is empty or not and applies the &lt;code&gt;blank&lt;/code&gt; attribute accordingly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a codepen to try it out live: &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/issammani/embed/yLVVWvK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Et voilà ! We are all done ! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you can see polyfills are a super important concept, that helped the web move forward and developers use new features without the fear of breaking compatibility. If you enjoyed reading this like, share and/or leave a comment. Feedback is always welcome !&lt;/p&gt;

&lt;p&gt;Live long and prosper 🖖&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-links" class="anchor"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills"&gt;A List of cross browser polyfills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://remysharp.com/2010/10/08/what-is-a-polyfill/"&gt;Remy Sharp's original post about polyfills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;A third link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>A Vim Guide for Intermediate Users</title>
      <author>Matthieu Cneude</author>
      <pubDate>Fri, 12 Feb 2021 13:33:38 +0000</pubDate>
      <link>https://dev.to/phantas0s/a-vim-guide-for-intermediate-users-4i0p</link>
      <guid>https://dev.to/phantas0s/a-vim-guide-for-intermediate-users-4i0p</guid>
      <description>&lt;p&gt;Welcome to the second part of this series aimed to make you a better Vim user! If you have no idea about Vim, you should begin with &lt;a href="https://thevaluable.dev/vim-for-beginners/"&gt;the first part&lt;/a&gt;. In this article, I'll explain many more concepts, some of them making Vim truly special compared to other editors. Who wasn't blown away discovering Vim's macros?&lt;/p&gt;

&lt;p&gt;Specifically, we'll see together:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ways you can organize open files in Vim using buffers, windows, tabs, and the argument list.&lt;/li&gt;
&lt;li&gt;Useful motions to jump quickly from one place to another in your entire codebase.&lt;/li&gt;
&lt;li&gt;Mapping new keystrokes to old keystrokes or commands.&lt;/li&gt;
&lt;li&gt;Powerful functionalities to repeat some of your keystrokes.&lt;/li&gt;
&lt;li&gt;Ways of manipulating the command line history.&lt;/li&gt;
&lt;li&gt;Plugins which offers different ways to manage some ideas we saw before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The amount of information in this article can feel overwhelming. My advice: take your time and don't try to swallow everything at once. Experiment with Vim as you read along, try to understand how it works, and you'll have a powerful tool you can control entirely with your keyboard.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Speaking of which, I just released a &lt;a href="https://themouseless.dev/"&gt;book to build your own Mouseless Development Environment&lt;/a&gt;, where I explain how to combine powerful tools to customize and improve your programming worklow.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;You'll see at the end of each sections some related Vim's help commands. You can read these help sections directly in Vim when you're ready to dive deeper.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vims-spatial-organization" class="anchor"&gt;
  &lt;/a&gt;
  Vim's Spatial Organization
&lt;/h2&gt;

&lt;p&gt;If you're using an IDE, you're certainly used to manage your files with tabs. Vim use other ways to represent and organize open files. Indeed, there are four &lt;a href="https://thevaluable.dev/abstraction-type-software-example/"&gt;layers of abstraction&lt;/a&gt; you can use for that: the &lt;em&gt;buffers&lt;/em&gt;, the &lt;em&gt;windows&lt;/em&gt;, the &lt;em&gt;tabs&lt;/em&gt;, and the &lt;em&gt;argument list&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#buffers" class="anchor"&gt;
  &lt;/a&gt;
  Buffers
&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;buffer&lt;/em&gt; directly match an open file in memory. To make a comparison with a standard IDE, a buffer would be the &lt;em&gt;content&lt;/em&gt; of a tab. The big difference: when you close a tab in an IDE, you close the file as well. Not in Vim; if you close a window containing a buffer, the buffer is still there, &lt;em&gt;hidden&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In fact, a buffer can have three different states:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;active&lt;/em&gt; - The buffer is displayed in a window.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;hidden&lt;/em&gt; - The buffer is not displayed, but it exists and the file is still open.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;inactive&lt;/em&gt; - The buffer is not displayed and &lt;em&gt;empty&lt;/em&gt;. It's not linked to any file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The content of a file in a hidden buffer is not directly visible in Vim. At that point, you might wonder: how do we know that this buffer is still open, if we can't see it?&lt;/p&gt;

&lt;p&gt;To see all opened buffered, we can look at the &lt;em&gt;buffer list&lt;/em&gt;. You can use the command &lt;code&gt;:buffers&lt;/code&gt; to display it. Each line contains:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The buffer unique ID.&lt;/li&gt;
&lt;li&gt;Indicators displaying different informations (for example &lt;code&gt;a&lt;/code&gt; for active, &lt;code&gt;h&lt;/code&gt; for hidden, or &lt;code&gt;&lt;/code&gt; (space) for inactive).&lt;/li&gt;
&lt;li&gt;The name of the buffer, if any. It can be the filepath of the file linked to the buffer.&lt;/li&gt;
&lt;li&gt;The line number where the cursor is.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example: &lt;code&gt;27  %a   "layouts/shortcodes/notice.html" line 18&lt;/code&gt; means that the buffer ID 27 is in state &lt;code&gt;a&lt;/code&gt; (active), its name is &lt;code&gt;layouts/shortcodes/notice.html&lt;/code&gt; and the cursor in this specific buffer is on line 18. You can as well know what's the current buffer displayed with the flag &lt;code&gt;%&lt;/code&gt; just before its state.&lt;/p&gt;

&lt;p&gt;To navigate through the buffer list, you can use these commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:buffer &amp;lt;ID_or_name&amp;gt;&lt;/code&gt;- Move to the buffer using its ID or its name.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:bnext&lt;/code&gt; or &lt;code&gt;:bn&lt;/code&gt; - Move to the next buffer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:bprevious&lt;/code&gt; or &lt;code&gt;:bp&lt;/code&gt; - Move to the previous buffer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:bfirst&lt;/code&gt; or &lt;code&gt;:bf&lt;/code&gt; - move to the first buffer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:blast&lt;/code&gt; or &lt;code&gt;:bl&lt;/code&gt; - move to the last buffer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL-^&lt;/code&gt; - switch to the alternative buffer. It's indicated in your buffer list with the symbol &lt;code&gt;#&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;ID&amp;gt;CTRL-^&lt;/code&gt; - Switch to a specific buffer with ID &lt;code&gt;&amp;lt;ID&amp;gt;&lt;/code&gt;. For example, &lt;code&gt;75CTRL-^&lt;/code&gt; switch to the buffer with ID 75.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can as well apply a command to all buffers using &lt;code&gt;:bufdo &amp;lt;command&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Not all buffers are displayed in the buffer list. To display unlisted buffers, you can use the command &lt;code&gt;:buffers!&lt;/code&gt; or &lt;code&gt;ls!&lt;/code&gt;. You'll see unlisted buffer with an indicator &lt;code&gt;u&lt;/code&gt; just after its ID.&lt;/p&gt;

&lt;p&gt;Now, let's ask this existential question: how can we create buffers?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you create a window, a buffer will be created automatically (see below).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:badd &amp;lt;filename&amp;gt;&lt;/code&gt; - Add &lt;code&gt;&amp;lt;filename&amp;gt;&lt;/code&gt; to the buffer list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we can create buffers, we should be able to delete them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:bdelete &amp;lt;ID_or_name&amp;gt;&lt;/code&gt; - Delete a buffer by ID or name. You can specify more than one ID or name separated with spaces to delete multiple buffers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:1,10bdelete&lt;/code&gt; - Delete buffers from ID 1 to 10 included.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:%bdelete&lt;/code&gt; - Delete all buffers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you modify a file, forget to save it, and close the window making the buffer hidden, you won't be able to quit Vim. It will complain that you're hidden buffer is not saved; to get around that, I would recommend to set the option hidden in your vimrc (by default &lt;code&gt;~/.vimrc&lt;/code&gt;), as follow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set hidden
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can try it directly in your current session by running the command &lt;code&gt;:set hidden!&lt;/code&gt; to toggle the option on and off. You can play around with it and see what suits best for you.&lt;/p&gt;

&lt;p&gt;To see the value of any option, you can use a question mark. For example: &lt;code&gt;:set hidden?&lt;/code&gt; or &lt;code&gt;:set filetype?&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vim-help" class="anchor"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help buffers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help :buffers&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#windows" class="anchor"&gt;
  &lt;/a&gt;
  Windows
&lt;/h3&gt;

&lt;p&gt;A window in Vim is nothing more than a space you can use to display the content of a buffer. Don't forget: when you close the window, the buffer stays open.&lt;/p&gt;

&lt;p&gt;When you open Vim, one window with one empty buffer are automatically created.&lt;/p&gt;

&lt;p&gt;To create windows, you can use the &lt;code&gt;:new&lt;/code&gt; command, or one of these keystrokes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CTRL-W s&lt;/code&gt; - Split the current window horizontally.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL-W v&lt;/code&gt; - Split the current window vertically.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL-W n&lt;/code&gt; - Split the current windows horizontally and edit a new file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL-W ^&lt;/code&gt; - Split the current with the &lt;em&gt;alternate file&lt;/em&gt; (buffer with the &lt;code&gt;#&lt;/code&gt; indicator in your buffer list).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;buffer_ID&amp;gt;CTRL-W ^&lt;/code&gt; - Split windows with the buffer of ID &lt;code&gt;&amp;lt;ID&amp;gt;&lt;/code&gt;. For example, &lt;code&gt;75 CTRL-W ^&lt;/code&gt; will open a window with the buffer of ID 75.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To move your cursor from one window to another, you can use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CTRL-W &amp;lt;Down&amp;gt;&lt;/code&gt; or &lt;code&gt;CTRL-W j&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL-W &amp;lt;Up&amp;gt;&lt;/code&gt; or &lt;code&gt;CTRL-W k&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL-W &amp;lt;Left&amp;gt;&lt;/code&gt; or &lt;code&gt;CTRL-W h&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL-W &amp;lt;right&amp;gt;&lt;/code&gt; or &lt;code&gt;CTRL-W l&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You always dreamt to move the windows? Me too. Here's how to do it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CTRL-W r&lt;/code&gt; - Rotate the windows.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL-W x&lt;/code&gt; - Exchange with the next window&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Who wants windows without being able to resize them? Here are the keystrokes you need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CTRL-W =&lt;/code&gt; - Resize windows for them to fit on the screen with the same size.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL-W -&lt;/code&gt; - Decrease window's height.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL-W +&lt;/code&gt; - Increase window's height.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL-W &amp;lt;&lt;/code&gt; - Decrease window's width.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL-W &amp;gt;&lt;/code&gt; - Increase window's width.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using these keystrokes to move the cursor from window to window and to move the windows themselves is pretty tedious . We'll see later a plugin which can help to make the whole operation smoother.&lt;/p&gt;

&lt;p&gt;If you want to quit windows, you can use the commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:q&lt;/code&gt; - To &lt;code&gt;q&lt;/code&gt;uit the current window. People lied to you! &lt;code&gt;:q&lt;/code&gt; doesn't quit Vim, but a window. You quit Vim only if there is only one window open.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:q!&lt;/code&gt; - To &lt;code&gt;q&lt;/code&gt;uit the current window, even if there is only one window open with an unsaved buffer&lt;code&gt;!&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#vim-help" class="anchor"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help windows&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help opening-window&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help window-move-cursor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help window-moving&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help window-resize&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tabs" class="anchor"&gt;
  &lt;/a&gt;
  Tabs
&lt;/h3&gt;

&lt;p&gt;We saw that a buffer is an open file, and a window is the container for an active buffer. We can see tabs as a container for a bunch of windows. In that way, it's very different than the concept of tabs in a standard IDE!&lt;/p&gt;

&lt;p&gt;Here are the commands to create and delete tabs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:tabnew&lt;/code&gt; or &lt;code&gt;:tabe&lt;/code&gt; - Open a new tab.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:tabclose&lt;/code&gt; or &lt;code&gt;:tabc&lt;/code&gt; - Close the current tab.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:tabonly&lt;/code&gt; or &lt;code&gt;:tabo&lt;/code&gt; - Close every other tab except the current one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To move from tab to tab, you can use these keystrokes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;gt&lt;/code&gt; - &lt;code&gt;g&lt;/code&gt;o to the next &lt;code&gt;t&lt;/code&gt;ab.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;gT&lt;/code&gt; - &lt;code&gt;g&lt;/code&gt;o to the previous tab.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can as well add a count before the last two keystrokes. For example, &lt;code&gt;1gT&lt;/code&gt; go to the first tab. Yep, tabs are indexed from 1.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vim-help" class="anchor"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help tab-page&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#argument-list-arglist" class="anchor"&gt;
  &lt;/a&gt;
  Argument List (arglist)
&lt;/h3&gt;

&lt;p&gt;The argument list (also called arglist) is the fourth and last container allowing you to organize your open files. It's useful to see it as a &lt;em&gt;stable subset&lt;/em&gt; of the buffer list, as Drew Neil point it out in &lt;a href="http://vimcasts.org/episodes/meet-the-arglist/"&gt;one of his vimcast&lt;/a&gt;. As a result, it follows these two rules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Every file in the arglist will be in the buffer list.&lt;/li&gt;
&lt;li&gt;Some buffers in the buffer list won't be in the arglist.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The files you want to open when you run Vim - such as executing &lt;code&gt;vim file1 file2 file3&lt;/code&gt; - will be automatically added to the arglist and, as we just saw, to the buffer list. &lt;/p&gt;

&lt;p&gt;The arglist can be useful to isolate some files from the buffer list to do some operations on them. Here are some commands you can use to manipulate the arglist:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:args&lt;/code&gt; - Display the arglist.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:argadd&lt;/code&gt; - Add file to the arglist.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:argdo&lt;/code&gt; - Execute a command on every file in the arglist.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To edit the files in the arglist, you can use these commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:next&lt;/code&gt; - Move to the next file in the arglist.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:prev&lt;/code&gt; - Move to the previous file in the arglist.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:first&lt;/code&gt; - Move to the first file in the arglist.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don't use very often the arglist personally, but many users do. The buffer list can be modified by other actions unrelated directly to buffers, like opening new windows. The arglist stays the same, except if you explicitly modify it. That's why it's stable.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vim-help" class="anchor"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help arglist&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#mapping-keystrokes" class="anchor"&gt;
  &lt;/a&gt;
  Mapping Keystrokes
&lt;/h2&gt;

&lt;p&gt;We've seen a great deal of keystrokes and commands. It would be nice to be able to modify these keystrokes, or to assign new keystrokes to precise commands.&lt;/p&gt;

&lt;p&gt;You can use mapping commands for every Vim mode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:nmap&lt;/code&gt; - Create new mapping for NORMAL mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:imap&lt;/code&gt; - Create new mapping for INSERT mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:xmap&lt;/code&gt; - Create new mapping for VISUAL mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It might sound confusing to have different mappings for different modes, but it's actually very easy to remember, thanks to our muscle memory.&lt;/p&gt;

&lt;p&gt;Let's try an example together by mapping &lt;code&gt;w&lt;/code&gt; to &lt;code&gt;dd&lt;/code&gt;. By default, &lt;code&gt;dd&lt;/code&gt; delete a line, and &lt;code&gt;w&lt;/code&gt; is a motion to move your cursor from word to word.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the command &lt;code&gt;:nmap w dd&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Try to hit the keystroke &lt;code&gt;dd&lt;/code&gt;. It will delete a line.&lt;/li&gt;
&lt;li&gt;Try to hit &lt;code&gt;w&lt;/code&gt;. It deletes a line to.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, &lt;code&gt;w&lt;/code&gt; can't be used anymore to move from word to word. Let's try to fix that by running: &lt;code&gt;:nmap w v&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Try to hit &lt;code&gt;v&lt;/code&gt; now. It deletes a line too! You just did a recursive mapping: &lt;code&gt;v&lt;/code&gt; maps to &lt;code&gt;w&lt;/code&gt; which maps to &lt;code&gt;dd&lt;/code&gt;. It would be nice to &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Map &lt;code&gt;w&lt;/code&gt; to &lt;code&gt;dd&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Map &lt;code&gt;v&lt;/code&gt; to the motion made by &lt;code&gt;w&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; its mapping with &lt;code&gt;dd&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To do that, you can use the following mapping commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:nnoremap&lt;/code&gt; - Create mapping for NORMAL mode (non recursive)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:inoremap&lt;/code&gt; - Create mapping for INSERT mode (non recursive)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:vnoremap&lt;/code&gt; - Create mapping for VISUAL mode (non recursive)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To do the silly mapping we wanted to do before, restart Vim to have the default mapping, then execute these commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:nnoremap w dd
:nnoremap v w
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This time, &lt;code&gt;w&lt;/code&gt; delete a line and &lt;code&gt;v&lt;/code&gt; moves from word to word.&lt;/p&gt;

&lt;p&gt;You can as well use special characters in your mapping. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; for &lt;code&gt;SPACE&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;c-w&amp;gt;&lt;/code&gt; for &lt;code&gt;CTRL-W&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt; for &lt;code&gt;c&lt;/code&gt;arriage &lt;code&gt;r&lt;/code&gt;eturn (&lt;code&gt;ENTER&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To see the complete list, run the command &lt;code&gt;:help key-notation&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that you have the Power, I would advise you not to change the default Vim mapping as much as you can. The previous example of mapping I've given is a good one to show you what &lt;strong&gt;not&lt;/strong&gt; to do. It's very practical to use as much as you can the default mapping, because you can use them on any instance of Vim possible, even in a docker container or on a remote server.&lt;/p&gt;

&lt;p&gt;If you want to create new mappings, you should use a special key called the &lt;em&gt;leader key&lt;/em&gt;. It's a way to create mapping namespaces: first, you use your leader key, then you use your keystroke. Thanks to the leader key, your new keystroke will never conflict with the default Vim keystrokes.&lt;/p&gt;

&lt;p&gt;To set up your leader key, you need to set the variable mapleader. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:let mapleader = "&amp;lt;space&amp;gt;"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Every mapping command we saw are often written in your vimrc to set them when you open vim. For example, you can write the following to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let mapleader = "&amp;lt;space&amp;gt;"
nnoremap &amp;lt;leader&amp;gt;bn :bn&amp;lt;cr&amp;gt; ;buffer next
nnoremap &amp;lt;leader&amp;gt;tn gt ;new tab
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The keystrokes &lt;code&gt;&amp;lt;space&amp;gt; bn&lt;/code&gt; will move to the next buffer, and &lt;code&gt;&amp;lt;space&amp;gt; tn&lt;/code&gt; will move to the next tab. Notice that when you want to map a keystroke to a command, you need to add &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt; at the end exactly like you would type &lt;code&gt;ENTER&lt;/code&gt; (or carriage return) to execute the command. Awesomeness!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vim-help" class="anchor"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help mapping&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help leader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help key-notation&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#jump-jump-jump" class="anchor"&gt;
  &lt;/a&gt;
  Jump! Jump! Jump!
&lt;/h2&gt;

&lt;p&gt;There are special motions in Vim called jump-motion. These motions jump several lines away, like &lt;code&gt;G&lt;/code&gt; for example we saw in the &lt;a href="https://thevaluable.dev/vim-for-beginners/"&gt;last article&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jump-list" class="anchor"&gt;
  &lt;/a&gt;
  Jump list
&lt;/h3&gt;

&lt;p&gt;Each time we use a jump motion, the position of the cursor before the jump is saved in the &lt;em&gt;jump list&lt;/em&gt;. You can move through this jump list with the following keystrokes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CTRL-o&lt;/code&gt; - Go to the previous cursor positions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL-i&lt;/code&gt; - Go to the next cursor positions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can move from line to line and even from buffer to buffer with these holy commands. I use them all the time, and you will, too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#change-list" class="anchor"&gt;
  &lt;/a&gt;
  Change list
&lt;/h3&gt;

&lt;p&gt;Another useful list is the change list. Each time you insert something (using INSERT mode), the position of your cursor is saved in the change list.&lt;/p&gt;

&lt;p&gt;You can navigate through the change list using these keystrokes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;g;&lt;/code&gt; - Jump to the next change.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g,&lt;/code&gt;- Jump to the previous change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Discovering them was like seeing the light for the first time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#methods-jumping" class="anchor"&gt;
  &lt;/a&gt;
  Methods Jumping
&lt;/h3&gt;

&lt;p&gt;Since we're developers, it's nice to be able to jump from method to method. You can do that with the following keystrokes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;[m&lt;/code&gt; - move to the start of a method.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;]m&lt;/code&gt; - move to the end of a method.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These methods should have similar syntax than Java's methods for these keystrokes to work.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vim-help" class="anchor"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help jump-motions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help jumplist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help changelist&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#repeating-keystrokes" class="anchor"&gt;
  &lt;/a&gt;
  Repeating Keystrokes
&lt;/h2&gt;

&lt;p&gt;You know what's great? Automation. You know what's great with Vim? Keystrokes automation. That's a very powerful feature, so get ready.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#single-repeat" class="anchor"&gt;
  &lt;/a&gt;
  Single Repeat
&lt;/h3&gt;

&lt;p&gt;Automating tedious tasks is our job, as developers. That's why some call us lazy; I call that focusing on the important. &lt;/p&gt;

&lt;p&gt;When I heard about the sacred single repeat, my life in Vim changed. Here's how you can fell like a powerful superhuman:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.&lt;/code&gt; - Repeat the last change.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@:&lt;/code&gt; - Repeat the last command executed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The period is now my best friend. It's simple and diabolically effective.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vim-help" class="anchor"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help single-repeat&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#complex-repeat-the-macro" class="anchor"&gt;
  &lt;/a&gt;
  Complex Repeat: The Macro
&lt;/h3&gt;

&lt;p&gt;I deceived you with my period keystroke? Wait to see this one. Macros will bring even more power at your fingertips. &lt;/p&gt;

&lt;p&gt;In Vim, you can record series of keystrokes and repeat them in order. The process includes multiple steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;q&amp;lt;lowecase_letter&amp;gt;&lt;/code&gt; - Begin recording keystrokes in a register. You can think of a register as a place in memory, or as a clipboard.&lt;/li&gt;
&lt;li&gt;Every keystrokes you'll do onward will be saved.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;q&lt;/code&gt; - Stop the recording.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@&amp;lt;lowercase_letter&amp;gt;&lt;/code&gt; - Redo the keystrokes you've recorded.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example, let's say that you need to repeat keystrokes you need to do on multiple lines: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hit &lt;code&gt;qa&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Do what you have to do. For example: &lt;code&gt;^cawhello&amp;lt;Esc&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Hit &lt;code&gt;q&lt;/code&gt; again.&lt;/li&gt;
&lt;li&gt;To repeat your series of keystrokes, hit &lt;code&gt;@a&lt;/code&gt;. For the example above, go on a new line.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here, I use &lt;code&gt;q&lt;/code&gt; (for the &lt;code&gt;&amp;lt;lowercase_letter&amp;gt;&lt;/code&gt;) as an example; you can actually use whatever lowercase letter you want. If you need to repeat your keystrokes again after the first repeat, you can even use &lt;code&gt;@@&lt;/code&gt; which repeat your previous &lt;code&gt;@&lt;/code&gt; command.&lt;br&gt;
development&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#vim-help" class="anchor"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help complex-repeat&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#command-line-window" class="anchor"&gt;
  &lt;/a&gt;
  Command Line Window
&lt;/h2&gt;

&lt;p&gt;You can access the history of your Ex commands directly in Vim:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;q:&lt;/code&gt; - Open command line history.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;q/&lt;/code&gt; and &lt;code&gt;q?&lt;/code&gt; - Open search history.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+f&lt;/code&gt; - Open command line history while in COMMAND LINE mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using the keystrokes above, you can modify any command line you want and execute it with &lt;code&gt;ENTER&lt;/code&gt;. Very handy when you need to repeat a command line with slight differences. It's nice as well if you want to type a complex command using Vim's editing power.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#vim-help" class="anchor"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help cmdline-window&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#undo-tree" class="anchor"&gt;
  &lt;/a&gt;
  Undo Tree
&lt;/h2&gt;

&lt;p&gt;We saw in the previous article how to undo and redo a command. Vim allows you as well to save all these undos in a file, for each file you modify. It means that even if you close Vim and come back to your file, you'll have access to your last change by "undoing" them.&lt;/p&gt;

&lt;p&gt;You need to configure it in your vimrc file, by adding the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" save undo trees in files
set undofile
set undodir=~/.vim/undo

" number of undo saved
set undolevels=10000 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You don't have to save your undos in &lt;code&gt;~/.vim/undo&lt;/code&gt;. Change it without regret if you need to. &lt;/p&gt;

&lt;p&gt;We set the option &lt;code&gt;undolevels&lt;/code&gt; to 10000 to save 10000 undos maximum per file.&lt;/p&gt;

&lt;p&gt;That's not all: you could think that Vim will only save a &lt;em&gt;list&lt;/em&gt; of undos, but it actually saves a whole undo tree. &lt;/p&gt;

&lt;p&gt;Let's take an example: when you do three changes, then undo two of them, and do one (or more) changes, a new branch will be created. You can picture it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@
|
| o -&amp;gt; third change
| |
| o -&amp;gt; second change 
|/
o -&amp;gt; first change
|
o
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The third and second changes have been undo, &lt;code&gt;@&lt;/code&gt; represent where you are now. You can revert to any of these changes, which means that you can revert to &lt;em&gt;any last changes&lt;/em&gt; you've made.&lt;/p&gt;

&lt;p&gt;It's a bit difficult to navigate in this tree with vanilla Vim, but we'll see in the next section a very useful plugin to come back to any changes you've made. You'll even be able to search in the entire undo tree for a piece of content you want to find back!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vim-help" class="anchor"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help undo-redo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help undo-persistence&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help undo-tree&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#plugins" class="anchor"&gt;
  &lt;/a&gt;
  Plugins
&lt;/h2&gt;

&lt;p&gt;Everything we saw until now can be managed differently using a couple of plugins. If I would learn Vim all over again, I would first get comfortable with everything we saw till now. That said, here are some plugins which can makes things even easier.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#plugin-manager" class="anchor"&gt;
  &lt;/a&gt;
  Plugin Manager
&lt;/h3&gt;

&lt;p&gt;It's easier to manage Vim's plugins with a good plugin manager. I would recommend &lt;code&gt;vim-plug&lt;/code&gt;: you'll find instructions to install it on its &lt;a href="https://github.com/junegunn/vim-plug"&gt;Github page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, add the following at the beginning of your &lt;code&gt;.vimrc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')
call plug#end()
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Again, you can replace &lt;code&gt;~/.vim/plugged&lt;/code&gt; depending on where your dotfiles for Vim are.&lt;/p&gt;

&lt;p&gt;For example, if you want to install the plugin &lt;code&gt;vim-bbye&lt;/code&gt;, you need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find the Github repository of the plugin, in that case &lt;code&gt;https://github.com/moll/vim-bbye&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Take the username and the repository's name from the url: &lt;code&gt;moll/vim-bbye&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;Plug 'moll/vim-bbye'&lt;/code&gt; between &lt;code&gt;call plug#begin('~/.vim/plugged')&lt;/code&gt; and &lt;code&gt;call plug#end()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Source your &lt;code&gt;.vimrc&lt;/code&gt; with the command &lt;code&gt;:source &amp;lt;path_to_vimrc&amp;gt;&lt;/code&gt;. If your current buffer is already your vimrc , you can run &lt;code&gt;:source %&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;:PlugInstall&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Your plugin is installed!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To update every plugins you have, you can use the command &lt;code&gt;:PlugUpdate&lt;/code&gt;. It will install the plugins not installed yet, too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#closing-buffers-without-closing-windows" class="anchor"&gt;
  &lt;/a&gt;
  Closing Buffers Without Closing Windows
&lt;/h3&gt;

&lt;p&gt;By default, when you use &lt;code&gt;:bdelete&lt;/code&gt; to close a buffer, the window will be closed too. If you want to keep your window layout, you can use the plugin &lt;a href="https://github.com/moll/vim-bbye"&gt;vim-bbye&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's a very small plugin which gives you a new command, &lt;code&gt;:Bdelete&lt;/code&gt; (with an uppercase &lt;code&gt;B&lt;/code&gt;), allowing you to close a buffer without closing a window.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easily-resizing-windows" class="anchor"&gt;
  &lt;/a&gt;
  Easily Resizing Windows
&lt;/h3&gt;

&lt;p&gt;I'm not a big fan with the vanilla way to resize windows. The plugin &lt;a href="https://github.com/simeji/winresizer"&gt;winresizer&lt;/a&gt; gives you a new mode to resize them. &lt;/p&gt;

&lt;p&gt;To enter this new mode, you need to use the keystroke &lt;code&gt;CTRL-e&lt;/code&gt;. If you don't like it, you can add this line to your vimrc for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let g:winresizer_start_key = "&amp;lt;leader&amp;gt;w"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, you can use this new resize mode with the keystrole &lt;code&gt;LEADER w&lt;/code&gt;. It's just an example, use whatever keystroke works for you.&lt;/p&gt;

&lt;p&gt;When you are in this new resize mode, you'll see some help at the bottom of Vim. You can use &lt;code&gt;hjkl&lt;/code&gt; to resize the window, &lt;code&gt;e&lt;/code&gt; to change mode from &lt;code&gt;resize&lt;/code&gt; mode, &lt;code&gt;focus&lt;/code&gt; mode or &lt;code&gt;move&lt;/code&gt; mode. The last one allows you to swap windows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#navigating-through-your-buffer" class="anchor"&gt;
  &lt;/a&gt;
  Navigating through your buffer
&lt;/h3&gt;

&lt;p&gt;I use the plugin &lt;a href="https://github.com/junegunn/fzf.vim"&gt;fzf.vim&lt;/a&gt; intensively. It allows you fuzzy search buffers or even files in your current path (set up with the option &lt;code&gt;path&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;You'll need to have &lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt; installed to use it. Then, you can use the command line &lt;code&gt;:Buffers&lt;/code&gt; (with a &lt;code&gt;B&lt;/code&gt; uppercase) to fuzzy find and select the buffer you want.&lt;/p&gt;

&lt;p&gt;That's only a tiny subset of what fzf can do for you. If you want to know more, I speak about it in my article about searching and replacing](/vim-search-find-replace/) in Vim.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#manipulating-the-undo-tree" class="anchor"&gt;
  &lt;/a&gt;
  Manipulating the Undo Tree
&lt;/h3&gt;

&lt;p&gt;As promised, here's a very useful plugin to come back to any change you want: &lt;a href="https://github.com/simnalamburt/vim-mundo"&gt;MundoTree&lt;/a&gt;. The command &lt;code&gt;:MundoToggle&lt;/code&gt; will show you the undo tree of your current buffer in a new buffer.&lt;/p&gt;

&lt;p&gt;From there, you can select whatever change you want to come back to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-path-to-mastery" class="anchor"&gt;
  &lt;/a&gt;
  The Path to Mastery
&lt;/h2&gt;

&lt;p&gt;There are many important Vim features I didn't wrote about in this article. You'll find at the end of the article the help commands for some of them. I might cover them in a next article, if some readers are interested.&lt;/p&gt;

&lt;p&gt;I strongly believe that knowing, even on a very high level, the principles and fundamentals of a concept can help you understand anything built upon this concept. As such, knowing how vanilla Vim works and getting a good grasp on its functionalities is important to understand what plugin can be useful for your own needs.&lt;/p&gt;

&lt;p&gt;What did we learn in this article:&lt;/p&gt;

&lt;p&gt;When you're comfortable with the concepts of this article, you'll normally be able to understand &lt;a href="https://thevaluable.dev/vim-search-find-replace/"&gt;another article of mine&lt;/a&gt; focused on searching and replacing in Vim.&lt;/p&gt;

&lt;p&gt;What did we learn in this article?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Buffers are open files, windows are containers for buffers, tabs are sets of windows, and the argument list is a subset of the buffer list.&lt;/li&gt;
&lt;li&gt;You can map keystrokes for any Vim mode recursively, but it's good practice to avoid doing so.&lt;/li&gt;
&lt;li&gt;You can use powerful keystrokes to go through the jump list or the change list.&lt;/li&gt;
&lt;li&gt;Using the period &lt;code&gt;.&lt;/code&gt; or Vim's macros to automate repeating editing tasks is really powerful.&lt;/li&gt;
&lt;li&gt;You can use the command line windows to re-run or modify commands already executed, using the command line history.&lt;/li&gt;
&lt;li&gt;Vim's undo tree allows you to come back to any modification made in any file, even after closing Vim.&lt;/li&gt;
&lt;li&gt;The plugins vim-bbye and winresize can help you to manage your buffers and windows in a easier way.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Are you faster with Vim than with any other editor or IDE? The question is not really important to me. I love using Vim because of its flexibility and overall approach to editing: that's what gives me the real productivity boost I'm craving for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#related-sources" class="anchor"&gt;
  &lt;/a&gt;
  Related Sources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/"&gt;Learn Vim Progressively&lt;/a&gt; - Yann Esposito&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://vimcasts.org/"&gt;Vimcasts&lt;/a&gt; - Drew Neil&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/13607232-practical-vim"&gt;Practical Vim&lt;/a&gt; - Drew Neil&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mhinz/vim-galore"&gt;vim-galore&lt;/a&gt; - Marco Hinz&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.moolenaar.net/habits.html"&gt;7 Habits of Effective Text Editing&lt;/a&gt; - Bram Moolenaar&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://learnvimscriptthehardway.stevelosh.com/"&gt;Learn Vim Script the Hard way&lt;/a&gt; - Steve Losh&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vim</category>
      <category>neovim</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
