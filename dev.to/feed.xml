<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Linux Terminal: The Ultimate Cheat Sheet</title>
      <author>Mauro Garcia</author>
      <pubDate>Mon, 25 Jan 2021 12:11:38 +0000</pubDate>
      <link>https://dev.to/maurogarcia_19/linux-terminal-the-ultimate-cheat-sheet-2g5b</link>
      <guid>https://dev.to/maurogarcia_19/linux-terminal-the-ultimate-cheat-sheet-2g5b</guid>
      <description>&lt;p&gt;If you're a Linux user, the Terminal is probably the most powerful tool you would ever have. But the thing about the Terminal is that you need to learn how to use it if you want to benefit from it.&lt;/p&gt;

&lt;p&gt;For the last few months, I've been playing with the Terminal a lot, and I came up with a long list of useful commands that I use regularly. Please let me know if I missed something important so I can add it to future posts.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Basic commands&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Zoom in ➜ &lt;code&gt;[CTRL] + [+]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Zoom out ➜ &lt;code&gt;[CTRL] + [-]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Print working directory ➜ &lt;code&gt;pwd&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Clear the terminal ➜ &lt;code&gt;[CTRL] + [l]&lt;/code&gt; or &lt;code&gt;clear&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Assign an alias ➜ &lt;code&gt;alias [alias-name]="[command-to-run]"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Source a file ➜ &lt;code&gt;source [name-of-the-file-to-read-and-execute]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Change directory command (cd)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Move to a specific directory ➜ &lt;code&gt;cd [name-of-your-directory]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Move to the parent directory ➜ &lt;code&gt;cd ..&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Move to the home directory ➜ &lt;code&gt;cd&lt;/code&gt; or &lt;code&gt;cd ~&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Move to the last directory yo were in ➜ &lt;code&gt;cd -&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;List command (ls)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;List all visible files and directories ➜ &lt;code&gt;ls&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;List all files and directories (include hidden files) ➜ &lt;code&gt;ls -a&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Long Listed Format ➜ &lt;code&gt;ls -l&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Human Readable Format ➜ &lt;code&gt;ls -lh&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Combining arguments: Human Readable Format + Hidden files ➜ &lt;code&gt;ls -lah&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Learn more about the ls command ➜ &lt;code&gt;man ls&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Search&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Locate the binary for a program ➜ &lt;code&gt;which [name-of-the-program]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Locate the binary, source and user manual for a program ➜ &lt;code&gt;whereis [name-of-the-program]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Locate files and directories by name ➜ &lt;code&gt;find [path-to-search] -iname [name-of-the-file-you-want-to-search]&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Learn more about the find command ➜ &lt;code&gt;man find&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Get a brief description for a command ➜ &lt;code&gt;whatis [command-name]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;History&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Get previous commands (one by one) ➜ Use the &lt;code&gt;Up Arrow key&lt;/code&gt; ⬆️ to navigate your history&lt;/li&gt;
&lt;li&gt;Get previous commands (full list) ➜ &lt;code&gt;history&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Repeat commands from history (bang command) ➜ &lt;code&gt;history&lt;/code&gt; ➜ &lt;code&gt;![number-of-the-command-to-repeat]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Repeat last command (bang-bang command) ➜ &lt;code&gt;!!&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Working with files and directories&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Create a new file (without open it) ➜ &lt;code&gt;touch [name-of-your-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create a new file using a text editor ➜ &lt;code&gt;vim [name-of-your-file]&lt;/code&gt; or &lt;code&gt;nano [name-of-your-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Copy a file ➜ &lt;code&gt;cp [source-path-of-your-file] [destination-path-for-your-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create a new directory ➜ &lt;code&gt;mkdir [new-directory-name]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Remove an empty directory ➜ &lt;code&gt;rmdir [name-of-the-directory-you-want-to-remove]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Remove command (rm)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Remove a file ➜ &lt;code&gt;rm [name-of-your-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Remove a directory recursively (use with caution) ➜ &lt;code&gt;rm -rf [name-of-your-directory]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Concatenate command (cat)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;View a single file ➜ &lt;code&gt;cat [name-of-your-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;View a single file including the line numbers ➜ &lt;code&gt;cat -n [name-of-your-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Copy the content of one file to another file ➜ &lt;code&gt;cat [filename-whose-contents-is-to-be-copied] &amp;gt; [destination-filename]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Learn more about the cat command ➜ &lt;code&gt;man cat&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Move command (mv)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Move a file ➜ &lt;code&gt;mv [source-path-of-your-file] [destination-path-for-your-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Rename a file ➜ &lt;code&gt;mv [name-of-your-file] [new name-of-your-file]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#basic-commands" class="anchor"&gt;
  &lt;/a&gt;
  Basic commands
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#zoom-in" class="anchor"&gt;
  &lt;/a&gt;
  Zoom in
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;[CTRL] + [+]&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#zoom-out" class="anchor"&gt;
  &lt;/a&gt;
  Zoom out
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;[CTRL] + [-]&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pwd-print-working-directory-command" class="anchor"&gt;
  &lt;/a&gt;
  pwd: Print Working Directory command
&lt;/h2&gt;

&lt;p&gt;It prints the working directory path, starting from the root directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes

mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#clear-command" class="anchor"&gt;
  &lt;/a&gt;
  Clear command
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;clear&lt;/code&gt; or &lt;code&gt;[CTRL] + [l]&lt;/code&gt; to clear the entire terminal screen and get a clean terminal to keep working.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alias-command" class="anchor"&gt;
  &lt;/a&gt;
  Alias command
&lt;/h2&gt;

&lt;p&gt;If you usually run a long command regularly and want to save time, you can assign a shorter alias for that command. Type &lt;code&gt;alias [alias-name]="[command-to-run]"&lt;/code&gt; to assign a new alias:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Running the ls command&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;projects

&lt;span class="c"&gt;## Assign an alias, so we don't need to add the arguments every time we need to list something&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;alias ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ls -lah"&lt;/span&gt;

&lt;span class="c"&gt;## Running ls again (we get the result of `ls -lah`)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;total 16K
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 17:41 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 root        root         512 Jan 22 10:38 ..
&lt;span class="nt"&gt;-rw-------&lt;/span&gt; 1 mauro_codes mauro_codes 3.0K Jan 22 23:58 .bash_history
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes  220 Jan 22 10:38 .bash_logout
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes 3.7K Jan 22 17:32 .bashrc
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes  807 Jan 22 10:38 .profile
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 12:55 projects
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that this alias won't be persisted for future uses. If you want to persist your aliases, add them at the end of your .bashrc file located in your home directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#source-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Source a file
&lt;/h2&gt;

&lt;p&gt;You can use the &lt;code&gt;source&lt;/code&gt; command to read and execute the content of a file line by line. Type &lt;code&gt;source [name-of-the-file-to-read-and-execute]&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Print the content of the script.txt file (contains two commands)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;script.txt
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"hello world"&lt;/span&gt; &lt;span class="c"&gt;## Print a hello message&lt;/span&gt;
cal                &lt;span class="c"&gt;## Print a calendar&lt;/span&gt;

&lt;span class="c"&gt;## Source the script.txt to run each command inside&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;script.txt
hello world

    January 2021
Su Mo Tu We Th Fr Sa
                1  2
 3  4  5  6  7  8  9
10 11 12 13 14 15 16
17 18 19 20 21 22 23
24 25 26 27 28 29 30
31
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#change-directory-command-cd" class="anchor"&gt;
  &lt;/a&gt;
  Change Directory command (cd)
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#move-to-a-specific-directory" class="anchor"&gt;
  &lt;/a&gt;
  Move to a specific directory
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;cd [name-of-your-directory]&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check current directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes

&lt;span class="c"&gt;## Change directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;projects/

&lt;span class="c"&gt;## Check new working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#move-to-the-parent-directory" class="anchor"&gt;
  &lt;/a&gt;
  Move to the parent directory
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;cd ..&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check current directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects

&lt;span class="c"&gt;## Move to the parent directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..

&lt;span class="c"&gt;## Check new working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#move-to-the-home-directory" class="anchor"&gt;
  &lt;/a&gt;
  Move to the home directory
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;cd ~&lt;/code&gt; or just &lt;code&gt;cd&lt;/code&gt; as an alternative&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check current directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/awesome-app&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/awesome-app

&lt;span class="c"&gt;## Move to the home directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/awesome-app&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~

&lt;span class="c"&gt;## Check new working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#move-to-the-last-directory-you-were-in" class="anchor"&gt;
  &lt;/a&gt;
  Move to the last directory you were in
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;cd -&lt;/code&gt; to navigate to the previous directory you were in&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the current directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/landing-page

&lt;span class="c"&gt;## Move to another directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /home/mauro_codes/

&lt;span class="c"&gt;## Check the new directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes

&lt;span class="c"&gt;## Go back to the previus directory you were in&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; -
/home/mauro_codes/projects/landing-page
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#list-command-ls" class="anchor"&gt;
  &lt;/a&gt;
  List command (ls)
&lt;/h1&gt;

&lt;p&gt;Lists the content of the directory you're currently in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#list-all-visible-files-and-directories" class="anchor"&gt;
  &lt;/a&gt;
  List all visible files and directories
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;ls&lt;/code&gt; without any additional argument to get all the files and directories (this command will exclude hidden files like the &lt;a href="https://wiki.archlinux.org/index.php/Dotfiles"&gt;dotfiles&lt;/a&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects

&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;awesome-app  landing-page  nextjs-tailwindcss-blog-starter  personal-blog
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#list-all-files-and-directories" class="anchor"&gt;
  &lt;/a&gt;
  List all files and directories
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;ls -a&lt;/code&gt; to get all the files and directories (including the hidden files)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects

&lt;span class="c"&gt;## List the content for the working directory (including hidden files)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;  ..  .config  .configu  awesome-app  landing-page  nextjs-tailwindcss-blog-starter  personal-blog
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#long-listed-format" class="anchor"&gt;
  &lt;/a&gt;
  Long Listed Format
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;ls -l&lt;/code&gt; to get all the visible files and directories including additional metadata like permissions, owner, size and modified date and time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/nextjs-tailwindcss-blog-starter&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/nextjs-tailwindcss-blog-starter

&lt;span class="c"&gt;## List the content for the working directory (using the long listed format)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/nextjs-tailwindcss-blog-starter&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt;
total 140
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes   4487 Jan 22 12:55 README.md
drwxr-xr-x 1 mauro_codes mauro_codes    512 Jan 22 12:55 components
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes   1068 Jan 22 12:55 config.ts
drwxr-xr-x 1 mauro_codes mauro_codes    512 Jan 22 12:55 helpers
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#human-readable-format" class="anchor"&gt;
  &lt;/a&gt;
  Human Readable Format
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;ls -lh&lt;/code&gt; to get all the visible files and directories in long-listed format, but with a Human Readable Format (User-friendly file size).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/nextjs-tailwindcss-blog-starter&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/nextjs-tailwindcss-blog-starter

&lt;span class="c"&gt;## List the content for the working directory (using the long listed format + human readable format)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/nextjs-tailwindcss-blog-starter&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lh&lt;/span&gt;
total 140K
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes 4.4K Jan 22 12:55 README.md
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 12:55 components
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes 1.1K Jan 22 12:55 config.ts
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 12:55 helpers
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#combining-arguments" class="anchor"&gt;
  &lt;/a&gt;
  Combining arguments
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;ls -lah&lt;/code&gt; to get all the files and directories (including hidden files) in Human Readable Format.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/nextjs-tailwindcss-blog-starter&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/nextjs-tailwindcss-blog-starter

&lt;span class="c"&gt;## List the content for the working directory (include hidden files + human readable format)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/nextjs-tailwindcss-blog-starter&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 140K
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 13:08 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 12:55 ..
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 12:55 .git
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes  362 Jan 22 12:55 .gitignore
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes 4.4K Jan 22 12:55 README.md
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 12:55 components
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes 1.1K Jan 22 12:55 config.ts
drwxr-xr-x 1 mauro_codes mauro_codes  512 Jan 22 12:55 helpers
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#learn-more-about-the-raw-ls-endraw-command" class="anchor"&gt;
  &lt;/a&gt;
  Learn more about the &lt;code&gt;ls&lt;/code&gt; command
&lt;/h2&gt;

&lt;p&gt;There are dozens of arguments that you can use with the &lt;code&gt;ls&lt;/code&gt; command. If you want to dig dipper,&lt;br&gt;
type &lt;code&gt;man ls&lt;/code&gt; in your terminal to display the user manual for the &lt;code&gt;ls&lt;/code&gt; command.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#search" class="anchor"&gt;
  &lt;/a&gt;
  Search
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#locate-the-binary-for-a-program" class="anchor"&gt;
  &lt;/a&gt;
  Locate the binary for a program
&lt;/h2&gt;

&lt;p&gt;If you want to locate where the binary (executable) for a specific command or program is located. You can use the &lt;code&gt;which&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Locate binary for the ls command&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;which &lt;span class="nb"&gt;ls&lt;/span&gt;
/usr/bin/ls
&lt;span class="c"&gt;## Locate binary for git&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;which git
/usr/bin/git
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#locate-the-binary-source-and-user-manual-for-a-program" class="anchor"&gt;
  &lt;/a&gt;
  Locate the binary, source, and user manual for a program
&lt;/h2&gt;

&lt;p&gt;You can use the &lt;code&gt;whereis&lt;/code&gt; command to locate the binary, source, and user manual for a program. You can use the &lt;code&gt;-b&lt;/code&gt;, &lt;code&gt;-m&lt;/code&gt;, and &lt;code&gt;-s&lt;/code&gt; arguments to limit the results to binaries, manual and source, respectively&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Locate binary, manual, and source for git&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;whereis git
git: /usr/bin/git /mnt/c/Program Files/Git/cmd/git.exe /usr/share/man/man1/git.1.gz
&lt;span class="c"&gt;## Locate only binary and manual for Git, and only the manual for ls command&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;whereis &lt;span class="nt"&gt;-bm&lt;/span&gt; git &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="nb"&gt;ls
&lt;/span&gt;git: /usr/bin/git /mnt/c/Program Files/Git/cmd/git.exe /usr/share/man/man1/git.1.gz
&lt;span class="nb"&gt;ls&lt;/span&gt;: /usr/share/man/man1/ls.1.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#locate-files-and-directories-by-name" class="anchor"&gt;
  &lt;/a&gt;
  Locate files and directories by name
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;find [path-to-search] -iname [name-of-the-file-you-want-to-search]&lt;/code&gt; to find any file or directory that contain the given name in their title. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The path to search is optional. If it is not specified, the &lt;code&gt;find&lt;/code&gt; command will run on your current working directory (and its descendants)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;-iname&lt;/code&gt; argument means that our search will be case insensitive.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;- If you want to learn more about this &lt;span class="nb"&gt;command&lt;/span&gt;, &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;man find&lt;span class="sb"&gt;`&lt;/span&gt; to display the user manual.
&lt;span class="c"&gt;## Check current working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects

&lt;span class="c"&gt;## Find files that contain "posts" on my current working directory and its descendants&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;find &lt;span class="nt"&gt;-iname&lt;/span&gt; posts
./nextjs-tailwindcss-blog-starter/pages/posts
./nextjs-tailwindcss-blog-starter/posts
&lt;span class="c"&gt;## Find files that contain "posts" on a specific directory and its descendants&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;find ./nextjs-tailwindcss-blog-starter/pages/ &lt;span class="nt"&gt;-iname&lt;/span&gt; posts
./nextjs-tailwindcss-blog-starter/pages/posts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#get-a-brief-description-for-a-command" class="anchor"&gt;
  &lt;/a&gt;
  Get a brief description for a command
&lt;/h2&gt;

&lt;p&gt;If you don't know what a certain command does, Type &lt;code&gt;whatis [command-name]&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Asking about the cat command&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;whatis &lt;span class="nb"&gt;cat
cat&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;              - concatenate files and print on the standard output
&lt;span class="c"&gt;## Asking about the find command&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;whatis find
find &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;             - search &lt;span class="k"&gt;for &lt;/span&gt;files &lt;span class="k"&gt;in &lt;/span&gt;a directory hierarchy
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#history" class="anchor"&gt;
  &lt;/a&gt;
  History
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#get-previous-commands-one-by-one" class="anchor"&gt;
  &lt;/a&gt;
  Get previous commands (one by one)
&lt;/h2&gt;

&lt;p&gt;You can access your recent command by pressing the &lt;code&gt;Up Arrow key&lt;/code&gt; ⬆️. This is very useful if you want to repeat your last command. Let's say we move to a specific directory, and then we check our working directory like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Move to a specific directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;projects/awesome-app/

&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/awesome-app&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/awesome-app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;⬆️ We'll get the &lt;code&gt;pwd&lt;/code&gt; command&lt;/p&gt;

&lt;p&gt;⬆️⬆️ We'll get the &lt;code&gt;cd projects/awesome-app&lt;/code&gt; command&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#repeat-previous-commands-full-list" class="anchor"&gt;
  &lt;/a&gt;
  Repeat previous commands (full list)
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;history&lt;/code&gt; to get a numerated list containing the previous commands you run. Then, type &lt;code&gt;![number-of-the-command-to-repeat]&lt;/code&gt; to repeat that command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Get the history list&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;history
    &lt;/span&gt;1  &lt;span class="nb"&gt;ls
    &lt;/span&gt;2  clear
    3  &lt;span class="nb"&gt;pwd
    &lt;/span&gt;4  &lt;span class="nb"&gt;mkdir &lt;/span&gt;projects
    5  &lt;span class="nb"&gt;cd &lt;/span&gt;projects

&lt;span class="c"&gt;## Run command number 1 (ls)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;1
projects
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#repeat-the-last-command" class="anchor"&gt;
  &lt;/a&gt;
  Repeat the last command
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;!!&lt;/code&gt; (bang-bang command) to repeat the last command. This is especially useful when you forgot to add &lt;code&gt;sudo&lt;/code&gt; on your last command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Running update without sudo (Permission denied)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;apt update
Reading package lists... Done
E: Could not open lock file /var/lib/apt/lists/lock - open &lt;span class="o"&gt;(&lt;/span&gt;13: Permission denied&lt;span class="o"&gt;)&lt;/span&gt;
E: Unable to lock directory /var/lib/apt/lists/
W: Problem unlinking the file /var/cache/apt/pkgcache.bin - RemoveCaches &lt;span class="o"&gt;(&lt;/span&gt;13: Permission denied&lt;span class="o"&gt;)&lt;/span&gt;
W: Problem unlinking the file /var/cache/apt/srcpkgcache.bin - RemoveCaches &lt;span class="o"&gt;(&lt;/span&gt;13: Permission denied&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;## Using the bang-bang command to append the last command after sudo&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;sudo&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; password &lt;span class="k"&gt;for &lt;/span&gt;mauro_codes:
Get:1 http://security.ubuntu.com/ubuntu focal-security InRelease &lt;span class="o"&gt;[&lt;/span&gt;109 kB]
Hit:2 http://archive.ubuntu.com/ubuntu focal InRelease
Get:3 http://archive.ubuntu.com/ubuntu focal-updates InRelease &lt;span class="o"&gt;[&lt;/span&gt;114 kB]
...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#working-with-files-and-directories" class="anchor"&gt;
  &lt;/a&gt;
  Working with files and directories
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#create-a-new-file-without-open-it" class="anchor"&gt;
  &lt;/a&gt;
  Create a new file (without open it)
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;touch [name-of-your-file]&lt;/code&gt; to create a new file without open it on a text editor. This is useful if you just want to create an empty file but don't need to change it right now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/landing-page

&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md

&lt;span class="c"&gt;## Create an empty js file&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;main.js

&lt;span class="c"&gt;## List the content for the working directory (including your new file) &lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  main.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-new-file-using-a-text-editor" class="anchor"&gt;
  &lt;/a&gt;
  Create a new file using a text editor
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;nano [name-of-your-file]&lt;/code&gt; to create a new file and open it using the text editor &lt;a href="https://www.nano-editor.org/"&gt;nano&lt;/a&gt;. If you want to learn more about nano, you can Type &lt;code&gt;man nano&lt;/code&gt; on your terminal to display the nano user manual.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/landing-page

&lt;span class="c"&gt;## List the content for the working directory &lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  main.js

mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;nano index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After running the last command, you'll be able to edit the file using nano:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TqGbrKcm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3MxGlF2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TqGbrKcm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3MxGlF2.png" alt="Nano text editor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#copy-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Copy a file
&lt;/h2&gt;

&lt;p&gt;You can use the &lt;code&gt;cp&lt;/code&gt; (Copy) command to copy files and directories&lt;br&gt;
Type &lt;code&gt;cp [source-path-of-your-file] [destination-path-for-your-file]&lt;/code&gt; to copy a file into a new destination.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index.html  main.js  temp

&lt;span class="c"&gt;## Copy the README.md file into the temp directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cp &lt;/span&gt;README.md temp/README.md

&lt;span class="c"&gt;## List the content for the working directory and check that your file is still there.&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index.html  main.js  temp

&lt;span class="c"&gt;## List the temp directory's content and check if your file was copied.&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls &lt;/span&gt;temp/
README.md  index-copy.html
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-new-directory" class="anchor"&gt;
  &lt;/a&gt;
  Create a new directory
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;mkdir [new-directory-name]&lt;/code&gt; to create a new directory in your current working directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index-empty-copy.html  index.html  main.js

&lt;span class="c"&gt;## Create a new directory called "scripts"&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;scripts

&lt;span class="c"&gt;## List the content to check if our new directory was created&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index-empty-copy.html  index.html  main.js  scripts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remove-an-empty-directory" class="anchor"&gt;
  &lt;/a&gt;
  Remove an empty directory
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;rmdir [name-of-the-directory-you-want-to-remove]&lt;/code&gt; to remove an empty directory. Please note that this command will only work with empty directories.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index.html  main.js  temp

&lt;span class="c"&gt;## Remove the "temp" empty directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;rmdir &lt;/span&gt;temp

&lt;span class="c"&gt;## List the content and check that the directory was removed&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index.html  main.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remove-command-rm" class="anchor"&gt;
  &lt;/a&gt;
  Remove command (rm)
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#remove-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Remove a file
&lt;/h3&gt;

&lt;p&gt;Type &lt;code&gt;rm [name-of-your-file]&lt;/code&gt; to remove a file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page/temp&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index-copy.html

&lt;span class="c"&gt;## Remove the index-copy.html file&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page/temp&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;rm &lt;/span&gt;index-copy.html

&lt;span class="c"&gt;## List the content for the working directory and check that the file was removed&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page/temp&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#remove-a-directory-recursively" class="anchor"&gt;
  &lt;/a&gt;
  Remove a directory recursively
&lt;/h3&gt;

&lt;p&gt;Type &lt;code&gt;rm -rfi [name-of-your-directory]&lt;/code&gt; to recursively remove a directory with all its files and sub-directories.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Please be careful!&lt;/strong&gt; This is one of the most dangerous commands you can run. If you run &lt;code&gt;rm -rfi /&lt;/code&gt;, you'll erase your entire root partition. Be sure to specify the path for the directory you want to delete. In this example, In this example, I include the &lt;code&gt;-i&lt;/code&gt; argument to ask for confirmation.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List the content of the temp folder (It has one file)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls &lt;/span&gt;temp/
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 24 19:45 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 24 19:44 ..
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes   8 Jan 24 19:45 file.txt

&lt;span class="c"&gt;## Recursively remove the temp folder&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; temp/

&lt;span class="c"&gt;## Check that the temp folder was removed&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls &lt;/span&gt;temp/
&lt;span class="nb"&gt;ls&lt;/span&gt;: cannot access &lt;span class="s1"&gt;'temp/'&lt;/span&gt;: No such file or directory
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#concatenate-command-cat" class="anchor"&gt;
  &lt;/a&gt;
  Concatenate command (cat)
&lt;/h2&gt;

&lt;p&gt;You can use the &lt;code&gt;cat&lt;/code&gt; (concatenate) command to read data from a file and print their content as output&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#view-a-single-file" class="anchor"&gt;
  &lt;/a&gt;
  View a single file
&lt;/h3&gt;

&lt;p&gt;Type &lt;code&gt;cat [name-of-your-file]&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/landing-page

&lt;span class="c"&gt;## Print the content of the index.html file&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;index.html
&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;DOCTYPE html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt; /&amp;gt;
    &amp;lt;meta http-equiv&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"x-ua-compatible"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ie=edge"&lt;/span&gt; /&amp;gt;
    &amp;lt;meta &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"viewport"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; /&amp;gt;

    &amp;lt;title&amp;gt;My Website&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;script &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"js/main.js"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#view-a-single-file-including-the-line-numbers" class="anchor"&gt;
  &lt;/a&gt;
  View a single file including the line numbers
&lt;/h3&gt;

&lt;p&gt;Type &lt;code&gt;cat -n [name-of-your-file]&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/landing-page

&lt;span class="c"&gt;## Print the content of the index.html file&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; index.html
     1  &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;DOCTYPE html&amp;gt;
     2  &amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     3    &amp;lt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     4      &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt; /&amp;gt;
     5      &amp;lt;meta http-equiv&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"x-ua-compatible"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ie=edge"&lt;/span&gt; /&amp;gt;
     6      &amp;lt;meta &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"viewport"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; /&amp;gt;
     7
     8      &amp;lt;title&amp;gt;My Website&amp;lt;/title&amp;gt;
     9    &amp;lt;/head&amp;gt;
    10
    11    &amp;lt;body&amp;gt;
    12      &amp;lt;script &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"js/main.js"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;lt;/script&amp;gt;
    13    &amp;lt;/body&amp;gt;
    14  &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#copy-the-content-of-one-file-to-another-file" class="anchor"&gt;
  &lt;/a&gt;
  Copy the content of one file to another file
&lt;/h3&gt;

&lt;p&gt;Type &lt;code&gt;cat [filename-whose-contents-is-to-be-copied] &amp;gt; [destination-filename]&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Create an empty file called index-empty-copy.html&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;index-empty-copy.html

&lt;span class="c"&gt;## Copy the content of index.html to index-empty-copy.html&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;index.html &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; index-empty-copy.html

&lt;span class="c"&gt;## Print the content of the index-empty-copy.html file&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;index-empty-copy.html
&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;DOCTYPE html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt; /&amp;gt;
    &amp;lt;meta http-equiv&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"x-ua-compatible"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ie=edge"&lt;/span&gt; /&amp;gt;
    &amp;lt;meta &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"viewport"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; /&amp;gt;

    &amp;lt;title&amp;gt;My Website&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;script &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"js/main.js"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#learn-more-about-the-raw-cat-endraw-command" class="anchor"&gt;
  &lt;/a&gt;
  Learn more about the &lt;code&gt;cat&lt;/code&gt; command
&lt;/h3&gt;

&lt;p&gt;Type &lt;code&gt;man cat&lt;/code&gt; to display the user manual for the &lt;code&gt;cat&lt;/code&gt; command&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#move-command-mv" class="anchor"&gt;
  &lt;/a&gt;
  Move command (mv)
&lt;/h2&gt;

&lt;p&gt;You can use the &lt;code&gt;mv&lt;/code&gt; (move) command for moving and renaming files&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#move-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Move a file
&lt;/h3&gt;

&lt;p&gt;Type &lt;code&gt;mv [source-path-of-your-file] [destination-path-for-your-file]&lt;/code&gt; to move a file into a new directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index-empty-copy.html  index.html  main.js  temp

&lt;span class="c"&gt;## Move the index-empty-copy.html file to the temp directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mv &lt;/span&gt;index-empty-copy.html temp/index-empty-copy.html

&lt;span class="c"&gt;## List the content again and check that the file is no longer in the current working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index.html  main.js  temp

&lt;span class="c"&gt;## List the temp folder and check that the file is now there.&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls &lt;/span&gt;temp/
index-empty-copy.html
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rename-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Rename a file
&lt;/h3&gt;

&lt;p&gt;Type &lt;code&gt;mv [name-of-your-file] [new name-of-your-file]&lt;/code&gt; to rename a file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page/temp&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;index-empty-copy.html

&lt;span class="c"&gt;## Rename the index-empty-copy.html file&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page/temp&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mv &lt;/span&gt;index-empty-copy.html index-copy.html

&lt;span class="c"&gt;## List the content for the working directory (check if your file's name was updated)&lt;/span&gt;
mauro_codes@DESKTOP-HIQ7662:~/projects/landing-page/temp&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;index-copy.html
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#final-words" class="anchor"&gt;
  &lt;/a&gt;
  Final words
&lt;/h1&gt;

&lt;p&gt;I missed tons of powerful commands on this post, but I decided to keep them for a future post. This is already huge.😄 &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-would-love-to-hear-your-feedback-about-this-format-is-it-clear-is-it-useful-let-me-know-if-you-want-me-to-cover-any-particular-command-on-my-next-post" class="anchor"&gt;
  &lt;/a&gt;
  I would love to hear your feedback about this format. Is it clear? Is it useful? Let me know if you want me to cover any particular command on my next post.
&lt;/h3&gt;

</description>
      <category>linux</category>
      <category>terminal</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Frontend Security: Content Security Policy</title>
      <author>Mads Stoumann</author>
      <pubDate>Mon, 25 Jan 2021 07:43:42 +0000</pubDate>
      <link>https://dev.to/madsstoumann/frontend-security-content-security-policy-17dl</link>
      <guid>https://dev.to/madsstoumann/frontend-security-content-security-policy-17dl</guid>
      <description>&lt;p&gt;In my &lt;a href="https://dev.to/madsstoumann/frontend-security-npm-audit-and-script-integrity-kl3"&gt;previous article on security&lt;/a&gt;, I wrote about &lt;code&gt;npm audit&lt;/code&gt; and script integrity. Next up is &lt;em&gt;Content Security Policy&lt;/em&gt;, or &lt;em&gt;CSP&lt;/em&gt; for short. &lt;/p&gt;

&lt;p&gt;This can either be added as response-headers on the server, or as a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;-tag in the html. &lt;/p&gt;

&lt;p&gt;I'm going to focus on the latter here. &lt;/p&gt;

&lt;p&gt;A CSP will tell the webpage from which domains it will allow loading images, fonts, iframes, scripts etc. from:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Content-Security-Policy"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"
  default-src;
  script-src 'self';
  style-src 'self';
  img-src 'self' data:;
  font-src;
  connect-src 'self';
  media-src 'self';
  object-src 'none';
  child-src;
  frame-src;
  form-action;
  base-uri;
  manifest-src 'self';
"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's &lt;em&gt;one long string&lt;/em&gt; within the double quotes, so I've added line-breaks and tabs for clarity.&lt;br&gt;&lt;br&gt;
Each entry ends with a semicolon &lt;code&gt;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note the word 'self'. That's how you allow to run the various types from the same domain as the current document.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#scripts" class="anchor"&gt;
  &lt;/a&gt;
  Scripts
&lt;/h2&gt;

&lt;p&gt;To allow a script from an external site, maybe a delivery network such as &lt;em&gt;unpkg.com&lt;/em&gt;, add &lt;code&gt;unpkg.com&lt;/code&gt; to the &lt;code&gt;script-src&lt;/code&gt;-part of the CSP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;script-src 'self' unpkg.com;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Cloudflare provides edge-caching and/or minification for assets, as well as a "Rocket Loader™", which will improve the paint-time for sites using JavsScript. I use it on my sites, but had to add this to my CSP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;script-src 'self' ajax.cloudflare.com;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A new entry is just a space, so combined, the current &lt;code&gt;script-src&lt;/code&gt; looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;script-src 'self' unpkg.com ajax.cloudflare.com;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#google-fonts" class="anchor"&gt;
  &lt;/a&gt;
  Google Fonts
&lt;/h2&gt;

&lt;p&gt;For Google Fonts, you'll have to add entries to both &lt;code&gt;font-src&lt;/code&gt; and &lt;code&gt;style-src&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;font-src fonts.gstatic.com;
style-src 'self' fonts.googleapis.com ;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#youtube" class="anchor"&gt;
  &lt;/a&gt;
  YouTube
&lt;/h2&gt;

&lt;p&gt;For YouTube, you need entries to &lt;code&gt;frame-src&lt;/code&gt; since it's iframe-based &lt;strong&gt;and&lt;/strong&gt; to &lt;code&gt;img-src&lt;/code&gt; as it provides thumbnail images as well. CSP is not always easy, but it's the quickest way to add an extra layer of protection to your site!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;frame-src *.youtube.com;
img-src 'self' img.youtube.com data:;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you include the YouTube API as well, you must add it to the &lt;code&gt;script-src&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;script-src *.youtube.com;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;YouTube-videos works with these additions, but will occasionally generate errors for it's "doubleclick"-network and others. You can just ignore these, or add them to your CSP (if you trust them!):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;script-src: https://www.googleadservices.com https://googleads.g.doubleclick.net https://www.google.com
img-src: https://www.google.com
frame-src: https://bid.g.doubleclick.net
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#vimeo" class="anchor"&gt;
  &lt;/a&gt;
  Vimeo
&lt;/h2&gt;

&lt;p&gt;Vimeo just need the &lt;code&gt;frame-src&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;frame-src: *.vimeo.com
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But if you want to use their API, add an entry to &lt;code&gt;script-src&lt;/code&gt; as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;script-src: *.vimeo.com
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#warning-marketeers-and-seopeople-hate-csps" class="anchor"&gt;
  &lt;/a&gt;
  Warning: Marketeers and SEO-people &lt;em&gt;hate&lt;/em&gt; CSP's!
&lt;/h2&gt;

&lt;p&gt;With a CSP in place, marketeers can no longer just add a cool new tracking-script via &lt;em&gt;Google Tag Manager&lt;/em&gt; or similar. So: be prepared to hear &lt;strong&gt;a lot of complaints&lt;/strong&gt;, unless you create a CMS-block, where they can add/remove CSP entries themselves!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Google Chrome&lt;/em&gt; supports many more CSP-entries than listed above. Unfortunately most of these doesn't work in &lt;em&gt;Apple Safari&lt;/em&gt;, and can actually cause it to &lt;em&gt;not&lt;/em&gt; parse JavaScript, so be sure to test in &lt;em&gt;all&lt;/em&gt; browsers.&lt;/p&gt;

&lt;p&gt;More info here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://content-security-policy.com/"&gt;https://content-security-policy.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And to help you create one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://report-uri.com/home/generate"&gt;https://report-uri.com/home/generate&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-add-preconnect" class="anchor"&gt;
  &lt;/a&gt;
  Bonus: Add preconnect
&lt;/h2&gt;

&lt;p&gt;While you're adding entries to your CSP, add a &lt;code&gt;&amp;lt;link rel="preconnect"&amp;gt;&lt;/code&gt;-tag for the same entries to speed up communication between your site and these resources. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example for "Google Fonts":&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.gstatic.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>security</category>
    </item>
    <item>
      <title>How to Access Object Properties in JavaScript in Three Ways</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 25 Jan 2021 07:17:29 +0000</pubDate>
      <link>https://dev.to/alexdevero/how-to-access-object-properties-in-javascript-in-three-ways-4hde</link>
      <guid>https://dev.to/alexdevero/how-to-access-object-properties-in-javascript-in-three-ways-4hde</guid>
      <description>&lt;p&gt;Objects are one area every JavaScript developer must know very well. Accessing object properties belongs to this area as well. In this tutorial, you will learn how to access object properties in three ways. You will learn how to use dot notation, bracket notation and destructuring.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-how-to-access-object-properties" class="anchor"&gt;
  &lt;/a&gt;
  Introduction to how to access object properties
&lt;/h2&gt;

&lt;p&gt;Objects are one of the data types in JavaScript. They allow you to store data in key-value pairs. Those "keys" in those pairs are also called properties. If you are not familiar with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"&gt;objects&lt;/a&gt; yet, you can think about them as &lt;a href="https://blog.alexdevero.com/javascript-variables-introduction/"&gt;variables&lt;/a&gt;. These variables exist only on the object that contains them, not anywhere outside these objects.&lt;/p&gt;

&lt;p&gt;In JavaScript there are multiple ways you can use to access one of those properties. These are dot notation, bracket notation and destructuring. Dot notation is sometimes also called dot property accessor. Another name for bracket notation is square brackets property access. There is one important thing to mention.&lt;/p&gt;

&lt;p&gt;All these ways assume you know the name of the property you want to access. If you don't know it, nothing is lost. You can &lt;a href="https://blog.alexdevero.com/javascript-loops/"&gt;loops&lt;/a&gt; to iterate over the object to get all properties, including the one you want. But now, let's take a look at those three ways you can use to access object properties.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dot-notation" class="anchor"&gt;
  &lt;/a&gt;
  Dot notation
&lt;/h2&gt;

&lt;p&gt;Dot notation, or dot property accessor, is probably the most popular way to access object properties in JavaScript. This method is very easy to learn and just as easy to use. The syntax is as follows. First, you specify some object. Second, you specify the name of the property. Between the object and property name goes a dot (&lt;code&gt;.&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;You can use the same process also to access deeper properties. In this case, you chain multiple properties together. You chain them in the way they are nested. So, the most shallow property will come as first, right after the object name. The deepest property will come as the last one: &lt;code&gt;obj.shallowProp.deeperProp.DeepestProp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's say you want to access property whose value is an array. You want to access specific item in that array. In this case, you can do what you would normally do if the array was a variable. You use the dot notation to access the property you want. After that, you use square brackets and index to get the item in the array you want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object using object literal:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Anthony Edward Stark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Iron Man&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;education&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MIT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;current&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Avengers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;creators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stan Lee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Larry Lieber&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Don Heck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack Kirby&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;good&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Accessing object properties with dot notation:&lt;/span&gt;
&lt;span class="c1"&gt;// First: name of the object.&lt;/span&gt;
&lt;span class="c1"&gt;// Second: name of the property to access.&lt;/span&gt;
&lt;span class="c1"&gt;// Third: dot character between the object and property.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Anthony Edward Stark'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Iron Man'&lt;/span&gt;


&lt;span class="c1"&gt;// Accessing deeper object properties:&lt;/span&gt;
&lt;span class="c1"&gt;// Access the "current" property that exists&lt;/span&gt;
&lt;span class="c1"&gt;// in nested object assigned to "affiliation" property&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Avengers'&lt;/span&gt;


&lt;span class="c1"&gt;// Accessing array items in objects:&lt;/span&gt;
&lt;span class="c1"&gt;// Access the first item inside the array&lt;/span&gt;
&lt;span class="c1"&gt;// assigned to "creators" property.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;creators&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Stan Lee'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dot-notation-and-valid-property-names" class="anchor"&gt;
  &lt;/a&gt;
  Dot notation and valid property names
&lt;/h3&gt;

&lt;p&gt;In JavaScript, there are rules saying what is and what is not a valid identifier. A valid identifier can contain Unicode letters, &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, and digits 0-9. However, it can't start with a digit. Following these rules is necessary especially when you want to declare new variables.&lt;/p&gt;

&lt;p&gt;These rules are also important for when you want to access object properties. This is especially true for dot notation. Dot notation works only with valid identifiers. It will not work if the property at hand violates these rules. For example, if it starts with number, or contains only number. Or, if it contains &lt;code&gt;-&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to access some property that violates these rules, don't use dot notation. Instead, use bracket notation. This way, you will still be able to work with that property as usual. You will learn about bracket notation in the next section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;First property&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bruce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Try to use dot notation&lt;/span&gt;
&lt;span class="c1"&gt;// to access properties on "myObj".&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// SyntaxError: Unexpected token&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// NaN&lt;/span&gt;


&lt;span class="c1"&gt;// Try to use bracket notation&lt;/span&gt;
&lt;span class="c1"&gt;// to access properties on "myObj".&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'First property'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'First property'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Bruce'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bracket-notation" class="anchor"&gt;
  &lt;/a&gt;
  Bracket notation
&lt;/h2&gt;

&lt;p&gt;The second way you can use to access object properties is bracket notation. The main characteristic of method this method are square brackets. The syntax is similar to the dot notation. However, there are some important differences. You again start with the name of the object you are working with.&lt;/p&gt;

&lt;p&gt;As second comes the name of the property. Here, you have to wrap the name of the property with quotes and square brackets. It doesn't matter if you use single or double quotes. What matters is that you use them to wrap the name of the property. Then, you wrap this with square brackets and put it after the object. No dot between them.&lt;/p&gt;

&lt;p&gt;Bracket notation also allows you to access deeper properties. This works similarly to dot notation. All properties are chained together, from the most shallow to the deepest. In case of brackets, there are no dots between properties. Furthermore, you must wrap all properties with quotes and square brackets.&lt;/p&gt;

&lt;p&gt;Accessing items inside arrays assigned to properties works similarly. First, specify the property name and wrap it with quotes and square brackets. Then, add additional pair of square bracket with the index of the item you want to access.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bruce Thomas Wayne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Batman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Batman Family&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Justice League&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Outsiders&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Guild of Detection&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;good&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;occupation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;businessman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Accessing object properties with bracket notation:&lt;/span&gt;
&lt;span class="c1"&gt;// First: name of the object.&lt;/span&gt;
&lt;span class="c1"&gt;// Second: name of the property to access.&lt;/span&gt;
&lt;span class="c1"&gt;// Note: property name must be wrapped with quotes&lt;/span&gt;
&lt;span class="c1"&gt;// and then with square brackets.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Bruce Thomas Wayne'&lt;/span&gt;


&lt;span class="c1"&gt;// Accessing deeper object properties:&lt;/span&gt;
&lt;span class="c1"&gt;// Access the "alignment" property that exists&lt;/span&gt;
&lt;span class="c1"&gt;// in nested object assigned to "status" property&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;status&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alignment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'good'&lt;/span&gt;


&lt;span class="c1"&gt;// Accessing array items in objects:&lt;/span&gt;
&lt;span class="c1"&gt;// Access the second item inside the array&lt;/span&gt;
&lt;span class="c1"&gt;// assigned to "affiliation" property.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;affiliation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Justice League'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bracket-notation-and-computed-object-properties" class="anchor"&gt;
  &lt;/a&gt;
  Bracket notation and computed object properties
&lt;/h3&gt;

&lt;p&gt;One interesting thing bracket notation allows is to use computed property names. These property names might not be known at the beginning, but later, or at runtime. One example can be a property name stored inside a variable. You can reference this variable to access property that matches the variable value.&lt;/p&gt;

&lt;p&gt;This variable might be undefined at the beginning and assigned later. That doesn't matter if you use it at the right time. Using computed object properties with bracket notation is similar to what you would normally do. The difference is that, now, you omit the quotes. You put the variable name between the brackets without them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James Howlett&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wolverine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;good&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Assign a property you want to access to a variable:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myProp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alias&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Use the variable to access specific property ("alias"):&lt;/span&gt;
&lt;span class="c1"&gt;// Referencing "myProp" will return value "alias",&lt;/span&gt;
&lt;span class="c1"&gt;// which will be used to access the same property ("alias").&lt;/span&gt;
&lt;span class="c1"&gt;// I.e.: myObj[myProp] =&amp;gt; myObj['alias']&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;myProp&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Wolverine'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#object-destructuring" class="anchor"&gt;
  &lt;/a&gt;
  Object destructuring
&lt;/h2&gt;

&lt;p&gt;Object destructuring is the last way to access object properties. It is also the newest. Dot and bracket notation have been around for a long time. Destructuring was added to JavaScript quite recently as part of the ES6 specification. Nonetheless, it quickly became very popular among JavaScript developers due to simplicity and usability.&lt;/p&gt;

&lt;p&gt;You use it when you declare new variable. On the left side of the assignment, you specify the name of the property and wrap it with curly brackets. On the right side, you reference the object you want to work with. This will assign the variable with the value of the property you specified.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Unknown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The Joker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Black Glove&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Injustice Gang&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Injustice League&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joker League of Anarchy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Justice League of Arkham&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;occupation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;criminal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Extract the value of "alias" property:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of new "alias" variable:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'The Joker'&lt;/span&gt;


&lt;span class="c1"&gt;// Extract the value of "affiliation" property:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;affiliation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of new "affiliation" variable:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// [&lt;/span&gt;
&lt;span class="c1"&gt;//   'Black Glove',&lt;/span&gt;
&lt;span class="c1"&gt;//   'Injustice Gang',&lt;/span&gt;
&lt;span class="c1"&gt;//   'Injustice League',&lt;/span&gt;
&lt;span class="c1"&gt;//   'Joker League of Anarchy',&lt;/span&gt;
&lt;span class="c1"&gt;//   'Justice League of Arkham'&lt;/span&gt;
&lt;span class="c1"&gt;// ]&lt;/span&gt;


&lt;span class="c1"&gt;// Extract the value of "status" property:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of new "status" variable:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// { alignment: 'bad', occupation: 'criminal' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#destructuring-multiple-properties" class="anchor"&gt;
  &lt;/a&gt;
  Destructuring multiple properties
&lt;/h3&gt;

&lt;p&gt;You can use object destructuring to "destructure" multiple properties. Put another way, to assign multiple variables at the same time. To do this, you add additional properties inside the curly braces on the left side of the assignment. These properties have to be separated by commas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dr. Reed Richards&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mister Fantastic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fantastic Four&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;good&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Use object destructuring to assign multiple variables:&lt;/span&gt;
&lt;span class="c1"&gt;// Desctructure "name", "alias", "affiliation" and "status".&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the values of new variables:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Dr. Reed Richards'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Mister Fantastic'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Fantastic Four'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// { alignment: 'good' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#custom-variable-names-and-aliases" class="anchor"&gt;
  &lt;/a&gt;
  Custom variable names and aliases
&lt;/h3&gt;

&lt;p&gt;Assigning values to variables with object destructuring is very easy. What if you want to use different variable name than is the name of the property? You can. Object destructuring allows you to specify an alias for the variable. You can use this alias to reference the variable using different name than the property.&lt;/p&gt;

&lt;p&gt;When you want to create an alias, you specify it inside the curly brackets on the left side of the assignment. You add colons (&lt;code&gt;:&lt;/code&gt;) followed by the new alias right after the property name. From now on, you can use this alias when you want to reference that variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bruce Banner&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hulk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;S.H.I.E.L.D.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;good&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Extract the value of "name" property&lt;/span&gt;
&lt;span class="c1"&gt;// and assign it to variable called "realName" (new alias).&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;realName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Use new alias "realName" to get the value&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;realName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Bruce Banner'&lt;/span&gt;


&lt;span class="c1"&gt;// Extract the value of "alias" property&lt;/span&gt;
&lt;span class="c1"&gt;// and assign it to variable called "heroName" (new alias).&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;heroName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Use new alias "heroName" to get the value&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Hulk'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#custom-variable-names-aliases-for-multiple-properties" class="anchor"&gt;
  &lt;/a&gt;
  Custom variable names (aliases) for multiple properties
&lt;/h3&gt;

&lt;p&gt;Just like you can change the variable name for one property you can change it for multiple. The process is the same. You have to add additional colons and new alias inside the curly brackets. Do this for each property for which you want to change the variable name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oliver Jonas Queen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Green Arrow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Justice League&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Justice Society International&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;good&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Change multiple variable names:&lt;/span&gt;
&lt;span class="c1"&gt;// Change variable for "name" to "realName".&lt;/span&gt;
&lt;span class="c1"&gt;// Change variable for "alias" to "heroName".&lt;/span&gt;
&lt;span class="c1"&gt;// Change variable for "affiliation" to "connection".&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;realName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;heroName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log all values using new variable names:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;realName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Oliver Jonas Queen'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Green Arrow'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// [ 'Justice League', 'Justice Society International' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#object-destructuring-aliases-and-default-values" class="anchor"&gt;
  &lt;/a&gt;
  Object destructuring, aliases and default values
&lt;/h3&gt;

&lt;p&gt;Object destructuring might be cool, but what if the property you want to access doesn't exist? One thing you can do with object destructuring is to provide some default value. If the property doesn't exist, the variable will be assigned this default value. Otherwise, it will be assigned the existing value.&lt;/p&gt;

&lt;p&gt;When you want to specify default value for any property, you do it also inside the curly brackets. You specify the default value after the property name. You also have to separate those two with equal sign (&lt;code&gt;=&lt;/code&gt;). If there is an alias, then, the default value comes after the alias, as last.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Richard John Grayson&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nightwing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;good&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Deconstruct the "name" property&lt;/span&gt;
&lt;span class="c1"&gt;// and add default value in case it doesn't exist.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Anonymous&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of name&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Richard John Grayson'&lt;/span&gt;


&lt;span class="c1"&gt;// Deconstruct the "gender" property&lt;/span&gt;
&lt;span class="c1"&gt;// and add default value in case it doesn't exist.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Unknown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of "name":&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Unknown'&lt;/span&gt;


&lt;span class="c1"&gt;// Deconstruct the "name" property&lt;/span&gt;
&lt;span class="c1"&gt;// and "affiliation" property,&lt;/span&gt;
&lt;span class="c1"&gt;// change it to "connections" and add default value&lt;/span&gt;
&lt;span class="c1"&gt;// in case "affiliation" property doesn't exist.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;connections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;No connections&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of new variable "connections":&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'No connections'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#object-destructuring-and-computed-properties" class="anchor"&gt;
  &lt;/a&gt;
  Object destructuring and computed properties
&lt;/h3&gt;

&lt;p&gt;Similarly to bracket notation, object destructuring also allows to use computed property names. The way to use it is following. Wrap the variable name, that contains the property name, with square brackets and put it inside the curly brackets. One thing to remember is that you have to specify an alias. Otherwise, you will get SyntaxError.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Max Eisenhardt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Magneto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;creators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stan Lee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack Kirby&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Assign a property you want to access to a variable:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myProp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Use the variable to access specific property ("name")&lt;/span&gt;
&lt;span class="c1"&gt;// and also create alias for it:&lt;/span&gt;
&lt;span class="c1"&gt;// Referencing "myProp" will now return value "name",&lt;/span&gt;
&lt;span class="c1"&gt;// which will be used to access the "name" property.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;myProp&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of new variable "name":&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Wolverine'&lt;/span&gt;


&lt;span class="c1"&gt;// Use computed property name with default value:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myProp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;powers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Use the variable to access specific property ("powers")&lt;/span&gt;
&lt;span class="c1"&gt;// and create alias "abilities" for it.&lt;/span&gt;
&lt;span class="c1"&gt;// If the property doesn't exist, use 'Unknown'&lt;/span&gt;
&lt;span class="c1"&gt;// as the default value for the new variable.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;myProp&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;abilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Unknown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of new variable "abilities":&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;abilities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Unknown'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-how-to-access-object-properties-in-javascript-in-three-ways" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion: How to access object properties in JavaScript in three ways
&lt;/h2&gt;

&lt;p&gt;These are three ways to access object properties in JavaScript: dot and bracket notation and object destructuring. I hope this tutorial helped you understand how all they all work and how to use them. Now, find the one you feel the most comfortable with and start using it. Remember, there are no good or bad ways to access properties.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Javascript: The 'this' keyword [context] cheatsheet</title>
      <author>Rohan Salunke</author>
      <pubDate>Mon, 25 Jan 2021 05:57:02 +0000</pubDate>
      <link>https://dev.to/okrohan/javascript-the-this-keyword-context-cheatsheet-2361</link>
      <guid>https://dev.to/okrohan/javascript-the-this-keyword-context-cheatsheet-2361</guid>
      <description>&lt;p&gt;&lt;strong&gt;Javascript context&lt;/strong&gt; i.e the &lt;strong&gt;'this'&lt;/strong&gt; keyword is quite a confusing topic in itself. Although, being very simple and semantic, it has been easy for me to forget the rules around context. With further ado, Let me introduce the cheatsheet for &lt;strong&gt;the infamous 'this' keyword!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;&lt;code&gt;Quick side note: This article is intended as a cheatsheet around JS context, It does not serve as a verbose explanation of the concept. If you are beginner and have not explored the 'context' concept yet, I highly recommend you to read this&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this"&gt;MDN doc&lt;/a&gt; &lt;code&gt;first &lt;br&gt;
&lt;/code&gt;&lt;/i&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cheatsheet" class="anchor"&gt;
  &lt;/a&gt;
  Cheatsheet:
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;Use case&lt;/th&gt;
&lt;th&gt;this&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;th colspan="3"&gt;Normal Functions&lt;/th&gt;
&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Invoked directly&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;window&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;
&lt;pre&gt;
 fn() 
 // this -&amp;gt; window
&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt; Invoked from object&lt;br&gt;[Implicit Binding]
 &lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt; Invoking object &lt;/b&gt;&lt;/td&gt;
&lt;td&gt;
&lt;pre&gt;
obj.fn()
// this -&amp;gt; obj
&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;b&gt; Explicit Binding&lt;br&gt;(bind, call, apply)
 &lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt; Passed reference
 &lt;/b&gt;&lt;/td&gt;
&lt;td&gt;
&lt;pre&gt;
// --- .call .apply --- //
obj.fn.call(otherObj)
// this -&amp;gt; otherObj
&lt;br&gt;
// --- .bind --- //
const boundFn = obj.fn.bind(otherObj)
boundFn()
// this -&amp;gt; otherObj
&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Invoked in
&lt;br&gt;strict mode
&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;undefined &lt;br&gt;&lt;i&gt;[[ If this-&amp;gt;window ]]&lt;/i&gt;&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;
&lt;pre&gt;
'use strict'
fn()
// this -&amp;gt; undefined

window.globalFn = fn
window.globalFn()
// this -&amp;gt; undefined

obj.fn.call(window)
// this -&amp;gt; undefined
&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;th colspan="3"&gt;Arrow Functions&lt;/th&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;
&lt;br&gt;&lt;b&gt;Instantiation context:&lt;/b&gt; &lt;i&gt;
The value of 'this'[Context] when an object instance is created using a constructor.
&lt;/i&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;b&gt; Invoked &lt;br&gt;
[directly OR from object] &lt;br&gt;
 &lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt; Instantiation context
 &lt;/b&gt;&lt;/td&gt;
&lt;td&gt;
&lt;pre&gt;
// ----- direct invocation ---- //
// Instantiation context: window
const fn = () =&amp;gt; console.log(this)
fn() 
// this -&amp;gt; window

// ----- invocation from obj [class instance] ---- //
function myClass(){
 this.fn = () =&amp;gt; console.log(this)
}
-- OR --
class myClass {
 constructor(){
  this.fn = () =&amp;gt; console.log(this)
 }
}
// Instantiation context: obj1
const obj1 = new myClass() 
obj1.fn()
// this -&amp;gt; obj1


// ----- invocation from obj ---- //
// Instantiation context: window
const obj2 = { fn: () =&amp;gt; console.log(this) }
obj2.fn()
// this -&amp;gt; window
&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;b&gt; Explicit Binding &lt;br&gt;(bind, call, apply)
 &lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt; Instantiation context &lt;br&gt;
[No Effect] &lt;/b&gt;&lt;/td&gt;
&lt;td&gt;
&lt;pre&gt;
obj.fn.call(otherObj)
// this -&amp;gt; window

instance.fn.call(otherObj)
// this -&amp;gt; instance
&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt; Invoked &lt;br&gt;
in strict mode 

 &lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt; undefined &lt;br&gt;
&lt;i&gt;[[ if this -&amp;gt; window ]]&lt;/i&gt; &lt;/b&gt;&lt;/td&gt;
&lt;td&gt;
&lt;pre&gt;
'use strict'
fn()
// this -&amp;gt; undefined
&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#some-simple-examples" class="anchor"&gt;
  &lt;/a&gt;
  Some simple examples🤥:
&lt;/h2&gt;

&lt;pre&gt;
 const fn = function(){
  console.log(this)
 }
 
 const obj = { 
  fn1: fn,
  fn2: function() {
   fn()
  },
  fn3: function(){
   this.fn1()
  },
  fn4: fn.bind(obj),
  fn5: function(){
   this.fn1.call(obj)
  }
 }
 
 obj.fn1()
 // log: obj 
 // as 'fn1' was invoked via the obj object

 obj.fn2()
 // log: window
 // as 'fn2' was invoked via the obj, but
 // the inner 'fn' was invoked directly 

 obj.fn3()
 // log: obj
 // fn3 was invoked via the obj, 'this' pointed to the
 // 'obj'. As 'this' -&amp;gt; obj, the inner execution
 // [this.fn()] is as good 
 // as obj.fn1()

 obj.fn4()
 // log: obj
 // Explicit context binding ;)

 obj.fn5()
 // log: obj
 // hope you're getting a hang of it :P
&lt;/pre&gt;

&lt;h2&gt;
  &lt;a href="#some-more-simple-examples-" class="anchor"&gt;
  &lt;/a&gt;
  Some more simple examples 🤥🤥🤥:
&lt;/h2&gt;

&lt;pre&gt;

 function fnConstructor(){
  const fn = () =&amp;gt; console.log(this)
  this.fn1 = () =&amp;gt; console.log(this),
  this.fn2 = function(){
   console.log(this)
  }
  this.fn3 = fn,
  this.fn4 = function(){
   fn()
  }
  this.innerObj = { fn }
 }

 const obj = new fnConstructor()
 const obj2 = {
  obFn1: obj.fn1,
  obFn2: () =&amp;gt; console.log(this)
 }

 obj.fn1()
 // log: obj (Instantiation context!)
 
 obj.fn2()
 // log: obj (Duhh^^)

 obj.fn3()
 // log: window ;)
 
 obj.fn4()
 // log: obj (Instantiation context!) 

 obj.innerObj.fn()
 // log: obj (Instantiation context!!) 

 obj2.obFn1()
 // log: obj (Instantiation context!!!)

 obj2.obFn2()
 // log: window ;) 
&lt;/pre&gt;




&lt;p&gt;&lt;a href="https://i.giphy.com/media/iPiUxztIL4Sl2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/iPiUxztIL4Sl2/giphy.gif"&gt;&lt;/a&gt;&lt;br&gt;
&lt;b&gt;Hope that was helpful 😇 &lt;/b&gt;&lt;br&gt;
If you have any questions/confusions/suggestions/corrections, Please do post down in the comments section below.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Rohan Salunke&lt;/b&gt;: &lt;a href="https://www.linkedin.com/in/rohan-salunke/"&gt;LinkedIn&lt;/a&gt; &lt;a href="https://twitter.com/ROHANSA09177528"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What is IIFE in JavaScript? </title>
      <author>Rahul</author>
      <pubDate>Mon, 25 Jan 2021 02:28:27 +0000</pubDate>
      <link>https://dev.to/rahxuls/what-is-iife-in-javascript-2hgk</link>
      <guid>https://dev.to/rahxuls/what-is-iife-in-javascript-2hgk</guid>
      <description>&lt;p&gt;Privacy is important and IIFEs can be useful to achieve it. While reading many posts about JavaScript interviews I came towards this term so I thought of learning and writing about it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-it" class="anchor"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Immediately Invoked Function Expression&lt;/strong&gt; (IIFE) are basically the functions that are invoked after completion of the definition. There times when multiple people are working on a project in a team. Suppose you create a function in one file and your team member &lt;strong&gt;creates function&lt;/strong&gt; with the same name in another file. Now when both the files are included in the same web page, there is a very likely possibility of your &lt;strong&gt;global scope getting polluted&lt;/strong&gt; due to the same name of the functions. This is where IIFE can help you out. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-it-helps" class="anchor"&gt;
  &lt;/a&gt;
  How it helps?
&lt;/h2&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Hey&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we have two functions with the same name. This can be a problem as the second one will override first one and we will get "Hey" on our console. Now how to overcome this? Well, this is where you use IIFE. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#iife" class="anchor"&gt;
  &lt;/a&gt;
  IIFE
&lt;/h2&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;})();&lt;/span&gt; &lt;span class="c1"&gt;// "Hey"&lt;/span&gt;

&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Hey&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we make the second function an IIFE by enclosing it in parentheses. This is the syntax for an IIFE. Now how it solves our issue is by giving the function its own scope and this prevents it from the messing with our global scope. &lt;/p&gt;

&lt;p&gt;This &lt;strong&gt;function is invoked&lt;/strong&gt; as soon as its declaration is complete. And as result we see &lt;strong&gt;"Hey"&lt;/strong&gt; and &lt;strong&gt;"Hello"&lt;/strong&gt; both on our screen. Because now out &lt;code&gt;greet()&lt;/code&gt; refers to the globally created greet function. &lt;/p&gt;




&lt;p&gt;😳Thanks For Reading | Happy Coding📚&lt;/p&gt;

&lt;p&gt;Get weekly newsletter of amazing articles I posted this week and some offers or announcement. Subscribe from &lt;a href="https://mailchi.mp/9f73b65b9c38/rahulism"&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rahxuls"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--finLNCLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rahulism1/image/upload/v1608182430/bmc_nbxakd.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>Push Notifications in ReactJS with OneSignal</title>
      <author>Pato</author>
      <pubDate>Mon, 25 Jan 2021 01:08:50 +0000</pubDate>
      <link>https://dev.to/devpato/push-notifications-in-reactjs-with-onesignal-5bon</link>
      <guid>https://dev.to/devpato/push-notifications-in-reactjs-with-onesignal-5bon</guid>
      <description>&lt;p&gt;In this tutorial, you are going to learn how to communicate with the users of your application by integrating push notifications and subscriptions into your ReactJS application using OneSignal. &lt;/p&gt;

&lt;h2&gt;Topics covered in this tutorial&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ReactJS&lt;/li&gt;
&lt;li&gt;Push Notifications&lt;/li&gt;
&lt;li&gt;OneSignal Segments&lt;/li&gt;
&lt;li&gt;Audience&lt;/li&gt;
&lt;li&gt;Subscriptions&lt;/li&gt;
&lt;li&gt;One Signal's SDK&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we begin, it's important to define what a push notification is.&lt;/p&gt;

&lt;h2&gt;What is a Push Notification?&lt;/h2&gt;

&lt;p&gt;Push notifications are clickable pop-up messages that appear on your users’ browsers irrespective of which device they use or which browser they are on. Subscribers can be anywhere on the browser and still receive these messages even if the website or app are not running.&lt;/p&gt;

&lt;p&gt;Browser push notifications are different from in-app notifications because in-app notifications appear only when triggered by an existing application on your mobile device; browser push notifications can be triggered through browsers on any device as long as the user subscribes to receive your notifications. It is an instant mode of automated, direct communication between a website and its end users. &lt;/p&gt;

&lt;h2&gt;Time to get our hands dirty!!! 🎊&lt;/h2&gt;

&lt;p&gt;In this tutorial, we are going to use OneSignal to send the push notifications and handle the subscriptions.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;OneSignal is the market leader in customer engagement, powering mobile + web push, email, SMS &amp;amp; in-app messages.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;The first thing that we have to do is to create an account inside of &lt;a href="https://onesignal.com/"&gt;OneSignal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1) Once you have created an account, you will create a new application&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f82_Hfgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5yotjpw61gjafolh46fy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f82_Hfgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5yotjpw61gjafolh46fy.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) When creating the app, you can give it whatever name you want. Make sure sure the "No Organization" option is selected from the organizations dropdown. Lastly, click on Web Push and click &lt;strong&gt;NEXT&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BtSZbHP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gyx66uy5zprn0jtobiva.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BtSZbHP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gyx66uy5zprn0jtobiva.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Configure your Web Push by entering the website's name and by entering the site's URL then click &lt;strong&gt;SAVE&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Notes&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;-Keep in mind that your application has to be hosted in a server for the Push Notifications to work. If you want to deploy your website in a quick and easy way, follow &lt;a href="https://dev.to/thisdotmedia/web-app-deployment-with-firebase-in-2-minutes-4bo8"&gt;this&lt;/a&gt;  2min tutorial.&lt;/i&gt; &lt;/p&gt;

&lt;p&gt;&lt;i&gt;-You can enter a default URL icon but this is an option, not mandatory&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qShkVCfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6fxe2rvvhsbf3coib32m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qShkVCfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6fxe2rvvhsbf3coib32m.png" alt="OneSignal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) Download the SDK files and save them in a place you will remember in your computer because we are going to use them later on.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;The .zip file you are downloading contains 2 files. These are the Service Workers provided by OneSignal. To learn more about Service Workers in general read &lt;a href="https://dev.to/thisdotmedia/intro-to-pwa-and-service-workers-15d4"&gt;this&lt;/a&gt; article.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DO NOT CLOSE THE CONFIG PAGE. WE WILL BE BACK TO IT SOON.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Integrating OneSignal To Your ReactJS App&lt;/h2&gt;

&lt;p&gt;Feel free to clone the repo with the basic structure of the React application where we will integrate OneSignal or follow the steps given in this tutorial to integrate OneSignal into your own React application.&lt;/p&gt;

&lt;h3&gt;Github repo&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/devpato/onesignal-demo"&gt;https://github.com/devpato/onesignal-demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-initial state branch (INIT)&lt;br&gt;
-final code branch (MAIN)&lt;/p&gt;

&lt;p&gt;5) Inside of the React project, the first thing you are going to do is to add the services worker files you downloaded into your &lt;strong&gt;PUBLIC&lt;/strong&gt; folder.&lt;/p&gt;

&lt;p&gt;You should be adding 2 files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OneSignalSDKUpdaterWorker.js&lt;/li&gt;
&lt;li&gt;OneSignalSDKWorker.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tohJdvtW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7d7cpa213fzer286v3xy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tohJdvtW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7d7cpa213fzer286v3xy.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6) In the same folder (PUBLIC) you have a file called &lt;strong&gt;Index.html&lt;/strong&gt;. Go to that file and paste the following line of code inside of you &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.onesignal.com/sdks/OneSignalSDK.js"&lt;/span&gt; &lt;span class="na"&gt;async=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Your file should look something like &lt;a href="https://github.com/devpato/onesignal-demo/blob/main/public/index.html"&gt;this&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
.
.
.
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;One Signal - React&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.onesignal.com/sdks/OneSignalSDK.js"&lt;/span&gt; &lt;span class="na"&gt;async=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;7) Open the App.js file located inside of the &lt;strong&gt;SRC&lt;/strong&gt; folder and paste the code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OneSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OneSignal&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;OneSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OneSignal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This code will allows us to have access to the OneSignal object that we injected into our app thanks to the SDK we added in the &lt;strong&gt;index.html&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;8) In the same file, inside of the &lt;code&gt;useEffect&lt;/code&gt; add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;OneSignal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;OneSignal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1a9bbed2-9294-4192-a736-01b461cb389a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//STEP 9&lt;/span&gt;
          &lt;span class="na"&gt;promptOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;slidedown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;actionMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;We'd like to show you notifications for the latest news and updates about the following categories.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;acceptButtonText&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;OMG YEEEEESS!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;cancelButtonText&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NAHHH&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                      &lt;span class="p"&gt;{&lt;/span&gt;
                          &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ReactJS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="p"&gt;},&lt;/span&gt;
                      &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;angular&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Angular&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="p"&gt;},&lt;/span&gt;
                      &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;VueJS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="p"&gt;},&lt;/span&gt;
                      &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="p"&gt;}&lt;/span&gt;
                  &lt;span class="p"&gt;]&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;     
          &lt;span class="p"&gt;}&lt;/span&gt; 
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;welcomeNotification&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;One Signal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Thanks for subscribing!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; 
      &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="c1"&gt;//Automatically subscribe to the new_app_version tag&lt;/span&gt;
        &lt;span class="nx"&gt;OneSignal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendTag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new_app_version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new_app_version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagsSent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// Callback called when tag has finished sending&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new_app_version TAG SENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagsSent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's talk about the previous code. The OneSignal object can only be initialized once &lt;code&gt;.init()&lt;/code&gt;. In this example we are triggering the initialization as soon as the App component loads. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;promptOptions&lt;/code&gt; property will hold all the information related to the &lt;a href="https://documentation.onesignal.com/docs/permission-requests"&gt; prompt message &lt;/a&gt; we are displaying to the user.&lt;/p&gt;

&lt;p&gt;slidedown property is the type prompt that will slide down from the top of your page. This type of prompt has multiple properties you can use to customize it. Let's take a look to some of those properties:&lt;/p&gt;

&lt;p&gt;-actionMessage: This is the main message to display in the prompt.&lt;/p&gt;

&lt;p&gt;-acceptButtonText: Text for the accept button inside of the prompt.&lt;/p&gt;

&lt;p&gt;-cancelButtonText: Text for the cancel button inside of the prompt.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-aAVMDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iqhwdixo65ibdj06o3cb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-aAVMDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iqhwdixo65ibdj06o3cb.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;categories: Property that takes an array of tags. The &lt;a href="https://documentation.onesignal.com/docs/slide-prompt#category-tags"&gt;Category Slidedown&lt;/a&gt; works just like the regular Slide Prompt except it also allows subscribers to opt-in or opt-out of notification categories set as Data Tags.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UbJhtron--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wypcvjp05oi05gfkb598.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UbJhtron--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wypcvjp05oi05gfkb598.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;welcomeNotification: Displays a in-app notification after we have clicked on the accept button inside of the prompt and after the user has allowed the notifications in the app and after.&lt;/p&gt;

&lt;p&gt;Finally, at the bottom of the code provided above, you will see the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;OneSignal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendTag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new_app_version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new_app_version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagsSent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new_app_version TAG SENT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagsSent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://documentation.onesignal.com/docs/data-tag-implementation#sdk-tagging-methods"&gt;sendTags&lt;/a&gt; will send a tag to OneSignal specifying the tag the users belong too. We can use these tags to target users by creating segments for things like marketing campaigns. The cool thing about sendTag is that you can use this method in other parts of your app without the need of a prompt. For example you can use them on a click of a button. &lt;/p&gt;

&lt;p&gt;9) Now, let's go back to the configuration page inside the OneSignal website. Once you are in there, you are going to copy the &lt;i&gt;appId&lt;/i&gt; inside of the "Add code to site" section. Your app ID is unique per application. If you try to use mine, it won't work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6FQdVOcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n8coi256xi4fhht5mz54.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6FQdVOcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n8coi256xi4fhht5mz54.png" alt="OneSignal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you have copied the appId, go back to your App.js file inside of your ReactJS app and inside of the OneSignal object assign your copied appId to the appId property.&lt;/p&gt;

&lt;p&gt;10) Now build you app and deploy it to your server.&lt;/p&gt;

&lt;h3&gt;YAY! we are done with the code part!&lt;/h3&gt;

&lt;p&gt;11) Navigate to your app's website. You should see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HIL7Ofqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kkqkpo57dprfcmesyyn7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HIL7Ofqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kkqkpo57dprfcmesyyn7.png" alt="OneSignal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-Click on Allow on the OneSignal prompt&lt;/p&gt;

&lt;p&gt;After you have clicked allow on the OneSignal prompt we will see this browser message&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9JXPSBdO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p1av7crv0kpzp7tydtwi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9JXPSBdO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p1av7crv0kpzp7tydtwi.png" alt="OneSignal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click "Allow" and you will see the in-app (welcomeNotification)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rbn-dMkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/85m2ihxgatlu8e8z79oq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rbn-dMkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/85m2ihxgatlu8e8z79oq.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;The OneSignal Platform&lt;/h2&gt;

&lt;p&gt;12) Let's go back to the OneSignal website. We are going to create a new &lt;a href="https://documentation.onesignal.com/docs/segmentation"&gt;Segment&lt;/a&gt; to target specific users for our marketing campaign.&lt;/p&gt;

&lt;p&gt;On the top navigation bar of the website, click where it says "audience". Once you are in that section, click the blue button that says "New Segment"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UI2b-jeL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/61sjul9hxjf8uvsc58ci.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UI2b-jeL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/61sjul9hxjf8uvsc58ci.png" alt="OneSignal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A modal as the following will appear&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yh0cKDv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xtgqnfgq0olot0qakc35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yh0cKDv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xtgqnfgq0olot0qakc35.png" alt="OneSignal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter whatever name you want for you Segment and click on "User tag".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A1rn50IB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/atql60ln12ktmvq6mif5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A1rn50IB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/atql60ln12ktmvq6mif5.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create the user segments rules. Once you are done, click on the blue button "Create Segment".&lt;/p&gt;

&lt;h3&gt;YAY! you have officially created you first Segment.&lt;/h3&gt;

&lt;h2&gt;Time to test our application!&lt;/h2&gt;
 

&lt;p&gt;13) We are going to create our first Push Notification using OneSignal. Navigate to Messages and click on the blue button "New Push".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--no4nDi9Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rfubtltq7j7ij14ld9mt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--no4nDi9Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rfubtltq7j7ij14ld9mt.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the "Audience" section select "Send to Particular Segment(s)". Remove the segment of "Subscribed Users" and add the Segment you just created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TK1rq1jr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z2grbfw8l82prox0hc3j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TK1rq1jr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z2grbfw8l82prox0hc3j.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the "Message" section enter the title, message, and icon you want the Push notification to have.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8LhqoDq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ata48hg1k0xju9z1pxc9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8LhqoDq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ata48hg1k0xju9z1pxc9.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly, in the "Schedule" section select "Begin sending immediately" and "Send immediately" and click on the blue button "Confirm"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bLHE7BS6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qkjrbimxxos4llm4d0b1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bLHE7BS6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qkjrbimxxos4llm4d0b1.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Review your message before sending and click "Send message" and see the magic happening :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rp96O98c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e1uviep6se76o6uwahox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rp96O98c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e1uviep6se76o6uwahox.png" alt="OneSignal React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will receive see your first Push notification coming from OneSignal!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JNyhwXTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sbw66gmadezddvirknnj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JNyhwXTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sbw66gmadezddvirknnj.png" alt="OneSignal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;OneSignal is a great tool to interact with the application's users. OneSignal is a great communication tool. This tool allows you not only to send Push notifications but also to target specific segments of users you want to interact with. OneSignal has a great Dashboard where you can keep track of how your users are interacting with your Push notifications or any other tool inside of OneSignal used to communicate with the users like SMS, emails, and more. I have used other technologies to send Push notifications and from my point of view, OneSignal was the one that was the easiest to integrate into your website. You can integrate it to a regular HTML/CSS/JS website with almost no programming experience.&lt;/p&gt;

&lt;h3&gt;Resources&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://vwo.com/push-notifications/"&gt;https://vwo.com/push-notifications/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://documentation.onesignal.com/docs"&gt;https://documentation.onesignal.com/docs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How to write clean code</title>
      <author>juliette_chevalier</author>
      <pubDate>Mon, 25 Jan 2021 00:19:35 +0000</pubDate>
      <link>https://dev.to/_juliettech/how-to-write-clean-code-3lhl</link>
      <guid>https://dev.to/_juliettech/how-to-write-clean-code-3lhl</guid>
      <description>&lt;p&gt;Writing clean code is like writing poetry. Poetry that is easily understood, has transformational power, and is written in a concise manner. &lt;/p&gt;

&lt;p&gt;Clean code means a scalable organization. It's the difference between a junior dev and a senior engineer.  It means being able to pivot plans without much chaos. &lt;/p&gt;

&lt;p&gt;It took me several recommendations to actually gain up the courage and read &lt;a href="https://shopforbooks.shop/products/clean-code-a-handbook-of-agile-software-craftsmanship-1st-edition?variant=32132717314142&amp;amp;msclkid=2e5d26e1c3b311efa7a446efc2909b49"&gt;Clean Code&lt;/a&gt;. It's one of those books you can't help but judge by its cover. I'll admit though - lives up to the hype. Insights are clear, specific, practical, and with a spark of nerdy humor that gets to my heart. Today, I share with you my top take-aways. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-making-your-code-readable-is-as-important-as-making-it-executable" class="anchor"&gt;
  &lt;/a&gt;
  1. Making your code readable is as important as making it executable.
&lt;/h3&gt;

&lt;p&gt;The majority of the cost of a software project is in long-term maintenance. Therefore, the code you write should clearly express your intent so that new developers can easily hop in and understand what is going on and why. &lt;strong&gt;The clearer the author can make the code, the less time others will have to spend understanding it&lt;/strong&gt;. This reduces defects and shrink the cost of maintenance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;How to do this:&lt;/strong&gt; good naming practices + single responsibility classes and functions + writing tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-later-equals-never" class="anchor"&gt;
  &lt;/a&gt;
  2. Later equals never
&lt;/h3&gt;

&lt;p&gt;Let's be honest. We've all said we'd go back and clean it up later and then forgot about it. &lt;strong&gt;Don't leave scraps of useless code that no longer serve a purpose&lt;/strong&gt;. They confuse other devs and provide no value. When changing a feature, always make sure to delete the old code. Tests should notify you if you're breaking stuff elsewhere anyways. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;How to do this:&lt;/strong&gt; Deleting code can be scary, especially in a big architecture. That's why tests are key to keeping your code clean so you can delete with confidence.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-functions-should-be-small" class="anchor"&gt;
  &lt;/a&gt;
  3. Functions should be small
&lt;/h3&gt;

&lt;p&gt;The first rule of functions is that they should be small - &lt;strong&gt;hardly 20 lines long&lt;/strong&gt;. This is because the smaller and more focused the function is, the easier it is to choose a highly descriptive name. &lt;/p&gt;

&lt;p&gt;When it comes to a function's arguments: the ideal number is 0. Then goes 1, then 2, but more than 3 should be avoided where possible.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;How to do this:&lt;/strong&gt; Functions should follow the &lt;a href="https://hackernoon.com/you-dont-understand-the-single-responsibility-principle-abfdd005b137"&gt;Single Responsibility Principle&lt;/a&gt; and the &lt;a href="https://stackify.com/solid-design-open-closed-principle/"&gt;Open Closed Principle&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-duplication-is-the-evil-of-all-code" class="anchor"&gt;
  &lt;/a&gt;
  4. Duplication is the evil of all code
&lt;/h3&gt;

&lt;p&gt;Duplication is the enemy of a well-designed system. &lt;strong&gt;It represents additional work, additional risk, and additional unnecessary complexity.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;How to do this:&lt;/strong&gt; Avoid it at all times by keeping your code DRY (Don't Repeat Yourself), isolated, and modular.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-the-only-good-comment-is-the-one-you-found-a-way-not-to-write" class="anchor"&gt;
  &lt;/a&gt;
  5. The only good comment is the one you found a way not to write
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;Nothing can be quite so helpful as a well-placed comment. But comments are, at best, a necessary evil."&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The proper use of comments is to compensate for our failure to express our self in code. Comments are always failures. We must have them because we cannot always figure out how to express ourselves without them, but their use is not cause for celebration.&lt;/p&gt;

&lt;p&gt;Thing is, comments often lie. Not always, and not intentionally, but too often. The older a comment is, and the farther away it is from the code it describes, the more likely it is to be just plain wrong. &lt;/p&gt;

&lt;p&gt;The reason is simple: programmers can't realistically maintain all of them so all too often they become separated from the code they describe and become orphaned blurbs of ever decreasing accuracy. &lt;strong&gt;Usually comments are crutches or excuses for poor code or justifications for insufficient decisions&lt;/strong&gt;, amounting to little more than the programmer talking to him/herself.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;How to do this:&lt;/strong&gt; descriptive naming practices that allow devs to know what the variables represent + provide tests so other devs can see what the main functionalities are.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#6-an-object-exposes-behavior-but-not-data" class="anchor"&gt;
  &lt;/a&gt;
  6. An object exposes behavior but not data
&lt;/h3&gt;

&lt;p&gt;A module should not know about the innards of the objects it manipulates. &lt;strong&gt;Objects hide their data and expose operations.&lt;/strong&gt; This means that an object should not expose its internal structure through &lt;code&gt;accessors&lt;/code&gt; because to do so is to expose, rather than to hide, its internal structure. There's no need for everyone to see you naked.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;How to do this:&lt;/strong&gt; The scope of variables should be as local as possible, without exposing more than is necessary.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#7-on-testing" class="anchor"&gt;
  &lt;/a&gt;
  7. On testing
&lt;/h3&gt;

&lt;p&gt;Test code is just as important as production code and as such, it must change and grow as the production code evolves. &lt;strong&gt;Keeping tests clean is so important because without them, you lose the very thing that keeps your production code flexible, maintainable, and reusable&lt;/strong&gt;. If you have tests you do not fear making changes to the code and without tests, every change is a possible bug. Tests eliminates the fear that cleaning code will break it.&lt;/p&gt;

&lt;p&gt;Readability keeps tests clean because they are an opportunity to explain to other devs the intent of the original author in plain English. This is why we want to test only a single concept in each test function so that the test is descriptive, reads easier, and is easier to track when it fails. Clear separation and good test writing help define expectations and keeps the scopes clear.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to do this:&lt;/strong&gt; Follow the FIRST Principles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fast: tests should be ran quickly. If you have to wait too long for each test you're less likely to run them often.&lt;/li&gt;
&lt;li&gt;Independent/isolated: tests should not depend on each other or build from each other. They should be as isolated as possible.&lt;/li&gt;
&lt;li&gt;Repeatable: tests should be repeatable in any environment - development, staging or production.&lt;/li&gt;
&lt;li&gt;Self-validating: tests should have a boolean output. They either pass or fail.&lt;/li&gt;
&lt;li&gt;Thorough: tests should aim to cover all edge cases, all security issues, every use case and happy path.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#8-on-error-handling-and-exceptions" class="anchor"&gt;
  &lt;/a&gt;
  8. On error handling and exceptions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Each exception that you throw should provide enough context to determine the source and location of the error.&lt;/strong&gt; Although you usually get a stack trace from any exception, a stack trace can't tell you the intent of the operation that failed.&lt;/p&gt;

&lt;p&gt;You should avoid passing null in the code whenever possible. And if you are tempted to return null from a method, consider throwing an exception. Set error handling as a separate concern, something that is viewable independently of our main logic.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;How to do this:&lt;/strong&gt; Create informative error messages and pass them along with your exceptions. Mention the operation that failed and the type of failure. Our most important concern should be how they are caught.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#9-on-classes" class="anchor"&gt;
  &lt;/a&gt;
  9. On classes
&lt;/h3&gt;

&lt;p&gt;Classes should be small, but rather than counting lines, we should count responsibilities. The names of classes are key to describe which responsibilities it fulfills. Our systems should be composed of many small classes, instead of a few large ones, where each small class encapsulates a single responsibility. Each class has a single reason to exist and collaborates with a few others to achieve the desired system behaviors.&lt;/p&gt;

&lt;p&gt;There is seldom a good reason to have a public variable. Loosening encapsulation is always a last resort and there should be a small number of instance variables at all. &lt;strong&gt;Good software designs accommodate change without huge investments and rework.&lt;/strong&gt; Narrowing the scopes of variables allows us to do this more easily.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;How to do this:&lt;/strong&gt; Separation of concerns is one of the oldest and most important design techniques in our craft. This is for a reason. Trust it. Classes should be open for extensions, but closed for modification. In an ideal system, we incorporate new features by extending the system, not by making modifications to existing code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#10-on-format" class="anchor"&gt;
  &lt;/a&gt;
  10. On format
&lt;/h3&gt;

&lt;p&gt;Each &lt;strong&gt;blank line&lt;/strong&gt; is a visual cue that identifies a new and separate concept. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Local variables&lt;/strong&gt; should appear at the top of the function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instance variables&lt;/strong&gt; should be declared at the top of the class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Short lines are preferred to long ones&lt;/strong&gt; — usually around 45 characters - 100-120 characters. After that, it's probably just careless.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;How to do this:&lt;/strong&gt; Most of these options can be passed to a linter in your CI or text editor. Take advantage of these tools to keep you code as clean as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#principles-of-software-development" class="anchor"&gt;
  &lt;/a&gt;
  Principles of software development
&lt;/h3&gt;

&lt;p&gt;In summary, follow these practices:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a) Naming variables:&lt;/strong&gt; Implicitly knowing where things are - and using approaches such as suitable naming — is crucial to keep the code readable and hence, maintainable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"You should name a variable using the same care with which you name a first-born child."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The hardest thing about choosing good names is that it requires good descriptive skills and a shared cultural background. Clean code is read and enhanced by any developer.&lt;/p&gt;

&lt;p&gt;The name of a variable, function, or class, should answer all the big questions: why it exists, what it does, and how it is used. If a name requires a comment, then the name does not reveal its intent as it should. Programmers must avoid leaving false clues that obscure the true meaning of the code.&lt;/p&gt;

&lt;p&gt;Longer names trumps shorter names, and any searchable name is better than a constant in the code base. Single-letter names can only be used as local variables inside short methods: the length of a name should correspond to the size of its scope. Methods should be verbs or verb phrases; a class name should not be a verb.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) Minimal dependencies:&lt;/strong&gt; We should avoid letting too much of our code know about the third-party particulars. It's better to depend on something you control than on something you can't control. If you do, it ends up controlling you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c) Tidiness:&lt;/strong&gt; A piece of code should be where you expect to find it. Code bases should be intuitive to navigate through; developer's intentions feel clear.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;d) Cleaning:&lt;/strong&gt; Don't litter your code with useless code scraps or lines of code that capture history or wishes of the future. Reduced duplication, high expressiveness and early building of simple abstractions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;e) Standardization:&lt;/strong&gt; Your code should keep a consistent coding style and set of practices across repositories.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;f) Self-discipline:&lt;/strong&gt; you frequently reflect on one's work and are willing to change and improve. However, you don't fall into the hype too fast. Study new stacks with depth and purpose.&lt;/p&gt;




&lt;p&gt;Truth is, keeping your code clean is key to maintaining innovation and organizations alive. As systems scale and grow, it is inevitable that old technology practices and hacks get left behind in the code. Keeping your code base clean is more than a nice gesture for other devs. It's a necessity for long-term survival. The cleaner your code, the happier the devs, the better the product, the longer it lasts. &lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>architecture</category>
      <category>testing</category>
      <category>career</category>
    </item>
    <item>
      <title>A React "if component"</title>
      <author>Stefan Judis</author>
      <pubDate>Mon, 25 Jan 2021 00:09:23 +0000</pubDate>
      <link>https://dev.to/stefanjudis/a-react-if-component-387e</link>
      <guid>https://dev.to/stefanjudis/a-react-if-component-387e</guid>
      <description>&lt;p&gt;After using Vue and Angular.js (I used the first version of Angular when it came out) for many years, I have to say that I always enjoyed the simplicity of using &lt;code&gt;v-if&lt;/code&gt; and &lt;code&gt;ng-if&lt;/code&gt; to render child components conditionally.&lt;/p&gt;

&lt;p&gt;Now I'm writing React primarily and honestly I'm bothered by the constant use of ternary operators when dealing with conditionally rendered components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Yes&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt; : null &lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's not a big deal, and there are many different ways to render boolean-dependent components, but I find myself writing code such as the above repeatedly. &lt;/p&gt;

&lt;p&gt;Today I read &lt;a href="https://blog.asayer.io/7-ways-of-achieving-conditional-rendering-in-react"&gt;7 Ways of Achieving Conditional Rendering in React&lt;/a&gt;, and it included a handy snippet that I'll adopt from now on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-conditional-raw-if-endraw-component" class="anchor"&gt;
  &lt;/a&gt;
  A conditional &lt;code&gt;if&lt;/code&gt; component
&lt;/h2&gt;

&lt;p&gt;I can't say that I didn't consider abstracting the ternary operators away, but somehow I never took it into practice. Fernando Doglio's article now moved me over the line to adopt a nicer pattern. Say hi to the functional &lt;code&gt;if&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;IF&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// render children if the condition is truthy&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Use the component as follows:
 *
 * &amp;lt;IF condition={condition}&amp;gt;
 *   &amp;lt;Greeter username={user.name} /&amp;gt;
 * &amp;lt;/IF&amp;gt;
 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's seven lines of code and this tiny component can be brought into any React project as handy utility. Much better! Thank you Fernando!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>My 2020 Annual Review: Strange Ride</title>
      <author>Piotr Murach</author>
      <pubDate>Sun, 24 Jan 2021 21:56:28 +0000</pubDate>
      <link>https://dev.to/piotrmurach/my-2020-annual-review-strange-ride-b25</link>
      <guid>https://dev.to/piotrmurach/my-2020-annual-review-strange-ride-b25</guid>
      <description>&lt;p&gt;For a few days I debated whether there is much point in writing this review. I had a lot of enthusiasm going into 2020 and couldn't wait to begin working on my ideas. But then this C letter thing happened, spelling the end for all of my best laid plans. I went from feeling what can best be described as an emoji face with starry eyes to looking like the Edvard Munch's screamer.&lt;/p&gt;

&lt;p&gt;Despite all the turmoil, there were many good events and experiences that had a positive influence on me and provided valuable insights worth sharing. Similar to the previous year, my process will be guided by the following questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What went well this year?&lt;/li&gt;
&lt;li&gt;What didn't go so well this year?&lt;/li&gt;
&lt;li&gt;What did I learn?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, grab your favourite beverage and make yourself comfortable. We're going to look through some of my personal highlights and disappointments. We will finish by trying to tease out some lessons and talk about my aspirations for the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-what-went-well-this-year" class="anchor"&gt;
  &lt;/a&gt;
  1. What went well this year?
&lt;/h2&gt;

&lt;p&gt;Here's how I turned these chaotic times into positive outputs:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open-sourcing software.&lt;/strong&gt; This was probably one of the most productive times I had in open source. Compared to previous years, I didn't publish as many new Ruby gems. Instead, my focus shifted to maintenance and improving the quality of what I already created.&lt;/p&gt;

&lt;p&gt;I resolved many outstanding issues. Without being exact, I think I've dealt with more than a hundred open tickets and pull requests. On top of that, I worked on many long requested features. As a result, there are many projects without any open issues now. An open source maintainer dream turning into reality.&lt;/p&gt;

&lt;p&gt;All this activity resulted in 56 Ruby gem releases. To my surprise, by the end of the year the total gem download count crossed the &lt;a href="https://rubygems.org/profiles/piotrmurach"&gt;150 million&lt;/a&gt; mark. A 50 million increase in one year alone feels crazy. Knowing that more and more people use my libraries motivates me.&lt;/p&gt;

&lt;p&gt;My main focus went to updating all of the TTY toolkit components. That's nearly 25 gems. Whilst doing the various updates, I couldn't resist creating new components. So in February, I released the &lt;a href="https://github.com/piotrmurach/tty-exit"&gt;tty-exit&lt;/a&gt; gem. This is a relatively small but essential gem that will fill a need in the TTY framework for more readable exit codes.&lt;/p&gt;

&lt;p&gt;In May, I published the &lt;a href="https://github.com/piotrmurach/tty-option"&gt;tty-option&lt;/a&gt; gem for parsing command line arguments, flags and environment variables. I put tons of work into the release. More than 300 commits made it into the first 0.1 version. This is probably the most solid first release I've ever done. It brings many powerful features like parsing map arguments which is a common way of specifying flag values in terminal tools like the Docker.&lt;/p&gt;

&lt;p&gt;Now that all of the TTY components are updated(as evidenced in the image below), the plan is to release a new version of the toolkit in 2021. I'm excited about the future and where the TTY ecosystem of gems is going to be!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TTfAnspT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m1hllvvmuvediqyqf85s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TTfAnspT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m1hllvvmuvediqyqf85s.jpg" alt="TTY Ruby gems and their dependency graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sponsorship.&lt;/strong&gt; GitHub made it super easy for individual developers and now companies to sponsor open source projects and their creators. This has a huge potential to make open source more sustainable. I'm grateful and feel fortunate to have gained a few new &lt;a href="https://github.com/sponsors/piotrmurach"&gt;sponsors&lt;/a&gt;. I appreciate their generosity and support!&lt;/p&gt;

&lt;p&gt;To me, the sponsorship is more than money, it's a real vote of confidence and shows approval that what I create matters. I'm humbled to learn that there are people wanting for the TTY and the newer Strings ecosystem of gems to succeed. I hope that companies will also contribute to supporting the future development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reading.&lt;/strong&gt; What do you do when there is nowhere to go? You stay home and read books! I read more than 50 books. Honestly, I haven't planned to read that many but they served as a great escape. The topics that I've picked were a true mixture. Sticking with the more technical theme of this review, a couple of books stood out for me the most.&lt;/p&gt;

&lt;p&gt;The first book that I enjoyed a lot is the Phoenix Project. A tale about DevOps that didn't disappoint and lived up to its hype. I never read a book that introduces technical concepts by telling a fictional story. Who could expect that telling a story is such a good concept, heh? Though the characters were made up, the story felt real and very believable. I could relate to many issues found in bridging the gap between IT services and the Development team. I'd even say that's where I spent most of my energy in the recent years. So yes, sometimes, the dialogues and problems really felt close to the bone.&lt;/p&gt;

&lt;p&gt;The Working in Public was also a very relatable book. Nadia Eghbal did a great job analysing the open source community and discussing the evolution of open source. I felt a bit like a lab rat in an experiment. It was a weird feeling being in a way analysed as part of an open source ecosystem. The quadrant diagram that explains four different ways that open source projects are structured was particularly novel and interesting. As I recall, I classified myself as the Stadium type open source developer. The book definitely grew my awareness and strengthened my thoughts around maintenance and long-term sustainability in open source.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coding.&lt;/strong&gt; Given the extra hours in the day, I dove into Crystal programming language. Even though Crystal is still below major release, I haven't had any issues with it. The experience felt rather smooth. The language has Ruby inspired syntax but you would be wrong to think that it doesn't offer much beyond that. Quite the contrary. Crystal is a compiled language and thus super fast. It also provides strong type guarantees that lead to features not present in Ruby. For example, you can overload method definitions. In most cases, the compiler doesn't force you to provide type signatures as the type inference is very good.&lt;/p&gt;

&lt;p&gt;At last, I also dipped my toes into a Lisp-like language. I chose to learn the Racket language. This experience certainly felt like a bigger departure than Crystal. Even though it is a dynamic language, it's hard to find parallels with any languages that I had a chance to code in so far. The syntax feels rather strange to type and look at in my editor. Writing an equivalent of a class is a journey into many nested methods in an ever growing forest of brackets. It is an aesthetic that I haven't had to deal with before. I like it though when a language stretches my coding skills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-what-didnt-go-so-well-this-year" class="anchor"&gt;
  &lt;/a&gt;
  2. What didn't go so well this year?
&lt;/h2&gt;

&lt;p&gt;Now let's look at some things from my “not so great” list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Blogging.&lt;/strong&gt; I started the year with an intention of publishing one article per month. This seemed like a reasonable goal given my workloads and past experience. But I managed to only write three articles which includes a yearly review.&lt;/p&gt;

&lt;p&gt;Out of the three articles, the "&lt;a href="https://dev.to/piotrmurach/writing-a-ruby-gem-specification-5e4g"&gt;Writing a Ruby Gem Specification&lt;/a&gt;" article attracted the most interest. It was featured in a prominent Ruby community newsletter Ruby Weekly underneath a biblical image with a prophetic feel to it. I got a chuckle out of it. Based on comments, emails and reviews a lot of people found the article useful. In the third and, as it turned out, the last article of 2020 titled "&lt;a href="https://dev.to/piotrmurach/looking-inside-a-ruby-gem-34id"&gt;Looking Inside a Ruby Gem&lt;/a&gt;&lt;a&gt;&lt;/a&gt;", I further built on the topic of explaining RubyGems packaging system.&lt;/p&gt;

&lt;p&gt;Then my enthusiasm waned. I lost momentum and found it hard to get back into writing again. I tried writing for a while on a few other topics but nothing felt solid enough or ready to be published. Maybe the weight of expectations that I put on myself gave me the famous writer's block? Not sure. Despite my meagre effort my blog readership has tripled. I want to turn the corner in 2021 and write more but without expectation of a regular publishing schedule. The bar is set very low indeed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Travel and conferences.&lt;/strong&gt; By the end of 2019, I made a grand plan to visit a few countries mostly in Europe. France, Finland, Russia and Japan were top of my list. I was excited! Well... as you probably expect the grand tour of Europe didn't happen. I visited only one country from the list, France. In the middle of February, I boarded the Eurostar train from London to Paris to attend the &lt;a href="https://2020.rubyparis.org/"&gt;ParisRB&lt;/a&gt;&lt;a&gt;&lt;/a&gt; conference. The first and only conference I attended in person that year. At that point I was still blissfully unaware.&lt;/p&gt;

&lt;p&gt;The ParisRB was a two day conference held in a university setting. I travelled on the crowded metro and trams to reach the venue which now feels surreal. The conference hosted many great speakers. In particular, Paolo "Nusco" Perrotta told a great origin story of what we now know as a deep learning domain. I was impressed with his presentation skills and the ability to draw in the audience. In another talk I liked a lot, a duet of Mélanie and Alexandre from the Doctolib company talked about challenges with onboarding new developers to a large codebase. I enjoyed hearing about how they structure their inhouse mentoring programs and automate workflows to keep their large codebase consistent.&lt;/p&gt;

&lt;p&gt;In between the presentations, I talked to many developers and had a chance to speak with some of the speakers. Being able to talk to like-minded people in real life is what I miss the most from the conference. Only now I realise what a privilege that was. The conference ended in quite an emotional way and a few people had tears as if they knew that this could be the last such conference in a long time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercising.&lt;/strong&gt; I continued going to the gym until the middle of March. I kept my gym membership for a few months longer expecting this whole pandemic will end soon and normal life resume. It shouldn't be a surprise that my general well being plummeted. I continued exercising at home, but lack of weights and a small space made it impossible to match my prior training routines.&lt;/p&gt;

&lt;p&gt;During the summer, I bought a basketball and started playing at a nearby court. Initially, I had little stamina and gassed out pretty quickly. I didn't give up though as basketball was always my number one sport. Playing has rekindled my passion and I even got to do a few dunks. In autumn, I bought some cycling gear and rode my bike regularly around woods and lakes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-what-did-i-learn" class="anchor"&gt;
  &lt;/a&gt;
  3. What did I learn?
&lt;/h2&gt;

&lt;p&gt;My monk-like living has made me realise and stressed the importance of some things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keep reaching out.&lt;/strong&gt; I can be a bit of hermit and I'm generally fine with minimal social interactions. This pandemic made me realise that more than ever it's important to keep frequently in touch with friends and loved ones. But it is equally key to seek out virtual opportunities to meet new people. In 2021 I want to engage more with the Ruby community via social media and other means.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cook your meals.&lt;/strong&gt; Self-isolation has made it clear to me that one cannot subsist for a very long time on porridge and fish and chips diet. If anything, eating the same thing every day gets boring. The nutritious value of my meals was also questionable. I developed a craving for soups. So with the help of my mum, I dedicated myself to learning how to cook a different soup every week. Every time, I cooked a big pot that lasted me a few days. Cooking is one of the survival skills that I view as essential to living a better quality of life. It can also save you a bit of money.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lower your standards.&lt;/strong&gt; Hear me out before you cast your look of disdain at me. I'm not suggesting you release crappy work. Far from it. This is to say that whatever you wish to do, whether it is writing a piece of code or a blog article, you need to let go of expectations and dive straight in. Leave perfection out the door. Don't worry about applying design patterns or figuring out domain models. Just write that piece of code and have fun. You can always come back and make things better. Once an initial version exists, you can improve the design and refactor messy code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Becomome more decisive.&lt;/strong&gt; I can be stuck in a perpetual circle of indecision. Debating, sometimes for days, whether I should go ahead and do something or not. Should I include this feature in a library? Should I write this article? Should I buy this? What's worse, I may never actually pull the trigger and instead let the decision sit there for weeks. I need to stop this and learn how to make quicker and better decisions. The guidance from basketball's greatest really resonates with me:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I always say, decisions I make, I live with them. There are always ways you can correct them or ways you can do them better. At the end of the day, I live with them." - LeBron James&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Execute on your ideas.&lt;/strong&gt; I have ideas. You have them. Everyone has them. Time passes and nothing happens. I research, think and procrastinate. The list of ideas I wish to tackle is constantly growing. The only way out is to start working on the stuff. Create a quick code spike. Write an article outline. Record a video intro. Whatever. Nothing will give you more clarity than a dose of action. My new motto comes from Thomas Edison who said "Vision without execution is hallucination.".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onwards-and-upwards" class="anchor"&gt;
  &lt;/a&gt;
  Onwards and upwards
&lt;/h2&gt;

&lt;p&gt;What a year it was! As I mentioned in my last review I'm not keen on setting goals. After 2020 that's probably even more true than ever. But this doesn't mean I don't have a vision for what I'd like 2021 to be like. I'd like to dedicate more time to help and encourage more people to write command line applications in Ruby. I want to build resources and a community of Ruby terminal applications enthusiasts.&lt;/p&gt;

&lt;p&gt;I have many thoughts around how this can be done. I will try to promote and highlight Ruby projects that are meant to be used in the terminal. I plan to increase my participation in other open source projects. I'd especially like to provide support for people using TTY components. I receive questions on how to use my various libraries and I feel I could be doing more to help. Making more code contributions to other projects, giving feedback or making suggestions for improvements are a few that come to mind.&lt;/p&gt;

&lt;p&gt;I think we can all agree that 2020 has been a strange ride, but one thing I've learned for sure is to embrace the uncertainty. Whatever comes my way I will do my best to turn it into a positive. Let's make 2021 a good one!&lt;/p&gt;




&lt;p&gt;Intro photo of all attendees at the end of the two-day ParisRB conference.&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>opensource</category>
      <category>productivity</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Shiny Glass Hover Effect (Glassmorphism)</title>
      <author>crayoncode</author>
      <pubDate>Sun, 24 Jan 2021 20:40:17 +0000</pubDate>
      <link>https://dev.to/crayoncode/shiny-glass-hover-effect-glassmorphism-17n7</link>
      <guid>https://dev.to/crayoncode/shiny-glass-hover-effect-glassmorphism-17n7</guid>
      <description>&lt;p&gt;Today let's work with the backdrop-filter property and a skewed ::before element, to create a nice shiny glass hover effect.&lt;/p&gt;

&lt;p&gt;Read the full article or watch me code this on Youtube (TL;DW):&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RbwhHvu1xlM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/crayon-code/embed/abmgooe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#first-things-first-background" class="anchor"&gt;
  &lt;/a&gt;
  First Things First - Background
&lt;/h2&gt;

&lt;p&gt;Let's start with the background by overlaying three different gradients. Each gradient is running from one color to transparent and by varying the angles they blend nicely into each other.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;322deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
      &lt;span class="mh"&gt;#ba4aff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;#ba4aff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;178deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="mh"&gt;#008aff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;#008aff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;24deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="mh"&gt;#00ffc6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;#00ffc6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;35%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#markup" class="anchor"&gt;
  &lt;/a&gt;
  Markup
&lt;/h2&gt;

&lt;p&gt;The markup consists of a container having a ruler producing the line in the middle and a container hosting the five icon buttons whereas each button contains an icon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"ruler"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-phone"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-images"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-envelope-open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-comment"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-music"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#basics-amp-ruler" class="anchor"&gt;
  &lt;/a&gt;
  Basics &amp;amp; Ruler
&lt;/h2&gt;

&lt;p&gt;Let's put a few variables, resets and center the whole thing in the viewport:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;--foreground-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The ruler is going to be put in the lower half of the viewport. By setting the top border to slight white the actual ruler is produced:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.ruler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.05&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-the-container" class="anchor"&gt;
  &lt;/a&gt;
  Setting up the container
&lt;/h2&gt;

&lt;p&gt;The most important thing about the container is the grid layout configuration, which consist implicitly of one single row - as no row config is given. The columns are configured such that each of them takes the same amount of space (&lt;code&gt;1fr&lt;/code&gt;) after the gap of &lt;code&gt;1.25rem&lt;/code&gt; has been taken into account.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="na"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="mi"&gt;.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#button-setup" class="anchor"&gt;
  &lt;/a&gt;
  Button Setup
&lt;/h2&gt;

&lt;p&gt;Let's first setup some variables allowing easy customization:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;--size&lt;/code&gt; variable controls how large each button appears. Since it's set to &lt;code&gt;6rem&lt;/code&gt; by default, it will also respond to the documents font size.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--transition-duration&lt;/code&gt; and &lt;code&gt;--transition-easing&lt;/code&gt; allow us to synchronously modify both hover transitions which we'll add later.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;...&lt;/span&gt;
  &lt;span class="nc"&gt;.icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;--transition-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500ms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;--transition-easing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ease-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The icon buttons configuration itself is quite straight forward. It has a quadratic shape whereas the content is centered horizontally as well as vertically. Additionally a slight border, a strongly blurred box shadow and a translucent white for background color are added. Note that the box shadow is calculated relatively to the size of the button. So whenever the button size changed, the box-shadow is scaled along with it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;...&lt;/span&gt;
  &lt;span class="nc"&gt;.icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// quadratic shape&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// center content horizontally&lt;/span&gt;
    &lt;span class="c1"&gt;// and vertically&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// apply text/font styling&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;foreground-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Add a slight border and a &lt;/span&gt;
    &lt;span class="c1"&gt;// strongly blurred box shadow&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
      &lt;span class="m"&gt;0px&lt;/span&gt; 
      &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#glassmorphism" class="anchor"&gt;
  &lt;/a&gt;
  Glassmorphism
&lt;/h2&gt;

&lt;p&gt;Now, if you came for this, this one-liner is all you need for the "classic" glassmorphism effect. This effect works best if there is a clear structure in the background which is why the ruler was added.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;...&lt;/span&gt;
  &lt;span class="nc"&gt;.icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Be aware that the &lt;code&gt;backdrop-filter&lt;/code&gt; property currently only works in webkit based browsers, so in Firefox you'll just see the translucent background, but not the blurred line of the ruler.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#shinyness" class="anchor"&gt;
  &lt;/a&gt;
  Shinyness
&lt;/h2&gt;

&lt;p&gt;To emphasize the glassy character of each button, let's add a shiny stripe which runs from bottom left to top right every time the button is hovered. So first we ensure that the button is optically lifted up a little bit. Therefore the &lt;code&gt;transform&lt;/code&gt; property is made transitionable and the button is lifted up by 25% of its size through the &lt;code&gt;translateY&lt;/code&gt; transformation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;...&lt;/span&gt;
  &lt;span class="nc"&gt;.icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; 
      &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;transition-duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;transition-easing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-25%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The shiny stripe is simply created by adding a &lt;code&gt;::before&lt;/code&gt; pseudo-element which has a slightly stronger white as background color and is skewed by 45 degrees. Especially the skewing makes a strong contribution to the effect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;...&lt;/span&gt;
  &lt;span class="nc"&gt;.icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;skew&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt; 
        &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;transition-duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;transition-easing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Initially the shiny stripe is positioned left outside the button and shifted to the very right each time the button is hovered. And that's already it. 😎&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;...&lt;/span&gt;
  &lt;span class="nc"&gt;.icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;...
    &amp;amp;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-125%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;      
      &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>css</category>
      <category>tutorial</category>
      <category>ui</category>
    </item>
    <item>
      <title>DNS Explained. Resolution</title>
      <author>Blake Khan</author>
      <pubDate>Sun, 24 Jan 2021 19:54:43 +0000</pubDate>
      <link>https://dev.to/blake/dns-explained-resolution-a2i</link>
      <guid>https://dev.to/blake/dns-explained-resolution-a2i</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This is an article in the &lt;em&gt;DNS Explained.&lt;/em&gt; series. Click &lt;a href="https://dev.to/blake/dns-explained-introduction-history-1an7"&gt;here&lt;/a&gt; to read the introduction post. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Resolution is the process of asking for the resource records of a fully-qualified domain name (FQDN) and receiving back an answer. Every time that your computer does not have an IP address cached for a required FQDN, a resolution takes place. In this post, I discuss the main components involved in DNS resolution and explain the two main methods in which resolution is performed.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#components" class="anchor"&gt;
  &lt;/a&gt;
  Components
&lt;/h1&gt;

&lt;p&gt;There are five main components that play a role in DNS resolution.&lt;/p&gt;

&lt;p&gt;The first component is the &lt;strong&gt;client&lt;/strong&gt;. This is the host that is asking the question, "Where is &lt;a href="http://www.netflix.com"&gt;www.netflix.com&lt;/a&gt; on the internet?"&lt;/p&gt;

&lt;p&gt;The second component is the &lt;strong&gt;DNS resolver&lt;/strong&gt;. Typically provided by your ISP, this serves as the first component that the client reaches out to if the answer to the DNS query is not cached by the client. Its role is to query the other components to find the answer to the original question. The way it does this depends on the type of DNS resolution being performed.&lt;/p&gt;

&lt;p&gt;Clients can configure their settings to use a DNS resolver not provided by their ISP. &lt;a href="https://developers.google.com/speed/public-dns"&gt;Google&lt;/a&gt;, &lt;a href="https://one.one.one.one/"&gt;Cloudflare&lt;/a&gt;, &lt;a href="https://www.verisign.com/en_US/security-services/public-dns/index.xhtml"&gt;Verisign&lt;/a&gt;, and &lt;a href="https://www.opendns.com/"&gt;Cisco&lt;/a&gt; are just a handful of companies that offer free-alternative DNS resolvers. Be aware of which resolver you choose though! Every site you visit will likely send a DNS query which is handled by your chosen DNS resolver. This gives that resolver an ability to see what you request and may sell this data to advertisers. Always read the policies of DNS resolvers that you are considering to use.&lt;/p&gt;

&lt;p&gt;The third component is the &lt;strong&gt;DNS Root Zone&lt;/strong&gt;, which is questioned if the DNS resolver does not have the answer in cache. Its role is to return the nameservers for the requested TLD. There are 13 root servers in the world operated by 12 organizations. These servers are anycasted and I go into more detail about them in my &lt;a href="https://dev.to/blake/dns-explained-hierarchy-and-architecture-18pj"&gt;DNS Architecture&lt;/a&gt; post.&lt;/p&gt;

&lt;p&gt;The fourth component is the &lt;strong&gt;TLD's Nameservers&lt;/strong&gt;. Its role is to return the authoritative nameservers of the requested second-level domain.&lt;/p&gt;

&lt;p&gt;Finally, the fifth component is the &lt;strong&gt;Authoritative Nameservers&lt;/strong&gt;. These servers are the responsibility of the registrant to provide, and their role is to return the resource record for the requested third-level domain (or apex domain).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#iterative-resolution" class="anchor"&gt;
  &lt;/a&gt;
  Iterative Resolution
&lt;/h1&gt;

&lt;p&gt;There are two types of resolution, the first is iterative. In an iterative resolution, it is the responsibility of the DNS resolver to keep querying nameservers until it gets an answer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5KgHsEBp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DpK9H6o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5KgHsEBp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DpK9H6o.png" alt="A flowchart describing iterative resolution."&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let's go through each step in more detail.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client sends an iterative DNS query for &lt;code&gt;www.blakes.site.&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The DNS resolver receives this query. If it doesn't have an answer for this query already cached, it will continue by asking a root server where the nameservers for &lt;code&gt;.site&lt;/code&gt; are. If it is cached, the answer will be returned here and the process will terminate. Sidenote: The DNS resolver could also store cache entries for the &lt;code&gt;.site&lt;/code&gt; TLD nameservers and the &lt;code&gt;blakes.site&lt;/code&gt; authoritative nameservers and skip the appropriate steps.&lt;/li&gt;
&lt;li&gt;The root server returns the IP addresses for the &lt;code&gt;.site&lt;/code&gt; nameservers. It also can cache the &lt;code&gt;.site&lt;/code&gt; nameservers for future usage.&lt;/li&gt;
&lt;li&gt;The DNS resolver now has to ask the &lt;code&gt;.site&lt;/code&gt; TLD nameservers for the IP addresses of the &lt;code&gt;blakes.site&lt;/code&gt; authoritative nameservers. It also can cache the &lt;code&gt;.site&lt;/code&gt; nameservers for future usage.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;.site&lt;/code&gt; TLD nameservers return the IP addresses for the &lt;code&gt;blakes.site&lt;/code&gt; authoritative nameservers. The DNS resolver can cache the &lt;code&gt;blakes.site&lt;/code&gt; authoritative nameservers for future usage.&lt;/li&gt;
&lt;li&gt;The DNS resolver asks the &lt;code&gt;blakes.site&lt;/code&gt; authoritative nameservers for the resource records for the entry &lt;code&gt;www&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;blakes.site&lt;/code&gt; authoritative nameservers return the resource records for the entry &lt;code&gt;www&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The DNS resolver caches the response and returns it back to the client.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#recursive-resolution" class="anchor"&gt;
  &lt;/a&gt;
  Recursive Resolution
&lt;/h1&gt;

&lt;p&gt;The alternative to iterative resolution is recursive resolution. Instead of an address to the next nameserver being sent back to the DNS resolver to then query, the nameserver makes the request itself and returns the result all the way back up to the DNS resolver.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eshz2rh_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KNpCaLc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eshz2rh_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KNpCaLc.png" alt="A flowchart describing recursive resolution."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's also go through this resolution step-by-step.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client sends a recursive DNS query for &lt;code&gt;www.blakes.site.&lt;/code&gt;. Nothing new.&lt;/li&gt;
&lt;li&gt;The DNS resolver receives this query. If it doesn't have an answer for this query already cached, it will continue by asking a root server for the answer to &lt;code&gt;www.blakes.site.&lt;/code&gt;. If it is cached, the answer will be returned here and the process will terminate.&lt;/li&gt;
&lt;li&gt;If the root server did not have an answer cached, then it asks the next component that could have an answer: the TLD nameservers. The root servers can also cache the TLD nameservers for the requested domain for future use.&lt;/li&gt;
&lt;li&gt;If the TLD nameservers did not have an answer cached, then it asks the next component that could have an answer: the authoritative nameservers. The TLD nameservers can also cache the authoritative nameservers for the requested domain for future use.&lt;/li&gt;
&lt;li&gt;The authoritative nameservers find an answer for &lt;code&gt;www.blakes.site.&lt;/code&gt; and pass the answer up back to the TLD nameservers.&lt;/li&gt;
&lt;li&gt;The TLD nameservers pass the answer back up to the root server.&lt;/li&gt;
&lt;li&gt;The root server passes the answer back to the DNS resolver.&lt;/li&gt;
&lt;li&gt;The DNS resolver caches and passes the answer back to the client.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is caching at each component, so it is possible that only a partial resolution has to take place for a query. If the requested FQDN is popular and the DNS resolver is being used by a lot of people, then it is completely possible that the root servers are never contacted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recursive-resolution-proscons" class="anchor"&gt;
  &lt;/a&gt;
  Recursive Resolution: Pros/Cons
&lt;/h2&gt;

&lt;p&gt;In general, recursive resolution tends to be faster than its iterative counterpart due to caching of final answers. However, this type of resolution creates security flaws including &lt;a href="https://www.cloudflare.com/learning/dns/dns-cache-poisoning/"&gt;cache poisoning&lt;/a&gt; and &lt;a href="https://www.cloudflare.com/learning/ddos/dns-amplification-ddos-attack/"&gt;DNS amplification attacks&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responsibility-recursive-vs-iterative" class="anchor"&gt;
  &lt;/a&gt;
  Responsibility: Recursive vs Iterative
&lt;/h2&gt;

&lt;p&gt;In recursive resolution, the burden of having to contact nameservers belongs to the server. On the flip side, for iterative resolution, the burden of contacting nameservers belongs to the client.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dns-resolver-observation" class="anchor"&gt;
  &lt;/a&gt;
  DNS Resolver Observation
&lt;/h2&gt;

&lt;p&gt;It should be noted that for both recursive and iterative resolution, it is required that the DNS resolver already know the IP addresses of the 13 root servers. Implementation wise, these addresses are simply hardcoded and &lt;a href="https://root-servers.org/"&gt;publicly available&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>dns</category>
      <category>networking</category>
      <category>domains</category>
      <category>internet</category>
    </item>
    <item>
      <title>Creating a microblog using Vue + Supabase</title>
      <author>Ademílson F. Tonato</author>
      <pubDate>Sun, 24 Jan 2021 19:39:18 +0000</pubDate>
      <link>https://dev.to/ftonato/creating-a-microblog-using-vue-supabase-31p</link>
      <guid>https://dev.to/ftonato/creating-a-microblog-using-vue-supabase-31p</guid>
      <description>&lt;p&gt;At the beginning of the year, I was reading some articles about new tools in the &lt;em&gt;frontend&lt;/em&gt; world, when I came across &lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt;. I confess that my first thought was "more of the same", and this thought remained until I found this article: &lt;a href="https://techcrunch.com/2020/12/15/supabase-raises-6m-for-its-open-source-firebase-alternative/?guccounter=1"&gt;Supabase raises $6M for its open-source Firebase alternative&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After reading the article, the thought became, "If Mozilla is investing in this project, it is because they realized how promising it could become!". It was then that I decided to read the documentation and try to explore a little more.&lt;/p&gt;

&lt;p&gt;Supabase is an open-source Firebase alternative for those who don't know. It includes support for PostgreSQL databases and authentication tools, with storage and serverless solution coming soon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to adventure into something new using the knowledge I already have?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It was my thought when I decided to explore, and my idea was to create a microblog using &lt;a href="https://vuejs.org/"&gt;&lt;em&gt;Vue&lt;/em&gt;&lt;/a&gt; + &lt;a href="https://supabase.io/"&gt;&lt;em&gt;Supabase&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-start" class="anchor"&gt;
  &lt;/a&gt;
  How to start?
&lt;/h2&gt;

&lt;p&gt;First, I created a new project using &lt;a href="https://cli.vuejs.org/guide/creating-a-project.html"&gt;Vue CLI&lt;/a&gt;, included &lt;a href="https://router.vuejs.org/installation.html"&gt;Vue Router&lt;/a&gt; to manage the routes of the application and &lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt; to add some basic style to the blog without wasting a lot of time. At the end of it, my directory structure was this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2G9Ey8h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cktt8ws8rplb5vhhgjpo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2G9Ey8h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cktt8ws8rplb5vhhgjpo.png" alt="Initial directory structure" title="Initial directory structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I will stick to explaining the technology integration part (Vue + Supabase) and ignoring the reasons for having created an architecture that way or about different approaches to doing the same thing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#configuring-the-database" class="anchor"&gt;
  &lt;/a&gt;
  Configuring the database
&lt;/h2&gt;

&lt;p&gt;After accessing the &lt;a href="https://app.supabase.io/"&gt;Supabase dashboard&lt;/a&gt;, which I had previously explored, I followed the guide it presents and created &lt;strong&gt;my organization&lt;/strong&gt; and &lt;strong&gt;my project&lt;/strong&gt;. I named them, respectively, as &lt;code&gt;supabase-test&lt;/code&gt; and &lt;code&gt;supabase-vue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Followed by the creation of both, we're able to connect between the project and our application. Still, I decided to create my table, called &lt;code&gt;posts&lt;/code&gt;, and add some fictional data to have information to consume in addition to the columns.&lt;/p&gt;

&lt;p&gt;As you can see in the image below, the interface is friendly. Allowing us to browse the sidebar quickly, see what organization and project we are in (this information is present in the top left of the &lt;em&gt;dashboard&lt;/em&gt;), and mainly configure our table or insert, edit, or even delete records in a straightforward way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CoXbG1zp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eyizwmgj2mu6ootzam4h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CoXbG1zp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eyizwmgj2mu6ootzam4h.png" alt="Viewing my posts table" title="Viewing my posts table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structuring-the-responsibility-of-the-components" class="anchor"&gt;
  &lt;/a&gt;
  Structuring the responsibility of the components
&lt;/h2&gt;

&lt;p&gt;As I mentioned above, I used &lt;em&gt;TailwindCSS&lt;/em&gt; to add basic styles and avoid wasting time. My purpose was to test the interaction between technologies and not build something so beautiful.&lt;/p&gt;

&lt;p&gt;In the image of our structure, it was possible to see some files and components. We will detail the responsibility of each one of them:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Directory &lt;code&gt;src/components&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Footer.vue&lt;/code&gt; - It is the global &lt;em&gt;footer&lt;/em&gt; of our application. It will present my name, two icons with links to my social networks, and a simple copyright text.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Header.vue&lt;/code&gt; - It is the global &lt;em&gt;header&lt;/em&gt; of our application. It will present the project name, and on the home page, it will display a container with the blog title.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;List.vue&lt;/code&gt; - This component is the application's initial route, called &lt;code&gt;posts-list&lt;/code&gt;. It is responsible for searching the information in our database and making a &lt;em&gt;loop&lt;/em&gt; of the &lt;code&gt;ListItem&lt;/code&gt; component.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ListItem.vue&lt;/code&gt; - It is responsible for presenting three pieces of information, referring to each publication. They are: Title, description, and a button that will take us to the publication page.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Post.vue&lt;/code&gt; - The second route of our application, named &lt;code&gt;post-item&lt;/code&gt;, is the one that presents the complete information of each publication.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;App.vue&lt;/code&gt; - It is the component responsible for calling the other components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Directory &lt;code&gt;src/*&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;main.js&lt;/code&gt; - The default file, suggested by &lt;em&gt;Vue&lt;/em&gt;, to start our application.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;router.js&lt;/code&gt; - The route file presents the basic settings for our two routes and a fallback so that any invalid &lt;em&gt;URL&lt;/em&gt; redirects to the main route.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was the essential list with the responsibilities of each file. Let's see how it turned out in practice?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k1tYX_9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mes2dpmxge3loih4c4qz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k1tYX_9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mes2dpmxge3loih4c4qz.jpeg" alt="Viewing the rendered component list" title="Viewing the rendered component list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-dependencies-and-configuring-the-applications-connection-to-the-database" class="anchor"&gt;
  &lt;/a&gt;
  Installing dependencies and configuring the application's connection to the database
&lt;/h2&gt;

&lt;p&gt;The first thing to do is install the dependency. As we are in a project that uses &lt;em&gt;JavaScript&lt;/em&gt;, we will use an isomorphic library for the connection between our database and the project maintained by the &lt;em&gt;Supabase&lt;/em&gt; team, called &lt;a href="https://github.com/supabase/supabase-js"&gt;supabase-js&lt;/a&gt; and which offers a very simple and straightforward &lt;a href="https://supabase.io/docs/client/supabase-client"&gt;documentation&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @supabase/supabase-js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Installation completed. It's time to import the library and call a method, passing the data from our database (&lt;em&gt;URL&lt;/em&gt; and &lt;em&gt;KEY&lt;/em&gt;) and we will have immediate access.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@supabase/supabase-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create a single supabase client for interacting with your database&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://xyzcompany.supabase.co&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public-anon-key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I decided to do this in the simplest way possible¹, I created a file called &lt;code&gt;/src/Database.service.js&lt;/code&gt; with the following code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Important note:&lt;/strong&gt; I know this &lt;em&gt;service&lt;/em&gt; could be a &lt;em&gt;singleton&lt;/em&gt; to avoid problems, but, as I said above, the idea is to explore more about the integration between technologies.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@supabase/supabase-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DatabaseService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SUPABASE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SUPABASE_SECRET_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-the-connection-and-fetching-all-posts" class="anchor"&gt;
  &lt;/a&gt;
  Using the connection and fetching all posts
&lt;/h2&gt;

&lt;p&gt;With our file that initializes the connection configured, use the database instance and create a method to fetch the posts.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;List.vue&lt;/code&gt; file will be responsible for searching the data and passing the information of each &lt;em&gt;publication&lt;/em&gt; to the &lt;code&gt;ListItem.vue&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;px-2 pt-16 pb-6 bg-white md:px-0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container items-center max-w-6xl px-8 mx-auto xl:px-5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(post, index) in posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;`post-${index}`&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post.id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post.title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post.description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ListItem&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./ListItem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DatabaseService&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../Database.service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;List&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ListItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DatabaseService&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchPosts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;fetchPosts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;setPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In summary, the component above, during its creation, calls our &lt;em&gt;service&lt;/em&gt;, which opens the connection to the database, while in the &lt;code&gt;mounted&lt;/code&gt; we call the &lt;code&gt;fetchPosts&lt;/code&gt; method, responsible for fetching all data from the table &lt;em&gt;posts&lt;/em&gt; ordered by &lt;em&gt;id&lt;/em&gt; (order: ASC).&lt;/p&gt;

&lt;p&gt;After fetching the data, we add it to the &lt;em&gt;posts&lt;/em&gt; array. Our DOM will react to the change in the viable one and iterate over it, passing the correct information to each &lt;code&gt;ListItem&lt;/code&gt; component.&lt;/p&gt;




&lt;p&gt;At the same time, our &lt;code&gt;ListItem.vue&lt;/code&gt; component, responsible for rendering each of the publications on our list, follows this structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex flex-wrap items-center sm:-mx-3 mt-12&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;w-full&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;w-full pb-6 space-y-6 lg:space-y-8 xl:space-y-9 sm:pr-5 lg:pr-0 md:pb-0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;
          &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-4xl font-extrabold tracking-tight text-gray-900 sm:text-5xl md:text-4xl lg:text-5xl xl:text-4xl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block xl:inline&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;
          &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mx-auto text-base text-gray-500 sm:max-w-md lg:text-xl md:max-w-full&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;getShortDescription&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;relative flex flex-col sm:flex-row sm:space-x-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;
            &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{ name: 'post-item', params: { title, description } }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex items-center w-full px-6 py-3 mb-3 text-lg text-white bg-indigo-600 rounded-md sm:mb-0 hover:bg-indigo-700 sm:w-auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Read&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;
              &lt;span class="nx"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://www.w3.org/2000/svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;w-5 h-5 ml-1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 24 24&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currentColor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;linecap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;linejoin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="nx"&gt;x1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;y1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;12&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;x2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;19&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;y2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;12&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;polyline&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;12 5 19 12 12 19&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svg&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/router-link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ListItem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getShortDescription&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;...`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first important thing to note is that we receive two parameters: &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt;, these are the data that were previously sent for each &lt;em&gt;post&lt;/em&gt;, and will be rendered as follows (as we have already seen in the previous image).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Z7wCrue--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n78edo2tb8webcgwiog3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Z7wCrue--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n78edo2tb8webcgwiog3.png" alt="One of the items in the list of publications displayed on the first page of the application" title="One of the items in the list of publications displayed on the first page of the application"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Another detail that we must take into account is the link of the button &lt;strong&gt;Read the article&lt;/strong&gt;, which uses the component &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; provided by &lt;em&gt;Vue Router&lt;/em&gt; and which allows us to direct the user to the route called &lt;code&gt;post-item&lt;/code&gt;, also sending two parameters: &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The route called &lt;code&gt;post-item&lt;/code&gt;, will load the component &lt;code&gt;Post.vue&lt;/code&gt;, showing the received parameters (&lt;em&gt;title&lt;/em&gt; and &lt;em&gt;description&lt;/em&gt;). Let's look at the code and the visual result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
    &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex items-center justify-center py-10 text-white bg-white sm:py-16 md:py-24 lg:py-32&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;relative max-w-3xl px-10 text-center text-white auto lg:px-0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex flex-col w-full md:flex-row&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex justify-between&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;relative flex flex-col text-6xl font-extrabold text-left text-black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;$route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-16 border-b border-gray-300 lg:my-24&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;
        &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-left text-gray-500 xl:text-xl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;$route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DB_moleg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k61d7r2x00d48d0ud5ai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DB_moleg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k61d7r2x00d48d0ud5ai.png" alt="Publication preview page" title="Publication preview page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So far, everything has been relatively simple and useful for the proposed experiment.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;What is the final result of our application visually?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bX78mvst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l1faw4e0l9cve67nzd34.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bX78mvst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l1faw4e0l9cve67nzd34.gif" alt="Navigability of the microblog" title="Navigability of the microblog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions-and-the-future" class="anchor"&gt;
  &lt;/a&gt;
  Conclusions and the future
&lt;/h2&gt;

&lt;p&gt;Although our application has been entirely experimental and we have not explored all the features of &lt;em&gt;Supabase&lt;/em&gt;. It is possible to notice enormous ease, both in &lt;em&gt;Supabase's dashboard&lt;/em&gt; and in the interaction between the application and the database.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Supabase&lt;/em&gt; is quite recent, but it looks extremely promising. It currently offers the possibility of creating a backend in less than 2 minutes with &lt;em&gt;Postgres Database&lt;/em&gt;, &lt;em&gt;Authentication&lt;/em&gt;, &lt;em&gt;instant APIs&lt;/em&gt;, and &lt;em&gt;realtime subscriptions&lt;/em&gt;. Soon it will still give us &lt;em&gt;Storage and serverless functions&lt;/em&gt;, therefore, keep your eyes and ears open for news about this project.&lt;/p&gt;

&lt;p&gt;If you are interested in the source code of the project we created, go to the &lt;a href="https://github.com/ftonato/vue-supabase-microblog"&gt;project directory on GitHub&lt;/a&gt; and implement even more exciting things, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Realtime Subscriptions&lt;/strong&gt; - To show a new publication whenever it is inserted in the database.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Admin panel&lt;/strong&gt; - An area reserved for the blog administrator to insert, edit or delete publications using the &lt;em&gt;Authentication&lt;/em&gt; functionality.&lt;/li&gt;
&lt;li&gt;Pagination of publications on our main page.&lt;/li&gt;
&lt;li&gt;Etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In summary, there is a multitude of things that can be done. Let your imagination guide you and when you are finished, share with us &amp;lt;3&lt;/p&gt;

&lt;p&gt;If you have any question, do not hesitate to contact me (&lt;em&gt;&lt;a href="mailto:ademilsonft@outlook.com"&gt;ademilsonft@outlook.com&lt;/a&gt;&lt;/em&gt; / &lt;a href="https://twitter.com/ftonato"&gt;@ftonato&lt;/a&gt;) or the &lt;a href="https://supabase.io/docs/support"&gt;Supabase team&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>webdev</category>
      <category>tailwindcss</category>
    </item>
  </channel>
</rss>
