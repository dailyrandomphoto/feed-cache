<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is a desktop wallet? Introducing the best desktop wallet digital currency wallet</title>
      <author>giovani</author>
      <pubDate>Fri, 10 Sep 2021 13:28:07 +0000</pubDate>
      <link>https://dev.to/giovanidev/what-is-a-desktop-wallet-introducing-the-best-desktop-wallet-digital-currency-wallet-463f</link>
      <guid>https://dev.to/giovanidev/what-is-a-desktop-wallet-introducing-the-best-desktop-wallet-digital-currency-wallet-463f</guid>
      <description>&lt;p&gt;One of the main concerns of users of digital currencies is the secure storage of their cryptographic assets. Digital Currency Wallet has been developed for this purpose and within a few years, different types of it were introduced to the cryptocurrency market, each of which has its own features and capabilities. One of these wallets is the desktop wallet, which has gained a lot of popularity among digital currency users due to its numerous capabilities and easy and fast access. In the following, we will review the features of this wallet and introduce some popular desktop wallets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-digital-currency-wallet"&gt;
  &lt;/a&gt;
  What is a digital currency wallet?
&lt;/h2&gt;

&lt;p&gt;Digital Currency Wallet or Wallet A digital currency is a software or hardware program for storing digital currency assets. A list of all user transactions is also stored on these platforms. Each wallet has an identification code called a public key. Cryptocurrency users can receive and send passwords to others through the public keys of their wallets. Digital wallets also have a private key, which is a password for users to wallets (such as a bank card password) and is very important to maintain. Some digital currency wallets also allow users to exchange passwords within the system without the need for exchanges. It should be noted that performing all digital currency transactions within these platforms requires payment of a fee. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qyg_iqvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6agavke34e2y5pfiujn3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qyg_iqvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6agavke34e2y5pfiujn3.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-digital-currency-wallets"&gt;
  &lt;/a&gt;
  Types of Digital Currency Wallets
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-hot-wallets"&gt;
  &lt;/a&gt;
  1. Hot wallets:
&lt;/h3&gt;

&lt;p&gt;These wallets store users' assets and information online. Some of these wallets also allow for offline storage. Online Wallet (Desktop) Desktop Wallet Mobile Wallet&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-cold-wallets"&gt;
  &lt;/a&gt;
  2. Cold Wallets:
&lt;/h3&gt;

&lt;p&gt;Cold wallets carry users' assets and information offline without an internet connection. Hardware Wallet Paper Wallet &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-digital-currency-desktop-wallet"&gt;
  &lt;/a&gt;
  What is a digital currency desktop wallet?
&lt;/h2&gt;

&lt;p&gt;The desktop wallet is installed on users' personal computers and works with the help of the Internet. This wallet is in the category of hot wallets or online cryptocurrencies and stores users' assets and information online. Many desktop wallets now also support mobile operating systems. These platforms are highly secure but can be hacked just like any other internet system because they are low-end or online. Also, if a hacker accesses your computer or mobile phone, he can also access your wallet. But you should note that the developers of these wallets have developed several security algorithms to protect users' information and assets, and access to these systems will not be easy and fast. Desktop wallet is a fast and easy way to store digital assets that provides many features for users and has been able to find many fans among activists in this field. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eDnOAgQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhd1p2ig7er9yow8ry6n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eDnOAgQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhd1p2ig7er9yow8ry6n.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-benefits-of-a-desktop-wallet"&gt;
  &lt;/a&gt;
  What are the benefits of a desktop wallet?
&lt;/h3&gt;

&lt;p&gt;Quick and easy access Quick and better review of transaction records High speed when making transfers Advanced security system (data encryption) Numerous and advanced features and services Reduce transaction costs despite the ability to exchange within the system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-disadvantages-of-a-desktop-wallet"&gt;
  &lt;/a&gt;
  What are the disadvantages of a desktop wallet?
&lt;/h3&gt;

&lt;p&gt;If the user's computer is hacked, it is also possible to access the desktop wallet. Like all Internet systems, it can be hacked. Online storage of private keys causes security problems. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-10-popular-desktop-wallets"&gt;
  &lt;/a&gt;
  Top 10 Popular Desktop Wallets.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-jax-wallet"&gt;
  &lt;/a&gt;
  1. Jax Wallet
&lt;/h3&gt;

&lt;p&gt;The Jaxx Desktop Wallet was launched in 2014 by a Canadian blockchain company called Decentral, and after a major update in 2018, it was renamed Jaxx Liberty. changed. It is a multi-currency wallet and supports a large number of Altcoins and has a very simple and user-friendly interface that even newcomers to the crypto market can easily use.&lt;br&gt;
 Waltax runs on all Windows, Linux and Macintosh systems, as well as Android and iOS mobile systems. Another feature of this wallet is the existence of an internal exchange called Shapeshift, which allows users to exchange passwords without transferring assets to another platform. Jacks Wallet has now released a beta version that is in trial and error. This version has major user changes compared to the previous version. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZFiS0YW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eo0yd4egfpwa96xs1u1m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZFiS0YW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eo0yd4egfpwa96xs1u1m.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Strengths: Runs on Windows, Linux and Macintosh runs on Android and iOS systems Internal exchange design and simple user interface Support for about 100 different coins and tokens Support for Seed feature and Backup support PIN capability for protection Most of the assets Support for Segwit technology Ability to set the desired amount of privacy &lt;br&gt;
Weaknesses: Lack of support for two-stage hacking history in 2017 (Walt was one of the hacked Jacks users) Very low speed when using Walt on Mobile &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2copy-wallet"&gt;
  &lt;/a&gt;
  2.Copy Wallet
&lt;/h3&gt;

&lt;p&gt;Copay Wallet is an open source platform launched in 2015 by BitPay (the first Bitcoin payment company). In 2016, the wallet recorded a record 200,000 transactions per month. Wallet Copy supports Bitcoin, LightCoin, BitcoinCash, Ripple and Atrium. This platform can be run on Windows, Linux and Macintosh operating systems, it can also be run on mobile phones. Both the mobile and PC versions of Copay have a simple and user-friendly interface.&lt;br&gt;
The copy wallet has the ability to connect to the TestNet system so that users can test their strategy and ideas without losing their assets. This platform is Light Node and uses SPV system which means simple payment verification. These systems do not use the original cryptocurrency blocker to authenticate transactions, and the copy uses a bitcoin network for this process.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k9GcEH7A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3toiouk5dl0knj4ahmw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k9GcEH7A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3toiouk5dl0knj4ahmw.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Strengths:&lt;br&gt;
Multi-user&lt;br&gt;
Runs on Windows, Linux and Macintosh systems&lt;br&gt;
Runs on Android and IOS systems&lt;br&gt;
Support for multi-signature capability&lt;br&gt;
Being user friendly&lt;br&gt;
TestNet support&lt;br&gt;
Encrypted private key storage&lt;br&gt;
Support for Bitcoin Payment Protocol (BIP)&lt;br&gt;
Seed feature support and backup capability&lt;br&gt;
Ability to set the fee to the desired amount&lt;br&gt;
Being free&lt;br&gt;
weak points:&lt;br&gt;
Lack of support for various cryptocurrencies&lt;br&gt;
Lack of support for 2-step authentication&lt;br&gt;
Lack of support for Segwit technology&lt;br&gt;
Some believe that LightNode platforms have low security.&lt;br&gt;
low speed&lt;br&gt;
Poor support service&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-electrome-wallet"&gt;
  &lt;/a&gt;
  3. Electrome wallet
&lt;/h3&gt;

&lt;p&gt;The Electrom desktop wallet has been around since 2011 and is one of the oldest cryptocurrencies. The antiquity of this platform shows that it has passed the proud security tests and has been able to gain a good reputation and position in the cryptocurrency market. Electrom Wallet is the official bitcoin wallet, which is said to have cloned versions of LightCash and Dash.&lt;/p&gt;

&lt;p&gt;Electrum is an open source system where all its protocols are visible to users. This wallet does not store users' information and private keys on any server, which ensures the high security of Electrom.&lt;/p&gt;

&lt;p&gt;Electrum is a lightweight wallet and you do not need to download the entire blockchain to use it. Although this wallet has a simple appearance and is easy to set up, it does not have a very simple user interface; But it can be made easier to use with customization options. The ability to synchronize Electrom with hardware wallets is another special feature of this wallet.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lIfbdqvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dv5zjt9l6ufavdo8ea5o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lIfbdqvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dv5zjt9l6ufavdo8ea5o.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Strengths:&lt;br&gt;
Runs on Windows, Linux and Macintosh systems&lt;br&gt;
Runs on Android and IOS systems&lt;br&gt;
Seed feature support and backup capability&lt;br&gt;
Support for PIN capability to further protect assets&lt;br&gt;
Support for Segwit technology&lt;br&gt;
Two-step verification capability&lt;br&gt;
Very high security&lt;br&gt;
Low commissions with the possibility of determining the desired amount&lt;br&gt;
Privacy&lt;br&gt;
Easy to download and install&lt;br&gt;
High speed&lt;br&gt;
Personalization options&lt;br&gt;
Being free&lt;br&gt;
weak points:&lt;br&gt;
Lack of support for multiple ciphers&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-coinomi-wallet"&gt;
  &lt;/a&gt;
  4. coinomi wallet
&lt;/h3&gt;

&lt;p&gt;coinomi Wallet was originally a mobile digital currency wallet, and then its developers decided to launch a desktop version. Coinomi Desktop is currently one of the most popular cryptocurrencies running on Windows, Linux and Macintosh operating systems. More than 400 different coins and tokens are supported on this platform and its user interface is very simple and attractive. In coinomi, private keys are stored offline.&lt;/p&gt;

&lt;p&gt;coinomi Desktop Wallet allows transactions for users within the system (within the wallet). Note, however, that due to access restrictions for Iranian IPs, using this feature from within the country is not possible and requires an IP change.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d-rM4FJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpxdfdksehivemel64ni.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d-rM4FJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpxdfdksehivemel64ni.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Strengths:&lt;br&gt;
Runs on Windows, Linux and Macintosh systems&lt;br&gt;
Runs on Android and IOS systems&lt;br&gt;
Supports hundreds of ciphers&lt;br&gt;
Very simple user interface&lt;br&gt;
Two-step verification capability&lt;br&gt;
Offline storage of private keys&lt;br&gt;
Ability for internal exchanges&lt;br&gt;
Being free&lt;br&gt;
Strong support&lt;br&gt;
weak points:&lt;br&gt;
Reports of security vulnerabilities&lt;br&gt;
Specify 24 words to retrieve&lt;br&gt;
Not open text&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-exodus-wallet"&gt;
  &lt;/a&gt;
  5. Exodus wallet
&lt;/h3&gt;

&lt;p&gt;This wallet was launched for desktop in 2016 and does not work on other systems such as mobile phones. Exodus supports about 50 different coins and tokens and has all the listed coins in its list. The user interface of this platform is very simple, smooth and user-friendly. Users' private keys are stored in their personal system when using this wallet, which can ensure the security of their assets to some extent.&lt;/p&gt;

&lt;p&gt;Exodus desktop wallet also provides Ramzarz internal exchanges for its users. Note that Iran's IP is on the blacklist of this platform and to use Exodus wallet from inside the country, IP‌ needs to be changed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jUw0w2yz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xel4025aivxoa1527w2p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jUw0w2yz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xel4025aivxoa1527w2p.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Strengths:&lt;br&gt;
Runs on Windows, Linux and Macintosh systems&lt;br&gt;
Seed feature support and backup capability&lt;br&gt;
Very simple user interface&lt;br&gt;
Ability for internal exchanges&lt;br&gt;
Save private key on user system&lt;br&gt;
weak points:&lt;br&gt;
Relatively high fees&lt;br&gt;
Reports of security vulnerabilities&lt;br&gt;
Incompatibility with mobile&lt;br&gt;
Not open text&lt;br&gt;
Lack of support for 2-step authentication&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-armory-wallet"&gt;
  &lt;/a&gt;
  6. Armory wallet
&lt;/h3&gt;

&lt;p&gt;One of the most well-known desktop wallets is Armory Digital Currency. This wallet has a very high level of security and only allows users to store bitcoins. Armory runs on all PC operating systems but cannot run on mobile phones. This wallet has a professional environment and its advanced options and settings are not suitable for beginners and newcomers to the crypto world. Using this system requires a complete download of the blockchain (it is full ninety), so the armor is a heavy wallet.&lt;/p&gt;

&lt;p&gt;Armory desktop wallet allows cold or offline storage of user information such as private keys for maximum security. Support for Segway and multi-signature technologies, as well as the ability to sync this wallet with Treasure and Nano Ledger hardware wallets are other Armori features.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I1wOUPwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvigvd7g81074wuq36t7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I1wOUPwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvigvd7g81074wuq36t7.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Strengths:&lt;br&gt;
Runs on Windows, Linux and Macintosh systems&lt;br&gt;
Support for Segwit technology&lt;br&gt;
Two-step verification capability&lt;br&gt;
Very high security&lt;br&gt;
Being free&lt;br&gt;
Open source&lt;br&gt;
Offline storage of private keys&lt;br&gt;
weak points:&lt;br&gt;
Lack of support for multiple ciphers&lt;br&gt;
Incompatibility with mobile&lt;br&gt;
Hard and advanced settings&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-blind-bitcoin-wallet"&gt;
  &lt;/a&gt;
  7. Blind bitcoin wallet
&lt;/h3&gt;

&lt;p&gt;Bitcoin Core was launched by the core Bitcoin development team and is a full node wallet that requires full download of the Bitcoin blockchain (it is full node). This system uses the main bitcoin blockchain to stay updated and confirm payments, and this has made it very secure. This feature makes Bitcoin Core a very heavy wallet, and loading and installing it requires an advanced system with high storage volume. Bitcoin Core desktop wallet only supports bitcoin and its user interface and settings are complicated and complicated and novice users can not use it easily.&lt;/p&gt;

&lt;p&gt;Support for the Mempool feature, which shows users unverified and unsuccessful transactions; It is one of the unique features of this wallet. Bitcoin Blind has the ability to sync with most cool digital currency wallets.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qKQ_n70U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xciqhp72a5fercaxzv3n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qKQ_n70U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xciqhp72a5fercaxzv3n.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Strengths:&lt;br&gt;
Runs on Windows, Linux and Macintosh systems&lt;br&gt;
Support for Segwit technology&lt;br&gt;
Ability to modify commissions&lt;br&gt;
Mempool feature&lt;br&gt;
Very high security&lt;br&gt;
Being free&lt;br&gt;
Open source&lt;br&gt;
Privacy&lt;br&gt;
Supports most hardware wallets&lt;br&gt;
weak points:&lt;br&gt;
Intermediate user interface&lt;br&gt;
Hard and time consuming setup&lt;br&gt;
Requires a lot of storage space&lt;br&gt;
Hard and advanced settings&lt;br&gt;
Limited facilities&lt;br&gt;
Lack of support for multiple ciphers&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-atomic-wallet"&gt;
  &lt;/a&gt;
  8. Atomic wallet
&lt;/h3&gt;

&lt;p&gt;Another popular desktop wallet is the Atomic wallet, which was launched in 2017 by one of the founders of the famous company Changelly. This wallet can be run on all computer operating systems, and its smooth and simple user interface has enabled novice and professional users to connect with it very quickly. The Atomic Wallet is secure as long as users follow all security tips, and the security system itself provides almost mediocrity. The level of fees is also low and acceptable in this wallet. Private keys are also stored on users' personal systems when using this wallet.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H1sbplH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0j7ohelcrbd8icmjsg7c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H1sbplH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0j7ohelcrbd8icmjsg7c.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Atomic supports more than 500 coins and digital currency tokens. Users of this wallet can use the Atomic Swap system to exchange their cryptocurrencies without the need for exchanges in the same wallet. It is also possible to buy a limited number of digital currencies in this wallet. Using Atomic is free, but some of its features require a fee.&lt;/p&gt;

&lt;p&gt;Atomic Desktop Wallet&lt;br&gt;
Strengths:&lt;br&gt;
Runs on Windows, Linux and Macintosh systems&lt;br&gt;
Runs on Android and IOS systems&lt;br&gt;
Backup capability&lt;br&gt;
Supports hundreds of ciphers&lt;br&gt;
Ability to download the transaction with the transaction code&lt;br&gt;
Simple and smooth user interface&lt;br&gt;
Internal exchange capability (Atomic Swap)&lt;br&gt;
Save private key on user system&lt;br&gt;
weak points:&lt;br&gt;
Reports of functional weaknesses&lt;br&gt;
Medium security&lt;br&gt;
Not all facilities are free&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-guarda-wallet"&gt;
  &lt;/a&gt;
  9. Guarda wallet
&lt;/h3&gt;

&lt;p&gt;This desktop wallet was launched by Guardian OÜ in 2017 and in a short time it was able to reach users in the field.Crypto's gaining popularity. Walt Guard currently supports about 50 coins and more than 10,000 tokens. This wallet can be run on all computer operating systems, as well as on Android and iOS mobile phone systems. Guarda users can trade cryptocurrencies in the same wallet and do not need to transfer their assets to other platforms.&lt;/p&gt;

&lt;p&gt;Guarda Wallet stores users' private keys on their personal system, thereby enhancing the security of their assets. The platform does not blacklist any country and provides access to all digital currency users around the world.&lt;/p&gt;

&lt;p&gt;Strengths:&lt;br&gt;
Runs on Windows, Linux and Macintosh systems&lt;br&gt;
Runs on Android and IOS systems&lt;br&gt;
Ability for internal exchanges&lt;br&gt;
Ability to receive and send passwords to other provinces or exchanges&lt;br&gt;
Save private key on user system&lt;br&gt;
weak points:&lt;br&gt;
Relatively difficult to set up&lt;br&gt;
Lack of support for Segwit technology&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ledger Live Wallet
We are all familiar with the Ledger Nano S cold wallet. This wallet has a low-end version or desktop wallet that offers high security and performance to users, but using this wallet requires the purchase of the company's physical wallet. Ledger Live supports more than 1,500 cryptocurrencies and offers a variety of customization options. Attractive and simple user interface and very high security of this platform has made it one of the most popular desktop wallets in Ramzarz.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This wallet is constantly updating the system security algorithms and adding new and user-friendly features, and users have to update their wallet in a short period of time. Ledger Live provides users with 24 recovery words for added security, which some consider excessive and inappropriate for recovery.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GlstrmPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31osgdk96k91wj4xpepx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GlstrmPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31osgdk96k91wj4xpepx.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Strengths:&lt;br&gt;
Simple and attractive user interface&lt;br&gt;
Very high security&lt;br&gt;
Ability to view analysis charts&lt;br&gt;
Customization options&lt;br&gt;
weak points:&lt;br&gt;
Specify 24 words to retrieve&lt;br&gt;
Cannot be used without Ledger Nano S wallet&lt;br&gt;
expensive&lt;br&gt;
Concluding remarks&lt;br&gt;
Using a desktop wallet is not the safest way to store passwords. We mentioned earlier that these wallets are not completely reliable because of the installation on PCs and the possibility of hacking these systems, as well as their popularity or online. Therefore, when using them, we must follow the security tips accurately and completely.&lt;/p&gt;

&lt;p&gt;Try to save your private key offline.&lt;br&gt;
Check the security of your internet connection.&lt;br&gt;
Get reputable and up-to-date antivirus software for your system.&lt;br&gt;
Enable two-factor authentication (if your wallet supports it).&lt;br&gt;
Use a strong password.&lt;br&gt;
Be sure to back up your desktop wallet.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>cryptocurrency</category>
    </item>
    <item>
      <title>Voice Automating Spotify w/ React and Codesphere</title>
      <author>Saji Wang</author>
      <pubDate>Fri, 10 Sep 2021 13:27:47 +0000</pubDate>
      <link>https://dev.to/codesphere/voice-automating-spotify-w-react-and-codesphere-9da</link>
      <guid>https://dev.to/codesphere/voice-automating-spotify-w-react-and-codesphere-9da</guid>
      <description>&lt;p&gt;Earlier this week, we spoke about the relationship between coding productivity and listening to music. If you're a developer, you know how many different tabs and applications you might have open at once. That's why today we're going to create a simple web app to voice control Spotify.&lt;/p&gt;

&lt;p&gt;You can check out the demo, deployed on Codesphere, here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://18922-3000.codesphere.com/"&gt;https://18922-3000.codesphere.com/&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#project-overview"&gt;
  &lt;/a&gt;
  Project Overview
&lt;/h3&gt;

&lt;p&gt;To do this we're going to use React, the Spotify Web API, the react-speech-recognition library, and Codesphere.&lt;/p&gt;

&lt;p&gt;The flow will look like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xro9v17m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilxnwoqru79lixd99k38.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xro9v17m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilxnwoqru79lixd99k38.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This GIF obviously doesn't include sound, but upon saying "pause music", your Spotify will pause, and upon saying "play music", the song will start playing again.&lt;/p&gt;

&lt;p&gt;Spotify's Web API includes tons of different features, so you can automate your app to do pretty much anything you can do in the actual Spotify app.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setting-up-spotify-web%C2%A0api"&gt;
  &lt;/a&gt;
  Setting up Spotify Web API
&lt;/h3&gt;

&lt;p&gt;To get started with the Spotify Web API, go to this page and sign in with your Spotify account: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.spotify.com/dashboard/"&gt;https://developer.spotify.com/dashboard/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will then see a menu to create a new app in your Spotify developer dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ymlgrgez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2p58xgijq6k1ncs23f25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ymlgrgez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2p58xgijq6k1ncs23f25.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you create your app, press the edit settings button and add localhost:3000 to your redirect URI. This is the link that Spotify will send the user to after they successfully sign in. If you are deploying this app in the cloud, make sure to change your redirect URI to the domain of your app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBRGG9hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3scu79dcvmxgyxn372ia.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBRGG9hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3scu79dcvmxgyxn372ia.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, note the clientID in your dashboard, we are going to need this for later.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#creating-our-spotify%C2%A0player"&gt;
  &lt;/a&gt;
  Creating our Spotify Player
&lt;/h3&gt;

&lt;p&gt;We are going to handle authentication by storing an authentication token that we pull from the API. The user can begin the authentication process by pressing a sign-in button and being redirected to a Spotify login.&lt;/p&gt;

&lt;p&gt;Once there is a valid token, we then are going to pull the currently playing song and display the title, artist, and album cover. Finally, we are going to add buttons that can play and pause the current song.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And we are going to style these components like so:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;With this code, we can play and pause our Spotify from the web. That's cool I guess, but not really helpful. Now here comes the fun part.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setting-up-voice-recognition"&gt;
  &lt;/a&gt;
  Setting up Voice Recognition
&lt;/h3&gt;

&lt;p&gt;We are first going to install the react-speech-recognition library with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i react-speech-recognition&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We then are going to amend our code as follows:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And there you have it! We can now voice control our Spotify!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h3&gt;

&lt;p&gt;Playing and Pausing songs is only the tip of the iceberg of the Spotify Web API. If you want, you can use the API to create a functioning Spotify clone.&lt;/p&gt;

&lt;p&gt;In addition, if you link up more voice commands, you can create a fully automated Spotify app. While this is nice for those of us who are lazy, this also has the potential to make life much easier for music listeners with visual impairments.&lt;/p&gt;

&lt;p&gt;So code away!&lt;/p&gt;

&lt;p&gt;Brought to you by your good friends at &lt;a href="https://link.codesphere.com/DH"&gt;Codesphere&lt;/a&gt;, the next-generation cloud provider.&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>20 Free CSS Product Card Example - Frontendtrick</title>
      <author>frontendtrick</author>
      <pubDate>Fri, 10 Sep 2021 12:41:15 +0000</pubDate>
      <link>https://dev.to/frontendtrick/20-free-css-product-card-example-frontendtrick-498j</link>
      <guid>https://dev.to/frontendtrick/20-free-css-product-card-example-frontendtrick-498j</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TvVJNIjQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11nsgnabpirm3gymykzn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TvVJNIjQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11nsgnabpirm3gymykzn.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
1 React Crypto UI&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
2 CSS Animation Material Design&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
3 Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
4 Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
5 Day 002 Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
6 Material design Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
7 HTML CSS Product Card UI design&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
8 Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
9 Daily UI 15 Product card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
10 Product Card wip&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
11 Flipping Product Card 30Days30Sites&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
12 Product card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
13 Product Card TO Code&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
14 Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
15 Simple Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
16 Responsive Product Card View With Change Color Image Functionality&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
17 Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
18 Product card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
19 Strawberry Week UI&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
20 Material Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Code and System Design Review Checklist</title>
      <author>Azom Shahriar</author>
      <pubDate>Fri, 10 Sep 2021 12:32:28 +0000</pubDate>
      <link>https://dev.to/azomshahriar/code-and-system-design-review-checklist-56c6</link>
      <guid>https://dev.to/azomshahriar/code-and-system-design-review-checklist-56c6</guid>
      <description>&lt;p&gt;When writing code, we need to review our own code and other's code as well as software system design and architecture. In this article, we try to share few important notes regarding code and system review.&lt;br&gt;
This checklist is mostly for java backend development. But can also be applied to other technology stacks.&lt;br&gt;
The checklists/notes will help developers ensure better code and system architecture.&lt;/p&gt;

&lt;p&gt;Category/Area of Review:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;General&lt;/li&gt;
&lt;li&gt;Clean Code &amp;amp; Code style &lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Performance &lt;/li&gt;
&lt;li&gt;Logging and Tracing&lt;/li&gt;
&lt;li&gt;Concurrency &lt;/li&gt;
&lt;li&gt;Error Handling&lt;/li&gt;
&lt;li&gt;Maintainability &amp;amp; Testability&lt;/li&gt;
&lt;li&gt;Domain(Business)&lt;/li&gt;
&lt;li&gt;Architecture&lt;/li&gt;
&lt;li&gt;Scalability &lt;/li&gt;
&lt;li&gt;Reliability &amp;amp; Resiliency&lt;/li&gt;
&lt;li&gt;Design pattern&lt;/li&gt;
&lt;li&gt;PCI DSS(FinTech)&lt;/li&gt;
&lt;li&gt;REST API design&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;General:&lt;br&gt;
Use checked exceptions for recoverable conditions and runtime exceptions for programming errors&lt;br&gt;
Try to use global exception handling and handle common Business and technical error response&lt;br&gt;
Never ignore exceptions. Don't overlook the catch block.&lt;br&gt;
Return empty arrays or collections, not nulls.&lt;br&gt;
Minimize the scope of local variables for earlier GC.&lt;br&gt;
Always override hashcode when overriding equal.&lt;br&gt;
Always override toString&lt;br&gt;
Use marker interface to define the type&lt;br&gt;
Use an executor thread pool for tasks and thread instead of unlimited thread creation.&lt;br&gt;
Use the BigDecimal valueof method for the string to bigdecimal/double conversion, otherwise, you will face a precision issue.&lt;br&gt;
Try to avoid string literals at business logic check. Use enum or constant for maintainable code.&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
if(status = "SUCCESS")&lt;br&gt;
Good:&lt;br&gt;
if(status = EventStatus.SUCCESS)&lt;br&gt;
Throw Exceptions rather than Return codes in case of business and technical error.&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
private String checkInput(Request request){&lt;br&gt;
   if(something wrong)&lt;br&gt;
      return "FAILED";&lt;br&gt;
}&lt;br&gt;
Good:&lt;br&gt;
private String checkInput(Request request){&lt;br&gt;
    if(something wrong)&lt;br&gt;
      throw new BusinessErrorException(int code, String message)&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;Clean Code:&lt;br&gt;
Use Intention-Revealing Names for variable&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
void validate(String input)&lt;br&gt;
Good: &lt;br&gt;
void validateCardNumber(String cardNumber)&lt;br&gt;
Pick one word per concept.&lt;br&gt;
Use Solution/Problem Domain Names&lt;br&gt;
Classes should be small!&lt;br&gt;
Functions should be small!&lt;br&gt;
Do one thing in a function.&lt;br&gt;
Don't Repeat Yourself (Avoid code Duplication).&lt;br&gt;
Explain yourself in code(write why in code not what)&lt;br&gt;
Make sure the code formatting is applied(Can use tools)&lt;br&gt;
Each method should do a single task. Don't mix business logic and network calls with the same method. Try to make the method unit testable.&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
public sendSms(){&lt;br&gt;
  // code for validation&lt;br&gt;
  if(mobile is valid mobile)&lt;br&gt;
  // code for sms generation&lt;br&gt;
  String smsBody = "Some Text"+variable+"text".&lt;br&gt;
  // network call to telco server&lt;br&gt;
  restTemplate.exchante(url,mobile,smsBody);&lt;br&gt;
}&lt;br&gt;
Good:&lt;br&gt;
public processSms(){&lt;br&gt;
  validateMobile();&lt;br&gt;
  String smsBody = generateSmsBody(inputs);&lt;br&gt;
  sendSms(inputs)&lt;br&gt;
}&lt;br&gt;
private void validateMobile(String mobileNo){}&lt;br&gt;
private String generateSmsBody(Inputs….){}&lt;br&gt;
private sendSms(){}&lt;/p&gt;

&lt;p&gt;Security:&lt;br&gt;
Check access control or authorization besides authentication.&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
Only verify the JWT token&lt;br&gt;
Good:&lt;br&gt;
Verify token and check use have authority to access that resource.&lt;br&gt;
All change event applications should be auditable(who performed this operation from which device and IP)&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
account(name,status,createdDate)&lt;br&gt;
Good:&lt;br&gt;
account(name,status,createDate,createdBy,lastModifiedDate,lastModifiedBy)&lt;br&gt;
Use password as an array of characters instead of String so that no one can get it from heap dump.&lt;br&gt;
Make class final if not being used for inheritance.&lt;br&gt;
Input into a system should be checked for valid data size and range and check mandatory input fields(boundary conditions)&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
TxnRequest{&lt;br&gt;
  String fromAc;&lt;br&gt;
  String toAc;&lt;br&gt;
  BigDecimal amount;&lt;br&gt;
}&lt;br&gt;
Good:&lt;br&gt;
TxnRequest{ &lt;br&gt;
   @NotBlank(message="From AC Can't be blank.")&lt;br&gt;
   String fromAc;&lt;br&gt;
   @NotBlank(message="To AC can't be blank.")&lt;br&gt;
   String toAc;&lt;br&gt;
   &lt;a class="mentioned-user" href="https://dev.to/notnull"&gt;@notnull&lt;/a&gt;
(message="Amount can't be null.")&lt;br&gt;
   @Positive(message="Amount should be positive")&lt;br&gt;
   BigDecimal amount;&lt;br&gt;
}&lt;br&gt;
Avoid sensitive data logging(like pin, password, card info)&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
log.info("User:{}, Password{}",request.getUserName(),request.getPassword());&lt;br&gt;
Good:&lt;br&gt;
log.info("UserName:{}, Password:****",request.getUserName())&lt;br&gt;
Purge sensitive information from exceptions (exposing file path, internal system configuration)&lt;br&gt;
Be careful about SQL injection when DB queries.&lt;br&gt;
Check the API response fields. Is there any extra data or sensitive data are shared with the public?&lt;/p&gt;

&lt;p&gt;Bad: &lt;br&gt;
Ac Balance response:&lt;br&gt;
{"account":"10421020025347",&lt;br&gt;
"balance":550.00, &lt;br&gt;
"modifiedBy":"bank-checker-001",&lt;br&gt;
"userId":456,&lt;br&gt;
"customerInfo":{….}}&lt;br&gt;
Good: &lt;br&gt;
{"account":"10421020025347","balance":550.00}&lt;br&gt;
Define wrappers around native methods (not declare a native method public).&lt;br&gt;
Make public static fields final (to avoid caller changing the value)&lt;br&gt;
Try inter-service communication in a secured way(Implement SSL when service to service call)&lt;br&gt;
Separate public and private/internal API paths so that DevOps team can implement infra-level security and filter.&lt;/p&gt;

&lt;p&gt;Bad: &lt;br&gt;
api/v1/all public/admin/internal path,&lt;br&gt;
Good: &lt;br&gt;
api/v1/public path&lt;br&gt;
api-admin/v1/admin related path&lt;br&gt;
api-internal/v1/interapi&lt;br&gt;
In the case of microservice try to use a central auth server&lt;br&gt;
Check about authentication and authorization network call overhead in the case of a distributed system.&lt;br&gt;
Never use default credentials at production. Especially for system/infrastructure-related services. (DB, Cache, Auth, API GW, HTTP server, 3rd party library)&lt;br&gt;
Encrypt or one-way hash for OTP and other credentials.&lt;br&gt;
Ensure REST API security.&lt;/p&gt;

&lt;p&gt;Performance:&lt;br&gt;
Try to keep synchronized section small operation(CPU/network/memory)&lt;br&gt;
Avoid string literal concatenation back end component. Try to use a string builder.&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
String fullMessage = "";&lt;br&gt;
for(Result result : resultList){&lt;br&gt;
fullMessage = fullMessage+result.getMessagr();&lt;br&gt;
}&lt;br&gt;
Good:&lt;br&gt;
StringBuilder fullMessage = new StringBuilder();&lt;br&gt;
for(Result result : resultList){&lt;br&gt;
fullMessage.append(result.getMessage()));&lt;br&gt;
}&lt;br&gt;
Avoid creating unnecessary objects.&lt;br&gt;
In case of network call use a connection pool, thread pool, socket pool.&lt;br&gt;
Profile DB query and check high search/read query happen on an indexed field.&lt;br&gt;
Release resources (Streams, Connections, etc) in all cases.&lt;br&gt;
Careful about ORM N+1 query and use Entitygraph to avoid N+1 query&lt;br&gt;
Always think about cache.&lt;br&gt;
In a distributed system(SOA or Microservice) always develop stateless service.&lt;br&gt;
Try to develop as many Asynchronous processes using JMS.&lt;br&gt;
Think about IO latency and CPU usage. If the system is an IO incentive try to use the NIO library.&lt;br&gt;
Check if any unused library goes into the production build.&lt;br&gt;
In the case of an in-memory store avoid full object serialization and use custom serialization to save memory. Think about JSON vs Messagepack vs protobuf.&lt;br&gt;
Try to avoid select * if not needed at DB query.&lt;br&gt;
Try always index-only scan, select the field which is indexed. The most important and readable field should be indexed. We can also use composite indexed-key.&lt;/p&gt;

&lt;p&gt;Logging &amp;amp; Tracing:&lt;br&gt;
Maintain proper log level&lt;br&gt;
Use placeholder (LOG.error("Could not… details: {}", something, exception)) and never String concatenation (LOG.error("Could not… details: " + something, exception))&lt;br&gt;
Don't trace excessive logs.&lt;br&gt;
In the case of Distributed Systems (SOA, Microservice) try to use Distributed tracing (Spring cloud sleuth, ELK, Zipkin)&lt;br&gt;
Don't log Sensitive Information&lt;br&gt;
Log User Context&lt;br&gt;
In the case of centralized logs use common trace id and service name.&lt;/p&gt;

&lt;p&gt;Concurrency:&lt;br&gt;
Avoid excessive synchronization for thread safety. Try to avoid sharing resources in case of a multithreaded environment.&lt;br&gt;
Avoid member variables when in the case of a singleton object or bean.&lt;br&gt;
Always synchronize share resources and also try to avoid share resource&lt;br&gt;
Use concurrent hashmap instead of Synchronize HashMap&lt;br&gt;
Use HashMap or HashSet instead if TreeMap/Set when ordering is not important. As time complexity O(1) vs O(logn)&lt;br&gt;
Always think about concurrency in the case of back-end service.&lt;br&gt;
When multiple users/threads update the same data, try to implement a lock(optimistic or pessimistic). For example account balance, ticket reservation, product stock.&lt;/p&gt;

&lt;p&gt;Error Handling:&lt;br&gt;
Reply consistent error response to the client.&lt;br&gt;
Handle proper error code(401,404,400 and 500)&lt;br&gt;
Use custom error code for the business logic errors.&lt;/p&gt;

&lt;p&gt;Typical Error Categories&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Business logic error&lt;/li&gt;
&lt;li&gt;Technical Error&lt;/li&gt;
&lt;li&gt;Upstream Service Error&lt;/li&gt;
&lt;li&gt;Common Error/Runtime Error
Architecture:
Follow twelve-factor app(&lt;a href="https://12factor.net"&gt;https://12factor.net&lt;/a&gt;)
Aware about distributed system fallacy (&lt;a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing"&gt;https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing&lt;/a&gt;)
For the data layer we can follow lambda architecture.
Try to implement event-based infrastructure for scalability.
Follow 12 architecture principle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1.N+1 Design. Never less than two of anything and remember the rule of three&lt;br&gt;
2.Design for Rollback. Ensure you can roll back any release of functionality&lt;br&gt;
3.Design to be disabled. Be able to turn off anything you released&lt;br&gt;
4.Design to be monitored. Think about monitoring during design. Not after.&lt;br&gt;
5.Design for multiple Live sites. Don't box yourself into one site solution&lt;br&gt;
6.Use mature technology. Use thing you know work well&lt;br&gt;
7.Asynchronous design. Communicate synchronously only when absolutely necessary&lt;br&gt;
8.Stateless Design. Use state only when the business return justifies it .&lt;br&gt;
9.Scale Out NOT Up. Never rely on a bigger or faster system.&lt;br&gt;
10.Design for at least two axes. Think one step ahead of your scale beads.&lt;br&gt;
11.Bue when Non Core. If you aren't the best at building it and it doesn't offer competitive differentiation, buy it.&lt;br&gt;
12.Commodity Hardware. Cheaper is better most of the time.&lt;br&gt;
Design Pattern:&lt;br&gt;
SOLID&lt;br&gt;
DRY&lt;br&gt;
KISS&lt;br&gt;
Creational Pattern(Singleton,Factory,Builder,Adapter)&lt;br&gt;
Behavioral Pattern(Strategy, Chain Responsibility, Observer).&lt;/p&gt;

&lt;p&gt;Scalability:&lt;br&gt;
Make the system elastic or easily scalable.&lt;br&gt;
Make the service stateless for horizontal scaling.&lt;br&gt;
DB Sharding&lt;br&gt;
DB Partition&lt;br&gt;
DB replication&lt;br&gt;
Use read replica for an independent read operation.&lt;br&gt;
Cache high read and low write operation.&lt;br&gt;
Monitor DB read and write query ratio.&lt;br&gt;
Reduce network call overhead (use socket pool or gRPC).&lt;br&gt;
Check DB network call round trip and always try to reduce it.&lt;br&gt;
Address the c10K problem for network communication.&lt;/p&gt;

&lt;p&gt;Reliability &amp;amp; Resiliency:&lt;br&gt;
Handle Timeout in case of all network call.&lt;br&gt;
Implement Circuit Breaker Pattern.&lt;br&gt;
Implement Bulkhead pattern&lt;br&gt;
Implement idempotent operation&lt;br&gt;
Use a fail-first mechanism when the system is really broken.&lt;/p&gt;

&lt;p&gt;Maintainability &amp;amp; Testability:&lt;br&gt;
How much test coverage does your system have?&lt;br&gt;
Unit, Integration, and System Testing coverage.&lt;br&gt;
Proper CI/CD pipeline.&lt;br&gt;
Do as much automation.&lt;br&gt;
Implement proper production deployment test strategy( canary, AB testing)&lt;/p&gt;

&lt;p&gt;Monitoring/Observability:&lt;br&gt;
Monitor your system's health and resources.&lt;br&gt;
Database Memory and disk size&lt;br&gt;
Application and DB server CPU, memory and Load average, and IO&lt;br&gt;
Application latency and throughput.&lt;br&gt;
Application resource(JVM memory, thread, thread pool, connection pool, queue, JMS memory)&lt;br&gt;
Isolate Logging, Tracing, and metric analysis.&lt;br&gt;
Monitor your business performance.&lt;/p&gt;

&lt;p&gt;Business Domain:&lt;br&gt;
Business Logic implemented properly at the codebase&lt;br&gt;
Service properly isolated against the domain and bounded context.&lt;br&gt;
Try to follow the domain-driven design.&lt;/p&gt;

&lt;p&gt;PCI DSS:(For FinTech):&lt;br&gt;
12 requirements:&lt;br&gt;
1.Install and maintain a firewall configuration to protect cardholder data&lt;br&gt;
2.Do not use vendor-supplied defaults for system passwords and other security parameters&lt;br&gt;
3.Protect stored cardholder data&lt;br&gt;
4.Encrypt transmission of cardholder data across open, public networks&lt;br&gt;
5.Use and regularly update anti-virus software or programs&lt;br&gt;
6.Develop and maintain secure systems and applications&lt;br&gt;
7.Restrict access to cardholder data by business need to know&lt;br&gt;
8.Assign a unique ID to each person with computer access&lt;br&gt;
9.Restrict physical access to cardholder data&lt;br&gt;
10.Track and monitor all access to network resources and cardholder data&lt;br&gt;
11.Regularly test security systems and processes&lt;br&gt;
12.Maintain a policy that addresses information security for all personnel&lt;br&gt;
REST API Design:&lt;br&gt;
Use kebab-case for URLs&lt;/p&gt;

&lt;p&gt;Bad: /systemOrders or /system_orders&lt;br&gt;
Good: /system-orders&lt;br&gt;
Use camelCase for Parameters&lt;/p&gt;

&lt;p&gt;Bad: /system-orders/{order_id} or /system-orders/{OrderId}&lt;br&gt;
Good: /system-orders/{orderId}&lt;br&gt;
Plural Name to Point to a Collection&lt;/p&gt;

&lt;p&gt;Bad: GET /user or GET /User&lt;br&gt;
Good: GET /users&lt;br&gt;
Keep Verbs out of Your Resource URL&lt;/p&gt;

&lt;p&gt;Bad: POST /updateuser/{userId} or GET /getusers&lt;br&gt;
Good: PUT /user/{userId}&lt;br&gt;
Use Verbs for Non-Resource URL or specific operation&lt;/p&gt;

&lt;p&gt;POST /alerts/245743/resend&lt;br&gt;
Use camelCase for JSON property&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
{&lt;br&gt;
user_name: "Mr Rahim"&lt;br&gt;
user_id: "1"&lt;br&gt;
}&lt;br&gt;
Good:&lt;br&gt;
{&lt;br&gt;
userName: "Mr. Karim"&lt;br&gt;
userId: "1"&lt;br&gt;
}&lt;br&gt;
Don't use table_name for the resource name&lt;/p&gt;

&lt;p&gt;Bad: product_order&lt;br&gt;
Good: product-orders&lt;br&gt;
This is because exposing the underlying architecture is not your purpose.&lt;br&gt;
Use API version&lt;/p&gt;

&lt;p&gt;Good: &lt;a href="http://api.domain.com/v1/shops/3/products"&gt;http://api.domain.com/v1/shops/3/products&lt;/a&gt;&lt;br&gt;
Accept limit and offset Parameters&lt;/p&gt;

&lt;p&gt;GET /shops?offset=5&amp;amp;limit=5&lt;br&gt;
Don't Pass Authentication Tokens in URL&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
GET /shops/123?token=some_kind_of_authenticaiton_token&lt;br&gt;
Good:&lt;br&gt;
Instead, pass them with the header:&lt;br&gt;
Authorization: Bearer xxxxxx, Extra yyyyy&lt;br&gt;
Use the Relation in the URL For Nested Resources&lt;/p&gt;

&lt;p&gt;GET /shops/2/products : Get the list of all products from shop 2.&lt;br&gt;
GET /shops/2/products/31: Get the details of product 31, which belongs to shop 2.&lt;br&gt;
CORS&lt;/p&gt;

&lt;p&gt;Do support CORS (Cross-Origin Resource Sharing) headers for all public-facing APIs.&lt;br&gt;
Consider supporting a CORS allowed origin of "*", and enforcing authorization through valid OAuth tokens.&lt;br&gt;
Avoid combining user credentials with origin validation.&lt;br&gt;
Security&lt;br&gt;
Enforce HTTPS (TLS-encrypted) across all endpoints, resources, and services.&lt;br&gt;
Enforce and require HTTPS for all callback URLs, push notification endpoints, and webhooks.&lt;br&gt;
Reviewer &amp;amp; reviewee's behavior and attitude when reviewing other's code:&lt;br&gt;
Be kind&lt;br&gt;
Accept that many programming decisions are opinions. Discuss trade offs, which you prefer, and reach a resolution quickly.&lt;br&gt;
Ask questions; don't make demands. ("What do you think about naming this :user_id?")&lt;br&gt;
Ask for clarification. ("I didn't understand. Can you clarify?")&lt;br&gt;
Avoid selective ownership of code. ("mine", "not mine", "yours")&lt;br&gt;
Avoid using terms that could be seen as referring to personal traits. ("dumb", "stupid"). Assume everyone is intelligent and well-meaning.&lt;br&gt;
Be explicit. Remember people don't always understand your intentions online.&lt;br&gt;
Be humble. ("I'm not sure - let's look it up.")&lt;br&gt;
Don't use hyperbole. ("always", "never", "endlessly", "nothing")&lt;br&gt;
Be careful about the use of sarcasm. Everything we do is public; what seems like good-natured ribbing to you and a long-time colleague might come off as mean and unwelcoming to a person new to the project.&lt;br&gt;
Consider one-on-one chats or video calls if there are too many "I didn't understand" or "Alternative solution:" comments. Post a follow-up comment summarizing one-on-one discussion.&lt;br&gt;
If you ask a question to a specific person, always start the comment by mentioning them; this ensures they see it if their notification level is set to "mentioned" and other people understand they don't have to respond.&lt;/p&gt;

&lt;p&gt;Resources:&lt;br&gt;
&lt;a href="https://owasp.org/www-pdf-archive/OWASP_Code_Review_Guide_v2.pdfhttps://dzone.com/articles/java-code-review-checklisthttps://www.codementor.io/blog/code-review-checklist-76q7ovkaqjhttps://owasp.org/www-pdf-archive/OWASP_SCP_Quick_Reference_Guide_v2.pdfhttps://dimikcomputing.com/course/clean-code-online-course/https://stackoverflow.com/questions/7186204/bigdecimal-to-use-new-or-valueofhttps://www.geeksforgeeks.org/use-char-array-string-storing-passwords-java/https://betterprogramming.pub/10-essential-tips-for-writing-secure-rest-api-e297990d48c5https://cloud.google.com/architecture/application-deployment-and-testing-strategieshttps://docs.gitlab.com/ee/development/code_review.html"&gt;https://owasp.org/www-pdf-archive/OWASP_Code_Review_Guide_v2.pdfhttps://dzone.com/articles/java-code-review-checklisthttps://www.codementor.io/blog/code-review-checklist-76q7ovkaqjhttps://owasp.org/www-pdf-archive/OWASP_SCP_Quick_Reference_Guide_v2.pdfhttps://dimikcomputing.com/course/clean-code-online-course/https://stackoverflow.com/questions/7186204/bigdecimal-to-use-new-or-valueofhttps://www.geeksforgeeks.org/use-char-array-string-storing-passwords-java/https://betterprogramming.pub/10-essential-tips-for-writing-secure-rest-api-e297990d48c5https://cloud.google.com/architecture/application-deployment-and-testing-strategieshttps://docs.gitlab.com/ee/development/code_review.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>systemdesign</category>
      <category>architecture</category>
    </item>
    <item>
      <title>How to Debug PHP Using Xdebug On Vscode</title>
      <author>Prosper Yong</author>
      <pubDate>Fri, 10 Sep 2021 12:13:15 +0000</pubDate>
      <link>https://dev.to/yongdev/how-to-debug-php-using-xdebug-on-vscode-3n4</link>
      <guid>https://dev.to/yongdev/how-to-debug-php-using-xdebug-on-vscode-3n4</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;It's important to keep a few things in mind while developing web apps. &lt;br&gt;
When it comes to building large and powerful applications, a competent developer will always follow best practices. Testing, debugging, performance, and security of websites or apps are some of these techniques. &lt;br&gt;
Using VSCode and the PHP xDebug module, you'll enable full-featured functional debugging throughout your whole application.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;The following criteria must be met in order to follow along with this guide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A PHP development environment that runs at least PHP 7.0.&lt;/li&gt;
&lt;li&gt;An appropriate version of &lt;a href="https://code.visualstudio.com/#alt-downloads"&gt;Visual Studio Code&lt;/a&gt; for your operating system &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#step-1-how-to-download-and-install-the-xdebug-tool"&gt;
  &lt;/a&gt;
  Step 1 — How to Download and Install the XDebug Tool
&lt;/h2&gt;

&lt;p&gt;Real-time debugging is made possible using Xdebug, a PHP extension. On the other hand, it can be useful for troubleshooting server-side problems. Since it shouldn't be active on most requests, Xdebug isn't enabled in the same manner as the other extensions are.You would install it following the steps below:&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#windows"&gt;
  &lt;/a&gt;
  Windows
&lt;/h4&gt;

&lt;p&gt;Xdebug provides a wizard tool for Windows users to obtain a &lt;code&gt;.dll&lt;/code&gt; file. In order to do this, first create a PHP file in a folder, and then add the following code line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; 
&lt;span class="nb"&gt;phpinfo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use your browser to launch the &lt;code&gt;index.php&lt;/code&gt; file . This will provide the information displayed in the image below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N_bf6q52--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5skbxjv9egtv64hqrxq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N_bf6q52--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5skbxjv9egtv64hqrxq.png" alt="php info"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select and copy all information on the page.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You'll next need to go to the XDebug &lt;a href="https://xdebug.org/wizard.php"&gt;Wizard tool&lt;/a&gt; and paste the information into a Text Box input field.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Look for 'Analyze my phpinfo() output' and click it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3TbDVwtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tz7s3xcvzz3prm7h3n4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3TbDVwtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tz7s3xcvzz3prm7h3n4g.png" alt="Xdebug wizard"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is a module that may be downloaded under Instructions, number 1. As you can see in the image below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gZ0m43wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0l9e78lmomvui8ae8mb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZ0m43wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0l9e78lmomvui8ae8mb.png" alt="Instruction"&gt;&lt;/a&gt;&lt;br&gt;
Please note that the path to the directory in this example may be different from yours, so please pay attention to the directions in the image above.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#mac"&gt;
  &lt;/a&gt;
  MAC
&lt;/h4&gt;

&lt;p&gt;You can install PHP7 Xdebug using pecl extension:&lt;br&gt;
&lt;/p&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pecl install xdebug
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#linux"&gt;
  &lt;/a&gt;
  Linux
&lt;/h4&gt;

&lt;p&gt;On Linux distribution like fedora 32, you can use Sudo to install Xdebug in PHP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo yum install php-xdebug
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you can refer to the &lt;a href="https://xdebug.org/docs/install"&gt;xdebug&lt;/a&gt; docs if you use other linux distribution.&lt;br&gt;
It's time to enable Xdebug by adding the following code to file &lt;code&gt;xdebug.ini&lt;/code&gt; under &lt;code&gt;etc/php/7.0/mods-available/&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="py"&gt;xdebug.profiler_enable_trigger&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="py"&gt;xdebug.profiler_enable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0&lt;/span&gt;
&lt;span class="py"&gt;xdebug.remote_enable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="py"&gt;xdebug.profiler_output_dir&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/tmp"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now restart your server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-enabling-the-xdebug-extension-in-php"&gt;
  &lt;/a&gt;
  Step 2 — Enabling the XDebug extension in PHP
&lt;/h2&gt;

&lt;p&gt;Microsoft's Visual Studio Code (VS Code) is a free open source text editor. VS Code is available for Windows, Linux, and Mac. There are significant features in the editor that make VS Code one of the most popular programming environments in recent years, despite its size.&lt;br&gt;
Firt&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Launch VS Code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install the Felix Becker PHP Debug extension. The PHP Debug extension may be found in VSCode's Extensions tab by searching for it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AqCfVxsu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbnqixt6qa7wtmvylj4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AqCfVxsu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbnqixt6qa7wtmvylj4k.png" alt="PHP DEBUG"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the &lt;code&gt;Run&lt;/code&gt; tab and click on add configuration.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xq_ebMYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6tl0ctfvzlg1kudpycn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xq_ebMYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6tl0ctfvzlg1kudpycn.png" alt="Run Tab"&gt;&lt;/a&gt;&lt;br&gt;
Now, you'll need to pick the PHP environment. A new &lt;code&gt;launch.json&lt;/code&gt; file will be added to the root directory by VSCode.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A29X0v9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr61mgfmvd2za9et74o2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A29X0v9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr61mgfmvd2za9et74o2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Finally, add the &lt;code&gt;runtimeExecutable&lt;/code&gt; property to the list after port replacing &lt;code&gt;path_to_php_executable&lt;/code&gt; with the path to your php executable:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"runtimeExecutable"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"path_to_php_executable"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rPLjeTeQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbcoekvtknptin3sh0j8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rPLjeTeQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbcoekvtknptin3sh0j8.png" alt="Launch.json"&gt;&lt;/a&gt;&lt;br&gt;
Please save the file &lt;code&gt;launch.json&lt;/code&gt;. Start debugging by opening the debug mode tab and clicking the green debug button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IELqG8eI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4m3moxvtqpnv9gaol0vv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IELqG8eI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4m3moxvtqpnv9gaol0vv.png" alt="debug"&gt;&lt;/a&gt;&lt;br&gt;
You will now see several options in the window, via which you can pick what logs Xdebugger will show like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Notices&lt;/li&gt;
&lt;li&gt;Warnings&lt;/li&gt;
&lt;li&gt;Errors&lt;/li&gt;
&lt;li&gt;Exceptions&lt;/li&gt;
&lt;li&gt;Everything&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Access the Debug Console, which displays error information and debug execution buttons at the top.&lt;/p&gt;

&lt;p&gt;You have the option to make your selections. What I'm going to tell you now is something I've previously addressed in the early stage breakpoints. A breakpoint on a line of code is now available. It's important to note that Xdebug will display the PHP debug script name and line number in the bottom left area.&lt;/p&gt;

&lt;p&gt;In order to debug the application correctly you may launch it in the browser and then go through the code line-by line to spot the issues and fix them. A few shortcut keys for functions and lines of codes should also be remembered:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;F5&lt;/code&gt;:  Continue Debugging&lt;/p&gt;

&lt;p&gt;&lt;code&gt;F10&lt;/code&gt;: Step Over&lt;/p&gt;

&lt;p&gt;&lt;code&gt;F11&lt;/code&gt;: Step into&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Shift + F11&lt;/code&gt;: Step out&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ci04aJC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqf89plvc6dtplkvt4pp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ci04aJC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqf89plvc6dtplkvt4pp.png" alt="debug"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Software development is never complete without debugging.&lt;br&gt;
 You can't tell what's wrong with the code without it.&lt;br&gt;
 A PHP debugger that identifies problems and warning signals fast is a fantastic idea if you're working on an application with thousands of lines of code and you want to be sure you've set up your debugging environment before you start writing code.&lt;/p&gt;

&lt;p&gt;In this article, you learnt how to enable PHP debugging with Xdebug and setup it in VSCode. IDEs like as Eclipse, PHPstorm, and others can also be used to incorporate it.&lt;/p&gt;

</description>
      <category>php</category>
      <category>vscode</category>
      <category>xdebug</category>
      <category>devops</category>
    </item>
    <item>
      <title>I've created my portfolio.</title>
      <author>Andrew Parris</author>
      <pubDate>Fri, 10 Sep 2021 12:12:20 +0000</pubDate>
      <link>https://dev.to/adparris/i-ve-created-my-portfolio-1h0e</link>
      <guid>https://dev.to/adparris/i-ve-created-my-portfolio-1h0e</guid>
      <description>&lt;p&gt;I spent the last two weeks putting this together. Just looking other coders perspectives on it. It tells a short story about my coding journey. The site was created with Gatsby. Let me know what you think!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adparris.github.io/"&gt;https://adparris.github.io/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gatsby</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Rust VPP API Bindings | LFX Mentorship Project </title>
      <author>felixfaisal</author>
      <pubDate>Fri, 10 Sep 2021 12:09:37 +0000</pubDate>
      <link>https://dev.to/felixfaisal/rust-vpp-api-bindings-lfx-mentorship-project-2g8p</link>
      <guid>https://dev.to/felixfaisal/rust-vpp-api-bindings-lfx-mentorship-project-2g8p</guid>
      <description>&lt;p&gt;Hey Everyone, This article is about Rust VPP API Bindings project which was a part of LFX Mentorship. I had this amazing opportunity to work under the guidance of &lt;a href="https://twitter.com/ayourtch"&gt;Andrew Yourtchenko&lt;/a&gt; on this project. So let's get started  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-vpp-thinking"&gt;
  &lt;/a&gt;
  What is VPP 🤔
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;FD.IO&lt;/strong&gt; is an Open Source Dataplane developed by Cisco that runs in user space. At the heart of FD.IO is VPP which stands for Vector Packet Processor. So emphasis on &lt;strong&gt;Vector&lt;/strong&gt; as opposed to Scalar Packet Processor wherein a single packet is processed at a time, VPP processes a vector of packets at a time which results in high performance. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It's like moving a load of marbles with a wheelbarrow instead of spoon&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are many exciting applications of VPP in Cloud Native and Networking space, I will be leaving links here for you to explore 🚀 &lt;br&gt;
&lt;a href="https://docs.projectcalico.org/getting-started/kubernetes/vpp/getting-started"&gt;Project Calico/VPP&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/swlh/kernel-bypass-networking-with-fd-io-and-vpp-fc3a53a669f9"&gt;VPP Case Study&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#architecture-monocleface"&gt;
  &lt;/a&gt;
  Architecture 🧐
&lt;/h2&gt;

&lt;p&gt;Here's the architecture of our project&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9cHn3xsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gg2px9agt7z37runma4s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9cHn3xsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gg2px9agt7z37runma4s.png" alt="alt text"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vppapitransport"&gt;
  &lt;/a&gt;
  VPP-API-Transport
&lt;/h3&gt;

&lt;p&gt;This crate is responsible for establishing a connection to a running VPP process either via a socket or a shared memory interface. It also holds various functions for sending data via the connection.  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vppapiencoding"&gt;
  &lt;/a&gt;
  VPP-API-Encoding
&lt;/h3&gt;

&lt;p&gt;Encoding library holds various encapsulated data structures that are responsible for interacting with VPP. The library majorly ensures the deserializing and serializng of data structures are compatible with VPP. We are using serde+bincode for all serializing and deserializing to binary. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vppapidriver"&gt;
  &lt;/a&gt;
  VPP-API-Driver
&lt;/h3&gt;

&lt;p&gt;Driver library consists of functions that makes use of ingredients of Transport and Encoding which allows sending messages and receiving them easier. There are 3 types of messages that can be sent to VPP. (Referenced from Developer Documentation of VPP) &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Request/Reply&lt;/strong&gt; The client sends a request message and the server replies with a single reply message. The convention is that the reply message is named as method_name + &lt;strong&gt;Reply&lt;/strong&gt;. Eg: &lt;code&gt;SwInterfaceAddDelAddressReply&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dump/Detail&lt;/strong&gt; The client sends a “bulk” request message to the server, and the server replies with a set of detail messages. These messages may be of different type. A dump/detail call must be enclosed in a control ping block (Otherwise the client will not know the end of the bulk transmission). The method name must end with method + &lt;strong&gt;Dump&lt;/strong&gt;, the reply message should be named method + &lt;strong&gt;Details&lt;/strong&gt;. The exception here is for the methods that return multiple message types (e.g. &lt;code&gt;SwInterfaceDump&lt;/code&gt;). The Dump/Detail methods are typically used for acquiring bulk information, like the complete FIB table or details of all the existing Interfaces.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Events&lt;/strong&gt; The client can register for getting asynchronous notifications from the server. This is useful for getting interface state changes, and so on. This a type of message that is not yet supported. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is a function that is responsible of sending Request/Reply message&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;send_recv_msg&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Serialize&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Deserialize&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Serialize&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;DeserializeOwned&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;VppApiTransport&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;reply_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;TR&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;vl_msg_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="nf"&gt;.get_msg_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reply_vl_msg_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="nf"&gt;.get_msg_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reply_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;enc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;get_encoder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="nf"&gt;.serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vl_msg_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;enc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;get_encoder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="nf"&gt;.serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="nf"&gt;.extend_from_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MSG[{} = 0x{:x}]: {:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vl_msg_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="nf"&gt;.write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="nf"&gt;.read_one_msg_id_and_msg&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c"&gt;// dbg!(&amp;amp;res);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;msg_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id: {} data: {:x?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;reply_vl_msg_id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;get_encoder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="nf"&gt;.allow_trailing_bytes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="py"&gt;.deserialize&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;panic!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Result is an error: {:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vppapigen"&gt;
  &lt;/a&gt;
  VPP-API-Gen
&lt;/h3&gt;

&lt;p&gt;This is the most important part of Rust VPP, As it ingests Binary APIs and generates Rust bindings as a separate package which is nothing but the &lt;strong&gt;VPP-API&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tGbSx-pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5idj3qiavu7jbad711b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tGbSx-pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5idj3qiavu7jbad711b.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;VPP provides a binary API scheme to allow a wide variety of client codes to program data-plane tables. As of this writing, there are hundreds of binary APIs. Messages are defined in &lt;code&gt;*.api&lt;/code&gt; files. However we are using Messages defined in &lt;code&gt;*.api.json*&lt;/code&gt; which are self contained api files written in JSON format. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vppapimacros"&gt;
  &lt;/a&gt;
  VPP-API-Macros
&lt;/h3&gt;

&lt;p&gt;Macro library consists of procedural macros that make the generated rust bindings more ergonomic and provide  sophisticated abstractions. The &lt;strong&gt;VPPMessage&lt;/strong&gt; macro is a builder macro that allows you to initialize VPP messages in a less tiring fashion and also implements a derive for message name and crc. Another macro &lt;strong&gt;VPPUnionIdent&lt;/strong&gt; creates accessor methods for the Union which makes it easier for the users to initialize it without having to fill the entire union. &lt;/p&gt;

&lt;p&gt;Here is an example of using builder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;create_host_interface&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CliInbandReply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;send_recv_msg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nn"&gt;CliInband&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get_message_name_and_crc&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nn"&gt;CliInband&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nf"&gt;.client_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="nf"&gt;.get_client_index&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="nf"&gt;.context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;.cmd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"create host-interface name vpp1out"&lt;/span&gt;&lt;span class="nf"&gt;.try_into&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="nf"&gt;.build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nn"&gt;CliInbandReply&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get_message_name_and_crc&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#future-and-testing"&gt;
  &lt;/a&gt;
  Future and Testing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The integration tests currently only ensure if the messages are sent to VPP and received back without checking if it's the reply we are expecting, It has been added into the CI of the repository using GitHub Actions.&lt;/li&gt;
&lt;li&gt;As mentioned earlier we do not support events messages as of now but hoping to develop it in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pull-requests-nerdface"&gt;
  &lt;/a&gt;
  Pull Requests 🤓
&lt;/h2&gt;

&lt;p&gt;Here are all my pull requests: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ayourtch/vpp-api-gen/pull/1"&gt;Linux Foundation Mentorship - Rust VPP Bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ayourtch/vpp-api-gen/pull/5"&gt;EnumFlags Generation &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ayourtch/vpp-api-gen/pull/6"&gt;Union Accessor Methods and Example File Manipulation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ayourtch/vpp-api-gen/pull/7"&gt;Documentation Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ayourtch/vpp-api-gen/pull/9"&gt;Updated with EnumFlag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ayourtch/vpp-api-encoding/pull/1"&gt;Adding IP address to the interface &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ayourtch/vpp-api-encoding/pull/2"&gt;EnumFlags and FixedSizeArray&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#things-i-learnt-sunglasses"&gt;
  &lt;/a&gt;
  Things I learnt 😎
&lt;/h2&gt;

&lt;p&gt;This project is the best project I've worked on so far, I got to explore and implement many Rust features &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Rust Macros&lt;/strong&gt;: I learnt and implemented procedural macros using Rust and created VPP-api-macros which proved to be very useful in making the code abstracted. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Serde&lt;/strong&gt;: I explored Serde which is a crate for serializing and deserializing, I was able to implement custom serialization and deserialization for EnumFlags and Unions. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;VPP&lt;/strong&gt;: It took me a while to get started and learn about VPP but by the end of the first half, I was able to grasp what VPP is and what it does. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Golang&lt;/strong&gt;: I learnt Go to explore GoVPP bindings and understand their philosophy in generating bindings and possibly using some of it in Rust VPP. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Traits&lt;/strong&gt;: Before the mentorship I was still struggling with properly understanding traits but during the course of the project I became much more confident about my understanding of traits &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Functional Programming in Rust&lt;/strong&gt;: Parts of the project has been written using concepts of Functional Programming, I sort of had to learn a bit of functional programming as I had mostly programmed using OOP. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-partyingface"&gt;
  &lt;/a&gt;
  Thank you 🥳
&lt;/h2&gt;

&lt;p&gt;Shoutout to the Rust Foundation Discord Server for always helping me out with my queries be it how silly they were.  &lt;a href="https://www.youtube.com/channel/UC_iD0xppBwwsrM9DegC5cQQ"&gt;Jon Gjengset&lt;/a&gt; for creating extensive videos on difficult parts of Rust, Linux Foundation for this amazing program that allowed me to work with Rust and lastly my mentor Andrew for guiding me at every step of the project. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Angular: The Single Rule To Get Better At RxJS</title>
      <author>David Dal Busco</author>
      <pubDate>Fri, 10 Sep 2021 12:06:48 +0000</pubDate>
      <link>https://dev.to/daviddalbusco/angular-the-single-rule-to-get-better-at-rxjs-1i64</link>
      <guid>https://dev.to/daviddalbusco/angular-the-single-rule-to-get-better-at-rxjs-1i64</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bIT3ZGJo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AnigHuCYvLjp9d92D.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bIT3ZGJo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AnigHuCYvLjp9d92D.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Even though there is no strict rule, combining imperative and declarative programming concepts with &lt;a href="https://rxjs.dev/"&gt;RxJS&lt;/a&gt; might be making the development harder and the code less clean.&lt;/p&gt;

&lt;p&gt;Shifting mind from a (often) default way of programming (i.e. imperative) to a reactive (i.e. declarative) approach, takes time.&lt;/p&gt;

&lt;p&gt;However, there is a single rule that can help  you make the switch:&lt;/p&gt;

&lt;p&gt;⚠️ Do &lt;strong&gt;not&lt;/strong&gt; subscribe, period ⚠️&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Confused about the difference between imperative and declarative? Have a look to the excellent &lt;a href="https://eliteionic.com/tutorials/imperative-vs-declarative-programming-with-rxjs-search-filter/"&gt;article&lt;/a&gt; of &lt;a href="https://twitter.com/joshuamorony"&gt;Josh Morony&lt;/a&gt; that compares both.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;The rule is not strict, it is a guideline, like the code of the pirates of the Caribbean 🏴‍☠️.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlQFNcal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AVBCiXqgoBrlzo4tQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlQFNcal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AVBCiXqgoBrlzo4tQ" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It does not mean that you should never ever subscribe to a stream but rather, that you should try to avoid it. In that way, according my experience, you are going to slowly transform the imperative way of programming into more declarative concepts.&lt;/p&gt;

&lt;p&gt;Concretely, while developing features in components, trying to use mostly the &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt; &lt;code&gt;| async&lt;/code&gt; pipe that automatically unsubscribe when components are destroyed, can in addition to avoid memory leak, help improve the coding style.&lt;/p&gt;

&lt;p&gt;To explore such modus operandi, let’s refactor an Angular application that mix imperative and declarative programming concepts.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#starting-point"&gt;
  &lt;/a&gt;
  Starting Point
&lt;/h3&gt;

&lt;p&gt;The following demo uses the &lt;a href="https://api.coinpaprika.com"&gt;coinpaprika API&lt;/a&gt; to display a list of cryptocurrencies to its user.&lt;/p&gt;

&lt;p&gt;The code source is available on &lt;a href="https://github.com/peterpeterparker/rxjs-no-subscribe"&gt;GitHub&lt;/a&gt;. Each following chapters (steps &lt;a href="https://github.com/peterpeterparker/rxjs-no-subscribe/tree/step_1"&gt;1&lt;/a&gt;, &lt;a href="https://github.com/peterpeterparker/rxjs-no-subscribe/tree/step_2"&gt;2&lt;/a&gt;, &lt;a href="https://github.com/peterpeterparker/rxjs-no-subscribe/tree/step_3"&gt;3&lt;/a&gt; and &lt;a href="https://github.com/peterpeterparker/rxjs-no-subscribe/tree/step_4"&gt;4&lt;/a&gt;) are separate branches.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bzamOAwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AYw5GBUxaeWBeC8bGIgMPlA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bzamOAwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AYw5GBUxaeWBeC8bGIgMPlA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It defers the HTTP queries to a &lt;code&gt;coins.service&lt;/code&gt; and presents the results in a &lt;code&gt;coins.component&lt;/code&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#service"&gt;
  &lt;/a&gt;
  Service
&lt;/h4&gt;

&lt;p&gt;The provider acts as a store. It queries the list of cryptos, filter the results and persists these in memory.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;list()&lt;/code&gt; is both reactive, by telling what it wants (&lt;code&gt;httpClient.get&lt;/code&gt;), and imperative by checking and filtering the results.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/common/http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;takeUntil&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;providedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CoinsService&lt;/span&gt; &lt;span class="kr"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;httpClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpClient&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.coinpaprika.com/v1/coins`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_new&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getCoins&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#component"&gt;
  &lt;/a&gt;
  Component
&lt;/h4&gt;

&lt;p&gt;The component initializes the service and exposes a getter binding to parse the results to the UI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CoinsService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../coins.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-coins&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./coins.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styleUrls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./coins.component.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CoinsComponent&lt;/span&gt; &lt;span class="kr"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;coinsService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CoinsService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coinsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coinsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCoins&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#template"&gt;
  &lt;/a&gt;
  Template
&lt;/h4&gt;

&lt;p&gt;The HTML list the coins.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let coin of coins"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ coin.name }}&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Symbol: {{ coin.symbol }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Rank: {{ coin.rank }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;hr&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#step-1-more-declarative"&gt;
  &lt;/a&gt;
  Step 1: (More) Declarative
&lt;/h3&gt;

&lt;p&gt;Even though I said above that the rule is actually a guideline, I would suggest anyway to &lt;strong&gt;never&lt;/strong&gt; subscribe in services, respectively to be more strict about memory leaks.&lt;/p&gt;




&lt;p&gt;As we do not want to subscribe, we have first to transform the method that is called by the component to return an &lt;code&gt;Observable&lt;/code&gt; .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpClient&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.coinpaprika.com/v1/coins`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Without any other changes, the compiler will warn you about the return values that are not matching (as we are still subscribing to the stream and therefore are actually returning a &lt;code&gt;Subscription&lt;/code&gt;). That’s why, we replace the &lt;code&gt;subscribe&lt;/code&gt; with an RxJS operator. In the particular case we are using &lt;a href="https://rxjs.dev/api/operators/tap"&gt;tap&lt;/a&gt; because we still want to assign the result to the store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpClient&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.coinpaprika.com/v1/coins`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_new&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we are now not subscribing anymore, we can remove the &lt;code&gt;takeUntil&lt;/code&gt; and let the caller handles the way it streams the data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/common/http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;providedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CoinsService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;httpClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpClient&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.coinpaprika.com/v1/coins`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_new&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getCoins&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code has already become cleaner, no more subscription and destroy lifecycle but, the code is still mixing different approaches. That’s why we take advantages of RxJS &lt;a href="https://rxjs.dev/api/operators/filter"&gt;filter&lt;/a&gt; and &lt;a href="https://rxjs.dev/api/operators/map"&gt;map&lt;/a&gt; operators to make it more reactive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpClient&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.coinpaprika.com/v1/coins`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_new&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;topCoins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;topCoins&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The imperative &lt;code&gt;if&lt;/code&gt; has become a reactive &lt;code&gt;filter&lt;/code&gt; and the &lt;code&gt;array.filter&lt;/code&gt; has been moved to a &lt;code&gt;map&lt;/code&gt; transformer. Thanks to these last modifications the data sources flow through the stream that describe what we want as a results.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-2-subscribe-in-component"&gt;
  &lt;/a&gt;
  Step 2: Subscribe In Component
&lt;/h3&gt;

&lt;p&gt;Even though the code still compiles, at this point no currencies are displayed anymore because no caller is using, is subscribing, to the stream.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AbyDPRMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AkNHqMcjFeNKFFOYNAZZMBg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AbyDPRMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AkNHqMcjFeNKFFOYNAZZMBg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we are proceeding iteratively, we basically reproduce what we removed in the service earlier, we subscribe within the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;takeUntil&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CoinsService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../coins.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-coins&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./coins.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styleUrls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./coins.component.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CoinsComponent&lt;/span&gt; &lt;span class="kr"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;coinsService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CoinsService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coinsService&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coinsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCoins&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know, I said “never subscribe”, this ain’t the end 😉. Nevertheless, we notice that the cryptos are listed again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y9BuiL2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AHB1cJ9j7em8iz4QodbUvHg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y9BuiL2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AHB1cJ9j7em8iz4QodbUvHg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-3-async-pipe"&gt;
  &lt;/a&gt;
  Step 3: Async Pipe
&lt;/h3&gt;

&lt;p&gt;To reach our ultimate goal, we want to remove the subscription in the component in order to leverage the &lt;code&gt;| async&lt;/code&gt; pipe. Therefore, we have to improve our service. On the other hand, we still want it to act as a store.&lt;/p&gt;

&lt;p&gt;That’s why, as an intermediate step, we replace the imperative state &lt;code&gt;coins&lt;/code&gt; of the service with a &lt;a href="https://rxjs.dev/api/index/class/BehaviorSubject"&gt;BehaviorSubject&lt;/a&gt;, a special type of Observable that allows values to be multicasted to many Observers (&lt;a href="https://rxjs.dev/guide/subject"&gt;source&lt;/a&gt;), and exposes it streams publicly as a &lt;code&gt;readonly Observable&lt;/code&gt; variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/common/http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BehaviorSubject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;providedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CoinsService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;httpClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BehaviorSubject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BehaviorSubject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
    &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;coins$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asObservable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpClient&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.coinpaprika.com/v1/coins`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_new&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;topCoins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topCoins&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In comparison to our previous changes, this is breaking. That’s why we have to adapt the component to remove the &lt;code&gt;getter&lt;/code&gt; and replace it with an observable we can ultimately use in the template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;takeUntil&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CoinsService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../coins.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-coins&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./coins.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styleUrls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./coins.component.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CoinsComponent&lt;/span&gt; &lt;span class="kr"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;coinsService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CoinsService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;coins$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coinsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coins$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coinsService&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we introduce the famous &lt;code&gt;async&lt;/code&gt; pipe.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;ngFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;let coin of coins$ | async&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#step-4-no-subscribe-and-reactive"&gt;
  &lt;/a&gt;
  Step 4: No Subscribe And Reactive
&lt;/h3&gt;

&lt;p&gt;Our current solution is really close to comply with the goals, we are using a stream to get the data and to display the results but, we still have to subscribe to trigger the loading the currencies.&lt;/p&gt;

&lt;p&gt;That’s why we try to remove the subject.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/common/http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;providedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CoinsService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;httpClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;coins$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- TODO&lt;/span&gt;

  &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpClient&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.coinpaprika.com/v1/coins`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_new&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We notice the exposed observable, &lt;code&gt;coins$&lt;/code&gt;, is now lacking a source.&lt;/p&gt;

&lt;p&gt;On the other hand, we still have the stream that process the flow of the data as we except.&lt;/p&gt;

&lt;p&gt;Yes, that’s right, we connect both.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;coins$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpClient&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.coinpaprika.com/v1/coins`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_new&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, doing so, we do loose the state management feature we had in place thanks to the use of the BehaviorSubject. That’s why we introduce a &lt;a href="https://rxjs.dev/api/operators/shareReplay"&gt;shareReplay&lt;/a&gt; that will also replay values, that will also make our service acts as a store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/common/http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;shareReplay&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;providedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CoinsService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;httpClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;coins$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpClient&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.coinpaprika.com/v1/coins`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;allCoins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_new&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rank&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;shareReplay&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;bufferSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;refCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you never used shareReplay before, be careful when using it. Read more in the &lt;a href="https://blog.strongbrew.io/share-replay-issue/"&gt;blog post&lt;/a&gt; of &lt;a href="http://kwintenp"&gt;Kwinten Pisman&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, we can remove our last subscription in the component and also all linked code that has for goal to handle the un-subscription.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CoinsService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../coins.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-coins&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./coins.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styleUrls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./coins.component.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CoinsComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;coinsService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CoinsService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;coins$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coin&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coinsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coins$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you compare to its original version, has not the component become really slim and easy to understand?&lt;/p&gt;

&lt;p&gt;A last check to the GUI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y9BuiL2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AHB1cJ9j7em8iz4QodbUvHg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y9BuiL2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AHB1cJ9j7em8iz4QodbUvHg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All cryptos are still listed, the code is reactive and, we are not using any “subscribe” anymore 🥳.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;Trying to not subscribe using RxJS in Angular is not a finality nor a strict rule but, when applied as a guideline, can help make the code cleaner and reactive, can help with the experience and time get better at RxJS.&lt;/p&gt;

&lt;p&gt;To infinity and beyond!&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;




&lt;p&gt;You can reach me on &lt;a href="https://twitter.com/daviddalbusco"&gt;Twitter&lt;/a&gt; or my &lt;a href="https://daviddalbusco.com"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Give a try to &lt;a href="https://deckdeckgo.com/"&gt;DeckDeckGo&lt;/a&gt; for your next presentations!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://deckdeckgo.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4yatxfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://deckdeckgo.com/assets/meta/deckdeckgo-meta.png" alt="DeckDeckGo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>rxjs</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Remmina İle Windows Makineye Uzaktan Masaüstü (Remote Desktop) Bağlantısı Kurma</title>
      <author>Turan Kılıç</author>
      <pubDate>Fri, 10 Sep 2021 12:00:43 +0000</pubDate>
      <link>https://dev.to/aciklab/remmina-i-le-windows-makineye-uzaktan-masaustu-remote-desktop-baglantisi-kurma-36h8</link>
      <guid>https://dev.to/aciklab/remmina-i-le-windows-makineye-uzaktan-masaustu-remote-desktop-baglantisi-kurma-36h8</guid>
      <description>&lt;p&gt;Merhabalar, bu yazımızda Windows makinelere Linux ortamında nasıl uzaktan bağlanabileceğinizi anlatacağım. Hadi başlayalım :)&lt;/p&gt;

&lt;p&gt;İlk olarak "Remmina" isimli uygulamayı indirmelisiniz. Eğer debian tabanlı bir linux distrosu kullanıyorsanız aşağıdaki komutu çalıştırmalısınız:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;apt install remmina&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Eğer farklı bir tabanda makineniz varsa onunla uyumlu yükleme komutunu kullanmanız gerekir. (Mesela CentOS rpm tabanlıdır ve &lt;strong&gt;yum&lt;/strong&gt; komutu ile yükleme yapılır)&lt;/p&gt;

&lt;p&gt;Yükleme tamamlandıktan sonra Remmina uygulamasını açalım:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--prI7zusE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0rlpoxmrtawvqyu3xoj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--prI7zusE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0rlpoxmrtawvqyu3xoj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Karşımıza çıkacak pencere aşağıdaki gibi olacaktır:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKrzG8Ag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwuagta6kpc0igya4bg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKrzG8Ag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwuagta6kpc0igya4bg9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bu pencerede yeni bir bağlantı oluşturmak için sol yukarıda içerisinde artı olan sayfa işaretine basalım:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PZYu3R1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28yklxzdgidggahlb7fn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PZYu3R1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28yklxzdgidggahlb7fn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Açılan pencerede önümüze birkaç farklı seçenek çıkmaktadır. Bu seçenekler:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Name:&lt;/strong&gt; Bağlantıya verilecek isim. (hatırlamanızda yardımcı olacak bir isim koymanız önerilir.)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Protocol:&lt;/strong&gt; Kurulacak bağlantının kullanacağı protokol. (Burada farklı opsiyonlar mevcuttur. Windows makine ile RDP protokolü üzerinden bağlantı kurulmaktadır. Eğer Linux makinesine bağlantı kurmak istenirse SSH protokolü kullanılır.)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Server:&lt;/strong&gt; Bağlantı kurulacak makinenin IP adresi.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;User name:&lt;/strong&gt; Bağlantı kurulacak makinenin lokal kullanıcı adı (login işleminde kullanılan lokal kullanıcı.)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;User password:&lt;/strong&gt; Bağlantı kurulacak makinenin lokal kullanıcısının şifresi.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Domain:&lt;/strong&gt; Bağlantı kurulacak makinenin içerisinde bulunduğu domain (boş bırakılabilir)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Resolution:&lt;/strong&gt; Bağlantının çözünürlüğünün ayarlanması (Genelde default olarak bırakılır. İsteğe göre farklı çözünürlük de ayarlanabilir.)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xwDpfbyL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2izvtp2r13xo031daigf.png" alt="image"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aşağıdaki gibi gerekli kısımları bağlantı kuracağımız makinenin bilgileri doğrultusunda dolduralım:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T2bjhXD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u826mvq79gd0f9kmm8hc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T2bjhXD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u826mvq79gd0f9kmm8hc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Daha sonra birkaç farklı seçenek ile işlem tamamlanabilir:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Save:&lt;/strong&gt; Makineyi sadece kaydeder, bağlantı kurmaz. Daha sonra makine ile bağlantı kurmak için ayarlar save edilir.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Connect:&lt;/strong&gt; Sadece bağlantı kurar, makineyi kaydetmez. Daha sonra makine ile bağlantı kurulması için tüm işlemler tekrardan gerçekleştirilmelidir.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Save and Connect:&lt;/strong&gt; Makineyi hem kaydeder hem de bağlantının kurulmasını sağlar. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BgxdsaI7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nd9hqabz0urgpc1j0q6k.png" alt="image"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Save and Connect diyerek işlemi tamamlayalım.&lt;br&gt;
Görüldüğü üzere Windows makinemiz daha sonra tekrardan bağlantı kurulabilmesi için kaydedildi ve bağlantı kuruldu.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FTqUCZwN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gt1j2k4brvj9g6bqnqp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FTqUCZwN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gt1j2k4brvj9g6bqnqp.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OrkVZxzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w55wz6jlpga0mqqymjk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OrkVZxzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w55wz6jlpga0mqqymjk.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Eğer bağlantı ekranının küçük olduğunu düşünüyorsanız, pencereyi tam ekran yaparak sol tarafta bulunan bu seçeneği seçebilirsiniz:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lV-aNmyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8iz8irnj8wrqt27bhmov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lV-aNmyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8iz8irnj8wrqt27bhmov.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ba%C4%9Flant%C4%B1-hatas%C4%B1"&gt;
  &lt;/a&gt;
  Bağlantı Hatası
&lt;/h3&gt;

&lt;p&gt;Eğer son adımda kaydedip bağlantı kurmak istediğinizde, &lt;strong&gt;bağlantı kurulamadı&lt;/strong&gt; hatası alıyorsanız Windows makineniz uzak bağlantıları kabul etmiyor olabilir. Bunun için çözüm aşağıda adım adım gösterilmektedir.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;İlk olarak Windows makinesi üstünde file explorer açılır. &lt;strong&gt;This PC&lt;/strong&gt; kısmına sağ tıklanır ve &lt;strong&gt;Properties&lt;/strong&gt; seçeneği işaretlenir.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MrClYH60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oppfgz2x8xby57vzrjwz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MrClYH60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oppfgz2x8xby57vzrjwz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Açılan pencerede &lt;strong&gt;Remote settings&lt;/strong&gt; kısmına gidilir.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kJwxWwc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aflaqsq682uyof9ip9hd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kJwxWwc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aflaqsq682uyof9ip9hd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Burada &lt;strong&gt;Allow remote connections to this computer&lt;/strong&gt; seçeneği işaretlenerek uzak bağlantılara izin verilir. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CjCfyDk2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zm7gu45sdzvnk4tri8j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CjCfyDk2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zm7gu45sdzvnk4tri8j.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bu işlem sonucunda bağlantı hatası almayacaksınız. :)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>20 Awesome React Component libraries to try in 2021</title>
      <author>Ajay Neman</author>
      <pubDate>Fri, 10 Sep 2021 11:45:36 +0000</pubDate>
      <link>https://dev.to/ajayneman45/20-awesome-react-component-libraries-to-try-in-2021-1dga</link>
      <guid>https://dev.to/ajayneman45/20-awesome-react-component-libraries-to-try-in-2021-1dga</guid>
      <description>&lt;p&gt;React js is one of the most famous, open-source frontend technology used in developing the single page application. One of the main factor of ReactJS’s popularity is its React components libraries. When it comes to creating modern React applications, these component libraries save the ample of time and effort. They have various pre-build components such as buttons, form input, icons, pagination, loader, menu, modal, date and time picker etc. By using these React component libraries, developers can create mind-blowing user interfaces and modern web designs for web and mobile apps.&lt;/p&gt;

&lt;p&gt;So without wasting much time. let's begin!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-react-bootstrap"&gt;
  &lt;/a&gt;
  1) React Bootstrap
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f3fJzouw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s6z1ekktzijonel0ai6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f3fJzouw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s6z1ekktzijonel0ai6.PNG" alt="React Bootstrap"&gt;&lt;/a&gt;&lt;br&gt;
website: &lt;a href="https://react-bootstrap.github.io/"&gt;React Bootstrap&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-material-ui-react"&gt;
  &lt;/a&gt;
  2) Material UI React
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GbVp80Pu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkc3rk2n2yoemaevaxa3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GbVp80Pu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkc3rk2n2yoemaevaxa3.PNG" alt="material UI"&gt;&lt;/a&gt;&lt;br&gt;
website: &lt;a href="https://material-ui.com/"&gt;Materil UI&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-react-router"&gt;
  &lt;/a&gt;
  3) React Router
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PL-rVrGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux7nhgis145urv6j8rco.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PL-rVrGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux7nhgis145urv6j8rco.PNG" alt="react router"&gt;&lt;/a&gt;&lt;br&gt;
website: &lt;a href="https://reactrouter.com/"&gt;React Router&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-ant-design-react"&gt;
  &lt;/a&gt;
  4) Ant Design React
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nvWSSviK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15sdaoosrv1e54a5skj7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nvWSSviK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15sdaoosrv1e54a5skj7.PNG" alt="Ant design react"&gt;&lt;/a&gt;&lt;br&gt;
website: &lt;a href="https://ant.design/"&gt;Ant Design React&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-rebass"&gt;
  &lt;/a&gt;
  5) Rebass
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EFpuNGBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ug2ax4tz9oxd9o9u7f9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EFpuNGBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ug2ax4tz9oxd9o9u7f9.PNG" alt="rebass"&gt;&lt;/a&gt;&lt;br&gt;
website: &lt;a href="https://rebassjs.org/"&gt;Rebass&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-semantic-ui-react"&gt;
  &lt;/a&gt;
  6) Semantic UI React
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uDEDYULT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrujlz38an3jgc8rtwfr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uDEDYULT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrujlz38an3jgc8rtwfr.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
website: &lt;a href="https://react.semantic-ui.com/"&gt;Semantic UI React&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-react-motion"&gt;
  &lt;/a&gt;
  7) React Motion
&lt;/h2&gt;

&lt;p&gt;React Motion is an animation library for React applications that makes it easy to create and implement realistic animations.&lt;br&gt;
website: &lt;a href="https://github.com/chenglou/react-motion"&gt;React Motion&lt;/a&gt;&lt;br&gt;
You can create the animation like this...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--klOa0mJU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30saibuarnr07ffr5m0w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--klOa0mJU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30saibuarnr07ffr5m0w.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://codesandbox.io/s/2j3povypxp?file=/src/index.js:0-873"&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-react-hook-form"&gt;
  &lt;/a&gt;
  8) React Hook Form
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7NUYIXfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/juy1vhp22uiukq94lirr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7NUYIXfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/juy1vhp22uiukq94lirr.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
website: &lt;a href="https://react-hook-form.com/"&gt;React Hook Form&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-redux"&gt;
  &lt;/a&gt;
  9) Redux
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Uu-ZIrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2h17k9rplebkvh7meq8v.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Uu-ZIrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2h17k9rplebkvh7meq8v.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
website: &lt;a href="https://react-redux.js.org/"&gt;Redux&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-react-360"&gt;
  &lt;/a&gt;
  10) React 360
&lt;/h2&gt;

&lt;p&gt;React 360 is a framework for the creation of interactive 360 experiences that run in your web browser.&lt;br&gt;
To know a bit more about it visit the below git repo&lt;br&gt;
&lt;a href="https://github.com/facebookarchive/react-360"&gt;https://github.com/facebookarchive/react-360&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-fabrics-react"&gt;
  &lt;/a&gt;
  11) FABRICS React
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gxSKCljT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba37wjenaxe9x94wg39d.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gxSKCljT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba37wjenaxe9x94wg39d.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
website: &lt;a href="https://react-fabric.github.io/#/"&gt;Fabrics React&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-react-virtualized"&gt;
  &lt;/a&gt;
  12) React Virtualized
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---PFSqkUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwhvpmzr3tbgcxbikskb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---PFSqkUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwhvpmzr3tbgcxbikskb.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
website: &lt;a href="https://bvaughn.github.io/react-virtualized/#/components/List"&gt;React Virtualized&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-react-desktop"&gt;
  &lt;/a&gt;
  13) React Desktop
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1oUUqAdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rw01ck8d6jmu3gkdor59.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1oUUqAdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rw01ck8d6jmu3gkdor59.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
website: &lt;a href="https://reactdesktop.js.org/"&gt;React Desktop&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-chakra-ui"&gt;
  &lt;/a&gt;
  14) Chakra UI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NEyTnl3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rj6rjw0uvxug69plad5i.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NEyTnl3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rj6rjw0uvxug69plad5i.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
website: &lt;a href="https://chakra-ui.com/"&gt;Chakra UI&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#15-react-final-form"&gt;
  &lt;/a&gt;
  15) React Final Form
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uT0z5dB4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utdn58h1dgo7zape9wqo.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uT0z5dB4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utdn58h1dgo7zape9wqo.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
website: &lt;a href="https://final-form.org/react/"&gt;React Final Form&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#16-styled-components"&gt;
  &lt;/a&gt;
  16) Styled Components
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ASDqpD8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws5hnhsbfitdjct7rme0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ASDqpD8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws5hnhsbfitdjct7rme0.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
website: &lt;a href="https://styled-components.com/"&gt;Styled Components&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#17-onsen-ui"&gt;
  &lt;/a&gt;
  17) Onsen UI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oBjnld59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98y6isxqoxdvyivat9i2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oBjnld59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98y6isxqoxdvyivat9i2.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
website: &lt;a href="https://onsen.io/"&gt;Onsen UI&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#18-react-admin"&gt;
  &lt;/a&gt;
  18) React Admin
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PKJ5bzd0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/460uj5wfq31q3pxcd1m2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PKJ5bzd0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/460uj5wfq31q3pxcd1m2.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
website: &lt;a href="https://marmelab.com/react-admin/"&gt;React Admin&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#19-react-suit"&gt;
  &lt;/a&gt;
  19) React Suit
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nPDOCAJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eu27exrro9z2uz82ggln.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nPDOCAJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eu27exrro9z2uz82ggln.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
website: &lt;a href="https://rsuitejs.com/"&gt;React Suit&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#20-react-toolbox"&gt;
  &lt;/a&gt;
  20) React Toolbox
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o77VuPWS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0x8ekkfubpygqtelr41.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o77VuPWS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0x8ekkfubpygqtelr41.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
website:&lt;a href="http://react-toolbox.io/#/"&gt;React Toolbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you got something new from this article. Thank You :)&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>design</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to get All URL Parameters with Javascript</title>
      <author>rrtutors</author>
      <pubDate>Fri, 10 Sep 2021 11:29:34 +0000</pubDate>
      <link>https://dev.to/rrtutors/how-to-get-all-url-parameters-with-javascript-1ndb</link>
      <guid>https://dev.to/rrtutors/how-to-get-all-url-parameters-with-javascript-1ndb</guid>
      <description>&lt;p&gt;How to read all url parameters from the URL. To do this we will use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams"&gt;URLSearchParams&lt;/a&gt; URLSearchParams is an interface which will provide methods to get the parameters&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QO3I27Qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/fetchparams-javascript.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QO3I27Qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/fetchparams-javascript.JPG" alt="Get all parameters from URL using Javascript"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;!DOCTYPE html&amp;gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;
        How To Get All URL Parameters
        using JavaScript?
    &lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;table&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ddd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;even&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f2f2f2&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

 &lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ddd&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

 &lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#04AA6D&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color:green;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    RRTutors
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;
    How To Get All URL Parameters
    With JavaScript?
&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    We will fetch all parameters from this url
    http://rrtutors.com/page?language=Javascript&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;subject=urlfetch&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;email=email@gmail.com
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Click on the button to get all the
    url parameters.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"getParameters()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Get URL parameters
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getParameters&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

         &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;urlString&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://rrtutors.com/page?language=Javascript&amp;amp;subject=urlfetch&amp;amp;email=email@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;paramString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;urlString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;queryString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;paramString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Key&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Value&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pair&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

         &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Key is:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;And values is: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

            &lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ele&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;//getParameters('http://rrtutors.com/page?language=Javascript&amp;amp;subject=urlfetch&amp;amp;email=email@gmail.com');&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;


&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*** More ***&lt;br&gt;
&lt;a href="https://rrtutors.com/tutorials/javascript-group-by-array-elements"&gt;How to groupby an array objects in Javascript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rrtutors.com/tutorials/how-do-you-parse-json-in-javascript"&gt;How do you parse JSON String with Javascript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Curated List: Awesome Hackathon Projects</title>
      <author>Olubisi Idris Ayinde💡</author>
      <pubDate>Fri, 10 Sep 2021 11:22:22 +0000</pubDate>
      <link>https://dev.to/olanetsoft/curated-list-awesome-hackathon-projects-55fc</link>
      <guid>https://dev.to/olanetsoft/curated-list-awesome-hackathon-projects-55fc</guid>
      <description>&lt;p&gt;Thank you for taking the time to read this article.&lt;/p&gt;

&lt;p&gt;As we all know, hackathons are one of the best ways to hone current skills and network with other brilliant minds; however, they are no longer limited to that because you can now win incredible rewards.🥳 &lt;/p&gt;

&lt;p&gt;I put together this incredible collection of hackathon projects created by a variety of people and submitted it to Hashnode.&lt;/p&gt;

&lt;p&gt;The complete list can be found on this GitHub repository.👇👇👇&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Olanetsoft"&gt;
        Olanetsoft
      &lt;/a&gt; / &lt;a href="https://github.com/Olanetsoft/awesome-hackathon-projects"&gt;
        awesome-hackathon-projects
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is a curated list of amazing hackathon projects
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
awesome-hackathon-projects&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/sindresorhus/awesome"&gt;&lt;img src="https://camo.githubusercontent.com/abb97269de2982c379cbc128bba93ba724d8822bfbe082737772bd4feb59cb54/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f617765736f6d652f643733303566333864323966656437386661383536353265336136336531353464643865383832392f6d656469612f62616467652e737667" alt="Awesome"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/b8ee0c63de955350f7789fbb66998d3be5a69eceea96d2be07694ef270bb75fc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6f6c616e6574736f66742d617070726f7665642d627269676874677265656e2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/b8ee0c63de955350f7789fbb66998d3be5a69eceea96d2be07694ef270bb75fc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6f6c616e6574736f66742d617070726f7665642d627269676874677265656e2e737667" alt=""&gt;&lt;/a&gt; &lt;a href="https://github.com/Olanetsoft/awesome-hackathon-projects#contributors-"&gt;&lt;img src="https://camo.githubusercontent.com/60f4e6a9ba8683a8303d97cab7693a1d022cc822a729ebeb434e801ce870eb67/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616c6c5f636f6e7472696275746f72732d312d6f72616e67652e7376673f7374796c653d666c61742d737175617265" alt="All Contributors"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/456a68969501b1efbb80f5a297574abc71ce0d0028fda1f285b358c626e703fd/68747470733a2f2f6d656469612e6973746f636b70686f746f2e636f6d2f766563746f72732f6861636b6174686c6f6e2d766563746f722d696c6c757374726174696f6e2d74696e792d70726f6772616d6d6572732d636f6d7065746974696f6e2d706572736f6e2d766563746f722d6964313138393837333835313f6b3d36266d3d3131383938373338353126733d3631327836313226773d3026683d5551564457466f62565848746349795f314f374a55456a456f64705952467361696436482d3242687262633d"&gt;&lt;img src="https://camo.githubusercontent.com/456a68969501b1efbb80f5a297574abc71ce0d0028fda1f285b358c626e703fd/68747470733a2f2f6d656469612e6973746f636b70686f746f2e636f6d2f766563746f72732f6861636b6174686c6f6e2d766563746f722d696c6c757374726174696f6e2d74696e792d70726f6772616d6d6572732d636f6d7065746974696f6e2d706572736f6e2d766563746f722d6964313138393837333835313f6b3d36266d3d3131383938373338353126733d3631327836313226773d3026683d5551564457466f62565848746349795f314f374a55456a456f64705952467361696436482d3242687262633d" alt="Hackathon Image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/url?sa=i&amp;amp;url=https%3A%2F%2Fwww.istockphoto.com%2Fillustrations%2Fhackathon&amp;amp;psig=AOvVaw0DHshJpx-IrIcbZTln7rqF&amp;amp;ust=1609679264778000&amp;amp;source=images&amp;amp;cd=vfe&amp;amp;ved=0CA0QjhxqFwoTCJDt-tyo_e0CFQAAAAAdAAAAABAD" rel="nofollow"&gt;image credit&lt;/a&gt;&lt;/p&gt;
  &lt;p&gt;
    &lt;b&gt;
      This is a curated list of awesome hackathon project.&lt;br&gt;
      Developers from different parts of the world have developed a lot of amazing projects during the hackathon on their Hashnode powered blogs.&lt;br&gt;
      Projects gets updated daily
    &lt;/b&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;i&gt;
      Want to contribute with some hackathon projects ? Awesome! Please, read the &lt;a href="https://github.com/Olanetsoft/awesome-hackathon-projectscontributing.md"&gt;contribution guidelines&lt;/a&gt; before contributing
    &lt;/i&gt;
  &lt;/p&gt;
&lt;h1&gt;
Projects&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://blog.yuvv.xyz/hashbot-a-twitter-bot-for-hashnode-articles-christmashackathon" rel="nofollow"&gt;A Twitter Bot For Hashnode&lt;/a&gt; - Hashbot: A Twitter Bot For Hashnode&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dannys.cloud/autocomplete-cloudformation-resources-vs-code" rel="nofollow"&gt;Autocomplete your CloudFormation Resources in VS Code&lt;/a&gt; - Autocomplete your CloudFormation Resources in VS Code&lt;/p&gt;
&lt;p&gt;&lt;a href="https://savio.xyz/code-a-hackathon-winning-ai-voice-recognition-app-complete-setup" rel="nofollow"&gt;AI Voice Recognition app&lt;/a&gt; - AI Voice Recognition app&lt;/p&gt;
&lt;p&gt;&lt;a href="https://trendster.hashnode.dev/alkatraz-an-app-that-helps-you-to-reach-your-goals-by-managing-your-habits-harperdb-hackathon" rel="nofollow"&gt;Alkatraz&lt;/a&gt; - Alkatraz: An app that helps you to Reach your goals by managing your Habits&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.amalshaji.com/amalytics-a-tiny-analytics-powered-by-harperdb" rel="nofollow"&gt;Analytics&lt;/a&gt; - Amalytics: A tiny analytics powered by HarperDB&lt;/p&gt;
&lt;p&gt;&lt;a href="https://prasanna-rkumar.hashnode.dev/anonion-get-unbiased-opinions-from-your-circle-anonymously" rel="nofollow"&gt;Anonion&lt;/a&gt; - Anonion: Get unbiased opinions from your circle anonymously&lt;/p&gt;
&lt;p&gt;&lt;a href="https://unclebigbay.com/introducing-the-anonymous-feedback-platform-powered-by-the-chern-stack" rel="nofollow"&gt;Annonymous feedback&lt;/a&gt; - The Anonymous Feedback Platform&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.greenroots.info/anko-a-dads-attempt-to-make-the-daughter-fall-in-love-with-mathematics-cklkz9dic013qgos18evgd9cz" rel="nofollow"&gt;Anko&lt;/a&gt; - ANKO: A dad's attempt to make the daughter fall in love with mathematics&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.abhinavrajesh.xyz/introducing-aura-see-your-mood-in-a-whole-new-light" rel="nofollow"&gt;Aura&lt;/a&gt; -…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Olanetsoft/awesome-hackathon-projects"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;It is, of course, open-source, and you are welcome to contribute. Don't forget to Star the repository 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.yuvv.xyz/hashbot-a-twitter-bot-for-hashnode-articles-christmashackathon"&gt;A Twitter Bot For Hashnode&lt;/a&gt; - Hashbot: A Twitter Bot For Hashnode&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dannys.cloud/autocomplete-cloudformation-resources-vs-code"&gt;Autocomplete your CloudFormation Resources in VS Code&lt;/a&gt; - Autocomplete your CloudFormation Resources in VS Code&lt;/p&gt;

&lt;p&gt;&lt;a href="https://savio.xyz/code-a-hackathon-winning-ai-voice-recognition-app-complete-setup"&gt;AI Voice Recognition app&lt;/a&gt; - AI Voice Recognition app&lt;/p&gt;

&lt;p&gt;&lt;a href="https://trendster.hashnode.dev/alkatraz-an-app-that-helps-you-to-reach-your-goals-by-managing-your-habits-harperdb-hackathon"&gt;Alkatraz&lt;/a&gt; - Alkatraz: An app that helps you to reach your goals by managing your Habits &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.amalshaji.com/amalytics-a-tiny-analytics-powered-by-harperdb"&gt;Analytics&lt;/a&gt; - Analytics: A tiny analytics powered by HarperDB&lt;/p&gt;

&lt;p&gt;&lt;a href="https://prasanna-rkumar.hashnode.dev/anonion-get-unbiased-opinions-from-your-circle-anonymously"&gt;Anonion&lt;/a&gt; - Anonion: Get unbiased opinions from your circle anonymously&lt;/p&gt;

&lt;p&gt;&lt;a href="https://unclebigbay.com/introducing-the-anonymous-feedback-platform-powered-by-the-chern-stack"&gt;Annonymous feedback&lt;/a&gt; - The Anonymous Feedback Platform&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.greenroots.info/anko-a-dads-attempt-to-make-the-daughter-fall-in-love-with-mathematics-cklkz9dic013qgos18evgd9cz"&gt;Anko&lt;/a&gt; - ANKO: A dad's attempt to make the daughter fall in love with mathematics&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.abhinavrajesh.xyz/introducing-aura-see-your-mood-in-a-whole-new-light"&gt;Aura&lt;/a&gt; - Aura: See your mood in a whole new light &lt;/p&gt;

&lt;p&gt;&lt;a href="https://denic.hashnode.dev/awesome-tech-blogs-platform"&gt;Awesome Tech blogs Platform&lt;/a&gt; - Awesome Tech blogs Platform &lt;/p&gt;

&lt;p&gt;&lt;a href="https://emmorais.hashnode.dev/edite-your-new-photoshop"&gt;Awesome Photoshop in 6 Days&lt;/a&gt; - How I Built My Own and Awesome Photoshop in 6 Days&lt;/p&gt;

&lt;p&gt;&lt;a href="https://articles.hashnode.dev/create-an-app-which-creates-beautiful-websites-without-writing-a-single-line-of-code-christmas-hackathon-project?guid=e4d7c4b2-b168-43fd-b619-4423518c5f87&amp;amp;deviceId=bef14081-b14b-4211-bc33-50811d08577b"&gt;App which creates beautiful websites without writing a single line of code&lt;/a&gt; - App which creates beautiful websites without writing a single line of code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hellosagar.hashnode.dev/assignmenthub-an-app-to-manage-assignments-for-university-professors-aws-amplify-hackathon"&gt;Assignment Hub&lt;/a&gt; - AssignmentHub: An App to manage assignments for university professors&lt;/p&gt;

&lt;p&gt;&lt;a href="https://geeky-chakri.hashnode.dev/calmly-christmas-hackathon-project-1"&gt;Calmly - A Simple Relaxation App&lt;/a&gt; - Calmly: A Simple Relaxation App&lt;/p&gt;

&lt;p&gt;&lt;a href="https://movi.hashnode.dev/my-first-react-project-hashnodes-hackathon-ckjciiawx0dwqkus1ajnvbdev"&gt;Cat Gallery&lt;/a&gt; - Cat gallery&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sanvi.hashnode.dev/code-an-app-that-will-take-screenshots-from-website-urls"&gt;Create screenshots from website URLs&lt;/a&gt; - Create screenshots from website URLs&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.abhinavrajesh.xyz/introducing-chatbotish"&gt;Chabotish&lt;/a&gt; - Adding Feedback, FAQ, Bug report, Feature request to your website made easy &lt;/p&gt;

&lt;p&gt;&lt;a href="https://avneesh0612.hashnode.dev/how-i-built-chatcube-with-nextjs-tailwindcss-clerk-and-firebase-and-a-walkthrough-of-the-app"&gt;ChatCube&lt;/a&gt; - ChatCube &lt;/p&gt;

&lt;p&gt;&lt;a href="https://coderwhodreams.hashnode.dev/learn-how-to-build-christmas-greeting-using-css-animations"&gt;Christmas greeting using CSS Animations&lt;/a&gt; - Christmas greeting using CSS Animations &lt;/p&gt;

&lt;p&gt;&lt;a href="https://brookcodez.hashnode.dev/christmas-music-playlist-christmas-hackathon-project"&gt;Christmas Music Playlist&lt;/a&gt; - Christmas Music Playlist &lt;/p&gt;

&lt;p&gt;&lt;a href="https://crunchcrunch.me/chrome-extension-to-publish-your-hashnode-article-to-devto"&gt;Chrome extension to publish your Hashnode article to Dev.to&lt;/a&gt; - Chrome extension to publish your Hashnode article to Dev.to &lt;/p&gt;

&lt;p&gt;&lt;a href="https://savio.xyz/introducing-code-house-a-whole-new-world-of-300-developer-cheatsheets"&gt;CodeHouse&lt;/a&gt; - Code House: A whole new world of 300+ Developer Cheatsheets 👨‍💻 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.sreyaj.dev/compito-project-management-app-angular-nestjs-auth0"&gt;Compito&lt;/a&gt; - A project management app built using Angular, NestJs &amp;amp; Auth0 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://yogeshyadav.hashnode.dev/confcube-virtual-tech-events-social-network"&gt;ConfCube&lt;/a&gt; - ConfCube: Virtual Tech Event's Social Network&lt;/p&gt;

&lt;p&gt;&lt;a href="https://lalit2005.hashnode.dev/copii"&gt;Copii&lt;/a&gt; - Copii: Ready to use fully functional copy button for GitHub README files &lt;/p&gt;

&lt;p&gt;&lt;a href="https://piyushsinha.tech/connectem-your-one-stop-to-simple-daily-meeting-scheduler"&gt;ConnectEm&lt;/a&gt; - ConnectEm: Your one-stop to simple Daily Meeting scheduler&lt;/p&gt;

&lt;p&gt;&lt;a href="https://divyaxavier.hashnode.dev/code-an-app-that-could-create-custom-qr-codes-for-free-my-christmas-hackathon-project"&gt;Custom QR Codes&lt;/a&gt; - Create custom QR Codes &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.jrgarciadev.com/devcover-easiest-way-to-generate-a-developer-portfolio"&gt;Devcover&lt;/a&gt; - Devcover: Easiest way to generate a developer portfolio &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.rutikwankhade.dev/devspace-get-top-posts-from-the-best-developer-platforms"&gt;DevSpace&lt;/a&gt; - devspace: get top posts from the best developer platforms&lt;/p&gt;

&lt;p&gt;&lt;a href="https://brayanarrieta.hashnode.dev/introducing-dev-interviewer-a-website-to-share-your-experience-with-tech-interviews"&gt;Dev Interviewer&lt;/a&gt;- Dev Interviewer🍾: A website to share your experience with tech interviews&lt;/p&gt;

&lt;p&gt;&lt;a href="https://unclebigbay.com/introducing-developer-typing-game-platform-powered-by-the-hern-stack"&gt;Developer typing Game&lt;/a&gt; - Developer Typing Game Platform powered by the HERN Stack &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.hrithwik.me/i-created-a-deep-linking-tech-for-youtube-influencers-and-marketeers"&gt;DeepLink&lt;/a&gt; - Deep Linking Tech for YouTube Influencers and Marketers &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.zack.computer/challenging-myself-to-make-a-product-in-72-hours-with-clerk-redwood"&gt;DomainWatch&lt;/a&gt; - DomainWatch is a website where you can search for available domain names, add them to a favourites list, get updates via email &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.usman-s.me/introducing-easy-pastes-easiest-way-to-create-and-share-code-pastes"&gt;Easy Paste&lt;/a&gt; - Easy Pastes: The easiest way to create and share code pastes &lt;/p&gt;

&lt;p&gt;&lt;a href="https://tijan.hashnode.dev/e-voting-with-qrcode"&gt;E-voting with Qrcode&lt;/a&gt; - E-voting with Qrcode&lt;/p&gt;

&lt;p&gt;&lt;a href="https://liyasthomas.hashnode.dev/ebb-feel-life-again-from-a-new-perspective-ckk5ac73708f6hls10uoj1nc5"&gt;EBB&lt;/a&gt; - ebb: Feel life again from a new perspective &lt;/p&gt;

&lt;p&gt;&lt;a href="https://yuvaraj.hashnode.dev/introducing-ed-quiz-an-educational-app-built-for-parents-and-teachers-to-evaluate-their-childrens-and-students"&gt;Ed Quiz&lt;/a&gt; - Ed-Quiz 🥳 🎊: An Educational App built for Parents &amp;amp; Teachers to evaluate their children's and students&lt;/p&gt;

&lt;p&gt;&lt;a href="https://siddhigate.hashnode.dev/eye-care-an-app-that-will-help-you-to-take-care-of-your-eyes"&gt;Eye Care&lt;/a&gt; - Eye Care: An app that will help you to take care of your eyes &lt;/p&gt;

&lt;p&gt;&lt;a href="https://adityamitra.hashnode.dev/featherify-the-image-substitute-generator"&gt;Featherify&lt;/a&gt; - Featherify: The Image Substitute Generator&lt;/p&gt;

&lt;p&gt;&lt;a href="https://abdessamad.hashnode.dev/feed-alert"&gt;Feed Alert&lt;/a&gt; - Feed Alert: an RSS Reader Powered by AWS Amplify &lt;/p&gt;

&lt;p&gt;&lt;a href="https://shannoncrabill.hashnode.dev/building-a-focused-breathing-animation-with-css-animations-and-keyframes-ckjev8kfv0142g3s11ihlffo7"&gt;Focused Breathing Animation with CSS Animations &amp;amp; Keyframes&lt;/a&gt; - Focused Breathing Animation with CSS Animations &amp;amp; Keyframes &lt;/p&gt;

&lt;p&gt;&lt;a href="https://mbosnjak.hashnode.dev/flashcoll-platform-to-share-your-github-projects-and-find-collaborators"&gt;Flahcoll&lt;/a&gt;- Flashcoll platform to share your GitHub projects and find collaborators &lt;/p&gt;

&lt;p&gt;&lt;a href="https://geeky-chakri.hashnode.dev/introducing-flow-the-minimalist-productivity-app"&gt;Flow&lt;/a&gt; - Flow: The Minimalist Productivity App&lt;/p&gt;

&lt;p&gt;&lt;a href="https://yuvaraj.hashnode.dev/introducing-goals-vine-tracks-your-goals-and-reminds-you-to-convert-them-into-reality"&gt;Goal Vine&lt;/a&gt; - Introducing Goals Vine&lt;/p&gt;

&lt;p&gt;&lt;a href="https://savio.xyz/introducing-gradient-king-never-again-run-out-of-gradients"&gt;Gradient King&lt;/a&gt; - Introducing Gradient King: Never again run out of gradients! 🌈 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://notesbypaul.hashnode.dev/introducing-handeespace-the-uber-for-service-providers"&gt;HandeeSpace&lt;/a&gt; - HandeeSpace: The "Uber" For Service Providers &lt;/p&gt;

&lt;p&gt;&lt;a href="https://geekysrm.hashnode.dev/introducing-hashnode-to-twitter"&gt;Hashnode to Twitter&lt;/a&gt; - Post bite-sized tweets of your Hashnode blog post to increase reach&lt;/p&gt;

&lt;p&gt;&lt;a href="https://under-engineered.hashnode.dev/hobbithole-your-personal-habit-tracker-with-friends"&gt;Hobbit Hole&lt;/a&gt; - HobbitHole: Your personal habit tracker with friends!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://candys.page/moodpraiser-fun-habit-tracker-to-keep-everyone-accountable"&gt;MoodPraiser&lt;/a&gt; - MoodPraiser: Fun habit tracker to keep everyone accountable &lt;/p&gt;

&lt;p&gt;&lt;a href="https://bashwoman.com/make-your-first-instagram-filter?guid=88ebd93d-9807-478a-941d-15816a860006&amp;amp;deviceId=bef14081-b14b-4211-bc33-50811d08577b"&gt;Instagram Filter&lt;/a&gt; - Create your instagram filter&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nisargkapkar.hashnode.dev/image-and-video-background-removal-using-deep-learning"&gt;Image &amp;amp; Video Background Removal using Deep Learning&lt;/a&gt; - Image &amp;amp; Video Background Removal using Deep Learning&lt;/p&gt;

&lt;p&gt;&lt;a href="https://msameeruddin.hashnode.dev/image-processing-separating-rgb-pixels"&gt;Image Processing - Separating RGB pixels&lt;/a&gt; - Image Processing: Separating RGB pixels &lt;/p&gt;

&lt;p&gt;&lt;a href="https://genicsblog.com/introducing-jekyllex-android-app"&gt;Jekyll&lt;/a&gt; - The easiest way to manage a Jekyll blog from an Android device&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.rohitjakhar.me/kuberam-jetpack-app"&gt;Kuberam&lt;/a&gt; - Manage all your transactions&lt;/p&gt;

&lt;p&gt;&lt;a href="https://learn.techseo.blog/litic"&gt;Litic&lt;/a&gt; - Litic: Analyse your web project and get insights about SEO, accessibility, security, and best practices&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logeekal.hashnode.dev/introducing-loudrr-not-just-another-commenting-engine"&gt;Loudrr&lt;/a&gt; - Loudrr: Not Just Another Commenting Engine&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codeadrian.hashnode.dev/magic-painter-christmas-hackathon-project"&gt;Magic Painter&lt;/a&gt; - Magic Painter: Christmas hackathon project&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jmh.hashnode.dev/making-ski-trips-safer-with-real-time-data"&gt;Making Ski Trips&lt;/a&gt; - Making Ski Trips Safer With Real-Time Data&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.gauravtewari.xyz/introducing-meowforms-build-custom-forms-with-no-backend-code-for-free-my-first-saas-product"&gt;MeowForms&lt;/a&gt; - Build Custom forms with no backend code for free&lt;/p&gt;

&lt;p&gt;&lt;a href="https://geeky-chakri.hashnode.dev/introducing-minicodecamp-a-free-online-mini-coding-bootcamp"&gt;MiniCodeCamp&lt;/a&gt; - MiniCodeCamp: A free online mini coding bootcamp &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.theashishmaurya.me/introducing-mapify-your-solution-to-all-your-node-based-content"&gt;Mapify&lt;/a&gt; - Your solution to all your Node-based content&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sahilpabale.me/introducing-noteli-the-note-taking-cli-tool"&gt;Noteli&lt;/a&gt; - The CLI Tool to Start Taking Notes with Auth0 Security🚀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://anirudhpanda.hashnode.dev/introducing-opentek"&gt;Opentek&lt;/a&gt; - Bye! Bye! to all the tiring Google Searches&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vishwajeetraj11.hashnode.dev/introducing-os-resume-oversimplified-resume-builder"&gt;OS Resume&lt;/a&gt; - Introducing OS Resume&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rohitjakhar.hashnode.dev/quizzon-harperdb-hackathon"&gt;Quizzon&lt;/a&gt; - Quizzon: Create and play unlimited quizzes free &lt;/p&gt;

&lt;p&gt;&lt;a href="https://lalit2005.hashnode.dev/pagely"&gt;Pagely&lt;/a&gt; - Pagely: Launch SEO friendly, blazing-fast websites from Notion, Google Sheets, GitHub, Airtable with Pagely &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.yuvgeek.tech/introducing-peek-place-to-share-and-gain-knowledge-with-highly-secured-video-conferencing-auth0-webrtc-angular"&gt;Peek&lt;/a&gt; - Place to share &amp;amp; gain knowledge with highly secured video conferencing (Auth0 + WebRTC + Angular)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.greenroots.info/princess-finder-using-react-ml5js-and-teachable-machine-learning-ckj8288ch03gew7s1ht1u3pmu"&gt;Princess Finder using React, ml5.js, and Teachable Machine Learning&lt;/a&gt; - Princess Finder using React, ml5.js, and Teachable Machine Learning &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.rutikwankhade.dev/how-i-built-my-own-productivity-app"&gt;Productivity App&lt;/a&gt; - Productivity App &lt;/p&gt;

&lt;p&gt;&lt;a href="https://vishwajeetraj11.hashnode.dev/introducing-product-board-a-project-management-platform"&gt;Product Board&lt;/a&gt; - A Project Management Platform &lt;/p&gt;

&lt;p&gt;&lt;a href="https://osi.codes/publish-articles-in-zen-mode-using-the-hashnode-cli"&gt;Publish Articles in Zen Mode Using the Hashnode CLI&lt;/a&gt; - Publish Articles in Zen Mode Using the Hashnode CLI&lt;/p&gt;

&lt;p&gt;&lt;a href="https://natalie.hashnode.dev/popcorn"&gt;Popcorn&lt;/a&gt; - A social media app for shows 📺 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://geeky-chakri.hashnode.dev/introducing-pocket-feed-the-one-stop-shop-for-content-you-love"&gt;Pocket Feed&lt;/a&gt; - The one-stop shop for content you love&lt;/p&gt;

&lt;p&gt;&lt;a href="https://yogeshchavan.hashnode.dev/random-color-palette-generator-with-copy-to-clipboard-functionality"&gt;Random Color Palette Generator&lt;/a&gt; - Random Color Palette Generator with Copy to Clipboard Functionality &lt;/p&gt;

&lt;p&gt;&lt;a href="https://milan090.hashnode.dev/how-i-made-a-react-chrome-extension-that-made-browsing-faster"&gt;React Chrome Extension&lt;/a&gt; - React Chrome Extension &lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrisdev.hashnode.dev/react-and-bootstrap-starter-template"&gt;React &amp;amp; Bootstrap Starter Template&lt;/a&gt; - React &amp;amp; Bootstrap Starter Template &lt;/p&gt;

&lt;p&gt;&lt;a href="https://saudchougle.hashnode.dev/repositree-github-repository-explorer"&gt;Repositree - Github Repository Explorer&lt;/a&gt; - Repositree: Github Repository Explorer &lt;/p&gt;

&lt;p&gt;&lt;a href="https://codevickk.hashnode.dev/creating-resumecraft-an-application-that-helps-you-create-resumes-ckjescfzx00u4h4s12n38azuk"&gt;ResumeCraft&lt;/a&gt; - Creating resumeCraft: An application that helps you create resumes &lt;/p&gt;

&lt;p&gt;&lt;a href="https://harshilparmar.hashnode.dev/create-santa-meme-and-download"&gt;Santa Meme And download&lt;/a&gt; - Santa Meme And download&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.alyssaholland.me/keyboard-shortcut-search"&gt;Shortcut search&lt;/a&gt; - Shortcut Search: Quickly Find a Shortcut with the Press of a Key &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.gauravtewari.xyz/sitesheet-convert-google-sheet-into-api-or-website-in-a-snap"&gt;Site Sheet&lt;/a&gt; - SiteSheet: Convert Google Sheet into API or Website in a Snap &lt;/p&gt;

&lt;p&gt;&lt;a href="https://townhall.hashnode.com/%5Bhttps://savio.xyz/introducing-slickr-the-most-powerful-cover-image-generator-for-your-hashnode-blog%5D"&gt;Slikr&lt;/a&gt; - Introducing Slickr: The most powerful Cover Image generator for your Hashnode blog ✨️ &lt;/p&gt;

&lt;p&gt;&lt;a href="https://yuridevat.hashnode.dev/sos-animals-hackathon-project"&gt;SOS Animal App&lt;/a&gt; - SOS Animals App &lt;/p&gt;

&lt;p&gt;&lt;a href="https://lalit2005.hashnode.dev/staticshield"&gt;Static Shield&lt;/a&gt; - StaticShield🛡: Password protect a website in less than 2 mins &lt;/p&gt;

&lt;p&gt;&lt;a href="https://aditya.hashnode.dev/storycruise-like-storybook-but-incredibly-fast-ckkb9ljbf06p6vas10kav5o0d"&gt;Storycruise&lt;/a&gt; - Storycruise: Like Storybook but incredibly fast&lt;/p&gt;

&lt;p&gt;&lt;a href="https://winnekes.hashnode.dev/say-hello-to-sturmglas-your-mental-weather-tracker"&gt;Sturmglas&lt;/a&gt; - Your Mental Weather Tracker&lt;/p&gt;

&lt;p&gt;&lt;a href="https://saviomartin.com/styler"&gt;Styler&lt;/a&gt; - The Next Generation CSS Builder in the Web for your Hashnode Blog&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vaibhav2002.hashnode.dev/taskify-an-app-to-manage-your-daily-tasks-and-boost-your-productivity-harperdb-hackathon"&gt;Taskify&lt;/a&gt; - Taskify: An app to manage your daily tasks and boost your productivity&lt;/p&gt;

&lt;p&gt;&lt;a href="https://manan.hashnode.dev/nuggets-text-summary"&gt;Text summarization browser extension and web app&lt;/a&gt; - Text summarization browser extension and web app &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.oshogunle.com/techie-jargon-browse-technical-terms-for-definition-cklo1jv4x03608us12yta227b"&gt;Techie Jargon&lt;/a&gt; - Techie Jargon: Browse Technical Terms for Definition&lt;/p&gt;

&lt;p&gt;&lt;a href="https://lo-victoria.com/how-i-built-my-first-trading-bot-for-hashnodes-hackathon"&gt;Trading Bot&lt;/a&gt; - Trading Bot&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.greenroots.info/introducing-tryshape-give-your-creativity-a-shape"&gt;Try Shape&lt;/a&gt; - Introducing TryShape: Give Your Creativity a Shape&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hieudien.hashnode.dev/url-shortener-and-manager-with-clerk-x-nextjs-x-tailwindcss"&gt;URL shortener and manager&lt;/a&gt; - URL shortener and manager&lt;/p&gt;

&lt;p&gt;&lt;a href="https://frenco.hashnode.dev/vscode-vercel-an-extension-for-your-favorite-code-editor"&gt;VSCode Vercel&lt;/a&gt; - VSCode Vercel: an extension for your favourite code editor &lt;/p&gt;

&lt;p&gt;&lt;a href="https://hardikk2002.hashnode.dev/how-i-made-xpro-a-next-generation-code-editor"&gt;Xpro&lt;/a&gt; - Xpro: A Next-Generation Code Editor!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://folafola.hashnode.dev/creating-a-web-scraping-application-using-laravel?guid=c4aa1761-c7aa-459c-9c6b-00e80f2110db&amp;amp;deviceId=bef14081-b14b-4211-bc33-50811d08577b"&gt;Web Scraping Application Using Laravel&lt;/a&gt; - Web Scraping Application Using Laravel&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Kindly add more by submitting a pull request to the &lt;a href="https://github.com/Olanetsoft/awesome-hackathon-projects"&gt;GitHub repository&lt;/a&gt;, and I'll update this post to reflect what's in the repository.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Feel free to contribute, the complete list can be found on this GitHub repository.👇👇👇&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Olanetsoft"&gt;
        Olanetsoft
      &lt;/a&gt; / &lt;a href="https://github.com/Olanetsoft/awesome-hackathon-projects"&gt;
        awesome-hackathon-projects
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is a curated list of amazing hackathon projects
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
awesome-hackathon-projects&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/sindresorhus/awesome"&gt;&lt;img src="https://camo.githubusercontent.com/abb97269de2982c379cbc128bba93ba724d8822bfbe082737772bd4feb59cb54/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f617765736f6d652f643733303566333864323966656437386661383536353265336136336531353464643865383832392f6d656469612f62616467652e737667" alt="Awesome"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/b8ee0c63de955350f7789fbb66998d3be5a69eceea96d2be07694ef270bb75fc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6f6c616e6574736f66742d617070726f7665642d627269676874677265656e2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/b8ee0c63de955350f7789fbb66998d3be5a69eceea96d2be07694ef270bb75fc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6f6c616e6574736f66742d617070726f7665642d627269676874677265656e2e737667" alt=""&gt;&lt;/a&gt; &lt;a href="https://github.com/Olanetsoft/awesome-hackathon-projects#contributors-"&gt;&lt;img src="https://camo.githubusercontent.com/60f4e6a9ba8683a8303d97cab7693a1d022cc822a729ebeb434e801ce870eb67/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616c6c5f636f6e7472696275746f72732d312d6f72616e67652e7376673f7374796c653d666c61742d737175617265" alt="All Contributors"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/456a68969501b1efbb80f5a297574abc71ce0d0028fda1f285b358c626e703fd/68747470733a2f2f6d656469612e6973746f636b70686f746f2e636f6d2f766563746f72732f6861636b6174686c6f6e2d766563746f722d696c6c757374726174696f6e2d74696e792d70726f6772616d6d6572732d636f6d7065746974696f6e2d706572736f6e2d766563746f722d6964313138393837333835313f6b3d36266d3d3131383938373338353126733d3631327836313226773d3026683d5551564457466f62565848746349795f314f374a55456a456f64705952467361696436482d3242687262633d"&gt;&lt;img src="https://camo.githubusercontent.com/456a68969501b1efbb80f5a297574abc71ce0d0028fda1f285b358c626e703fd/68747470733a2f2f6d656469612e6973746f636b70686f746f2e636f6d2f766563746f72732f6861636b6174686c6f6e2d766563746f722d696c6c757374726174696f6e2d74696e792d70726f6772616d6d6572732d636f6d7065746974696f6e2d706572736f6e2d766563746f722d6964313138393837333835313f6b3d36266d3d3131383938373338353126733d3631327836313226773d3026683d5551564457466f62565848746349795f314f374a55456a456f64705952467361696436482d3242687262633d" alt="Hackathon Image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/url?sa=i&amp;amp;url=https%3A%2F%2Fwww.istockphoto.com%2Fillustrations%2Fhackathon&amp;amp;psig=AOvVaw0DHshJpx-IrIcbZTln7rqF&amp;amp;ust=1609679264778000&amp;amp;source=images&amp;amp;cd=vfe&amp;amp;ved=0CA0QjhxqFwoTCJDt-tyo_e0CFQAAAAAdAAAAABAD" rel="nofollow"&gt;image credit&lt;/a&gt;&lt;/p&gt;
  &lt;p&gt;
    &lt;b&gt;
      This is a curated list of awesome hackathon project.&lt;br&gt;
      Developers from different parts of the world have developed a lot of amazing projects during the hackathon on their Hashnode powered blogs.&lt;br&gt;
      Projects gets updated daily
    &lt;/b&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;i&gt;
      Want to contribute with some hackathon projects ? Awesome! Please, read the &lt;a href="https://github.com/Olanetsoft/awesome-hackathon-projectscontributing.md"&gt;contribution guidelines&lt;/a&gt; before contributing
    &lt;/i&gt;
  &lt;/p&gt;
&lt;h1&gt;
Projects&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://blog.yuvv.xyz/hashbot-a-twitter-bot-for-hashnode-articles-christmashackathon" rel="nofollow"&gt;A Twitter Bot For Hashnode&lt;/a&gt; - Hashbot: A Twitter Bot For Hashnode&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dannys.cloud/autocomplete-cloudformation-resources-vs-code" rel="nofollow"&gt;Autocomplete your CloudFormation Resources in VS Code&lt;/a&gt; - Autocomplete your CloudFormation Resources in VS Code&lt;/p&gt;
&lt;p&gt;&lt;a href="https://savio.xyz/code-a-hackathon-winning-ai-voice-recognition-app-complete-setup" rel="nofollow"&gt;AI Voice Recognition app&lt;/a&gt; - AI Voice Recognition app&lt;/p&gt;
&lt;p&gt;&lt;a href="https://trendster.hashnode.dev/alkatraz-an-app-that-helps-you-to-reach-your-goals-by-managing-your-habits-harperdb-hackathon" rel="nofollow"&gt;Alkatraz&lt;/a&gt; - Alkatraz: An app that helps you to Reach your goals by managing your Habits&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.amalshaji.com/amalytics-a-tiny-analytics-powered-by-harperdb" rel="nofollow"&gt;Analytics&lt;/a&gt; - Amalytics: A tiny analytics powered by HarperDB&lt;/p&gt;
&lt;p&gt;&lt;a href="https://prasanna-rkumar.hashnode.dev/anonion-get-unbiased-opinions-from-your-circle-anonymously" rel="nofollow"&gt;Anonion&lt;/a&gt; - Anonion: Get unbiased opinions from your circle anonymously&lt;/p&gt;
&lt;p&gt;&lt;a href="https://unclebigbay.com/introducing-the-anonymous-feedback-platform-powered-by-the-chern-stack" rel="nofollow"&gt;Annonymous feedback&lt;/a&gt; - The Anonymous Feedback Platform&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.greenroots.info/anko-a-dads-attempt-to-make-the-daughter-fall-in-love-with-mathematics-cklkz9dic013qgos18evgd9cz" rel="nofollow"&gt;Anko&lt;/a&gt; - ANKO: A dad's attempt to make the daughter fall in love with mathematics&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.abhinavrajesh.xyz/introducing-aura-see-your-mood-in-a-whole-new-light" rel="nofollow"&gt;Aura&lt;/a&gt; -…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Olanetsoft/awesome-hackathon-projects"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;As you may have observed, only the winners and runner-up projects appear on the repository.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kindly submit a &lt;code&gt;PR&lt;/code&gt; to include yours and, of course, to help your project reach a wider audience.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I'd love to connect with you at &lt;a href="https://twitter.com/olanetsoft"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/olubisi-idris-ayinde-05727b17a/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/Olanetsoft"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you in my next blog article. Take care!!!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
