<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 5 Advantages of Ai Chatbots for Business</title>
      <author>Chris Fowler</author>
      <pubDate>Thu, 08 Jul 2021 04:31:31 +0000</pubDate>
      <link>https://dev.to/dsvdeveloper88/top-5-advantages-of-ai-chatbots-for-business-1o18</link>
      <guid>https://dev.to/dsvdeveloper88/top-5-advantages-of-ai-chatbots-for-business-1o18</guid>
      <description>&lt;p&gt;Chatbots are based on Machine Learning to gather conversational cadences that allow them to copy human conversations and react to written or spoken requests to deliver a service. They comprehend language, not just commands, since they use AI.&lt;/p&gt;

&lt;p&gt;Chatbots are bringing a new way for businesses to communicate with the world and most importantly with their customers by the help of exploding popularity of messaging apps, the accelerated development of all kinds of sensors and wearables and of course with the rise of emerging technologies and &lt;a href="http://www.designveloper.com/blog/best-ai-chatbot-smartest-ai-chatbot/"&gt;AI chatbots&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQ-XHjES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dga5qmnu9x4mb1rn3uz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQ-XHjES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dga5qmnu9x4mb1rn3uz.jpg" alt="ai chatbots"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take a look at the top 5 benefits of chatbots, and have a better understanding of how they can contribute to your business.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-cost-savings"&gt;
  &lt;/a&gt;
  1. Cost Savings
&lt;/h2&gt;

&lt;p&gt;Businesses have a variety of options from ready-made softwares developed by Facebook, Microsoft and other big IT companies to choose.&lt;/p&gt;

&lt;p&gt;First of all, implementing a full functioning chatbot, is much cheaper and faster than creating a cross platform app or hiring employees for each task. Since chatbots are automated solutions, they allow organizations to handle many customers at once, and simultaneously.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-easier-approach-to-global-markets"&gt;
  &lt;/a&gt;
  2. Easier Approach to Global Markets
&lt;/h2&gt;

&lt;p&gt;Whether you are already an international brand with customers all over the world, or a local brand who is ready for global business, &lt;a href="https://www.designveloper.com/blog/what-is-chatbot-and-how-does-it-work/"&gt;chatbots&lt;/a&gt; can solve your customer care problems in multiple languages and 24/7, 365 days a year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-better-lead-generation-qualification-and-nurturing"&gt;
  &lt;/a&gt;
  3. Better Lead Generation, Qualification and Nurturing
&lt;/h2&gt;

&lt;p&gt;Personalized messaging that assists consumers along “buyer’s journey” is possible with the consumer information that chatbots receive. Besides, a chatbot can also help you to determine the unqualified leads through identified KPIs and prevent you to deal with time-consuming leads.&lt;/p&gt;

&lt;p&gt;Chatbots ensure the flow is in the right direction to get higher conversion rates. Moreover, a bot can ask the necessary and related questions, persuade the user and generate a lead for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-improved-customer-service"&gt;
  &lt;/a&gt;
  4. Improved Customer Service
&lt;/h2&gt;

&lt;p&gt;Chatbots can provide assistance real-time like a sales person in a real store. In addition, along with text and voice, they can present customers rich content with product pages, images, blog entries, tutorial videos based on their responses that can help them through their journey. Moreover, chatbots can offer an interactive communication where they also ask questions to understand the real problem.&lt;/p&gt;

&lt;p&gt;With the help of &lt;a href="https://www.designveloper.com/blog/top-5-best-chatbot-platform/"&gt;chatbot platforms&lt;/a&gt;, organizations can handle more tasks at the same time so that no customer has to wait. This will allow companies to scale up their operations to new markets globally without multiplying incoming requests to be handled.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-keeping-up-with-the-trends"&gt;
  &lt;/a&gt;
  5. Keeping Up with the Trends
&lt;/h2&gt;

&lt;p&gt;Since customers’ preferences verge to interact with brands via chat -as it’s easier and faster to use- businesses have now the opportunity to reach more customers via Chatbots while staying trendy for their customers.&lt;/p&gt;

&lt;p&gt;Therefore, integrating your own chatbot into one of the popular platforms that your customers use daily, can be better than building a new app by saving money and time. Furthermore, 65% of smartphone users don’t download any new apps in a month. Since users have their core apps such as Facebook, Instagram, WhatsApp etc., they don’t look for new ones.&lt;/p&gt;

</description>
      <category>analyst</category>
      <category>techtalks</category>
      <category>computerscience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Difference between API and Web Service</title>
      <author>Chhotu</author>
      <pubDate>Thu, 08 Jul 2021 04:24:10 +0000</pubDate>
      <link>https://dev.to/chhotu05/difference-between-api-and-web-service-3oeb</link>
      <guid>https://dev.to/chhotu05/difference-between-api-and-web-service-3oeb</guid>
      <description>&lt;p&gt;Let's see what definitions says.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API (Application Programming Interface) is a software interface that permits two applications to interact directly with each other without any user intervention.&lt;/li&gt;
&lt;li&gt;Web service is a collection of some open protocols and standards which are used to exchange data between systems or applications.

Now Let's understand the differences between them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Web services and APIs are two of these overlapping tech terms that often get confused. you would possibly have even heard these words used interchangeably, but are they even an equivalent thing?&lt;/p&gt;

&lt;p&gt;Here is the answer:&lt;br&gt;
   An API is an interface that permits you to build on the data and functionality of potentially another application, while a web service is a network-based resource that fulfills a specific task.&lt;br&gt;
   Yes, they overlap on each other: all web services are APIs, but not all APIs are web services.&lt;/p&gt;

&lt;p&gt;Contrary to what you would possibly think, APIs and web services aren't mutually exclusive. One is a subset of the other: every web service is an API — since it exposes an application’s data and it's functionality — but not every API is a web service. this is often because the definition of a web service is sort of restrictive when it involves implementation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Web services require a network&lt;/strong&gt;. While APIs can be offline or online, web services must use a network.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;APIs are generally protocol agnostic&lt;/strong&gt;. Web services usually use SOAP (but sometimes REST, UDDI, and XML-RPC), whereas APIs can use any protocols or design styles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aq-8DEFe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8l2ibhi15ksgsjq8eazr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aq-8DEFe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8l2ibhi15ksgsjq8eazr.jpg" alt="API vs WebServices"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some of the key differences are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API is used for any style of communication, whereas Web service is used for only REST, SOAP and XML-RPC for communication.&lt;/li&gt;
&lt;li&gt;API supports both HTTP and HTTPS protocol, whereas Web service supports only HTTP protocol.&lt;/li&gt;
&lt;li&gt;API supports XML and JSON, whereas Web service only supports XML.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>systems</category>
      <category>architecture</category>
      <category>functional</category>
    </item>
    <item>
      <title>Angular Dev's first React project - Netflix clone</title>
      <author>Ajit Singh</author>
      <pubDate>Thu, 08 Jul 2021 03:36:34 +0000</pubDate>
      <link>https://dev.to/ajitsinghkaler/angular-dev-s-first-react-project-netflix-clone-fe</link>
      <guid>https://dev.to/ajitsinghkaler/angular-dev-s-first-react-project-netflix-clone-fe</guid>
      <description>&lt;p&gt;I am an angular collaborator and an avid user of Angular this is my first react project a netflix clone using react, styled components, jest tests. It uses firebase firestore as the DB if you want to run it you have to set it up using the seed data already given. To setup follow the instruction in readme and firebase.prod.js. You can also fork my &lt;a href="https://github.com/ajitsinghkaler/netflix"&gt;repo&lt;/a&gt; or set it upto learn more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#few-of-my-positive-experiences"&gt;
  &lt;/a&gt;
  Few of my positive experiences
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Creating a component in React.js is a dream components cannot be created easier than this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hooks for state management - Hooks are a really easy paradigm for state management &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#neutral-experiences"&gt;
  &lt;/a&gt;
  Neutral experiences
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Styled components - Suffers from scalability problems writing styles again and again seemed weird but the scoping was great.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#negative-experiences"&gt;
  &lt;/a&gt;
  Negative experiences
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Context was weird Calling use context again and again seemed odd somehow. Maybe I'm not accustomed to it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to find right tools for the job you are trying to do. React has so many options which is great but I makes choosing the right tool. That much harder&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to scale react could not find good resources on it. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#angular-apparent-short-comings-after-using-react"&gt;
  &lt;/a&gt;
  Angular apparent short comings after using React
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;State Management- It has nothing compared to hooks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Component creation is so hard in Angular&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why do we need modules. Why?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular team giving every package has taken its toll on angular innovation. Not much is tried by the community in angular.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#angular-strong-suit"&gt;
  &lt;/a&gt;
  Angular strong suit
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Angular basics will always be same because of the same lib use so easy to work on multiple project&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular directives there is nothing like them &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular schematics setting up libs for you is great&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#css-management"&gt;
  &lt;/a&gt;
  CSS Management
&lt;/h2&gt;

&lt;p&gt;I don't know how we got to this place in frontend but there is no great way in Angular or react to manage your CSS is important in frontend but not much attention or tooling is there for managing it&lt;/p&gt;

&lt;p&gt;Let me know in the comments if I'm wrong about something or I nee to study more I'm trying to learn other frameworks so that I know more paradigms in frontend development.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Project 88 of 100 - Lorem Ipsum Generator</title>
      <author>James Hubert</author>
      <pubDate>Thu, 08 Jul 2021 03:10:27 +0000</pubDate>
      <link>https://dev.to/jwhubert91/project-88-of-100-lorem-ipsum-generator-4bj0</link>
      <guid>https://dev.to/jwhubert91/project-88-of-100-lorem-ipsum-generator-4bj0</guid>
      <description>&lt;p&gt;&lt;em&gt;Hey! I'm on a mission to make 100 React.js projects. Please follow my dev.to profile or my &lt;a href="https://www.twitter.com/jwhubert91"&gt;twitter&lt;/a&gt; for updates and feel free to reach out if you have questions. Thanks for your support!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Link to today's deployed app: &lt;a href="https://100-react-projects-day-88-lorem-ipsum-generator.netlify.app/"&gt;Link&lt;/a&gt;&lt;br&gt;
Link to the repo: &lt;a href="https://github.com/jwhubert91/100daysofreact/tree/master/day-88-lorem-ipsum"&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is part 8 of 15 in a series on building React projects by John Smilga, covered in &lt;a href="https://www.youtube.com/watch?v=a_7Z7C_JCyo"&gt;this 10 hour video&lt;/a&gt; on Youtube.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like projects like this and want to stay up to date with more, check out my Twitter &lt;a href="https://twitter.com/jwhubert91"&gt;@jwhubert91&lt;/a&gt;, I follow back! See you tomorrow for another project.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>DEV Protip: Set the Slug of your posts</title>
      <author>Siddharth</author>
      <pubDate>Thu, 08 Jul 2021 02:57:07 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/dev-tip-set-slug-46an</link>
      <guid>https://dev.to/siddharthshyniben/dev-tip-set-slug-46an</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;When creating a post, set it's title to the slug you like and then publish it. You can change the title to the desired one later.&lt;/p&gt;




&lt;p&gt;Check out the slug of this post ^ up there. Do you see it? &lt;/p&gt;

&lt;p&gt;The slug should have been &lt;code&gt;dev-protip-set-the-slug-of-your-posts&lt;/code&gt; or something like that. But instead, it is &lt;code&gt;dev-tip-set-slug&lt;/code&gt;, which is much more readable. Here, I'll show you how to set the slugs of any post.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: This won't work for published posts. You have to do this when you create a new post or edit a draft.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create a Post&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KXtBL0Rb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zd327wxordp2wt0yba8i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KXtBL0Rb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zd327wxordp2wt0yba8i.png" alt="create-post"&gt;&lt;/a&gt;&lt;/p&gt;
Click on that button at the top right


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Set the title of the post as the slug&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zJVDftz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1762g5raj53vypysbchr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zJVDftz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1762g5raj53vypysbchr.png" alt="set-slug"&gt;&lt;/a&gt;&lt;/p&gt;
Choose a small, appropriate slug

 &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Write your content and publish the post&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can continue writing your post's contents. Just make sure to not change the title. Once you finish, you can publish the post.&lt;/p&gt;

&lt;p&gt;Now, the slug will be generated from the post title.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MIbxGTii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nh48z2mi2qeoahumfsge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MIbxGTii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nh48z2mi2qeoahumfsge.png" alt="view-slug"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fix the title&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, you edit the post and set the proper title, then you can click &lt;code&gt;Save Changes&lt;/code&gt;. The trick here is that if you edit the title, the &lt;a href="https://github.com/forem/forem/issues/5653"&gt;slug will not be recalculated&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Done!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can continue making changes to the title, body and tags, but the slug will never change. This is supposed to be a bug, but it can be sort of useful.&lt;/p&gt;

&lt;p&gt;If you want, you can view the post which I showed you in this post &lt;a href="https://dev.to/siddharthshyniben/this-is-the-slug-3079"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
    </item>
    <item>
      <title>This is the title</title>
      <author>Siddharth</author>
      <pubDate>Thu, 08 Jul 2021 02:51:05 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/this-is-the-slug-3079</link>
      <guid>https://dev.to/siddharthshyniben/this-is-the-slug-3079</guid>
      <description>&lt;p&gt;Testing &lt;a href="https://dev.to/siddharthshyniben/dev-tip-set-slug-46an"&gt;this&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Feeling burnt out or unmotivated? Read this.</title>
      <author>Karina Pichardo</author>
      <pubDate>Thu, 08 Jul 2021 00:03:48 +0000</pubDate>
      <link>https://dev.to/karinapichardo/feeling-burnt-out-or-unmotivated-read-this-4po9</link>
      <guid>https://dev.to/karinapichardo/feeling-burnt-out-or-unmotivated-read-this-4po9</guid>
      <description>&lt;p&gt;Just a few weeks ago I was feeling unmotivated and sort of burnt out?&lt;/p&gt;

&lt;p&gt;I’m finally out of that funk I was in and I realized why I was there in the first place.&lt;/p&gt;

&lt;p&gt;I was working on projects that were all really similar, I would finish up a project and immediately start another one, using the same exact techniques and technologies as the last. &lt;/p&gt;

&lt;p&gt;I thought I was doing myself a favor by practicing repetition and although I still believe that “practice makes perfect”, I think it’s equally important to continue learning and growing, especially as a developer. &lt;/p&gt;

&lt;p&gt;So I did just that, I started learning more about the terminal and also learned Sass (which I’m absolutely obsessed with now). And I'm back to feeling like myself again.&lt;/p&gt;

&lt;p&gt;I’m actually grateful that I experienced those stressful weeks leading up to today because I now understand how to navigate those “burnt out” / “unmotivated” moments. &lt;br&gt;
Learning fuels me. &lt;/p&gt;

&lt;p&gt;Likewise, this situation reminded me why I started learning to code and why I love what I do, because it’s a forever learning experience. The best developers never stop being curious and never stop learning. &lt;/p&gt;

&lt;p&gt;Thought I’d share incase anyone out there is going through something similar.  &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>career</category>
    </item>
    <item>
      <title>PatchNote DE LA V 1</title>
      <author>CraftTUB</author>
      <pubDate>Wed, 07 Jul 2021 23:21:38 +0000</pubDate>
      <link>https://dev.to/crafttub/patchnote-de-la-v-1-ep0</link>
      <guid>https://dev.to/crafttub/patchnote-de-la-v-1-ep0</guid>
      <description>&lt;p&gt;bonjour aujourd'hui on sort le PatchNote de la v1 de CraftTUB qui sera ouvert à tout le 19 juillet  a 21h sur la chaine YouTube en live de tottoff&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;l'hôtel des vente &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;pour vendre votre item (hdv /ah sell [ le prix , le quartier)&lt;br&gt;
  pour acheté (hdv /ah , et sélectionnez l'item ) &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;le claims &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;pose votre coffre dans le zone que vous voler claims un zone va&lt;br&gt;
  se  créé , un fois fini pour le supprimer ( delecteclaims )&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PVP / modée&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;choisissez vote arène pour vous pvp est atender le joueur&lt;/p&gt;

&lt;p&gt;-faction &lt;/p&gt;

&lt;p&gt;seras disponible a la v 1.5.6&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;survie &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sethome (pour crée ton home 🏡 )&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ajout optionnel (les mods )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;le mods craftTUB ajoute (les block/minerait,armure,outil en &lt;br&gt;
  craftTUB&lt;/p&gt;

&lt;p&gt;le mods craftdium ajoute (les block/minerait,armure,outil en &lt;br&gt;
  craftDIUM&lt;/p&gt;

&lt;p&gt;TOUT L'ÉQUIPE DE CraftTUB a hâte de vous voir sur le serveur&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Types of Graph</title>
      <author>Aya Bouchiha</author>
      <pubDate>Wed, 07 Jul 2021 23:07:03 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/types-of-graph-14ei</link>
      <guid>https://dev.to/ayabouchiha/types-of-graph-14ei</guid>
      <description>&lt;p&gt;Hello, today, I'm gonna discuss the famous types of graphs, before reading this post, I suggest you check this &lt;a href="https://dev.to/ayabouchiha/introduction-to-graph-in-data-structure-8mi"&gt;post (&lt;em&gt;introduction to graph in data structure&lt;/em&gt;)&lt;/a&gt; firstly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-graph"&gt;
  &lt;/a&gt;
  Types of Graph
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Directed Graph&lt;/strong&gt; : (&lt;em&gt;also called directed network or digraph&lt;/em&gt;) in this type, every edge is directed from one node to another. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aDQSrFcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pjxv0qn4pru4whmgknf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDQSrFcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pjxv0qn4pru4whmgknf.jpg" alt="Directed graph in data structure Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Undirected Graph&lt;/strong&gt;: all the edges can be traversed from both directions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b7n3NJn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ot2ykvcoi8jvrc61z6d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b7n3NJn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ot2ykvcoi8jvrc61z6d.jpg" alt="Undirected graph in data structure Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Weighted Graph&lt;/strong&gt;: in this one, all edges have a weight which is a numerical value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Q6Op3bB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1p94w58z82ji8ynl5d2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Q6Op3bB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1p94w58z82ji8ynl5d2.jpg" alt="Weighted graph in data structure Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Unweighted Graph&lt;/strong&gt;: the opposite of weighted graph, each edge has not a weight&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Connected Graph&lt;/strong&gt;: a connected graph is a graph that has a path between every pair of nodes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pPZC6yHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3i46qx4hh6xnrc81fnke.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pPZC6yHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3i46qx4hh6xnrc81fnke.jpg" alt="Connected graph in data structure Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Disconnected Graph&lt;/strong&gt;: a graph is called disconnect if there is at least two nodes of the graph are not connected by a path. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9aaQR6vG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i7pww6baykkywo415f8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9aaQR6vG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i7pww6baykkywo415f8.jpg" alt="Disconnected graph in data structure Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Simple Graph&lt;/strong&gt;: a graph is simple if it has no loops and no multiple edges.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W-FKIQHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s0281h3ihe2gef7plqi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-FKIQHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s0281h3ihe2gef7plqi.jpg" alt="Simple graph in data structure Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference-and-useful-resources"&gt;
  &lt;/a&gt;
  Reference and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mathinsight.org/definition/directed_graph#:~:text=A%20directed%20graph%20is%20graph,digraph%20or%20a%20directed%20network."&gt;https://mathinsight.org/definition/directed_graph#:~:text=A%20directed%20graph%20is%20graph,digraph%20or%20a%20directed%20network.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mathworld.wolfram.com/SimpleGraph.html"&gt;https://mathworld.wolfram.com/SimpleGraph.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mathworld.wolfram.com/ConnectedGraph.html#:~:text=A%20connected%20graph%20is%20graph,connected%2C%20while%20empty%20graphs%20on"&gt;https://mathworld.wolfram.com/ConnectedGraph.html#:~:text=A%20connected%20graph%20is%20graph,connected%2C%20while%20empty%20graphs%20on&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/connected-vs-disconnected-graphs#:~:text=c%20d-,Disconnected%20Graph,Vertex%201"&gt;https://www.tutorialspoint.com/connected-vs-disconnected-graphs#:~:text=c%20d-,Disconnected%20Graph,Vertex%201&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mathworld.wolfram.com/WeightedGraph.html"&gt;https://mathworld.wolfram.com/WeightedGraph.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://homepages.math.uic.edu/~jan/mcs320/mcs320graphs.pdf"&gt;http://homepages.math.uic.edu/~jan/mcs320/mcs320graphs.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;if you have any suggestions, you can contact me on &lt;a href="https://t.me/AyaBouchiha"&gt;telegram&lt;/a&gt;, see you next post.&lt;/p&gt;

&lt;p&gt;Have a great day :)&lt;br&gt;
#day_25&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>computerscience</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>CSS Lens Flare</title>
      <author>Nathaniel</author>
      <pubDate>Wed, 07 Jul 2021 23:01:40 +0000</pubDate>
      <link>https://dev.to/shadowfaxrodeo/css-lens-flare-59hj</link>
      <guid>https://dev.to/shadowfaxrodeo/css-lens-flare-59hj</guid>
      <description>&lt;p&gt;Over the last few weeks I've been building a &lt;a href="https://doodad.dev/gradient-generator/"&gt;gradient generator&lt;/a&gt;. To show what it can do I built some presets, here's one of them I thought you might you fun.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shadowfaxrodeo/embed/OJmNdKG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's a link to the &lt;a href="https://doodad.dev/gradient-generator/?share=radial-90-100-100-25-25-0_1-ffccd64d_50-fff5f74d_100-fff5f700__radial-90-50-50-23-23-0_0-fffff0ff_14-ffffffff_70-fed7d700__radial-90-200-200-23-23-0_0-1a202c00_42-1a202c00_47-2d1a220f__radial-90-50-50-14-14-0_0-f6e05e00_20-fefcbe5e_22-f6e05e00__radial-90-50-50-23-23-0_44-e68a0000_50-e600452b_54-e6500000__radial-90-50-50-37-37-0_0-3370ff1a_14-52abff40_15-5286ff00__radial-90-80-80-65-65-0_13-1bc7000a_18-efff7540_22-efff750a__radial-90-50-50-70-70-0_93-0000ff00_94-0000ff17_95-00ff000f_97-ffff002b_98-ff00001a_100-ff000000"&gt;gradient generator with the lens flare settings I've used&lt;/a&gt; if you want to play around.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>html</category>
      <category>showdev</category>
    </item>
    <item>
      <title>TAB Component with ReactJS</title>
      <author>Hugo Ferreira</author>
      <pubDate>Wed, 07 Jul 2021 22:59:40 +0000</pubDate>
      <link>https://dev.to/huferr/tab-component-with-reactjs-316n</link>
      <guid>https://dev.to/huferr/tab-component-with-reactjs-316n</guid>
      <description>&lt;p&gt;Welcome, my name is Hugo Ferreira! Today, I'm here to teach you how to create a TAB component with ReactJS!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Observation: I created this post considering that you know the basics of ReactJS. If you see anything wrong, please tell me!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can see it working at CodePen: &lt;a href="https://codepen.io/huferr/pen/GRmZJJx"&gt;https://codepen.io/huferr/pen/GRmZJJx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do this, we will use a functional component called &lt;em&gt;Tab&lt;/em&gt;. This component will return the HTML content. Let's define it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Tab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"tab-list"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"tabs active-tabs"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tab 1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"tabs"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tab 2&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"tabs"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tab 3&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"content-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"content active-content"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Lorem&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Ipsum&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Dolor&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Observe the classes called &lt;code&gt;active-tabs&lt;/code&gt; and &lt;code&gt;active-content&lt;/code&gt; in our &lt;strong&gt;first&lt;/strong&gt; tab and content elements. These classes will define which component should or should not be shown, and we'll use CSS to make this happen.&lt;/p&gt;

&lt;p&gt;What will make the tab change effect is the &lt;code&gt;active-tabs&lt;/code&gt; class. When called, the style of the tab will change, making it "visible". Look the example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQfcSISo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ig0k4dzma4b75julbjnd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQfcSISo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ig0k4dzma4b75julbjnd.png" alt="Tab component"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's the CSS file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eeeded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tab-list&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tabs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#80808013&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tabs&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.active-tabs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eeeded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.active-tabs&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#5893f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#eeeded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.active-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the &lt;code&gt;tabs&lt;/code&gt; class has a background to represent that it has not been selected. So, when we put the &lt;code&gt;active-tabs&lt;/code&gt; class, the tab style looks like it's selected.&lt;/p&gt;

&lt;p&gt;Looking at the &lt;code&gt;content&lt;/code&gt; class, we can see &lt;code&gt;display: none&lt;/code&gt;, which will "hide" the content from the screen, and it will only show when we call &lt;code&gt;active-content&lt;/code&gt;, which has &lt;code&gt;display: flex&lt;/code&gt;. This will make the content appear.&lt;/p&gt;

&lt;p&gt;What we have to do now is create a way to control these classes when we click on each tab, binding the element that has the &lt;code&gt;active-tabs&lt;/code&gt; class with the element that has the &lt;code&gt;active-content&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;To do that, let's import useState Hook and set our &lt;code&gt;toggleState&lt;/code&gt;, which will handle the index of each tab we have.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Obs.: Do it in the same Tab component.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Tab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggleState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggleState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's define an Index for each tab we have (3).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;// Tab 1 = index 1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;// Tab 2 = index 2, and so on...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To make it easier to understand, let's create a function that will set the index every time we click in each tab:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleTab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setToggleState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, create an &lt;code&gt;onClick&lt;/code&gt; event on each tab. Call an anonymous function with our &lt;code&gt;toggleTab&lt;/code&gt; function. So, for each tab, let's define an index:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"tab-list"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"tabs active-tabs"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toggleTab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tab 1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"tabs"&lt;/span&gt;&lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toggleTab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tab 2&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"tabs"&lt;/span&gt;&lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toggleTab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tab 3&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, let's control the classes! For this, let's use a ternary operator inside &lt;code&gt;className=""&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"tab-list"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tabs active-tabs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tabs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toggleTab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tab 1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tabs active-tabs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tabs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toggleTab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tab 2&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tabs active-tabs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tabs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toggleTab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tab 3&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's do it for the content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"content-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;content active-content&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Lorem&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;content active-content&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Ipsum&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;content active-content&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Dolor&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, we are saying that if toggleState is 1, put the class &lt;code&gt;tabs&lt;/code&gt; and &lt;code&gt;active-tabs&lt;/code&gt; in the Tab 1. if toggleState is 2, put the class &lt;code&gt;tabs&lt;/code&gt; and &lt;code&gt;active-tabs&lt;/code&gt; in the Tab 2. If not, put only &lt;code&gt;tabs&lt;/code&gt; Same for the content classes.&lt;/p&gt;

&lt;p&gt;In order to make it better, let's create a function to do this comparison:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getActiveClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;toggleState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Tab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggleState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggleState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleTab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setToggleState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getActiveClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;toggleState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"tab-list"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;
          &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`tabs &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;getActiveClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active-tabs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toggleTab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Tab 1
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;
          &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`tabs &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;getActiveClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active-tabs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toggleTab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Tab 2
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;
          &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`tabs &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;getActiveClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active-tabs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;toggleTab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Tab 3
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"content-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`content &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;getActiveClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Lorem&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`content &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;getActiveClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Ipsum&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`content &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;getActiveClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Dolor&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Tab&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fZIcAFnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wks20dwl80hq5oge9sm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fZIcAFnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wks20dwl80hq5oge9sm.png" alt="Results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Done! Thanks for reading this content, I hope it helps you in some way and, if you notice something wrong, feel free to help me leaving a comment bellow or find me on &lt;a href="https://twitter.com/thehuferr"&gt;twitter&lt;/a&gt; !&lt;/p&gt;

&lt;p&gt;You can also find me at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/huferr"&gt;Github&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/hugo-ferreira-it/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>Spring Boot With GraphQL: What The Cool Kids Are Doing</title>
      <author>Keyhole Software</author>
      <pubDate>Wed, 07 Jul 2021 22:33:04 +0000</pubDate>
      <link>https://dev.to/keyholesoftware/spring-boot-with-graphql-what-the-cool-kids-are-doing-1m2b</link>
      <guid>https://dev.to/keyholesoftware/spring-boot-with-graphql-what-the-cool-kids-are-doing-1m2b</guid>
      <description>&lt;p&gt;This article is going to introduce you to Spring Boot with GraphQL. We’ll walk through a simple beer app to show you what it can do.&lt;/p&gt;

&lt;p&gt;So you have built this really sweet API with all the &lt;code&gt;gets&lt;/code&gt;, &lt;code&gt;puts&lt;/code&gt;, and &lt;code&gt;deletes&lt;/code&gt; you can think of. Your baby is just beautiful the way it is, right? Well, maybe developer Joe thinks your baby is fat.&lt;/p&gt;

&lt;p&gt;WHAT?!&lt;/p&gt;

&lt;p&gt;The RESTful calls you have are bringing back way too much information. In other scenarios, the calls don’t do enough, and your baby is left crying because it needs more to play with.&lt;/p&gt;

&lt;p&gt;Well, this is where the power of GraphQL comes in.&lt;/p&gt;

&lt;h2&gt;Graph-What?&lt;/h2&gt;

&lt;p&gt;The new kid on the block in querying APIs is called GraphQL. Okay, but what is it? Well, the definition pulled directly from the &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt; site is:&lt;/p&gt;

&lt;p&gt;"GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools."&lt;/p&gt;

&lt;p&gt;Uh-huh. Great. But what is it?&lt;/p&gt;

&lt;p&gt;GraphQL is a tool that allows you to get what you want and only what you want from your existing API. You can eliminate the things you don’t need or care about in implementation. It can also offer a one place, one call to join what would otherwise be multiple REST calls to get the same information. GraphQL can significantly speed up performance and simplify coding.&lt;/p&gt;

&lt;p&gt;Here is a video introduction to &lt;a href="https://keyholesoftware.com/company/creations/presentations/graphql-key-concepts/"&gt;GraphQL&lt;/a&gt;, as well as some more information on why it's cool and what you can do with it.&lt;/p&gt;

&lt;h2&gt;Not In This Article&lt;/h2&gt;

&lt;p&gt;This article is not going to go into an in-depth explanation about Spring Boot (nor Spring Boot’s complete awesomeness). We will also avoid the arguments about development usage for and against it versus things like NodeJS or .NET.&lt;/p&gt;

&lt;p&gt;That said, this article does assume that you are at least familiar with Spring Boot and Java already. It is more about how you can be a part of the “cool” crowd and implement GraphQL in your Java project.&lt;/p&gt;

&lt;h2&gt;Let’s Doll Up Your GraphQL Baby with Spring Boot&lt;/h2&gt;

&lt;p&gt;First things first, you must either have an existing API built into Spring Boot, or you can conveniently use the Beer App provided at the end of this article.&lt;/p&gt;

&lt;p&gt;Next, you will need to add these into your pom if not already there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!-- GraphQL --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.graphql-java-kickstart&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;graphql-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;7.0.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!-- to embed GraphiQL tool --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.graphql-java-kickstart&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;graphiql-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;7.0.1&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.postgresql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;postgresql&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, in your &lt;code&gt;application.properties&lt;/code&gt; file add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
graphql.servlet.mapping=/graphql
graphql.servlet.enabled=true
graphql.servlet.exception-handlers-enabled= true
graphql.servlet.contextSetting= PER_REQUEST_WITH_INSTRUMENTATION
# GraphiQL (not GraphQL!)
graphiql.mapping= /graphiql
graphiql.endpoint.graphql= /graphql
graphiql.static.basePath= /
graphiql.enabled= true
graphiql.pageTitle= GraphiQL
graphiql.props.resources.defaultQuery= schema.graphqls
graphiql.props.variables.editorTheme= "solarized light"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These settings tell GraphQL where everything is set up. GraphiQL is a graphical interface that you can use to test out your GraphQL queries.&lt;/p&gt;

&lt;p&gt;This is an important feature that will help you get familiar with using GraphiQL (not a typo!). Keep in mind that if you are using an existing API, you will need to add exceptions to your security filtering rules or log in first Here is more information on how to use &lt;a href="https://github.com/skevy/graphiql-app"&gt;GraphiQL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, let's look at the mutators and query classes. A &lt;code&gt;mutation&lt;/code&gt; is something that will change data. So this is your creating, updating, or deleting of data. The query classes are just that: methods that query the database or “get” data.&lt;/p&gt;

&lt;h4&gt;EntityMutationResolver.java:&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
@Component
public class EntityMutationResolver implements GraphQLMutationResolver {

    private final BrewerService brewerService;
    private final BeerService beerService;

    /**
     * Constructor that takes instances of injected service bean for all entities
     * 
     * @param brewerService An instance of Spring managed BrewerService bean
     * @param beerService An instance of Spring managed BeerService bean
     */
    public EntityMutationResolver( BrewerService brewerService,
            BeerService beerService) {
        this.brewerService = brewerService;
        this.beerService = beerService;
    }

    /**
     * Adds a Brewer entity
     * 
     * @param name Name of the Brewer
     * @return An instance of Brewer if created successfully
     * @throws Exception If any occurred
     */
    public Brewer addBrewer(String name) throws Exception {
        Brewer brewer = new Brewer(name);
        return brewerService.save(brewer);
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key here is that it implements &lt;code&gt;GraphQLMutationResolver&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here, we define the methods that are described in the GraphQL schema. We’ll get to that more later.&lt;/p&gt;

&lt;h4&gt;EntityQueryResolver.java:&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
@Component
public class EntityQueryResolver implements GraphQLQueryResolver {

    private final BrewerService brewerService;
    private final BeerService beerService;

    /**
     * Constructor that takes instances of injected service bean for all entities
     * 
     * @param brewerService An instance of Spring managed BrewerService bean
     * @param beerService An instance of Spring managed BeerService bean
     */
    public EntityQueryResolver(BrewerService brewerService,
        BeerService beerService) {
        this.brewerService = brewerService;
        this.beerService = beerService;
    }

    /**
     * Returns a Brewer for the given id
     * 
     * @param id Primary key of the Brewer
     * @return An instance of Brewer
     */
    public Brewer getBrewerById(Long id) {
        try {
            Optional&amp;lt;Brewer&amp;gt; brewer = brewerService.findOne(id);
            if (brewer.isPresent()) {
                brewer.get().getbeers();
                return brewer.get();
            }
        } catch (Exception e) {
            // TODO: handle exception
        }
        return null;
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here again, this class implements &lt;code&gt;GraphQLQueryResolver&lt;/code&gt;, which allows GraphQL schema to resolve these methods. Remember that these are &lt;code&gt;Get&lt;/code&gt; type methods &lt;em&gt;returning&lt;/em&gt; data and not &lt;em&gt;changing&lt;/em&gt; it.&lt;/p&gt;

&lt;h3&gt;GraphQL Schema&lt;/h3&gt;

&lt;p&gt;Now, it's time to configure GraphQL to know what methods and models are available. We do this by adding a &lt;code&gt;schema.graphqls&lt;/code&gt; file at the project’s root in the resources folder. It’s in the same place as the &lt;code&gt;application.properties&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Below is the content we need:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
type Brewer {
    id: ID!
    name: String!
    beers: [Beer]!
} 

type Beer {
    id: ID!
    title: String!
    brewer: Brewer!
}

# Mutation: to add entities
type Mutation {
    addBrewer(name: String!): Brewer!
    addBeer(title: String!, brewerId:Int!): Beer!
}

# The Root Query for the application
type Query {
    brewerById(id:Int): Brewer
    beerById(id:Int): Beer
    getAllBeers: [Beer]
}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s break this down briefly:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;The &lt;code&gt;types&lt;/code&gt; are the “models” for the objects.&lt;/li&gt;
    &lt;li&gt;The &lt;code&gt;mutation&lt;/code&gt; is the data changing methods.&lt;/li&gt;
    &lt;li&gt;The &lt;code&gt;query&lt;/code&gt; is the definition of methods available to pull data.&lt;/li&gt;
    &lt;li&gt;The exclamation point means the value cannot be empty.&lt;/li&gt;
    &lt;li&gt;Brackets point to arrays. (Most developers will see this as straightforward.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Go in and Run the Spring Boot Application with GraphQL&lt;/h3&gt;

&lt;p&gt;If you have problems, it's probably due to mismatching between the resolvers and the schema file. In a browser, go to &lt;code&gt;localhost:8080/graphiql&lt;/code&gt;, and it should show you something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GFxIuA6O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shb397jo1nmwu5be1pwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GFxIuA6O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shb397jo1nmwu5be1pwg.png" alt="GraphiQL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You did it. Now you are on your way to GraphQL greatness!&lt;/p&gt;

&lt;p&gt;So this output is simply telling you what is available on your GraphQL. Remove what is there, and write these:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
mutation addBrewery {
  addBrewer(name:"Leinenkugel") {
    id
    name
  }
}

mutation addBrewsky {
  addBeer(title:"Summer Shandy", brewerId:1) {
    id
    title
  }
}

query allBreweries {
    getAllBeers {
    id
    title
    brewer {
      id
      name
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;mutation&lt;/code&gt; word tells you what your GraphQL is going to do. Then, the &lt;code&gt;addBrewery&lt;/code&gt; is whatever you want it to be.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
mutation addBrewery {
  addBrewer(name:"Leinenkugel") {
    id
    name
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;addBrewer&lt;/code&gt; is the actual method that you are going to be calling. You pass fields inside the brackets.&lt;/p&gt;

&lt;p&gt;Hint: the GraphiQL tool tells you what is available, what it is expecting, and the available fields for return. You must fill in what you want to be returned, or it will complain.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
mutation addBrewery {
  addBrewer(name:"Leinenkugel") {
    id
    name
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;The results are JSON:&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
{
  "data": {
    "addBrewer": {
      "id": "1552",
      "name": "Leinenkugel"
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;A Few Advantages of Spring Boot with GraphQL&lt;/h2&gt;

&lt;p&gt;Just think of it in this way: your API has a table return that typically returns 100 fields. Not efficient!&lt;/p&gt;

&lt;p&gt;With GraphQL, you can specify that you only want a handful of fields. It will adjust the query to only request and return the fields you are looking for.&lt;/p&gt;

&lt;p&gt;This also allows you to make simpler CRUD functions that only return everything but let GraphQL and the request define what you want from that implementation.&lt;/p&gt;

&lt;p&gt;Combining REST calls; although no example is given here, you can combine multiple requests into a simplified request limiting the number of requests that a requester has to make to your API.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Although this article is not a complete discussion of what you can accomplish with GraphQL, it gives you a rough look at it in respect to Spring Boot. It will ultimately be a game-changer for many developers who want to stay at the top of their game. If you've found yourself intrigued with Spring Boot with GraphQL and would like to learn more, here is a course on the &lt;a href="https://keyholesoftware.com/learning-services/courses/graphql-course/"&gt;fundamentals of GraphQL&lt;/a&gt; that provides a more in-depth introduction to this query language.&lt;/p&gt;

&lt;p&gt;Please feel free to post any questions or examples where you have used this. I’m looking forward to using this in the near future!&lt;/p&gt;

&lt;h3&gt;Resources:&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://gitlab.com/mmccandless/boot-graphql"&gt;&lt;/a&gt;&lt;a href="https://gitlab.com/mmccandless/boot-graphql"&gt;https://gitlab.com/mmccandless/boot-graphql&lt;/a&gt;&lt;/p&gt;

</description>
      <category>springboot</category>
      <category>graphql</category>
      <category>java</category>
      <category>rest</category>
    </item>
  </channel>
</rss>
