<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to use scrolltrigger to construct an object? Animating Nezuko</title>
      <author>Tommy</author>
      <pubDate>Wed, 24 Nov 2021 16:55:29 +0000</pubDate>
      <link>https://dev.to/uttammarandi/how-to-use-scrolltrigger-to-construct-an-object-animating-nezuko-5f6a</link>
      <guid>https://dev.to/uttammarandi/how-to-use-scrolltrigger-to-construct-an-object-animating-nezuko-5f6a</guid>
      <description>&lt;p&gt;This animation looks pretty amazing but in reality it is pretty pretty easy. GSAP offers srolltrigger plugin which allows us to animate objects into the viewport and trigger animation based on scroll. Here, we not only want to trigger the animation but also connect the movement of elements to our scroll. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;I am using simple html and vanilla js for demonstration purposes. However gsap and scrolltrigger can be used in front-end frameworks like react and vue too.&lt;br&gt;
For setup, we only need to import the gsap and scrolltrigger package using cdn. And link our js and css file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.8.0/gsap.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.8.0/ScrollTrigger.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As for html, I would highly recommend using svg instead of an image. For example, here I am animating the eyes, nose, dress and hairband. If I use svg object I don't need to style it using css. If you use image than you have to position each element of the object very carefully for it to resemble a complete object. But with svg each element is already positioned in their respective places.&lt;br&gt;
I cannot post the entire svg here because it's like 350 lines long. But I would share a screenshot of basic layout of the svg which is very important to understand how we are going to animate the svg.&lt;br&gt;
I found this svg in figma community. &lt;a href="https://www.figma.com/file/6abCcAz76OF2rigS2G1WXC/nezuko-kamado-(Community)?node-id=0%3A1"&gt;https://www.figma.com/file/6abCcAz76OF2rigS2G1WXC/nezuko-kamado-(Community)?node-id=0%3A1&lt;/a&gt;&lt;br&gt;
This guy is doing a great job.&lt;br&gt;
&lt;a href="https://www.figma.com/@sulaiman"&gt;https://www.figma.com/@sulaiman&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MuTpTGIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81a674rizkb6qtaiz88a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MuTpTGIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81a674rizkb6qtaiz88a.PNG" alt="scrolltrigger , nezuko svg" width="670" height="468"&gt;&lt;/a&gt;&lt;br&gt;
As you can see in the above svg, each element like eyes,nose, dress and hairband are grouped and given an id. This will be used to target each element and animate them individually.&lt;br&gt;
Initial setup should look something like this...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--py2aRkli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5d6rc7kwyq0ze06hhoh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--py2aRkli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5d6rc7kwyq0ze06hhoh.PNG" alt="nezuko_inital_setup" width="880" height="434"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-scrolltrigger"&gt;
  &lt;/a&gt;
  Setting up scrolltrigger
&lt;/h2&gt;

&lt;p&gt;First we need to register the scrolltrigger plugin in order for us to use it.&lt;br&gt;
Then we need to create a gsap timeline and pass an object containing scrolltrigger properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;gsap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerPlugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ScrollTrigger&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gsap&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeline&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;scrollTrigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.nezuko&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bottom center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;scrub&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;trigger is the object which will trigger the animation. Now it's very crucial that you use the ".nezuko" class in the svg tag itself. If you set the trigger anywhere inside the svg, then the svg will disappear from viewport.&lt;br&gt;
start and end properties define the start and end of animation respectively.&lt;br&gt;
scrub set to true means that animation is dependent on the user scroll.&lt;br&gt;
pin set to true pins the target element and it will stay on viewport till animation is complete.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-trick"&gt;
  &lt;/a&gt;
  The trick
&lt;/h2&gt;

&lt;p&gt;The main trick to such animation is that we are not animating to the final object instead we are animating from the final object. Meaning it's quite difficult to construct all elements sequentially and get to the final object. But it is very simple if we define the final object first and animate each element into it.&lt;br&gt;
Of course user will have the previous experience where each element combines to construct the final object on scroll.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;gsap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerPlugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ScrollTrigger&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gsap&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeline&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;scrollTrigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.nezuko&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bottom center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;scrub&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.eye&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;65.5&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.nose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;65.5&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.dress&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;65.5&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.hairband&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;65.5&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it , 15 lines of code and you have your scroll animation constructing an object. We set the y value to certain times the innerHeight of viewport and each element animates from that position to the inital position.&lt;br&gt;
Here is our final result...&lt;br&gt;
&lt;a href="https://i.giphy.com/media/w0Th4h9qtKAN79n8Zo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/w0Th4h9qtKAN79n8Zo/giphy.gif" width="480" height="264"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keypoints"&gt;
  &lt;/a&gt;
  Keypoints
&lt;/h2&gt;

&lt;p&gt;1.&lt;em&gt;Use svg :&lt;/em&gt; I cannot emphasis this more. Using svg will save your valuable time. Resizing each element and getting final object right using css is too much hassle. Also you have to take mobile responsiveness into account. With svg all these are handled.&lt;br&gt;
2.&lt;em&gt;Use medium size svg:&lt;/em&gt; The svg I used here is pretty big. 12645px * 16756px is too much. I used it because that's the only one available. If you use such big sizes than you have to multiply innerHeight to some crazy numbers like I have done above. Usually innerHeight multiplied to 1.5 to 2 will do the job.&lt;br&gt;
3.&lt;em&gt;Experiment:&lt;/em&gt; We can do pretty amazing things with gsap, scrolltrigger and scrub properties. Experiment with these to find the sweet spot for your animation. Sky is the limit.&lt;/p&gt;

&lt;p&gt;There you have it. Constructing sweet Nezuko with scroll animation. Btw.. Demon slayer is awesome. Can't wait for the whole manga to animate. Season 2 is streaming right now 😁.&lt;/p&gt;

&lt;p&gt;If you have any suggestion , do let me know in comments. Will you use it in your next project? Is there any other way to achieve the same animation? Waiting for your responses .....&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>gsap</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How Well-Architected Enables Junior Engineers</title>
      <author>Gerald Stewart</author>
      <pubDate>Wed, 24 Nov 2021 16:55:06 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-well-architected-enables-junior-engineers-24j</link>
      <guid>https://dev.to/aws-builders/how-well-architected-enables-junior-engineers-24j</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-wellarchitected"&gt;
  &lt;/a&gt;
  What is Well-Architected 🤔
&lt;/h1&gt;

&lt;p&gt;Well-Architected describes the key concepts, design principles and architecture best practices for designing your cloud workloads. It balances best practices with business goals to determine the optimal outcome.&lt;/p&gt;

&lt;p&gt;Created by AWS Solutions Architects using the lessons Amazon has learnt from running thousands of systems at a massive scale, it enables developers to compare their workloads against the rigorous standards that AWS holds itself against.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pillars-%F0%9F%8F%9B"&gt;
  &lt;/a&gt;
  Pillars 🏛
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G4EBrhgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99a3r795l1vgh5w3wk4d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G4EBrhgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99a3r795l1vgh5w3wk4d.png" alt="image" width="880" height="653"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Credit to &lt;a href="https://www.awsgeek.com/The-5-Pillars-of-the-AWS-Well-Architected-Framework/"&gt;Jerry Hargrove&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Operational Excellence&lt;/strong&gt; - To be able to monitor and support workloads effectively, to enable continuous improvement and to deliver business value.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Security&lt;/strong&gt; - Improving your security posture by taking advantage of Cloud technologies to protect your assets and systems.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reliability&lt;/strong&gt; - Ensuring your workload can perform it's intended function correctly and consistently.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Performance Efficiency&lt;/strong&gt; - Ensuring appropriate resource allocation to enable performant systems and a positive end user experience.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cost Optimisation&lt;/strong&gt; - Ensuring you are delivering business value at the lowest possible cost.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lenses"&gt;
  &lt;/a&gt;
  Lenses 🔎
&lt;/h2&gt;

&lt;p&gt;Lenses can be applied to a Well-Architected review to get additional specific questions targeting your type of application. Examples of lenses include Serverless, Machine Learning and SaaS. You can find more out about lenses &lt;a href="https://aws.amazon.com/architecture/well-architected/?wa-lens-whitepapers.sort-by=item.additionalFields.sortDate&amp;amp;wa-lens-whitepapers.sort-order=desc#AWS_Well-Architected_Lenses"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-apply-wellarchitected"&gt;
  &lt;/a&gt;
  How to Apply Well-Architected 👨‍🔧
&lt;/h1&gt;

&lt;p&gt;Well-Architected should be applied both continuously with reviews carried out at regular intervals. Understanding the pillars, core concepts and reasons behind the pillars of the Well-Architected framework can enable you to make better architecture decisions and avoid rewrites or large changes after a full-scale review has been carried out.&lt;/p&gt;

&lt;p&gt;The AWS Console has a "Well-Architected Tool" which allows you to track the health of your workloads. This is a free service and will ask questions based on your workload type to come up with an improvement plan.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-wellarchitected-enabled-me-as-a-junior-engineer"&gt;
  &lt;/a&gt;
  How Well-Architected Enabled Me as a Junior Engineer 🙋‍♂️
&lt;/h1&gt;

&lt;p&gt;As a junior engineer, being involved in design discussions can be a daunting experience.&lt;/p&gt;

&lt;p&gt;A few months ago, I took time to take a deep dive into the AWS Well-Architected framework. The knowledge I gained by doing this has been invaluable.&lt;/p&gt;

&lt;p&gt;Well-Architected is a gold standard for best practices for building on AWS. It can also be applied to other types of applications.&lt;/p&gt;

&lt;p&gt;Instead of forming opinions about how something should be done, referring to the Well-Architected framework can often yield an AWS backed approach.&lt;/p&gt;

&lt;p&gt;The key differentiator between Well-Architected and self-formed opinions is that Well-Architected is the opinion of AWS Solutions Architects with many years of experience. My own self-formed opinions are only based on my experiences, which at the beginning of my career are limited.&lt;/p&gt;

&lt;p&gt;Being able to point to documentation to back up your points is invaluable.&lt;/p&gt;

&lt;p&gt;By following Well-Architected principles and applying them in everything I did I found myself over time becoming more involved in design discussions and more high-level work.&lt;/p&gt;

&lt;p&gt;Well-Architected gave me the &lt;em&gt;right questions&lt;/em&gt; to ask, to &lt;em&gt;drive discussions&lt;/em&gt; so we could &lt;em&gt;make better choices&lt;/em&gt; in the day-to-day development of our application.&lt;/p&gt;

&lt;p&gt;When weighing up technical decisions, think &lt;strong&gt;Well-Architected&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Security&lt;/strong&gt; - Is this as secure as it could be, what's data are we storing, who has access?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cost&lt;/strong&gt; - What's the potential cost impacts of this change, is it worth it, is the business aware?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Operational Excellence&lt;/strong&gt; - What monitoring do we need for this, what metrics should we be looking at, what level of fault tolerance should we allow?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Performance&lt;/strong&gt; - What will this do to performance, do we need to tweak/re-evaluate resource allocation as a result of this change?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reliability&lt;/strong&gt; - What happens if this fails, if a downstream system is down?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Asking these questions and driving conversations led to me progressing pretty quickly to becoming a Senior Software Engineer. &lt;/p&gt;

&lt;p&gt;I had plenty of examples of how I identified improvements to our application that I identified by applying Well-Architected.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;If I could recommend one topic of learning to a junior engineer or someone looking to up their game designing and building on AWS it would be to read the Well-Architected framework and understand how to apply it. &lt;/p&gt;

&lt;p&gt;If you or your team applies Well-Architected I'd love to hear how it made a difference to your application in the comments! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learning-materials-amp-links-%E2%9B%93"&gt;
  &lt;/a&gt;
  Learning Materials &amp;amp; Links ⛓
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/architecture/well-architected/"&gt;AWS Well-Architected Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aws.training/Details/Curriculum?id=42037"&gt;AWS Well-Architected E-Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/framework/welome.html"&gt;AWS Well-Architected Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/NFtZSvywRew?t=3073"&gt;My Well-Architected Talk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>beginners</category>
      <category>cloud</category>
    </item>
    <item>
      <title>What lies in the .git folder? How are commits stored? Answered by Microsoft MVP &amp; author of SQL Source Control!</title>
      <author>Saurabh Rai</author>
      <pubDate>Wed, 24 Nov 2021 16:38:49 +0000</pubDate>
      <link>https://dev.to/srbhr/what-lies-in-the-git-folder-how-are-commits-stored-answered-by-microsoft-mvp-author-of-sql-source-control-1mld</link>
      <guid>https://dev.to/srbhr/what-lies-in-the-git-folder-how-are-commits-stored-answered-by-microsoft-mvp-author-of-sql-source-control-1mld</guid>
      <description>&lt;p&gt;&lt;strong&gt;The definitive deep dive into the .git folder&lt;/strong&gt; by Rob Richardson, author of SQL Server Source Control Basics, a Microsoft MVP, and a frequent Speaker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; &lt;em&gt;--everything-is-local!&lt;/em&gt;&lt;br&gt;
From writing code, to branching-creating PRs to merging. For our everyday collaborative development tasks. Git has become an essential tool, surpassing other SCM tools. Being lightweight with fast performance, git has a lot of features. And with every every locat git repository there comes a .git folder. Where all the essential data is stored about the ongoing project! &lt;/p&gt;

&lt;p&gt;We've all been using Github and are very familiar with the .git folder. &lt;strong&gt;But how things operate inside it? What's in the .git folder? How are commits stored?&lt;/strong&gt; How do branches work? We'll dive deep into the objects folder, unpack commits, look at the types of DAG nodes, examine object content, and build a complete visualization of the stored content. We'll also quickly look through Git hooks, Git config, and ref logs. Come experience the zen of git at &lt;a href="https://gitcommit.show/"&gt;Git Commit Show.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🌟Join our Discord Server for an amazing QnA &lt;a href="https://discord.gg/JFWP8c2gPG"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;✨ Get your tickets to the event &lt;a href="http://push.gitcommit.show/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;⏲Check the schedule &lt;a href="https://gitcommit.show/schedule/index.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;About &lt;strong&gt;Rob Richardson&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;He is a software craftsman building web properties in ASP.NET and Node, React and Vue JS. &lt;/li&gt;
&lt;li&gt;A Microsoft MVP, published author, frequent speaker at conferences, user groups, and community events. A diligent teacher and student of high quality software development.&lt;/li&gt;
&lt;li&gt;He often speaks at various conferences and Loves to talk and share his knowledge on Open Source 💚!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IlQem0Je--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wlh4gol2eje8r8iy4bu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IlQem0Je--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wlh4gol2eje8r8iy4bu.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>opensource</category>
      <category>github</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What's different about Amazon Linux 2022?</title>
      <author>Stephen Sennett</author>
      <pubDate>Wed, 24 Nov 2021 15:49:08 +0000</pubDate>
      <link>https://dev.to/aws-builders/whats-different-about-amazon-linux-2022-ilb</link>
      <guid>https://dev.to/aws-builders/whats-different-about-amazon-linux-2022-ilb</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/linux/amazon-linux-2022/"&gt;&lt;strong&gt;Amazon Linux 2022&lt;/strong&gt;&lt;/a&gt; was recently opened to Public Preview during pre:Invent 2021. There's a lot of interesting nuances compared to &lt;a href="https://aws.amazon.com/amazon-linux-2/"&gt;Amazon Linux 2&lt;/a&gt;, so I wanted to consolidate the differences and provide some personal opinions.&lt;/p&gt;

&lt;p&gt;This was also all written at time of the announcement of Public Preview, so things are liable to change ahead of General Availability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#built-on-fedora-instead-of-centos"&gt;
  &lt;/a&gt;
  Built on Fedora instead of CentOS
&lt;/h2&gt;

&lt;p&gt;Amazon Linux has traditionally been built around &lt;a href="https://www.centos.org/"&gt;CentOS&lt;/a&gt;. With the transition from its standard release cycle to &lt;a href="https://www.centos.org/cl-vs-cs/"&gt;CentOS Stream&lt;/a&gt;, Amazon has decided transition to using Fedora as the base for Amazon Linux 2022, with the kernel from the Linux LTS versions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PxFuRB4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3bon6y836ttirze8n3j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PxFuRB4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3bon6y836ttirze8n3j.png" alt="Terminal Window showing SSH into an instance running AL2022, showing results of 'cat /etc/os-release'" width="825" height="546"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Personal opinion: CentOS Stream is a bad choice for production use, and Amazon made a good decision to not try and shoe-horn it into Amazon Linux. Fedora also makes sense since it was already the upstream origin of CentOS anyway, so we're still in the same ecosystem. We've just cut out a few steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--47lIprdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l804fie1f3589v8q8xh8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--47lIprdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l804fie1f3589v8q8xh8.png" alt="Lineage of Amazon Linux 2 Upstream versus Amazon Linux 2022" width="251" height="251"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fedora has a well-established lineage, and with the other changes Amazon has made in relation to the OS, it's arguably one of the best choices they could make. But one thing seems to puzzle people:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rockylinux.org/"&gt;Rocky Linux&lt;/a&gt; is a newer distribution in the Linux Family, intended by the community as a successor to CentOS and its original intent. It's also backed by AWS, among others, including traditional rivals like Microsoft Azure and Google Cloud.&lt;/p&gt;

&lt;p&gt;"Why not base Amazon Linux 2022 on Rocky?". I can only speculate, but being a relatively new distribution, and intended for use by Amazon's customers, who are primarily businesses, the longer-term stability and reliability of Fedora, along with being closer to the top of the stream probably makes the most strategic sense in November 2021.&lt;/p&gt;

&lt;p&gt;In future? It wouldn't entirely surprise me if we have Amazon Linux 2024 powered by Rocky Linux (heard here first!), but nothing yet guaranteed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#release-cycle"&gt;
  &lt;/a&gt;
  Release Cycle
&lt;/h2&gt;

&lt;p&gt;One thing that distinguishes Amazon Linux 2022 from Fedora is its release cycle. Amazon have announced a &lt;a href="https://docs.aws.amazon.com/linux/al2022/ug/release-cadence.html"&gt;release cycle&lt;/a&gt; of a new major version every two years, minor versions every three months with LTS for five years.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pknmTdvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hg9fes82jyua0y0clj3a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pknmTdvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hg9fes82jyua0y0clj3a.png" alt="Version lifecycle described above" width="762" height="239"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a world of daily builds and releases, five years might sound like a long time. But in the world of operating systems and servers, it's truly not. Since a server's OS should be in support for the life of the server being in production, that means the deployment effectively won't be safe to use beyond five years when the security updates cease.&lt;/p&gt;

&lt;p&gt;So, is five years long enough? My opinion: Yes, if your solutions are built for it.&lt;/p&gt;

&lt;p&gt;Building modern cloud-native applications, where the underlying servers are treated purely as cattle, and it's being actively developed and maintained? Sure, five years is good. You effectively have major n+2 until support stops, and will probably be able to keep pace.&lt;/p&gt;

&lt;p&gt;If you're looking at running long-term applications that may not be under active development? Then you'd want to prioritize support cycle even further.&lt;/p&gt;

&lt;p&gt;To the very best of my knowledge, and based on &lt;a href="https://linuxlifecycle.com/"&gt;linuxlifecycle.com&lt;/a&gt;, without paying for RHEL or SUSE, five years is as long as you're going to get in support for a Linux distribution nowadays (except Ubuntu for personal use). And if you truly need it, forking out for RHEL is may still worth it for that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#version-locking"&gt;
  &lt;/a&gt;
  Version Locking
&lt;/h2&gt;

&lt;p&gt;Latest versions aren't always the best. When running a fleet of servers using heterogeneous versions of software, you can end up with very unusual problems. Instead, you have full power to control the versioning of the repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6W-ElE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b06xq8swbw6iw9tcjcm1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6W-ElE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b06xq8swbw6iw9tcjcm1.png" alt="Terminal window showing SSH looking at the AL2022 repository and using supportinfo using the dnf utility" width="825" height="598"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By &lt;a href="https://docs.aws.amazon.com/linux/al2022/ug/version-locking.html"&gt;locking to a specific version&lt;/a&gt; of the Amazon Package Repository, this means you should have a very predictable and consistent experience, regardless of what your servers are doing.&lt;/p&gt;

&lt;p&gt;There is one very interesting thing worth mentioning: &lt;strong&gt;Security Updates aren't installed by default upon launch&lt;/strong&gt;. Sysadmins breathe out, Infosec breathes in.&lt;/p&gt;

&lt;p&gt;Security Updates are a vital part of server management, and cannot be ignored, especially in production environments. But, and sysadmins will know this in their bones, Security Updates can break stuff. Not often, but it does happen. And arbitrary updates can decrease that predictability.&lt;/p&gt;

&lt;p&gt;The same principle works both ways: &lt;strong&gt;You control the patching&lt;/strong&gt;. For better, and worse, it's in your hands. But this isn't a new concept.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selinux-enforced-by-default"&gt;
  &lt;/a&gt;
  SELinux - Enforced by Default
&lt;/h2&gt;

&lt;p&gt;Plenty of people probably groaned at the sound of this. Yes, SELinux makes stuff less permissive, but that's the whole point, and it's 2021 for goodness sake. Indeed, there are still applications out there where the developers will specify "SELinux has to be disabled for this to work".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Huy6M411--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hr7es58g0xt9fh5zdxrq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Huy6M411--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hr7es58g0xt9fh5zdxrq.png" alt="Terminal window showing SSH using SELinux" width="825" height="546"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For context, Security-Enhanced Linux (SELinux) is an enhancement to the Linux kernel to provide finer-grained access control within the OS. This helps contain individual programs and daemons. For example, if a single machine ran both a web server and a database server, SELinux helps ensure the database couldn't be compromised, even if someone exploited the web server daemon.&lt;/p&gt;

&lt;p&gt;SELinux of 2021 is not SELinux of the 2000's - it's come a long way since then. The tooling is much better, and one of the nice things about more atomic servers is that there's a lot less cases of servers trying to run half a dozen different services, since compute was at a premium.&lt;/p&gt;

&lt;p&gt;At the end of the day, yes, you can disable enforcement. But the amount of resources to make it easier now is remarkable, much of the bad reputation is dated, and I seriously doubt you have a good reason to disable SELinux in modern deployments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-amazon-linux-2"&gt;
  &lt;/a&gt;
  What about Amazon Linux 2?
&lt;/h2&gt;

&lt;p&gt;Amazon Linux 2 is due to reach the end of LTS Support by June 30, 2023 &lt;a href="https://aws.amazon.com/amazon-linux-2/faqs/"&gt;according to its FAQ&lt;/a&gt;. There's nothing in this announcement to suggest that this will be changed, and I seriously doubt they would move the date forward. Although if you're running workloads on it, it's soon going to be time to think about "where to next?".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QxTsBxoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06tywetfdourlsiethys.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QxTsBxoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06tywetfdourlsiethys.png" alt="Excerpt from Amazon Linux 2 FAQ showing the end of support date" width="880" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The upgrade path, not too surprisingly given the difference in architecture, is "replace and rebuild". Their FAQ promises an in-place upgrade guide once AL2022 reaches GA, which given the architecture differences would be a sight to behold.&lt;/p&gt;

&lt;p&gt;So with only 19 months or so until the end of support for Amazon Linux 2, you probably want to have a new OS designated by December 2022 at the latest; hopefully by which time, AL2022 should be much more mature, and stable in GA.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion?
&lt;/h2&gt;

&lt;p&gt;"It isn't Red Hat!". Nope, nor is it trying to be. It's not the ultra-stable enterprise distribution with decade-plus support. But it's not trying to be a replacement for Red Hat; just a well-built stable operating system for cloud-native deployments.&lt;/p&gt;

&lt;p&gt;With a few bugs already bubbling up on the Twittersphere, there's still work to be done, and they're opting to track bugs and feature requests through the &lt;a href="https://github.com/amazonlinux/amazon-linux-2022"&gt;amazon-linux-2022&lt;/a&gt; GitHub repository.&lt;/p&gt;

&lt;p&gt;If you're already running Amazon Linux 2 or a similar Fedora-based built, including CentOS, once it's released to GA, AL2022 may be a worthwhile solution for several years.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>linux</category>
    </item>
    <item>
      <title>Personalised GitHub profile</title>
      <author>Jurga Gi</author>
      <pubDate>Wed, 24 Nov 2021 15:42:26 +0000</pubDate>
      <link>https://dev.to/jurgyte/personalised-github-profile-2bd9</link>
      <guid>https://dev.to/jurgyte/personalised-github-profile-2bd9</guid>
      <description>&lt;p&gt;Not so long ago I attended a personal branding workshop (it's quite popular topic these days). My mentor inspired me to unify my presence across internet. The idea behind it was to make me easily recognisable across the most common platforms such as Twitter, Github or LinkedIn. I found this task very fun and creative. Mostly it was changing my nickname and photo but it also involved some very very simple coding which was a double fun for me. I made my GitHub profile look more attractive. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1CXK_Hez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dvvanexosb0hjyvnc3b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1CXK_Hez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dvvanexosb0hjyvnc3b.png" alt="My profile image" width="880" height="672"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To customise your GitHub profile looks you need to create a README for it. It's very easy to do. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a repository with a name that matches your GitHub username. &lt;/li&gt;
&lt;li&gt;Make sure this repository is public. &lt;/li&gt;
&lt;li&gt;Add a file named README.md in its root. Any content in this file will display in your profile README section.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The biggest challenge for me was to find the answer to the question: what should I add to this README? &lt;a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme"&gt;GitHub&lt;/a&gt; has some suggestions such as to add an "About me" section that describes your work and interests, contributions you're proud of, guidance on communities where you're involved. But there are even more things you can add, for example &lt;a href="https://github.com/anuraghazra/github-readme-stats#github-stats-card"&gt;widgets&lt;/a&gt; in order to show stats on your GitHub activity or your most used programming languages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/b9f90b1d6fe362d60baca13304e88cd983f95da54f8cc41396bc4debbe8e4c59/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d616e7572616768617a726126696e636c7564655f616c6c5f636f6d6d6974733d74727565" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/b9f90b1d6fe362d60baca13304e88cd983f95da54f8cc41396bc4debbe8e4c59/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d616e7572616768617a726126696e636c7564655f616c6c5f636f6d6d6974733d74727565" alt="Stats block image" width="495" height="195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can add small &lt;a href="https://shields.io/category/build"&gt;badges&lt;/a&gt; to show various information such as how many visitors you had, how many bugs you fixed, any kind of important ratings or number pf social channel followers and etc. Adding a badge is very simple, you just need to use this code&lt;br&gt;
&lt;code&gt;![](https://img.shields.io/{URL_OF_THE_BADGE_WITH_PARAMS})&lt;/code&gt; in your README.md file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mhIZdfl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcdc9vpfh6v1bjk3mixt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mhIZdfl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcdc9vpfh6v1bjk3mixt.png" alt="Badge example" width="232" height="58"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F0B7bH1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kghywekar4sa4ja9obr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F0B7bH1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kghywekar4sa4ja9obr.png" alt="Badge example" width="274" height="70"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also checked few &lt;a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme"&gt;list&lt;/a&gt; with inspirational GitHub profiles and this &lt;a href="https://towardsdatascience.com/build-a-stunning-readme-for-your-github-profile-9b80434fe5d7"&gt;blog&lt;/a&gt; post with few suggestions.&lt;/p&gt;

&lt;p&gt;In the end I decided to keep my profile simple to mark what are the most important activities I do across internet, I marked the tools I use daily and added a small widget to see how many people visit my GitHub profile (something fun for myself).&lt;/p&gt;

</description>
      <category>github</category>
      <category>readme</category>
      <category>personalised</category>
      <category>profile</category>
    </item>
    <item>
      <title>Get started with discord.py!</title>
      <author>Tejas Kathuria</author>
      <pubDate>Wed, 24 Nov 2021 15:39:12 +0000</pubDate>
      <link>https://dev.to/tejasdev/get-started-with-discordpy-14l0</link>
      <guid>https://dev.to/tejasdev/get-started-with-discordpy-14l0</guid>
      <description>&lt;p&gt;Discord.py is a very fantastic API. It helps us in creating Discord bots easily. People have made game bots, RPG bots, Moderation Bots, Economy bots, and even more! Using this guide, you can learn how to use it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-discordpy"&gt;
  &lt;/a&gt;
  Install discord.py
&lt;/h3&gt;

&lt;p&gt;Make sure you have python installed on your computer. You have to install discord.py with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;discord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;voilà! discord.py has been installed!&lt;/p&gt;

&lt;p&gt;For making bots you'll need to have a developer account. You can &lt;a href="https://discordpy.readthedocs.io/en/latest/discord.html#creating-a-bot-account"&gt;check this&lt;/a&gt; guide!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#basics-of-developing-a-bot"&gt;
  &lt;/a&gt;
  Basics of developing a bot
&lt;/h3&gt;

&lt;p&gt;When starting you have to choose weather to use &lt;code&gt;discord.Client&lt;/code&gt; or &lt;code&gt;commands.Bot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;discord.Client&lt;/code&gt;:&lt;br&gt;
• Is more lightweight than commands.Bot&lt;br&gt;
• Is best if you're not going to be using commands&lt;/p&gt;

&lt;p&gt;&lt;code&gt;commands.Bot&lt;/code&gt;:&lt;br&gt;
• Is best if your bot is going to have commands&lt;br&gt;
• Supports easy discord object conversion&lt;/p&gt;

&lt;p&gt;In this series we will make a bot with &lt;code&gt;commands.Bot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We have to start by importing &lt;code&gt;discord&lt;/code&gt; and &lt;code&gt;discord.ext.commands&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;discord&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;discord.ext&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt;

&lt;span class="n"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command_prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'YOUR TOKEN HERE'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We initialized a class as an object. We defined this class to the variable bot, which can be named whatever you want. Most people use &lt;code&gt;bot&lt;/code&gt; or &lt;code&gt;client&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now when our bot is defined, we can start with our first command. In discord.py we make commands like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'command_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description for help command"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other_arguments_here&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="c1"&gt;# Tell bot what to do here
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's make a command which will greet the user with a hello. We'll use &lt;code&gt;ctx.author&lt;/code&gt; for doing this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Hello'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Greets the sender"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# f-string
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, when we greet the user, it will say Hello USER!&lt;/p&gt;

&lt;p&gt;Congrats!! You've just written a bot using discord.py! Run the code. When you'll type &lt;code&gt;$hello&lt;/code&gt; it should respond!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UBj4R6Xn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ruh32pmb5uexvjxvfxyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UBj4R6Xn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ruh32pmb5uexvjxvfxyi.png" alt="Image description" width="395" height="216"&gt;&lt;/a&gt;&lt;br&gt;
Source Code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



</description>
      <category>python</category>
      <category>discord</category>
      <category>discordpy</category>
      <category>programming</category>
    </item>
    <item>
      <title>Build a mobile audio chat app in an afternoon with React Native</title>
      <author>Jess Mitchell</author>
      <pubDate>Wed, 24 Nov 2021 15:35:01 +0000</pubDate>
      <link>https://dev.to/trydaily/build-a-mobile-audio-call-app-in-an-afternoon-with-react-native-3j3g</link>
      <guid>https://dev.to/trydaily/build-a-mobile-audio-call-app-in-an-afternoon-with-react-native-3j3g</guid>
      <description>&lt;p&gt;At Daily, one of our primary focuses has been &lt;a href="https://www.daily.co/audio-only"&gt;supporting audio-only apps&lt;/a&gt; with our APIs. Lately, we’ve been hearing more and more discussions about how to help app users avoid &lt;a href="https://news.stanford.edu/2021/02/23/four-causes-zoom-fatigue-solutions/"&gt;Zoom fatigue&lt;/a&gt; — the feeling of being burnt out from sitting in video calls all day long.&lt;/p&gt;

&lt;p&gt;Audio-only apps are a great solution to this issue as they typically require less cognitive resources to participate in. They are also a great option for larger calls or calls on mobile devices as they tend to have lower CPU requirements. (So you &lt;em&gt;and&lt;/em&gt; your devices need to think less. 😉) &lt;/p&gt;

&lt;p&gt;To help our customers support their &lt;a href="https://www.daily.co/blog/audio-only-social-networks-what-are-they-and-how-are-they-being-used/"&gt;audio-only use cases&lt;/a&gt;, we launched an audio &lt;a href="https://www.producthunt.com/posts/audio-apps-starter-kit"&gt;starter kit&lt;/a&gt; (a.k.a. Party Line) earlier this year, which includes demo apps in &lt;a href="https://github.com/daily-demos/party-line/tree/main/react"&gt;React (web)&lt;/a&gt;, &lt;a href="https://github.com/daily-demos/party-line/tree/main/ios"&gt;iOS&lt;/a&gt;, &lt;a href="https://github.com/daily-demos/party-line/tree/main/android"&gt;Android&lt;/a&gt;, and &lt;a href="https://github.com/daily-demos/party-line/tree/main/react-native"&gt;React Native&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In today's tutorial, we’ll be doing a deeper dive into how the &lt;a href="https://github.com/daily-demos/party-line/tree/main/react"&gt;React Native version of Party Line&lt;/a&gt; works. &lt;/p&gt;

&lt;p&gt;By the end of this tutorial, you’ll know how to build a &lt;a href="https://www.joinclubhouse.com/"&gt;Clubhouse&lt;/a&gt;-esque Daily audio app using our &lt;a href="https://github.com/daily-co/react-native-daily-js"&gt;&lt;code&gt;react-native-daily-js&lt;/code&gt;&lt;/a&gt; library and Daily’s customizable &lt;a href="https://docs.daily.co/call-object"&gt;call object&lt;/a&gt;. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#who-is-this-tutorial-for"&gt;
  &lt;/a&gt;
  Who is this tutorial for?
&lt;/h2&gt;

&lt;p&gt;To get the most out of this tutorial, some basic React Native knowledge is useful. If you’ve never used React Native before but are familiar with React and React hooks, you should be able to follow along. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: React and React Native code is fairly similar but does have some differences, so we’ll do our best to explain those differences as they come up!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-set-up-locally"&gt;
  &lt;/a&gt;
  Getting set up locally
&lt;/h2&gt;

&lt;p&gt;To run the Party Line app locally, follow the instructions located in the &lt;a href="https://github.com/daily-demos/party-line/tree/main/react-native"&gt;Github repo’s README&lt;/a&gt;. Instructions for both iOS and Android are included, depending which OS you prefer to primarily test React Native apps.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#feature-set-and-backlog"&gt;
  &lt;/a&gt;
  Feature set and backlog
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5MTYLZOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-18-at-14.47.58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5MTYLZOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-18-at-14.47.58.png" alt="Party Line app views" width="880" height="688"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s start by describing which audio call features will (and won’t) be included.&lt;/p&gt;

&lt;p&gt;Party Line will include two views:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A home screen with a form to join or create an audio call&lt;/li&gt;
&lt;li&gt;An in-call view once a call has been joined&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's review some of the basic functionality:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From the home screen, the local user can fill out their name in the form and either specify a room code or leave the code blank. If they leave the code blank, Party Line will automatically create a new room and join it when the form is submitted. &lt;/li&gt;
&lt;li&gt;Each room created in Party Line will expire after 10 minutes. The expiry is set when the room is created via the &lt;a href="https://docs.daily.co/reference/rest-api/rooms/create-room"&gt;Daily REST API&lt;/a&gt; and something we’ve included to avoid long-living demo rooms. This can be adjusted in the room settings to match your use case, however.&lt;/li&gt;
&lt;li&gt;Once the room is joined, the room code can be shared with anyone. Rooms created from one app are compatible with any of our other Party Line apps (iOS, Android, React/web, or React Native). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll allow for three different types of participants: moderator, speaker, listener. &lt;/p&gt;

&lt;p&gt;Participant types are handled as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The room creator is the moderator&lt;/li&gt;
&lt;li&gt;Moderators are indicated in the UI by a star next to their initials&lt;/li&gt;
&lt;li&gt;Moderators can promote listeners to speakers, speakers to listeners, and anyone to a moderator&lt;/li&gt;
&lt;li&gt;Listeners can raise (or lower) their hands to indicate they would like to speak&lt;/li&gt;
&lt;li&gt;Speakers and moderators can mute/unmute themselves, but only mute others&lt;/li&gt;
&lt;li&gt;When a moderator leaves the call and there are no other moderators present, the call ends for everyone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hapx7Fka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-12-at-16.04.00.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hapx7Fka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-12-at-16.04.00.gif" alt="Moderator updating their local audio settings" width="800" height="616"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In terms of constraints, we will not:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use any external account management or authentication&lt;/li&gt;
&lt;li&gt;Have a database, though we recommend handling the participant types with a database for production-level apps (❗)&lt;/li&gt;
&lt;li&gt;Have a backend aside from serverless functions, which call the Daily REST API&lt;/li&gt;
&lt;li&gt;Offer a list of rooms to join; the participant will need to know the code for the room they want to join. This would be a great feature to add, though 😉&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll cover how most of this works below or share links to existing resources for anything we don’t have time to go over.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#component-structure"&gt;
  &lt;/a&gt;
  Component structure
&lt;/h2&gt;

&lt;p&gt;Before we dive into the code, let’s plan the structure we’re going to use for our components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZfUB6FF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/PartyLineFinal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZfUB6FF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/PartyLineFinal.png" alt="Component structure" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, we have our &lt;code&gt;App&lt;/code&gt; component as the top-level parent component. It will render the &lt;code&gt;Header&lt;/code&gt; component with the app title and information. It will also conditionally render &lt;em&gt;either&lt;/em&gt; the &lt;code&gt;InCall&lt;/code&gt; component, which handles the Daily audio call, &lt;em&gt;or&lt;/em&gt; the &lt;code&gt;PreJoinRoom&lt;/code&gt;, which has a form to join a Daily audio call, depending on our app state.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;InCall&lt;/code&gt; component has the most complexity because it handles our Daily call.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;InCall&lt;/code&gt; contains the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One &lt;code&gt;Counter&lt;/code&gt; component, which displays how much time is left in the call&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;CopyLinkBox&lt;/code&gt; to copy and share the room code&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Tray&lt;/code&gt; to control your local microphone, raise your hand, or leave the call&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Participant&lt;/code&gt; component for each participant. It renders:

&lt;ul&gt;
&lt;li&gt;Participant UI, with each participant represented by a box with their initials and a “show more” menu button that renders the &lt;code&gt;Menu&lt;/code&gt; component in certain conditions. (More on that below)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;DailyMenuView&lt;/code&gt; component, which provides the participant’s audio for the call. 
&lt;em&gt;Note: In a React project, you would just render an &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; element.&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#callproviderjsx-the-brain-of-this-operation"&gt;
  &lt;/a&gt;
  CallProvider.jsx: The brain of this operation 🧠
&lt;/h2&gt;

&lt;p&gt;To keep our logic organized and in (mostly) one place, we are using the &lt;a href="https://reactjs.org/docs/context.html"&gt;React Context API&lt;/a&gt;, which helps us store global app state. Our &lt;code&gt;App&lt;/code&gt; component wraps its contents in the &lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx"&gt;&lt;code&gt;CallProvider&lt;/code&gt; component&lt;/a&gt; (our context), which means all of our app’s contents can access the data set in our call context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.jsx&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CallProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AppContent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/CallProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: The Context API can be used by any React app (not just React Native). In fact, we did just that in the &lt;a href="https://github.com/daily-demos/party-line/blob/main/react/src/CallProvider.jsx"&gt;web version of this app!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s spend some time understanding what’s happening in &lt;code&gt;CallProvider&lt;/code&gt;. (We can’t cover every detail here, so &lt;a href="https://www.daily.co/contact/support"&gt;let us know&lt;/a&gt; if you have questions.) &lt;/p&gt;

&lt;p&gt;There are several actions (i.e. methods) we define in &lt;code&gt;CallProvider&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating a new Daily room (&lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx#L31"&gt;&lt;code&gt;createRoom&lt;/code&gt;&lt;/a&gt;) with the &lt;a href="https://docs.daily.co/reference/rest-api/rooms/create-room"&gt;Daily REST API&lt;/a&gt;. We’re using a &lt;a href="https://www.netlify.com/products/functions/"&gt;Netlify serverless function&lt;/a&gt; for this but you can use the Daily REST API endpoints however works best for your app.&lt;/li&gt;
&lt;li&gt;Creating a Daily meeting token (&lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx#L46"&gt;&lt;code&gt;createToken&lt;/code&gt;&lt;/a&gt;) for meeting moderators with the &lt;a href="https://docs.daily.co/reference/rest-api/meeting-tokens/create-meeting-token"&gt;Daily REST API&lt;/a&gt;. (Same as above regarding using serverless functions.)&lt;/li&gt;
&lt;li&gt;Joining a Daily room (&lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx#L65"&gt;&lt;code&gt;joinRoom&lt;/code&gt;&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;Leaving a room the local participant is currently attending (&lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx#L172"&gt;&lt;code&gt;leaveCall&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Muting/unmuting (&lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx#L225"&gt;&lt;code&gt;handleMute&lt;/code&gt;, &lt;code&gt;handleUnmute&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Raising/lowering your hand (&lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx#L257"&gt;&lt;code&gt;raiseHand&lt;/code&gt;, &lt;code&gt;lowerHand&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx#L278"&gt;Changing&lt;/a&gt;/getting a participant’s account type (e.g. upgrading a listener to a speaker)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.daily.co/reference/rn-daily-js/events"&gt;Adding Daily event listeners&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/daily-demos/party-line/blob/main/react-native/contexts/CallProvider.jsx#L22"&gt;Initializing app state&lt;/a&gt; that will be shared with other components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting with our app state, let’s look at which values we’ll initialize and export to be used throughout our app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// CallProvider.jsx&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CallProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setView&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PREJOIN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// pre-join | in-call&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCallFrame&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setParticipants&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRoom&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;roomExp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRoomExp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;activeSpeakerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setActiveSpeakerId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;updateParticipants&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUpdateParticipants&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="err"&gt;…&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CallContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt;
     &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
       &lt;span class="nx"&gt;getAccountType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;changeAccountType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;handleMute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;handleUnmute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;joinRoom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;leaveCall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;endCall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;removeFromCall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;raiseHand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;lowerHand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;activeSpeakerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;roomExp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/CallContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-updating-a-participant-type-works-using-raw-sendappmessage-endraw-"&gt;
  &lt;/a&gt;
  How updating a participant type works using &lt;code&gt;sendAppMessage&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;In this demo, we manage participant types (moderator, speaker, or listener) by appending a string to the end of each participant’s username, which is not shown in the UI (e.g. &lt;code&gt;${username}_MOD&lt;/code&gt; for moderators).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;❗Note: For production-level apps, we recommend building a backend for participant type management. This current solution is meant to keep the code client-side for demo purposes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That said, let’s look at how participant type management works.&lt;/p&gt;

&lt;p&gt;Whenever a moderator updates another participant’s account type, that update will be communicated to other participants with the Daily method &lt;a href="https://docs.daily.co/reference/rn-daily-js/instance-methods/send-app-message"&gt;&lt;code&gt;sendAppMessage&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All participants will receive that app message via the &lt;code&gt;app-message&lt;/code&gt; event listener, which is added in &lt;code&gt;CallProvider&lt;/code&gt;: &lt;br&gt;
&lt;code&gt;callFrame.on('app-message', handleAppMessage);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will use the callback method &lt;code&gt;handleAppMessage&lt;/code&gt;, which will update the appended string on the username to the new account type (e.g.&lt;code&gt;_LISTENER&lt;/code&gt; to &lt;code&gt;_SPEAKER&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// CallProvider.jsx&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleAppMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[APP MESSAGE]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="na"&gt;MSG_MAKE_MODERATOR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[LEAVING]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leave&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
           &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[REJOINING AS MOD]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

           &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="c1"&gt;// Remove the raised hand emoji&lt;/span&gt;
           &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;✋&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;✋ &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
             &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
           &lt;span class="nx"&gt;joinRoom&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
             &lt;span class="na"&gt;moderator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="p"&gt;});&lt;/span&gt;
           &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="na"&gt;MSG_MAKE_SPEAKER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="nx"&gt;updateUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SPEAKER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="na"&gt;MSG_MAKE_LISTENER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="nx"&gt;updateUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LISTENER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="na"&gt;FORCE_EJECT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="c1"&gt;//seeya&lt;/span&gt;
           &lt;span class="nx"&gt;leaveCall&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
           &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dIBqHf5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-12-at-16.05.38.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dIBqHf5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-12-at-16.05.38.gif" alt="Promoting a listener to speaker" width="800" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Making someone a moderator is slightly more complicated because they need to rejoin the call with a Daily token, which will give them the owner privileges they need to be able to mute other participants. To do this, we kick them out of the call quietly (&lt;code&gt;callFrame.leave()&lt;/code&gt;) and then immediately rejoin them as a moderator with an &lt;a href="https://docs.daily.co/reference/rest-api/meeting-tokens/create-meeting-token"&gt;owner token&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: To make a participant a meeting owner with a meeting token, the &lt;code&gt;is_owner&lt;/code&gt; token property must be &lt;code&gt;true&lt;/code&gt;. See our &lt;a href="https://docs.daily.co/reference/rest-api/meeting-tokens/config"&gt;token configuration docs&lt;/a&gt; for more information.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As we go through specific components below, we’ll loop back to some of the other specific methods outlined in &lt;code&gt;CallProvider&lt;/code&gt; as they’re used.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#prejoinroom-form"&gt;
  &lt;/a&gt;
  PreJoinRoom form
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;PreJoinRoom&lt;/code&gt; component is a form with three inputs (first name, last name, join code), and a button to submit the form. Only the first name is a required field; the last name is optional and if no join code is provided, we take that to mean the user wants to create a new room to join. &lt;/p&gt;

&lt;p&gt;Let’s focus on what happens when you submit the form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// PreJoinRoom.jsx&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PreJoinRoom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;handleLinkPress&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;joinRoom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;roomName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRoomName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;submitting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSubmitting&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRequired&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submitForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;setRequired&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;submitting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nx"&gt;setSubmitting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;setRequired&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

     &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
       &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

     &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;roomName&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()?.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;roomName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="cm"&gt;/**
        * We track the account type by appending it to the username.
        * This is a quick solution for a demo; not a production-worthy solution!
        */&lt;/span&gt;
       &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;LISTENER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;MOD&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="nx"&gt;joinRoom&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;roomName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;joinRoom&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;submitForm&lt;/code&gt;, we first make sure the first name is filled out. If not, we update our &lt;code&gt;required&lt;/code&gt; state value, which blocks the form from being submitted.&lt;/p&gt;

&lt;p&gt;Next, we get the local user’s username by joining the first and optional last name values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If there’s a room code (&lt;code&gt;roomName&lt;/code&gt;) provided in the form, we assign that to our &lt;code&gt;name&lt;/code&gt; variable and update the username to have &lt;code&gt;_LISTENER&lt;/code&gt; appended to it.&lt;/p&gt;

&lt;p&gt;If there is no room code, we don’t set a room &lt;code&gt;name&lt;/code&gt; and append &lt;code&gt;_MOD&lt;/code&gt; to the username. As mentioned, the person creating the room is the moderator by default so we track that in the name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (roomName?.trim()?.length) {
    name = roomName;

    userName = `${userName}_${LISTENER}`;
} else {
    userName = `${userName}_${MOD}`;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have our &lt;code&gt;userName&lt;/code&gt; and optional room &lt;code&gt;name&lt;/code&gt;, we can then call &lt;code&gt;joinRoom&lt;/code&gt;, a method from &lt;code&gt;CallProvider&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joinRoom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moderator&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leave&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;roomInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="cm"&gt;/**
    * The first person to join will need to create the room first
    */&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;moderator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;roomInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createRoom&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nx"&gt;setRoom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;roomInfo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="cm"&gt;/**
    * When a moderator makes someone else a moderator,
    * they first leave and then rejoin with a token.
    * In that case, we create a token for the new mod here.
    */&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;moderator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// create a token for new moderators&lt;/span&gt;
     &lt;span class="nx"&gt;newToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Daily&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createCallObject&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;videoSource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// This can be changed to your Daily domain&lt;/span&gt;
     &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`https://devrel.daily.co/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;roomInfo&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;roomInfo&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;roomInfo&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newToken&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newToken&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nx"&gt;setCallFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalAudio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
       &lt;span class="nx"&gt;setView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;INCALL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;})&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;joinRoom&lt;/code&gt; has the following steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It leaves the current room if you’re somehow already in one. (This is mostly defensive programming for those terrible, horrible, no good, very bad code bug days.)&lt;/li&gt;
&lt;li&gt;It creates a new room with our &lt;code&gt;createRoom&lt;/code&gt; method mentioned above if a room name isn’t provided&lt;/li&gt;
&lt;li&gt;It creates a token if the participant joining is a moderator. This can happen if they are the first person to join &lt;em&gt;or&lt;/em&gt; if they’re rejoining as a moderator after being upgraded&lt;/li&gt;
&lt;li&gt;Next, we create our local Daily call object instance:
&lt;code&gt;const call = Daily.createCallObject({videoSource: false});&lt;/code&gt;
(We’ll go into more detail about the &lt;code&gt;videoSource&lt;/code&gt; property below.)&lt;/li&gt;
&lt;li&gt;We also set our call options that we’ll need before joining the call (room URL being joined, username, and optional token for moderators
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`https://devrel.daily.co/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;roomInfo&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt; Finally, we join the call and update our local state accordingly, including updating our &lt;code&gt;view&lt;/code&gt; value to &lt;code&gt;incall&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nx"&gt;setCallFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="cm"&gt;/**
        * Now mute, so everyone joining is muted by default.
        */&lt;/span&gt;
       &lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalAudio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nx"&gt;setView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;INCALL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this is complete, we’ll be brought to our &lt;code&gt;InCall&lt;/code&gt; component because of this condition in &lt;code&gt;App.js&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{view === INCALL &amp;amp;&amp;amp; &amp;lt;InCall handleLinkPress={handleLinkPress} /&amp;gt;}&lt;/code&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-incall-experience-moderators-and-the-rest-of-us"&gt;
  &lt;/a&gt;
  The in-call experience: Moderators and the rest of us
&lt;/h2&gt;

&lt;p&gt;Now that we know how to get into a call, let’s focus on how we actually use the &lt;a href="https://github.com/daily-co/react-native-daily-js#readme"&gt;&lt;code&gt;react-native-daily-js&lt;/code&gt;&lt;/a&gt; library to get our audio working. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;InCall&lt;/code&gt; component renders a &lt;code&gt;Participant&lt;/code&gt; component for each participant in the call, and displays them in the UI based on who can speak. Moderators and speakers are shown at the top and listeners are at the bottom.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sT_pFo4j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-12-at-16.12.43.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sT_pFo4j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-12-at-16.12.43.png" alt="Speakers and listeners in-call" width="880" height="704"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at how we render the &lt;code&gt;Speakers&lt;/code&gt; section, which includes moderators and speakers, i.e. anyone who can unmute themselves.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// InCall.jsx&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;getAccountType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="p"&gt;]);&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;speakers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
     &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getAccountType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;user_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;SPEAKER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}),&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getAccountType&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The individual participant UI includes details like their name, initials, a star emoji if they’re a moderator, and a “more” menu with some actions depending on their participant type. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MfLv7Kqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-12-at-16.34.32.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MfLv7Kqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/CleanShot-2021-11-12-at-16.34.32.png" alt="Participant UI" width="163" height="177"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most important aspect of the &lt;code&gt;Participant&lt;/code&gt; component is not visible in the UI, though: the &lt;code&gt;DailyMediaView&lt;/code&gt; component!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Participant.jsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;DailyMediaView&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@daily-co/react-native-daily-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Participant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;modCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;zIndex&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;audioTrack&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DailyMediaView&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`audio-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;videoTrack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;audioTrack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;audioTrack&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a component imported from &lt;code&gt;react-native-daily-js&lt;/code&gt; and accepts audio and/or video tracks from your participants list, also provided by Daily's call object (recall: &lt;code&gt;callObject.participants()&lt;/code&gt;). Since this is an audio-only app, we set &lt;code&gt;videoTrack&lt;/code&gt; to null, and &lt;code&gt;audioTrack&lt;/code&gt; to each participant’s audio track:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Participant.jsx&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;audioTrack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
     &lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;tracks&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;playable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
       &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;tracks&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;track&lt;/span&gt;
       &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;tracks&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the audio track is set, you will be able to hear the participant. 👂&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sir-this-is-an-arbys-letting-moderators-mute-speakers"&gt;
  &lt;/a&gt;
  Sir, this is an Arby’s: Letting moderators mute speakers
&lt;/h3&gt;

&lt;p&gt;Now that we have the audio playing, let’s take a quick look at how we mute participants. &lt;/p&gt;

&lt;p&gt;As mentioned, only participants who joined with an &lt;a href="https://docs.daily.co/reference/rest-api/meeting-tokens/config"&gt;owner meeting token&lt;/a&gt; are permitted to mute others. (And, by the way, we don’t recommend ever letting participants &lt;em&gt;unmute&lt;/em&gt; other participants. It’s a bit invasive! 😬)&lt;/p&gt;

&lt;p&gt;To do this, we can take advantage of Daily’s &lt;a href="https://docs.daily.co/reference/rn-daily-js/instance-methods/update-participant"&gt;&lt;code&gt;updateParticipant&lt;/code&gt; method&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;CallProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jsx&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleMute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[MUTING]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalAudio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateParticipant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;session_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;setAudio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;});&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="nx"&gt;setUpdateParticipants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`unmute-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here in &lt;code&gt;CallProvider&lt;/code&gt;, we have one &lt;code&gt;handleMute&lt;/code&gt; method for participants to mute themselves or others. If they’re muting themselves, they call &lt;a href="https://docs.daily.co/reference/rn-daily-js/instance-methods/set-local-audio"&gt;&lt;code&gt;setLocalAudio(false)&lt;/code&gt;&lt;/a&gt;. If they’re muting someone else, they call &lt;code&gt;updateParticipant&lt;/code&gt; with the to-be-muted participant’s &lt;code&gt;session_id&lt;/code&gt; and a properties object with &lt;code&gt;setAudio&lt;/code&gt; equal to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-you-you-oughta-know"&gt;
  &lt;/a&gt;
  You, you, you, oughta know
&lt;/h2&gt;

&lt;p&gt;One important aspect of audio-only apps to be aware of is device permissions. Since Daily’s React Native library is compatible with audio and video apps, it will ask for microphone &lt;em&gt;and&lt;/em&gt; camera permissions, unless we intervene. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cw4ua-dG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/permissions.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cw4ua-dG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/11/permissions.png" alt="Device permission requests" width="880" height="688"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don’t address this issue, your app users will see both of these device permission requests, which may be a bit of a red flag 🚩 for them. (Why would you need camera permissions for an audio app? 🤔)&lt;/p&gt;

&lt;p&gt;To help your apps seem less — well — creepy, you can simply set &lt;code&gt;videoSource&lt;/code&gt; to false when you create the local call object instance. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;const call = Daily.createCallObject({videoSource: false});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Adding this one detail means your users are only asked for microphone permissions. 💫&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;We hope this overview of the Party Line app helps you better understand how it works under the hood. We couldn’t cover every detail, so check out these existing tutorials/resources that cover related topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our &lt;a href="https://www.daily.co/blog/how-to-build-a-billion-dollar-audio-app-in-a-weekend/"&gt;overview of the Party Line project&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Creating &lt;a href="https://www.daily.co/blog/create-audio-only-meetings-with-daily/"&gt;audio-only calls with &lt;code&gt;daily-js&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://www.daily.co/blog/build-a-react-form-to-generate-daily-meeting-tokens/"&gt;tutorial on creating owner meeting tokens&lt;/a&gt; in React&lt;/li&gt;
&lt;li&gt;Our &lt;a href="https://github.com/daily-co/react-native-daily-js-playground"&gt;Playground app repo&lt;/a&gt; in case you’re interested in seeing a React Native video call example&lt;/li&gt;
&lt;li&gt;Building a video or &lt;a href="https://www.daily.co/blog/tutorial-embed-a-daily-video-call-in-any-notion-workspace-page/"&gt;audio-only call embedded in a webpage&lt;/a&gt; via a Chrome extension&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our next React Native tutorial, we’ll focus on building a video call app, so stay tuned for that! &lt;/p&gt;

&lt;p&gt;As always, if you have any questions, &lt;a href="https://www.daily.co/contact/support"&gt;let us know&lt;/a&gt;! &lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Cookie Cutter Flask - Generate Websites with ease</title>
      <author>Sm0ke</author>
      <pubDate>Wed, 24 Nov 2021 15:31:54 +0000</pubDate>
      <link>https://dev.to/sm0ke/cookie-cutter-flask-generate-websites-with-ease-4c8a</link>
      <guid>https://dev.to/sm0ke/cookie-cutter-flask-generate-websites-with-ease-4c8a</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents an open-source tool that we can use to generate simple, yet modern presentation websites on top of Flask Framework. &lt;a href="https://blog.appseed.us/cookie-cutter-flask-generate-website-templates/"&gt;Cookie Cutter Flask&lt;/a&gt; extends the popular &lt;code&gt;CookieCutter&lt;/code&gt; command-line tool to build simple &lt;code&gt;Flask&lt;/code&gt; projects enhanced with database, authentication, and Docker support using a theme-able approach where the user can select the design during the generation process.  In the end, without any coding effort, the generator will provide a seed project similar to these LIVE samples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://flask-pixel-lite.appseed-srv1.com/"&gt;Flask Pixel Lite&lt;/a&gt; - LIVE demo (&lt;a href="https://github.com/app-generator/flask-pixel-lite"&gt;source code&lt;/a&gt; 🔗)&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://flask-material-kit.appseed-srv1.com/"&gt;Flask Material Kit&lt;/a&gt; - LIVE demo (&lt;a href="https://github.com/app-generator/flask-material-kit"&gt;source code&lt;/a&gt; 🔗)
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y2G6P3qd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcz4zhpp1av7p4l1p2wi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y2G6P3qd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcz4zhpp1av7p4l1p2wi.gif" alt="Cookie Cutter Flask - Material Kit Design, generated sample project." width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  ✨ How It works
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;CookieCutter&lt;/code&gt; tool is a popular open-source generator written in Python that knows how to build software projects using templates and user input. Basically, a codebase or a template project can be customized during the generation process based on the user input. Types of customizations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project name, author, and license type&lt;/li&gt;
&lt;li&gt;Decide the database type we will use in our project&lt;/li&gt;
&lt;li&gt;Inject deployment scripts for Docker&lt;/li&gt;
&lt;li&gt;Add or remove basic features (authentication, for instance)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to use our simple Flask generator, a short-list with tools should be already present in the workstation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Python3&lt;/code&gt; - the language that powers &lt;strong&gt;CookieCutter&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GIT&lt;/code&gt; - versioning command-line tool&lt;/li&gt;
&lt;li&gt;A modern editor like &lt;code&gt;VsCode&lt;/code&gt; or &lt;code&gt;Atom&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With all the tools properly installed and accessible in the terminal window, we can proceed further with our setup.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;👉 &lt;strong&gt;Step #1&lt;/strong&gt; - Install Python modules: CookieCutter and GitPython&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;cookiecutter
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;GitPython
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 &lt;strong&gt;Step #2&lt;/strong&gt; - Generate the project via &lt;a href="https://github.com/app-generator/cookiecutter-flask-sites"&gt;Flask Cookie Cutter&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cookiecutter https://github.com/app-generator/cookiecutter-flask-sites.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most important step is when we select the design:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Select theme:
1 - material-kit
2 - pixel-lite
Choose from 1, 2 &lt;span class="o"&gt;[&lt;/span&gt;1]: 1      &amp;lt;&lt;span class="nt"&gt;---&lt;/span&gt; HERE We &lt;span class="k"&gt;select &lt;/span&gt;the UI
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As mentioned before, the generator is theme-able and we can choose the design: &lt;a href="https://flask-pixel-lite.appseed-srv1.com/"&gt;Pixel Lite&lt;/a&gt; or &lt;a href="https://flask-material-kit.appseed-srv1.com/"&gt;Material Kit&lt;/a&gt;.  &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Pixel Lite - The Freelancer page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F6WGOIuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82z7hcza2n6nyxt08ker.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F6WGOIuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82z7hcza2n6nyxt08ker.png" alt="Pixel Lite - The Freelancer page." width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Material Kit Website - User Page  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fP4JEzZq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqh57ya6kk5jjda5s4bh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fP4JEzZq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqh57ya6kk5jjda5s4bh.png" alt="Material Kit Website - User Page." width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Once the &lt;code&gt;Cookie Cutter&lt;/code&gt; collects the input from the user, the selected theme is downloaded from Github and the project is generated by taking into account all user options.&lt;/p&gt;

&lt;p&gt;After the process is completed, we can compile and start the project using Docker or simply via a manual classic build for a Flask/Python project.&lt;/p&gt;

&lt;p&gt;For the complete build instructions, please access the source code published on Github or ask for support via email or &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;.  &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources and support, feel free to access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;👉 AppSeed for &lt;a href="https://appseed.us/support"&gt;support&lt;/a&gt; via Email and &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Free Dashboards&lt;/a&gt; - crafted in Django, Flask, and &lt;a href="https://appseed.us/apps/react"&gt;React&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>flask</category>
      <category>generators</category>
      <category>appseed</category>
    </item>
    <item>
      <title>Building A Text To Speech Converter For Beginners!</title>
      <author>Jai Krishna</author>
      <pubDate>Wed, 24 Nov 2021 15:28:58 +0000</pubDate>
      <link>https://dev.to/jaikt/building-a-text-to-speech-converter-for-beginners-4gpc</link>
      <guid>https://dev.to/jaikt/building-a-text-to-speech-converter-for-beginners-4gpc</guid>
      <description>&lt;p&gt;Hey everyone! Today we’ll be building something just too awesome in this article, you will learn how to create a Text To Speech Converter with HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;I have worked very hard on this project to make it come true, all that for not even a single penny 😍. Do stargaze and support this project at the official repository for this project on &lt;a href="https://github.com/RoyalityFreeWebHosting/TextToSpeech"&gt;GitHub&lt;/a&gt; and a demo is available &lt;a href="https://royalityfree.com/opensource/TextToSpeech/"&gt;here&lt;/a&gt;!&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9VBAmKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.gstatic.com/bricks/image/8ebd398d2db3f7da5bbd1a36ecfd8cb9cf41265d5250d5279fea0ac41823c4c6.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9VBAmKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.gstatic.com/bricks/image/8ebd398d2db3f7da5bbd1a36ecfd8cb9cf41265d5250d5279fea0ac41823c4c6.svg" alt="Text To Speech" width="737" height="211"&gt;&lt;/a&gt;How Cloud Speech Works (Source: Google)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-text-to-speech-converter-in-the-first-place-core-basics"&gt;
  &lt;/a&gt;
  What Is Text To Speech Converter In The First Place? (Core Basics)
&lt;/h2&gt;

&lt;p&gt;Text To Speech (TTS) is a technology that empowers your text to be converted into speech verbal sounds.&lt;/p&gt;

&lt;p&gt;In this project (Text To Speech Converter), you can convert your text into speech with different voices and accents powered by native output methods for every type of device.&lt;/p&gt;

&lt;p&gt;A pause and resume button that is embedded into the core of your text is above the minimum requirement of ~125 words/characters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-text-to-speech-converter-project-understanding-basics"&gt;
  &lt;/a&gt;
  About The Text To Speech Converter Project (Understanding Basics)
&lt;/h2&gt;

&lt;p&gt;In the JavaScript code, originally, I got the user text and call a function &lt;code&gt;textToSpeech()&lt;/code&gt; with parsing the user input text as an argument.&lt;/p&gt;

&lt;p&gt;Inside this function, leveraging the speech synthesis property of the window object, I converted the user input text to speech.&lt;/p&gt;

&lt;p&gt;Speech Synthesis is defined as a web speech API that moderates the speech service using native speech verbal’s available on the base device.&lt;br&gt;
After this, I got all the available verbal voices from the user device using the &lt;code&gt;getVoices()&lt;/code&gt; scheme of Speech Synthesis and insert it into the attributed HTML select tag. &lt;/p&gt;

&lt;p&gt;That’s all and I request you to continue reading to get more knowledge depth on what the code is actually performing.&lt;/p&gt;

&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RS-04ToN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sugermint.com/wp-content/uploads/2021/06/text-to-speech-software.jpg" alt="Best Text To Speech Software For Voice Over &amp;amp; Youtube Videos (USA 2021) - Text  To Speech Converter" width="728" height="405"&gt;Source: SugarMint
&lt;h2&gt;
  &lt;a href="#building-text-to-speech-converter-project-free-source-code-"&gt;
  &lt;/a&gt;
  Building Text To Speech Converter Project (Free Source Code 🎉)
&lt;/h2&gt;

&lt;p&gt;To build this Text To Speech Converter project, you need to create three core files, namely a &lt;code&gt;&lt;strong&gt;.html&lt;/strong&gt;&lt;/code&gt;, &lt;code&gt;&lt;strong&gt;.css&lt;/strong&gt;&lt;/code&gt; and a &lt;code&gt;&lt;strong&gt;.js&lt;/strong&gt;&lt;/code&gt; file. After organizing these files just paste the given codes into your file.&lt;/p&gt;

&lt;p&gt;You can further download the source code files of this Text To Speech Project from the proffered download button below at the end of this article.&lt;/p&gt;

&lt;p&gt;Firstly, create an HTML file with a filename of &lt;code&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/code&gt; and paste the following codes into your HTML file. &lt;strong&gt;Save It&lt;/strong&gt;, you’ve to create a file with an &lt;code&gt;&lt;strong&gt;.html&lt;/strong&gt;&lt;/code&gt; extension at the last.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
&amp;lt;!-- Built By RoyalityFree's Blog--&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Text To Speech | RoyalityFree Codes&amp;lt;/title&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"&amp;gt;
    &amp;lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta2/css/all.min.css" integrity="sha512-YWzhKL2whUzgiheMoBFwW8CKV4qpHQAEuvilg9FAn5VJUDwKZZxkJNuGM4XkWuk94WCrrwslk8yWNGmY1EduTA==" crossorigin="anonymous" referrerpolicy="no-referrer" /&amp;gt;
    &amp;lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous"&amp;gt;
    &amp;lt;link rel="stylesheet" href="assets/style.css"&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div class="wrapper"&amp;gt;
     &amp;lt;div class="container-fluid"&amp;gt;
      &amp;lt;h2 class="h2 text-center"&amp;gt;
          Text To Speech
      &amp;lt;/h2&amp;gt;
      &amp;lt;form&amp;gt;
        &amp;lt;div class="form-group row"&amp;gt;
          &amp;lt;label class="col-sm- col-form-label"&amp;gt;Enter Text &amp;lt;span class="badge badge-success"&amp;gt;Max 5000 Letters&amp;lt;/span&amp;gt;
          &amp;lt;/label&amp;gt;
          &amp;lt;div class="col-15"&amp;gt;
              &amp;lt;textarea maxlength="5000"&amp;gt;&amp;lt;/textarea&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="form-group row"&amp;gt;
            &amp;lt;label&amp;gt;Select Voice&amp;lt;/label&amp;gt;
            &amp;lt;div class="outer"&amp;gt;
              &amp;lt;select&amp;gt;&amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="form-group row"&amp;gt;
          &amp;lt;div class="col-15"&amp;gt;
            &amp;lt;button type="submit" class="btn btn-primary"&amp;gt;Convert To Speech&amp;lt;/button&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/form&amp;gt;
     &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Secondly, create a CSS file with the filename of &lt;code&gt;&lt;strong&gt;style.css&lt;/strong&gt;&lt;/code&gt; and paste the following code in the file. &lt;strong&gt;Save It&lt;/strong&gt;, you have to create a file with &lt;strong&gt;&lt;code&gt;.css&lt;/code&gt;&lt;/strong&gt; extension at the last.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* Built By RoyalityFree's Blog | Codes */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&amp;amp;display=swap');
*{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Poppins', sans-serif;
} /*Applied Universally*/

body{
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  background-image: linear-gradient(90deg, #1d4aff, #829bff,#1d4aff);
}

::selection{
  color: #fff;
  background: #5256AD; /* Change Selection Colour*/
}

.wrapper{
  width: 370px;
  padding: 25px 30px;
  border-radius: 7px;
  background: #fff;
  box-shadow: 7px 7px 20px rgba(0,0,0,0.05);
} /*Box Behind*/

.wrapper header{
  font-size: 28px;
  font-weight: 500;
  text-align: center;
}

.wrapper form{
  margin: 35px 0 20px;
}

form .row{
  display: flex;
  margin-bottom: 20px;
  flex-direction: column;
}

form .row label{
  font-size: 18px;
  margin-bottom: 5px;
}

form .row:nth-child(2) label{
  font-size: 17px;
}

form :where(textarea, select, button){
  outline: none;
  width: 100%;
  height: 100%;
  border: none;
  border-radius: 5px;
}

form .row textarea{
  resize: none;
  height: 110px;
  font-size: 15px;
  padding: 8px 10px;
  border: 1px solid #999;
}

form .row textarea::-webkit-scrollbar{
  width: 0px;
}

form .row .outer{
  height: 47px;
  display: flex;
  padding: 0 10px;
  align-items: center;
  border-radius: 5px;
  justify-content: center;
  border: 1px solid #999;
}

form .row select{
  font-size: 14px;
  background: none;
}

form .row select::-webkit-scrollbar{
  width: 8px;
}

form .row select::-webkit-scrollbar-track{
  background: #fff;
}

form .row select::-webkit-scrollbar-thumb{
  background: #888;
  border-radius: 8px;
  border-right: 2px solid #ffffff;
}

form button{
  height: 52px;
  color: #fff;
  font-size: 17px;
  cursor: pointer;
  margin-top: 10px;
  background: #675AFE;
  transition: 0.3s ease;
}

form button:hover{
  background: #4534fe;
}

@media(max-width: 728px){
  .wrapper{
    max-width: 345px;
    width: 100%;
    margin-left: 7px;
    margin-right: 7px;
  }
} /*For Mobile View*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, create a JavaScript file with a filename of &lt;strong&gt;&lt;code&gt;script.js&lt;/code&gt;&lt;/strong&gt; and paste the following code in your JavaScript file. &lt;strong&gt;Save It&lt;/strong&gt;, you have to create a file with &lt;strong&gt;&lt;code&gt;.js&lt;/code&gt;&lt;/strong&gt; extension at last.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const textarea = document.querySelector("textarea"),
voiceList = document.querySelector("select"), // Selection
speechBtn = document.querySelector("button");

let synth = speechSynthesis,
isSpeaking = true;

voices();

function voices(){
    for(let voice of synth.getVoices()){
        let selected = voice.name === "Google US English" ? "selected" : "";
        let option = `&amp;lt;option value="${voice.name}" ${selected}&amp;gt;${voice.name} (${voice.lang})&amp;lt;/option&amp;gt;`;
        voiceList.insertAdjacentHTML("beforeend", option); // Getting Verbal's 
    }
}

synth.addEventListener("voiceschanged", voices);

function textToSpeech(text){
    let utterance = new SpeechSynthesisUtterance(text);
    for(let voice of synth.getVoices()){
        if(voice.name === voiceList.value){
            utterance.voice = voice;
        }
    }
    synth.speak(utterance);
}

speechBtn.addEventListener("click", e =&amp;gt;{
    e.preventDefault();
    if(textarea.value !== ""){
        if(!synth.speaking){
            textToSpeech(textarea.value);
        }
        if(textarea.value.length &amp;gt; 80){
            setInterval(()=&amp;gt;{
                if(!synth.speaking &amp;amp;&amp;amp; !isSpeaking){
                    isSpeaking = true;
                    speechBtn.innerText = "Convert To Speech"; //Execute
                }else{
                }
            }, 500);
            if(isSpeaking){
                synth.resume();
                isSpeaking = false;
                speechBtn.innerText = "Pause Speech"; //Pause
            }else{
                synth.pause();
                isSpeaking = true;
                speechBtn.innerText = "Resume Speech"; //Resume
            }
        }else{
            speechBtn.innerText = "Convert To Speech"; //Execute
        }
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7JB9ehwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://voximplant.com/assets/images/2020/05/28/text-to-speech-api-scheme-3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JB9ehwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://voximplant.com/assets/images/2020/05/28/text-to-speech-api-scheme-3.jpg" alt="How auto Text-to-Speech works?" width="880" height="386"&gt;&lt;/a&gt;Source: VoximPlant&lt;/p&gt;

&lt;h2&gt;Text To Speech  Converter (Last Words)&lt;/h2&gt;

&lt;p&gt;That’s it, you’ve now successfully built a Text To Speech Converter Project in native HTML, CSS, and JavaScript. &lt;/p&gt;

&lt;p&gt;If your code does not work or you have faced any problem/issue, try downloading the source files from the provided download button below. &lt;/p&gt;

&lt;p&gt;It’s priceless and a &lt;strong&gt;&lt;code&gt;.zip&lt;/code&gt;&lt;/strong&gt; file will be downloaded and then just extract it to your filemanager, server, etc.&lt;/p&gt;



&lt;center&gt;&lt;a href="https://gplinks.co/text-to-speech"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K2xmvfpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6MyzmJa.png%3F1" width="200" height="64"&gt;&lt;/a&gt;&lt;/center&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Rust from the beginning, project management with Cargo</title>
      <author>Chris Noring</author>
      <pubDate>Wed, 24 Nov 2021 15:27:13 +0000</pubDate>
      <link>https://dev.to/azure/rust-from-the-beginning-project-management-with-cargo-3kfk</link>
      <guid>https://dev.to/azure/rust-from-the-beginning-project-management-with-cargo-3kfk</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TLDR; this article covers how to work with Rust projects using Cargo. As soon as you are dealing with more than one file, it's a good idea to adopt Cargo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Series:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/rust-from-the-beginning-your-first-program-30cp"&gt;Your first program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/rust-from-the-beginning-variables-3g7c"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/rust-from-the-beginning-functions-5gal"&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rust projects with Cargo, &lt;strong&gt;you are here&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Control flow&lt;/li&gt;
&lt;li&gt;IO, read and write from the console&lt;/li&gt;
&lt;li&gt;Error handling&lt;/li&gt;
&lt;li&gt;Working with files
Advanced&lt;/li&gt;
&lt;li&gt;Ownership &amp;amp; Borrowing&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#project-management"&gt;
  &lt;/a&gt;
  Project management
&lt;/h2&gt;

&lt;p&gt;When you develop software, you have a few things you want need to consider. The following are some of the major things you need to keep track of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Many files&lt;/strong&gt;. For reasons of order, you quickly grow out of using more than one file to code in. Dividing up you code in many files enables you to get a clearer picture of what you're building, which creates order but makes it easier to collaborate with others and other benefits.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;3rd party libraries&lt;/strong&gt;. You can definitely write all the code yourself but it will take you a while, especially if your project is complicated. A better approach is to write business related code yourself and rely on standard libraries as well as 3rd party libraries for the remaining code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Building your project&lt;/strong&gt;. As your project grows, it becomes more and more complicated to build. You might need to build it differently for different operating systems and for development vs production for example.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Run tasks&lt;/strong&gt;. As part of creating a large project with many files, you will find yourself wanting to run various tasks on your project, like building, testing, linting and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://doc.rust-lang.org/cargo/index.html"&gt;Cargo book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/learn/paths/rust-first-steps?wt.mc_id=academic-0000-chnoring"&gt;Learning path on Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://crates.io/"&gt;Crates.io&lt;/a&gt; Here you can find crates, i.e. packages you can use for your projects. You can also search for packages via the command line. Refer to Cargo book for how to search for that.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/learn/paths/rust-first-steps?wt.mc_id=academic-0000-chnoring"&gt;Rust path on Learn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cargo"&gt;
  &lt;/a&gt;
  Cargo
&lt;/h2&gt;

&lt;p&gt;Ok, now that we know a little more about projects and what we're expected to manage, how does Rust approach project management? The answer is Cargo. Cargo comes with your Rust install and helps you with a lot of things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creating a project&lt;/strong&gt;. Cargo helps you create a project and helps you track things like name, version, your dependencies, and other concepts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build and run your code&lt;/strong&gt;. Cargo can help you compile and run your code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Feature management&lt;/strong&gt;. You can also divide up your project in features, if you say have a client that only paid for a subset of features. In such a case you only want to ship part of the code to said client. Read more here on &lt;a href="https://doc.rust-lang.org/cargo/reference/features.html"&gt;feature management&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dependency management&lt;/strong&gt;. Your project will likely consist of dependencies, libraries or binaries that you use to build your app. You don't want to write code if there is code out there that already solves what you're trying to do.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Package management&lt;/strong&gt;. When you create a project with Cargo, it assumes your project will be a package. A package is something you can theoretically share with others&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Running tests&lt;/strong&gt;. Cargo can run tests. Read more here on &lt;a href="https://doc.rust-lang.org/cargo/commands/cargo-test.html"&gt;running tests&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above is some of Cargo's features, but hopefully right now, you know that Cargo is your best friend and that it's fantastic that a tool like this comes built-in with a Rust install.&lt;/p&gt;

&lt;p&gt;The topic of Cargo is so large there's a whole book dedicated to it, &lt;a href="https://doc.rust-lang.org/cargo/index.html"&gt;Cargo book&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exercise-your-first-project"&gt;
  &lt;/a&gt;
  Exercise - Your first project
&lt;/h2&gt;

&lt;p&gt;To create your first project using Cargo, you invoke the &lt;code&gt;cargo&lt;/code&gt; executable with keyword &lt;code&gt;new&lt;/code&gt; and lastly with the name of the project like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cargo new project-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creates a &lt;em&gt;project-name&lt;/em&gt; subdirectory. In said directory we get the following files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/
  main.rs
.gitignore
Cargo.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what the files mean:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;main.rs&lt;/em&gt;, The &lt;em&gt;main.rs&lt;/em&gt; is our projects main file, the entry for our app. Here's what &lt;em&gt;main.rs&lt;/em&gt; contains:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;   &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Cargo.toml&lt;/em&gt;, this project file that does two things, manage meta information on this project and manage any dependencies your app needs to function. Here's what the file looks like:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;   &lt;span class="nn"&gt;[package]&lt;/span&gt;
   &lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"project-name"&lt;/span&gt;
   &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.1.0"&lt;/span&gt;
   &lt;span class="py"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"email, inferred from Git"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="py"&gt;edition&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"2018"&lt;/span&gt;

   &lt;span class="c"&gt;# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html&lt;/span&gt;

   &lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, you've got information on your project under the &lt;code&gt;[package]&lt;/code&gt; portion like name, version, authors, and edition. There's another section &lt;code&gt;[dependencies]&lt;/code&gt; that's empty for now, as you don't have any external dependencies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-and-run-your-code"&gt;
  &lt;/a&gt;
  Build and run your code
&lt;/h3&gt;

&lt;p&gt;To build and run your project, call &lt;code&gt;cargo run&lt;/code&gt; in your project directory root:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cargo run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see an output resembling this text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Compiling project-name v0.1.0 (/&amp;lt;path&amp;gt;/project-name)
    Finished dev [unoptimized + debuginfo] target(s) in 21.51s
     Running `target/debug/project-name`
Hello, world!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you see is Cargo building and running your code and it ends up showing the text "Hello world!".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exercise-make-a-change"&gt;
  &lt;/a&gt;
  Exercise - Make a change
&lt;/h2&gt;

&lt;p&gt;We've decided to make a nice looking CLI, command line application. For that, we will use an external library &lt;code&gt;termion&lt;/code&gt; that gives us a colored output. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;termion&lt;/code&gt; by opening up &lt;em&gt;Cargo.toml&lt;/em&gt; and located the [dependencies] section and make the following alteration:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;   &lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
   &lt;span class="py"&gt;termion&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, now we're telling Cargo we want the library &lt;code&gt;termion&lt;/code&gt;, next let's leverage that library in our code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open up &lt;em&gt;main.rs&lt;/em&gt; and change the code to the following:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;   &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="n"&gt;crate&lt;/span&gt; &lt;span class="n"&gt;termion&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;termion&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}Red"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;color&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Fg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;color&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Red&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
     &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}Blue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;color&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Fg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;color&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Blue&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
     &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Run your project with &lt;code&gt;cargo run&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   cargo run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you see now is your project going to "crates.io", where the "termion" package is located and attempt to download it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Updating crates.io index
   Downloaded termion v1.5.6
   Downloaded numtoa v0.1.0
   Downloaded libc v0.2.108
   Downloaded 3 crates (591.2 KB) in 0.52s
   Compiling libc v0.2.108
   Compiling numtoa v0.1.0
   Compiling termion v1.5.6
   Compiling project-name v0.1.0 (/&amp;lt;path&amp;gt;/project-name)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;last in your terminal output, you see the colored output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--04DvYPBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vq38theauqew1edwktq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--04DvYPBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vq38theauqew1edwktq.png" alt="Colored output" width="146" height="68"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I read somewhere that this might not work on Windows, please let me know in the comments if you have issues getting this to work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this article, we looked at a "grow up" story, when we went from using &lt;code&gt;rustc&lt;/code&gt; to compile our code and starting using Cargo for that and many other things. Project management means you have a lot of things to consider, and Cargo handles many of them. Cargo is your new best friend and hopefully you can learn more about using Cargo by the links provided in the resources section in this article. All future parts in this series will use Cargo. &lt;/p&gt;

</description>
      <category>rust</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>3 Ways to CENTER a div in CSS</title>
      <author>CodeOz</author>
      <pubDate>Wed, 24 Nov 2021 15:11:19 +0000</pubDate>
      <link>https://dev.to/codeoz/3-ways-to-center-a-div-in-css-gl1</link>
      <guid>https://dev.to/codeoz/3-ways-to-center-a-div-in-css-gl1</guid>
      <description>&lt;p&gt;3 ways to center a div in HTML/CSS!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-position"&gt;
  &lt;/a&gt;
  With Position
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Using positions */&lt;/span&gt;

&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
     &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
     &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"background: blue; width: 500px; height: 250px;"&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
         &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;
         &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: white;"&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      I'm center  
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/codeozz/embed/jOLoKYE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-flexbox"&gt;
  &lt;/a&gt;
  With Flexbox
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Using flexbox */&lt;/span&gt;
&lt;span class="nc"&gt;.container-flexbox&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
     &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-flexbox"&lt;/span&gt;
     &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"background: green; width: 500px; height: 250px;"&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
         &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: white;"&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      I'm center  
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/codeozz/embed/mdMYKQv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-grid"&gt;
  &lt;/a&gt;
  With Grid
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Using Grid */&lt;/span&gt;

&lt;span class="nc"&gt;.container-grid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;place-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
     &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-flexbox"&lt;/span&gt;
     &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"background: orange; width: 500px; height: 250px;"&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
         &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: white;"&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      I'm center  
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/codeozz/embed/vYJwrMv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;I hope you like this reading!&lt;/p&gt;

&lt;p&gt;🎁 You can get my new book &lt;code&gt;Underrated skills in javascript, make the difference&lt;/code&gt; for FREE if you follow me on &lt;a href="https://twitter.com/code__oz"&gt;Twitter&lt;/a&gt; and send message to me 😁 and &lt;strong&gt;SAVE 19$&lt;/strong&gt; 💵💵&lt;/p&gt;

&lt;p&gt;Or get it &lt;a href="https://codeoz.gumroad.com/l/RXLYp"&gt;HERE&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;🇫🇷🥖 For french developper you can check my &lt;a href="https://www.youtube.com/channel/UCC675U1ZUPFASsK9-FjawtA"&gt;YoutubeChannel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎁 &lt;a href="https://www.getrevue.co/profile/code__oz"&gt;MY NEWSLETTER&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;☕️ You can &lt;a href="https://www.buymeacoffee.com/CodeoZ"&gt;SUPPORT MY WORKS&lt;/a&gt; 🙏&lt;/p&gt;

&lt;p&gt;🏃‍♂️ You can follow me on 👇&lt;/p&gt;

&lt;p&gt;🕊 Twitter : &lt;a href="https://twitter.com/code__oz"&gt;https://twitter.com/code__oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👨‍💻 Github: &lt;a href="https://github.com/Code-Oz"&gt;https://github.com/Code-Oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can mark 🔖 this article!&lt;/p&gt;

</description>
      <category>css</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>JAVASCRIPT CHEAT SHEET FOR BEGINNERS</title>
      <author>Keshav</author>
      <pubDate>Wed, 24 Nov 2021 15:08:27 +0000</pubDate>
      <link>https://dev.to/keshav44483499/javascript-cheat-sheet-for-beginners-kp3</link>
      <guid>https://dev.to/keshav44483499/javascript-cheat-sheet-for-beginners-kp3</guid>
      <description>&lt;p&gt;This video covers all topics in JavaScript Cheatsheet for beginners and this javascript cheat sheet contains all the commands which you will require while writing javascript code. Hope you will find this javascript cheat sheet helpful!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6tXroqr98aE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
