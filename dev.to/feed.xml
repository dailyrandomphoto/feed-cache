<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Hire Custom Java Development Company</title>
      <author>Polosoft Technologies</author>
      <pubDate>Fri, 03 Sep 2021 06:05:27 +0000</pubDate>
      <link>https://dev.to/polosofttech/hire-custom-java-development-company-2k5n</link>
      <guid>https://dev.to/polosofttech/hire-custom-java-development-company-2k5n</guid>
      <description>&lt;p&gt;Java is an object-oriented &amp;amp; platform-independent language that is widely used for web and enterprise applications. It enables the engineering of robust, scalable, and cross-functional solutions and technology ecosystems capable of addressing real-world business problems. From web apps to native apps, Android apps, IoT-based applications, enterprise apps, and more, there is a range of apps that rely on this open-source language. &lt;/p&gt;

&lt;p&gt;Polosoft Technologies offers Java application development services to companies to develop superior solutions that put you over the competition and drive your digital acceleration.&lt;/p&gt;

&lt;p&gt;From simple to complex applications, Java can render them all with aplomb. If you want to rope in an expert &lt;a href="https://www.polosoftech.com/technology/java-development-company"&gt;Java application development&lt;/a&gt; partner for your enterprise, Java India is the name you can trust. Our team offers a comprehensive technical expertise and domain knowledge that makes us capable of developing cross-platform applications with the latest technologies of Java.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HpD2i2OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tacr7nhuqr7gif2fy2nm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpD2i2OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tacr7nhuqr7gif2fy2nm.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-hire-a-java-development-company"&gt;
  &lt;/a&gt;
  Why hire a Java development company?
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#the-write-once-run-anywhere-promise"&gt;
  &lt;/a&gt;
  The “write once, run anywhere” promise
&lt;/h3&gt;

&lt;p&gt;This guarantee is the linchpin of Java. As an object-oriented and open-source programming language, &lt;a href="https://www.polosoftech.com/technology/java-development-company"&gt;Java&lt;/a&gt;allows you to write the code once and then run it on different operating systems or devices. It is platform-neutral, which means you can reuse the coding language for cross-platform software development, where code reusability is paramount. These attributes give Java a dynamic and flexible nature, precisely what a business counts on when looking for a software solution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-robust-and-secure-character"&gt;
  &lt;/a&gt;
  A robust and secure character
&lt;/h3&gt;

&lt;p&gt;Security is an innate capability of Java. It carefully scans the code for bugs and errors before deployment, and it ensures the software is running in a secure environment, safeguarding the system. The Java language’s reliability and security make it a preferred choice for organizations in highly-regulated industries that handle sensitive data, such as Fintech, Healthcare, or Education.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-evolving-and-in-highdemand"&gt;
  &lt;/a&gt;
  It’s evolving and in high-demand
&lt;/h3&gt;

&lt;p&gt;Java is easy to learn and use. It’s also highly adaptive and versatile with a track record of constant progress, which determines more programmers to master it and companies to rely on it for their software solutions.&lt;br&gt;
Being a mature language, a large community of developers has formed around Java over time. It is passionate about programming in Java and eager to create high-quality products. If you’re looking to build a Java-based software application that can take your business to the next level, finding a highly skilled Java programmer or a &lt;a href="https://www.polosoftech.com/technology/java-development-company"&gt;Java development company&lt;/a&gt;is an essential step.&lt;/p&gt;

&lt;p&gt;Java is the choice of many organizations that either build enterprise systems to streamline business operations or develop web and mobile applications that create a more engaging customer experience. Java is a highly performant, secure, and feature-packed programming language that is faster to implement and easier to maintain than some other languages. Its popularity makes it rather tricky for organizations to hire &lt;a href="https://www.polosoftech.com/technology/java-development-company"&gt;Java developers&lt;/a&gt;. Nevertheless, the possibility of outsourcing has always brought manifold advantages. A proficient Java programmer is key to developing high-quality software, so whether you find it locally or offshore, it’s not something you want to compromise on.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>java</category>
      <category>design</category>
      <category>devops</category>
    </item>
    <item>
      <title>Firebase Typescript with React example: CRUD Application</title>
      <author>Tien Nguyen</author>
      <pubDate>Fri, 03 Sep 2021 05:06:47 +0000</pubDate>
      <link>https://dev.to/tienbku/firebase-typescript-with-react-example-crud-application-2po8</link>
      <guid>https://dev.to/tienbku/firebase-typescript-with-react-example-crud-application-2po8</guid>
      <description>&lt;p&gt;In this tutorial, I will show you step by step to build a React Typescript Firebase CRUD example with Realtime Database.&lt;/p&gt;

&lt;p&gt;Full Article: &lt;a href="https://www.bezkoder.com/firebase-typescript-react/"&gt;https://www.bezkoder.com/firebase-typescript-react/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using Cloud Firestore instead:&lt;br&gt;
&lt;a href="https://www.bezkoder.com/react-typescript-firestore/"&gt;React Typescript Firestore example: Build a CRUD App&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Firebase Typescript with React Overview&lt;/h2&gt;

&lt;p&gt;We're gonna build an React Typescript Firebase CRUD Application using &lt;a href="https://www.npmjs.com/package/firebase"&gt;firebase&lt;/a&gt; library in which:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Each Tutorial has key, title, description, published status.&lt;/li&gt;
    &lt;li&gt;We can create, retrieve, update, delete Tutorials (CRUD operations) from Firebase Realtime Database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the screenshots:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new Tutorial:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rGv7w5J2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k5hwjx4s7ujisafukp3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rGv7w5J2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k5hwjx4s7ujisafukp3.png" alt="firebase-typescript-react-crud-create"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Firebase Realtime Database right after the Operation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UFHNM9aA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9e9vyc9bcz6wxotbfep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UFHNM9aA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9e9vyc9bcz6wxotbfep.png" alt="firebase-typescript-react-crud-create-db"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retrieve all Tutorials with details when clicking on a Tutorial:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Za13EA0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfsk3tv11x4ye19ws8dw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Za13EA0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfsk3tv11x4ye19ws8dw.png" alt="firebase-typescript-react-crud-retrieve"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change status to &lt;strong&gt;Published&lt;/strong&gt;/&lt;strong&gt;Pending&lt;/strong&gt; using &lt;strong&gt;Publish&lt;/strong&gt;/&lt;strong&gt;UnPublish&lt;/strong&gt; button:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--56gJbei8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uumxqq31lqpfbd25ea60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--56gJbei8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uumxqq31lqpfbd25ea60.png" alt="firebase-typescript-react-crud-update-status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update the Tutorial details with &lt;strong&gt;Update&lt;/strong&gt; button:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---jvzpW6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tui3t0c8lkdbcg512ko8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---jvzpW6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tui3t0c8lkdbcg512ko8.png" alt="firebase-typescript-react-crud-update"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Delete the Tutorial using &lt;strong&gt;Delete&lt;/strong&gt; button:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uk-BQjUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8l44m09gl4qmt8la4z42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uk-BQjUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8l44m09gl4qmt8la4z42.png" alt="firebase-typescript-react-crud-delete"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Delete all Tutorials with &lt;strong&gt;Remove All&lt;/strong&gt; button:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hXPwaln9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7er5f3d3b0i4dznc47b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hXPwaln9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7er5f3d3b0i4dznc47b.png" alt="firebase-typescript-react-crud-delete-all"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Technology&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;React 17/16&lt;/li&gt;
    &lt;li&gt;firebase 8&lt;/li&gt;
    &lt;li&gt;typescript 4.3.5&lt;/li&gt;
    &lt;li&gt;react-router-dom 5&lt;/li&gt;
    &lt;li&gt;bootstrap 4.6.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Project Structure&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ik5jpbu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlkot1wv1l8icajgo5q7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ik5jpbu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlkot1wv1l8icajgo5q7.png" alt="firebase-typescript-react-crud-project-structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;firebase.ts&lt;/code&gt; configures information to connect with Firebase Project and export Firebase &lt;a href="https://firebase.google.com/docs/reference/js/firebase.database.Database"&gt;Database&lt;/a&gt; service.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;services/tutorial.service.ts&lt;/code&gt; exports &lt;code&gt;TutorialDataService&lt;/code&gt; that uses &lt;code&gt;firebase&lt;/code&gt;'s Database &lt;code&gt;Reference&lt;/code&gt; to interact with Firebase Database.&lt;/li&gt;
&lt;li&gt;There are 3 components that uses &lt;code&gt;TutorialDataService&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;add-tutorial&lt;/code&gt; for creating new item&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tutorials-list&lt;/code&gt; contains list of items, parent of &lt;code&gt;tutorial&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tutorial&lt;/code&gt; shows item details&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;App.tsx&lt;/code&gt; contains Browser Router view and navigation bar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For step by step instruction and Github source code, please visit:&lt;br&gt;
&lt;a href="https://www.bezkoder.com/firebase-typescript-react/"&gt;https://www.bezkoder.com/firebase-typescript-react/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also find how to create React HTTP Client for working with Restful API in:&lt;br&gt;
&lt;a href="https://www.bezkoder.com/react-typescript-axios/"&gt;React Typescript example Project with Axios and Web API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or Cloud Firestore for serverless:&lt;br&gt;
&lt;a href="https://www.bezkoder.com/react-typescript-firestore/"&gt;React Typescript Firestore example: Build a CRUD App&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Further Reading&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href="https://reactjs.org/docs/react-component.html"&gt;React Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://firebase.google.com/docs/reference/js/firebase.database.Database"&gt;firebase.database.Database&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://firebase.google.com/docs/reference/js/firebase.database.Reference"&gt;firebase.database.Reference&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://firebase.google.com/docs/database/web/start"&gt;Firebase Web Get Started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fullstack:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href="https://bezkoder.com/react-spring-boot-crud/"&gt;React + Spring Boot + MySQL: CRUD example&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-react-postgresql/"&gt;React + Spring Boot + PostgreSQL: CRUD example&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://bezkoder.com/react-spring-boot-mongodb/"&gt;React + Spring Boot + MongoDB: CRUD example&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://bezkoder.com/react-node-express-mysql/"&gt;React + Node.js + Express + MySQL: CRUD example&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://bezkoder.com/react-node-express-postgresql/"&gt;React + Node.js + Express + PostgreSQL example&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://bezkoder.com/react-node-express-mongodb-mern-stack/"&gt;React + Node.js + Express + MongoDB example&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://bezkoder.com/django-react-axios-rest-framework/"&gt;React + Django + Rest Framework example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>firebase</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Middlewares in Go</title>
      <author>Karan Kumar </author>
      <pubDate>Fri, 03 Sep 2021 05:05:46 +0000</pubDate>
      <link>https://dev.to/karankumarshreds/middlewares-in-go-41j</link>
      <guid>https://dev.to/karankumarshreds/middlewares-in-go-41j</guid>
      <description>&lt;p&gt;Today we will learn how to implement middlewares in Go and also we will learn how to chain the middlewares in an efficient way without using any third party package.&lt;/p&gt;

&lt;p&gt;The code for this can be found here &lt;a href="https://github.com/karankumarshreds/GoMiddlewares"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#middleware"&gt;
  &lt;/a&gt;
  Middleware
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Middleware&lt;/strong&gt; is an entity that intercepts the server's request/response life cycle. In simple words, it is a piece of code that runs before/after the server caters to a request with a response.&lt;br&gt;
A middleware can do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Process the request before running business logic (authentication)&lt;/li&gt;
&lt;li&gt;Modify the request to the next handler function (attaching payload)&lt;/li&gt;
&lt;li&gt;Modify the response for the client &lt;/li&gt;
&lt;li&gt;Logging.... and much more &lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#basic-middleware"&gt;
  &lt;/a&gt;
  Basic Middleware
&lt;/h2&gt;

&lt;p&gt;Let's write a basic route handler&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prinln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Executing the handler"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"OK"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This piece of code simply returns "OK" response to the &lt;code&gt;GET&lt;/code&gt; request at &lt;code&gt;http://localhost:8000/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let us create a simple middleware that will be a function that intercepts the request -&amp;gt; response lifecycle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;originalHandler&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Running before handler"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hijacking Request "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;originalHandler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Running after handler"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: This middleware function expects a function (our handler in this case) of type &lt;code&gt;handler&lt;/code&gt; and will return a &lt;code&gt;handler&lt;/code&gt; after tweaking the request response flow.&lt;/p&gt;

&lt;p&gt;So what is does is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Runs Println function&lt;/li&gt;
&lt;li&gt;Writes to the response &lt;code&gt;"Hijacking Request"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Serves the original handler which was passed as an argument &lt;/li&gt;
&lt;li&gt;Runs a Println function&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us hook this up with the main function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// converting our handler function to handler &lt;/span&gt;
    &lt;span class="c"&gt;// type to make use of our middleware &lt;/span&gt;
    &lt;span class="n"&gt;myHandler&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handlerfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myHandler&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c"&gt;// 👈&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prinln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Executing the handler"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"OK"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;originalHandler&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Running before handler"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hijacking Request "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;originalHandler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Running after handler"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if we hit it with a &lt;code&gt;GET&lt;/code&gt; request at &lt;code&gt;http://localhost:8000&lt;/code&gt; we will get &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Client response:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hijacking Request OK
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👆 This shows the middleware added the response "Hijacking Request" to the original response by the handler, that is "OK".&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Server logs:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Running before handler
Executing the handler 
Running after handler 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#real-world-example"&gt;
  &lt;/a&gt;
  Real world example
&lt;/h2&gt;

&lt;p&gt;Now let us take what we have learned and build upon it. This middleware example has two goals:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write a middleware that makes sure request has &lt;code&gt;Header&lt;/code&gt; &lt;code&gt;"Content-Type"&lt;/code&gt; &lt;code&gt;application/json&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Write a middleware that adds &lt;code&gt;current server time&lt;/code&gt; to the reponse &lt;code&gt;cookie&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#middleware-1"&gt;
  &lt;/a&gt;
  Middleware #1
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;filterContentType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusUnsupportedMediaType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"405 - Header Content-Type incorrect"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServeHTTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#middleware-2"&gt;
  &lt;/a&gt;
  Middleware #2
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;setTimeCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c"&gt;// Cookie here is a struct that represents an HTTP&lt;/span&gt;
    &lt;span class="c"&gt;// cookie as sent in the Set-Cookie header of HTTP request&lt;/span&gt;
    &lt;span class="n"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Server Time (UTC)"&lt;/span&gt; &lt;span class="c"&gt;// can be anything&lt;/span&gt;
      &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Itoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unix&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
      &lt;span class="c"&gt;// 👆 converted time to string&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// now set the cookie to response &lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServeHTTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us create a handler to handle the POST request, and then we will use the middlewares:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handler"&gt;
  &lt;/a&gt;
  Handler
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Firstname&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;Lastname&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// main handler &lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;postHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusMethodNotAllowed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"405 - Method Not Allowed"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;
    &lt;span class="n"&gt;decoder&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewDecoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"500 - Internal Server Error"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Got firstName and lastName as %s, %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firstname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lastname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"201 - Created"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let we will (in the main function):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take the middlewares &lt;/li&gt;
&lt;li&gt;Chain them together &lt;/li&gt;
&lt;li&gt;Wrap them around the handler
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;myHandler&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chain&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;filterContentType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setTimeCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myHandler&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c"&gt;// 👈&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;filterContentType(setTimeCookie(myHandler))&lt;/code&gt;&lt;br&gt;
This will return the handler and run the middlewares in the order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;filterContentType&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setTimeCookie&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;... and then our handler &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us test this now:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -H "Content-Type: application/json" -X POST&lt;br&gt;
http://localhost:8000/city -d '{"firstname": "John", "lastname": "Doe"}'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The server will respond with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;201 - Created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us test the Header middleware &lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -i -X POST http://localhost:8000/city -d '{"firstname": "John", "lastname": "Doe"}'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The server will respond with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;415 - Unsupported Media Type
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is exactly what we wanted. Also you can use &lt;code&gt;postman&lt;/code&gt; or &lt;code&gt;curl&lt;/code&gt; command to check if the response has the attached cookie as well. And it will because of the other middleware.&lt;/p&gt;

&lt;p&gt;But chaining these middlewares is not a neat process, imagine we had 5 middlewares, the chaining would look like: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;chain := m1(m2(m3(m4(m5(handler)))))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;👆 This is not what we want, so let us create our own chaining middleware handling logic.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#chaining-middlewares"&gt;
  &lt;/a&gt;
  Chaining Middlewares
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt; is to use &lt;code&gt;chain := m1(m2(m3(m4(m5(handler)))))&lt;/code&gt; as &lt;code&gt;chain := CreateChain(m1, m2, m3, m4, m5).Then(handler)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let us write a pseudo code for that we want to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We need a &lt;code&gt;CreateChain&lt;/code&gt; function that takes an Slice/List of middlewares&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need a Then function that would be used as a method on &lt;code&gt;Chain&lt;/code&gt; type object that will do run : &lt;code&gt;m1(m2(m3(m4(m5(handler)))))&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us create a struct for a &lt;code&gt;Middleware&lt;/code&gt; and &lt;code&gt;Chain&lt;/code&gt; (which is slice/list of middleware):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Middleware&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Chain&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;Middleware&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us write function &lt;code&gt;CreateChain&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// returns a Slice of middlewares &lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;CreateChain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;middlewares&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;Middleware&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Chain&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;slice&lt;/span&gt; &lt;span class="n"&gt;Chain&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;middlewares&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us write function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;Chain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;originalHandler&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;originalHandler&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;originalHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultServeMux&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Same as to m1(m2(m3(originalHandler)))&lt;/span&gt;
        &lt;span class="n"&gt;originalHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;originalHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;originalHandler&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here, the for loop will loop through &lt;code&gt;each&lt;/code&gt; middleware from in the Slice/List of middlewares and keep it wrap itself around the originalHandler passed into the function.&lt;/p&gt;

&lt;p&gt;Now we can use this in the main function as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;myHandler&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandlerFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chain&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;CreateChain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filterContentType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setTimeCookie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// 👈&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code for this can be found here &lt;a href="https://github.com/karankumarshreds/GoMiddlewares"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope that was helpful. Feel free to create a PR on the code repo if you find any issues or improvements. &lt;/p&gt;

</description>
      <category>go</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>github</category>
    </item>
    <item>
      <title>10 CSS Button Hover Effects - FrontendTrick</title>
      <author>frontendtrick</author>
      <pubDate>Fri, 03 Sep 2021 04:42:42 +0000</pubDate>
      <link>https://dev.to/frontendtrick/10-css-button-hover-effects-frontendtrick-2ajd</link>
      <guid>https://dev.to/frontendtrick/10-css-button-hover-effects-frontendtrick-2ajd</guid>
      <description>&lt;p&gt;Collection of hand-picked free 10 HTML and CSS Button Hover Effects with code examples.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;CSS - Button Hover Effects
&lt;a href="https://www.frontendtrick.com/2021/09/10-css-button-hover-effects.ht"&gt;Demo&lt;/a&gt;
Author: Magic Mai, Made With: HTML/CSS&lt;/li&gt;
&lt;li&gt;CSS Button Hover Effects with box-shadow!
&lt;a href="https://www.frontendtrick.com/2021/09/10-css-button-hover-effects.ht"&gt;Demo&lt;/a&gt;
Author: Shounak Das , Made With: HTML/CSS&lt;/li&gt;
&lt;li&gt;Playful button hover effects
&lt;a href="https://www.frontendtrick.com/2021/09/10-css-button-hover-effects.ht"&gt;Demo&lt;/a&gt;
Author: Aaron Iker, Made With: HTML,CSS and JS
4.Cool Button Hover Effects
&lt;a href="https://www.frontendtrick.com/2021/09/10-css-button-hover-effects.ht"&gt;Demo&lt;/a&gt;
Author: Ashish Mehra, Made With: HTML/CSS&lt;/li&gt;
&lt;li&gt;Button Hover Effects
&lt;a href="https://www.frontendtrick.com/2021/09/10-css-button-hover-effects.ht"&gt;Demo&lt;/a&gt;
Author:Button Hover Effects, Made With: HTML/CSS&lt;/li&gt;
&lt;li&gt;Button Hover Effects
&lt;a href="https://www.frontendtrick.com/2021/09/10-css-button-hover-effects.ht"&gt;Demo&lt;/a&gt;
Author: Wisnu ST Made With: HTML/CSS&lt;/li&gt;
&lt;li&gt;Ghost Button Hover Effects
&lt;a href="https://www.frontendtrick.com/2021/09/10-css-button-hover-effects.ht"&gt;Demo&lt;/a&gt;
Author: Mark Mead, Made With: HTML/CSS&lt;/li&gt;
&lt;li&gt;Click Me Hover Effects
&lt;a href="https://www.frontendtrick.com/2021/09/10-css-button-hover-effects.ht"&gt;Demo&lt;/a&gt;
Author: Andreas Storm, Made With: HTML/CSS&lt;/li&gt;
&lt;li&gt;Gooey button hover effect with SVG filters &amp;amp; CSS
&lt;a href="https://www.frontendtrick.com/2021/09/10-css-button-hover-effects.ht"&gt;Demo&lt;/a&gt;
Author: Ines Montani, Made With: HTML/CSS&lt;/li&gt;
&lt;li&gt;Button hover effect
&lt;a href="https://www.frontendtrick.com/2021/09/10-css-button-hover-effects.ht"&gt;Demo&lt;/a&gt;
Author: Abadu,. Made With: HTML/CSS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you like this short tutorial, please leave a comment and share it with your friends. Let me know what else would you like me to cover in a future tutorial.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A Rails template for modern, reactive applications</title>
      <author>David Colby</author>
      <pubDate>Fri, 03 Sep 2021 03:33:23 +0000</pubDate>
      <link>https://dev.to/davidcolbyatx/a-rails-template-for-modern-reactive-applications-38di</link>
      <guid>https://dev.to/davidcolbyatx/a-rails-template-for-modern-reactive-applications-38di</guid>
      <description>&lt;p&gt;I've &lt;a href="https://www.colby.so/posts/live-search-with-rails-and-stimulusreflex"&gt;written&lt;/a&gt; &lt;a href="https://www.colby.so/posts/turbo-streams-on-rails"&gt;a lot&lt;/a&gt; &lt;a href="https://www.colby.so/posts/instant-search-with-rails-6-and-hotwire"&gt;about&lt;/a&gt; the tools pushing Rails forward, allowing small teams of developers to build modern, fast, engaging web applications, quickly.&lt;/p&gt;

&lt;p&gt;The stars of the show — the Hotwire stack (Stimulus and Turbo), CableReady, StimulusReflex — are now part of every new Rails application I build.&lt;/p&gt;

&lt;p&gt;Writing Ruby code and building cool stuff is fun. Reading setup docs, fiddling with tooling, and remembering how to tie everything together each time you create a new application is a bummer.&lt;/p&gt;

&lt;p&gt;So, to spend more time on the fun stuff and less time in setup land, I built a small &lt;a href="https://github.com/DavidColby/vite_starter_template"&gt;Rails application template&lt;/a&gt; that let's me jump right into building.&lt;/p&gt;

&lt;p&gt;This &lt;a href="https://github.com/DavidColby/vite_starter_template"&gt;new template&lt;/a&gt; is now available on Github for anyone interested in building reactive Rails applications to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-the-template"&gt;
  &lt;/a&gt;
  What's in the template?
&lt;/h2&gt;

&lt;p&gt;The template comes with the following tools configured and ready to start using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby on Rails (of course)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stimulus.hotwired.dev/"&gt;Stimulus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://turbo.hotwired.dev/"&gt;Turbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cableready.stimulusreflex.com/"&gt;CableReady&lt;/a&gt; + &lt;a href="https://docs.stimulusreflex.com/"&gt;StimulusReflex&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://windicss.org/"&gt;WindiCSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of using Webpacker to handle building JavaScript and CSS, I've added Vite, via &lt;a href="https://github.com/ElMassimo/vite_ruby"&gt;vite_rails&lt;/a&gt;, configured to work seamlessly with Stimulus and WindiCSS immediately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-vite"&gt;
  &lt;/a&gt;
  Why Vite?
&lt;/h2&gt;

&lt;p&gt;Vite fits in well alongside the modern, reactive stack we're using, with HMR-enabled updates for every change, including for server-side views.&lt;/p&gt;

&lt;p&gt;In addition to being fast, simple and effective, &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; is a well-supported project with a very active community working to improve it.&lt;/p&gt;

&lt;p&gt;With the decision to &lt;a href="https://github.com/rails/rails/pull/42999"&gt;move away from Webpacker&lt;/a&gt; as the default Rails JavaScript setup in Rails 7, it is a good time to explore new options, and Vite is a strong contender.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-the-template"&gt;
  &lt;/a&gt;
  Use the template
&lt;/h2&gt;

&lt;p&gt;To create a new Ruby on Rails application from this template, simply run this command from your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails new your_new_application -m https://raw.githubusercontent.com/davidcolby/vite_starter_template//main/template.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-isnt-x-included-in-the-template"&gt;
  &lt;/a&gt;
  Why isn't X included in the template?
&lt;/h2&gt;

&lt;p&gt;I've intentionally left the template light and plan to keep it that way.&lt;/p&gt;

&lt;p&gt;This template's goal is to provide the basic tools to build modern applications, not provide a ready-to-deploy starter application. If you want a more full-featured starter, consider &lt;a href="https://jumpstartrails.com/"&gt;Jumpstart&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have a tool that you want to see included, &lt;a href="https://github.com/DavidColby/vite_starter_template/issues"&gt;Github issues&lt;/a&gt; and &lt;a href="https://github.com/DavidColby/vite_starter_template/pulls"&gt;PRs&lt;/a&gt; are welcome.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;I'd love for you to try out the stack included in this template — building Rails apps with this stack is a joy — and I hope that this template makes it a little easier to get started.&lt;/p&gt;

&lt;p&gt;Have feedback or questions about the template? Get in touch with me here, or open an issue on the &lt;a href="https://github.com/DavidColby/vite_starter_template"&gt;Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, thanks for reading!&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>showdev</category>
    </item>
    <item>
      <title>HTTP Simplified</title>
      <author>Azamah Jr</author>
      <pubDate>Fri, 03 Sep 2021 03:19:34 +0000</pubDate>
      <link>https://dev.to/kaid00/http-simplified-5eak</link>
      <guid>https://dev.to/kaid00/http-simplified-5eak</guid>
      <description>&lt;p&gt;If you have an interest in Web development and building APIs, understanding the concepts of HTTP is vital.&lt;/p&gt;

&lt;p&gt;In this article you are going to learn the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What HTTP is, and its characteristics
&lt;/li&gt;
&lt;li&gt;A brief history of HTTP versions&lt;/li&gt;
&lt;li&gt;What Sessions are and their usage &lt;/li&gt;
&lt;li&gt;The Request-Response cycle&lt;/li&gt;
&lt;li&gt;HTTP Request and Response messages&lt;/li&gt;
&lt;li&gt;HTTP methods and their operations&lt;/li&gt;
&lt;li&gt;HTTP Status codes, their meanings, and what operations they perform&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-http"&gt;
  &lt;/a&gt;
  🤔What is HTTP?
&lt;/h2&gt;

&lt;p&gt;HyperText Transfer Protocol (HTTP) is a stateless, connection-less, request-response protocol that consists of rules which define communications between clients and servers connected over an established &lt;a href="https://searchnetworking.techtarget.com/definition/TCP"&gt;Transmission Control Protocol (TCP)&lt;/a&gt; connection&lt;/p&gt;

&lt;p&gt;Once there is an established connection between the client and the server, HTTP defines rules for transferring data such as images, text, and other multimedia between the client and the server&lt;/p&gt;

&lt;p&gt;Before delving any further, let's define some basic terminologies which will be mentioned in the article.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clients: The client is a web browser, search engine, or robot. The client sends the request message to the server &lt;/li&gt;
&lt;li&gt;Servers: A web server that receives and responds to the request message sent by the clients, by sending a response message back to the client &lt;/li&gt;
&lt;li&gt;User: The individual who enters a URI into the browser or request for specific resource within an application&lt;/li&gt;
&lt;li&gt;URI( Uniform Resource Identifier): it is used to identify a given unique resource on the web&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#history-of-http"&gt;
  &lt;/a&gt;
  📜 History of HTTP
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HTTP/1.0: It was the original HTTP. It opened a new TCP connection for each HTTP request-response exchange, this approach is less efficient when multiple requests are sent in succession, hence the need to address this flaw in later versions&lt;/li&gt;
&lt;li&gt;HTTP/1.1: To mitigate the flaws of HTTP/1.0, pipelining was implemented which allowed multiple HTTP request-response exchanges over a single TCP connection&lt;/li&gt;
&lt;li&gt;HTTP/2 goes a step further by multiplexing messages within frames over a single open TCP connection

&lt;ul&gt;
&lt;li&gt;HTTP/2 messages a not human-readable and are embedded into frames which allows optimizations like compressions of HTTP headers and multiplexing.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#characteristics-of-http"&gt;
  &lt;/a&gt;
  Characteristics of HTTP
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HTTP is stateless:  There's no link between any two or more HTTP requests messages being successively sent out on the same TCP connection, this means from the server's perspective each HTTP request message is considered isolated and unique&lt;/li&gt;
&lt;li&gt;HTTP is not connection-based: Before a client and server can exchange requests and responses there must be an established connection between the client and server, but HTTP is not connection-based, hence it relies on the TCP transport layer which is a connection-based protocol, to establish a secure connection between the client and the server&lt;/li&gt;
&lt;li&gt;Once the server receives the HTTP request messages sent by the client on an opened TCP connection, the server analyzes and sends an HTTP response message to the client, after which the TCP connection is closed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although HTTP itself is stateless, there's a need to share state between multiple HTTP requests. HTTP cookies make it possible for the use of stateful sessions. &lt;/p&gt;

&lt;p&gt;HTTP cookies are added to the header of each HTTP request allowing session creations on each HTTP request, doing this makes it possible to share state between multiple HTTP requests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-sessions"&gt;
  &lt;/a&gt;
  🤔What are Sessions
&lt;/h3&gt;

&lt;p&gt;A session is temporal storage on the server, each session consists of the session data and the session ID which identifies a specific session. The session data is stored on the server while the session ID is stored in the client(web browser) using HTTP cookies. To identify a specific session, the session ID is sent back to the server using HTTP cookies&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#characteristics-of-sessions"&gt;
  &lt;/a&gt;
  Characteristics of Sessions
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Sessions are unique for each user. So if there are 4 users who make a request to the server, there will be 4 sessions created on the server. &lt;/li&gt;
&lt;li&gt;During the request processing of each user, the user's sessions are available to all web pages on the application &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#sessions-usage-examples"&gt;
  &lt;/a&gt;
  Sessions usage examples
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Sessions can be used to protect certain pages and routes so that only specific users can access them, we can keep track of the users when they log in, by storing their user's IDs in a session &lt;/li&gt;
&lt;li&gt;Sessions can be used to keep track of a users' log status. So we can restrict access to protected resources and routes, to being available to logged-in users only. When a user logs in, their JSON Web Token(JWT) is stored in a session, and with subsequent user requests to a resource, it can be checked to see if the user is logged in&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-http-process"&gt;
  &lt;/a&gt;
  🔂The HTTP process
&lt;/h2&gt;

&lt;p&gt;To understand the HTTP process, let's ask ourselves, what actually happens each time a user types a URL into a browser in order to open a new webpage. Well the most simple answer is;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The client which in this case is our browser, sends a request to the server in which the web page is located&lt;/li&gt;
&lt;li&gt;The server then sends back a response containing the requested webpage to the client.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YCNJ_IVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628319887364/rYUQx2_0sS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YCNJ_IVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628319887364/rYUQx2_0sS.png" alt="Artboard 233.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This process is called the &lt;strong&gt;Request-Response cycle&lt;/strong&gt;.&lt;br&gt;
Let's take it one step further.&lt;/p&gt;

&lt;p&gt;Let's say we want to access the explore page on hashnode.com by entering the following URL into the browser &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3b6wTu6---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628391128887/hy5-PcNfX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3b6wTu6---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628391128887/hy5-PcNfX.png" alt="Artboard 2 copy33.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The URL is made up of;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Protocol: It is the protocol to be used on the connection, it could be HTTP or HTTPS, in this case, it is HTTPS which is the secure version of HTTP.&lt;/li&gt;
&lt;li&gt;Resource: the resource which we want to access, in this case, it is the explore page &lt;/li&gt;
&lt;li&gt;Domain name: In this case it's hashnode.com, we have to note that the domain name here is not actually the real address of the server that we are trying to access, rather it's just a nice and easy to remember representation of the actual address. So the client needs to convert the domain name to the actual address of the server, through the process of DNS( Domain Name Servers ) Lookup. The actual address of the domain name got from the DNS Lookup is;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZVYJFks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628391189102/4vO8rEfFY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZVYJFks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628391189102/4vO8rEfFY.png" alt="Artboard 2 copy 233.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This process of DNS Lookup only occurs when the HTTP request is made. &lt;/p&gt;

&lt;p&gt;When a client initiates an HTTP request to the server, it performs the following steps;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It establishes a TCP connection between the client and server: the TCP connection is used to send requests and receive responses&lt;/li&gt;
&lt;li&gt;Once the TCP connection has been established, the client sends an HTTP request message to the server&lt;/li&gt;
&lt;li&gt;After interpreting an HTTP request message the server sends an HTTP response message to the client&lt;/li&gt;
&lt;li&gt;Once the server has responded to the client's request, the TCP connection is closed &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This process is illustrated below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wivVTJAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628390205455/dKcXwfwS8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wivVTJAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628390205455/dKcXwfwS8.png" alt="Artboard 333.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#http-messages"&gt;
  &lt;/a&gt;
  📝 HTTP messages
&lt;/h2&gt;

&lt;p&gt;There are two types of HTTP messages;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP Request messages sent by the client to the server&lt;/li&gt;
&lt;li&gt;HTTP Response messages sent from the server to the client
each of these messages has a format in which they are generated&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#http-request-message"&gt;
  &lt;/a&gt;
  HTTP Request Message
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4egjqX_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628390747456/Fhk3an1Va.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4egjqX_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628390747456/Fhk3an1Va.png" alt="Artboard 1133.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The request message consists of the following;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The HTTP method: these methods are usually a verb like 'GET' or 'POST' that defines the operation applied by the client to the resource, in this case, the HTTP method is GET note HTTP methods are case sensitive.&lt;/li&gt;
&lt;li&gt;The Request-URI: identifies the resource upon which the HTTP method is applied. The exact resource is determined using the Request-URI and the Host header field&lt;/li&gt;
&lt;li&gt;The HTTP protocol version: In this case the version is HTTP/1.1&lt;/li&gt;
&lt;li&gt;Request headers: Conveys additional information about the request and about the client itself to the servers, in this case, we have the following request headers;

&lt;ul&gt;
&lt;li&gt;Host: It specifies the internet port(IP) address and port number of the server where the requested resource is stored, an IP address without a trailing port defaults to port number 80 for HTTP requests and 443 for HTTPS requests. Note without specifying the Host header field, the request will return an error&lt;/li&gt;
&lt;li&gt; Accept-Language: Specifies which language the client is able to understand, in this case, the language is 'en' for English, other values could be 'fr' for French&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Body: An optional field that contains the information being sent to the server for storage, mainly used when using HTTP methods like POST, PATCH&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#http-response-message"&gt;
  &lt;/a&gt;
  HTTP Response Message
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1qMpQaFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628390735720/1Unf9vpWu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1qMpQaFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628390735720/1Unf9vpWu.png" alt="Artboard 11 copy33.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The response message consists of the following;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The HTTP protocol version: In this case the version is HTTP/1.1&lt;/li&gt;
&lt;li&gt;Status code: in this case, is 200&lt;/li&gt;
&lt;li&gt;Response headers: Conveys additional information about the response and about the server itself to the client, in this case, we have the following request headers;

&lt;ul&gt;
&lt;li&gt;Accept-Ranges: It is used by the server to show its support for partial requests&lt;/li&gt;
&lt;li&gt;Server: Describes the software used by the origin by the origin server that handled the request&lt;/li&gt;
&lt;li&gt;Content-type: This header field indicates the resource content type&lt;/li&gt;
&lt;li&gt;E-Tag: it identifies the specific resource version&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Body: An optional field that contains fetched information being sent to the client from the server, mainly used when using HTTP methods like GET.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#http-methods"&gt;
  &lt;/a&gt;
  HTTP Methods
&lt;/h2&gt;

&lt;p&gt;HTTP uses methods to define the operation to be applied to the resource identified by the Request-URI. These methods are usually verbs, with the most widely used methods being POST, GET, PATCH, and DELETE. Each of these HTTP methods returns a success or failure upon completion of their operations, using status codes to represent success or a failure.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;GET: This method retrieves the resource specified in the request-URI. If successful the resource is returned as an entity in the response message along with the status code 200 (Success).&lt;/li&gt;
&lt;li&gt;POST: This method request that the server accepts the data or entity enclosed in the Request body, if successful the server responds by sending a response message containing the status code 201 (Created), along with the location of the posted entity or data.&lt;/li&gt;
&lt;li&gt;PUT: This method request that the enclosed data or entity in the Request body be used to modify the request identified by the  Request-URI.&lt;/li&gt;
&lt;li&gt;DELETE: This method request that the enclosed data or entity in the request be stored under the supplied Request-URI.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#http-status-codes"&gt;
  &lt;/a&gt;
  📱 HTTP Status Codes
&lt;/h2&gt;

&lt;p&gt;The status codes are used by the client to determine if the HTTP request sent to the server, along with the specified operation was a success or a failure, remember the operation is specified by using the HTTP method.&lt;br&gt;
The status code is a 3 digit result code, with the first digit defining the class of the code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;1xx (Informational): This class of status codes consists of informational responses indicating that a client should continue with a request. Examples of  status codes belonging to this class;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;100 Continue: The client should continue with their request&lt;/li&gt;
&lt;li&gt;101 Switching protocols: The server is willing to comply with the request to change the application protocol being used in the connection, this request is made using the Upgrade message header field&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2XX (Success): This class of status codes indicates that the request made by the client was successfully received, understood, and accepted by the server. Examples of  status codes belonging to this class include the following;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;200 Ok: The request succeeded, the information returned with the response is dependent on the HTTP method used in the request.

&lt;ul&gt;
&lt;li&gt;GET: the requested resource is sent in the response&lt;/li&gt;
&lt;li&gt;POST: A description of the action is sent in the response&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;201 Created: The request has succeeded and a new resource has been created&lt;/li&gt;
&lt;li&gt;202 Accepted: The request has been accepted but not yet processed by the server &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3XX (Redirection): This class of status codes indicates that further action needs to be taken by the user to complete the request, examples of status codes belonging to this class;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;301 Moved permanently: The requested resource has been moved permanently to a new URI, the permanent URI is given in the Location header field in the response&lt;/li&gt;
&lt;li&gt;304 Not modified: A successful get request is made, but the client does not modify the resource&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4XX (Client Error): This class of status code indicates that the client has erred. Examples of status codes belonging to this class; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;400 Bad requests: The request could not be understood by the server&lt;/li&gt;
&lt;li&gt;401 Unauthorized: The request requires user authentication&lt;/li&gt;
&lt;li&gt;404 Not found: The server can not find any resource matching the resource-URI
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5XX (Server Error): This class of status code indicates that the server has erred. Examples of status codes belonging to this class;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;500 Internal error: The server encountered an unexpected condition with prevented it from fulfilling the request&lt;/li&gt;
&lt;li&gt;503 Service unavailable: The server is unable to handle the request due to a temporal condition such as server maintenance or temporal overloading&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can read a lot more about status codes  &lt;a href="https://datatracker.ietf.org/doc/html/rfc2616#section-10"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you found this article useful and helpful, if you have any questions let me know in the comments. In a later article, we are going to learn how to implement and use these concepts in building a Rest API. That's it for now 👋&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Animation React - Bem-te-vi </title>
      <author>Gustavo Scarpim</author>
      <pubDate>Fri, 03 Sep 2021 03:09:54 +0000</pubDate>
      <link>https://dev.to/guscarpim/react-animation-bem-te-vi-ojl</link>
      <guid>https://dev.to/guscarpim/react-animation-bem-te-vi-ojl</guid>
      <description>&lt;p&gt;Today I'm bringing another animation made with GSAP / React, you can see in my github all the code.&lt;/p&gt;

&lt;p&gt;This animation is for those who like the bird "Bem-te-vi", if you have ideas for improvements, the code is open, I'll be happy to receive your PR.&lt;/p&gt;

&lt;p&gt;When accessing the site, I recommend opening the sound.&lt;/p&gt;

&lt;p&gt;Hope you like it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wGPUIow4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plakf88rcrvd0c0xfgfr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wGPUIow4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plakf88rcrvd0c0xfgfr.gif" alt="Gustavo Scarpim"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See the complete code here on GitHub &lt;a href="https://github.com/GuScarpim/bird-animation"&gt;&lt;b&gt;Click here&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out the Project in action &lt;a href="https://bem-te-vi.netlify.app/"&gt;&lt;b&gt;Deploy&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Multiline CSS-only typewriter effect</title>
      <author>Alvaro Montoro</author>
      <pubDate>Fri, 03 Sep 2021 02:51:36 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/multiline-css-only-typewriter-effect-18p4</link>
      <guid>https://dev.to/alvaromontoro/multiline-css-only-typewriter-effect-18p4</guid>
      <description>&lt;p&gt;Another entry for the typewriter effect CSS challenge. And with a different approach from the ones that have participated (I think, &lt;a class="mentioned-user" href="https://dev.to/afif"&gt;@afif&lt;/a&gt;
 keep me honest here, it could be "close" to &lt;a href="https://dev.to/afif/a-multi-line-css-only-typewriter-effect-3op3"&gt;the one you did earlier&lt;/a&gt;, but using different elements and properties.)&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/LYLZOrE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;The idea of this effect is having two different moving elements: the text container in itself and a pseudo-element used to hide the content.&lt;/p&gt;

&lt;p&gt;The container animation is simple: it grows a given height (the specified line height) until all the text has been displayed or the container reaches a limit of lines (500 by default). It happens in steps, so each line is revealed at a time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;grow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lineHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lineHeight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lines&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.typewriter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grow&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lines&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;animation-fill-mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The pseudo-element has the same width as the container and a height equal to the line height. It reduces to a width of 0 (revealing the text as it shrinks) and then "jumps to the next line."&lt;/p&gt;

&lt;p&gt;The animation of the pseudo-element is a little bit more complex... mainly because it is not an animation but three small animations together:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Change the width from 100% to 0%&lt;/li&gt;
&lt;li&gt;Move the element vertically&lt;/li&gt;
&lt;li&gt;Animate the caret (to blink)
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;carriageReturn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lineHeight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lines&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;caret&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bgColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.keyframes&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--timePerLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;carriageReturn&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lines&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lines&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;caret&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#customization"&gt;
  &lt;/a&gt;
  Customization
&lt;/h2&gt;

&lt;p&gt;One thing I like about this solution is that it is highly customizable. The &lt;code&gt;.typewriter&lt;/code&gt; class defines some default values for custom properties that the user can override. Here are the Properties:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--bgColor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Color&lt;/td&gt;
&lt;td&gt;White&lt;/td&gt;
&lt;td&gt;Defines the background color of the element and the animation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--lines&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;Maximum number of lines to animate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--lineHeight&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length&lt;/td&gt;
&lt;td&gt;1.5rem&lt;/td&gt;
&lt;td&gt;The line-height which will determine the size of the container height increase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--timePerLine&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Duration&lt;/td&gt;
&lt;td&gt;4s&lt;/td&gt;
&lt;td&gt;The time that it will take for a line to be revealed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--widthCh&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;The width of the element in ch units (useful when used with monospace)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--width&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;--widthCh&lt;/code&gt; * 1ch&lt;/td&gt;
&lt;td&gt;Optional. If you use &lt;code&gt;--widthCh&lt;/code&gt;, there's no need to define this variable. But it is convenient to provide relative values.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;There is one more custom property: &lt;code&gt;--time&lt;/code&gt;, but that one is auto-calculated based on the number of lines and the time per line, and the users should not modify it.&lt;/p&gt;

&lt;p&gt;On top of that, there are a series of classes that can be added to the container in HTML and that will provide some additional features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;monospace&lt;/code&gt;: makes the font as the default monospace family.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;no-caret&lt;/code&gt;: removes the caret (convenient to avoid the ugly end-of-line animation)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;big-caret&lt;/code&gt;: to display a wide caret instead of a thin one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pros-and-cons"&gt;
  &lt;/a&gt;
  Pros and cons
&lt;/h2&gt;

&lt;p&gt;Pros of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fully multiline: works with any number of lines (define the max in the custom property &lt;code&gt;--lines&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Responsive: users can define a width in characters or units, but the animation uses %, so it adapts to any size.&lt;/li&gt;
&lt;li&gt;Font-friendly: it works with monospace and non-monospace fonts (but in reality, it looks better in monospace).&lt;/li&gt;
&lt;li&gt;Highly customizable: Add a class to the typewriter element, or redefine the variables for different effects.&lt;/li&gt;
&lt;li&gt;(Slightly more) accessible (than my previous entries): All the text is in place at the beginning so that ATs can detect it. Plus, it uses common CSS properties that are supported in most browsers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not a polished finish: the caret goes until the end of each line, which looks weird (especially in the last line). The &lt;code&gt;no-caret&lt;/code&gt; class removes the caret.&lt;/li&gt;
&lt;li&gt;Content shift: if it's not absolutely positioned, the container will push the content below with each line that pops up.&lt;/li&gt;
&lt;li&gt;Required styles: the animation requires all lines to have the same height, so a &lt;code&gt;line-height&lt;/code&gt; value is needed. It's "vertically monospaced."&lt;/li&gt;
&lt;li&gt;Limited backgrounds: the background must be a solid color. Otherwise, the animation of the pseudo-element will be revealed.&lt;/li&gt;
&lt;li&gt;Responsive but not clean: the animations adapt to the element's width, but if the width is not specific, the letters may be cut off, and the animation won't be clean.&lt;/li&gt;
&lt;li&gt;Scrolling: if the user selects the text, they could scroll the container. This could be avoided with &lt;code&gt;user-select: none&lt;/code&gt;, but that could have some usability/accessibility issues of its own.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are probably more cons, but these are the ones that I could think of at the moment... But definitely, there will be more.&lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
, this time I tested on iOS, and it works there too! 😊&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>AWS Load Balancer Controller on EKS Cluster</title>
      <author>Sivamuthu Kumar</author>
      <pubDate>Fri, 03 Sep 2021 02:39:44 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-load-balancer-controller-on-eks-cluster-38fk</link>
      <guid>https://dev.to/aws-builders/aws-load-balancer-controller-on-eks-cluster-38fk</guid>
      <description>&lt;p&gt;Hello all, Let's see how to enable AWS Load Balancer Controller on EKS Cluster to integrate the AWS Application / Network Load Balancers. This is a guide to provision the use cases &amp;amp; solutions of the AWS Load Balancer integration with Kubernetes Cluster.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#kubernetes-networking"&gt;Kubernetes Networking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#application-load-balancer"&gt;Application Load Balancer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#aws-load-balancer-controller-on-eks-cluster-1"&gt;AWS Load Balancer Controller on EKS Cluster&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#creating-an-eks-cluster"&gt;Creating an EKS Cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-the-aws-load-balancer-controller"&gt;Install the AWS Load Balancer Controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy-the-ingress"&gt;Deploy the Ingress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#patterns"&gt;Patterns&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#application-load-balancer---traffic-routing"&gt;Application Load Balancer - Traffic Routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ingress-group---multiple-ingress-resources-together"&gt;Ingress Group - Multiple Ingress Resources Together&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#custom-domain--ssl-certificate"&gt;Custom Domain &amp;amp; SSL Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#https-redirect"&gt;HTTPS Redirect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#access-control"&gt;Access Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#custom-attributes--addons"&gt;Custom Attributes &amp;amp; Addons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#kubernetes-networking"&gt;
  &lt;/a&gt;
  Kubernetes Networking
&lt;/h2&gt;

&lt;p&gt;We will start with a high-level overview of Kubernetes Networking. Kubernetes has all the components you need to deploy an application - like load balancer, ingress/egress gateways, network security policy, traffic routing within the cluster, mutual TLS authentication, etc. Kubernetes has the ability to layer these components and combine them to make a network that supports various scenarios in the organizations.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#ingress-v1-networking-k8s-io"&gt;Ingress&lt;/a&gt; exposes HTTP and HTTPS routes from outside the cluster to &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;services&lt;/a&gt; within the cluster. Traffic routing is controlled by rules defined on the Ingress resource. An Ingress may be configured to give Services externally-reachable URLs, load balance traffic, terminate SSL / TLS and offer name-based virtual hosting. An &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers"&gt;Ingress controller&lt;/a&gt; is responsible for fulfilling the Ingress, usually with a load balancer, though it may also configure your edge router or additional frontends to help handle the traffic. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-load-balancer"&gt;
  &lt;/a&gt;
  Application Load Balancer
&lt;/h2&gt;

&lt;p&gt;An Application Load Balancer functions at the application layer, the seventh layer of the Open Systems Interconnection (OSI) model. After the load balancer receives a request, it evaluates the listener rules in priority order to determine which rule to apply, and then selects a target from the target group for the rule action. You can configure listener rules to route requests to different target groups based on the content of the application traffic. Routing is performed independently for each target group, even when a target is registered with multiple target groups.&lt;/p&gt;

&lt;p&gt;You can add and remove targets from your load balancer as your needs change, without disrupting the overall flow of requests to your application. Elastic Load Balancing scales your load balancer as traffic to your application changes over time. Elastic Load Balancing can scale to the vast majority of workloads automatically.&lt;/p&gt;

&lt;p&gt;ALB supports multiple features including host or path-based routing, TLS (Transport Layer Security) termination, WebSockets, HTTP/2, AWS WAF (Web Application Firewall) integration, integrated access logs, and health checks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-load-balancer-controller-on-eks-cluster"&gt;
  &lt;/a&gt;
  AWS Load Balancer Controller on EKS Cluster
&lt;/h2&gt;

&lt;p&gt;The AWS Load Balancer Controllers manages AWS Elastic Load Balancers for a Kubernetes Cluster. When you install the AWS Load Balancer Controller, the controller dynamically provisions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An AWS Application Load Balancer (ALB) when you create a Kubernetes Ingress&lt;/li&gt;
&lt;li&gt;An AWS Network Load Balancer (NLB) when you create a Kubernetes Service of type Load Balancer.

&lt;ul&gt;
&lt;li&gt;You can configure either of the target types - instance targets and IP targets.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lgDKhwPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630635442585/1MNC0w-Fy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lgDKhwPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630635442585/1MNC0w-Fy.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pic: &lt;a href="https://aws.amazon.com/blogs/opensource/kubernetes-ingress-aws-alb-ingress-controller/"&gt;https://aws.amazon.com/blogs/opensource/kubernetes-ingress-aws-alb-ingress-controller/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When the Ingress resource is created in kubernetes API, the alb-ingress-controller observes the changes made.&lt;/li&gt;
&lt;li&gt;The alb-ingress-controller creates the AWS Application Load Balancer based on the annotations added in the ingress resource.&lt;/li&gt;
&lt;li&gt;The target groups are created for each backend specified in the ingress resource.&lt;/li&gt;
&lt;li&gt;The Application Load Balancer URL is accessed with the path or query params.&lt;/li&gt;
&lt;li&gt;Based on the Rules configured in the Ingress resource, the request is redirected to a specific target group and reaching Pod service using ClusterIP or NodePort&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#creating-an-eks-cluster"&gt;
  &lt;/a&gt;
  Creating an EKS Cluster
&lt;/h3&gt;

&lt;p&gt;Let's get started with an EKS cluster. You can deploy the EKS Cluster using AWS Console or the eksctl tool. In this blog post, we are going to create an EKS Cluster using the eksctl tool.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜ eksctl create cluster &lt;span class="nt"&gt;-f&lt;/span&gt; cluster.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The cluster yaml configuration is as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;eksctl.io/v1alpha5&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterConfig&lt;/span&gt;

&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app-lb-demo&lt;/span&gt;
  &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;us-east-1&lt;/span&gt;

&lt;span class="na"&gt;iam&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;withOIDC&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;   
  &lt;span class="na"&gt;serviceAccounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws-load-balancer&lt;/span&gt;
        &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kube-system&lt;/span&gt;
      &lt;span class="na"&gt;wellKnownPolicies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;awsLoadBalancerController&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;  

&lt;span class="na"&gt;managedNodeGroups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app-lb-demo-ng&lt;/span&gt;
    &lt;span class="na"&gt;instanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;t3.medium&lt;/span&gt;
    &lt;span class="na"&gt;minSize&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="na"&gt;maxSize&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-the-aws-load-balancer-controller"&gt;
  &lt;/a&gt;
  Install the AWS Load Balancer Controller
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add the EKS chart repo to helm&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;helm repo add eks https://aws.github.io/eks-charts
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the AWS Load Balancer Controller CRDs - Ingress Class Params and Target Group Bindings&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-k&lt;/span&gt; &lt;span class="s2"&gt;"github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the helm chart by passing the serviceAccount.create=false adn serviceAccount.name=aws-load-balancer-controller&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;helm &lt;span class="nb"&gt;install &lt;/span&gt;aws-load-balancer-controller eks/aws-load-balancer-controller &lt;span class="nt"&gt;-n&lt;/span&gt; kube-system &lt;span class="nt"&gt;--set&lt;/span&gt; &lt;span class="nv"&gt;clusterName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;cluster-name&amp;gt; &lt;span class="nt"&gt;--set&lt;/span&gt; serviceAccount.create&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="nt"&gt;--set&lt;/span&gt; serviceAccount.name&lt;span class="o"&gt;=&lt;/span&gt;aws-load-balancer
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#deploy-the-ingress"&gt;
  &lt;/a&gt;
  Deploy the Ingress
&lt;/h3&gt;

&lt;p&gt;The AWS Application Load Balancer (ALB) will not be created until you create an ingress object. Now we will deploy the sample deployment file and expose using the Ingress object.&lt;/p&gt;

&lt;p&gt;Note: This blog uses Kubernetes 1.21+ latest and the ingress objects are updated. If you are looking at the ALB controller documentation, you may see few differences over ingress objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.0.0/docs/examples/echoservice/echoserver-namespace.yaml &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.0.0/docs/examples/echoservice/echoserver-service.yaml &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.0.0/docs/examples/echoservice/echoserver-deployment.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;namespace/echoserver created
service/echoserver created
deployment.apps/echoserver created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#patterns"&gt;
  &lt;/a&gt;
  Patterns
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#application-load-balancer-traffic-routing"&gt;
  &lt;/a&gt;
  Application Load Balancer - Traffic Routing
&lt;/h3&gt;

&lt;p&gt;In this ingress object, we are setting an internet-facing Application Load Balancer with added resource tags. In the rules, if the path has prefix echo, the backend service is echoserver and the port number is 80.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: echoserver
  namespace: echoserver
  annotations:
    &lt;span class="k"&gt;**&lt;/span&gt;kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/tags: &lt;span class="nv"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dev,Team&lt;span class="o"&gt;=&lt;/span&gt;app&lt;span class="k"&gt;**&lt;/span&gt;
spec:
  rules:
    - host: &lt;span class="s2"&gt;"*.amazonaws.com"&lt;/span&gt;
      http:
        paths:
          - path: /echo
            pathType: Prefix
            backend:
              service:
                name: echoserver
                port:
                  number: 80
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Verify the ingress is created and ALB is provisioned. Once the ALB is provisioned, you will get the ALB address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜  flux-demo  k get ingress &lt;span class="nt"&gt;-A&lt;/span&gt;
NAMESPACE    NAME         CLASS    HOSTS             ADDRESS                                                                   PORTS   AGE
echoserver   echoserver   &amp;lt;none&amp;gt;   &lt;span class="k"&gt;*&lt;/span&gt;.amazonaws.com   k8s-echoserv-echoserv-xxxxxxxxxxxxxxxxxxxxx.us-east-1.elb.amazonaws.com   80      10s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make the request to the URL and the path to verify whether you get the expected response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜  flux-demo  curl http://k8s-echoserv-echoserv-xxxxxxxxxxxxxxxxxxxxx.us-east-1.elb.amazonaws.com/echo &lt;span class="nt"&gt;-i&lt;/span&gt;

HTTP/1.1 200 OK
Date: Thu, 02 Sep 2021 02:41:57 GMT
Content-Type: text/plain
Transfer-Encoding: chunked
Connection: keep-alive
Server: nginx/1.10.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ingress-group-multiple-ingress-resources-together"&gt;
  &lt;/a&gt;
  Ingress Group - Multiple Ingress Resources Together
&lt;/h3&gt;

&lt;p&gt;IngressGroup feature enables you to group multiple Ingress resources together. The controller will automatically merge Ingress rules for all Ingresses within IngressGroup and support them with a single ALB. In addition, most annotations defined on a Ingress only apply to the paths defined by that Ingress.&lt;/p&gt;

&lt;p&gt;First, let's create another ingress resource and see whether it creates a separate application load balancer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Ingress&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver-1&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver&lt;/span&gt;
  &lt;span class="na"&gt;annotations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;kubernetes.io/ingress.class&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alb&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/scheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;internet-facing&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Environment=dev,Team=app&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*.amazonaws.com"&lt;/span&gt;
      &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;*-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/echo-test**&lt;/span&gt;
            &lt;span class="s"&gt;pathType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Prefix&lt;/span&gt;
            &lt;span class="s"&gt;backend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver&lt;/span&gt;
                &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Verify the ingress is created and you can see another ALB get provisioned. So now we got two ALBs with different addresses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜  flux-demo  k get ingress &lt;span class="nt"&gt;-A&lt;/span&gt;
NAMESPACE    NAME           CLASS    HOSTS             ADDRESS                                                                   PORTS   AGE
echoserver   echoserver     &amp;lt;none&amp;gt;   &lt;span class="k"&gt;*&lt;/span&gt;.amazonaws.com   k8s-echoserv-echoserv-64b6592087-xxxxxxxxx.us-east-1.elb.amazonaws.com   80      28m
echoserver   echoserver-1   &amp;lt;none&amp;gt;   &lt;span class="k"&gt;*&lt;/span&gt;.amazonaws.com   k8s-echoserv-echoserv-6c350fcfc9-xxxxxxxxx.us-east-1.elb.amazonaws.com    80      2m39s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add the &lt;code&gt;[alb.ingress.kubernetes.io/group.name](http://alb.ingress.kubernetes.io/group.name)&lt;/code&gt; for both ingress objects with the same value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;annotations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;kubernetes.io/ingress.class&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alb&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/scheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;internet-facing&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Environment=dev,Team=app&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/group.name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alb-demo-group&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you re-apply the ingress, (delete and recreate - for a quick check), you can see both ingresses has the same ALB address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜  flux-demo  k get ingress &lt;span class="nt"&gt;-A&lt;/span&gt;
NAMESPACE    NAME           CLASS    HOSTS             ADDRESS                                                             PORTS   AGE
echoserver   echoserver     &amp;lt;none&amp;gt;   &lt;span class="k"&gt;*&lt;/span&gt;.amazonaws.com   k8s-albdemogroup-5364dc26a8-xxxxxxxxx.us-east-1.elb.amazonaws.com   80      5s
echoserver   echoserver-1   &amp;lt;none&amp;gt;   &lt;span class="k"&gt;*&lt;/span&gt;.amazonaws.com   k8s-albdemogroup-5364dc26a8-xxxxxxxxx.us-east-1.elb.amazonaws.com   80      5s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The rules will be merged and you can apply the order of the rules in the group to configure in the Application Load Balancer Controller.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-domain-amp-ssl-certificate"&gt;
  &lt;/a&gt;
  Custom Domain &amp;amp; SSL Certificate
&lt;/h3&gt;

&lt;p&gt;Now, let's bind the custom domain to the ALB and SSL Certificates. There are two ways you can bind the SSL certificate&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Setting up the certificate from the annotation - &lt;a href="http://alb.ingress.kubernetes.io/certificate-arn"&gt;alb.ingress.kubernetes.io/certificate-arn&lt;/a&gt; specifies the ARN of one or more certificates managed by AWS Certificate Manager&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;alb.ingress.kubernetes.io/certificate-arn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;arn:aws:acm:us-west-2:xxxxx:certificate/xxxxxxx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can set up the auto-discovery of the SSL certificate using the domain name.&lt;/p&gt;

&lt;p&gt;TLS certificates for ALB Listeners can be automatically discovered with hostnames from Ingress resources if the &lt;code&gt;[alb.ingress.kubernetes.io/certificate-arn](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/guide/ingress/annotations/#certificate-arn)&lt;/code&gt; annotation is not specified.&lt;/p&gt;

&lt;p&gt;The controller will attempt to discover TLS certificates from the &lt;code&gt;tls&lt;/code&gt; field in Ingress and &lt;code&gt;host&lt;/code&gt; field in Ingress rules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this example, we will set up the auto-discovery of the SSL certificate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Ingress&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver&lt;/span&gt;
  &lt;span class="na"&gt;annotations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;*kubernetes&lt;/span&gt;&lt;span class="s"&gt;.io/ingress.class&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alb&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/scheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;internet-facing&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Environment=dev,Team=app**&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;dev.sivamuthukumar.com"&lt;/span&gt;
      &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/echo&lt;/span&gt;
            &lt;span class="na"&gt;pathType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Prefix&lt;/span&gt;
            &lt;span class="na"&gt;backend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver&lt;/span&gt;
                &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Execute the curl command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;➜  flux-demo  curl https://dev.spectaflare.com/echo -i&lt;/span&gt;
&lt;span class="s"&gt;HTTP/1.1 200 OK&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#https-redirect"&gt;
  &lt;/a&gt;
  HTTPS Redirect
&lt;/h3&gt;

&lt;p&gt;The URL with HTTP protocol should redirect to HTTPS protocol. We'll use the &lt;a href="http://alb.ingress.kubernetes.io/actions.%24%7Baction-name%7D"&gt;alb.ingress.kubernetes.io/actions.${action-name}&lt;/a&gt; annotation to setup an ingress to redirect http traffic into https&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Ingress&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver&lt;/span&gt;
  &lt;span class="na"&gt;annotations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;kubernetes.io/ingress.class&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alb&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/scheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;internet-facing&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Environment=dev,Team=app&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/listen-ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;[{"HTTP":&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;80},&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;{"HTTPS":&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;443}]'&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/ssl-redirect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;443'&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;dev.sivamuthukumar.com"&lt;/span&gt;
      &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/echo&lt;/span&gt;
            &lt;span class="na"&gt;pathType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Prefix&lt;/span&gt;
            &lt;span class="na"&gt;backend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver&lt;/span&gt;
                &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#access-control"&gt;
  &lt;/a&gt;
  Access Control
&lt;/h3&gt;

&lt;p&gt;Access control of the Load Balancer can be controlled with the following annotations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;alb.ingress.kubernetes.io/scheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;internal&lt;/span&gt; &lt;span class="c1"&gt;# To enable the internal load balancers&lt;/span&gt;
&lt;span class="s"&gt;alb.ingress.kubernetes.io/inbound-cidrs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;10.0.0.0/24&lt;/span&gt; &lt;span class="c1"&gt;# Inbound CIDRs from your network or VPC&lt;/span&gt;
&lt;span class="s"&gt;alb.ingress.kubernetes.io/security-groups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sg-xxxx, sg-yyyy&lt;/span&gt; &lt;span class="c1"&gt;# Security groups you want to attach the load balancer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#custom-attributes-amp-addons"&gt;
  &lt;/a&gt;
  Custom Attributes &amp;amp; Addons
&lt;/h3&gt;

&lt;p&gt;Custom attributes to Load Balancers can be controlled with the annotations - &lt;a href="http://alb.ingress.kubernetes.io/load-balancer-attributes:"&gt;&lt;code&gt;alb.ingress.kubernetes.io/load-balancer-attributes&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For e.g To enable HTTP2 in the Application Load Balancer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;alb.ingress.kubernetes.io/load-balancer-attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;routing.http2.enabled=true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the other attributes you can add it in annotations &lt;a href="https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/guide/ingress/annotations/#custom-attributes"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can attach WAF or enable AWS Shield to the load balancer by adding the below annotations in the Ingress object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;alb.ingress.kubernetes.io/wafv2-acl-arn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;WAFv2 ACL ARN HERE&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;alb.ingress.kubernetes.io/shield-advanced-protection&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;true'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The AWS Load Balancer Controller provides a Kubernetes native way to configure and manage Elastic Load Balancers that route traffic to applications running in Kubernetes clusters. I hope, I've explained to you the concept of routing, ingress groups, configure SSL, HTTP to HTTPs redirection, and other advanced concepts. You can check more on the documentation &lt;a href="https://github.com/kubernetes-sigs/aws-load-balancer-controller"&gt;here&lt;/a&gt;. I highly encourage you to give it a try and share your feedback and questions with me&lt;/p&gt;

&lt;p&gt;I'm Siva - working as Sr. Software Architect at &lt;a href="https://www.ceiamerica.com"&gt;Computer Enterprises Inc&lt;/a&gt; from Orlando. I'm an AWS Community builder, Auth0 Ambassador and I am going to write a lot about Cloud, Containers, IoT, and Devops. If you are interested in any of that, make sure to follow me if you haven’t already. Please follow me &lt;a href="https://www.twitter.com/ksivamuthu"&gt;@ksivamuthu&lt;/a&gt; Twitter or check out my blogs at &lt;a href="https://blog.sivamuthukumar.com"&gt;https://blog.sivamuthukumar.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>containers</category>
      <category>kubernetes</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Vocabulary Building Day6</title>
      <author>vindhya Hegde </author>
      <pubDate>Fri, 03 Sep 2021 02:02:27 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-day6-1i47</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-day6-1i47</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;commensurate&lt;/strong&gt;(adjective) :to be in proportion or corresponding in degree or amount.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E_PlONID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://smartvocab.in/vocab-api/common-images/nnpyyxacwqwl1544.jpg%3Fv%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E_PlONID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://smartvocab.in/vocab-api/common-images/nnpyyxacwqwl1544.jpg%3Fv%3D1" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=commensurate&amp;amp;oq=commensurate&amp;amp;aqs=chrome..69i57j0i512l3j0i433i512j0i20i263i512j0i512l4.7221j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;venerate&lt;/strong&gt;(verb) :regard with great respect; revere.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YOjH8FID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.writerscentre.com.au/wp-content/uploads/2020/05/WOTW_14Oct_D.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YOjH8FID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.writerscentre.com.au/wp-content/uploads/2020/05/WOTW_14Oct_D.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=venerate&amp;amp;oq=venerate&amp;amp;aqs=chrome..69i57j0i433i512j46i175i199i512j0i433i512j0i512l6.3841j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;equivocal&lt;/strong&gt;(adjective): open to more than one interpretation; ambiguous.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sLpPjfL---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.smartvocab.in/common-images/3w0128hgo0n6ncl5.jpg%3Fv%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sLpPjfL---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.smartvocab.in/common-images/3w0128hgo0n6ncl5.jpg%3Fv%3D1" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=equivocal&amp;amp;oq=equivocal+&amp;amp;aqs=chrome..69i57j0i433i512j0i512l8.5416j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;frugal&lt;/strong&gt;(adjective): Not spending much money(but spending wisely)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aln7qkNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mymoneysage.in/blog/wp-content/uploads/2017/03/Frugality.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aln7qkNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mymoneysage.in/blog/wp-content/uploads/2017/03/Frugality.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=frugal&amp;amp;oq=frugal&amp;amp;aqs=chrome.0.69i59j0i433i512l3j0i512l5j0i433i512.2934j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;prodigal&lt;/strong&gt;(adjective): spending money or using resources freely and recklessly; wastefully extravagant.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jhIXVUPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://biblestorycartoons.com/wp-content/uploads/2018/07/5-party.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jhIXVUPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://biblestorycartoons.com/wp-content/uploads/2018/07/5-party.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=prodigal&amp;amp;oq=prodigal&amp;amp;aqs=chrome.0.69i59j46i275i433i512j0i433i512l3j0i512l2j0i433i512j0i512j46i512.4961j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps you if you are preparing for GRE exams.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>gre</category>
      <category>day6</category>
    </item>
    <item>
      <title>All About Apps</title>
      <author>Devika</author>
      <pubDate>Fri, 03 Sep 2021 01:50:33 +0000</pubDate>
      <link>https://dev.to/devikaworld/all-about-apps-4el8</link>
      <guid>https://dev.to/devikaworld/all-about-apps-4el8</guid>
      <description>&lt;p&gt;Apps are an ingenious tool that can do wonders for your business when they’re purposefully and thoughtfully made. Well-built apps allow you to connect and communicate with your customers in a way that benefits you both. By transforming the customer experience with functionality and aesthetics, you can create an engaging and enjoyable experience that keeps your customers coming back again and again.&lt;/p&gt;

&lt;p&gt;A not-so-good app will leave you short a few thousand dollars, with a persistent headache and the same problem you started with.&lt;/p&gt;

&lt;p&gt;To help you create an asset for your business that benefits you long term, our team is taking you through the fast-fading trends in app development, the next big things to keep an eye out for and the process to follow to get started.&lt;/p&gt;

&lt;p&gt;You’ll be hearing from our Senior Developers Matt Rowles, Byron Papanikolaou, Thomas Nixon, and &lt;a href="https://devika.com/"&gt;Devika’s&lt;/a&gt; Founder Ken Kencevski as they share their personal and professional experiences in application development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EunE4zA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro91dkvvjj8u8tmyy2ny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EunE4zA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro91dkvvjj8u8tmyy2ny.png" alt="Devika's Senior Developer, Matthew Rowles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#senior-developer-matthew-rowles-at-devika"&gt;
  &lt;/a&gt;
  Senior Developer, Matthew Rowles at Devika
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-things-are-important-to-consider-before-building-an-app"&gt;
  &lt;/a&gt;
  What things are important to consider before building an app?
&lt;/h3&gt;

&lt;p&gt;“First and foremost, you’re building a product, so the app/s should revolve around the products’ target customers, which from day one will be a niche persona within an industry. Every product is an experiment until proven otherwise, so you want to start small and grow with the early adopting customers while looking to expand the channels to additional personas.&lt;/p&gt;

&lt;p&gt;“Before you commence building, you want to mitigate risk by trimming any excess bloat by  narrowing the minimal viable product down to what we call 'the lean path the market'; what is the smallest thing we can build to prove the hypothesis and begin testing with customers? Sometimes this isn't even an MVP, but a prototype on a whiteboard with some user testing!”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-technology-is-constantly-evolving-how-do-i-know-what-to-build-an-app-on"&gt;
  &lt;/a&gt;
  When technology is constantly evolving, how do I know what to build an app on?
&lt;/h3&gt;

&lt;p&gt;“Look for established ecosystems from day one; the web, mobile app stores, platforms with marketplaces e.g., Salesforce and so on. In terms of technology, try to sit at the cusp of the bleeding edge; tried and tested technology that has been in production in most regions around the world for more than 36 months, yet still fresh enough to maintain the status quo.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-a-fastfading-trend-of-apps-at-the-moment"&gt;
  &lt;/a&gt;
  What’s a fast-fading trend of apps at the moment?
&lt;/h3&gt;

&lt;p&gt;“Hyper-wedge/niche; setting out with a grandiose plan of building platforms is almost impossible, so what we've seen people do is build a feature as a plugin for or on top of another app and grow their own small set of loyal customers. Generally, what will happen is one of three things; 1. the feature will be implemented (fail), 2. the feature team will be acquired (success), or 3. the feature will grow into its own product, which means a wedge will be driven in enough to become a competitor to the system it once was a parasite to!”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-next-big-thing-for-mobile-apps-thatll-be-gamechangers-for-business-owners"&gt;
  &lt;/a&gt;
  What is the next big thing for mobile apps that’ll be game-changers for business owners?
&lt;/h3&gt;

&lt;p&gt;“The introduction of mobile platform APIs in browsers is really interesting. Being able to access biometrics and AR/VR capabilities via the browser will change how people build apps. Also, new laws are coming which will enforce OS owners such as Apple with iOS and Google with Android to open up their platform to other marketplaces (Google already does this to some extent). It will be interesting to see what this will open up.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-first-application-you-ever-built"&gt;
  &lt;/a&gt;
  What’s the first application you ever built?
&lt;/h3&gt;

&lt;p&gt;“When I was in high school, I built a retro point-and-click adventure game that took five minutes to complete. More professionally, we launched an online car buying service with some colleagues in 2015, which was the first of its kind and really exciting.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pC0AzDdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkoszsncmkj8xi8kj3kr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pC0AzDdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkoszsncmkj8xi8kj3kr.png" alt="Devika's Senior Developer Byron Papanikolaou"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#senior-developer-byron-papanikolaou-at-devika"&gt;
  &lt;/a&gt;
  Senior Developer, Byron Papanikolaou at Devika
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-things-are-important-to-consider-before-building-an-app"&gt;
  &lt;/a&gt;
  What things are important to consider before building an app?
&lt;/h3&gt;

&lt;p&gt;“It’s important to know how much is involved before the code even hits the compiler. An idea is the first spark, but then it needs to be validated. This can happen in many ways, such as market research, focus groups with potential customers, or even using a prototyping tool to illustrate the idea. The process of turning an idea into a viable product is usually when the fun stops for most people. It requires time, effort, discipline, and unfortunately for most, there is no substitute for this.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-technology-is-constantly-evolving-how-do-i-know-what-to-build-an-app-on"&gt;
  &lt;/a&gt;
  When technology is constantly evolving, how do I know what to build an app on?
&lt;/h3&gt;

&lt;p&gt;“At the end of the day, technology is just a tool and should be treated as such. The technology itself will rarely play a deciding factor in the success of a product. That onus is on the vision and the implementation. If you’re building an application by yourself, use your native language. If you’re building it with a team, play to their strengths. Chances are, if the product is successful, you will have to re-write it in 24-36 months anyway as technology is changing this quickly! ”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-a-fastfading-trend-of-apps-at-the-moment"&gt;
  &lt;/a&gt;
  What’s a fast-fading trend of apps at the moment?
&lt;/h3&gt;

&lt;p&gt;“2D user interfaces. Once mixed reality applications make their way into our everyday lives, depth and layered user interfaces will be the new norm. As always, we will have to wait until Apple does it before the mass market accepts it, even if Android does it first.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-next-big-thing-for-mobile-apps-thatll-be-gamechangers-for-business-owners"&gt;
  &lt;/a&gt;
  What is the next big thing for mobile apps that’ll be game-changers for business owners?
&lt;/h3&gt;

&lt;p&gt;“The democratization of payments. Whether it be fiat or cryptocurrency, the landscape for how end-users and businesses make transactions has changed drastically over the last five years. As businesses adopt alternative payment providers to banks, it will relieve them of all the legacy rules guarded by the big financial institutions.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-first-application-you-ever-built"&gt;
  &lt;/a&gt;
  What’s the first application you ever built?
&lt;/h3&gt;

&lt;p&gt;“It was an interactive Flash-based website of my family’s house in high school for my major project. I went around taking photos inside and stitched them together using frame-by-frame animation. I even added door opening and closing animations. Fortunately, Adobe Flash has reached its end-of-life date, and no one can run this thing.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5BYByNNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vqn5fd0yj7d0pq9d98b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5BYByNNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vqn5fd0yj7d0pq9d98b.png" alt="Devika's Senior Developer, Thomas Nixon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#senior-developer-thomas-nixon-at-devika"&gt;
  &lt;/a&gt;
  Senior Developer, Thomas Nixon at Devika
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-things-are-important-to-consider-before-building-an-app"&gt;
  &lt;/a&gt;
  What things are important to consider before building an app?
&lt;/h3&gt;

&lt;p&gt;“The team and skill set you already have - It’s best to work with what you know. Software development is mostly about people and working with other people's strengths. If you need a particular skill, like app design, there are many resources out there and many companies and services with specialized skills who can help.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-technology-is-constantly-evolving-how-do-i-know-what-to-build-an-app-on"&gt;
  &lt;/a&gt;
  When technology is constantly evolving, how do I know what to build an app on?
&lt;/h3&gt;

&lt;p&gt;“Due diligence doing research and seeing what exists in the market already and what competitors have done. Getting advice and input for an idea is critical to its success as you may learn more.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-a-fastfading-trend-of-apps-at-the-moment"&gt;
  &lt;/a&gt;
  What’s a fast-fading trend of apps at the moment?
&lt;/h3&gt;

&lt;p&gt;“Serverless architecture has allowed developers to build highly scalable applications that can reach a global audience easier.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-next-big-thing-for-mobile-apps-thatll-be-gamechangers-for-business-owners"&gt;
  &lt;/a&gt;
  What is the next big thing for mobile apps that’ll be game-changers for business owners?
&lt;/h3&gt;

&lt;p&gt;“Flutter and react-native have made cross-device apps that are easier to build and maintain. It also means less work for you as they do not need development for Android and ios. Low code has also opened the doors to a lot more people who want to build simple apps.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-first-application-you-ever-built"&gt;
  &lt;/a&gt;
  What’s the first application you ever built?
&lt;/h3&gt;

&lt;p&gt;“When I was 12, I taught myself how to program by making games and started me on a journey to learn and create more.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VhzfKixC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybjfzvf1zzdty04jk81d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VhzfKixC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybjfzvf1zzdty04jk81d.png" alt="Devika's Founder Ken Kencevski"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#founder-of-devika-ken-kencevski"&gt;
  &lt;/a&gt;
  Founder of Devika, Ken Kencevski
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#what-things-are-important-to-consider-before-building-an-app-and-what-should-i-build-on"&gt;
  &lt;/a&gt;
  What things are important to consider before building an app? And what should I build on?
&lt;/h2&gt;

&lt;p&gt;“Don't build an app. Create a solution to a problem and then use technology to solve and scale it. Our mission has always been to enable people first and then apply the technology needed to scale the idea and the organization's impact. It's equally important to solve a problem you are passionate about because building a business from it is hard enough as it is. If you believe in the cause enough, it’s a lot easier to get through the tough times.”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-a-fastfading-trend-of-apps-at-the-moment"&gt;
  &lt;/a&gt;
  What’s a fast-fading trend of apps at the moment?
&lt;/h2&gt;

&lt;p&gt;“Apps that don't solve a problem well enough; not sure if there is a technology, feature or function in particular.”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-next-big-thing-for-mobile-apps-thatll-be-game-changers-for-business-owners"&gt;
  &lt;/a&gt;
  What is the next big thing for mobile apps that’ll be game changers for business owners?
&lt;/h2&gt;

&lt;p&gt;“Voice and augmented reality have huge potential to change the way businesses interact and provide services for their customers. From medicine to architecture and retail, there’s a huge range of possibilities.”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-first-application-you-ever-built"&gt;
  &lt;/a&gt;
  What’s the first application you ever built?
&lt;/h2&gt;

&lt;p&gt;“I built a basic eCommerce website when I was 15 to sell car audio gear from my bedroom 😊”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ready-to-start-building"&gt;
  &lt;/a&gt;
  Ready to start building?
&lt;/h2&gt;

&lt;p&gt;From website apps to mobile apps to hybrid apps and everything in between, our team has experience in not only building these technological products but creating solutions that help your business better connect with customers long term. If you need a hand getting started with this process or want to chat more email us &lt;a href="//info@devika.com"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>mobile</category>
      <category>apps</category>
    </item>
    <item>
      <title>September 2nd, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 03 Sep 2021 01:39:45 +0000</pubDate>
      <link>https://dev.to/nickytonline/september-2nd-2021-what-did-you-learn-this-week-5en8</link>
      <guid>https://dev.to/nickytonline/september-2nd-2021-what-did-you-learn-this-week-5en8</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1xpm1nTQiRL96Di3Q6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1xpm1nTQiRL96Di3Q6/giphy.gif" alt="A picture it a dog waving their paw with the caption “Learning, cool at school or at home”"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
  </channel>
</rss>
