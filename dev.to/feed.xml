<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Sharpen your Ruby: Mastering Methods</title>
      <author>Eric Chapman</author>
      <pubDate>Tue, 27 Apr 2021 21:39:25 +0000</pubDate>
      <link>https://dev.to/ericchapman/sharpen-your-ruby-mastering-methods-4l42</link>
      <guid>https://dev.to/ericchapman/sharpen-your-ruby-mastering-methods-4l42</guid>
      <description>&lt;p&gt;I develop in Javascript, Python, PHP and Ruby. By far Ruby is my favorite programming language. &lt;/p&gt;

&lt;p&gt;Together let start a journey and revisit our Ruby foundations. &lt;/p&gt;

&lt;p&gt;Each post will include some theory but also exercise and solution.&lt;/p&gt;

&lt;p&gt;If you have any questions/comments or your are new and need help, you can comment below or send me a message.&lt;/p&gt;

&lt;h2&gt;Whats is a Method?&lt;/h2&gt;

&lt;p&gt;Methods are a powerful feature for building Ruby programs, they allow you to encapsulate behavior and call the method later on to build a full programs.&lt;/p&gt;

&lt;h3&gt;Method syntax&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Method name must start with a letter. It may contain letters, numbers, an _ (underscore or low line). &lt;/li&gt;
&lt;li&gt;The convention is to use underscores to separate words in a multiword method name&lt;/li&gt;
&lt;li&gt;Method is declare with the 'def' keyword followed by the method name and parameters and finish with a 'end' keyword&lt;/li&gt;
&lt;li&gt;Method parameters are specified after method name and are enclose in parentheses.&lt;/li&gt;
&lt;li&gt;To invoke (call) the method you just use is name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Calling the method&lt;/span&gt;
&lt;span class="n"&gt;display_message&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;

&lt;span class="c1"&gt;# or with optional parentheses&lt;/span&gt;
&lt;span class="n"&gt;display_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Methods Return value&lt;/h3&gt;

&lt;p&gt;Ruby specifically has a unique way with working with returned values. &lt;/p&gt;

&lt;p&gt;Ruby automatically return the last line of the method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;addition&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="c1"&gt;# 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is the exact same thing as this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;addition&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="c1"&gt;# 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the last line is always return, the return keyword is optional.&lt;/p&gt;

&lt;p&gt;Attention. This can be confusing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;addition&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="c1"&gt;# 15&lt;/span&gt;
&lt;span class="c1"&gt;# empty&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the last line is always return Ruby return the results of the puts method and thats nothing. &lt;/p&gt;

&lt;p&gt;So there is a clear difference between returning a + b vs returning puts a + b&lt;/p&gt;

&lt;p&gt;By convention the keyword 'return' is never use if we want to return the last line (since that's the Ruby default).&lt;/p&gt;

&lt;p&gt;But the keyword 'return' need to be use if we want to return something before the last line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Number too high'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="s1"&gt;'Number are correct'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# call the method to test the result&lt;/span&gt;
&lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="c1"&gt;# Number too high&lt;/span&gt;
&lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;# Number are correct&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method will return 'Number too high' if variable 'a' is greater than 100. After the return the method will end. So the last line will never be executed.&lt;/p&gt;

&lt;p&gt;If variable 'a' is less or equal than 100. The method will return 'Number are correct'. And agin, since it is the last line of the method the 'return' keyword is optional.&lt;/p&gt;

&lt;h3&gt;Method name that end with a ?&lt;/h3&gt;

&lt;p&gt;In Ruby some method name end with a ?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;even?&lt;/span&gt; &lt;span class="c1"&gt;# true&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;odd?&lt;/span&gt; &lt;span class="c1"&gt;# false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By convention methods that end with a '?' always return a boolean value (true or false).&lt;/p&gt;

&lt;p&gt;You can create you own boolean method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_valid?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# call the method&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;is_valid?&lt;/span&gt; &lt;span class="s1"&gt;'secret'&lt;/span&gt;
&lt;span class="c1"&gt;# true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Method name that end with a !&lt;/h3&gt;

&lt;p&gt;In Ruby some method name end with a ! Those methods are call bang methods. Bang method  modify an object in-place. This can be dangerous because it change the object value and that may be not your intent.&lt;/p&gt;

&lt;p&gt;For example Ruby have two reverse method one regular and one bang!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reserve&lt;/span&gt;
&lt;span class="c1"&gt;# and&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reverse!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The bang! method will change the value of the object in-place&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reverse!&lt;/span&gt; &lt;span class="c1"&gt;# ekiM&lt;/span&gt;

&lt;span class="c1"&gt;# that method bang! will have also update the name variable&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;span class="c1"&gt;# ekiM&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Methods arguments default value&lt;/h3&gt;

&lt;p&gt;It is possible to set default value for method parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;addition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;addition&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="c1"&gt;# 110&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since b is not specified Ruby use it default value of 10&lt;/p&gt;

&lt;h3&gt;Methods Named Arguments&lt;/h3&gt;

&lt;p&gt;Since a image is worth a thousand words let look at this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shipping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;taxes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;shipping_fee&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;taxes&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;calculation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 270&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, with multiple arguments it can become difficult to read understand which arguments is what.&lt;/p&gt;

&lt;p&gt;Named arguments is made for that kind of situation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shipping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;taxes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;shipping_fee&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;taxes&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;calculation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shipping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;taxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 270&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the method usage is clearer. &lt;/p&gt;

&lt;p&gt;Another good thing about named arguments is that you can change the order of the arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;calculation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;taxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shipping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 270&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Exercise&lt;/h1&gt;

&lt;p&gt;Create a little program that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a method name subtraction with 3 arguments&lt;/li&gt;
&lt;li&gt;That method with return the result of subtraction of the 3 numbers pass as arguments.&lt;/li&gt;
&lt;li&gt;If the last argument is not specified it will be treated as default value of 0&lt;/li&gt;
&lt;li&gt;Call that method and print its result&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subtraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;subtraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That's it for today. The journey just started, stay tune for the next post very soon. (later today or tomorrow)&lt;/p&gt;

&lt;p&gt;If you have any comments or questions please do so here or send me a message on twitter. &lt;/p&gt;

&lt;p&gt;I am new on twitter so if you want to make me happy&lt;br&gt;
Follow me: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>beginners</category>
    </item>
    <item>
      <title>We Created An Open-source Emoji Library (Without Going to the Emoji Authorities)</title>
      <author>lotusleaf</author>
      <pubDate>Tue, 27 Apr 2021 20:33:57 +0000</pubDate>
      <link>https://dev.to/lotusleafstyle/we-created-an-open-source-emoji-library-without-going-to-the-emoji-authorities-1k2n</link>
      <guid>https://dev.to/lotusleafstyle/we-created-an-open-source-emoji-library-without-going-to-the-emoji-authorities-1k2n</guid>
      <description>&lt;p&gt;Did you know that you're supposed to get approval from the emoji authorities if you want to create an emoji? &lt;/p&gt;

&lt;p&gt;Yes, that's right. &lt;/p&gt;

&lt;p&gt;There's an official organization, called Unicode that holds the golden keys to emoji offerings. You have to submit an emoji proposal to a private consortium and wait for approval. Well, we didn't do that. Here's what we made...&lt;/p&gt;

&lt;p&gt;A capsule collection of 22 handcrafted emojis, inspired by open-source developers and NFT art colorways &amp;amp; aesthetics. They're our small way of saying “thank you!” &amp;amp; recognizing the tireless work of open-source contributors, builders &amp;amp; makers.&lt;/p&gt;

&lt;p&gt;The emojis are designed to fill gaps in a typical developer’s day including “busy coders” in 6 different skin tones and colorways, “bugs” for all your bug hunting &amp;amp; vulnerability needs, "binary code 101010", online/offline and “databases on fire”!&lt;/p&gt;

&lt;p&gt;These emojis are 100% free &amp;amp; open-source. Find them here: &lt;a href="https://emoji.openess.dev"&gt;https://emoji.openess.dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We hope you enjoy them! xo lotusleaf&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>emoji</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Lessons I learned from achieving a 99.99% platform uptime
</title>
      <author>germangonzo</author>
      <pubDate>Tue, 27 Apr 2021 20:30:02 +0000</pubDate>
      <link>https://dev.to/germangonzo/lessons-i-learned-from-achieving-a-99-99-platform-uptime-1c9o</link>
      <guid>https://dev.to/germangonzo/lessons-i-learned-from-achieving-a-99-99-platform-uptime-1c9o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2szms1ZN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vni81xke3x9c47tojqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2szms1ZN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vni81xke3x9c47tojqf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://voice123.com"&gt;Voice123&lt;/a&gt; is the first (and arguably foremost) open marketplace for voice actors.&lt;/p&gt;

&lt;p&gt;Today, Voice123 has more than 250 000 registered voice actors, 60 000 active users, and 1.5 million leads that are generated per month. The platform has supported more than 350 million requests in a single month and manages 4TB of data. Besides the site’s operation, the engineering team is also releasing new features and improvements daily.&lt;/p&gt;

&lt;p&gt;By the end of Q3 2021, our platform achieved an elusive &lt;strong&gt;99.995%&lt;/strong&gt; uptime. Over the last two years, It went from 21.98 minutes of downtime per month (99.9%) to 4.38 minutes (99.99%). &lt;/p&gt;

&lt;p&gt;It seemed like an achievement worth celebrating — until we realized that the magical percentage of 99,995 was actually a kind of &lt;a href="https://techcrunch.com/2011/07/30/vanity-metrics/"&gt;vanity metric&lt;/a&gt;, a benchmark set with insufficient justification. The costs of the implementation were around &lt;em&gt;30 times&lt;/em&gt; the impact of having downtime! &lt;/p&gt;

&lt;p&gt;In truth, we’d spent more than 3000 engineering hours to reduce the downtime by 18 minutes. &lt;br&gt;
The estimated cost per one downtime minute is approx 10 USD. According to that calculation, the monthly fee would be $180 vs. our estimated engineering costs of $5000/mo.&lt;/p&gt;

&lt;p&gt;Of course, this is an over-simplification of the economic impact of having the site down.&lt;/p&gt;

&lt;p&gt;However, this story has a bright side:  We realized that the most valuable part of all of this was not the elusive percentage, but the process of achieving it! &lt;/p&gt;

&lt;p&gt;Why? &lt;/p&gt;

&lt;p&gt;Because the process made our platform much more robust in many places, notably:  platform and infrastructure knowledge, mechanical sympathy, development practices, DevOps culture, and project management.&lt;/p&gt;

&lt;p&gt;Mechanical sympathy?’ you ask?&lt;/p&gt;

&lt;p&gt;Let me explain!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mechanical-sympathy"&gt;
  &lt;/a&gt;
  Mechanical Sympathy
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;"You don't have to be an engineer to be a racing driver, but you do have to have mechanical sympathy." &lt;em&gt;Jackie Stewart, legendary British Formula One ace.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simply put, mechanical sympathy is when you use a tool or system with an understanding of how it operates at its best &lt;a href="https://wa.aws.amazon.com/wat.concept.mechanical-sy"&gt;1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The platform is composed of several technologies and components that have millions of daily interactions between them. The databases (SQL and NoSQL), proprietary and third-party services, and utilities must interact in a complex, coordinated, traceable, and predictable way. The system operation should fulfill all those requirements, and our first realization was that the engineering team got easily lost in the heaps of information and tools available. &lt;/p&gt;

&lt;p&gt;Consequently, here are the three main areas (and the tools) that enabled us to understand the platform and start being sympathetic.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#logging"&gt;
  &lt;/a&gt;
  Logging
&lt;/h4&gt;

&lt;p&gt;Collecting data is the starting point for any effort that pertains to system knowledge. Without accurate and meaningful data, any optimization effort will become useless.&lt;/p&gt;

&lt;p&gt;The platform collects all the operational data through a logging mechanism. Access and error logs and performance metrics should be stored in a categorized, centralized, and structured way. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#error-reporting"&gt;
  &lt;/a&gt;
  Error reporting
&lt;/h4&gt;

&lt;p&gt;Logs can be useful for tracking issues and detecting anomalies but not enough to solve or manage them. Error monitoring tools like &lt;a href="https://sentry.io/welcome/"&gt;Sentry&lt;/a&gt; enabled us to manage and track errors in real-time. Every time an error occurs — independently of the application component — the error is reported and notified to our engineering team via a Slack integration. &lt;/p&gt;

&lt;p&gt;Error reporting is not only about collecting data. It’s also the process of tackling the issues reported and how the engineering team is notified. The team struggled with the overwhelming amount of notifications it was receiving. The system became useful and practical for bug squashing just after setting up rules for the incidents reporting based on frequency, component mission, and priority.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#monitoring"&gt;
  &lt;/a&gt;
  Monitoring
&lt;/h4&gt;

&lt;p&gt;Data must serve a purpose, and that’s where monitoring comes in. &lt;/p&gt;

&lt;p&gt;The first step in the monitoring process is to extract indicators from the available data. For a better understanding, we categorized the indicators into four general categories: Resource consumption, Performance, Business transactions, and Operational indicators.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resource consumption&lt;/strong&gt; (Computational resources usage):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free memory per component&lt;/li&gt;
&lt;li&gt;CPU usage per component&lt;/li&gt;
&lt;li&gt;Active connections per component&lt;/li&gt;
&lt;li&gt;Emails sent&lt;/li&gt;
&lt;li&gt;Bounce rate&lt;/li&gt;
&lt;li&gt;Disk usage&lt;/li&gt;
&lt;li&gt;Network usage and traffic&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;  (How fast and reliable the platform is. Anything that contributes to a better user experience from a technical standpoint):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Availability : 2xx_requests/ (2xx_requests + 5xx_requests)&lt;/li&gt;
&lt;li&gt;Uptime (Daily, Weekly,  etc.)&lt;/li&gt;
&lt;li&gt;Median response time for critical endpoints&lt;/li&gt;
&lt;li&gt;Average page load speed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Business transactions&lt;/strong&gt; (How the system serves the business goals):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The number of meaningful interactions per period (hour, day, week, etc.)

&lt;ul&gt;
&lt;li&gt;Projects posted&lt;/li&gt;
&lt;li&gt;Orders processed&lt;/li&gt;
&lt;li&gt;Number of searches per period&lt;/li&gt;
&lt;li&gt;Payments received, etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Operational indicators&lt;/strong&gt; (Service quality provided by the technical operations team):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Median resolution time for bugs&lt;/li&gt;
&lt;li&gt;Bugs backlog growth rate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After setting up all the meaningful indicators, the engineering team must set a benchmark for them. It's advisable to implement a notification system that triggers an alert when a measurement is over/below a defined threshold. The big challenge here is how to prevent false alarms that make the communication channels noisy and thus reduce their effectiveness. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#development-practices"&gt;
  &lt;/a&gt;
  Development practices
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#tdd-and-integration-tests"&gt;
  &lt;/a&gt;
  TDD and Integration tests
&lt;/h4&gt;

&lt;p&gt;Test-Driven-Development &lt;strong&gt;(TDD)&lt;/strong&gt; is a development methodology that software developers acknowledge as fundamental to delivering good quality software. TDD is hard to implement in practice because the tight deadlines eclipse it. Many engineers also think about it as an overhead: it reduces the release velocity as well as personal productivity.&lt;/p&gt;

&lt;p&gt;TDD critics could be right in the short-term, but it has demonstrated the opposite in the mid/long-term. We have gone through several refactors and upgrades of package dependencies without significant (or even any) downtime. Unit tests gave us the confidence to implement those changes in the platform with reasonable certainty that it’ll remain stable, reducing the maintenance burden and elevated cost of unexpected critical issues.&lt;/p&gt;

&lt;p&gt;Unit testing is only the base of TDD. The challenge is to create a development culture around the benefits of TDD. Here’s the roadmap the Voice123 team followed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the TDD discussion even when the platform has a considerable amount of progress. A tad late, but good enough for creating a remediation plan. &lt;/li&gt;
&lt;li&gt;Identify critical components/functionalities of the system, prioritize, and plan the creation of unit tests for them.&lt;/li&gt;
&lt;li&gt;Implement the agreed tests to ensure meaningful use cases and extensions instead of code lines covered.&lt;/li&gt;
&lt;li&gt;Integrate unit test execution as a continuous integration step.&lt;/li&gt;
&lt;li&gt;Run several iterations until there's comprehensive code coverage — 80% could be an acceptable benchmark. (Avoid the code coverage mindset because it can lead to bogus tests driven only to fulfill the number).  At some point, the team will pursue that number, but the discussion will be about how well-tested the system is instead of getting the threshold at the expense of ‘cheating’ or manipulating tests.&lt;/li&gt;
&lt;li&gt;At this point, the developers are familiar with unit testing and start adopting TDD as the safest and most efficient way to implement changes.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#support-mindset"&gt;
  &lt;/a&gt;
  Support mindset
&lt;/h4&gt;

&lt;p&gt;There’s a well-documented rivalry between support and development teams. Support has to react promptly to issues and manage the stress of dealing with the emotional outbursts of angry or concerned users. When the development team is distanced from the platform/product's user-frontline, it underestimates both the impact and the support team’s issues. Conversely, the support crowd tends to think of developers as divas who don't want to be disturbed by those annoying bugs! &lt;br&gt;
Our experience of having developers assigned regularly to support tasks has been beneficial for the platform and the development process.  Engineers are more connected with user needs and better understand the impact of what they’ve implemented. At the same time, they gain a deeper understanding of the system by exploring and learning about areas of the platform they never touch — and sometimes, don’t even know existed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#devops-culture"&gt;
  &lt;/a&gt;
  DevOps culture
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#continuous-integrationci-and-continuous-delivery-cd"&gt;
  &lt;/a&gt;
  Continuous integration(CI) and Continuous Delivery (CD)
&lt;/h4&gt;

&lt;p&gt;CI or Continuous Integration is an engineering practice in which team members integrate their code at a very high frequency. Teams implementing CI aim to integrate code daily or, in some cases, hourly.&lt;/p&gt;

&lt;p&gt;CD or Continuous Delivery is the practice of ensuring that code is always in a deployable state. This means that all code changes, such as new features, bug fixes, experiments, configuration changes, are always ready for deployment to a production environment (&lt;a href="https://www.browserstack.com/guide/ci-cd-vs-agile-vs-devops"&gt;https://www.browserstack.com/guide/ci-cd-vs-agile-vs-devops&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;An exemplary CI/CD implementation will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improve the team agility and fast response&lt;/li&gt;
&lt;li&gt;Reduce the number of regression errors by executing as many automated tests as possible&lt;/li&gt;
&lt;li&gt;Allow quick rollback and recovery from many disaster situations introduced by new releases.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#release-only-once-per-day"&gt;
  &lt;/a&gt;
  Release only once per day
&lt;/h4&gt;

&lt;p&gt;This part might be counterintuitive when applied to the continuous integration principle. But, in practice, most features (and even bugs) released could wait until the following day to be published. At Voice123, we have implemented a simple mechanism to allow daily release:&lt;br&gt;
all the changes are merged to a RELEASE branch that is rebased and published to the production environment every weekday morning.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#panic-button-expedited-release"&gt;
  &lt;/a&gt;
  Panic button (Expedited release)
&lt;/h4&gt;

&lt;p&gt;Yup: shit happens. Some releases crash the platform or create a huge mess.&lt;/p&gt;

&lt;p&gt;Having an expedited release process that skips some validation steps helps minimize catastrophic deployments. Just make sure that the panic button is only used in emergencies and doesn’t become the rule for fixing quality issues.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-management"&gt;
  &lt;/a&gt;
  Project management
&lt;/h3&gt;

&lt;p&gt;The challenge is to align the engineering team’s voracious appetite for refactoring and exploring new technologies with a clear and measurable goal. Create a culture of impact thinking instead of delivering. &lt;/p&gt;

&lt;p&gt;Here are some questions that help the engineering team make decisions about refactoring or migrating to new technologies:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Is the issue affecting the user experience?&lt;/li&gt;
&lt;li&gt;What are the pros of our current technology? What are the cons of the new technology? Ask those specific questions in that order and contrast the answers.&lt;/li&gt;
&lt;li&gt;Is it affecting the team’s execution speed? By how much? Can you give specific and practical examples?&lt;/li&gt;
&lt;li&gt;What happens if we don't do the refactor? How long can we operate the platform without doing the refactor?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Do periodic upgrades of the packages and dependencies required by the platform. Many of the modern tools and frameworks have package audit tools. Identify those that are critical and high priority and schedule regular maintenance routines — at least one per Quarter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h3&gt;

&lt;p&gt;Keep following the good practices that allow the platform to be robust and reliable — and never pursue the five nines (99.999%) uptime! Reliability: checked! Time to work on performance.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"When a measure becomes a target, it ceases to be a good measure." &lt;a href="https://en.wikipedia.org/wiki/Goodhart%27s_law"&gt;Goodhart's law&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;em&gt;A big thank you to the Engineering team at Voice123, &lt;a href="https://medium.com/@carelf"&gt;Carel Frans&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/perichon/"&gt;Luis Perichón&lt;/a&gt;, &lt;a href="https://medium.com/@josephine.tse"&gt;Josephine Tse&lt;/a&gt; and Carlos Beltrán for your contributions and the help for writing this post&lt;/em&gt; &lt;/p&gt;

</description>
      <category>devops</category>
      <category>cloudskills</category>
      <category>architecture</category>
      <category>uptime</category>
    </item>
    <item>
      <title>Python, Poised for Future</title>
      <author>ahsanmalik07</author>
      <pubDate>Tue, 27 Apr 2021 20:11:14 +0000</pubDate>
      <link>https://dev.to/ahsanmalik07/python-poised-for-future-nf3</link>
      <guid>https://dev.to/ahsanmalik07/python-poised-for-future-nf3</guid>
      <description>&lt;p&gt;With 2021 already upon us, we are still wondering what we can do to make the most out of this year and years to come.  Most of us have set objectives such as hit the gym more often, read more books, explore new places which are admirable in their own way. But let’s just think out of the box and out of your comfort zone, I suggest that everyone should learn how to program with Python. This could set you on path to success for the years to come.        &lt;/p&gt;

&lt;p&gt;I first came to know about Python was due to one of projects. I wanted to setup a web server on Raspberry Pi (small single board computer) for the user to visualize sensory data. I was able to create WebSockets simply using Python to control the connected home appliances and attached different sensors. A couple of years back, scripting was the main source of inspiration that I started digging deep into Python, and that was the foremost reason I was attracted to Python and preferred more than other popular scripting language of that time. Now if I see, with its large and powerful set of libraries and huge online community python has become an essential tool that everyone should carry in their arsenal.&lt;/p&gt;

&lt;p&gt;No matter which field you belong to, Python is a great language not just for technical people but for kids, for adults wanting to have some creativity added to their life. Python has tons of packages to do just about anything. Nobody wants to spend time (energy) understanding the technical complications of the programming. The simplicity lets user to focus more on the actual problem solving things. For beginners it’s simple, start with Python because it is easy to learn and powerful.  As an example&lt;br&gt;
write the first ever program that any language teaches you, “Hello World” in different programming languages and analyze the simplicity of Python.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dTHn2qvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hz7wkrfrfrcyycry9p47.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dTHn2qvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hz7wkrfrfrcyycry9p47.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With a simple, easy readable syntax Python has been admired by professional develops and industrial researcher. Efficiency of python allows developers to complete more work using fewer lines of code.&lt;br&gt;
 • If you are hobbyist, learn Python to do some cool and amazing projects that can keep you motivated. For example:&lt;br&gt;
 • build a home monitoring and automation system&lt;br&gt;
 • build a robotic to paint random pictures&lt;br&gt;
 • develop your own personal website&lt;br&gt;
 • If you have a kid at home, project kits from Adafruit and Raspberry Pi are a great way for kids to get their hands dirty with fun projects. Many Python conferences encourage kids to come and do things with Python. If you are an adult and want to learn by making games, check out Arcade Academy&lt;br&gt;
 • If you are already familiar with programming and know how to code, then don’t fret Python will be very quick to pick up. Online resources like WikiBooks are great resources for learning quickly by example. &lt;br&gt;
 • If you are a Data Scientist and planning to dive deep in to the field of Data Sciences, Machine Learning or Artificial Intelligence, python is a power tool that you need to keep in you arsenal. Python has powerful APIs and libraries&lt;br&gt;
available for AI, Data Science, and Machine learning.&lt;/p&gt;

&lt;p&gt;“The only limit to AI is human imagination.&lt;/p&gt;

&lt;p&gt;To give an idea about what you want and how python can be useful, I will list down some of the famous libraries and their applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QtHbB2nQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8n59jj7kssrz8c554w6y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QtHbB2nQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8n59jj7kssrz8c554w6y.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The applications are endless. There are plenty of ways to get started with python; self-study, enroll yourself in python online course or watch online tutorials. The choice is yours to make!&lt;/p&gt;

&lt;p&gt;One great community DevNation(&lt;a href="https://www.thedevnation.com/"&gt;https://www.thedevnation.com/&lt;/a&gt;) with whom I had a great learning experience, is empowering the students/learners and grooming them to become not just good coders but good programmers. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>New JavaScript Features ECMAScript 2021 (with examples)</title>
      <author>Brayan Arrieta</author>
      <pubDate>Tue, 27 Apr 2021 20:10:39 +0000</pubDate>
      <link>https://dev.to/brayanarrieta/new-javascript-features-ecmascript-2021-with-examples-3hfm</link>
      <guid>https://dev.to/brayanarrieta/new-javascript-features-ecmascript-2021-with-examples-3hfm</guid>
      <description>&lt;p&gt;&lt;strong&gt;ECMAScript 2021&lt;/strong&gt; is the version of ECMAScript corresponding to this year. There are some useful and awesome features that have been incorporated and used in our javascript projects&lt;/p&gt;

&lt;p&gt;The new JavaScript features in &lt;strong&gt;ECMAScript 2021&lt;/strong&gt; are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Numeric separators&lt;/li&gt;
&lt;li&gt;String replaceAll&lt;/li&gt;
&lt;li&gt;Logical assignment operator

&lt;ul&gt;
&lt;li&gt;And &amp;amp; Equals (&amp;amp;&amp;amp;=)&lt;/li&gt;
&lt;li&gt;OR &amp;amp; Equals (||=)&lt;/li&gt;
&lt;li&gt;Nullish Coalescing &amp;amp; Equals (??=)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Promise.any&lt;/li&gt;
&lt;li&gt;Private class methods&lt;/li&gt;
&lt;li&gt;Private Getters and setters&lt;/li&gt;
&lt;li&gt;WeakRef &lt;/li&gt;
&lt;li&gt;Finalizers&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#numberic-separators"&gt;
  &lt;/a&gt;
  Numberic separators
&lt;/h1&gt;

&lt;p&gt;This new feature allows that numeric literals use underscores as separators to help to improve readability using a visual separation between groups of digits. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// A billion&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;_000_000_000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Hundreds of millions     &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;_475_938&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// 6234500 cents (62345 dollars)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;62345&lt;/span&gt;&lt;span class="nx"&gt;_00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// 1,734,500&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;_734_500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="c1"&gt;// 20^30000&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;e30_000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Also can be used for Binary, Hex, Octal bases&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#stringprotypereplaceall"&gt;
  &lt;/a&gt;
  String.protype.replaceAll
&lt;/h1&gt;

&lt;p&gt;Currently, there is no way to replace all instances of a substring without the use of global regexp &lt;code&gt;(/regex/g)&lt;/code&gt;. With the new method replaceAll that change that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#before-with-regex"&gt;
  &lt;/a&gt;
  Before (with regex)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello+this+is+a+message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messageWithSpace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\+&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// hello this is a message&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#after-with-new-method-replaceall"&gt;
  &lt;/a&gt;
  After (with new method replaceAll)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello+this+is+a+message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messageWithSpace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// hello this is a message&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#logical-assignment-operator"&gt;
  &lt;/a&gt;
  Logical assignment operator
&lt;/h1&gt;

&lt;p&gt;Logical assignment operators combine logical operators and assignment expressions. &lt;/p&gt;

&lt;p&gt;There are some new operators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;And &amp;amp; Equals (&amp;amp;&amp;amp;=)&lt;/li&gt;
&lt;li&gt;OR &amp;amp; Equals (||=)&lt;/li&gt;
&lt;li&gt;Nullish Coalescing &amp;amp; Equals (??=)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#and-amp-equals-ampamp"&gt;
  &lt;/a&gt;
  And &amp;amp; Equals (&amp;amp;&amp;amp;=)
&lt;/h2&gt;

&lt;p&gt;Assign when the value is truthy. Also in the next table is explained. &lt;/p&gt;

&lt;p&gt;With constants, x and y with a value of &lt;strong&gt;true&lt;/strong&gt; when the constant has a value assigned and &lt;strong&gt;false&lt;/strong&gt; in the opposite case.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;x&lt;/th&gt;
&lt;th&gt;y&lt;/th&gt;
&lt;th&gt;x And &amp;amp; Equals y&lt;/th&gt;
&lt;th&gt;x after assign&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  Before
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Output: a = 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  After
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="c1"&gt;// Output: a = 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#or-amp-equals-"&gt;
  &lt;/a&gt;
  OR &amp;amp; Equals (||=)
&lt;/h2&gt;

&lt;p&gt;Assign when the value is falsy. Also in the next table is explained.&lt;/p&gt;

&lt;p&gt;With constants, x and y with a value of &lt;strong&gt;true&lt;/strong&gt; when the constant has a value assigned and &lt;strong&gt;false&lt;/strong&gt; in the opposite case&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;x&lt;/th&gt;
&lt;th&gt;y&lt;/th&gt;
&lt;th&gt;x OR &amp;amp; Equals y&lt;/th&gt;
&lt;th&gt;x after assign&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  Before
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// If conditional&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Output: a = 5&lt;/span&gt;

&lt;span class="c1"&gt;// OR&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Output: a = 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  After
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="c1"&gt;// Output: a = 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#nullish-coalescing-amp-equals-"&gt;
  &lt;/a&gt;
  Nullish Coalescing &amp;amp; Equals (??=)
&lt;/h2&gt;

&lt;p&gt;Assign when the value is null or undefined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;

&lt;span class="c1"&gt;// Output: a = 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#promiseany-method"&gt;
  &lt;/a&gt;
  Promise.any method
&lt;/h1&gt;

&lt;p&gt;The Promise.any() method returns a promise that will resolve as soon as one of the promises is resolved. If all of the promises are rejected, the method will throw an AggregateError exception holding the rejection reason&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;thirdPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="nx"&gt;firstPromise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secondPromise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;thirdPromise&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="c1"&gt;// Any of the promises was fulfilled.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// AggregateError: All promises were rejected&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#private-class-methods"&gt;
  &lt;/a&gt;
  Private class methods
&lt;/h1&gt;

&lt;p&gt;Previously when was needed to declare a private method need to be added an underscore at the beginning of the method name (based on convention), however, that not guarantee that the method will be private. With ES2021 was added as a new feature the private class methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;addTestRunner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;testRunner&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;testRunner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;testRunner&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTestRunner&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Output: TypeError: test.addTestRunner is not a function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#private-getters-and-setters"&gt;
  &lt;/a&gt;
  Private Getters and setters
&lt;/h1&gt;

&lt;p&gt;Previously when was needed to declare a getter or setter can be accessed by means of the instance created, with ES2021 was added as a new feature the private getters and setters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;

&lt;span class="c1"&gt;// Output: undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#weakref"&gt;
  &lt;/a&gt;
  WeakRef
&lt;/h1&gt;

&lt;p&gt;The WeakRef, which stands for Weak References, allows you to create a weak reference to an object. A weak reference to an object is a reference that does not prevent the object from being reclaimed by the garbage collector.&lt;/p&gt;

&lt;p&gt;The primary use of Weak Reference is to implement caches or mappings of large objects. Where it’s desired that a large object is not kept alive solely because it appears in a cache or mapping.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;objectExample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Juanito&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jordan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WeakRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objectExample&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you need to read the value of WeakRefs, need to use the deref() method to return the instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;objectExample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Juanito&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jordan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WeakRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objectExample&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;refObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deref&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;

&lt;span class="c1"&gt;// Output: 'Juanito'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#warnings"&gt;
  &lt;/a&gt;
  Warnings
&lt;/h2&gt;

&lt;p&gt;The detail with the WeakRef feature is that the implementation detail of when, how, and whether JavaScript garbage collector occurs or not, you may observe different behavior between environments. Also, the complexity of the Javascript garbage collector is very high.&lt;/p&gt;

&lt;p&gt;For that reason, use WeakRef is not recommended and it’s best to avoid implementing one if possible. Unless you’re a JavaScript library maintainer, you will most likely never need to use it. More information &lt;a href="https://github.com/tc39/proposal-weakrefs"&gt;WeakRefs TC39 proposal&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#finalizers"&gt;
  &lt;/a&gt;
  Finalizers
&lt;/h1&gt;

&lt;p&gt;The Finalizer is a companion feature of WeakRef that allows you to execute some specific code after an object has become unreachable to the program.&lt;/p&gt;

&lt;p&gt;In short, you can register a callback function that gets triggered after the garbage collection occurs. You can create a registry bypassing the callback to the FinalizationRegistry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;registry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FinalizationRegistry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do some stuff&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you can register any object you want to clean up for by calling the register() method, passing both the object and the value you want to pass to the callback function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;registry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;greetingObject&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The object passed into the register() method will be weak referenced so when the value will be garbage collected the second param will be passed to the finalizer ("greetingObject" param).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#warning"&gt;
  &lt;/a&gt;
  Warning
&lt;/h2&gt;

&lt;p&gt;As mentioned previously the WeakRef and Finalizer are &lt;strong&gt;tricky&lt;/strong&gt; and are not recommended to be used &lt;a href="https://github.com/tc39/proposal-weakrefs"&gt;WeakRefs TC39 proposal&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;JavaScript is an awesome programing language, and that’s something very healthy for web development. Every year there is a new awesome feature that can be used in the project. In this post, we’ve reviewed the &lt;strong&gt;ES2021&lt;/strong&gt; features. We expect surprises the next year with a new version &lt;strong&gt;ES2022&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let me know in your comments recommendations or something else that can be added, I will update the post based on that thanks! 👍&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tc39/proposal-weakrefs"&gt;WeakRefs TC39 proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>ecmascript</category>
      <category>2021</category>
      <category>programming</category>
    </item>
    <item>
      <title>Becoming a front end web developer in 2021
</title>
      <author>Shruti Kapoor</author>
      <pubDate>Tue, 27 Apr 2021 19:45:28 +0000</pubDate>
      <link>https://dev.to/shrutikapoor08/free-bootcamp-becoming-a-front-end-web-developer-in-2021-and-getting-a-job-as-a-web-developer-1kk6</link>
      <guid>https://dev.to/shrutikapoor08/free-bootcamp-becoming-a-front-end-web-developer-in-2021-and-getting-a-job-as-a-web-developer-1kk6</guid>
      <description>&lt;h1&gt;
  &lt;a href="#you-are-here-therefore-you-belong"&gt;
  &lt;/a&gt;
  You are here, therefore you belong ❤️
&lt;/h1&gt;

&lt;p&gt;I know that a lot of people want or know someone who wants to start learning web development or coding in general. Perhaps you are too afraid to take this bold move, perhaps you think that coding is hard and not sure if you are the right fit. Maybe you are too scared to open the code editor and start coding because you are afraid you may get stuck and lose motivation, or you don't know where to get started in the vast sea of knowledge. I am here to tell you - You got this! We will get through this together!&lt;/p&gt;

&lt;p&gt;In this article, I will dive into the resources, a proposed plan of getting started, and a list of resources to help you learn to become a web developer. This plan is going to be focused on getting you a job, and therefore project-heavy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debunking-some-myths-that-hold-you-back"&gt;
  &lt;/a&gt;
  Debunking some myths that hold you back
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;You do not need an expensive laptop or setup.&lt;/li&gt;
&lt;li&gt;You do not need to spend tons of money to get started.&lt;/li&gt;
&lt;li&gt;You do not have to go to college to become a web developer.&lt;/li&gt;
&lt;li&gt;You do not need to be a certain years old to get started.&lt;/li&gt;
&lt;li&gt;You do not need to know all the technologies before applying for a job.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#getting-started-things-you-need"&gt;
  &lt;/a&gt;
  Getting started: things you need
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Equipment

&lt;ul&gt;
&lt;li&gt;computer&lt;/li&gt;
&lt;li&gt;internet connection&lt;/li&gt;
&lt;li&gt;code editor. Some options are:

&lt;ul&gt;
&lt;li&gt;Sublime Text&lt;/li&gt;
&lt;li&gt;Atom&lt;/li&gt;
&lt;li&gt;Visual Studio&lt;/li&gt;
&lt;li&gt;Webstorm&lt;/li&gt;
&lt;li&gt;Brackets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;web browser. Some options are:

&lt;ul&gt;
&lt;li&gt;Google Chrome&lt;/li&gt;
&lt;li&gt;Mozilla Firefox&lt;/li&gt;
&lt;li&gt;Safari&lt;/li&gt;
&lt;li&gt;Edge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Finances

&lt;ul&gt;
&lt;li&gt;both free and paid options available&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Time commitment

&lt;ul&gt;
&lt;li&gt;As much or as little as you want&lt;/li&gt;
&lt;li&gt;Recommended: 2 - 4 hours / week&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Self-care&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Write down your list of affirmations. ## Some affirmations that will help you through this journey:

&lt;ul&gt;
&lt;li&gt;You are already smart enough to be a web developer.&lt;/li&gt;
&lt;li&gt;You are capable of amazing things.&lt;/li&gt;
&lt;li&gt;You can make things happen.&lt;/li&gt;
&lt;li&gt;You can do anything you set your mind to.&lt;/li&gt;
&lt;li&gt;You are competent.&lt;/li&gt;
&lt;li&gt;Your creative power will help you succeed in this journey.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Break day: Give yourself at least one day a week to rest and recharge. I love break days! These are my days to "nurture myself" and have "me time". I usually paint, go on a hike, do something creative, create a DIY project, hang out with friends, nap, sleep in, watch F.R.I.E.N.D.S, drink chai all day long or watch a cute feel-good movie.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;List of accomplishments: As you progress through this journey, keep a written list of things you have accomplished. Items on this list could be as small as completing a chapter on time, or solving a hard coding problem. Everything counts! This list is a proof that you are growing!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inspiration sources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;List of people who inspire you mentors. &lt;/li&gt;
&lt;li&gt;Write down what about these people are you inspired by.&lt;/li&gt;
&lt;li&gt;Reach out to a few of these people to let them know of the journey you are embarking on, and see if they would be willing to help out. Most people are happy to offer any help and support they can.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List of "cool project ideas": These will be your inspirations for building cool things. The idea can be anything - an app you always wanted to build, an improvement you wanted to see in an app, a funny meme bot you wanted to generate. We will be using this list of ideas to build projects. Some examples are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dog image generator&lt;/li&gt;
&lt;li&gt;Music player app&lt;/li&gt;
&lt;li&gt;Pomodoro timer&lt;/li&gt;
&lt;li&gt;random joke generator&lt;/li&gt;
&lt;li&gt;cat picture generator&lt;/li&gt;
&lt;li&gt;an app to show time in different parts of the world&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support group:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reach out to your group of friends who make you feel proud of yourself and let them know of the journey you are embarking on. These people will be your cheerleaders throughout this process.&lt;/li&gt;
&lt;li&gt;other new developers in the industry. you can find people with similar interest on the same journey as you by attending &lt;a href="https://www.meetup.com/Free-Code-Camp-SF/events/276180196"&gt;local meetups in your area&lt;/a&gt;. A popular online version of meetups group is Discord. Check out this list of &lt;a href="https://dev.to/htnguy/top-10-discord-servers-for-developers-559o"&gt;Discord servers for developers&lt;/a&gt; joining discord servers or facebook groups.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.100daysofcode.com/"&gt;100 Days of Code&lt;/a&gt; is an amazing community of individuals who are getting started with coding. This is how I kept myself motivated when I was learning to code, applying for jobs and preparing for interviews.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Online resources&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://javascript30.com/"&gt;JavaScript 30 by Wes Bos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://javascript.info/"&gt;JavaScript.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Youtube channels

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/LevelUpTuts"&gt;LevelUpTuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/TechGuyWeb"&gt;Traversy Media&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ"&gt;Freecodecamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=8JJ101D3knE&amp;amp;ab_channel=ProgrammingwithMosh"&gt;Programming with Mosh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCeU-1X402kT-JlLdAitxSMA"&gt;Florin Pop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/99baddawg"&gt;Ben Awad&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bootcamps&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/"&gt;Freecodecamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codecademy.com/"&gt;Codeacademy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udacity.com/course/front-end-web-developer-nanodegree--nd0011"&gt;Udacity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/learn/html-css-javascript-for-web-developers#syllabus"&gt;Coursera&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Books&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/books/front-end-handbook/2018/"&gt;Front-End Developer Handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Learn"&gt;MDN&lt;/a&gt; (Web Docs, but MDN is like web development bible)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Podcasts&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://frontendhappyhour.com/"&gt;Front end happy hour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://syntax.fm/"&gt;SyntaxFM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devchat.tv/podcasts/js-jabber/"&gt;JavaScript Jabber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spec.fm/podcasts/developer-tea"&gt;Developer Tea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spec.fm/podcasts/toolsday"&gt;Toolsday&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blog sites with awesome articles&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/"&gt;Dev.to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/"&gt;CSS Tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.smashingmagazine.com/"&gt;Smashing Magazine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/"&gt;Hackernoon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Checklists and roadmaps&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/shrutikapoor08/Learn-Web-Development-Checklist"&gt;Web development Checklist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frontendchecklist.io/"&gt;Front End Checklist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://roadmap.sh/frontend"&gt;Roadmap to being a Front End developer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Paid Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Online resources&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/learn/beginner/"&gt;Frontend Masters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/"&gt;Udemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lynda.com/Web-training-tutorials/88-0.html"&gt;Lynda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://egghead.io/"&gt;EggHead&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Books&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Eloquent-JavaScript-3rd-Introduction-Programming/dp/1593279507"&gt;Eloquent JavaScript, Marijn Haverbeke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.goodreads.com/book/show/10361330-html-and-css"&gt;HTML and CSS: Design and Build Websites&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#bootcamp-process"&gt;
  &lt;/a&gt;
  Bootcamp process
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SKILL: Learn the fundamentals from a resource of your choice: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;PROJECT: Build a portfolio web page using the skills you learnt so far - JS, HTML, CSS. The web page should have the following: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add your name, photo, bio using semantic HTML &lt;/li&gt;
&lt;li&gt;Setup sections for projects. We will fill these projects as we go. The projects will have an image, description and a link. Set these up with &lt;a href="https://loremipsum.io/"&gt;lorem ipsum text&lt;/a&gt; for now. &lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SKILL: Learn git and version control. &lt;a href="https://youtu.be/8JJ101D3knE"&gt;Here's an instructional video&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;PROJECT:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add your portfolio to GitHub.&lt;/li&gt;
&lt;li&gt;Step Up Assignment: Setup Github pages to host your portfolio. &lt;a href="https://www.youtube.com/watch?v=794yrQWAOD8&amp;amp;ab_channel=iEatWebsites"&gt;Here's an instructional video&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SKILL: Step up your JS and CSS knowledge&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PROJECT: Make your portfolio mobile friendly and responsive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;PROJECT: Getting ready for job interviews&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Practice interview questions on &lt;a href="https://www.interviewcake.com/"&gt;InterviewCake&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;Practice interviews questions on &lt;a href="https://leetcode.com/"&gt;Leetcode&lt;/a&gt;. Start with easy and slowly work your way up.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SKILL: Step up challenge - learn a front-end framework.&lt;br&gt;&lt;br&gt;
React, Vue and Angular are the top front-end frameworks in 2021. If you were to pick one, I would recommend &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;. Lots of companies use React in production. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;PROJECT: Implement the framework. - build an inspiration. Add this to your portfolio. Tasks: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fetch an API of your choice. &lt;/li&gt;
&lt;li&gt;Render data in your app. &lt;/li&gt;
&lt;li&gt;Implement search functionality.&lt;/li&gt;
&lt;li&gt;Implement auto-complete functionality.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;SKILL: Step up challenge: Learn a library for the framework.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Learn a state management library. &lt;a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts"&gt;Redux is a good library to learn.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Learn a CSS library, eg: SASS &lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PROJECT: Implement your next inspiration idea using the library. Add to your portfolio.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SKILL: Learn a testing framework: Build test coverage. Add to your portfolio. Eg: &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JOB: Get a freelance job using your portfolio. Some places to find freelance opportunities are &lt;a href="https://www.upwork.com"&gt;Upwork&lt;/a&gt; &amp;amp; &lt;a href="https://www.fiverr.com/"&gt;Fiverr&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find a mentor. Get feedback on your skills and portfolio.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JOB: Apply for a job. You are ready.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JOB: Prepare for interviews&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Continue iterating.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#curriculum"&gt;
  &lt;/a&gt;
  Curriculum
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[ ] HTML main tags&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-html-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-head-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-body-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-script-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-style-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-link-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-meta-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;[ ] HTML5 Structural / Semantic elements&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-article-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;address&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-address-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-aside-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-dialog-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-details-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-figure-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-main-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-nav-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-header-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-footer-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-summary-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;[ ] HTML Elements and their attributes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[ ] Documents &lt;code&gt;&amp;lt;!DOCTYPE&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-doctype-declaration.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Headings &lt;code&gt;&amp;lt;h1&amp;gt; - &amp;lt;h6&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-h1-h6-tags.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Paragraph &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-p-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Lists &lt;code&gt;&amp;lt;li&amp;gt;, &amp;lt;ul&amp;gt;, &amp;lt;dl&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-lists.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Links &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-a-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Images &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-images.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Table &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;&lt;a href="https://www.w3docs.com/learn-html/html-table.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;[ ] HTML Formatting&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; - Bold text &lt;a href="https://www.w3docs.com/learn-html/html-b-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; - Important text &lt;a href="https://www.w3docs.com/learn-html/html-strong-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; - Smaller text&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; - Italic text &lt;a href="https://www.w3docs.com/learn-html/html-i-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; - Emphasized text &lt;a href="https://www.w3docs.com/learn-html/html-em-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt; - Subscript &lt;a href="https://www.w3docs.com/learn-html/html-sub-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; - superscript &lt;a href="https://www.w3docs.com/learn-html/html-sup-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; - preformatted text &lt;a href="https://www.w3docs.com/learn-html/html-pre-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[ ] HTML Comments &lt;code&gt;&amp;lt;!-- --&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-comments.html"&gt;Link&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;[ ] HTML forms &lt;a href="https://www.w3docs.com/learn-html/html-form-tag.html"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-input-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-textarea-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-button-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-select-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-option-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-fieldset-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-label-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;legend&amp;gt;&lt;/code&gt; &lt;a href="https://www.w3docs.com/learn-html/html-legend-tag.html"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;[ ] Adding a CSS stylesheet to an HTML page using &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] CSS Selectors &lt;a href="https://css-tricks.com/how-css-selectors-work/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Color &lt;a href="https://css-tricks.com/almanac/properties/c/color/"&gt;Article&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] using hex eg: &lt;code&gt;#ff0000&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] rgb eg: &lt;code&gt;rgb(0,0,255)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] common color names eg: &lt;code&gt;red, pink, brown&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] Font &lt;a href="https://css-tricks.com/almanac/properties/f/font/"&gt;Article&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] Family&lt;/li&gt;
&lt;li&gt;[ ] Size&lt;/li&gt;
&lt;li&gt;[ ] Weight&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] Text-decoration &lt;a href="https://css-tricks.com/almanac/properties/t/text-decoration/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Text-transform &lt;a href="https://css-tricks.com/almanac/properties/t/text-transform/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Line-height &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/line-height"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Letter-spacing &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Word-spacing &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/word-spacing"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Background-color &lt;a href="https://cssreference.io/property/background-color/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Background-image &lt;a href="https://cssreference.io/property/background-image/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Margin &lt;a href="https://css-tricks.com/almanac/properties/m/margin/"&gt;Article&lt;/a&gt; &lt;a href="https://cssreference.io/property/margin/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Padding &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/padding"&gt;Article&lt;/a&gt; &lt;a href="https://cssreference.io/property/padding/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Border &lt;a href="https://css-tricks.com/almanac/properties/b/border/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Width &lt;a href="https://css-tricks.com/almanac/properties/w/width/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Height &lt;a href="https://css-tricks.com/almanac/properties/h/height/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] percentage, pixel, em&lt;/li&gt;
&lt;li&gt;[ ] Box model &lt;a href="https://css-tricks.com/the-css-box-model/"&gt;Article&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] list-style &lt;a href="https://css-tricks.com/almanac/properties/l/list-style/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] Pseudo class &lt;a href="https://css-tricks.com/pseudo-class-selectors/"&gt;Article&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] hover&lt;/li&gt;
&lt;li&gt;[ ] active&lt;/li&gt;
&lt;li&gt;[ ] visited&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] Position &lt;a href="https://css-tricks.com/almanac/properties/p/position/"&gt;Article&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] relative&lt;/li&gt;
&lt;li&gt;[ ] absolute&lt;/li&gt;
&lt;li&gt;[ ] fixed&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] Display &lt;a href="https://css-tricks.com/almanac/properties/d/display/"&gt;Article&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] block&lt;/li&gt;
&lt;li&gt;[ ] inline&lt;/li&gt;
&lt;li&gt;[ ] grid&lt;/li&gt;
&lt;li&gt;[ ] none&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] class vs id &lt;a href="https://css-tricks.com/the-difference-between-id-and-class/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#fundamentals"&gt;
  &lt;/a&gt;
  Fundamentals
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;[ ] JavaScript introduction &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction#what_is_javascript"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Adding JavaScript to an HTML page using &lt;code&gt;script&lt;/code&gt; &lt;a href="https://www.digitalocean.com/community/tutorials/html-script-tag"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;console.log&lt;/code&gt; &lt;a href="https://www.freecodecamp.org/news/javascript-console-log-example-how-to-print-to-the-console-in-js/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Comments &lt;a href="https://stackabuse.com/commenting-code-in-javascript-types-and-best-practices/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Variables &lt;a href="https://www.freecodecamp.org/news/var-let-and-const-whats-the-difference"&gt;Article&lt;/a&gt; &lt;a href="https://egghead.io/lessons/javascript-working-with-var-let-const-and-block-scopes?af=5buvlr"&gt;Video&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] &lt;code&gt;var&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;let&lt;/code&gt; &lt;a href="https://egghead.io/lessons/javascript-the-let-keyword-in-es6?af=5buvlr"&gt;Video&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;const&lt;/code&gt; &lt;a href="https://egghead.io/lessons/javascript-const-declarations-in-es6-es2015"&gt;Video&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] Data types &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"&gt;Article&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] String&lt;/li&gt;
&lt;li&gt;[ ] Boolean&lt;/li&gt;
&lt;li&gt;[ ] Number&lt;/li&gt;
&lt;li&gt;[ ] null&lt;/li&gt;
&lt;li&gt;[ ] undefined&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;typeof&lt;/code&gt; operator &lt;a href="https://www.freecodecamp.org/news/javascript-data-types-typeof-explained/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] String functions

&lt;ul&gt;
&lt;li&gt;[ ] &lt;code&gt;.concat&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;length&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;toUpperCase&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;toLowerCase&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;subString&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;split&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] template literals &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;Article&lt;/a&gt; &lt;a href="https://egghead.io/lessons/javascript-use-template-literals-to-embed-expressions-in-strings?af=5buvlr"&gt;Video&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] Operators

&lt;ul&gt;
&lt;li&gt;[ ] Arithmetic Operators &lt;a href="https://www.w3schools.com/jsref/jsref_operators.asp"&gt;Article&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] &lt;code&gt;+&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;-&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;/&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;*&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;++&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;--&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;%&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] Assignment Operators &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#assignment_operators"&gt;Article&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] &lt;code&gt;=&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;lt;=&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;gt;=&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;==&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;===&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;||&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;Ternary operators ? , :&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Loops &lt;a href="https://www.freecodecamp.org/news/javascript-loops-explained-for-loop-for/"&gt;Article&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] &lt;code&gt;for&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;while&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] Conditionals

&lt;ul&gt;
&lt;li&gt;[ ] &lt;code&gt;if... else&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;switch&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Array &lt;a href="https://www.javascripttutorial.net/javascript-array/"&gt;Article&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] Accessing elements &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#accessing_array_elements"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;length&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Looping through elements

&lt;ul&gt;
&lt;li&gt;[ ] &lt;code&gt;map&lt;/code&gt; &lt;a href="https://www.freecodecamp.org/news/javascript-map-how-to-use-the-js-map-function-array-method/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;forEach&lt;/code&gt; &lt;a href="https://www.freecodecamp.org/news/javascript-foreach-how-to-loop-through-an-array-in-js/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;slice&lt;/code&gt; &lt;a href="https://www.freecodecamp.org/news/lets-clear-up-the-confusion-around-the-slice-splice-split-methods-in-javascript-8ba3266c29ae/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;splice&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;filter&lt;/code&gt; &lt;a href="https://egghead.io/lessons/javascript-filter-an-array-with-truthy-values?af=5buvlr"&gt;Video&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;push&lt;/code&gt; &lt;a href="https://egghead.io/lessons/javascript-add-elements-onto-an-array-with-push?af=5buvlr"&gt;Video&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;pop&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;shift&lt;/code&gt;, &lt;code&gt;unshift&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;isArray&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;indexOf&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf"&gt;Article&lt;/a&gt; &lt;a href="https://egghead.io/lessons/javascript-check-if-a-value-is-in-an-array-with-indexof?af=5buvlr"&gt;Video&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;from&lt;/code&gt; &lt;a href="https://egghead.io/lessons/javascript-converting-an-array-like-object-into-an-array-with-array-from?af=5buvlr"&gt;Video&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Object &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects"&gt;Article&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] Creating an object &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#creating_new_objects"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Accessing properties &lt;a href="https://dmitripavlutin.com/access-object-properties-javascript/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Object destructuring &lt;a href="https://dmitripavlutin.com/javascript-object-destructuring/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;Object.keys&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Looping through properties of an object

&lt;ul&gt;
&lt;li&gt;[ ] &lt;code&gt;for... of&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;for...in&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;.keys&lt;/code&gt; &lt;a href="https://masteringjs.io/tutorials/fundamentals/foreach-object"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;.hasOwnProperty&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Functions &lt;a href="https://javascript.info/function-basics"&gt;Article&lt;/a&gt; &lt;a href="https://www.youtube.com/watch?v=N8ap4k_1QEQ&amp;amp;ab_channel=ProgrammingwithMosh"&gt;Video&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] Named functions &lt;a href="https://javascript.info/function-basics#function-naming"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Function expressions &lt;a href="https://javascript.info/function-expressions"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Arrow functions &lt;code&gt;() =&amp;gt; { }&lt;/code&gt; &lt;a href="https://javascript.info/arrow-functions-basics"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] IIFE - Immediately Invoked Function Expressions &lt;a href="https://flaviocopes.com/javascript-iife/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;this&lt;/code&gt; keyword &lt;a href="https://egghead.io/courses/understand-javascript-s-this-keyword-in-depth?af=5buvlr"&gt;Video&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] ES6 Classes &lt;a href="https://www.youtube.com/watch?v=bq_jZY6Skto&amp;amp;ab_channel=freeCodeCamp.org"&gt;Video&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] &lt;code&gt;constructor()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] inherting classes&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] Prototypal inheritance &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain"&gt;Article&lt;/a&gt; &lt;a href="https://www.educative.io/blog/understanding-and-using-prototypal-inheritance-in-javascript"&gt;Article&lt;/a&gt; &lt;a href="https://egghead.io/lessons/javascript-understanding-prototypal-inheritance-within-javascript?af=5buvlr"&gt;Video&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] Inheriting properties&lt;/li&gt;
&lt;li&gt;[ ] Extending properties&lt;/li&gt;
&lt;li&gt;[ ] Accessing properties and methods&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;setTimeout&lt;/code&gt; &lt;a href="https://www.youtube.com/watch?v=z9lJb4D3nJY&amp;amp;ab_channel=CodewithAniaKub%C3%B3w"&gt;Video&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;alert&lt;/code&gt; &lt;a href="https://www.educative.io/edpresso/how-to-use-the-alert-method-in-javascript"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] JSON objects &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON"&gt;Article&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] &lt;code&gt;JSON.stringify&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;JSON.parse&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#web-page-and-javascript"&gt;
  &lt;/a&gt;
  Web page and JavaScript
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;[ ] &lt;code&gt;document.getElementById&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;document.getElementsByTagName&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;document.getElementsByClassName&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;document.getElementsByName&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;document.querySelector&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;document.querySelectorAll&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;.createElement&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;.innerHTML&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;.innerText&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;.append()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;.remove()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;.appendChild&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;.style&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;events&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;[ ] &lt;code&gt;.addEventListener&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;.removeEventListener&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;code&gt;event.preventDefault&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#web-fundamentals"&gt;
  &lt;/a&gt;
  Web fundamentals
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;[ ] How does the web work? &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/How_does_the_Internet_work"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] How does a web browser work? &lt;a href="https://medium.com/@monica1109/what-happens-when-i-type-any-url-in-the-browser-3719c6357da2"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] HTTP basics &lt;a href="https://www.youtube.com/watch?v=t3xrHaqX2tc&amp;amp;ab_channel=OracleDevelopers"&gt;Video&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] headers&lt;/li&gt;
&lt;li&gt;[ ] request&lt;/li&gt;
&lt;li&gt;[ ] response&lt;/li&gt;
&lt;li&gt;[ ] verbs: PUT, POST, DELETE, PATCH, POST&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] What is an API? &lt;a href="https://www.youtube.com/watch?v=GZvSYJDk-us"&gt;Video&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;[ ] What is REST API? &lt;a href="https://www.smashingmagazine.com/2018/01/understanding-using-rest-api/"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] What is GraphQL API? &lt;a href="https://medium.com/devgorilla/what-is-graphql-f0902a959e4"&gt;Article&lt;/a&gt; &lt;a href="https://frontendhappyhour.com/episodes/no-rest-with-quintessential-libations-graphql/"&gt;Podcast&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] What are CRUD operations? &lt;a href="https://www.codecademy.com/articles/what-is-crud"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] What are cookies?

&lt;ul&gt;
&lt;li&gt;[ ] Getting and setting cookies&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] What is local storage?&lt;/li&gt;
&lt;li&gt;[ ] What is session storage?&lt;/li&gt;
&lt;li&gt;[ ] What is server vs client?&lt;/li&gt;
&lt;li&gt;[ ] What is a domain name?&lt;/li&gt;
&lt;li&gt;[ ] What is DNS lookup?&lt;/li&gt;
&lt;li&gt;[ ] What is web hosting?&lt;/li&gt;
&lt;li&gt;[ ] What is CORS? &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;Article&lt;/a&gt; &lt;a href="https://javascript.info/fetch-crossorigin"&gt;Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] ARIA - What is accessibility? &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Accessibility/What_is_accessibility"&gt;Article&lt;/a&gt; &lt;a href="https://www.youtube.com/watch?v=HtTyRajRuyY&amp;amp;list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g&amp;amp;ab_channel=GoogleChromeDevelopers"&gt;Video&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-up-pick-a-stack-front-end-vs-back-end"&gt;
  &lt;/a&gt;
  Step up: Pick a stack (Front end vs back end)
&lt;/h3&gt;

&lt;p&gt;Depending on your interest and passion, you may want to focus on front end development or back end development. Front end development is the development of user interfaces, and uses technologies like HTML, CSS, JavaScript. When focussing on front end development, you may want to focus on frameworks and libraries such as React, Redux, SASS. &lt;br&gt;
Back end development is the development of software that facilitates user interface such as building APIs and uses back end technologies such as NodeJS. For back-end development, you may want to focus on databases such as MongoDB and frameworks and libraries such as NodeJS, Express. &lt;/p&gt;

&lt;p&gt;To review a full list of step up curriculum, &lt;a href="https://github.com/shrutikapoor08/Learn-Web-Development-Checklist/blob/main/README.md#step-up"&gt;check out the full web development checklist here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tips-for-job-hunting"&gt;
  &lt;/a&gt;
  Tips for job hunting
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Use your network

&lt;ul&gt;
&lt;li&gt;on LinkedIn&lt;/li&gt;
&lt;li&gt;on Twitter&lt;/li&gt;
&lt;li&gt;in meetups&lt;/li&gt;
&lt;li&gt;friends and family&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Present your portfolio with your job applications.&lt;/li&gt;
&lt;li&gt;Apply to jobs you are not 100% qualified for. &lt;/li&gt;
&lt;li&gt;Tailor resume for every job posting. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#interview-resources"&gt;
  &lt;/a&gt;
  Interview Resources
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;InterviewCake&lt;/li&gt;
&lt;li&gt;Pramp.com&lt;/li&gt;
&lt;li&gt;Leetcode&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#who-am-i-what-is-my-story"&gt;
  &lt;/a&gt;
  Who am I? What is my story?
&lt;/h2&gt;

&lt;p&gt;I am Shruti Kapoor, and I work as a Senior Software Engineer at PayPal. I have been a web developer for over 7 years now. I worked the first two years as a freelance developer, then as co-founder and CTO of my web development startup - World Web Warriors, and then accepted a job as a professional web developer at TELUS Communications in Vancouver, Canada for three years. In 2017, I moved to sunny California, USA and started working as a Software Engineer at PIX Systems, San Francisco. These 7 years have been really rewarding. In all of these years, I still vividly remember the moments when I was totally freaked out by the sheer ambiguity of technical problem I had at hand and having no idea of where to start. &lt;/p&gt;

&lt;p&gt;Being a web developer can be really hard, and it can feel very lonely. There can be days when you will feel like you don't belong here. Honestly, there have been days when I would question my decision of becoming a software engineer, whether I was good enough. But trust me, it will be these moments that will step you up - not only because it will help you persevere, but also it will be  these moments where you will realize the great joy of overcoming your deepest fears and treading deep waters.&lt;/p&gt;



&lt;p&gt;Shruti Kapoor&lt;br&gt;
&lt;a href="//twitter.com/shrutikapoor08"&gt;Follow on Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="//twitch.tv/shrutikapoor"&gt;Hang out on Twitch&lt;/a&gt;&lt;br&gt;
&lt;a href="//bit.ly/shrutinewsletter"&gt;Get articles like this in your inbox&lt;/a&gt;&lt;/p&gt;




&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--z3wJGgHq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1358972251425579009/ctITebVD_normal.jpg" alt="Shruti Kapoor profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Shruti Kapoor
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/shrutikapoor08"&gt;@shrutikapoor08&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Question: Why does a NodeJS developer need Helmet?&lt;br&gt;&lt;br&gt;To Secure Headers.&lt;br&gt;&lt;a href="https://twitter.com/hashtag/DevJoke"&gt;#DevJoke&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:08 PM - 26 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1375570254777122816" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1375570254777122816" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1375570254777122816" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>programming</category>
      <category>career</category>
      <category>learning</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Understanding the Messaging queue in Microservices</title>
      <author>Akhilesh Kumar</author>
      <pubDate>Tue, 27 Apr 2021 19:44:09 +0000</pubDate>
      <link>https://dev.to/akhileshk/understanding-the-messaging-queue-in-microservices-4j12</link>
      <guid>https://dev.to/akhileshk/understanding-the-messaging-queue-in-microservices-4j12</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Microservices is an architectural style that structures an application as a collection of services that are loosely coupled, highly maintainable, pluggable, and owned by small teams based on services.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Microservice architecture helps you in scaling your complex application, deploy services independently, rapid delivery of new features, and fully testable. Around microservice-based architecture, we are also able to utilize diverse tech stacks. So before starting out with your next Microservice application, you need to keep one important term in mind, i.e. Messaging Queue.&lt;br&gt;
A message queue is a form of asynchronous inter-service communication. Messages are stored on the queue until they are processed and deleted. Each message is processed only once, by a single consumer. Message queues can be used to decouple heavyweight processing, to buffer or batch work, and to smooth spiky workloads. Common messaging tools are Kafka, RabbitMQ, AWS SQS.&lt;br&gt;
Let dive into Messaging queue and learn why do we need them in a Microservice architecture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#message-queue"&gt;
  &lt;/a&gt;
  Message Queue
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EOUm9TCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz8u39fgmotb1owo60h3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EOUm9TCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz8u39fgmotb1owo60h3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A message queue is a queue of messages sent between services/applications. A message is some information that is produced by a producer application in byte form, stored in a queue and is consumed by a consumer application.&lt;br&gt;
The best thing about a message queue is even when some service is offline, the message queue preserves the message in the queue and can be retrieved by the consumer.&lt;/p&gt;

&lt;p&gt;Let’s say we have a Digital Signing service SignMe. With SignMe we enable organizations to send documents to people for electronic signatures. Once someone creates a document and has to send it for signature, they need to add recipients. Now to inform recipients, we need to send them an email. We also need to send recipients a reminder to sign the documents if they forget to sign after x days. Let’s think of some approach where we can send emails to the recipients.&lt;/p&gt;

&lt;p&gt;There is one service where a sender goes and creates a template, adds recipients, and sends the envelope for signature. There is another notification service that sends the recipient notifications as email or push notifications. We want to send emails to end recipients with the help of messaging queue.&lt;/p&gt;

&lt;p&gt;We can either have a rest synchronous architecture, where we have an external call to notification service and wait for the response, or an asynchronous messaging queue.&lt;br&gt;
Synchronous call to notification service will block the current thread until the request is resolved and for any failure in the service, it will give an exception and we will lose the current process. If the goal is to support a few hundreds or thousands of users, then a simple rest synchronous architecture will be a good choice to go with.&lt;br&gt;
However, when we talk of large-scale applications where tens of thousands of requests are created, we need to use the Messaging queue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To send emails, how can we do it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our Envelope Sending service will be a publisher which pushes these notification actions to some topic of messaging queue and, respond back to the users. So once we write the message to the queue, the notification service which acts as a consumer can read messages from the queue and, process them asynchronously.&lt;br&gt;
So this is how we can achieve high reliability, scalability, and true decoupling. In certain scenarios when our dependency services are down, we still have the messages stored safely with us in the queue which we can retrieve later. Wonderful, right? Let me know your thoughts in the comments.&lt;/p&gt;

</description>
      <category>eventdriven</category>
      <category>microservices</category>
      <category>architecture</category>
      <category>distributedsystems</category>
    </item>
    <item>
      <title>Docker vs Kubernetes, which should I use?</title>
      <author>Kapil Pau</author>
      <pubDate>Tue, 27 Apr 2021 19:34:54 +0000</pubDate>
      <link>https://dev.to/kapilpau/docker-vs-kubernetes-which-should-i-use-3pdm</link>
      <guid>https://dev.to/kapilpau/docker-vs-kubernetes-which-should-i-use-3pdm</guid>
      <description>&lt;p&gt;Ok before going any further with this blog, I have to confess something. The title is a bit catfishy but it's a question I see a lot online so hopefully I will be able to answer it for anyone who has thought about it.&lt;/p&gt;

&lt;p&gt;Let me start by initially defining what they both are.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U8SytWYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/markdium-image/ce18f9b86926532554815781e804aeae" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U8SytWYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/markdium-image/ce18f9b86926532554815781e804aeae" alt="Docker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  Docker
&lt;/h2&gt;

&lt;p&gt;Docker is a type of containerisation technology which allows for standardisation of packaging and shipping of products. Containers, as with Virtual Machines, run a virtual computer within your computer, however, unlike VMs, which run in parallel with the host OS and isolate resources, containers run within the host OS and are therefore much smaller, lightweight and quicker to spin up.&lt;/p&gt;

&lt;p&gt;As with a traditional VM, containers are spun up using an image and that image contains the OS and the applications and libraries required for the container to perform whatever task is needed. Images are created using Dockerfiles, which contain a number of steps for the Docker engine to complete in order to build the image.&lt;/p&gt;

&lt;p&gt;Docker images are typically in the 100s of MB in size and are stored in registries. Registries can be public or private, depending on the sensitivity of the images, and can be self-hosted or 3rd party hosted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IWl-eZGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/markdium-image/f38ddf466fae5285cf9b84bffe6db9d8" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IWl-eZGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/markdium-image/f38ddf466fae5285cf9b84bffe6db9d8" alt="Kube"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kubernetes"&gt;
  &lt;/a&gt;
  Kubernetes
&lt;/h2&gt;

&lt;p&gt;Kubernetes is the industry standard container orchestration system, this is where you'll start to work out why the title is catfishy. A container orchestration tool manages the deployment, networking, availability and scaling on containers and services.&lt;/p&gt;

&lt;p&gt;Kubernetes, often referred to as kube or k8s, is a service every cloud provider provides, with some providing their own custom Kubernetes services, like Google Kubernetes Engine (GKE) or RedHat's OpenShift Container Platform (OCP).&lt;/p&gt;

&lt;p&gt;Kubernetes allows users to decoratively deploy their applications by telling Kubernetes what they want and letting the engine handle the deployment, maintenance and upgrade. This is done through the creation of a YAML representation of resources. The resources can be for deployment of containers, network and DNS management or auto-scalers for their deployments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zpUcGjOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/markdium-image/823830ef7edd88c9569048c94bc628e8" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zpUcGjOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/markdium-image/823830ef7edd88c9569048c94bc628e8" alt="Decisions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-should-i%C2%A0use"&gt;
  &lt;/a&gt;
  Which should I use?
&lt;/h2&gt;

&lt;p&gt;The key aspect at the heart of this question is that it's a false dilemma, it's not necessarily a question of &lt;em&gt;"or"&lt;/em&gt;, because one is fundamentally dependant upon the other. Kubernetes is a tool for augmenting containers, of which Docker is the industry standard. You can have Docker without Kubernetes, but not the other way round.&lt;/p&gt;

&lt;p&gt;There are lots of use-cases where Docker will do the job needed, and Kubernetes is over-kill. A Kubernetes cluster requires as least two computers, or nodes, to run and, generally, requires more maintenance than a normal server. If you don't have multiple microservices which need inter-connectivity and only want one instance of your container running, then running containers natively in Docker will suffice. Using the &lt;code&gt;--restart&lt;/code&gt; flag when starting the container will achieve the same results as a Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;On the flip side, if you are running a number of microservices, with a service mesh, and require high availability and firewalls, then Kubernetes will simplify this and require very little infrastructure knowledge. The number of required nodes for a Kubernetes cluster means that they will cost more than just using Docker natively, and if you want someone to manage the infrastructure for you, it will drive the cost up even more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  tl;dr
&lt;/h2&gt;

&lt;p&gt;If you have a large, multi-microservice, production application, I'd advise Kubernetes.&lt;/p&gt;

&lt;p&gt;If you are only using one or two containers, with limited communication between them, you should be fine with native Docker.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>docker</category>
      <category>devops</category>
      <category>cloud</category>
    </item>
    <item>
      <title>AI &amp;amp; JavaScript with TensorFlow.js</title>
      <author>Gant ℒ𝒶𝒷ℴ𝓇𝒹ℯ </author>
      <pubDate>Tue, 27 Apr 2021 19:20:54 +0000</pubDate>
      <link>https://dev.to/aws-builders/ai-amp-javascript-with-tensorflow-js-40ae</link>
      <guid>https://dev.to/aws-builders/ai-amp-javascript-with-tensorflow-js-40ae</guid>
      <description>&lt;p&gt;I've been having a blast with AI for years, and the pace keeps accelerating.  &lt;/p&gt;

&lt;p&gt;I can't wait for every code newbie to be able to build the future with AI and JS.  Here's a lil blog post on my current vibe with ML in JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhWAyFV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abaccujjvdclhh8mm9mc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhWAyFV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abaccujjvdclhh8mm9mc.gif" alt="Rock Paper Scissors TensorFlow.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I keep getting invited to conferences and meeting new people who are surprised that this tech is real.  After one talk, they see how to apply TensorFlow.js in new ways and products.&lt;/p&gt;

&lt;p&gt;The web applications are numerous!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VnHAL8NW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4vbq6kfz5gvcumldbct.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VnHAL8NW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4vbq6kfz5gvcumldbct.gif" alt="Enjoying The Show Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ALSO: I'm proud to mention I'll be featured on a @ReactNativeRdio episode where I'll talk about the cool stuff in JS mobile dev.  Episode dropping soon!&lt;br&gt;
&lt;a href="https://reactnativeradio.com/"&gt;https://reactnativeradio.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It reminds me of that time on stage when I did AI in React Native live!  I still smile every time I watch this video.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/GantLaborde/status/1037684497834287108"&gt;NicOrNot Stage Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eLQuzP-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p1zksl2hlk6t4cuy4z0.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eLQuzP-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p1zksl2hlk6t4cuy4z0.JPG" alt="Nic or Not website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The truth is people who code are unleashed when they learn what they can do.  That's why we've lead Open Source in TensorFlow JS.  &lt;/p&gt;

&lt;p&gt;We've created libraries that improve quality of life for everyone, and made it free.  NSFWJS is used around the world and has 4.5k stars.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nsfwjs.com/"&gt;https://nsfwjs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BmnAnKwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xakj9y4kkl5bppf2rkws.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BmnAnKwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xakj9y4kkl5bppf2rkws.jpg" alt="NSFWJS Site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But computer vision can be complex to a new Front-End dev, so it's also important to know when to be fun, too.  Hopefully, there's enough Trekkie &amp;amp; Harry Potter Nerds to make my poorly drawn examples make sense&lt;br&gt;
&lt;a href="http://aisortinghat.com/"&gt;http://aisortinghat.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NB-aiYTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h17zsw3yajcyajsw6mhc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NB-aiYTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h17zsw3yajcyajsw6mhc.png" alt="Harry Potter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're into Web Development then I highly recommend you watch &lt;br&gt;
@jason_mayes on twitter.&lt;br&gt;
He runs the TensorFlow.js show and tell videos on YouTube.&lt;/p&gt;

&lt;p&gt;Or at the very least subscribe to his #MadeWithTFJS hashtag and see your fellow devs create&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NLLjy83i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55np0kt18koa8o8eyg8c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NLLjy83i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55np0kt18koa8o8eyg8c.jpg" alt="Jason Mayes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly, my book by O'Reilly Media is in Quality Check 2, which means you can pre-order it on Amazon, so you can invest in you and your team's education.  &lt;/p&gt;

&lt;p&gt;It won't be long before every JavaScript Developer is wielding Deep Learning.&lt;/p&gt;

&lt;p&gt;Get the Book: &lt;a href="https://amzn.to/3dR3vpY"&gt;https://amzn.to/3dR3vpY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3dR3vpY"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1veEkKRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4tcz9rm4pgdezbau4is.jpg" alt="learning TensorFlow.js"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tensorflow</category>
      <category>tensorflowjs</category>
      <category>ai</category>
      <category>javascript</category>
    </item>
    <item>
      <title>My journey as an AWS Community Builder so far</title>
      <author>Ibrahim Cesar</author>
      <pubDate>Tue, 27 Apr 2021 19:17:03 +0000</pubDate>
      <link>https://dev.to/aws-builders/my-journey-as-an-aws-community-builder-so-far-14n8</link>
      <guid>https://dev.to/aws-builders/my-journey-as-an-aws-community-builder-so-far-14n8</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Hi there. You’ve made it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was with this simple opening, James Dunn, the AWS Community Builders Program Manager made my day. Well, my night in fact, it was October 16, almost 10pm. After the initial rush of joy, the impostor syndrome kicks in—as if Jason was reading my mind this sentence came: &lt;em&gt;You’re exactly the kind of person we’re looking for&lt;/em&gt;. I felt welcomed. Being part of this community has been such an incredible gift. Now, after 6 months I looked back in my journey so far and can say without a doubt how my growth as a cloud professional was boosted by and from the community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-great-flood-of-linkedin-contacts"&gt;
  &lt;/a&gt;
  The Great Flood of LinkedIn Contacts
&lt;/h2&gt;

&lt;p&gt;After the welcome calls, the “Community Builder” started to materially, so to speak. We put on our LinkedIn and Twitter bios and used our organization, this very yours here in Dev.to and identified ourselves with logos, cover images.&lt;/p&gt;

&lt;p&gt;This lead to we followed each other in several networks, but in LinkedIn was a Great Flood. In the early days were dozens and dozens of invites. Some people felt overwhelmed. For me, I can see, even is not a “business contact” or I fully know the person, I can say I enriched for sure my feed. In Brazil, the usual LinkedIn content is “fell good” or “hustle” stories or success cases. Then, I got content—great content from several aspects of the cloud.&lt;/p&gt;

&lt;p&gt;I think I could found a quality in the quantity of new contacts of LinkedIn because we share somebody of knowledge, challenges and information we find relevant and common topics. That’s what’s makes a community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#random-acts-of-kindness"&gt;
  &lt;/a&gt;
  Random acts of kindness
&lt;/h2&gt;

&lt;p&gt;Be a community builder can be also somewhat be a full-time job. As part of Amplify’s Discord, and with a “Community Badge” after interacting within one or another thread, people just popped from nowhere, sometimes without &lt;em&gt;any&lt;/em&gt; context, asking for my help, sometimes with code snippets and in frameworks and didn’t have any knowledge.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZdTa0hI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ils2y7w4oub507rzha8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZdTa0hI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ils2y7w4oub507rzha8.png" alt="Random requests"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My first approach was to treat this as “random acts of kindness”—I was once and I’m very often in the web looking for answers, what I can help just happened of I’ve seem that before. I would help as much as I could and I even got surprised by helping people in frameworks I don’t have any leverage. &lt;em&gt;What&lt;/em&gt;—the snarky voice in my head says (and now writing in English, sounds exactly like &lt;a href="https://twitter.com/quinnypig"&gt;Corey Quinn’s&lt;/a&gt;—&lt;em&gt;you are doing unpaid job and loving it&lt;/em&gt;. Yes, that’s right. First, I volunteer. Second, my daily job is to help developers understand better their contexts and tools and doing this kind of invisible, no glamour job, makes me feel giving back to community as much as community gave to me. Every npm we download to our &lt;em&gt;node_modules&lt;/em&gt; there're a person and a chunk of that person’s hours and life there. Most of the time I just point a way and people find themselves. And not one doesn’t say thanks until now (Side note: I can &lt;em&gt;barely&lt;/em&gt; imagine what could be the life of an &lt;em&gt;AWS hero&lt;/em&gt;! If I, receive one or two per week of these, in several platforms: by email (I think they find through my LinkedIn or GitHub), Twitter or Discord, imagine they, with a much bigger platform and role). I grow helping others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tupi-or-not-tupi"&gt;
  &lt;/a&gt;
  Tupi or not tupi?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Tupi_people"&gt;Tupi people&lt;/a&gt; were one of the most many peoples indigenous to Brazil, before colonisation—and then, you know, the genocide happened and their lands became a country. But Tupi is sort of “Brazilian stamp” and it happens to sounds close enough of “To be” and it was created by the Brazilian poet Oswald de Andrade in his 1928’s Manifesto Antropofágico, or &lt;a href="https://en.wikipedia.org/wiki/Manifesto_Antrop%C3%B3fago"&gt;Anthropophagic Manifesto&lt;/a&gt;. Earlier this year I made &lt;a href="https://ibrahimcesar.cloud/blog/tupi-or-not-tupi/"&gt;a post with this phrase as title on my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Very simple example, &lt;code&gt;data&lt;/code&gt; in Brazilian Portuguese is &lt;code&gt;date&lt;/code&gt; in English. It looks little but &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;date&lt;/code&gt; are so ubiquitous in programming, be front or backend that is easy to find someone confusing the terms or using one meaning to another and so on, because of the cognitive dissonance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.infoq.com/"&gt;InfoQ&lt;/a&gt;, a software development news outlet has a Brazilian version that &lt;a href="https://www.infoq.com/br/news/2021/02/ultimo-conteudo-do-infoq-brasil/"&gt;published its last Brazilian Portuguese content in February 2021&lt;/a&gt;. This was the reason, in my attempt to “translate”:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In these 12 years a lot has changed too. And one of the many changes was that more people, in this software development market, learned English. In special this more seniority level public InfoQ Brasil target. With domain in reading English, we realized that makes little sense to these people wait weeks, months, to consume a content in Portuguese translated by us (Translator’s Note: We Brazilians just call Brazilian Portuguese as Portuguese), with the original content at a click to be accessed.&lt;/p&gt;

&lt;p&gt;We realized English domain made people to write in English, making more difficult to get original content for InfoQ Brasil, which could be a nice to have for the Brazilian market. Believe or not, in 2020 we had more Brazilian people writing original content for InfoQ in English than Brazilian people writing original content for InfoQ in Portuguese.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are a lot of incentives in play to this. The audience is bigger and, to be quite frank, there’s a &lt;em&gt;bias&lt;/em&gt; against content in Portuguese in relation to a content in English. I know this because &lt;em&gt;I&lt;/em&gt; have this bias, even writing original pieces in Portuguese for my blog, and committed to do so.&lt;/p&gt;

&lt;p&gt;There are Brazilians developers that choose to do their total online presence in English, I don’t like the idea. It’s like had to act with an online persona than what I am – a Brazilian developer in an interconnected World where English is on programming languages and the language where the most important conversations and discussions happen. I was afraid to even publish something other than my mother's language. Besides self taught programmer, I’m self taught in English as well. To find your “voice” even in your language is very difficult, is a process that you start by emulating others until you feel more comfortable, find your “voice” in another language is really &lt;em&gt;really&lt;/em&gt; difficult. And this was an issue because I didn’t want to create lists of things or just write for the sake of publish something in English. Then, inspired by a &lt;a href="https://offbynone.io/new-serverless-writers/"&gt;promotion to first-time serverless writers&lt;/a&gt; from Serverless &lt;code&gt;Super&lt;/code&gt;Hero Jeremy Daly’s &lt;a href="https://offbynone.io/"&gt;off-by-none&lt;/a&gt; I published:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ibrahimcesar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kfkWRBf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0zkQIbKi--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/189167/695f3dd9-b865-4c57-a097-5cfe07cca488.jpg" alt="ibrahimcesar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/serverless-transformation-on-a-news-media-outlet-in-brazil-3ed9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Serverless Transformation on a news media outlet in Brazil&lt;/h2&gt;
      &lt;h3&gt;Ibrahim Cesar ・ Nov 28 '20 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#braziliandevs&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Which was a written version of a &lt;a href="https://www.youtube.com/watch?v=icUhsz5OUCU&amp;amp;t=4150s"&gt;talk I gave at Serverless Week 2020&lt;/a&gt; from AWS User Groups here in Brazil which was my first talk about anything Cloud. Here on dev.to and shut down the internet for the day and I ran to hide myself under the covers. I won one of tickets and the &lt;a href="https://www.stephaniemorillo.co/product-page/the-developer-s-guide-to-content-creation"&gt;The Developer’s Guide to Content Creation&lt;/a&gt; gave a lot of insights on how to produce better content. I had this article for so much time in my draft and then... I got feedback. People came to talk to me.&lt;/p&gt;

&lt;p&gt;Regarding the choice “Tupi or not tupi?” my approach is not to choose. I tweet both in English and Brazilian Portuguese, use my personal blog for posts in my primary language and dev.to posts for content in English. There’s a lot of work to be done in Brazilian Portuguese to help educate and bring to teach people who lack the opportunities to learn and develop their English skills. And I’m committed to help my peers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-heard-and-listen"&gt;
  &lt;/a&gt;
  Be heard, and listen
&lt;/h2&gt;

&lt;p&gt;After that, I publish some post after, both in English and Portuguese. Engaged in some courses and the talks from AWS Community Builders help so so much. I have a tremendous respect for all Developer Advocates from AWS, and there are so many, but &lt;a href="https://aws.amazon.com/pt/blogs/compute/author/jbeswick/"&gt;James Beswick&lt;/a&gt; help me a lot with all his great content. He motivated me to explore more of my writing. So, I worked on a long form piece I was thinking a lot about in the space of serverless. At the same time,  &lt;a href="https://thedevconf.com/tdc/2021/innovation/trilha-stadium-quinta"&gt;The Developers Conference Innovation&lt;/a&gt; accepted a talk addressing the same subject only in a form of a question instead of an assertion: &lt;a href="https://ibrahimcesar.cloud/talks/2021-03-25-serverless-pronto/"&gt;“Serverless is Ready? We, Developers, are not”&lt;/a&gt;, so my focus was more on the side of make a case for Serverless readiness. So, for the first time I spoke at a large audience and held the honor to present myself as “AWS Community Builder”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d4zmmXxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qd1lsk6td4tf0qkr1cf1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d4zmmXxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qd1lsk6td4tf0qkr1cf1.png" alt="About me"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that I published the piece on a lot of concepts and shifts in industry I was dealing and trying to navigate on my daily work experience:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ibrahimcesar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kfkWRBf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0zkQIbKi--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/189167/695f3dd9-b865-4c57-a097-5cfe07cca488.jpg" alt="ibrahimcesar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/serverless-is-ready-developers-are-not-12f9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Serverless is Ready, Developers Are Not&lt;/h2&gt;
      &lt;h3&gt;Ibrahim Cesar ・ Mar 28 ・ 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#development&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;I know I will sound a totally fanboy, but I was exploding in joy with the reception. They cited me in my favorite readings on serverless: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://offbynone.io/"&gt;Off-by-none&lt;/a&gt;, &lt;em&gt;two&lt;/em&gt; times. I almost cried 🥲 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aENnbi1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wehew8m1vjjvgyvodddv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aENnbi1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wehew8m1vjjvgyvodddv.jpeg" alt="off by none"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MHwg4XQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9v7690ix7fcdt9potoyn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MHwg4XQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9v7690ix7fcdt9potoyn.jpeg" alt="off by none"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The awesome &lt;a href="https://serverless.email/"&gt;Serverless Status&lt;/a&gt; from Cooperpress:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jj_DyUoF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndvyxsf130uqheoifbmt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jj_DyUoF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndvyxsf130uqheoifbmt.png" alt="Serverless Status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And&lt;/em&gt; &lt;a href="https://www.getrevue.co/profile/serverless-transformation"&gt;Serverless Transformation&lt;/a&gt; - by Theodo. You can see that even my first post in English. how much they influenced me.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--06QIQa9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xz2ger725xnyf2i9o6bk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--06QIQa9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xz2ger725xnyf2i9o6bk.png" alt="Serverless Transformation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I could not believe! I got featured on my own &lt;em&gt;Big Three&lt;/em&gt; source of news for serverless and resonate with people I respect from the community.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8kRIIcqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1123535071674281985/00Gp5S5c_normal.png" alt="Sheen Brisals profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Sheen Brisals
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/sheenbrisals"&gt;@sheenbrisals&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Nice read👇 &lt;a href="https://twitter.com/ibrahimcesar"&gt;@ibrahimcesar&lt;/a&gt; 👏&lt;br&gt;&lt;br&gt;My take is, "&lt;a href="https://twitter.com/hashtag/Serverless"&gt;#Serverless&lt;/a&gt; is ready. Developers are ready. Organisations are not."&lt;br&gt;&lt;br&gt;Often organisations are cast with the 'evil spell of fear' by traditional thinkers. Lock-in, agnostic, etc., spins them and slows their progress. &lt;a href="https://t.co/wJXoStoAJF"&gt;twitter.com/ibrahimcesar/s…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:51 PM - 30 Mar 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Ibrahim Cesar
          &lt;/span&gt;
          &lt;a class="mentioned-user" href="https://dev.to/ibrahimcesar"&gt;@ibrahimcesar&lt;/a&gt;

        &lt;/div&gt;
        Inspired by &lt;a class="mentioned-user" href="https://dev.to/andrewbrown"&gt;@andrewbrown&lt;/a&gt;
 I started to think a lot about his phrase "Serverless is Ready, Developers Are Not", so I wrote this post on &lt;a class="mentioned-user" href="https://dev.to/thepracticaldev"&gt;@thepracticaldev&lt;/a&gt;
 #serverless #serverlessforeveryone #awscommunity https://t.co/hLEJFBI8uy
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1376985471943852040" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1376985471943852040" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1376985471943852040" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I felt &lt;em&gt;I existed&lt;/em&gt; out there; you know? I could make an impact and not only listen but speak. Heard. Dialog. Interchange experiences. Grow together.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--BYKpqSIQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1315542552720932865/AYvPQ8RA_normal.jpg" alt="Lou ☁️ 👨‍💻🏋️‍♂️🎸🚴🏻‍♂️🏍 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Lou ☁️ 👨‍💻🏋️‍♂️🎸🚴🏻‍♂️🏍
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/loujaybee"&gt;@loujaybee&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      "Serverless is Ready, Developers Are Not". &lt;br&gt;&lt;br&gt;Serverless isn't simple. &lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/ibrahimcesar"&gt;@ibrahimcesar&lt;/a&gt; put into words something I've been thinking about for a while. When I see just "create a Lambda" in the AWS docs I wince because... it's not that simple. &lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/JiBlcNLgBT"&gt;buff.ly/39tGzdn&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:52 AM - 31 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1377166778619457541" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1377166778619457541" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1377166778619457541" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#technology-is-political-and-be-part-of-a-community-is-political-too"&gt;
  &lt;/a&gt;
  Technology &lt;em&gt;is&lt;/em&gt; political. And be part of a community is political &lt;em&gt;too&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;“Political” is for some people like a “reserved” word we can’t use in certain contexts or at all in tech. I think is misled, confusing partisan with political. Politics is the set of activities that are associated with deciding in groups, or other forms of power relations between individuals, such as the distribution of resources or status. A technology is a tool that is used by people for some purpose, usually to further their own interests in a society comprising other people. That makes it political.&lt;/p&gt;

&lt;p&gt;So being part of the AWS Community Builders gave so much: a “place” to feel welcomed, peers I admire, access to so much content and people that I can learn a lot (and for Brazilians, right now, courses or anything paid in dollar is very difficult—A financial benefit I got from the program was a free voucher to the Solutions Architect exam - which I passed last February). And even without any coordination I was fortunate enough to appear in &lt;a href="https://aws.amazon.com/pt/blogs/startups/news-startup-nexo-runs-a-lean-tech-team-by-leveraging-aws-and-amplify/"&gt;AWS Startups on my birthday&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Even when you feel cannot make a difference as an individual, you can still make a difference in a group. I expect to be giving as much as I’m receiving as an AWS Community Builder.&lt;/p&gt;

&lt;p&gt;A great thank you, James Dunn and Elise Greve! You made the difference for me! I hope others along the way!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jznaMPcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fwcoasgcnrq7vm3spda.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jznaMPcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fwcoasgcnrq7vm3spda.png" alt="AWS Community Builders"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Hello, thanks for reaching the end! I also do some open source work. If you use AWS Lambdas and the outstanding Middy, I made a middleware to validate reCAPTCHA tokens:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ibrahimcesar"&gt;
        ibrahimcesar
      &lt;/a&gt; / &lt;a href="https://github.com/ibrahimcesar/middy-recaptcha"&gt;
        middy-recaptcha
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🛵 🔐 reCAPTCHA validation Middy middleware for yours AWS Lambdas
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt; &lt;div&gt;
  &lt;h1&gt;
🛵 🔐  reCAPTCHA Middleware for Middy&lt;/h1&gt;
  &lt;blockquote&gt;reCAPTCHA validation Middy middleware for yours AWS Lambdas&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/ellerbrock/typescript-badges/"&gt;&lt;img src="https://camo.githubusercontent.com/1d1f56c37cf5dfd1b9c3782a8d1d6fe07f8764e8c35f53ec90460e5b38cd8f7d/68747470733a2f2f6261646765732e66726170736f66742e636f6d2f747970657363726970742f636f64652f747970657363726970742e7376673f763d313031" alt="TypeScript"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/middy-recaptcha" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9d4c732b30594cf690ba9c3a7b624baebb995f24f4b6b172d1ce76ce28370ffe/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6d696464792d7265636170746368613f6c6162656c3d6c617465737425323076657273696f6e" alt="Version"&gt;&lt;/a&gt;   &lt;a href="https://raw.githubusercontent.com/ibrahimcesar/middy-recaptcha/main/./LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/4ae491794898f1c8830ef048ef6895f1f18f24155edd8f3145732959fcb86bd1/68747470733a2f2f62616467656e2e6e65742f6769746875622f6c6963656e73652f6962726168696d63657361722f6d696464792d726563617074636861" alt="License"&gt;&lt;/a&gt;   &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9976d742c6544286ed280b9dc4827aea036b80039fb4d3710d96c4c170b6746c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6962726168696d63657361722f6d696464792d7265636170746368612f627567"&gt;&lt;img src="https://camo.githubusercontent.com/9976d742c6544286ed280b9dc4827aea036b80039fb4d3710d96c4c170b6746c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6962726168696d63657361722f6d696464792d7265636170746368612f627567" alt="GitHub issues by-label"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Developed in 🇧🇷 &lt;span&gt;Brazil&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;
🛵 What it does&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://middy.js.org/" rel="nofollow"&gt;Middy&lt;/a&gt; is a very simple middleware engine that allows you to simplify your AWS Lambda code when using Node.js. As I always had to implement and reimplement this type of logic, I decide to wrap up and give back tcommunity middleware for that validates a reCAPTCHA token in the body of a &lt;code&gt;POST&lt;/code&gt; request.&lt;/p&gt;
&lt;h3&gt;
What is Middy&lt;/h3&gt;
&lt;p&gt;From the docs:&lt;/p&gt;
&lt;p&gt;If you have used web frameworks like Express, then you will be familiar with the concepts adopted in Middy and you will be able to get started very quickly.&lt;/p&gt;
&lt;p&gt;A middleware engine allows you to focus on the strict business logic of your Lambda and then attach additional common elements like authentication, authorization, validation, serialization, etc. in a modular and reusable way by decorating the main business logic.&lt;/p&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ibrahimcesar/middy-recaptcha"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Thanks for reading. Please leave your thoughts, takes and insights in the comments!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>community</category>
    </item>
    <item>
      <title>Awesome Forms with Solidjs</title>
      <author>John Carroll</author>
      <pubDate>Tue, 27 Apr 2021 18:56:15 +0000</pubDate>
      <link>https://dev.to/johncarroll/awesome-forms-with-solidjs-18gi</link>
      <guid>https://dev.to/johncarroll/awesome-forms-with-solidjs-18gi</guid>
      <description>&lt;p&gt;I recently started falling in love with &lt;a href="https://github.com/solidui/solid"&gt;Solidjs&lt;/a&gt;, a javascript library that looks like React but is significantly faster and, dare I say, has a notably better API. Unlike React, Solidjs component functions are invoked only once when the component is initialized and then never again.&lt;/p&gt;

&lt;p&gt;I decided to take advantage of Solidjs' strengths, and build a 9kb min zipped library to aid with user input forms: &lt;a href="https://gitlab.com/john.carroll.p/rx-controls"&gt;rx-controls-solid&lt;/a&gt;. Let's dive in and see what we can do (note, if you want an introduction to Solidjs, &lt;a href="https://dev.to/ryansolid/introducing-the-solidjs-ui-library-4mck"&gt;start here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Let's create a simple &lt;code&gt;TextField&lt;/code&gt; component in typescript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;withControl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rx-controls-solid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TextField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withControl&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// prop.control is static for the lifetime of the component&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'input-label'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;oninput&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markDirty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onblur&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markTouched&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This component tracks whether it has been &lt;code&gt;touched&lt;/code&gt; by a user (notice &lt;code&gt;onblur&lt;/code&gt; callback) and whether it has been changed by a user (&lt;code&gt;oninput&lt;/code&gt;). When a user changes the value, we mark the control as &lt;code&gt;dirty&lt;/code&gt;. We also have the ability to set a label on the input as well as a placeholder. Pretty straightforward stuff.&lt;/p&gt;

&lt;p&gt;But text field's are &lt;em&gt;rarely&lt;/em&gt; used in isolation. We want to build a component to collect some address information. This will involve asking for a &lt;code&gt;Street&lt;/code&gt;, &lt;code&gt;City&lt;/code&gt;, &lt;code&gt;State&lt;/code&gt;, and &lt;code&gt;Postcode&lt;/code&gt;. Lets use our &lt;code&gt;TextField&lt;/code&gt; component to create our &lt;code&gt;AddressForm&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;withControl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FormGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rx-controls-solid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;toSignal&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controlFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormGroup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AddressForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withControl&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;controlFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isControlValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isControlTouched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;touched&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isControlDirty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dirty&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;fieldset&lt;/span&gt; &lt;span class="na"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;is-valid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isControlValid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;is-invalid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isControlValid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;is-touched&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isControlTouched&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;is-untouched&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isControlTouched&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;is-dirty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isControlDirty&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;is-clean&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isControlDirty&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Street"&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"street"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"City"&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"city"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"State"&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"state"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Postcode"&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"zip"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;fieldset&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the address form, itself, is also wrapped &lt;code&gt;withControl()&lt;/code&gt;. This allows the &lt;code&gt;AddressForm&lt;/code&gt; to also be used as a form component in a larger parent form.&lt;/p&gt;

&lt;p&gt;We want our &lt;code&gt;AddressForm&lt;/code&gt; to use a &lt;code&gt;FormGroup&lt;/code&gt; control rather than the default &lt;code&gt;FormControl&lt;/code&gt; so we provide a &lt;code&gt;controlFactory&lt;/code&gt; function which initializes the control.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controlFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormGroup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AddressForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withControl&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;controlFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isControlValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="c1"&gt;// continued...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we needed to do to connect our AddressForm control to the &lt;code&gt;TextField's&lt;/code&gt; control was to use the &lt;code&gt;controlName="street"&lt;/code&gt; property to specify which FormControl on the parent should be connected with the child TextField.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Street"&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"street"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"City"&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"city"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also set the component up to apply css classes based on if the &lt;code&gt;AddressForm&lt;/code&gt; is valid/invalid, edited/unedit, and touched/untouched. There's actually a helper function to make applying css classes really easy, but for the sake of education I didn't use it for this example.&lt;/p&gt;

&lt;p&gt;Say we want to hook our AddressForm component into a larger form. That's also easy!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyLargerForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withControl&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;controlFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormGroup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormGroup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;street&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;        
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// because we can&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastNameControl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;fieldset&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"First name"&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"firstName"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Last name"&lt;/span&gt; &lt;span class="na"&gt;control&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;lastNameControl&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;fieldset&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AddressForm&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"address"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, with just a few steps, we have a very powerful, very composible set of form components. As changes happen to the &lt;code&gt;TextField&lt;/code&gt; components, those changes flow upwards and automatically update the parent &lt;code&gt;FormGroup&lt;/code&gt; components.&lt;/p&gt;

&lt;p&gt;We can easily listen to any of these changes and respond to them via the parent.&lt;/p&gt;

&lt;p&gt;For example, to listen to when any part of the form is touched, we can simply subscribe to &lt;code&gt;touched&lt;/code&gt; property state/changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;touched&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To listen to when the "firstName" control, specifically, is touched&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this is similar to control.controls.firstName.touched&lt;/span&gt;
&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;controls&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;touched&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// or&lt;/span&gt;
&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;touched&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a more complex, advanced example: if we want to listen for value changes, debounce the rate of changes, perform validation, and mark the &lt;code&gt;control&lt;/code&gt; as pending while we wait for validation to complete, we can do the following. Note, when we set errors on the &lt;code&gt;firstName&lt;/code&gt; control, that will result in the "First name" &lt;code&gt;TextField&lt;/code&gt;  being marked as invalid (score!).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;switchMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;myCustomValidationService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./my-validation-service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyLargerForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withControl&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// ...hiding the controlFactory boilerplate...&lt;/span&gt;
  &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markPending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="nx"&gt;switchMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;switchMap&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;myCustomValidationService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markPending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setErrors&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;validationFailed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setErrors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onsubmit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pending&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invalid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;// do stuff...&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;onCleanup&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;onsubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onsubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;fieldset&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"First name"&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"firstName"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Last name"&lt;/span&gt; &lt;span class="na"&gt;control&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;lastNameControl&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;fieldset&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AddressForm&lt;/span&gt; &lt;span class="na"&gt;controlName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"address"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is really just scratching the surface of what you can do with &lt;code&gt;rx-controls-solid&lt;/code&gt;. I don't have much in the way of documentation at this point, but you can play around with the library using &lt;a href="https://codesandbox.io/s/rxcontrols-solid-blog-example-4sh0x?file=index.tsx"&gt;this codesandbox&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-out-the-repo"&gt;
  &lt;/a&gt;
  Check out the repo
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/john.carroll.p/rx-controls"&gt;https://gitlab.com/john.carroll.p/rx-controls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>solidjs</category>
      <category>rxjs</category>
      <category>forms</category>
      <category>githunt</category>
    </item>
    <item>
      <title>Dicas para criar componentes mais legíveis</title>
      <author>Nilton Lopes</author>
      <pubDate>Tue, 27 Apr 2021 18:48:41 +0000</pubDate>
      <link>https://dev.to/pixelwolfhq/dicas-para-criar-componentes-mais-legiveis-336c</link>
      <guid>https://dev.to/pixelwolfhq/dicas-para-criar-componentes-mais-legiveis-336c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#o-problema"&gt;
  &lt;/a&gt;
  O problema
&lt;/h1&gt;

&lt;p&gt;Uma das minhas maiores dores no desenvolvimento de aplicações front-end é quando abro um componente desenvolvido por um colega (ou por mim mesmo 😅) e vejo que este possui 2 mil linhas em um único arquivo. Para mim isso é ruim, pois demoro para conseguir entender o que de fato todas aquelas linhas fazem - isso quando eu entendo. Então torna-se necessário desprender de uma quantidade x de tempo para ir lendo tudo até fazer, de fato, o eu precisava inicialmente. Para resolver ou, pelo menos, amenizar esse problema existem algumas técnicas que podem ser utilizadas e é sobre isso que venho tratar aqui.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-velho-e-o-novo-testamento"&gt;
  &lt;/a&gt;
  O velho e o novo testamento
&lt;/h2&gt;

&lt;p&gt;Como já citei anteriormente, às vezes, no nosso dia a dia de desenvolvimento acabamos deixando um componente tão grande que caberiam 2 bíblias dentro dele 🤣.&lt;/p&gt;

&lt;p&gt;Para citar alguns dos problemas do arquivo desse tamanho seria:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dificuldade-na-legibilidade-da-p%C3%A1gina"&gt;
  &lt;/a&gt;
  Dificuldade na legibilidade da página
&lt;/h3&gt;

&lt;p&gt;Com arquivos muito grandes o processo de leitura acaba demorando mais e, por consequência, o entendimento também. Demora-se mais tempo para conseguir entender o que cada método, função ou trecho de código executa e quando executa.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#baixa-manutenibilidade"&gt;
  &lt;/a&gt;
  Baixa manutenibilidade
&lt;/h3&gt;

&lt;p&gt;É comum ver que nesses tipos arquivos há uma grande dependência de pedaços diferentes do código. Desta forma, se você precisa alterar um trecho X ele pode afetar algum outro trecho indesejado.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alta-possibilidade-de-c%C3%B3digo-duplicado"&gt;
  &lt;/a&gt;
  Alta possibilidade de código duplicado
&lt;/h3&gt;

&lt;p&gt;Também se torna comum ver que em arquivos desse tipo há uma grande quantidade de códigos exatamente iguais ou, pelo menos, muito parecido onde uma ou outra coisa que é diferente. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coleguinha-pistola"&gt;
  &lt;/a&gt;
  Coleguinha pistola
&lt;/h3&gt;

&lt;p&gt;Ninguém gosta da sensação que se tem ao abrir um arquivo e pensar "eu não faço ideia do que tem aqui!". O seu coleguinha não gosta e você provavelmente também não. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virando-o-jogo"&gt;
  &lt;/a&gt;
  Virando o jogo
&lt;/h2&gt;

&lt;p&gt;Para virar o jogo e começar a criar componentes que sejam mais manuteníveis, fáceis de ler, aproveitar da reutilização e, não menos importante, deixar os coleguinhas mais felizes é interessante considerar algumas boas práticas enquanto estiver escrevendo seus componentes. Na internet encontramos diversos posts/artigos com diversas dicas do que pode ser feito para ter componentes mais manuteníveis e simples. Aqui não irei tratar uma especificamente, mas sim de um pedaço de cada coisa que vi e que fazem sentido para mim. Caso você tenha interesse em se aprofundar mais no assunto recomendo muito que busque por &lt;em&gt;&lt;a href="https://bradfrost.com/blog/post/atomic-web-design/"&gt;Atomic Design&lt;/a&gt;&lt;/em&gt;.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;OBS: Nos exemplos que cito abaixo estarei usando Reactjs, mas nada impede que você aplique os conceitos em outras bibliotecas/frameworks. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#componentes-gen%C3%A9ricos-reutiliz%C3%A1veis"&gt;
  &lt;/a&gt;
  Componentes genéricos reutilizáveis
&lt;/h3&gt;

&lt;p&gt;Ficar atento toda vez que começar a notar que há coisas demais se repetindo no código. Se está repetindo exatamente igual ou muito próximo disso provavelmente esse trecho de código pode virar um componente isolado.&lt;/p&gt;

&lt;p&gt;Para deixar mais sobre as coisas que se repetem, podemos tomar de exemplo coisas como: modais, botões, headers, footers, títulos, sidebars, cards, caixas de alerta e muitas outras coisas. O sistema que você está desenvolvendo pode ter esses exemplos que citei, como podem ter outros totalmente diferentes. Vai ir da sua percepção saber se aquilo que está sendo desenvolvido pode ser reutilizado por outras páginas do sistema. Se a resposta for sim, então componentize!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#componentes-espec%C3%ADficos-n%C3%A3o-reutiliz%C3%A1veis"&gt;
  &lt;/a&gt;
  Componentes específicos não reutilizáveis
&lt;/h3&gt;

&lt;p&gt;Há situações onde trechos de códigos estão se repetindo, porém, não é algo que poderá ser reutilizado em outras partes do sistema. É algo tão específico que somente aquela página terá aquela funcionalidade.&lt;/p&gt;

&lt;p&gt;Mesmo em casos assim, se a página está ficando muito grande, é interessante fazer a componentização deste trecho, porém, com uma diferença. No lugar de colocar esse componente na pasta &lt;code&gt;src/Components&lt;/code&gt; você o colocará na pasta &lt;code&gt;Components&lt;/code&gt; dentro da pasta da sua &lt;em&gt;Página&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Por exemplo, imagine que você tenha uma página de listagem de produtos no diretório &lt;code&gt;/src/Pages/ProductList/index.tsx&lt;/code&gt; e nela há um componente que não é reutilizável por outras páginas do sistema, mas que pelo tamanho que ele está ficando você deseja criar um arquivo exclusivamente para esse componente. Algo que poderia ser feito seria criar esse componente dentro de uma pasta &lt;code&gt;Components&lt;/code&gt;, com o caminho desse componente ficando assim: &lt;code&gt;/src/Pages/ProductList/Components/MyExampleComponent.tsx&lt;/code&gt;.&lt;br&gt;
Desta forma, todos os componentes exclusivos da página &lt;code&gt;ProductList&lt;/code&gt; estaria dentro desta pasta, facilitando a identificação do que está alí dentro é algo que não é reutilizável, mas que foi componetizado para simplificar a complexidade da página &lt;code&gt;ProductList&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mZ47LV15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/example-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZ47LV15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/example-1.png" alt="Exemplo de componentização não reutilizável"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#componentes-de-componentes"&gt;
  &lt;/a&gt;
  Componentes de componentes
&lt;/h3&gt;

&lt;p&gt;Outra situação em que é possível fazer componentes é quando temos dois ou mais componentes e que juntos se tornam outro componente. Tipo aquele botão e input que juntos viram uma barra de busca, sacou?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iPrGtGmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/page_components_markup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iPrGtGmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/page_components_markup.png" alt="Exemplo instagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Observe a imagem acima. As caixas em roxo são os componentes "Micro", ou seja, componentes pequenos que possuem uma ação bem específica. Já as caixas vermelhas temos os "Macros" ou componentes de componentes. Um componente "Macro" é um componente maior que junta vários outros componentes menores dentro de si. Assim, também facilita a reutilização, pois toda vez que precisarmos daquele conjunto de componentes juntos podemos utilizar esse componente maior no lugar de ficar chamando cada componente pequeno um por um. &lt;/p&gt;

&lt;p&gt;As aplicações para esse tipo de componentização são diversas. Você pode, por exemplo, querer criar um componente de uma biblioteca que você usa para que a chamada dele fique mais simples. Esse é o exemplo que darei a seguir:&lt;/p&gt;

&lt;p&gt;Nas imagens abaixos veja que há dois exemplos de componentes, o primeiro é o &lt;strong&gt;DefaultModal&lt;/strong&gt; e o segundo é &lt;strong&gt;CustomModal&lt;/strong&gt;. Observe  que o &lt;strong&gt;CustomModal&lt;/strong&gt; está bem mais simples, sem precisar colocar tanta coisa no meio do componente e esses dois componentes fazem a mesma coisa. A diferença é que no &lt;strong&gt;CustomModal&lt;/strong&gt; foi criado um componente que encapsula o código da primeira imagem, expondo apenas algumas propriedades com os dados que de fato alteram e também  permite que seja passado um "&lt;em&gt;filho&lt;/em&gt;" no corpo da modal para que você possa adicionar elementos mais customizáveis. Desta forma, o título, os botões de ações, as funções que checa se modal está aberta ou fechada, ficam tudo "escondidas" para quem está usando a versão &lt;strong&gt;CustomModal&lt;/strong&gt; .  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MeVudTGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/modal-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MeVudTGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/modal-example.png" alt="Exemplo instagram"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bmGYmg2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/defaultModal-original.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bmGYmg2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/defaultModal-original.png" alt="Exemplo instagram"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2tzAPJ1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/defaultModal-component.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2tzAPJ1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/PixelwolfHQ/front-end/raw/master/articles/small-components-pattern/assets/defaultModal-component.png" alt="Exemplo instagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reutiliza%C3%A7%C3%A3o-sem-componentes"&gt;
  &lt;/a&gt;
  Reutilização sem componentes
&lt;/h3&gt;

&lt;p&gt;Nem todo código repetido nos componentes podem sem quebrados em outros componentes menores.Também temos códigos repetidos que são lógicas para tratar algum problema, coisas como: formatação de datas, buscar um endereço com base num cep, tratamento de dados e coisas do tipo. Mesmo nesses casos ainda sim, podemos recorrer à reutilização, pode-se pegar esse trecho de lógica repetida, criar uma função que fica responsável pela aquela atividade e colocá-la dentro de uma pasta &lt;code&gt;src/utils&lt;/code&gt; na raiz do projeto. Desta forma, toda vez que você precisar, por exemplo, buscar um endereço com base no CEP, você pode importar a função &lt;code&gt;getAddressByCep&lt;/code&gt; do seu &lt;code&gt;utils&lt;/code&gt; sem precisar copiar e colar o mesmo trecho de código para uma nova página.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finalizando"&gt;
  &lt;/a&gt;
  Finalizando
&lt;/h2&gt;

&lt;p&gt;Tentei neste artigo mostrar algumas dicas para escrever um código que seja, pelo menos, um pouco mais manutenível. Tentei passar um pouco da minha experiência do assunto, então pode ser que tenha algo que não caiba na realidade do projeto que você está trabalhando. Caso tenha curtido o tema, sugiro novamente que pesquise por &lt;em&gt;&lt;a href="https://bradfrost.com/blog/post/atomic-web-design/"&gt;Atomic Design&lt;/a&gt;&lt;/em&gt;, pois o que mostrei aqui sobre ele foi apenas a ponta do iceberg. E se tiver algo para acrescentar ficaria agradecido se  compartilhasse comigo também, assim podemos sempre ir evoluindo. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://inside.contabilizei.com.br/componentiza%C3%A7%C3%A3o-no-front-end-3fc889a363df"&gt;Componentização no front-end I&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://inside.contabilizei.com.br/componentiza%C3%A7%C3%A3o-no-front-end-f40b0b85143f"&gt;Componentização no front-end IV&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/telles/tips-estruturando-as-camadas-de-uma-arquitetura-react-36bp"&gt;Estruturando camadas de uma arquitetura no React&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.listennotes.com/podcasts/elemencast/1-atomic-design-lan%C3%A7amento-7IoMB4gnhcm/"&gt;Atomic design&lt;/a&gt;&lt;/p&gt;

</description>
      <category>component</category>
      <category>atomicdesign</category>
      <category>react</category>
      <category>frontend</category>
    </item>
  </channel>
</rss>
