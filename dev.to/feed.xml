<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introduction to JavaScript: Basics</title>
      <author>Neha Soni</author>
      <pubDate>Mon, 03 May 2021 06:49:16 +0000</pubDate>
      <link>https://dev.to/nehasoni__/introduction-to-javascript-basics-g6n</link>
      <guid>https://dev.to/nehasoni__/introduction-to-javascript-basics-g6n</guid>
      <description>&lt;p&gt;Hello, amazing people 👋,&lt;br&gt;&lt;br&gt;
In this blog article, I am going to explain the basics of javascript.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let's get started.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#this-blog-post-will-cover"&gt;
  &lt;/a&gt;
  This Blog post will cover:
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- What is JavaScript?
- How JavaScript is different from other programming languages 
  like Java or C?
- How to include JavaScript in your HTML page?
- How to Write Comments in JavaScript?
- Variables in JavaScript
- Data types in JavaScript
- Operators in JavaScript
- Conditional Statements in JS
- Loops in JavaScript
- Functions in JavaScript 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before starting this article, you don't need any previous JavaScript knowledge, but you should have some familiarity with HTML and CSS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://html.com/"&gt;Introduction to HTML&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/css/css_intro.asp"&gt;Introduction to CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#what-is-javascript"&gt;
  &lt;/a&gt;
  What is JavaScript?
&lt;/h2&gt;

&lt;p&gt;JavaScript is a scripting language used to create and control dynamic web content.&lt;br&gt;
It is an interpreted, lightweight object-oriented programming language that enables dynamic interactivity on websites. It can be anything from animated graphics to an automatically generated Facebook timeline. Once you have created your basic structure(HTML)  and elegant vibe(CSS), JavaScript makes your website dynamic(automatically updateable).&lt;/p&gt;

&lt;p&gt;If you are a software developer gravitated towards web development then you must learn javascript and once you have learned JavaScript there are many frameworks available which you can use to create multiple web applications. Nowadays javascript is also used in mobile app development, desktop app development, and game development. This opens many possibilities for you as a JavaScript developer.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-javascript-is-different-from-other-programming-languages-like-java-or-c"&gt;
  &lt;/a&gt;
  How JavaScript is different from other programming languages like Java or C++?
&lt;/h2&gt;

&lt;p&gt;The major difference is that JavaScript is a scripting language i.e it is not compiled and executed like C++ and java. It is dynamically typed whereas Java or C++ is statically typed. JavaScript is traditionally used to write scripts for web applications. The client receives the whole source of the script and the browser executes it - the browser has a JavaScript interpreter while the browser couldn't execute Java or C++ programs. Javascript does not support multithreading while java or C++ is a multi-threaded language.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Now, javascript can run on the server via Node.js.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-include-javascript-in-your-html-page"&gt;
  &lt;/a&gt;
  How to include JavaScript in your HTML page?
&lt;/h2&gt;

&lt;p&gt;JavaScript can either be embedded directly inside the HTML page or placed in an external script file and referenced inside the HTML page. There are three places to put javascript code-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;between head tag of HTML page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Embedding JavaScript&amp;lt;/title&amp;gt;
    &amp;lt;script&amp;gt;
        document.getElementById("greet").innerHTML = "Hello World!";
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id="greet"&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;between body tag of HTML page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Embedding JavaScript&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id="greet"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
        document.getElementById("greet").innerHTML = "Hello World!";
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In .js file(external javascript file)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example-&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;index.html&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Linking External JavaScript&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id="greet"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;button onclick="greet()"&amp;gt;Show message&amp;lt;/button&amp;gt; 
    &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;script.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function greet()
{
    document.getElementById("greet").innerHTML = "Hello World!";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-write-comments-in-javascript"&gt;
  &lt;/a&gt;
  How to Write Comments in JavaScript?
&lt;/h2&gt;

&lt;p&gt;Comments are a meaningful way to deliver messages. It is not necessary but recommended to use comments to add information about the code, warnings, or suggestions so that others can easily understand and interpret your code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Types of comments in javascript&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single-line comment =&amp;gt; Single-line comments are represented by double forward slashes (&lt;code&gt;//&lt;/code&gt;).
&lt;strong&gt;Example&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
var x=1;  
var y=2;  
var z=x+y;              // It adds values of x and y variable  
document.write(z);      // prints sum of x and y  
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Multi-line comment =&amp;gt; It is represented by forward slash with an asterisk(&lt;code&gt;/*&lt;/code&gt;) then asterisk with forward slash(&lt;code&gt;*/&lt;/code&gt;).
&lt;strong&gt;Example&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
/*
The code below will change the heading with id = "myP" and the 
paragraph with id = "myP" in my web page:
*/
document.getElementById("myH").innerHTML = "My First Page";
document.getElementById("myP").innerHTML = "My first paragraph.";
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#variables-in-javascript"&gt;
  &lt;/a&gt;
  Variables in JavaScript
&lt;/h2&gt;

&lt;p&gt;Variable means anything that can vary. These are the containers for storing data values. Also, JavaScript variables are loosely typed which means it does not require a data type to be declared. There are some rules while declaring a variable in js:-&lt;br&gt;&lt;br&gt;
1.) variable name must starts letter (a to z or A to Z), underscore( _ ), or dollar( $ ) sign.&lt;br&gt;&lt;br&gt;
2.) after the first letter we can use digits (0 to 9), for example- abc1&lt;br&gt;&lt;br&gt;
3.) javascript variables are case sensitive(x and X are different variables)&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example of JavaScript variables&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Correct JavaScript variables=&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
var x=10;
var _value=1.1;
var flag1=true;
var Name;               //declaration of variable
Name="neha";            //initialization of variable
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Incorrect JavaScript variables=&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
var  123=30;  
var *aa=320;  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two types of variables in javascript:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.)&lt;/strong&gt; Local variables&lt;br&gt;
&lt;strong&gt;2.)&lt;/strong&gt; Global Variables&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#javascript-local-variable-gt"&gt;
  &lt;/a&gt;
  JavaScript local variable =&amp;gt;
&lt;/h3&gt;

&lt;p&gt;Local variables are the variables that are defined inside block or function. They have a local scope which means that they are accessible within the function or block.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
function fun()
{  
var x=10;    //local variable
console.log(x);   
}  
&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#javascript-global-variable-gt"&gt;
  &lt;/a&gt;
  JavaScript global variable =&amp;gt;
&lt;/h3&gt;

&lt;p&gt;Global variables are the variables that are defined outside the functions or declared with a window object. They can be accessed from any function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
var data=200;     //global variable  
function a()
{  
console.log(data); 
}  
function b()
{  
console.log(data); 
}  
a();               //calling JavaScript function  
b();  
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#data-types-in-javascript"&gt;
  &lt;/a&gt;
  Data types in JavaScript
&lt;/h2&gt;

&lt;p&gt;Data types basically specify what kind of data can be stored and manipulated within a program. JavaScript provides different data types to hold different types of values. In JS we don't need to specify the type of the variable because it is dynamically used by the JavaScript engine.&lt;br&gt;
Mainly there are two types of data types in javascript:-&lt;br&gt;&lt;br&gt;
&lt;strong&gt;1.)&lt;/strong&gt; Primitive data types&lt;br&gt;
&lt;strong&gt;2.)&lt;/strong&gt; Non-Primitive data types&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#primitive-data-types"&gt;
  &lt;/a&gt;
  Primitive data types:-
&lt;/h3&gt;

&lt;p&gt;Primitive data types can hold only one value at a time. There are five types of primitive data types in JS:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iEpXpFRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619252845495/2eo93cdro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iEpXpFRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619252845495/2eo93cdro.png" alt="Screenshot (197).png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#nonprimitive-data-types"&gt;
  &lt;/a&gt;
  Non-primitive data types:-
&lt;/h3&gt;

&lt;p&gt;Non-primitive data types can hold collections of values and more complex entities. There are mainly three types of non-primitive data types:-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGLG_bnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619162112017/CCBnpMfmG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGLG_bnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619162112017/CCBnpMfmG.png" alt="Screenshot (182).png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#operators-in-javascript"&gt;
  &lt;/a&gt;
  Operators in JavaScript
&lt;/h2&gt;

&lt;p&gt;Operators are special symbols used to perform operations on operands.  For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var a=10,b=20;
var sum=a+b;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the &lt;code&gt;+&lt;/code&gt; operator that performs addition, and 'a' and 'b' are operands.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CxfMSVa6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619161821046/-8oruaIfm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CxfMSVa6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619161821046/-8oruaIfm.png" alt="Screenshot (179).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-arithmetic-operators"&gt;
  &lt;/a&gt;
  JavaScript Arithmetic Operators
&lt;/h3&gt;

&lt;p&gt;Arithmetic operators are used to perform arithmetic calculations. The arithmetic operators are as follows:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S0gbUigD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619163530442/Xmaj1-sgX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S0gbUigD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619163530442/Xmaj1-sgX.png" alt="Screenshot (184).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-assignment-operators"&gt;
  &lt;/a&gt;
  JavaScript Assignment Operators
&lt;/h3&gt;

&lt;p&gt;Assignment operators are used to assign values to variables. The following are assignment operators in js:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4iGbnQM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619164140746/itG8_jWNg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4iGbnQM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619164140746/itG8_jWNg.png" alt="Screenshot (185).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-comparison-operators"&gt;
  &lt;/a&gt;
  JavaScript Comparison Operators
&lt;/h3&gt;

&lt;p&gt;Comparison operators compare two values and return a boolean value, either &lt;strong&gt;true&lt;/strong&gt; or &lt;strong&gt;false&lt;/strong&gt;. The following are Comparison operators in js:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2SHtB-uv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619165543820/R6yvOr5DL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2SHtB-uv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619165543820/R6yvOr5DL.png" alt="Screenshot (187).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-bitwise-operators"&gt;
  &lt;/a&gt;
  JavaScript Bitwise Operators
&lt;/h3&gt;

&lt;p&gt;Bitwise operators perform operations on binary representations of numbers. The bitwise operators are as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RI6rgCJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619170486373/T_xg9TlAl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RI6rgCJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619170486373/T_xg9TlAl.png" alt="Screenshot (188).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-logical-operators"&gt;
  &lt;/a&gt;
  JavaScript Logical Operators
&lt;/h3&gt;

&lt;p&gt;Logical operators perform logical operations and return a boolean value, either true or false. The following are logical operators in js:-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GbVx0UUD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619171500674/7fDGnNoAO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GbVx0UUD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619171500674/7fDGnNoAO.png" alt="Screenshot (190).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conditional-statements-in-js"&gt;
  &lt;/a&gt;
  Conditional Statements in JS
&lt;/h2&gt;

&lt;p&gt;Conditional statements control behavior in JavaScript and determine whether or not pieces of code can run.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#js-if-statement"&gt;
  &lt;/a&gt;
  JS if Statement
&lt;/h3&gt;

&lt;p&gt;The most common type of conditional statement is the &lt;strong&gt;if-else&lt;/strong&gt; statement. This statement only runs if the condition enclosed in parentheses () is true. There are three forms of if statement in JavaScript:-&lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If Statement&lt;/li&gt;
&lt;li&gt;If else statement&lt;/li&gt;
&lt;li&gt;if else if statement
&lt;strong&gt;If statement example&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
   var a=20;  
   if(a&amp;gt;=20)
   {  
      alert("value of a is greater and equal to 20");  
   }  
&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;if-else statement example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
   var a=20;  
   if(a&amp;gt;=20)
   {  
      alert("value of a is greater and equal to 20");  
   }  
   else
   {
      alert("value of a is less than 20"); 
   }
&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;if-else if statement example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
   var a=20;  
   if(a&amp;gt;20)
   {  
      alert("value of a is greater than 20");  
   }  
   else if(a==20)
   {
      alert("value of a is equal to 20");
   }
   else
   {
      alert("value of a is less than 20"); 
   }
&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#js-switch-statement"&gt;
  &lt;/a&gt;
  JS switch Statement
&lt;/h3&gt;

&lt;p&gt;Switch statement is used to execute one code from multiple expressions. If there is a match, the associated block of code is executed and if there is no match, the default code block is executed.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Example:-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
   var grade='C';  
   var result;  
   switch(grade){  
     case 'A':  
       result="A Grade";  
       break;  
     case 'B':  
       result="B Grade";  
       break;  
    case 'C':  
      result="C Grade";  
      break;  
    default:  
      result="No Grade";  
}  
alert(result);  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#loops-in-javascript"&gt;
  &lt;/a&gt;
  Loops in JavaScript
&lt;/h2&gt;

&lt;p&gt;Loops are used for executing a block of statements repeatedly until a particular condition is satisfied. It makes the code compact. JavaScript supports different kinds of loops:&lt;br&gt;&lt;br&gt;
1.) for loop&lt;br&gt;
2.) for-in loop&lt;br&gt;
3.) while loop&lt;br&gt;
4.) do-while loop&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#js-for-loop"&gt;
  &lt;/a&gt;
  JS For loop
&lt;/h3&gt;

&lt;p&gt;The for loop iterates the elements for the fixed number of times. Syntax of &lt;code&gt;for&lt;/code&gt; loop is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for(initialization; condition; increment)
{
     //code block to be executed
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example:-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
     for(i=0;I&amp;lt;10;i++)
     {
          document.write(i + " ")  
     }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:-&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;1 2 3 4 5 6 7 8 9&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#js-forin-loop"&gt;
  &lt;/a&gt;
  JS For-in loop
&lt;/h3&gt;

&lt;p&gt;The for-in loop iterates through the properties of an Object. Syntax of &lt;code&gt;for&lt;/code&gt; loop is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (key in object) {
  // code block to be executed
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example:-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
var user = "";
var person = {fname:"Neha", lname:"Soni", age:20}; 
var x;
for (x in person) {
  user += person[x] + " ";
}
document.write(user);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:-&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;Neha Soni 20&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#js-while-loop"&gt;
  &lt;/a&gt;
  JS while loop
&lt;/h3&gt;

&lt;p&gt;The while loop iterates through a block of code as long as a specified condition is true. Syntax of &lt;code&gt;while&lt;/code&gt; loop is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;while (condition)  
{  
   // code to be executed  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example:-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
var count=0;  
while (count&amp;lt;=5)  
{  
document.write(count + " ");  
count++;  
}  
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:-&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;0 1 2 3 4 5&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#js-dowhile-loop"&gt;
  &lt;/a&gt;
  JS do-while loop
&lt;/h2&gt;

&lt;p&gt;A do-while loop is similar to a while loop with one exception that the code is executed at least once whether condition is true or false. Syntax of &lt;code&gt;do-while&lt;/code&gt; loop is as follows:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;do
{  
   //code to be executed  
}while (condition);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example:-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
var i=1;  
do{  
document.write(i + "&amp;lt;br/&amp;gt;");  
i++;  
}while (i&amp;lt;=5);  
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:-&lt;/strong&gt;&lt;code&gt;1 2 3 4 5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to learn more about loops,  &lt;a href="https://data-flair.training/blogs/loop-in-javascript/"&gt;Click here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functions-in-javascript"&gt;
  &lt;/a&gt;
  Functions in JavaScript
&lt;/h2&gt;

&lt;p&gt;Functions are one of the major pillars of JavaScript. It is a set of statements that performs some tasks or does some computation and then returns the result to the user. It helps you to divide a large program into small and makes a program a lot more efficient. The syntax of declaring a function is given below:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function functionName(arg1, arg2, ...argN)
{  
 //code to be executed  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Let’s first see the simple example of a function in JS that doesn't have any arguments.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;input type="button" onclick="msg()" value="call function"/&amp;gt; 

    &amp;lt;script&amp;gt;
      function msg(){              //function definition 
        alert("Hello amazing people!");   //create an alert in browser
      }
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Function Parameters and Arguments=&amp;gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you begin programming you may get confused between these two terms, but it is crucial to understand what they are and how are they different from each other.&lt;br&gt;
So Let's understand the difference between these two:-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QCnTZVvA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619245459181/EgG16kRsK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QCnTZVvA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619245459181/EgG16kRsK.png" alt="Screenshot (191).png"&gt;&lt;/a&gt;&lt;br&gt;
To learn more about parameters and arguments  &lt;a href="https://www.geeksforgeeks.org/javascript-function-parameters/"&gt;Click here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Function with Return Value=&amp;gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is an optional JavaScript statement that returns a value from the function. We use the keyword return, followed by the statement or expression we want to return.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Example:-&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;What is the value of PI?&amp;lt;/p&amp;gt;

Ans:-&amp;lt;span id="demo"&amp;gt;&amp;lt;/span&amp;gt;

&amp;lt;script&amp;gt;
document.getElementById("demo").innerHTML = getPI();

function getPI() {
  return Math.PI;
}
&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note:- Return statement should be written in the last because it skips all code in the block written after that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Function Scope=&amp;gt;&lt;/strong&gt;&lt;br&gt;
As we know there are two types of variables in JS, local variables and global variables. Local variables are defined inside a function and cannot be accessed outside it. But a function can access any variable defined as a global variable.&lt;br&gt;&lt;br&gt;
&lt;em&gt;Let's understand exactly what I mean with the help of following code:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h3&amp;gt;Function Scope&amp;lt;/h3&amp;gt;

    &amp;lt;script&amp;gt;
      var num1 = 2;     //global variable
      document.write("Value of number 1 is " + num1 + "&amp;lt;/br&amp;gt;");  //global scope
      function parentFunction(){
        var num2 = 4;       //local variable
        num1 = 8;
        document.write("Number 1 is " + num1 + "&amp;lt;/br&amp;gt;");  //inside parent func.  
        document.write("Number 2 is " + num2 + "&amp;lt;/br&amp;gt;");  //local scope

        childFunction();      //child function called

        function childFunction(){      //nested function
          var num3 = 0;
          document.write("Number 2 is " + num2 + "&amp;lt;/br&amp;gt;");  // inside child func.
          document.write("Number 3 is " + num3 + "&amp;lt;/br&amp;gt;");  //local scope
        }
      }
      parentFunction(); //parent function called
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_o_gYWMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619248613698/KXTCDVlFw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_o_gYWMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619248613698/KXTCDVlFw.png" alt="Screenshot (193).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:-
&lt;/h2&gt;

&lt;p&gt;HTML is the language of web content, but JavaScript is the language of web functionality. It is one of the fastest evolving languages, in terms of practices, tooling, and ecosystem. It’s an incredibly exciting language to be using right now. &lt;/p&gt;

&lt;p&gt;In this blog, we have just scratched the surface of JavaScript. If you enjoyed learning and find it useful please do like and share so that, it reaches others as well 🤝&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 😃
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;br&gt;
Let me know in the comment section if you have any doubt or feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://data-flair.training/blogs/javascript-tutorial/"&gt;https://data-flair.training/blogs/javascript-tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javatpoint.com/javascript-tutorial"&gt;https://www.javatpoint.com/javascript-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics"&gt;https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Learn DevOps Better and Faster!</title>
      <author>Davide Benvegnù</author>
      <pubDate>Mon, 03 May 2021 06:38:00 +0000</pubDate>
      <link>https://dev.to/n3wt0n/learn-devops-better-and-faster-3ake</link>
      <guid>https://dev.to/n3wt0n/learn-devops-better-and-faster-3ake</guid>
      <description>&lt;p&gt;There are many ways to learn DevOps, but the best one is learning by doing! In this live stream, we talk with Sid Palas (DevOps Directive) about using the Zone of Proximal Development to improve your DevOps skills.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RlhlE3WcpVU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This is probably the best way to learn DevOps, and actually the best way to learn anything. Learn by practice (or learn by doing) and you will learn more!&lt;/p&gt;

&lt;p&gt;Learn DevOps better with these tips.&lt;/p&gt;

&lt;p&gt;Check Sid Palas out:&lt;br&gt;
► YouTube: DevOps Directive &lt;a href="https://www.youtube.com/c/DevOpsDirective"&gt;https://www.youtube.com/c/DevOpsDirective&lt;/a&gt;&lt;br&gt;
► Blog: &lt;a href="https://devopsdirective.com"&gt;https://devopsdirective.com&lt;/a&gt;&lt;br&gt;
► GitHub: &lt;a href="https://github.com/sidpalas"&gt;https://github.com/sidpalas&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>learning</category>
      <category>live</category>
      <category>skills</category>
    </item>
    <item>
      <title>JavaScript Project</title>
      <author>hanaxdo</author>
      <pubDate>Mon, 03 May 2021 06:13:29 +0000</pubDate>
      <link>https://dev.to/hanaxdo/javascript-project-483f</link>
      <guid>https://dev.to/hanaxdo/javascript-project-483f</guid>
      <description>&lt;p&gt;For my first project at Flatiron School, I was given a task to build a Single Page Application (SPA) by using only HTML, CSS, and JavaScript. The data had to be accessed from a public API. All communication would be through JSON fetch requests. Before coming up with a plan, we must understand what an API is. An API stands for Application Programming Interfaces. It provides an easier syntax to use by allowing difficult features to be more easy to use. After carefully planning my project, I started building my HTML file. It is used to format my structure of the application. Unfortunately, you don’t get to see your work come alive yet. Here’s where JavaScript comes in! JavaScript is an object orient programming language designed to allow users to create interactive and responsive web pages. Now here comes the fun part! Creating the CSS file allows you to customize the HTML elements by defining styles that includes the layout, the design, and much more. You can play around with the features until the application is the way you want it to be!&lt;/p&gt;

&lt;p&gt;Here is my full code:&lt;br&gt;
&lt;a href="https://github.com/hanaxdo/phase-1-javascript-project-mode"&gt;https://github.com/hanaxdo/phase-1-javascript-project-mode&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Why you should definitely use NgRx Store</title>
      <author>Armen Vardanyan</author>
      <pubDate>Mon, 03 May 2021 06:11:56 +0000</pubDate>
      <link>https://dev.to/this-is-angular/why-you-should-definitely-use-ngrx-2pf2</link>
      <guid>https://dev.to/this-is-angular/why-you-should-definitely-use-ngrx-2pf2</guid>
      <description>&lt;p&gt;When I &lt;a href="https://www.youtube.com/watch?v=UxDb0exmp5I&amp;amp;t=2171"&gt;&lt;em&gt;was a guest&lt;/em&gt;&lt;/a&gt; on &lt;a href="https://www.youtube.com/c/TechTalksWithSantosh"&gt;&lt;em&gt;Tech Talks with Santosh&lt;/em&gt;&lt;/a&gt;, a&lt;br&gt;
great talk show hosted by &lt;a href="https://twitter.com/santoshyadavdev"&gt;&lt;em&gt;Santosh Yadav&lt;/em&gt;&lt;/a&gt;, I expressed a very&lt;br&gt;
controversial opinion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If your application is big enough to use Angular, it is big enough to use NgRx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, this is &lt;em&gt;my opinion,&lt;/em&gt; and in general this is an opinionated article, but I will try my best to provide arguments why I think it is right for &lt;em&gt;every&lt;/em&gt; Angular application to use NgRx&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-reward-is-much-larger-than-the-risk"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The reward is much larger than the risk&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Of course, if you have a team of people that have never worked with NgRx, starting a new project using another technology (and a new way of thinking!) can seem like a big challenge; and surely, some aspects of reactive programming and Flux design pattern (and the need to use RxJS extensively) can be somewhat confusing, but my experience with NgRx made me think, that with some dedication it is possible to switch from an imperative mindset to functional programming. It is truly possible to come to a decent level of understanding of Flux (and NgRx) within several days, because:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Concepts are not as complex as they sound at first. Actions, Reducers and Effects are scary words, it seems, but in reality, an action is a unique object representing an event in state, a reducer is a pure function that changes the state according to an action (pure functions are especially easy to understand) and so on. In essence, learning NgRx is not &lt;strong&gt;very&lt;/strong&gt; easy, but it is not as challenging as learning an entire new framework like Angular itself; and definitely worth the time invested in it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once one of the concepts is mastered, the next is much easier to understand. When you learn about actions, and then see them dispatched, it becomes easy to understand what a reducer is, then what a selector is, and after we have learned all of those concepts, it will be easy to understand Effects, and then suddenly we know NgRx and use on a daily basis.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I would suggest &lt;strong&gt;not&lt;/strong&gt; using NgRx only when there is a lack of&lt;br&gt;
basic knowledge of RxJS; but if you know basic operators&lt;br&gt;
(map/filter/startWith) and Observable combination&lt;br&gt;
(combineLatest/mergeMap), you are good to go to start learning NgRx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So basically NgRx is not as hard to learn as one might imagine, and learning it will yield immense benefits. So if your (or your teams) policy on NgRx is "it is too much overhead to learn and switch to it", then it is time to rethink that policy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-reward-is-not-only-larger-than-the-risk-but-it-is-also-huge"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The reward is not only larger than the risk, but it is also huge&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;NgRx allows us to have three important things in our applications:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A single source of truth for all our data. This means we can easily understand where and when the data changed and how it affected our UI. Because of its centralized structure, problems are easy to detect: if the state changes in an unexpected way, then the problem is in the reducer function; if the state is transformed in a wrong way, then the problem is in the selector; and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It provides a clear, almost mechanical pathway of solving frontend related challenges, making applications &lt;em&gt;extremely&lt;/em&gt; scalable. In other words, NgRx provides a simple, yet very strict structure for how our frontend application should function (even on the folder structure level). It also makes 90% of tasks and UI pieces very straightforward.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because of its awesome devtools it is very easy to debug, follow, and understand when and where something went wrong.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Essentially these three points help us have an application that is as maintainable and scalable as possible. And this is not something theoretical - you will become convinced of this as soon as you get your first feature requirement change after a certain feature is already built. Imagine scenario: we have an app where once a user selects a value from a dropdown in one component, an HTTP request is performed, and if it is successful, another HTTP request should be performed and update a piece of UI in &lt;em&gt;another&lt;/em&gt; component. &lt;/p&gt;

&lt;p&gt;Now imagine changing the codebase according to this requirement in an application that does &lt;strong&gt;not&lt;/strong&gt; use NgRx. First we would need a transport mechanism to notify the other component of the dropdown value change (a service-with-a-subject or something like that), then we would need to subscribe to that notification in the other component (and don't forget to takeUntil to unsubscribe!), then inject a new data service into that component, perform the HTTP call, get the data, store in the local state, update UI. Lots of steps, is it not? &lt;/p&gt;

&lt;p&gt;Now imagine the same in NgRx: if the state is already selected in the second component, we would just need to dispatch another action in the corresponding Effects class (probably 1-3 lines of code); if not, then add a select method call (most probably just 1 line of code) and it is all done. Understandable, clean, easy to reason about, almost bug free.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-reality-angular-apps-with-ngrx-are-more-understandable"&gt;
  &lt;/a&gt;
  &lt;strong&gt;In reality, Angular apps with NgRx are more understandable&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Sometimes developers may think that introducing a new framework of thinking will just increase complexity and make applications harder to navigate and perceive.&lt;/p&gt;

&lt;p&gt;But the NgRx experience proves yet again that it is better to have more lines of code that are explicit and strict, rather than a short, but disorganized one. Without NgRx, the application's overall situation is not readily understandable. It is not clear, on what data the components depend, also, it is hard to tell only from code, how components affect each other. But with NgRx, the connections are very clear, data flows only from one place, through one place, and is immutable. All of this makes our applications very easy to get into; if you want to know how the state can change, take a look at action names; if you want to know exactly how, read the reducer function (which is usually very obvious - as most pure functions are); if you want to know which data is loaded from external sources, read an Effect.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;In conclusion&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;NgRx is not just a library or a tool - it is a way of thinking, and before you start doing it, there is a learning curve to ascend, and concepts to accept; but in the end, when the learning process is done, you will find out how much it benefits your development process. In several months, it will be harder to do Angular &lt;em&gt;without&lt;/em&gt; NgRx.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Diving into Azure Management Groups</title>
      <author>James Cook</author>
      <pubDate>Mon, 03 May 2021 05:49:54 +0000</pubDate>
      <link>https://dev.to/officialcookj/diving-into-azure-management-groups-i4i</link>
      <guid>https://dev.to/officialcookj/diving-into-azure-management-groups-i4i</guid>
      <description>&lt;p&gt;When I first heard of Management Groups I thought it was just a way to group subscriptions in Azure. After in depth research on the feature, I found there was more you can do with them so in this post I will cover what are Management Groups and what can you do with them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-management-groups"&gt;
  &lt;/a&gt;
  What are Management Groups
&lt;/h2&gt;

&lt;p&gt;Management Groups is a feature of Azure used to control RBAC (Role Based Access Control), apply governance via policies and implement cost management to subscriptions that are organised within these groups. You might be familiar with these features already within subscriptions but being able to duplicate configurations from one subscription to another can be a headache to manage. What Management Groups allows us to do is add these subscriptions to one group and then apply these configurations to the group which then populates to the subscriptions and its resources. You can also add a Management Group within a Management Group which will also inherit the configurations set.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-and-how-to-create"&gt;
  &lt;/a&gt;
  Where and how to create
&lt;/h2&gt;

&lt;p&gt;To create a Management Group is straight forward, first we need to locate where to find this feature. Within the Azure Portal search for &lt;strong&gt;Management Groups&lt;/strong&gt; and select the result as per the below image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wDf4Ik6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619879894378/Aqosq9Q-m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wDf4Ik6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619879894378/Aqosq9Q-m.png" alt="search-managementgroups.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the page you will notice there is already a Management Group called Tenant Root Group. This will contain all your subscriptions. When you create a group it will appear under the Tenant Root. To create a Management Group, select &lt;strong&gt;Add&lt;/strong&gt; from the top menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U2bdXZeY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619880215372/fBYtrFRKL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U2bdXZeY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619880215372/fBYtrFRKL.png" alt="add.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you enter the ID and display name for the group you want to create.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3xXdSijd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619880356388/1OyzoSEWc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3xXdSijd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619880356388/1OyzoSEWc.png" alt="add-management-group.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once fields are completed, select &lt;strong&gt;Submit&lt;/strong&gt;. Once created, you can select it to start configuring.&lt;/p&gt;

&lt;p&gt;If you create multiple Management Groups and want to move them inside of each other, select the &lt;strong&gt;Move&lt;/strong&gt; option while in one of these groups and select the location.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--88nF7zXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619883145502/cnXQLCiKU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--88nF7zXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619883145502/cnXQLCiKU.png" alt="move.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#subscriptions"&gt;
  &lt;/a&gt;
  Subscriptions
&lt;/h2&gt;

&lt;p&gt;Within the group you created, select &lt;strong&gt;Subscriptions&lt;/strong&gt; from the side menu. Here you can select the &lt;strong&gt;Add&lt;/strong&gt; option from the top menu to add the subscriptions you want within this group.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U2bdXZeY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619880215372/fBYtrFRKL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U2bdXZeY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619880215372/fBYtrFRKL.png" alt="add.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A subscription can only be in one management group at one time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#iam"&gt;
  &lt;/a&gt;
  IAM
&lt;/h2&gt;

&lt;p&gt;Select &lt;strong&gt;IAM&lt;/strong&gt; from the side menu within the Management Group. Here you can configure RBAC in the same way as you would do within a subscription. This will populate down to other Management Groups under this one, subscriptions and their resource groups.&lt;/p&gt;

&lt;p&gt;Click &lt;a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-assignments-portal"&gt;here&lt;/a&gt; for more information assigning roles in IAM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h2&gt;

&lt;p&gt;Within the &lt;strong&gt;Security&lt;/strong&gt; option, you can review all subscriptions and resource groups security recommendations. You will also see an overall security score rating for the Management Group with a summary of the lowest rated subscriptions.&lt;/p&gt;

&lt;p&gt;Click &lt;a href="https://docs.microsoft.com/en-us/azure/security-center/security-center-introduction"&gt;here&lt;/a&gt; for more information on using the Security blade to enable Security Center.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#policy"&gt;
  &lt;/a&gt;
  Policy
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Policy&lt;/strong&gt; side menu option allows you to apply governance policies, either pre-built or custom. This will populate down to your subscriptions.&lt;/p&gt;

&lt;p&gt;Click &lt;a href="https://docs.microsoft.com/en-us/azure/governance/policy/assign-policy-portal"&gt;here&lt;/a&gt; for more information on implementing policies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cost-analysis"&gt;
  &lt;/a&gt;
  Cost Analysis
&lt;/h2&gt;

&lt;p&gt;To analyse what the costs of resources within a Management Group, select &lt;strong&gt;Cost Analysis&lt;/strong&gt; within the side menu. Here you will get an overview of resource costs and cost breakdown based on each subscription within the group.&lt;/p&gt;

&lt;p&gt;Click &lt;a href="https://docs.microsoft.com/en-us/azure/cost-management-billing/costs/quick-acm-cost-analysis?tabs=azure-portal"&gt;here&lt;/a&gt; for more information on using Cost Analysis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#budgets"&gt;
  &lt;/a&gt;
  Budgets
&lt;/h2&gt;

&lt;p&gt;You can set budgets to the top level of a Management Group to monitor and control costs. Select &lt;strong&gt;Budgets&lt;/strong&gt; from the side menu, here you can create a budget for the group.&lt;/p&gt;

&lt;p&gt;Click &lt;a href="https://docs.microsoft.com/en-us/azure/cost-management-billing/costs/tutorial-acm-create-budgets"&gt;here&lt;/a&gt; for more information on how to create budgets.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>management</category>
      <category>security</category>
      <category>cloud</category>
    </item>
    <item>
      <title>How do hackers hack websites?</title>
      <author>SmartScanner</author>
      <pubDate>Mon, 03 May 2021 05:44:50 +0000</pubDate>
      <link>https://dev.to/smartscanner/how-do-hackers-hack-websites-4ha4</link>
      <guid>https://dev.to/smartscanner/how-do-hackers-hack-websites-4ha4</guid>
      <description>&lt;p&gt;In the movies, hacking is like fast keyboard typing and hitting the Enter but in the real world, hackers find and exploit vulnerabilities to hack websites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-web-vulnerability"&gt;
  &lt;/a&gt;
  What is a web vulnerability?
&lt;/h2&gt;

&lt;p&gt;There are different definitions for vulnerability. According to &lt;a href="https://en.wikipedia.org/wiki/ISO/IEC_27005"&gt;ISO 27005&lt;/a&gt; a vulnerability is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“A weakness of an asset or group of assets that can be exploited by one or more threats, where an asset is anything that has value to the organization, its business operations, and their continuity, including information resources that support the organization's mission”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That means vulnerabilities can let the malicious user do actions they're not supposed to do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-vulnerabilities-hackers-use-for-hacking-websites"&gt;
  &lt;/a&gt;
  Common vulnerabilities hackers use for hacking websites
&lt;/h2&gt;

&lt;p&gt;Here is the list of common web vulnerabilities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#passwords"&gt;
  &lt;/a&gt;
  Passwords
&lt;/h3&gt;

&lt;p&gt;You log in to your website using a password, so do hackers! Choose an easy password to make it easy for hackers to break into your website.&lt;br&gt;
Hackers use methods like password guessing, brute force, and phishing to find passwords and break into any website.&lt;/p&gt;

&lt;p&gt;Protect your secrets carefully to stop hackers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#known-vulnerabilities"&gt;
  &lt;/a&gt;
  Known Vulnerabilities
&lt;/h3&gt;

&lt;p&gt;Using an outdated WordPress plugin can let a hacker get into your website. &lt;br&gt;
Every day many vulnerabilities in popular web softwares are found and reported by security researchers. Once a vulnerability is reported hackers start finding vulnerable targets to exploit and hack for their purpose.&lt;/p&gt;

&lt;p&gt;It's crucial to use the latest version of any software and install security updates as soon as possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crosssite-scripting-xss"&gt;
  &lt;/a&gt;
  Cross-Site Scripting (XSS)
&lt;/h3&gt;

&lt;p&gt;XSS doesn't allow hackers to access your website directly but hackers can manipulate what is presented on your website using this vulnerability. &lt;/p&gt;

&lt;p&gt;Cross Site Scripting is a dangerous vulnerability because hackers can control the browser of your website visitors and eventually gain access to your website by stealing your browser Cookie containing the access token to the website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#broken-access-control"&gt;
  &lt;/a&gt;
  Broken Access Control
&lt;/h3&gt;

&lt;p&gt;What would happen if you have no authentication for the administration panel of your website? Your website will get hacked. This is one example of broken access control over the administration panel.&lt;/p&gt;

&lt;p&gt;The access control can be broken in any sensitive functionalities like sending posts, uploading files, updating profile, etc. Broken access control is like an open door to your website for hackers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#injection-vulnerabilities"&gt;
  &lt;/a&gt;
  Injection Vulnerabilities
&lt;/h3&gt;

&lt;p&gt;Web applications rely on executing commands for performing different actions like displaying your website items, searching, login, and other tasks. If these commands are build using user-supplied input, the web application might be vulnerable to injection attacks.&lt;/p&gt;

&lt;p&gt;There many different types of injection vulnerabilities. Some of the more common injections are SQL, NoSQL, OS command, Object Relational Mapping (ORM), LDAP, and Expression Language (EL) or Object Graph Navigation Library (OGNL) injection.&lt;br&gt;
Hacker uses these vulnerabilities to inject their commands to your website and hack it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#path-traversals"&gt;
  &lt;/a&gt;
  Path Traversals
&lt;/h3&gt;

&lt;p&gt;Hackers try to access files and directories outside of your website root folder. They try to inject dot-dot-slash (../)” sequences and their variations or absolute file paths wherever possible to access sensitive files like application source code and OS files to take over your website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-issues"&gt;
  &lt;/a&gt;
  Other Issues
&lt;/h3&gt;

&lt;p&gt;There are many other ways to hack a website. For example, hacking the FTP server might end up hacking your whole website. Or, Hacking one website on a shared host can give access to other websites on that host. Also, the combination of two or more vulnerabilities can create a back door to your website.&lt;/p&gt;

&lt;p&gt;Some other vulnerabilities for hacking websites are Cross Site Request Forgery (CSRF), having debug/sample codes on your website, leaving backup files under the web root, displaying detailed error messages, etc.&lt;/p&gt;

&lt;p&gt;To keep your website secure, you should test your website for possible vulnerabilities and fix any issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-protect-your-website-against-hackers"&gt;
  &lt;/a&gt;
  How to protect your website against hackers
&lt;/h2&gt;

&lt;p&gt;Here are a few best practices to prevent hackers from hacking your website:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Change default credentials&lt;/li&gt;
&lt;li&gt;Use strong passwords&lt;/li&gt;
&lt;li&gt;Use 2-factor authentication&lt;/li&gt;
&lt;li&gt;Always type your website login URL in the browser manually (or use a bookmark)&lt;/li&gt;
&lt;li&gt;Never provide your personal information in response to an unsolicited request either over the phone or Internet.&lt;/li&gt;
&lt;li&gt;Make sure you're using an updated version of the software you're using (turn on auto-update if available).&lt;/li&gt;
&lt;li&gt;Remove old, test, and debug files from your website&lt;/li&gt;
&lt;li&gt;Setup your website using recommended configurations for the production&lt;/li&gt;
&lt;li&gt;Use a &lt;a href="https://www.thesmartscanner.com"&gt;web vulnerability scanner&lt;/a&gt; to regularly scan your website for finding and fixing weaknesses.&lt;/li&gt;
&lt;li&gt;Use a Web Application Firewall (WAF)&lt;/li&gt;
&lt;/ol&gt;

</description>
    </item>
    <item>
      <title>Welcome to This is Learning—an invitation to our open tech authors community</title>
      <author>Lars Gyrup Brink Nielsen</author>
      <pubDate>Mon, 03 May 2021 05:28:38 +0000</pubDate>
      <link>https://dev.to/this-is-learning/welcome-to-this-is-learning-an-invitation-to-our-open-tech-authors-community-22e4</link>
      <guid>https://dev.to/this-is-learning/welcome-to-this-is-learning-an-invitation-to-our-open-tech-authors-community-22e4</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/photos/0ECDm8h-4Hg"&gt;Le Wagon&lt;/a&gt; on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is Learning is a community of tech writers and content creators. We're a diverse and inclusive group of people publishing about software development and related activities such as career, learning, and productivity.&lt;/p&gt;

&lt;p&gt;We believe in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Honesty, openness, diversity, and inclusion&lt;/li&gt;
&lt;li&gt;Learning in public&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We believe that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sharing is caring&lt;/li&gt;
&lt;li&gt;Together we can&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No matter if you're just starting out or you've been writing or creating content for years, This is Learning is for you. If you're an aspiring author, you will find writing tips, support from a community of peers, feedback on improving your writing skills as well as the technical aspects of your work.&lt;/p&gt;

&lt;p&gt;As a seasoned writer or content creator, you'll find like-minded peers, discuss openly what's close to your heart and get the opportunity to support upcoming and aspiring peers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#publications"&gt;
  &lt;/a&gt;
  Publications
&lt;/h1&gt;

&lt;p&gt;The This is Learning family of publications currently consists of 2 publications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/this-is-angular"&gt;This is Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/this-is-learning"&gt;This is Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With strong roots in the Angular community, we currently have a team of 14 writers publishing on &lt;a href="https://dev.to/this-is-angular"&gt;This is Angular&lt;/a&gt;. &lt;a href="https://dev.to/this-is-angular"&gt;This is Angular&lt;/a&gt; is a publication about Angular-specific technology and topics. As is the case for all This is Learning parts, the &lt;a href="https://dev.to/this-is-learning"&gt;This is Learning&lt;/a&gt; publication is free from conflict of interests. Your opinion, your experience, and the content you share is deeply appreciated. Don't hold back. In fact, let's move forward.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/this-is-learning"&gt;This is Learning&lt;/a&gt; has a diverse team of tech writers and content creators. Our worldwide group of 13 authors includes everything from software graduates through software developers to software architects as well as developer advocates and framework authors.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#other-content"&gt;
  &lt;/a&gt;
  Other content
&lt;/h1&gt;

&lt;p&gt;As content creators, we do more than tech articles. Some of us contribute to or maintain FOSS projects. Some create videos or live streams. Some are seen presenting at conferences or meetups.&lt;/p&gt;

&lt;p&gt;We're currently collaborating on an RxJS fundamentals course. As with all of our content, it will be free and open. Reach out to &lt;a href="https://dev.to/layzee"&gt;Lars Gyrup Brink Nielsen&lt;/a&gt; if you're interested in joining this effort.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#values"&gt;
  &lt;/a&gt;
  Values
&lt;/h1&gt;

&lt;p&gt;We all enjoy sharing our learnings and doing so for free, in the open. No membership required, no paywall, no walled garden, no fees, no-nonsense. Our content is visible in search engines and often attracts attention on the amazingly supportive DEV Community platform.&lt;/p&gt;

&lt;p&gt;Sharing is caring. We're sharing our content because we care about the tech community and believe in continuous growth and learning in public; not because of money or KPIs. We welcome cross-posting so you're free to publish a duplicate of a post from your personal or company blog and use the &lt;em&gt;canonical URL&lt;/em&gt; metadata to refer to your original post both technically (for SEO purposes) and visibly in the article header.&lt;/p&gt;

&lt;p&gt;We believe that content should be shared in the open and that it should be free from conflict of interest. This is our aspiration. No business decisions getting in the way. No corporations censoring our opinions, experiences, or attempts at progress and knowledge sharing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#community"&gt;
  &lt;/a&gt;
  Community
&lt;/h1&gt;

&lt;p&gt;Feedback is very welcome; comments are always open. We have a private Discord server open to all content creators. This is also the place for everyone publishing on This is Learning publications or contributing to our open knowledge projects. If you are a tech writer or content creator, we would love for you to join even if you're not publishing with us or contributing to our projects although you're more than welcome to do so.&lt;/p&gt;

&lt;p&gt;When you publish with This is Learning, you're likely to be discovered by readers, by DEV Community curators, and by search engines. Your content is shared with your peers in the private Discord server as well as on our official Twitter accounts, (&lt;a href="https://twitter.com/Thisis_Learning"&gt;@Thisis_Learning&lt;/a&gt; and &lt;a href="https://twitter.com/Thisis_Angular"&gt;@Thisis_Angular&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Get in touch with Lars Gyrup Brink Nielsen to join our community of tech authors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DM &lt;a href="https://dev.to/layzee"&gt;Lars Gyrup Brink Nielsen&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Email &lt;a href="mailto:larsbrinknielsen@gmail.com"&gt;larsbrinknielsen@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Tweet/DM &lt;a href="https://twitter.com/LayZeeDK"&gt;@LayZeeDK&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Together we can.&lt;/p&gt;

</description>
      <category>learninginpublic</category>
      <category>webdev</category>
      <category>community</category>
    </item>
    <item>
      <title>Head recursion Vs Tail recursion</title>
      <author>soorya54</author>
      <pubDate>Mon, 03 May 2021 05:23:27 +0000</pubDate>
      <link>https://dev.to/soorya54/head-recursion-vs-tail-recursion-22o3</link>
      <guid>https://dev.to/soorya54/head-recursion-vs-tail-recursion-22o3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-recursion"&gt;
  &lt;/a&gt;
  What is Recursion?
&lt;/h2&gt;

&lt;p&gt;A recursion is a function which calls itself directly or indirectly over a defined boundary to generate user expected results.&lt;/p&gt;

&lt;p&gt;Some common problems for recursion are &lt;strong&gt;Fibonacci series, Factorial of an integer and Tower of Hanoi&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#recursion-example"&gt;
  &lt;/a&gt;
  Recursion Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

// T(n) = Θ(n)
// Aux space = Θ(n)

int getFactorial(int n) {
    if(n==0 || n==1)
        return 1;
    return n*getFactorial(n-1);
}

int main() {
    int n, res;
    scanf("%d", &amp;amp;n);

    res = getFactorial(n);
    printf("%d", res);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#test-case"&gt;
  &lt;/a&gt;
  Test case
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input
4

Output
24
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#head-recursion"&gt;
  &lt;/a&gt;
  Head recursion
&lt;/h2&gt;

&lt;p&gt;If a recursion has code statements to be executed after function call then it is a Head recursion. Head recursions are generally hard to convert into loop statements.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void fun(int n) {
    if(n==0)
        return 0;

    fun(n-1);
    printf("%d", n); // Post recursive operation
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tail-recursion"&gt;
  &lt;/a&gt;
  Tail recursion
&lt;/h2&gt;

&lt;p&gt;Tail recursions will not have any code statements after function calls and are generally at the end of the function declaration. Tail recursions are easy to convert into loop statements.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void fun(int n) {
    if(n==0)
        return 0;

    printf("%d", n); 
    fun(n-1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#which-is-better"&gt;
  &lt;/a&gt;
  Which is better?
&lt;/h2&gt;

&lt;p&gt;Generally, tail recursions are always better. Even though they both have same time complexity and Auxiliary space, tail recursions takes an edge in terms of memory in function stack. Head recursions will wait in function stack memory until the post recursion code statements are executed which causes a latency in overall results, whereas tail recursions will be terminated in function stack over execution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pfc6Kz3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbcwhwt1e5j118uan6mz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pfc6Kz3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbcwhwt1e5j118uan6mz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading!!&lt;/strong&gt; If you have any questions about the post feel free to leave a comment below.&lt;/p&gt;

&lt;p&gt;Follow me on twitter: &lt;a href="https://twitter.com/soorya_54"&gt;@soorya_54&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>recursion</category>
      <category>datastructures</category>
    </item>
    <item>
      <title>Natural Language Processing 101</title>
      <author>Bala Priya</author>
      <pubDate>Mon, 03 May 2021 04:53:15 +0000</pubDate>
      <link>https://dev.to/balapriya/natural-language-processing-101-4226</link>
      <guid>https://dev.to/balapriya/natural-language-processing-101-4226</guid>
      <description>&lt;p&gt;With the huge influx of unstructured text data from a plethora of social media platforms , different forums and a whole wealth of documents, it’s evident that processing these sources of data to distill the information that they contain is challenging because of the inherent complexity involved in processing them. &lt;/p&gt;

&lt;p&gt;Natural Language Processing (NLP) helps greatly in processing, analyzing and understanding these sources to gain information and meaningful insights; With the recent advances in computing and easier access to computing resources, certain Deep Learning models have achieved SOTA in solving some of the most challenging NLP tasks. &lt;/p&gt;

&lt;p&gt;The NLP series by Women Who Code Data Science track gives the learners a comprehensive learning path; starting from the basics of NLP, gradually introducing advanced concepts like Deep Learning approaches to solve NLP tasks.&lt;/p&gt;

&lt;p&gt;In this blog post, let us focus on answering the following questions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is NLP?&lt;/li&gt;
&lt;li&gt;What are some interesting use cases of NLP?&lt;/li&gt;
&lt;li&gt;What are the challenges in processing natural language?&lt;/li&gt;
&lt;li&gt;What are common text preprocessing techniques?&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#what-is-nlp"&gt;
  &lt;/a&gt;
  What is NLP?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Natural language processing (NLP) can be considered to be a subfield of linguistics, computer science, and artificial intelligence concerned with the interactions between computers and human language; in particular, how to program computers to process and analyze large amounts of natural language data. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With interesting applications such as text classification, sentiment analysis, machine translation, speech to text, text to speech, and so on, NLP has evolved over the past few decades from rule-based approaches, statistical techniques to AI-powered applications in the recent past.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#interesting-use-cases-of-nlp"&gt;
  &lt;/a&gt;
  Interesting use cases of NLP
&lt;/h2&gt;

&lt;p&gt;Let’s take a look at some of the common use cases of NLP.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Machine Translation&lt;/strong&gt;: Machine Translation is the task of automatically converting one natural language into another while preserving the meaning of the input text and producing fluent text in the output language. However, this task of machine translation comes with inherent challenges.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Text Classification&lt;/strong&gt;: Text Classification is the process of assigning tags or categories to text according to its content; It’s a fundamental problem in NLP and can be done either manually(tedious, time-consuming, and susceptible to human errors) or by leveraging ML techniques.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sentiment Analysis&lt;/strong&gt;: Sentiment Analysis is the contextual mining of text which identifies and extracts subjective information in the source text, such as recognizing polarity(positive, negative, neutral), identifying emotions, etc. A typical example is in the e-commerce industry, where mining and analyzing reviews for gaining insights on customer satisfaction and experience, identifying potential areas for improvement are important.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Virtual assistants such as Siri, Alexa and Cortana; Google Translate, Speech to text and text to speech converters are all cool NLP applications that we use in our everyday lives!&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#challenges-in-understanding-natural-language"&gt;
  &lt;/a&gt;
  Challenges in understanding natural language
&lt;/h2&gt;

&lt;p&gt;Natural language has such great diversity, and every language has its own rich grammar and uniqueness. The following are some of the inherent challenges that arise in NLP tasks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ambiguity"&gt;
  &lt;/a&gt;
  Ambiguity
&lt;/h3&gt;

&lt;p&gt;Ambiguity is an intrinsic characteristic of human conversations and is particularly challenging in Natural Language Understanding scenarios where there might be different forms that are relevant in natural language and in the AI system that we’ve programmed. In AI theory, the process of handling ambiguity is called disambiguation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#synonymity"&gt;
  &lt;/a&gt;
  Synonymity
&lt;/h3&gt;

&lt;p&gt;Synonymity stems from the fact that we can express the same idea with different terms (which are also dependent on the specific context); For example, ‘big’ and ‘large’ have a similar meaning when referring to sizes, whereas ‘large’ doesn’t make sense when used as a qualifier to the word ‘sister.’&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coreference"&gt;
  &lt;/a&gt;
  Co-reference
&lt;/h3&gt;

&lt;p&gt;Co-reference is the process of finding all expressions that refer to the same entity in a text . Co-Reference resolution is an important step for a lot of higher-level NLP tasks that involve natural language understanding and is often instrumental in improving the performances of neural architectures like RNN and LSTM.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntactic-rules"&gt;
  &lt;/a&gt;
  Syntactic Rules
&lt;/h3&gt;

&lt;p&gt;Knowledge about the structure and syntax of the language is often helpful.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#text-preprocessing"&gt;
  &lt;/a&gt;
  Text preprocessing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Contraction Mapping/ Expanding Contractions:&lt;/strong&gt; Contractions are a shortened version of words or a group of words, quite common in both spoken and written language. In English, they are quite common, such as I will to I’ll, I have to I’ve , do not to don’t, etc. Mapping these contractions to their expanded form helps in text standardization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tokenization:&lt;/strong&gt; Tokenization is the process of separating a piece of text into smaller units called tokens. Given a document, tokens can be sentences, words, subwords, or even characters depending on the application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Noise cleaning:&lt;/strong&gt; Special characters and symbols contribute to extra noise in unstructured text. Using regular expressions to remove them or using tokenizers, which do the pre-processing step of removing punctuation marks and other special characters, is recommended.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Spell-checking:&lt;/strong&gt; Documents in a corpus are prone to spelling errors; In order to make the text clean for the subsequent processing, it is a good practice to run a spell checker and fix the spelling errors before moving on to the next steps.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stopwords Removal:&lt;/strong&gt; Stop words are those words which are very common and often less significant. Hence, removing these is a pre-processing step as well. This can be done explicitly by retaining only those words in the document which are not in the list of stop words or by specifying the stop word list as an argument in &lt;code&gt;CountVectorizer&lt;/code&gt; or &lt;code&gt;TfidfVectorizer&lt;/code&gt; methods when getting Bag-of-Words(BoW)/TF-IDF scores for the corpus of text documents.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stemming/Lemmatization:&lt;/strong&gt; Both stemming and lemmatization are methods to reduce words to their base form. While stemming follows certain rules to truncate the words to their base form, often resulting in words that are not lexicographically correct, lemmatization always results in base forms that are lexicographically correct. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;However, stemming is a lot faster than lemmatization. Hence, to stem/lemmatize is dependent on whether the application needs quick pre-processing or requires more accurate base forms.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#references-and-additional-reading"&gt;
  &lt;/a&gt;
  References and Additional Reading
&lt;/h2&gt;

&lt;p&gt;[1]&lt;a href="https://towardsdatascience.com/a-practitioners-guide-to-natural-language-processing-part-i-processing-understanding-text-9f4abfd13e72"&gt;https://towardsdatascience.com/a-practitioners-guide-to-natural-language-processing-part-i-processing-understanding-text-9f4abfd13e72&lt;/a&gt;&lt;br&gt;
[2]&lt;a href="https://www.analyticsvidhya.com/blog/2020/04/beginners-guide-exploratory-data-analysis-text-data/"&gt;https://www.analyticsvidhya.com/blog/2020/04/beginners-guide-exploratory-data-analysis-text-data/&lt;/a&gt;&lt;br&gt;
[3]&lt;a href="https://towardsdatascience.com/a-complete-exploratory-data-analysis-and-visualization-for-text-data-29fb1b96fb6a"&gt;https://towardsdatascience.com/a-complete-exploratory-data-analysis-and-visualization-for-text-data-29fb1b96fb6a&lt;/a&gt;&lt;br&gt;
[4]&lt;a href="https://towardsdatascience.com/preprocessing-text-data-using-python-576206753c28"&gt;https://towardsdatascience.com/preprocessing-text-data-using-python-576206753c28&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nlp</category>
      <category>python</category>
    </item>
    <item>
      <title>April 2021 Recap</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 03 May 2021 04:19:54 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/april-2021-recap-15eo</link>
      <guid>https://dev.to/alvaromontoro/april-2021-recap-15eo</guid>
      <description>&lt;p&gt;This month was kind of slow. I got different mini-projects out (which is always fun) and did a bunch of CSS drawings and cartoons. Maybe next month I'll play a little bit more with 3D CSS again... we'll see.&lt;/p&gt;

&lt;p&gt;Here are some of the things I did during April 2021:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-things"&gt;
  &lt;/a&gt;
  Tech Things
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#css-the-wonderful-wizard-of-oz"&gt;
  &lt;/a&gt;
  CSS The Wonderful Wizard of Oz
&lt;/h3&gt;

&lt;p&gt;An illustration of The Wizard of Oz's main characters done just using clip-path in CSS.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/LYxLxpG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bezos-calculator"&gt;
  &lt;/a&gt;
  Bezos Calculator
&lt;/h3&gt;

&lt;p&gt;Do you want to know how much money did Jeff Bezos gained while you were reading this article? Visit &lt;a href="https://bezoscalculator"&gt;Bezos' Calculator&lt;/a&gt; or watch the following demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/ZELrvbo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-farmer"&gt;
  &lt;/a&gt;
  CSS Farmer
&lt;/h3&gt;

&lt;p&gt;A cartoon of a farmer done with CSS.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/poRZNaL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#humans-are-allergic-to-change"&gt;
  &lt;/a&gt;
  Humans are allergic to change
&lt;/h3&gt;

&lt;p&gt;One of the few small animations I did this month (the others are more tongue-in-cheek). And a &lt;a href="https://www.youtube.com/watch?v=C40af3XvcKQ"&gt;video of the coding process&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/poRYZgv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-pirate"&gt;
  &lt;/a&gt;
  CSS Pirate
&lt;/h3&gt;

&lt;p&gt;One more CSS illustration, this time a cartoon of a pirate. There's a more interesting &lt;a href="https://codepen.io/alvaromontoro/pen/gOgNxeJ"&gt;animated version&lt;/a&gt; thanks to Temani Afif. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/JjEqzoY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nontech-things"&gt;
  &lt;/a&gt;
  Non-Tech Things
&lt;/h2&gt;

&lt;p&gt;I asked for suggestions of graphic novels on Twitter and ended up with three recommendations that I read and enjoyed (the first three from the list):&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;th&gt;Style&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.amazon.com/gp/product/0062278223"&gt;Nimona&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Noelle Stevenson&lt;/td&gt;
&lt;td&gt;Fantasy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.amazon.com/gp/product/1684156254/"&gt;Slaughterhouse-Five: The Graphic Novel&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Kurt Vonnegut, Ryan North &amp;amp; Albert Monteys&lt;/td&gt;
&lt;td&gt;Graphic Novel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.amazon.com/gp/product/1419731505/"&gt;DUNE: The Graphic Novel, Book 1&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;James Tynion IV &amp;amp; Werther Dell'Edera&lt;/td&gt;
&lt;td&gt;Graphic Novel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.amazon.com/Hero-Code-Lessons-Learned-Lives/dp/1538719967/"&gt;The Hero Code&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Admiral William H. McRaven&lt;/td&gt;
&lt;td&gt;Biography&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.amazon.com/Bell-Jar-Modern-Classics/dp/0060837020/"&gt;The Bell Jar&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Sylvia Plath&lt;/td&gt;
&lt;td&gt;Novel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.amazon.com/Kick-Ass-Mark-Millar/dp/0785134352/"&gt;Kick-Ass&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Mark Millar &amp;amp; John Romita Jr.&lt;/td&gt;
&lt;td&gt;Graphic Novel&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Apart from the graphic novels, I read The Hero Code (a book in the style of Make Your Bed by the same author, but not quite there) and The Bell Jar (I think because I saw it once on The Simpsons and was curious about reading it).&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>showdev</category>
    </item>
    <item>
      <title>6 Nullish coalescing operators every javascript programmer must know !</title>
      <author>Sudarshan Sawandkar</author>
      <pubDate>Mon, 03 May 2021 03:58:48 +0000</pubDate>
      <link>https://dev.to/sudarshansb143/6-nullish-coalescing-operators-every-javascript-programmer-must-know-12m2</link>
      <guid>https://dev.to/sudarshansb143/6-nullish-coalescing-operators-every-javascript-programmer-must-know-12m2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tldr-"&gt;
  &lt;/a&gt;
  TL:DR :
&lt;/h1&gt;

&lt;p&gt;Most of the time out javascript code becomes clumsier if we inserted the multiple null checks for the several entities. Those checks are kind of mandatory and if those checks were removed then this happens&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;TypeError: Cannot &lt;span class="nb"&gt;read &lt;/span&gt;property &lt;span class="s1"&gt;'xyz'&lt;/span&gt; of undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For preventing  the  programme from crashing and also making a code a bit neater, in this article I will explain some ways to handle this tricky situations&lt;/p&gt;




&lt;p&gt;For the sake of examples, I will use following object to show you some example usage of  the operators&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sud&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;hobbie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;secodn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Chess&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#ternary-operator"&gt;
  &lt;/a&gt;
  Ternary Operator
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Ternary operator is most commonly used operator in the code. Most programmers use this as the replacement of inline  if --- else. This operator mainly used in the conditional rendering of components in React&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//ternary &lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sud&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Howdy Sud &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Howdy Stranger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is pretty straight forward. before &lt;strong&gt;?&lt;/strong&gt; is  the condition. immediately after &lt;strong&gt;?&lt;/strong&gt; symbol is the block for true value of condition and other is for false result of condition&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#super-powered-ternary-operator"&gt;
  &lt;/a&gt;
  💥 Super Powered Ternary Operator 💥
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Ternary operator really shines when it is nested  with itself and can be replace if ...... else ladder completely  is used properly. In the following snippet, I used the operator as the if else block and made the  code more readable for anyone&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//ternary as if else &lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isAdult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; You are adult :)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="p"&gt;?&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You are on the way &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No Kids here &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isAdult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's pretty simple here, Append multiple conditions with consecutive block and then put last else block for default condition &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#default-assignment-with-"&gt;
  &lt;/a&gt;
  Default Assignment with &lt;em&gt;??&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Default assignment is one of my favorite once. This allows me  to provide the placeholder value with minimal code by which we can trust the values and can implement type safety at logical level&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sudsAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Sud's age is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;sudsAge&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are assigning the default value to &lt;em&gt;sudsAge&lt;/em&gt;  if the person.age is undefined. It is pretty helpful. Thanks to this operator for saving us lengthy checks ❤&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#multi-condition-evaluation-with-includes"&gt;
  &lt;/a&gt;
  Multi Condition Evaluation with  &lt;em&gt;.includes()&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Many  times we have to check many conditions for both true / false values. For doing these,  I used to write multi-line nested code of  if and else block or use the switch statement. But here is the trick&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//check with multiple conditions&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isSporty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Chess&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cricket&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hobbie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nope&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isSporty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By replacing array values with real condition, we  can check for all true values. If any values returns false then it will won't proceed . &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#check-presence-of-property-in-object-using-"&gt;
  &lt;/a&gt;
  Check Presence of Property In Object Using &lt;em&gt;?.&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
This is most useful operator in day to day life. Whether you are dealing with async API calls or dealing with blocking tasks, we easily assume the key will be present in the response of an API or output JSON object of any operation  But, what if key is absent of undefined. Here is the trick&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sudsHobbyFirst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;hobbie&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;third&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sudsHobbyFirst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using this operator we can make sure the property is present or not and perform checks / operations according to result.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#chaining-default-assignment-and-membership-operator"&gt;
  &lt;/a&gt;
  Chaining Default Assignment and Membership Operator
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Previously mentioned operator can be super powered if chained with the default assignment. We will assign the default value to variable if the property is undefined or absent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//?. with ?? &lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sudsHobby&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;hobbie&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;third&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nothing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sudsHobby&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we are assigning the placeholder value for &lt;em&gt;sudsHobby&lt;/em&gt; &lt;br&gt;
&lt;em&gt;(🤣 you will use  this a lot 🤣 )&lt;/em&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h1&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
This my small try to explain you all the  usage of some operators which could possibly make your code neater and smaller rather than your previous code &lt;/p&gt;

&lt;p&gt;🤗Please let me know your thoughts in comments&lt;/p&gt;

&lt;p&gt;🙏hanks For Reading ...&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Rails 7 will introduce invert_where method, but it's dangerous</title>
      <author>Masataka Pocke Kuwabara</author>
      <pubDate>Mon, 03 May 2021 03:26:25 +0000</pubDate>
      <link>https://dev.to/pocke/rails-7-will-introduce-invertwhere-method-but-it-s-dangerous-50m5</link>
      <guid>https://dev.to/pocke/rails-7-will-introduce-invertwhere-method-but-it-s-dangerous-50m5</guid>
      <description>&lt;div class="ltag__tag ltag__tag__id__1"&gt;
  
    .ltag__tag__id__1 .follow-action-button{
      background-color: #CC342D !important;
      color: #FFFFFF !important;
      border-color: #CC342D !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="/t/ruby" class="ltag__tag__link"&gt;ruby&lt;/a&gt; 
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        This tag is for posts related to the Ruby language, including its libraries.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
 &lt;div class="ltag__tag ltag__tag__id__47"&gt;
  
    .ltag__tag__id__47 .follow-action-button{
      background-color: #CC0000 !important;
      color: #FFFFFF !important;
      border-color: #CC0000 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="/t/rails" class="ltag__tag__link"&gt;rails&lt;/a&gt; 
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Ruby on Rails is a popular web framework that happens to power [dev.to](/) ❤️
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;NOTE: This article based on &lt;a href="https://github.com/rails/rails/commit/11a3348c2d58f448b8f1dea4f4dbb8cd5bb95a0e"&gt;today's latest commit of the main branch&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;invert_where&lt;/code&gt; inverts all &lt;code&gt;where&lt;/code&gt; conditions.&lt;/li&gt;
&lt;li&gt;It may invert unexpected conditions, so it's dangerous.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-is-raw-invertwhere-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;invert_where&lt;/code&gt;?
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;ActiveRecord::QueryMethods::WhereChain#invert_where&lt;/code&gt; will be introduced since Rails 7. It inverts &lt;code&gt;where&lt;/code&gt; conditions.&lt;/p&gt;

&lt;p&gt;For example: (From the &lt;a href="https://github.com/rails/rails/pull/40249/files#diff-353f4f101b1bb04938d761b6e29c88e0f147084e9e276854a77ae5d9a9a3b2a8"&gt;CHANGELOG&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;
  &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:active&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;accepted: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locked: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;active&lt;/span&gt;
&lt;span class="c1"&gt;# ... WHERE `accepted` = 1 AND `locked` = 0&lt;/span&gt;

&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;active&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;invert_where&lt;/span&gt;
&lt;span class="c1"&gt;# ... WHERE NOT (`accepted` = 1 AND `locked` = 0)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;It is implemented in &lt;a href="https://github.com/rails/rails/pull/40249"&gt;#40249&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-raw-invertwhere-endraw-is-dangerous"&gt;
  &lt;/a&gt;
  Why &lt;code&gt;invert_where&lt;/code&gt; is dangerous
&lt;/h1&gt;

&lt;p&gt;The risk becomes clear with several &lt;code&gt;where&lt;/code&gt;. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;a: &lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;b: &lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;invert_where&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, &lt;code&gt;invert_where&lt;/code&gt; inverts both of the &lt;code&gt;where&lt;/code&gt; conditions. So it prints the following results.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT "posts".* FROM "posts" WHERE NOT ("posts"."a" = 'a' AND "posts"."b" = 'b')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the whole of the conditions is inverted with &lt;code&gt;NOT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This behavior will be bugs with the following three examples.&lt;/p&gt;

&lt;p&gt;The examples work with the following set-up code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"bundler/inline"&lt;/span&gt;

&lt;span class="n"&gt;gemfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"https://rubygems.org"&lt;/span&gt;

  &lt;span class="n"&gt;git_source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:github&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.git"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"activerecord"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;github: &lt;/span&gt;&lt;span class="s1"&gt;'rails/rails'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;ref: &lt;/span&gt;&lt;span class="s1"&gt;'11a3348c2d58f448b8f1dea4f4dbb8cd5bb95a0e'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"activemodel"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;github: &lt;/span&gt;&lt;span class="s1"&gt;'rails/rails'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;ref: &lt;/span&gt;&lt;span class="s1"&gt;'11a3348c2d58f448b8f1dea4f4dbb8cd5bb95a0e'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"activesupport"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;github: &lt;/span&gt;&lt;span class="s1"&gt;'rails/rails'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;ref: &lt;/span&gt;&lt;span class="s1"&gt;'11a3348c2d58f448b8f1dea4f4dbb8cd5bb95a0e'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"sqlite3"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"active_record"&lt;/span&gt;

&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;establish_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;adapter: &lt;/span&gt;&lt;span class="s2"&gt;"sqlite3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;database: &lt;/span&gt;&lt;span class="s2"&gt;":memory:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;create_table&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;force: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt; &lt;span class="ss"&gt;:role&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;datetime&lt;/span&gt; &lt;span class="ss"&gt;:disabled_at&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#1-using-raw-invertwhere-endraw-in-a-scope-definition"&gt;
  &lt;/a&gt;
  1. Using &lt;code&gt;invert_where&lt;/code&gt; in a scope definition
&lt;/h2&gt;

&lt;p&gt;If a scope definition includes &lt;code&gt;invert_where&lt;/code&gt;, the &lt;code&gt;invert_where&lt;/code&gt; affects outside of the scope.&lt;br&gt;
For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:alive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;disabled_at: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:disabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;alive&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;invert_where&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:admin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;role: &lt;/span&gt;&lt;span class="s1"&gt;'admin'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT "users".* FROM "users" WHERE NOT ("users"."role" = 'admin' AND "users"."disabled_at" IS NULL)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, &lt;code&gt;User.admin.disabled.to_sql&lt;/code&gt; expects returning disabled admin users. But actually, it returns not-admin users and disabled users. It means &lt;code&gt;.admin&lt;/code&gt; scope is inverted unexpectedly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-when-the-relation-starts-in-a-different-place-with-raw-invertwhere-endraw-call"&gt;
  &lt;/a&gt;
  2. When the relation starts in a different place with &lt;code&gt;invert_where&lt;/code&gt; call
&lt;/h2&gt;

&lt;p&gt;It is similar to the first problem. In this case, &lt;code&gt;invert_whre&lt;/code&gt; is not hidden in a scope definition, but the relation and &lt;code&gt;invert_where&lt;/code&gt; are in different places.&lt;br&gt;
This problem is well described in &lt;a href="https://github.com/rails/rails/pull/40249#issuecomment-826881180"&gt;a comment&lt;/a&gt; in the pull request, which implements &lt;code&gt;invert_where&lt;/code&gt;, so I quote the comment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Imagine, somewhere within the request flow, perhaps automatically scoped by Pundit,&lt;/p&gt;


&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;current_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;
&lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;author: &lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And then later on in a controller…&lt;/p&gt;


&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;published_posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;published: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;draft_posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;published_posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;invert_where&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The draft_posts variable is now all draft posts NOT by the current user. Putting the above logic in published and unpublished scopes, respectively, would be make this issue even more confusing to debug if it did occur.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#3-with-raw-defaultscope-endraw-"&gt;
  &lt;/a&gt;
  3. With &lt;code&gt;default_scope&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Combination of &lt;code&gt;invert_where&lt;/code&gt; and &lt;code&gt;default_scope&lt;/code&gt; is surprising.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;default_scope&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;disabled_at: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:admin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;role: &lt;/span&gt;&lt;span class="s1"&gt;'admin'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;invert_where&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT "users".* FROM "users" WHERE NOT ("users"."disabled_at" IS NULL AND "users"."role" = 'admin')&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, &lt;code&gt;default_scope&lt;/code&gt; is used to ignore disabled users always. And &lt;code&gt;User.admin.invert_where&lt;/code&gt; expects returning "available non-admin users".&lt;/p&gt;

&lt;p&gt;But actually it displays an unexpected SQL. The query means "disabled, or not-admin users". Because &lt;code&gt;invert_where&lt;/code&gt; also inverts &lt;code&gt;default_scope&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I think &lt;code&gt;default_scope&lt;/code&gt; is a bad practice. The combination with &lt;code&gt;invert_where&lt;/code&gt; makes it worse.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;invert_where&lt;/code&gt; is dangerous, so you need to be careful if you want to use it.&lt;/p&gt;

&lt;p&gt;If you pay close attention to the method, you can avoid the problems. But human makes mistakes, and it is not easy for beginners.&lt;br&gt;
So I proposed a RuboCop rule for &lt;code&gt;invert_where&lt;/code&gt; to rubocop-rails project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rubocop/rubocop-rails/issues/470"&gt;https://github.com/rubocop/rubocop-rails/issues/470&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But I think it still a dangerous method even if the cop is implemented. So I'm wondering if it should be reverted until releasing Rails 7.&lt;/p&gt;




&lt;p&gt;This article is self-translated from &lt;a href="https://pocke.hatenablog.com/entry/2021/04/28/233930"&gt;a Japanese article&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
