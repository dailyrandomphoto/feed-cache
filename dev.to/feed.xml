<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Pixelart and the image-rendering Paradox</title>
      <author>Timothy Foster</author>
      <pubDate>Sat, 07 Aug 2021 21:00:45 +0000</pubDate>
      <link>https://dev.to/auroratide/pixelart-and-the-image-rendering-paradox-2p8k</link>
      <guid>https://dev.to/auroratide/pixelart-and-the-image-rendering-paradox-2p8k</guid>
      <description>&lt;p&gt;CSS offers a nifty property called &lt;code&gt;image-rendering&lt;/code&gt; which lets you influence how images scale. Normally, when you take a small image and make it bigger, the image becomes blurry. That's kinda ok for photos, but for pixelart, the effect is... rather devastating.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--233sYHM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xjoto6lsltth0y5pswj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--233sYHM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xjoto6lsltth0y5pswj.png" alt="A pixelart blue-haired character is upscaled into a fuzzy mess."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;strong&gt;Credit:&lt;/strong&gt; Lea, a character from the game &lt;a href="http://cross-code.com"&gt;Cross Code&lt;/a&gt;



&lt;p&gt;
  &lt;small&gt;What is &lt;strong&gt;pixelart&lt;/strong&gt;?&lt;/small&gt;
  &lt;small&gt;Pixelart is a way of creating pictures. Rather than using brush strokes, each individual pixel is carefully colored. It's like if you were given just a few hundred square tiles and asked to make a mosaic out of them.&lt;/small&gt; 

&lt;/p&gt;

&lt;p&gt;However, thanks to &lt;code&gt;image-rendering&lt;/code&gt;, it's possible to upscale images in a way that highlights their pixelated nature! Just a couple lines of code later and...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.pixelart&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* This order matters! */&lt;/span&gt;
    &lt;span class="nl"&gt;image-rendering&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;crisp-edges&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;image-rendering&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pixelated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/auroratide/embed/RwVywNK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;...hooray! It looks fantastic!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Except, wait just a second.&lt;/em&gt; Why on earth does the above example CSS specify &lt;code&gt;image-rendering&lt;/code&gt; twice, and with two different values? Something's fishy!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-paradox"&gt;
  &lt;/a&gt;
  The Paradox
&lt;/h2&gt;

&lt;p&gt;It turns out there's a bit of a &lt;strong&gt;paradox&lt;/strong&gt; in the browser support for &lt;code&gt;image-rendering&lt;/code&gt;. Waddle on over to &lt;a href="https://caniuse.com/css-crisp-edges"&gt;Can I Use&lt;/a&gt; and we see the following weirdness.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QbobY3Nr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqh5bo9rfeup40ud4hv2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QbobY3Nr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqh5bo9rfeup40ud4hv2.png" alt="Chrome supports the pixelated value, but not crisp-edges."&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rlE3Ljrt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cikpwtv4inj3pt9s9n9g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rlE3Ljrt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cikpwtv4inj3pt9s9n9g.png" alt="Firefox supports the crisp-edges value, but not pixelated."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Chrome and Firefox notate that they support opposite properties&lt;/p&gt;



&lt;p&gt;That's right! Chrome supports &lt;code&gt;pixelated&lt;/code&gt; but not &lt;code&gt;crisp-edges&lt;/code&gt;, and Firefox supports &lt;code&gt;crisp-edges&lt;/code&gt; but not &lt;code&gt;pixelated&lt;/code&gt;. In order to support both browsers, both values had to be specified in the example above, utilizing the fact of CSS that if one value is invalid then the other will be used.&lt;/p&gt;

&lt;p&gt;What I learned, though, is that resolving this paradox is &lt;strong&gt;not&lt;/strong&gt; as simple as "just specify both properties", because the properties have different &lt;em&gt;semantics&lt;/em&gt;. That is, even though &lt;code&gt;crisp-edges&lt;/code&gt; and &lt;code&gt;pixelated&lt;/code&gt; accomplish the same &lt;em&gt;result&lt;/em&gt;, they &lt;em&gt;mean&lt;/em&gt; different things.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3QSdBAqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbr8agy0ynrsu5qlexcl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QSdBAqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbr8agy0ynrsu5qlexcl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To resolve this, we'll need to embark on a mystical journey through different versions of the specification, discussions on implementations, and—&lt;/p&gt;

&lt;p&gt;Well actually, I already did all that! Instead, I'll walk through what I discovered by answering three key questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why is there a paradox?&lt;/li&gt;
&lt;li&gt;What is the difference between &lt;code&gt;pixelated&lt;/code&gt; and &lt;code&gt;crisp-edges&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;What CSS should I use for pixelated images? What about for images with crisp edges?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-with-the-paradox"&gt;
  &lt;/a&gt;
  What's with the paradox?
&lt;/h2&gt;

&lt;p&gt;Without being involved in the dialogue directly, it's hard to pinpoint the precise reasons why &lt;code&gt;image-rendering&lt;/code&gt; has the support it has. After delving through documentation, discussions, and definitions &lt;small&gt;(oh my!)&lt;/small&gt;, there was one truth underpinning it all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The rules for how &lt;code&gt;image-rendering&lt;/code&gt; should work are not set in stone.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In fact, despite this property having first appeared in 2012, just a few months ago in &lt;time&gt;February 2021&lt;/time&gt; the &lt;strong&gt;&lt;a href="https://drafts.csswg.org/css-images-3/#the-image-rendering"&gt;images specification&lt;/a&gt;&lt;/strong&gt; changed! And furthermore, it had seen periodic change over its nine-year history. In other words, &lt;code&gt;image-rendering&lt;/code&gt; is undergoing active discussion, at least some of which has come from feedback from browsers implementing the feature for testing.&lt;/p&gt;

&lt;p&gt;
  &lt;small&gt;What is the &lt;strong&gt;CSS Specification&lt;/strong&gt;?&lt;/small&gt;
  &lt;small&gt;The specification is a set of documents detailing what the features of CSS are, how they should be used, and how they should be implemented by browsers. It's basically the source of truth for what CSS is and will be, and has been in constant development since its inception decades ago. Feel free to read more about the &lt;a href="https://www.w3.org/Style/2011/CSS-process"&gt;CSS standardization process&lt;/a&gt;.&lt;/small&gt; 

&lt;/p&gt;

&lt;p&gt;As a result, the property has only ever been implemented to different degrees, with Firefox and Chrome having taken different routes. And since the spec is still under discussion, no one has a complete implementation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CHWWf5MT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jktu93f4rcw6j3f9iyqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CHWWf5MT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jktu93f4rcw6j3f9iyqf.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the end, Firefox developed &lt;code&gt;crisp-edges&lt;/code&gt; because it already supported the non-standard property &lt;code&gt;-moz-crisp-edges&lt;/code&gt;, which was meant to be the same thing. Chrome had implemented &lt;code&gt;pixelated&lt;/code&gt; because, at the time in 2014, the spec for &lt;code&gt;pixelated&lt;/code&gt; was more straightforward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pixelated-or-crisp-edges"&gt;
  &lt;/a&gt;
  Pixelated or Crisp Edges?
&lt;/h2&gt;

&lt;p&gt;To grasp the &lt;code&gt;pixelated&lt;/code&gt; and &lt;code&gt;crisp-edges&lt;/code&gt; values, it's important to understand the purpose of the &lt;code&gt;image-rendering&lt;/code&gt; property.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-semantics-of-imagerendering"&gt;
  &lt;/a&gt;
  The Semantics of image-rendering
&lt;/h3&gt;

&lt;p&gt;I'm gonna unoriginally paste a direct quote from the CSS spec, emphasis added:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The image-rendering property provides a hint to the user-agent about &lt;strong&gt;what aspects of an image are most important to preserve&lt;/strong&gt; when the image is scaled...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When an image is scaled, the computer either has to fill in missing details when scaled up or choose what to collapse when scaled down. That can be tricky, kinda like doubling a cooking recipe but realizing you don't have enough ingredients. And so, there's no single correct strategy for scaling images, leading to a diversity of &lt;strong&gt;scaling algorithms&lt;/strong&gt; meant to do the job.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--drG7_XZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chvd3vza423gy6odgumq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--drG7_XZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chvd3vza423gy6odgumq.png" alt="Lea is doubled in size, but the gaps in the large image are not filled in."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Scaling algorithms fill in the gaps.&lt;/p&gt;



&lt;p&gt;That said, notice that the spec does &lt;em&gt;not&lt;/em&gt; say that the purpose of &lt;code&gt;image-rendering&lt;/code&gt; is to choose a scaling algorithm. Rather, the goal is to specify &lt;q&gt;what aspects of an image are most important to preserve&lt;/q&gt;. For example, when we scale an image, do we care more about the way colors blend, or about keeping the edges sharp? Depending on the answer, one algorithm may be better than another.&lt;/p&gt;

&lt;p&gt;Though a scaling algorithm will be ultimately chosen, the point of &lt;code&gt;image-rendering&lt;/code&gt; is really to provide the browser additional information so it knows better how to treat the image!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-semantics-of-pixelated-and-crispedges"&gt;
  &lt;/a&gt;
  The Semantics of pixelated and crisp-edges
&lt;/h3&gt;

&lt;p&gt;Knowing that &lt;code&gt;image-rendering&lt;/code&gt; is all about identifying what aspects of the image are important to preserve, we can see how &lt;code&gt;pixelated&lt;/code&gt; and &lt;code&gt;crisp-edges&lt;/code&gt; are defined.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;pixelated&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The image is scaled in a way that &lt;strong&gt;preserves the pixelated nature&lt;/strong&gt; of the original as much as possible.&lt;/p&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;crisp-edges&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The image is scaled in a way that &lt;strong&gt;preserves contrast and edges&lt;/strong&gt;, and which does not smooth colors or introduce blur to the image in the process.&lt;/p&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;For pixelated images, the emphasis is on the pixels, but for crispy images, the emphasis is on the edges. The key point here is that pixels are &lt;em&gt;not&lt;/em&gt; the same as edges!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The &lt;code&gt;pixelated&lt;/code&gt; and &lt;code&gt;crisp-edges&lt;/code&gt; values are not semantically interchangeable.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can illustrate the difference by scaling up our pixelart Lea image by a non-integral factor, say 2.5 times the original size, using algorithms the spec currently mandates.&lt;/p&gt;

&lt;p&gt;
  &lt;small&gt;What algorithms does the spec mandate?&lt;/small&gt;
  &lt;small&gt;For &lt;code&gt;crisp-edges&lt;/code&gt;, the &lt;a href="https://tech-algorithm.com/articles/nearest-neighbor-image-scaling/"&gt;nearest neighbor&lt;/a&gt; algorithm is used. For &lt;code&gt;pixelated&lt;/code&gt;, nearest neighbor is used to take the image to the nearest integer scale. Afterward, a smooth-scaling algorithm takes the image the rest of the way.&lt;/small&gt; 

&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVsn03HE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv02t1bll40cw2vy7elv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVsn03HE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv02t1bll40cw2vy7elv.png" alt="A close-up of Lea's pixelart."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The original for reference&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q5lbuyPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywbyj4z4otw3zqi7751x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q5lbuyPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywbyj4z4otw3zqi7751x.png" alt="The version upscaled with pixelated has minor blurring between pixel boundaries. The crisp-edges version has no blurring, but pixels are different sizes."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pixelated introduces blurring, but crisp-edges distorts the pixelation.&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;For &lt;code&gt;pixelated&lt;/code&gt;, pixels must be square, and the only way to preserve that property is to allow the enlarged pixels to overlap. The blurring on cell boundaries represent places where pixels are overlapping.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;crisp-edges&lt;/code&gt;, blurring is not allowed since the contrast between colors is most important. Resizing a pixelart image, therefore, results in cells that are not square, which distorts the pixelation aesthetic.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resolving-the-paradox"&gt;
  &lt;/a&gt;
  Resolving the Paradox
&lt;/h2&gt;

&lt;p&gt;Equipped with the history and semantics of &lt;code&gt;image-rendering&lt;/code&gt;, we can resolve the paradox!&lt;/p&gt;

&lt;p&gt;For pixelart, it is clear the &lt;code&gt;pixelated&lt;/code&gt; value should be used; that's what most closely matches the semantics of the art. However, since Firefox does not yet support &lt;code&gt;pixelated&lt;/code&gt;, we can fall back onto its currently provided solution, &lt;code&gt;crisp-edges&lt;/code&gt;, which will resolve to the nearest neighbor algorithm.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.pixelart&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;image-rendering&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;crisp-edges&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;image-rendering&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pixelated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The fact that &lt;code&gt;pixelated&lt;/code&gt; is last is &lt;em&gt;very important&lt;/em&gt;! If we imagine a future where Firefox has implemented &lt;code&gt;pixelated&lt;/code&gt;, then we want that value to be applied instead of &lt;code&gt;crisp-edges&lt;/code&gt;. Letting the most semantically appropriate value be last future-proofs the solution.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;For maximum compatibility, the undead Internet Explorer browser can be supported with &lt;code&gt;-ms-interpolation-mode: nearest-neighbor&lt;/code&gt;.&lt;/small&gt;&lt;/p&gt;




&lt;p&gt;And what about images which should have high contrast?&lt;/p&gt;

&lt;p&gt;Chrome and Safari do not support &lt;code&gt;crisp-edges&lt;/code&gt;, but instead support a webkit property called &lt;code&gt;-webkit-optimize-contrast&lt;/code&gt; which bears similar semantics. Therefore, rather than use &lt;code&gt;pixelated&lt;/code&gt;, it is better to use something that more closely resembles what &lt;code&gt;crisp-edges&lt;/code&gt; means:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.crispy-art&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;image-rendering&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-webkit-optimize-contrast&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;image-rendering&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;crisp-edges&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;And with that, we can celebrate with the final demo!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/auroratide/embed/wvdYgwv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Pixelart is of Lea from the game &lt;a href="http://cross-code.com"&gt;Cross Code&lt;/a&gt; by &lt;a href="http://www.radicalfishgames.com/"&gt;Radical Fish Games&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://caniuse.com/css-crisp-edges"&gt;Can I Use&lt;/a&gt; - current browser support for &lt;code&gt;image-rendering&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;cite&gt;&lt;a href="https://drafts.csswg.org/css-images-3/#the-image-rendering"&gt;CSS Images Module Level 3&lt;/a&gt;&lt;/cite&gt; - the current Editor's Draft of the specification for CSS images&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=317991"&gt;Chromium Issue&lt;/a&gt; - Tracking Chrome's supprt&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=856337"&gt;Mozilla Issue&lt;/a&gt; - Tracking Firefox's support&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/w3c/csswg-drafts/issues/5837"&gt;Pixelated Github Issue&lt;/a&gt; - Tracking recent updates to the spec&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And some extra stuff on my website, cut from this article for brevity:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://auroratide.com/posts/pixelart-and-the-image-rendering-paradox#timeline-of-image-rendering"&gt;Timeline of image-rendering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://auroratide.com/posts/pixelart-and-the-image-rendering-paradox#what-changed-in-february-2021"&gt;What changed in February 2021?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>art</category>
    </item>
    <item>
      <title>10 Tips For Clean Code</title>
      <author>Clean Code Studio</author>
      <pubDate>Sat, 07 Aug 2021 20:49:27 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/10-tips-for-clean-code-4nm6</link>
      <guid>https://dev.to/cleancodestudio/10-tips-for-clean-code-4nm6</guid>
      <description>&lt;center&gt;
&lt;h2&gt;
  &lt;a href="#10-tips-for-clean-code"&gt;
  &lt;/a&gt;
  10 Tips for Clean Code
&lt;/h2&gt;


&lt;/center&gt;




&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o4gKG1jT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtysl91txx7r5rzj2i6i.png" alt="down arrow"&gt;&lt;br&gt;
&lt;/center&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUDxqH5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1280816353755246593/EkYpwPOx_normal.jpg" alt="Clean Code Studio ☕ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Clean Code Studio ☕
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/cleancodestudio"&gt;@cleancodestudio&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      You are responsible for your code.&lt;br&gt;&lt;br&gt;Not your organization.&lt;br&gt;Not your manager.&lt;br&gt;Not your team.&lt;br&gt;&lt;br&gt;You.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:27 PM - 07 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424089754006695941" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424089754006695941" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424089754006695941" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;&lt;br&gt;
&lt;/center&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUDxqH5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1280816353755246593/EkYpwPOx_normal.jpg" alt="Clean Code Studio ☕ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Clean Code Studio ☕
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/cleancodestudio"&gt;@cleancodestudio&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Comments are often lies waiting to happen. Code should speak for itself when possible.&lt;br&gt;&lt;br&gt;Ask yourself: “Can I write code that expresses this comment so I can remove this comment?”
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:30 PM - 07 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424090538685386756" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424090538685386756" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424090538685386756" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUDxqH5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1280816353755246593/EkYpwPOx_normal.jpg" alt="Clean Code Studio ☕ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Clean Code Studio ☕
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/cleancodestudio"&gt;@cleancodestudio&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Single responsibility.&lt;br&gt;&lt;br&gt;Clean code does one thing, &lt;br&gt;does it well, and does it only.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:34 PM - 07 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424091698758656012" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424091698758656012" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424091698758656012" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUDxqH5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1280816353755246593/EkYpwPOx_normal.jpg" alt="Clean Code Studio ☕ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Clean Code Studio ☕
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/cleancodestudio"&gt;@cleancodestudio&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Clean code is minimalistic.&lt;br&gt; &lt;br&gt;Less code is less buggy.&lt;br&gt;Less code is less onboarding.&lt;br&gt;Less code is less maintenance.&lt;br&gt;&lt;br&gt;Less Code = Less Liability.&lt;br&gt;&lt;br&gt;Clean Code is minimalistic.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:38 PM - 07 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424092656515362822" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424092656515362822" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424092656515362822" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUDxqH5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1280816353755246593/EkYpwPOx_normal.jpg" alt="Clean Code Studio ☕ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Clean Code Studio ☕
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/cleancodestudio"&gt;@cleancodestudio&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Write code that expresses intent.&lt;br&gt;&lt;br&gt;Ex: Use verbs to name functions.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:28 PM - 07 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424090135214399490" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424090135214399490" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424090135214399490" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUDxqH5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1280816353755246593/EkYpwPOx_normal.jpg" alt="Clean Code Studio ☕ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Clean Code Studio ☕
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/cleancodestudio"&gt;@cleancodestudio&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Work in cycles: incremental and iterative.&lt;br&gt;&lt;br&gt;Nothing is ever done, iteratively make code better.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:35 PM - 07 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424091952736313348" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424091952736313348" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424091952736313348" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUDxqH5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1280816353755246593/EkYpwPOx_normal.jpg" alt="Clean Code Studio ☕ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Clean Code Studio ☕
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/cleancodestudio"&gt;@cleancodestudio&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Boy Scout rule - leave the code better than you found it.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:31 PM - 07 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424090768113815557" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424090768113815557" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424090768113815557" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;


&lt;center&gt;
&lt;br&gt;
&lt;a href="https://twitter.com/cleancodestudio"&gt;Follow Clean Code Studio on Twitter for more!&lt;/a&gt;&lt;br&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;&lt;br&gt;
&lt;/center&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://cleancode.studio/clean-code"&gt;More Clean Code Tips&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;


&lt;center&gt;

&lt;p&gt;(Note: Dev.to wouldn't let me put all 10 Clean Code twitter tips in this post. Remaining tips are posted in the comments section!) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZDuFCs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htcfabh4porzhav69gxi.png" alt="small down arrow"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;
&lt;br&gt;
&lt;/center&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>codequality</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What are your predictions for how the web will look like 10 years from now?</title>
      <author>Siddharth Chaudhary (he/him)</author>
      <pubDate>Sat, 07 Aug 2021 20:41:27 +0000</pubDate>
      <link>https://dev.to/sidthedev/what-are-your-predictions-for-how-the-web-will-look-like-10-years-from-now-3lhi</link>
      <guid>https://dev.to/sidthedev/what-are-your-predictions-for-how-the-web-will-look-like-10-years-from-now-3lhi</guid>
      <description>&lt;p&gt;What are your predictions for how the web will look like 10 years from now? Will frontend frameworks like react still exist or will everything change completely? Answer in the comments 👇, I want to see what y'all think 🤔 &lt;/p&gt;

</description>
      <category>healthydebate</category>
      <category>webdev</category>
    </item>
    <item>
      <title>PHP _call 🧙‍♂️(Lesson 3: PHP Magic Methods)</title>
      <author>Clean Code Studio</author>
      <pubDate>Sat, 07 Aug 2021 18:33:34 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/php-call-lesson-3-php-magic-methods-5bi0</link>
      <guid>https://dev.to/cleancodestudio/php-call-lesson-3-php-magic-methods-5bi0</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Today we're diving into the powerful __call PHP magic method&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LH-UCiPseP8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#php-magic-call-method"&gt;
  &lt;/a&gt;
  PHP magic __call method
&lt;/h2&gt;




&lt;p&gt;Imagine being able to call any method with any number of parameters on an instance of a class...&lt;/p&gt;

&lt;p&gt;Well today we're going to learn how you can! &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q_T56LLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a971gqu82b7ajn7znsr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q_T56LLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a971gqu82b7ajn7znsr.png" alt="PHP Magic method breakdown"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P6bRyFka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qep1ceqslon1pgjf7h6b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P6bRyFka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qep1ceqslon1pgjf7h6b.png" alt="Another PHP magic method breakdown example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LHj_MNTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bs26jqcvwsz31u9c62yv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LHj_MNTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bs26jqcvwsz31u9c62yv.png" alt="$parameters example of PHP magic methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tf0XyfuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilhu5bru2ql3arznlhna.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tf0XyfuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilhu5bru2ql3arznlhna.png" alt="$parameters and $method PHP magic method call together"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--03W6lzsp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dep5em581yks6ld6nny7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--03W6lzsp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dep5em581yks6ld6nny7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LH-UCiPseP8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.cleancode.studio/series/php-magic-methods/episodes/3"&gt;PHP __call magic method&lt;/a&gt;&lt;/p&gt;





&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Did you know I have a newsletter? 📬&lt;/p&gt;

&lt;p&gt;If you want to get notified when I publish new blog posts or&lt;br&gt;
make major project announcements, head below and do what you do!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zhorton34/embed/BaRPYdB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>API Calls </title>
      <author>Buddhadeb Chhetri</author>
      <pubDate>Sat, 07 Aug 2021 18:18:56 +0000</pubDate>
      <link>https://dev.to/buddhadebchhetri/api-calls-2338</link>
      <guid>https://dev.to/buddhadebchhetri/api-calls-2338</guid>
      <description>&lt;h1&gt;
  &lt;a href="#javascript-api-calls"&gt;
  &lt;/a&gt;
  Javascript API Calls
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#xml-http-request"&gt;
  &lt;/a&gt;
  XML HTTP Request
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;All modern browsers support the XMLHttpRequest object to request data from a server.&lt;/li&gt;
&lt;li&gt;It works on the oldest browsers as well as on new ones.&lt;/li&gt;
&lt;li&gt;It was deprecated in ES6 but is still widely used.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var request = new XMLHttpRequest();
request.open('GET','https://jsonplaceholder.typicode.com/users')
request.send();
request.onload =() =&amp;gt;{
console.log(JSON.parse(request.response));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fetch-api"&gt;
  &lt;/a&gt;
  Fetch API
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The Fetch API provides an interface for fetching resources including across the network in an asynchronous.&lt;/li&gt;
&lt;li&gt;It returns a Promise.&lt;/li&gt;
&lt;li&gt;It is an object which contains a single value either a Response or an Error that occurred.&lt;/li&gt;
&lt;li&gt;.then() tells the program what to do once Promise is completed.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fetch('https://jsonplaceholder.typicode.com/users')
.then(response=&amp;gt;{
return response.json();})
.then(data=&amp;gt;{
console.log(data);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#axios"&gt;
  &lt;/a&gt;
  Axios
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It is an open-source library for making HTTP requests.&lt;/li&gt;
&lt;li&gt;It works on both Browsers and Node js.&lt;/li&gt;
&lt;li&gt;It can be included in an HTML file by using an external CDN.&lt;/li&gt;
&lt;li&gt;It also returns promises like fetch API
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&amp;gt;&amp;lt;/script&amp;gt;

axios.get('https://jsonplaceholder.typicode.com/users')
.then(response =&amp;gt;{
console.log(response.data)})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#jquery-ajax"&gt;
  &lt;/a&gt;
  JQuery AJAX
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It performs asynchronous HTTP requests.&lt;/li&gt;
&lt;li&gt;Uses $.ajax() method to make the requests.&lt;/li&gt;
&lt;li&gt;Ability to send GET and POST requests&lt;/li&gt;
&lt;li&gt;Ability to Load JSON, XML, HTML or Scripts
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;

$(document).ready(function(){
$.ajax({
url:"https://jsonplaceholder.typicode.com/users",
type:"GET",success:function(result){
console.log(result);
}
   })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>api</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What are your best reads of the week?</title>
      <author>Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴</author>
      <pubDate>Sat, 07 Aug 2021 18:00:46 +0000</pubDate>
      <link>https://dev.to/jmfayard/what-are-your-best-reads-of-the-week-17je</link>
      <guid>https://dev.to/jmfayard/what-are-your-best-reads-of-the-week-17je</guid>
      <description>&lt;p&gt;Anything you would like to share from this week? I want to read insightful things. It can be on DEV and outside. It can be non-technical if you feel like it.&lt;/p&gt;

</description>
      <category>discuss</category>
    </item>
    <item>
      <title>Github Pages</title>
      <author>Code Chappie</author>
      <pubDate>Sat, 07 Aug 2021 17:32:11 +0000</pubDate>
      <link>https://dev.to/codechappie/github-pages-82</link>
      <guid>https://dev.to/codechappie/github-pages-82</guid>
      <description>&lt;h1&gt;
  &lt;a href="#sabes-lo-que-es-github-pages"&gt;
  &lt;/a&gt;
  ¿Sabes lo que es Github Pages?
&lt;/h1&gt;

&lt;p&gt;Es un servicio que brinda GitHub y nos permite subir repositorios de nuestro código para almacenarlo y pueda servir &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuraci%C3%B3n-b%C3%A1sica-de-github"&gt;
  &lt;/a&gt;
  Configuración básica de Github
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Primero que todo, instala Git en tu máquina. Este es el software del sistema de control de versiones subyacente en el que GitHub funciona.&lt;/li&gt;
&lt;li&gt;Seguido, Regístrate para una cuenta de GitHub. Es simple y fácil.&lt;/li&gt;
&lt;li&gt;Una vez te hayas registrado, inicia sesión en github.com con tu nombre de usuario y contraseña.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Aquí puedes encontrar un tutorial explicado a detalle:&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Igbcg_rzIt4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8gPWMGBc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1dv20oof0c3uje77eea.jpg" alt="Tutorial GitHub Pages"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>hosting</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top Interview Questions for Backend Developers(Node)</title>
      <author>Abhishek Raj</author>
      <pubDate>Sat, 07 Aug 2021 17:18:29 +0000</pubDate>
      <link>https://dev.to/abhishekraj272/top-interview-questions-for-backend-developers-node-2133</link>
      <guid>https://dev.to/abhishekraj272/top-interview-questions-for-backend-developers-node-2133</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Being a Full Stack Developer, I had appeared for Backend Developer position as well. In this post, I will be sharing most common Backend Dev question asked to me in all those interviews except the DSA part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#q1-create-a-sleep-function-using-asyncawait"&gt;
  &lt;/a&gt;
  Q1. Create a sleep function using Async/Await.
&lt;/h2&gt;

&lt;p&gt;In the below example, the sleep function returns a promise which is resolved after given millisecond using setTimeout API.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/abhishekraj272/embed/MWmzKPZ?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#q2-how-javascript-engine-works"&gt;
  &lt;/a&gt;
  Q2. How Javascript Engine works?
&lt;/h2&gt;

&lt;p&gt;When a js file is ran,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A global execution context is created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A memory heap is created where all variables (with var keyword) and functions (except arrow func) are declared.&lt;br&gt;&lt;br&gt;
In the below image we can see, variable &lt;strong&gt;a&lt;/strong&gt; is declared w/o even execution has started.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LG3XqPG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hhm6xi44nd77wt0w2sc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LG3XqPG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hhm6xi44nd77wt0w2sc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A Call Stack is created which stores the line which is going to be executed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SFyipVLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l92hu7kh951mk9w6flg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SFyipVLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l92hu7kh951mk9w6flg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When &lt;em&gt;call stack&lt;/em&gt; gets a function call, it creates a &lt;em&gt;functional context&lt;/em&gt; and the process is repeated in the functional context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When &lt;em&gt;call stack&lt;/em&gt; encounters WEB APIs like setTimeout/Interval/Immediate, these are sent to callback queue to process after call stack is empty.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When &lt;em&gt;call stack&lt;/em&gt; encounters a Promise it is sent to micro task queue (higher priority than callback queue) to process after call stack is empty.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once call stack is empty, event loop moves functions from queues to call stack for execution.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#q3-difference-between-single-threaded-amp-asynchronous"&gt;
  &lt;/a&gt;
  Q3. Difference between Single Threaded &amp;amp; Asynchronous.
&lt;/h2&gt;

&lt;p&gt;My View:&lt;br&gt;
Single Threaded -&amp;gt; It means only once function can be executed at a time.&lt;br&gt;
Async -&amp;gt; It is about non-blocking of execution of functions.&lt;/p&gt;

&lt;p&gt;In this below image, we can easily understand the difference. Thanks to &lt;a href="https://www.baeldung.com/"&gt;Baeldung&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4-7eOEU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0mjmugbgn2w6cucwvirp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4-7eOEU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0mjmugbgn2w6cucwvirp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jqb5q9Ml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bepu91vawolbj365xtcm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jqb5q9Ml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bepu91vawolbj365xtcm.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.baeldung.com/cs/async-vs-multi-threading"&gt;Read More&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#q4-how-to-debug-a-slow-api"&gt;
  &lt;/a&gt;
  Q4. How to debug a slow API?
&lt;/h2&gt;

&lt;p&gt;My View:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-consolelog-approach"&gt;
  &lt;/a&gt;
  The Console.log approach
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Check if the issue is with network by sending request from different network.&lt;/li&gt;
&lt;li&gt;Log time when &lt;em&gt;req&lt;/em&gt; is received by the backend.&lt;/li&gt;
&lt;li&gt;Log time before a DB query.&lt;/li&gt;
&lt;li&gt;Log time after a DB query.&lt;/li&gt;
&lt;li&gt;Log time before/after some heavy operation.&lt;/li&gt;
&lt;li&gt;Log time before sending response.&lt;/li&gt;
&lt;li&gt;Analyse the time, you will get your culprit.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#profiler-approach"&gt;
  &lt;/a&gt;
  Profiler Approach
&lt;/h3&gt;

&lt;p&gt;Use any profiling tool to check where the execution is lagging.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-eventemitter-in-nodejs"&gt;
  &lt;/a&gt;
  What is EventEmitter in NodeJS?
&lt;/h2&gt;

&lt;p&gt;My View: EventEmitter is used to create event listeners in JS.&lt;/p&gt;

&lt;p&gt;Read More:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/abhishekraj272" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HdzDIguE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MIti9vi4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/419056/462b1794-0cb4-4ae6-8bd4-8577be4f295e.jpeg" alt="abhishekraj272"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/abhishekraj272/top-interview-questions-for-frontend-developers-3d5j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top Interview Questions for Frontend Developers(React)&lt;/h2&gt;
      &lt;h3&gt;Abhishek Raj ・ Jul 30 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/abhishekraj272" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HdzDIguE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MIti9vi4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/419056/462b1794-0cb4-4ae6-8bd4-8577be4f295e.jpeg" alt="abhishekraj272"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/abhishekraj272/if-you-don-t-know-this-you-don-t-know-javascript-2355" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn these awesome Javascript concepts.&lt;/h2&gt;
      &lt;h3&gt;Abhishek Raj ・ Aug 2 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Connect Me @ &lt;a href="https://www.linkedin.com/in/abhishekraj272/"&gt;Linkedin&lt;/a&gt;, &lt;a href="https://github.com/abhishekraj272"&gt;Github&lt;/a&gt;, &lt;a href="https://twitter.com/abhishekraj272"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.youtube.com/channel/UCvHn2T8DSJzEWzYDdK3Dt8A"&gt;Youtube&lt;/a&gt; 😇&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>career</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>Faker.js Generator - Never write sample data manually again ⌛</title>
      <author>Matej Bačo</author>
      <pubDate>Sat, 07 Aug 2021 16:50:50 +0000</pubDate>
      <link>https://dev.to/meldiron/faker-js-generator-never-write-sample-data-manually-again-57ba</link>
      <guid>https://dev.to/meldiron/faker-js-generator-never-write-sample-data-manually-again-57ba</guid>
      <description>&lt;p&gt;I created this project when I tried to learn proper state management on the frontend. I wanted to come up with a project that has a complex state and will be helpful for at least one person. There you go, &lt;strong&gt;Faker.js Generator&lt;/strong&gt; 😱&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Links:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://faker-generator.netlify.app/"&gt;Live demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Meldiron/faker-generator"&gt;Github project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#problem-solution"&gt;
  &lt;/a&gt;
  Problem ➡️ Solution
&lt;/h2&gt;

&lt;p&gt;First of all, I believe we can all agree that testing the frontend with sample data is necessary to lower changes of visual bugs on production. If you placed the same &lt;code&gt;Lorem ipsum ...&lt;/code&gt; into every paragraph on your website, you would not get far because there are some texts that you expect to be short, such as the user's first name. On the other hand, if you used simple &lt;code&gt;Hello world&lt;/code&gt; everywhere, you would not test long paragraphs properly and might miss text alignment issues.&lt;/p&gt;

&lt;p&gt;Secondly, you always need to test your frontend with multiple sample data. Data is the dynamic part of your website, and chances are, there will be some content generated by a user. Believe me, my most common problem when developing a frontend application was that I &lt;strong&gt;expected&lt;/strong&gt; the user to do something. I learned this is not true the hard way when I found users with emails like &lt;code&gt;daniel-michael-blake-day-lewis-1985@gmail.com&lt;/code&gt; started joining the platform, and I was trying to fit the whole email into 100px wide element.&lt;/p&gt;

&lt;p&gt;Last but not least, there are many cases when a team is developing a full-stack application, and sadly, some companies force frontend developers to work on UI without backend prepared. You end up copy&amp;amp;pasting texts from Figma... Yeah, that will fit. It will... But what about actual data? You need to make sure! Get some fake data and test the UI with random data to make sure it really fits, so you don't have to re-check your whole application on every single device once you start hooking it to the API server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To solve these problems&lt;/strong&gt; I came up with a simple web application that lets you define a scheme you need for your frontend application and simply generate JSON object with random data using &lt;a href="https://github.com/marak/Faker.js/"&gt;Faker.js&lt;/a&gt; library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u2PsTgHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jhckoocgjff1hcdi0f3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2PsTgHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jhckoocgjff1hcdi0f3.png" alt="CleanShot 2021-08-07 at 17.57.20"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is pretty much as simple as it gets 😅 Follow a few simple steps to prepare sample JSON data for your application:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define a scheme using no-code GUI

&lt;ul&gt;
&lt;li&gt;I came up with a simple yet powerful interface where you can design any shape of a JSON object. The tool supports plain values, arrays and objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spam &lt;code&gt;Generate&lt;/code&gt; button until you are satisfied with fake data

&lt;ul&gt;
&lt;li&gt;After defining a scheme, you can generate a unique object with sample data by pressing one single button! Define multiple objects easily to test your application for different data. Sure, your UI can fit the name &lt;code&gt;Matej&lt;/code&gt;. But can it fit &lt;code&gt;Chernyshevsky&lt;/code&gt;? 🤔&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make adjustments to generated JSON manually, if required

&lt;ul&gt;
&lt;li&gt;Since this is a simple no-code platform, you cant expect to build a helicopter with it... The most significant limitation I found out about from feedbacks is joining multiple fake data into one field, such as &lt;code&gt;firstName + middleName + lastName&lt;/code&gt;. These changes can be easily done manually once you have your JSON ready. For these purposes, the generated JSON is editable right inside the platform in Visual Studio Code-like editor.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Copy the JSON and paste it into your project

&lt;ul&gt;
&lt;li&gt;There you go, your JSON is ready! Simply copy the content of the editor into your source code and start using it. The output includes &lt;code&gt;"&lt;/code&gt; around every key and value to make it a valid JSON if you put it into &lt;code&gt;.json&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#tips-amp-tricks"&gt;
  &lt;/a&gt;
  Tips &amp;amp; Tricks
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can configure the amount of sample data inside JSON arrays, so you fill your UI with multiple blocks. This works for both simple arrays and arrays of objects.&lt;/li&gt;
&lt;li&gt;Everything is saved into localStorage! Prepare the schema, leave, come back tomorrow and generate a new sample JSON.&lt;/li&gt;
&lt;li&gt;If you paste the output into a javascript file and save it, most IDEs will automatically transfer it into the format without &lt;code&gt;"&lt;/code&gt; around keys. This makes the code easier to read and smaller in size.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;That's it, for now ✨ If you are like my side-projects, feel free to follow me, and you will be notified whenever a new post is published. You can also give the project &lt;a href="https://github.com/Meldiron/faker-generator"&gt;star on github&lt;/a&gt; to keep me motivated 🙏&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>webdev</category>
      <category>sideprojects</category>
      <category>productivity</category>
    </item>
    <item>
      <title>#13) Explain Scope and Scope Chain in JS💥</title>
      <author>Mayank Yadav</author>
      <pubDate>Sat, 07 Aug 2021 16:49:02 +0000</pubDate>
      <link>https://dev.to/myk/13-explain-scope-and-scope-chain-in-js-2m31</link>
      <guid>https://dev.to/myk/13-explain-scope-and-scope-chain-in-js-2m31</guid>
      <description>&lt;h2&gt;
  &lt;a href="#-raw-scope-endraw-"&gt;
  &lt;/a&gt;
  🔰&lt;code&gt;Scope&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Scope determines the accessibility or visibility of a variables in your piece of code.&lt;/p&gt;

&lt;p&gt;There are 3️⃣ types of Scopes in JavaScript👇&lt;/p&gt;

&lt;p&gt;1️⃣ Global Scope&lt;br&gt;
2️⃣ Local or Function Scope&lt;br&gt;
3️⃣ Block Scope&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-global-scope-endraw-"&gt;
  &lt;/a&gt;
  🔰&lt;code&gt;Global Scope&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;✅Variables that are declared outside any function have &lt;em&gt;Global Scope&lt;/em&gt;.&lt;br&gt;
✅So, they are accessible from anywhere inside the code.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TbmuwiHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwyslcazdb5j37r4s8gl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TbmuwiHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwyslcazdb5j37r4s8gl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-local-or-function-scope-endraw-"&gt;
  &lt;/a&gt;
  🔰&lt;code&gt;Local or Function Scope&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;✅Variables declared inside the function are considered as local scope.&lt;br&gt;
✅Every function has it's own scope.&lt;br&gt;
✅The variable is visible inside the function and cannot be accessed outside the function.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rutMYjbW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p9w4cd9j3h4fgwxyv4t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rutMYjbW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p9w4cd9j3h4fgwxyv4t.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-block-scope-endraw-"&gt;
  &lt;/a&gt;
  🔰&lt;code&gt;Block Scope&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;✅Whenever you see {curly brackets}, it is a block. &lt;br&gt;
✅Block Scope is related to the variables declared using let and const, which means those variables exist only within the corresponding block.&lt;br&gt;
✅Accessible inside that block and cannot be accessed outside of it.&lt;br&gt;
✅A block scope is present in codes within if, switch conditions or for and while loops.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1r-2fxqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9cags17ribqhy35m1vqz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1r-2fxqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9cags17ribqhy35m1vqz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-scope-chain-endraw-"&gt;
  &lt;/a&gt;
  🔰&lt;code&gt;Scope Chain&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;✅The scope chain is simply the memory space of the function that was called, and the memory space of its outer environment.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qj7f9KPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyfjd8x42xs16u11tf63.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qj7f9KPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyfjd8x42xs16u11tf63.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
✔In the above example, the 1st console is for fruit2 i.e., &lt;code&gt;🥭&lt;/code&gt;. &lt;br&gt;
It Does not find 🥭 inside newFavFruit, so it looks for variable inside favFruit, returns 🥭.&lt;/p&gt;

&lt;p&gt;✔In the 2nd console, it is for fruit i.e., &lt;code&gt;🍌&lt;/code&gt;.&lt;br&gt;
It does not find 🍌 inside nestedFavFruit, so it looks for variable inside favFruit and does not find it, so looks for variable in global scope, finds it and result is 🍌.&lt;/p&gt;

&lt;p&gt;⚠As you can see, if the JavaScript engine does not find the variable in local scope, it tries to check for the variable in the outer scope. If the variable does not exist in the outer scope, it tries to find the variable in the global scope&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>e-commerce React</title>
      <author>Arthur de Sousa</author>
      <pubDate>Sat, 07 Aug 2021 16:38:09 +0000</pubDate>
      <link>https://dev.to/sousa2323/e-commerce-react-33hb</link>
      <guid>https://dev.to/sousa2323/e-commerce-react-33hb</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/sousa2323/e-commerce-react"&gt;https://github.com/sousa2323/e-commerce-react&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ainda não está pronto e precisa ser ajustado, porém, esse é um dos meus projetos que venho desenvolvido para maior aprendizado sobre React, as imagens são apenas para demonstração.   &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>node</category>
      <category>github</category>
    </item>
    <item>
      <title>The Story Behind JavaScript Promises - A Use Case Based Approach!</title>
      <author>MirAli Mobasheri</author>
      <pubDate>Sat, 07 Aug 2021 16:35:44 +0000</pubDate>
      <link>https://dev.to/alimobasheri/the-story-behind-javascript-promises-a-use-case-based-approach-5bdd</link>
      <guid>https://dev.to/alimobasheri/the-story-behind-javascript-promises-a-use-case-based-approach-5bdd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Why%20should%20you%20read%20this?"&gt;❓ Why should you read this?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#In%20a%20hurry?"&gt;🏇 In a hurry?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#How%20Promises%20Are%20Made:%20Please%20Put%20A%20Ticket!"&gt;🤝 How Promises Are Made: Please Put A Ticket!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//#Main%20Usages%20Of%20A%20Promise:%20Making%20API%20Calls."&gt;🔛 Main Usages Of A Promise: Making API Calls.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//#Callbacks:%20The%20Green%20And%20The%20Red%20Button."&gt;✅❌ Callbacks: The Green And The Red Button.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//#Callbacks:%20Then%20&amp;amp;%20Catch."&gt;↩️↪️ Callbacks: Then &amp;amp; Catch.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#The%20Methodology%20Behind%20Promises:%20Returning%20Objects!"&gt;⛓️ The Methodology Behind Promises: Returning Objects!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//#Static%20Methods:%20%20raw%20%60Promise.all%60%20endraw%20%20&amp;amp;%20%20raw%20%60Promise.allSettled%60%20endraw%20"&gt;🕸️ Static Methods: &lt;code&gt;Promise.all&lt;/code&gt; &amp;amp; &lt;code&gt;Promise.allSettled&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//#Static%20Methods:%20%20raw%20%60Promise.any%60%20endraw%20%20&amp;amp;%20%20raw%20%60Promise.race%60%20endraw%20."&gt;🏃🏻‍♂️ Static Methods: &lt;code&gt;Promise.any&lt;/code&gt; &amp;amp; &lt;code&gt;Promise.race&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//#Promise%20Callbacks:%20%20raw%20%60finally%60%20endraw%20."&gt;🔚 Promise Callbacks: &lt;code&gt;finally&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;The young librarian felt satisfied with what she did. Sarah had started her job when she was only 22 years old. Having known her as a long-time member of the library, the kind Mrs. Perkins hired her. &lt;/p&gt;

&lt;p&gt;Mrs. Perkins had been the library's manager for as long as 30 years.&lt;/p&gt;

&lt;p&gt;Now Sarah was the main person responsible for the place. She did a great job. People liked how she treated them and controlled everything.&lt;/p&gt;

&lt;p&gt;But it didn't take long before things got out of control. &lt;/p&gt;

&lt;p&gt;Mrs. Perkins retired. The girl had to do everything alone. And a new wave of readers was joining the library. She couldn't deliver services anymore. &lt;/p&gt;

&lt;p&gt;She was forced to make &lt;strong&gt;promises&lt;/strong&gt;...&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-should-you-read-this"&gt;
  &lt;/a&gt;
  ❓ Why should you read this?&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This might seem a long article. And the story might look unrelated. &lt;/p&gt;

&lt;p&gt;But let's face the truth. How many times have you learned a concept but have never used it? &lt;br&gt;
Perhaps there were situations where you could use &lt;code&gt;Promise.race&lt;/code&gt;. But you didn't. Because despite you knew what it did, you weren't sure what its use case could be. &lt;/p&gt;

&lt;p&gt;And when you got into a problem which you could solve using &lt;code&gt;Promice.race&lt;/code&gt;, you chose to go your own way. Because you weren't even sure if it was useful there.&lt;/p&gt;

&lt;p&gt;You knew what it did. But you didn't know its use case.&lt;/p&gt;

&lt;p&gt;Here, I'm presenting you with a story. It also teaches you about different ways you can use &lt;code&gt;Promises&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;But it also tries to symbolize its use cases through a real-world story. Next time you face a similar situation you'll be quick to know how to handle it. And if not, you have at least read a story!😉&lt;/p&gt;

&lt;p&gt;Enough talk. I have promises to keep.&lt;/p&gt;



&lt;p&gt;It started with the Covid-19 pandemic outbreak. Everyone wanted to pass their quarantine by reading books. But no one could go to the library due to the health restrictions. They had to keep social distance. &lt;/p&gt;

&lt;p&gt;Then Sarah came up with the idea to make an online deliverance system. Anyone could use the library's website to reserve books.&lt;/p&gt;

&lt;p&gt;She thought that she could deliver the books on her bike to their door front. And as the transportation cost her time and money, she took a very small amount of dollars for her service.&lt;br&gt;
But she wasn't always online and couldn't plan every books' deliverance on time. She had to deliver them herself and close the library since no one took her place.&lt;/p&gt;

&lt;p&gt;She needed extra help. Somehow.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#in-a-hurry"&gt;
  &lt;/a&gt;
  🏇 In a hurry?&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I have separated everything into different parts. Each of them is about a specific side of the &lt;code&gt;Promises&lt;/code&gt;. So you can skip any part you are confident about. &lt;/p&gt;

&lt;p&gt;Already know how to make &lt;code&gt;JavaScript Promises&lt;/code&gt;? Skip the introduction part!&lt;/p&gt;



&lt;p&gt;She called her cousin and asked him if he could design an ordering system for the library's website. She described the process as: "People will have to log in to their accounts. And if there is a book they want to request, they should put an online order ticket for it."&lt;/p&gt;

&lt;p&gt;But since it was not clear when she could deliver the books, the users had to wait for the website to notify them.&lt;br&gt;
It sent a message. If the book was available to deliver, it informed them she had &lt;strong&gt;resolved&lt;/strong&gt; the ticket. Otherwise, it contained a &lt;strong&gt;rejection&lt;/strong&gt; message.&lt;/p&gt;

&lt;p&gt;She named it the &lt;strong&gt;Promise System&lt;/strong&gt;. Likewise the &lt;code&gt;JavaScript API&lt;/code&gt; we're going to learn about.&lt;/p&gt;

&lt;p&gt;Let's dive in!&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#how-promises-are-made-please-put-a-ticket"&gt;
  &lt;/a&gt;
  🤝 How Promises Are Made: Please Put A Ticket!&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To create a &lt;code&gt;JavaScript Promise&lt;/code&gt; you can use the &lt;code&gt;new&lt;/code&gt; keyword:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;thePromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Promise Object Constructor&lt;/code&gt; accepts a &lt;code&gt;function&lt;/code&gt; as an argument. This function runs the process that we're going to promise its fulfillment. &lt;/p&gt;

&lt;p&gt;In our story, the way Sarah manages the ordering through tickets resembles such a &lt;code&gt;Promise&lt;/code&gt;. Either it is &lt;code&gt;fulfilled&lt;/code&gt; with the book's delivery or &lt;code&gt;rejected&lt;/code&gt; for a reason. &lt;/p&gt;

&lt;p&gt;This function can in turn accept two arguments: &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt;.&lt;br&gt;
Both of which are callback functions that we can delegate on certain points. &lt;/p&gt;

&lt;p&gt;We use &lt;code&gt;resolve&lt;/code&gt; as a fulfillment signal and pass it the final data. By calling &lt;code&gt;reject&lt;/code&gt; we make clear that the &lt;code&gt;Promise&lt;/code&gt; has failed.&lt;/p&gt;

&lt;p&gt;From what we've learned we can construct a &lt;code&gt;Promise&lt;/code&gt; by writing the following lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theOrderingProcess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The process with the unknown duration.&lt;/span&gt;
  &lt;span class="c1"&gt;// Function body goes here.&lt;/span&gt;

  &lt;span class="c1"&gt;// If anywhere in your code, &lt;/span&gt;
  &lt;span class="c1"&gt;// you think your promise is fulfilled, &lt;/span&gt;
  &lt;span class="c1"&gt;// (e.g. Sarah finds an ordered book is available),&lt;/span&gt;
  &lt;span class="c1"&gt;// you can call resolve and pass it &lt;/span&gt;
  &lt;span class="c1"&gt;// the data you would like to return. &lt;/span&gt;
  &lt;span class="c1"&gt;// Like the following:&lt;/span&gt;
  &lt;span class="c1"&gt;// resolve(theBookData)&lt;/span&gt;

  &lt;span class="c1"&gt;// But if somehow the promise has failed to fulfill, &lt;/span&gt;
  &lt;span class="c1"&gt;// (e.g. A book is currently borrowed),&lt;/span&gt;
  &lt;span class="c1"&gt;// you can call reject and&lt;/span&gt;
  &lt;span class="c1"&gt;// pass it the reason to rejection:&lt;/span&gt;
  &lt;span class="c1"&gt;// reject(theRejectionReason)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theWebsitePromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theOrdeingProcess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Every time someone put a ticket for a book, he/she had to wait for a certain process to come to an end.&lt;br&gt;
It was not as if you selected a book and immediately had it on way to your home. Things took time. How long? No one knew for granted.&lt;/p&gt;

&lt;p&gt;Mrs. Perkins wasn't an all-up-to-date lady. So she had stored most of the data about the existing books and the borrowed ones in an old Access database. It took time to transfer them to a server. And Sarah wanted things to get done as soon as possible.&lt;/p&gt;

&lt;p&gt;She had to use the Access database. By herself.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#main-usages-of-a-promise-making-api-calls"&gt;
  &lt;/a&gt;
  🔛 Main Usages Of A Promise: Making API Calls.&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Nowadays most websites use a database on their back end side. Like how Mrs. Perkins stored the library's data in an Access database. &lt;/p&gt;

&lt;p&gt;Of course the website databases use automations!&lt;/p&gt;

&lt;p&gt;A web application's front end needs to send a request to a server endpoint to receive some data. Then using this data the application can deliver its services.&lt;/p&gt;

&lt;p&gt;As the front end sends the &lt;code&gt;request&lt;/code&gt;, the process mounts into a pending status. It will stay in this status until it either receives a response from the back end or receives none.&lt;/p&gt;

&lt;p&gt;The pending status could take for an unknown period. This depends on the networking conditions of the user and the server, and how fast they can transfer data. Additionally, the back end itself might need to process some data and take extra time.&lt;/p&gt;

&lt;p&gt;An example of sending a &lt;code&gt;request&lt;/code&gt; using the &lt;code&gt;JavaScript Fetch API&lt;/code&gt; looks like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://example.com/endpoint&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The fetch method constructs a &lt;code&gt;Promise Object&lt;/code&gt;, and returns it. So we can use its returned value same as a simple &lt;code&gt;Promise Object&lt;/code&gt;. Helping us to get rid of creating our own &lt;code&gt;Promisess&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Want more comfort? Use axios.&lt;/p&gt;




&lt;p&gt;The library's online ordering system took tickets from its users. They contained information about the user and the selected book. Sarah reviewed the tickets. And checked for the books' availability in the Access database.&lt;/p&gt;

&lt;p&gt;If everything was okay, a green button labeled as &lt;code&gt;resolve&lt;/code&gt;, awaited Sarah's click. Otherwise, the big red button was ready to delegate a &lt;code&gt;rejection event&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;No one knows for sure. But rumors are there was a black button too. For dark purposes. Unknown.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#callbacks-the-green-and-the-red-button"&gt;
  &lt;/a&gt;
  ✅❌ Callbacks: The Green And The Red Button.&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We call the processes like the API requests &lt;code&gt;Asynchronous Operations&lt;/code&gt;. They vary from the &lt;code&gt;Synchronous&lt;/code&gt; ones which are simple &lt;code&gt;Program Expressions&lt;/code&gt;. &lt;br&gt;
A &lt;code&gt;Synchronous Operation&lt;/code&gt; takes a constant time to complete. The system runs them in a sequence. It waits until the execution of one is complete before it runs the next.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Synchronous Operation&lt;/code&gt; looks like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every line of this operation is predictable. The compiler will be executing each line one after another. There's nothing unpredictable that could block the program's main thread from running.&lt;/p&gt;

&lt;p&gt;But an &lt;code&gt;Asynchronous Operation&lt;/code&gt; can block the program's execution. This is so because its fulfillment depends on the network conditions and speed. Even if the user owned a fast network, the back-end servers could be facing trouble. This can result in no response or a longer-running process.&lt;/p&gt;

&lt;p&gt;How can we write an &lt;code&gt;Asynchronous Operation&lt;/code&gt; and make sure that it doesn't block the rest of the code from running?&lt;/p&gt;

&lt;p&gt;The answer is: "by using &lt;code&gt;Callbacks&lt;/code&gt;".&lt;/p&gt;

&lt;p&gt;Of course, while it sounds like a heartwarming name, wait until you are caught in a &lt;code&gt;callback hell&lt;/code&gt;!&lt;/p&gt;




&lt;p&gt;When the user put a ticket for a book, he registered for future events. He was awaiting a &lt;code&gt;response&lt;/code&gt; to his &lt;code&gt;request&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Either this response arrived, or some problem prevented it from ever coming.&lt;/p&gt;

&lt;p&gt;Now the user was using a true &lt;code&gt;Promise System&lt;/code&gt;. The library's website provided this system. But the user didn't have direct access to the promise. He was listening to it.&lt;/p&gt;

&lt;p&gt;Then the user had to make his own plans based on this &lt;code&gt;Promise&lt;/code&gt;. He was telling himself: if the reply was a successful message &lt;code&gt;then&lt;/code&gt; I'm gonna return my last book. If not, &lt;code&gt;then&lt;/code&gt; I can choose another one. Maybe the reply never came, or the website's server went down. This problem will &lt;code&gt;catch&lt;/code&gt; his eyes, and so he was going to call the librarian and inform her. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.warn('I never got a response!')&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#callbacks-then-amp-catch"&gt;
  &lt;/a&gt;
  ↩️↪️ Callbacks: Then &amp;amp; Catch.&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you use the &lt;code&gt;JavaScript Fetch API&lt;/code&gt;, it will return a &lt;code&gt;Promise Object&lt;/code&gt; by default. You don't have to write the &lt;code&gt;Promise&lt;/code&gt; yourself. You have to listen to it. How?&lt;/p&gt;

&lt;p&gt;Every &lt;code&gt;Promise&lt;/code&gt; returns an &lt;code&gt;Object&lt;/code&gt;. And this &lt;code&gt;Object&lt;/code&gt; owns 2 important methods. &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt;. You can use these methods to attach &lt;code&gt;callbacks&lt;/code&gt; to a &lt;code&gt;Promise&lt;/code&gt;. You pass them a &lt;code&gt;function&lt;/code&gt; which will be called as soon as the &lt;code&gt;Promise&lt;/code&gt; delegates an &lt;code&gt;event&lt;/code&gt;. What events?&lt;/p&gt;

&lt;p&gt;You can call the &lt;code&gt;resolve&lt;/code&gt; callback inside a &lt;code&gt;Promise Function&lt;/code&gt;'s body and pass it what data you want. Then the &lt;code&gt;Promise&lt;/code&gt; calls the &lt;code&gt;callback function&lt;/code&gt; inside the first &lt;code&gt;then&lt;/code&gt; call and passes the data to it. The &lt;code&gt;Promise&lt;/code&gt; calls the &lt;code&gt;catch&lt;/code&gt; method as soon as you call the &lt;code&gt;rejection&lt;/code&gt; callback.&lt;/p&gt;

&lt;p&gt;Let's visualize this process by an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://example.com/endpoint&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;request&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error in fetching the request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Here we call the &lt;code&gt;fetch function&lt;/code&gt; and pass it the &lt;code&gt;endpoint URL&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;fetch function&lt;/code&gt; creates a &lt;code&gt;Promise Object&lt;/code&gt; and returns it.&lt;/li&gt;
&lt;li&gt;We store this &lt;code&gt;Object&lt;/code&gt; in the &lt;code&gt;request&lt;/code&gt; variable.&lt;/li&gt;
&lt;li&gt;We call &lt;code&gt;request&lt;/code&gt;'s &lt;code&gt;then&lt;/code&gt; method and pass it a &lt;code&gt;function&lt;/code&gt;. The function can receive as many arguments as it expects. It retrieves those arguments from what the &lt;code&gt;Promise&lt;/code&gt; passes to the &lt;code&gt;resolve&lt;/code&gt; callback. Then the given function can do as much as it desires with the given data.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, we call &lt;code&gt;request&lt;/code&gt;'s &lt;code&gt;catch&lt;/code&gt; method. We pass it a function. And expect the &lt;code&gt;Promise&lt;/code&gt; to call this function when it &lt;code&gt;rejects&lt;/code&gt; or the &lt;code&gt;then&lt;/code&gt; method &lt;code&gt;throws&lt;/code&gt; an &lt;code&gt;Error&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the end we run the code to see if it works. Of course it does. And if not, we won't hesitate to point our finger at the back end:)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A question exists. The &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; methods only add callbacks to the &lt;code&gt;Promise Object&lt;/code&gt;. So why aren't they &lt;code&gt;properties&lt;/code&gt; to which we can attach the &lt;code&gt;callback functions&lt;/code&gt;? Wouldn't it be simpler?&lt;/p&gt;

&lt;p&gt;We'll find the answer.&lt;/p&gt;




&lt;p&gt;Everything Sarah did resulted in a &lt;code&gt;Promise&lt;/code&gt;. &lt;br&gt;
Hitting the &lt;code&gt;resolve&lt;/code&gt; button was only the first step. &lt;/p&gt;

&lt;p&gt;She had to find the book in the library. She had to package it next to the other ones which she had to deliver the following day.&lt;/p&gt;

&lt;p&gt;She had to mark each package with the right user's information. This included their names and addresses. She had to be careful when she loaded the packages on the bike. Not to disturb her ride.&lt;/p&gt;

&lt;p&gt;She had to ride through streets and alleys. Dodging traffics and caring for her safety. Reaching her destination, she had to ring the doorbell. If the client was present, &lt;code&gt;then&lt;/code&gt; she delivered the book.&lt;br&gt;
And &lt;code&gt;then&lt;/code&gt; she took the reader's previous book to return it to the library. &lt;/p&gt;

&lt;p&gt;After repeating the same routine for every client, she had to &lt;code&gt;finally&lt;/code&gt; go back to the library. She placed the returned books on the shelves. &lt;code&gt;Then&lt;/code&gt; filled the Access database with data about the returned and the delivered ones.&lt;/p&gt;

&lt;p&gt;After all, it was time to review that day's orders and check for their availability. Then managing to hit the &lt;code&gt;resolve&lt;/code&gt; or the &lt;code&gt;reject&lt;/code&gt; buttons.&lt;/p&gt;

&lt;p&gt;Even the rest she got by her night sleeps, was a promise she had made to her body.&lt;/p&gt;

&lt;p&gt;And it feels good to fulfill promises. Doesn't it?😊&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#the-methodology-behind-promises-returning-objects"&gt;
  &lt;/a&gt;
  ⛓️ The Methodology Behind Promises: Returning Objects!&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We've faced a question. A matter which insists that providing &lt;code&gt;callbacks&lt;/code&gt; through methods is useless. The &lt;code&gt;Promise API&lt;/code&gt; can instead provide special &lt;code&gt;Object Properties&lt;/code&gt;. Or the ability to add an array of &lt;code&gt;callbacks&lt;/code&gt;, for another instance.&lt;/p&gt;

&lt;p&gt;But think of all the possibilities you might face while developing front-end applications. You won't always want the &lt;code&gt;callbacks&lt;/code&gt; to run in order. You might not remember a case for this at the moment, but sure someday you'll face it. &lt;/p&gt;

&lt;p&gt;Different scenarios need different approaches. And if the &lt;code&gt;Promise&lt;/code&gt; is going to be of any help during these situations, it has to be flexible.&lt;/p&gt;

&lt;p&gt;Let's have a look at a piece of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;aPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resolved&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;aPromise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have been able to use the &lt;code&gt;Promise&lt;/code&gt;'s static &lt;code&gt;resolve&lt;/code&gt; method. Without even having to construct a new &lt;code&gt;Promise Instance&lt;/code&gt; we were able to return a &lt;code&gt;Promise Object&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we can call this &lt;code&gt;Object&lt;/code&gt;'s &lt;code&gt;then&lt;/code&gt; method. Or its &lt;code&gt;catch&lt;/code&gt; one. &lt;/p&gt;

&lt;p&gt;Well, what good is that for? You may ask. To find the answer let's have a look at another example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstPromise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JSON string was created successfuly!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JSON creation error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;thirdPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstPromise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The data doesn't contain a message!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newData&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error in third Promise&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we've initiated a &lt;code&gt;Promise Object&lt;/code&gt; using only &lt;code&gt;Promise.resolve&lt;/code&gt;. This promise object gives us all the superpowers we want. We can call its &lt;code&gt;then&lt;/code&gt; method as much as we want, in a &lt;code&gt;chain&lt;/code&gt; or in &lt;code&gt;separate calls&lt;/code&gt;. This allows us to create various &lt;code&gt;waiters&lt;/code&gt; for the same process. What is a &lt;code&gt;waiter&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Let's say you have got to fetch data, which you will use in different parts of your application. But there's a problem. You can reuse &lt;code&gt;synchronous operation&lt;/code&gt; data as in &lt;code&gt;variables&lt;/code&gt;. But you can't do that with &lt;code&gt;asynchronous&lt;/code&gt; data. You should wait for it to become available.&lt;/p&gt;

&lt;p&gt;Now, there are different parts in your project, awaiting this data. We can refer to these parts as &lt;code&gt;waiters&lt;/code&gt;. They're observing the &lt;code&gt;Promise&lt;/code&gt;'s status and as soon it &lt;code&gt;settles&lt;/code&gt;, they will read its data.&lt;/p&gt;

&lt;p&gt;The above example showcases how the &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; methods help you to reuse the same data in different scenarios.&lt;/p&gt;

&lt;p&gt;This way the &lt;code&gt;Promise API&lt;/code&gt; is providing an easy-to-use solution.&lt;/p&gt;

&lt;p&gt;But it also provides us with some useful static methods. We can use them to handle different situations. They include: &lt;code&gt;Promise.all&lt;/code&gt;, &lt;code&gt;Promise.allSettled&lt;/code&gt;, &lt;code&gt;Promise.any&lt;/code&gt;, and &lt;code&gt;Promise.race&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;Every day, to return to the library Sarah had to make sure that she had visited every one of her destinations. If all the clients were present at home, the book exchanges were successful. Otherwise, some of them failed.&lt;/p&gt;

&lt;p&gt;She didn't need every deliverance to be &lt;code&gt;resolved&lt;/code&gt;. She needed to have finished the process which was about going to the client's house.&lt;/p&gt;

&lt;p&gt;In the end, she returned to the library. And when she was ready to enter the reports in the Access database, she would ask herself: "Was everyone at home? Did any of the orders remain undelivered?"&lt;/p&gt;

&lt;p&gt;She classified the undelivered books in a separate database. And she sent the clients an Email that expressed the situation.&lt;/p&gt;

&lt;p&gt;If she had delivered every book then, she only had to set that day's deliveries as done, in the database. Nothing further to take care of.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#static-methods-raw-promiseall-endraw-amp-raw-promiseallsettled-endraw-"&gt;
  &lt;/a&gt;
  🕸️ Static Methods: &lt;code&gt;Promise.all&lt;/code&gt; &amp;amp; &lt;code&gt;Promise.allSettled&lt;/code&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;all&lt;/code&gt; method accepts an array of &lt;code&gt;promises&lt;/code&gt;. Then it waits for all the promises to &lt;code&gt;resolve&lt;/code&gt;. If any of the promises &lt;code&gt;rejects&lt;/code&gt;, it will immediately return with the rejection reason.&lt;/p&gt;

&lt;p&gt;This function behaves like what Sarah asks herself every night: 'Was everyone at home? Did any of the orders remain undelivered?' &lt;/p&gt;

&lt;p&gt;She will know that she has done all her tasks once she delivered the last book. If so, only the clients' returned books would be on her bike. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise.all&lt;/code&gt; resolves once every &lt;code&gt;Promise&lt;/code&gt; in the promises array passed to it resolves. It returns an array of what each promise had returned. Like the books that the library's clients returned.&lt;/p&gt;

&lt;p&gt;Sarah immediately knew that the delivery has failed If none of the clients were present at home. She would return with the undelivered book still on her bike. &lt;/p&gt;

&lt;p&gt;If any of the promises you pass to &lt;code&gt;Promise.all&lt;/code&gt; rejects, it will immediately reject. With the &lt;code&gt;rejection&lt;/code&gt; reason of the rejected promise.&lt;/p&gt;

&lt;p&gt;An example of &lt;code&gt;Promise.all&lt;/code&gt; usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;client1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;returnedBooks&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;returnedBooks&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rejectionReason&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error: a book was not delivered.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rejectionReason&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We said that Sarah's return to the library didn't depend on every client's presence. She needed to make the visit. So if she had toured around all the clients' addresses, she was ready to return to the library. And on her bike, she transported all the books. Whether returned or undelivered. &lt;/p&gt;

&lt;p&gt;For a likewise behavior with &lt;code&gt;JavaScript Promises&lt;/code&gt;, we can use &lt;code&gt;Promise.allSettled&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Every &lt;code&gt;Promise&lt;/code&gt; passes through two main states: &lt;code&gt;pending&lt;/code&gt; and &lt;code&gt;settled&lt;/code&gt;. The settled state is when the promise has been &lt;code&gt;fulfilled&lt;/code&gt;. The settlement either happens with resolve or a rejection. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;all&lt;/code&gt; method immediately returned when a &lt;code&gt;Promise&lt;/code&gt; rejected or every promise resolved. &lt;br&gt;
But the &lt;code&gt;allSettled&lt;/code&gt; method immediately returns. When all promises have either &lt;code&gt;resolved&lt;/code&gt; or &lt;code&gt;rejected&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;When they are &lt;code&gt;settled&lt;/code&gt; indeed.&lt;/p&gt;

&lt;p&gt;What the &lt;code&gt;allSettled&lt;/code&gt; method returns in its &lt;code&gt;resolve&lt;/code&gt;, consists of an array of objects. Each object has a &lt;code&gt;status&lt;/code&gt; property which is either &lt;code&gt;fulfilled&lt;/code&gt; or &lt;code&gt;rejected&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;If the status is &lt;code&gt;fulfilled&lt;/code&gt; then the object provides a &lt;code&gt;value&lt;/code&gt; property too. Otherwise, it owns a &lt;code&gt;reason&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;A demonstration of it in code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allSettled&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;client1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fulfilled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A returned book&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;An undelivered book&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Soon enough troubles showed up.&lt;/p&gt;

&lt;p&gt;The website's users had to wait a long time for the response message's arrival. Then they started to see more rejection messages. No matter what book they ordered, a rejection message awaited them in their inboxes after 1 to 2 days.&lt;/p&gt;

&lt;p&gt;Some of the users tried to contact Sarah through Emails. But they only got a simple reply.  It stated: "The requested book is currently borrowed by someone else. You can try to order it later, or borrow another one."&lt;/p&gt;

&lt;p&gt;These replies worsened the situation. It surprised the clients that Sarah didn't even state when the book will be available. Or whether she could put them in a queue. &lt;/p&gt;

&lt;p&gt;Everything seemed unexpected and random.&lt;/p&gt;

&lt;p&gt;Sarah at first didn't notice any issue. She was still taking books for some people. But later it caught her eyes that things were getting weird.&lt;/p&gt;

&lt;p&gt;Before anything started to happen she wanted to find a solution to speed her routine up. She called her cousin and asked him if he could help her in searching the current Access databases. She needed to be quicker in finding out if a book was available.&lt;/p&gt;

&lt;p&gt;He said he would look into it and call her as soon as he found anything. The next day he had a solution. He could write a &lt;code&gt;python bot&lt;/code&gt; which would search every Access database. And to speed things up, he had found a useful algorithm for it too.&lt;/p&gt;

&lt;p&gt;He made the bot ready within a day. It searched the Access files for a specified book name and stated whether it was available to borrow. His special algorithm indeed created several &lt;code&gt;asynchronous operations&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;It searched each file in real-time with the others. As soon as any of the files contained a search result matching the book, the bot took it. Then it terminated all the search operations.&lt;/p&gt;

&lt;p&gt;She had separated the Access files into two different directories. She named one of them the &lt;strong&gt;library books&lt;/strong&gt; and the other the &lt;strong&gt;ordered books&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Books in the ordered books' directory were currently ordered or delivered. &lt;/p&gt;

&lt;p&gt;The library books databases had a list of all books in the library. It also contained information on whether a book was available or not.&lt;/p&gt;

&lt;p&gt;While developing his bot he had decided that the result was either in the &lt;code&gt;ordered books&lt;/code&gt; databases or the &lt;code&gt;library&lt;/code&gt; ones. If it was the ordered ones then it was obvious that the book wasn't available and Sarah had to reject the ticket. &lt;br&gt;
Else if it found the result in the library databases it was either available or not. &lt;/p&gt;

&lt;p&gt;This speed the search up because the ordered databases were smaller than the other group. So if it found a match result among them it terminated the searching quicker.&lt;/p&gt;

&lt;p&gt;But two weeks after the new bot's implementation most of the orders had to be rejected. She had had a regular delivery count of 9 to 10 books per day. Now, this number had fallen to as low as 3.&lt;/p&gt;

&lt;p&gt;Some days none at all.&lt;/p&gt;

&lt;p&gt;Many of the borrowed books remained unreturned for a long time. Their owners didn't even order new ones.&lt;/p&gt;

&lt;p&gt;And then she heard rumors. One of her best friends had tested positive for Covid-19. The infection statistics were surging in her town. She called some of her customers to ask why they weren't trying to return their books.&lt;/p&gt;

&lt;p&gt;Her suspicions proved right. Covid-19 had hit many of her customers. But some other ones were actually bothered with the site's functionality. They hated waiting a long time for no results.&lt;/p&gt;

&lt;p&gt;She tried to talk them back into using the library's website. She even promised that she will fix the issues. But &lt;strong&gt;promises&lt;/strong&gt; weren't convincing anymore. &lt;/p&gt;

&lt;p&gt;One night she called her cousin. Tears in her eyes. "I failed.", she said. The confession feeling bitter. "I failed badly."&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#static-methods-raw-promiseany-endraw-amp-raw-promiserace-endraw-"&gt;
  &lt;/a&gt;
  🏃🏻‍♂️ Static Methods: &lt;code&gt;Promise.any&lt;/code&gt; &amp;amp; &lt;code&gt;Promise.race&lt;/code&gt;.&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Promise.any&lt;/code&gt; accepts an array of promises. And resolves as soon as &lt;strong&gt;any&lt;/strong&gt; of them &lt;code&gt;fulfills&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The library's users chose a book and ordered it and waited to see if it was available. If not, they would go for the next one. But this process took a long time. They had to wait for each order's message to arrive before they could decide anything.&lt;/p&gt;

&lt;p&gt;And when the system became unresponsive it wasted the users' precious time by days and weeks.&lt;/p&gt;

&lt;p&gt;What if they could find a way to order many books together and get the first book that was available? Of course, it was impossible with the library website's architecture. Sarah wouldn't have allowed this. This could ruin all her plans.&lt;/p&gt;

&lt;p&gt;But this is not the case with JavaScript. If you are waiting for the first promise that resolves, use &lt;code&gt;Promise.any&lt;/code&gt;. It works the same way as the hack the library users wished for.&lt;/p&gt;

&lt;p&gt;An implementation of &lt;code&gt;Promise.any&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;order1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;order2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;order3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this order resolved first&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// expected output: "AggregateError: No Promise in Promise.any was resolved"&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As soon as any of the promises resolves, the &lt;code&gt;Promise Object&lt;/code&gt; calls the callback passed to &lt;code&gt;then&lt;/code&gt;. If all reject, it enters the &lt;code&gt;catch&lt;/code&gt; territory.&lt;/p&gt;

&lt;p&gt;Then there is &lt;code&gt;Promise.race&lt;/code&gt;. It resolves with the first &lt;code&gt;Promise&lt;/code&gt; that &lt;code&gt;settles&lt;/code&gt;. In case you've already forgotten, a &lt;code&gt;Settled Promise&lt;/code&gt; is either &lt;code&gt;fulfilled&lt;/code&gt; or &lt;code&gt;rejected&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, why should someone need to implement that? It's actually difficult to name a good use case for &lt;code&gt;Promise.race&lt;/code&gt;. But still, there are few times when it could be of help.&lt;/p&gt;

&lt;p&gt;Let's think about the bot that Sarah's cousin had developed. It exited the processes as soon as any of them returned anything. You might say that the bot's actual action is like what &lt;code&gt;Promise.any&lt;/code&gt; does. It returns as one of them &lt;code&gt;fulfills&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then it can be a bad example. But let's say that the &lt;code&gt;Promise&lt;/code&gt; which he used to search the &lt;code&gt;ordered books&lt;/code&gt; didn't fulfill when it matched a book. Let's say Sarah's cousin was smarter and played a trick on it.&lt;/p&gt;

&lt;p&gt;If the search in the ordered books matched a result then its &lt;code&gt;Promise&lt;/code&gt; rejected. Otherwise, if it had searched the entire databases and found none it resolved. But, if the search process related to the library books found a match and it was available then it resolved. Otherwise, the &lt;code&gt;Promise&lt;/code&gt; rejected.&lt;/p&gt;

&lt;p&gt;So here we have got a bright point. The rejection of one of the promises means the resolving of the other one. And vice versa.&lt;/p&gt;

&lt;p&gt;Now, &lt;code&gt;Promise.race&lt;/code&gt; can help us in reducing the time we need to wait for a useful response.&lt;/p&gt;

&lt;p&gt;Let's have a quick look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;race&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;searchLibraryBooks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;searchOrderedBooks&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Book is available.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Book is not available, because &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The library books have an alphabetical sorting. The ordered ones are sorted by their order date. So it's possible that the search in the whole library books could make a quicker match sometimes.&lt;/p&gt;




&lt;p&gt;It didn't take long before Sarah received a phone call from his cousin. He sounded anxious. And when she asked him what was wrong, he replied: "The bot had a bug, Sarah. There are always several versions of a book in the library. This means that if someone borrows one of its versions the book could still be available. I hadn't thought about this in my code. If one version of the book was ordered then I tagged it as unavailable. I'm sorry Sarah."&lt;/p&gt;

&lt;p&gt;Sarah was in shock for several seconds. How didn't this even cross her own mind?&lt;br&gt;
"Can you fix it?", she asked.&lt;br&gt;
"Well I'll do my best.", the other replied.&lt;br&gt;
"Then you better do it.", she couldn't control how loud her voice got. "And do it as soon as possible!"&lt;/p&gt;

&lt;p&gt;It took another day for them to fix the issue. She sent Emails to her clients. Informing that they have fixed the issue. And the users could start using the website immediately.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#promise-callbacks-raw-finally-endraw-"&gt;
  &lt;/a&gt;
  🔚 Promise Callbacks: &lt;code&gt;finally&lt;/code&gt;.&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We learned about &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt;. But the &lt;code&gt;Promise Object&lt;/code&gt; also provides us with another method. It doesn't care if the &lt;code&gt;Promise&lt;/code&gt; fulfills or not. It only cares that it &lt;code&gt;settles&lt;/code&gt;. And any &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; calls have already been delegated. Then it runs and does what you ask it for.&lt;/p&gt;

&lt;p&gt;An example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;websiteDelivery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;useServerDatabase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;websiteDelivery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useServerDatabase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Use Access database&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Data isn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;still&lt;/span&gt; &lt;span class="nx"&gt;moved&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)
  )
  .catch(error =&amp;gt; console.log("Error in starting delivery website", error))
  .finally(_ =&amp;gt; console.log("No matter if you lost 100 times. Try for the 101st time!")
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Promise Object&lt;/code&gt; calls the function you passed to the &lt;code&gt;finally&lt;/code&gt; method in any condition. After the &lt;code&gt;Promise&lt;/code&gt; settles.&lt;/p&gt;




&lt;p&gt;"The devil is always in the details." This was what Mrs. Perkins told Sarah after she heard her story. She went on: "You saw the big picture. You wanted to start a movement and to modernize our town's library. But you forgot the details my dear. You told yourself that you can handle the database work. But this was something you had to leave to the programmer. After you've finally restored the library's daily life, I hope you've learned something. And I hope that this damned pandemic ends very soon."&lt;/p&gt;

&lt;p&gt;Sarah hoped too. And she smiled.&lt;/p&gt;




&lt;p&gt;It was a long read. And a longer one to write. I think it was worth the time.&lt;/p&gt;

&lt;p&gt;The hardest part was about &lt;code&gt;Promise.race&lt;/code&gt;. I could hardly find a good use case for it. And I hope the idea I came up with could help you make a picture of it.&lt;/p&gt;

&lt;p&gt;Do you think there are better use cases for any of these methods? Or do you think I have gotten something wrong? &lt;/p&gt;

&lt;p&gt;Please let me know in the comments. Writing this article helped me a lot in understanding the concepts myself. Your comments can help me and the others further too.&lt;/p&gt;

&lt;p&gt;Thanks for the reading.&lt;/p&gt;

&lt;p&gt;The cover image is by &lt;a href="http://www.epictop10.com/"&gt;Epic Top 10 Site&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>frontend</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
