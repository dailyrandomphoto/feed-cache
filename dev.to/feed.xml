<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Murders in the ocean - What I learned (Part 2)</title>
      <author>Denislav Gavrilov üë®‚ÄçüöÄü§ñü§∑‚Äç‚ôÇÔ∏è</author>
      <pubDate>Tue, 22 Dec 2020 14:47:48 +0000</pubDate>
      <link>https://dev.to/denislav__/murders-in-the-ocean-what-i-learned-part-2-2nmm</link>
      <guid>https://dev.to/denislav__/murders-in-the-ocean-what-i-learned-part-2-2nmm</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Okay now. I want to start with that I have never played in a hackathon before. Boy, oh, boy did I learn a bunch of new stuff. I always admired people who write their hundreds of lines of code without looking at tutorials/Stack Overflow and look at me now - 650+ lines and counting! Okay, enough with the bragging... Actually, I want to confess. Maybe my code is one huge mess and that's why it has so many lines üò©. Anyway, it seems to be working somehow, and that's what matters, right?!&lt;/p&gt;

&lt;p&gt;Okay, let's get to the point. This is my second post on my DO+DEV hackathon submission and for those of you who don't know what I'm building, I am building a game. A murder mystery game. The rules of the game and how to play instructions are in my first post so go check it out. You can also check the rules on the home page of my app.&lt;/p&gt;

&lt;p&gt;So, in this second part, I want to share with all of you what I learned along the way and try to motivate you to join the hackathon if you aren't already building stuff. If not for this hackathon, I highly recommend giving another one a go!&lt;/p&gt;

&lt;p&gt;The structure of this post will be the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Current status&lt;/li&gt;
&lt;li&gt;What I learned&lt;/li&gt;
&lt;li&gt;What were my challenges&lt;/li&gt;
&lt;li&gt;What is left for my game&lt;/li&gt;
&lt;li&gt;Next steps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without further due, let's get right into it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#current-status" class="anchor"&gt;
  &lt;/a&gt;
  Current status
&lt;/h1&gt;

&lt;p&gt;I will post some photos and explain the status of my game.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starting-screen" class="anchor"&gt;
  &lt;/a&gt;
  Starting Screen
&lt;/h3&gt;

&lt;p&gt;There are now 3 buttons - to the GitHub repo, instructions on how to play, and a link to my personal website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K1Gg-GCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8m77pjskhlgvwjy7skbr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K1Gg-GCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8m77pjskhlgvwjy7skbr.png" alt="Start Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-login" class="anchor"&gt;
  &lt;/a&gt;
  First login
&lt;/h3&gt;

&lt;p&gt;Now all the players who are logged in are being shown before the game is started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h_beT0VC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rjdqzdl0nt820glm9y8o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h_beT0VC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rjdqzdl0nt820glm9y8o.png" alt="login-shows-names"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eject-player" class="anchor"&gt;
  &lt;/a&gt;
  Eject Player
&lt;/h3&gt;

&lt;p&gt;Now if a player tries to log in but there is already a player with that name, the 2nd player who tries to join is being disconnected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lTqnT_q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g1oqg3tasdgi5kfxwylq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lTqnT_q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g1oqg3tasdgi5kfxwylq.png" alt="player-ejected-if-existing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dead-player" class="anchor"&gt;
  &lt;/a&gt;
  Dead player
&lt;/h3&gt;

&lt;p&gt;If a player is dead, it's card shows skull and bones at the end of the round (before the discussion round).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FiBUxYuh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/czfjegsnpjwnysbbbrxk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FiBUxYuh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/czfjegsnpjwnysbbbrxk.png" alt="if-dead-player"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quorum-and-jailed-player" class="anchor"&gt;
  &lt;/a&gt;
  Quorum and jailed player
&lt;/h3&gt;

&lt;p&gt;There is a quorum that has to be achieved in order for the voted player to be jailed. In the second photo, the Killer is being ejected and a message that the players won the game, appears. After that, they are being returned to the join screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--spWm0_gy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d9xc68vm2twgk3u43i91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--spWm0_gy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d9xc68vm2twgk3u43i91.png" alt="quorum"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RwF6Fach--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ucmccsmvq4nggktp8mch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RwF6Fach--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ucmccsmvq4nggktp8mch.png" alt="killer-ejected-victorious"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-i-learned" class="anchor"&gt;
  &lt;/a&gt;
  What I learned
&lt;/h1&gt;

&lt;p&gt;Oh man, where should I start... I learned so much about javascript (and programming in general) considering my previous skill level, I could write 5 posts about 5 different things and still have material to write about. The first and most important lesson I learned, is what to do if I'm stuck. I just get off my computer, I go do something different and I come back later (10-15 minutes). Something really interesting related to this one is when I went to sleep, I always came back in my best shape. Not sure how sleeping helps me in such an enormous way, but hey, it works!&lt;/p&gt;

&lt;p&gt;The second thing I learned is that there is no better way of learning stuff than to build projects. I mean, I already knew that, but I explored the power of this method.&lt;/p&gt;

&lt;p&gt;The third thing I learned is if I am lazy, I should just start coding and in 10 minutes I will be deep into my code, not thinking about anything else.&lt;/p&gt;

&lt;p&gt;The rest of what I learned, is technical stuff which I will be covering in my future posts. I will list some of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event listeners are actually working as intended... don't try overwriting them&lt;/li&gt;
&lt;li&gt;The JS .filter is one of the best things when it comes to arrays&lt;/li&gt;
&lt;li&gt;Looping through arrays is not actually that hard&lt;/li&gt;
&lt;li&gt;The JS .map is one powerful tool&lt;/li&gt;
&lt;li&gt;I can now use classes and constructors&lt;/li&gt;
&lt;li&gt;I can now construct a JSON.parse string&lt;/li&gt;
&lt;li&gt;A bunch of generic HTML-related stuff through JS&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-were-my-challenges" class="anchor"&gt;
  &lt;/a&gt;
  What were my challenges
&lt;/h1&gt;

&lt;p&gt;Well, I am having a lot of challenges throughout my way, but that's the fun in building projects, isn't it? The challenge that mostly demotivated me, was at the beginning of my project I did not know how to use classes, constructors, how to call them, and properly get data from them. When I overcame this bottleneck I raised the speed of my programming by a lot. I then had small challenges with socket.io calls but they were nothing like the class one.&lt;/p&gt;

&lt;p&gt;I also had a minor challenge with the naming of my variables, functions, IDs, classes.&lt;/p&gt;

&lt;p&gt;I usually have problems with motivation but since I am on leave from work for 12 days, I am not having such now. I am actually more motivated to code than ever. Makes you wonder...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-left-for-my-game" class="anchor"&gt;
  &lt;/a&gt;
  What is left for my game
&lt;/h1&gt;

&lt;p&gt;The stuff I need to do are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Work with my friend to design the rest of the illustrations&lt;/li&gt;
&lt;li&gt;Make a touch or two on the overall design&lt;/li&gt;
&lt;li&gt;Implement lose game functionality if the killer manages to kill all the players&lt;/li&gt;
&lt;li&gt;Chose a domain&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#next-steps" class="anchor"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h1&gt;

&lt;p&gt;Well, here we are. This is the end of this second part of my 3-part series on how I attended my first hackathon. I learned a lot of stuff and I will certainly be joining more hackathons when I have the time. I am once again highly recommending to everyone who is still not playing in this one, to give it a go. In the end, the project will go in your portfolio anyway so what are you waiting for?!&lt;/p&gt;

&lt;p&gt;For my third post in this series, I will try and explain how my app works, what some pieces of code do so maybe you can fork it and make it better. However, this will be quite hard as there are too many lines of code to explain each and every one of them. Anyway, I will document my code with a lot of comments for you, users, to make it easier to read.&lt;/p&gt;

&lt;p&gt;Alrighty, thanks for reading, and have a great one!&lt;/p&gt;

</description>
      <category>dohackathon</category>
      <category>codenewbie</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>How to use Chart.js in React</title>
      <author>Harshil Parmar</author>
      <pubDate>Tue, 22 Dec 2020 08:42:26 +0000</pubDate>
      <link>https://dev.to/harshilparmar/how-to-use-chart-js-in-react-17jp</link>
      <guid>https://dev.to/harshilparmar/how-to-use-chart-js-in-react-17jp</guid>
      <description>&lt;p&gt;The purpose of this tutorial is to show how to use ChartJS in React. In this tutorial, a small activity logging system is created from scratch.  Based on the activity logged and hours spent, the user will be able to see the relevant chart formed on the screen. At the end of this tutorial, learners will get the basic understanding of ChartJS with React.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo" class="anchor"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://harshilparmar.github.io/React-Chart-Tutorial/"&gt;https://harshilparmar.github.io/React-Chart-Tutorial/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;How will it work?&lt;/li&gt;
&lt;li&gt;Prerequisites&lt;/li&gt;
&lt;li&gt;Development &lt;/li&gt;
&lt;li&gt;Summary&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-will-it-work-" class="anchor"&gt;
  &lt;/a&gt;
  How will it work ?
&lt;/h2&gt;

&lt;p&gt;The app will work according to given steps,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enter activity &amp;amp; hours spent&lt;/li&gt;
&lt;li&gt;Press Submit or Add another activity&lt;/li&gt;
&lt;li&gt;Charts will be shown(based on the activity &amp;amp; hours logged)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Flow of the web application is shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jGWY9aBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p70166jz1ymy4nukcmqd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jGWY9aBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p70166jz1ymy4nukcmqd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites:
&lt;/h2&gt;

&lt;p&gt;To develop the Activity Logging System, we need to use few things. &lt;br&gt;
Those are, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install Node&lt;/li&gt;
&lt;li&gt;Install VSCode&lt;/li&gt;
&lt;li&gt;Install React&lt;/li&gt;
&lt;li&gt;Install Chart&lt;/li&gt;
&lt;li&gt;Install Bootstrap (optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs walk through each of them,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download Node:&lt;br&gt;
&lt;a href="https://nodejs.org/en/download/"&gt;To download node&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install VSCode:&lt;br&gt;
You can visit &lt;a href="https://code.visualstudio.com/download"&gt;here&lt;/a&gt; to download VSCode according to your OS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install react:&lt;br&gt;
To install react on your machine, please run&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx create-react-app my-app&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
,&lt;/p&gt;

&lt;p&gt;You can visit &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html"&gt;here&lt;/a&gt; for official documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Chart-js:&lt;br&gt;
&lt;br&gt;
&lt;code&gt;npm install react-chartjs-2 chart.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;You can visit &lt;a href="https://www.npmjs.com/package/react-chartjs-2"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Install Bootstrap:&lt;br&gt;
&lt;br&gt;
&lt;code&gt;npm i bootstrap&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;You can visit &lt;a href="https://www.npmjs.com/package/bootstrap"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#development" class="anchor"&gt;
  &lt;/a&gt;
  Development:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#folder-structure" class="anchor"&gt;
  &lt;/a&gt;
  Folder Structure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TqvU3G03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wzo1rpgy3s1a2i0hdtqd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TqvU3G03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wzo1rpgy3s1a2i0hdtqd.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-in-react" class="anchor"&gt;
  &lt;/a&gt;
  Styling  in React
&lt;/h3&gt;

&lt;p&gt;There are various technics to style react application.We have used CSS Modules style.&lt;br&gt;
There is a separate style file for each component  &lt;code&gt;component-name.module.css&lt;/code&gt;.&lt;br&gt;
We can easily use that by importing them in js/jsx file and access that by &lt;code&gt;className={styles.form}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more details,you can visit below links: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@dmitrynozhenko/9-ways-to-implement-css-in-react-js-ccea4d543aa3"&gt;https://medium.com/@dmitrynozhenko/9-ways-to-implement-css-in-react-js-ccea4d543aa3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://create-react-app.dev/docs/adding-a-css-modules-stylesheet/"&gt;https://create-react-app.dev/docs/adding-a-css-modules-stylesheet/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#form-component-formjsx" class="anchor"&gt;
  &lt;/a&gt;
  Form component (Form.jsx)
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#form-in-react" class="anchor"&gt;
  &lt;/a&gt;
  Form in React
&lt;/h4&gt;

&lt;p&gt;To make form in react, we have to make states which store local values and change it according to user-inputs.&lt;br&gt;
For Function component we can use useState hook to make state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const initialState = {
  dailyData: [
    {
      activity: "",
      timeSpent: 0,
    },
  ],
  chartLabels: [],
  chartData: [],
  chartColot: [],
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By following  above code snippets, we can initialize state.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const [state, setstate] = useState(initialState);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here initial state will become initial value for our form field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{state.dailyData.map((data, index) =&amp;gt; (
          &amp;lt;Fragment key={index}&amp;gt;
            &amp;lt;div className="row"&amp;gt;
              &amp;lt;div className="col"&amp;gt;
                &amp;lt;input
                  type="text"
                  name="activity"
                  value={data.activity}
                  className="form-control"
                  onChange={(e) =&amp;gt; onChange(e, index)}
                  placeholder="Activity"
                /&amp;gt;
              &amp;lt;/div&amp;gt;
              &amp;lt;div className="col"&amp;gt;
                &amp;lt;input
                  type="number"
                  name="timeSpent"
                  value={data.timeSpent}
                  className="form-control"
                  onChange={(e) =&amp;gt; onChange(e, index)}
                  placeholder="Time Spent"
                /&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;br /&amp;gt;
          &amp;lt;/Fragment&amp;gt;
        ))}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There are two fields in our form:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Activity&lt;/li&gt;
&lt;li&gt;Time spent during that activity (in hour)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each field has value property which is linked to state for showing current value of state in a form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const onChange = (e, index) =&amp;gt; {
    let { name, value } = e.target;

    let updatedState = [...state.dailyData];

    updatedState[index][name] = value;

    setstate((previousState) =&amp;gt; {
      return {
        ...previousState,
        dailyData: [...updatedState],
      };
    });
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Onchange event of form will be handle by onChange handler.It will take event object and index of current changed activity.&lt;br&gt;
For that we can use setState method. &lt;br&gt;
For setting state we have to extract name and value from event object.&lt;br&gt;
Here updatedState is temporary variable for mutating state.&lt;/p&gt;

&lt;p&gt;For more details,you can visit: &lt;a href="https://reactjs.org/docs/forms.html"&gt;https://reactjs.org/docs/forms.html&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#add-dynamic-form-field" class="anchor"&gt;
  &lt;/a&gt;
  Add Dynamic form field
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;       &amp;lt;button
          type="button"
          style={{ marginRight: "25px" }}
          name="addNew"
          onClick={addExtraField}
          className="btn btn-outline-success"
         &amp;gt;
          Add Activity
       &amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;To add an extra activity field we have to click a button which will add a new field to current form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const addExtraField = (e) =&amp;gt; {
    let extraActivity = [
      ...state.dailyData,
      {
        activity: "",
        timeSpent: 0,
      },
    ];

    setstate((previousState) =&amp;gt; {
      return {
        ...previousState,
        dailyData: [...extraActivity],
      };
    });
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;On every onClick event, addExtraField method will be called and set state after pushing new property to dailyData array.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pass-data-to-chart" class="anchor"&gt;
  &lt;/a&gt;
  Pass data to Chart
&lt;/h4&gt;

&lt;p&gt;To pass current data to chart, we have to convert data in a specific format (array).&lt;br&gt;
For that we use submit button to convert current state data to specific format. On every submit button click onSubmit method will be called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const onSubmit = (e) =&amp;gt; {
    e.preventDefault();
    let chartLabels = state.dailyData
      .map((data) =&amp;gt; {
        return data.activity;
      })
      .filter((e) =&amp;gt; e);
    let chartData = state.dailyData
      .map((data) =&amp;gt; {
        return parseInt(data.timeSpent);
      })
      .filter((e) =&amp;gt; e);

    setstate((previousState) =&amp;gt; {
      return {
        ...previousState,
        chartData: chartData,
        chartLabels: chartLabels,
      };
    });
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we have to convert state object to array using map method of array.&lt;br&gt;
And after that we have to set that data to current state.&lt;/p&gt;

&lt;p&gt;For passing data to chart component we have to check data availability for that we have to use conditional rendering.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{state.chartData.length &amp;amp;&amp;amp; state.chartLabels.length ? (
        &amp;lt;Chart {...state} /&amp;gt;
      ) : null}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Chart will only be rendered if there is a proper data to be passed to the chart.&lt;/p&gt;

&lt;p&gt;For more details,you can visit: &lt;a href="https://reactjs.org/docs/conditional-rendering.html"&gt;https://reactjs.org/docs/conditional-rendering.html&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chart-component-chartjsx" class="anchor"&gt;
  &lt;/a&gt;
  Chart Component (Chart.jsx)
&lt;/h3&gt;

&lt;p&gt;To make charts, we have to use react react-chartjs-2 which is wrapper for Chart.js.&lt;br&gt;
For this tutorial we will make three types of charts Line,Pie,Bar.&lt;br&gt;
For more details,you can visit below links: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/react-chartjs-2"&gt;https://www.npmjs.com/package/react-chartjs-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jerairrest.github.io/react-chartjs-2/#/"&gt;http://jerairrest.github.io/react-chartjs-2/#/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In every chart we have to pass prop object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Line
          data={{
            labels: props.chartLabels,
            datasets: [
              {
                data: props.chartData,
                label: "Activity",
                borderColor: "#3333ff",
                fill: true,
                backgroundColor: "#CAA6DB",
              },
            ],
          }}
        /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here labels are those activities which we have been passed from Form component.&lt;br&gt;
Datasets have various properties in which data property take data which we have to plot on chart.&lt;br&gt;
For more details,you can visit below links: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jerairrest/react-chartjs-2#properties"&gt;https://github.com/jerairrest/react-chartjs-2#properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.newline.co/@dmitryrogozhny/quick-introduction-to-displaying-charts-in-react-with-chartjs-and-react-chartjs-2--a85b4e2e"&gt;https://www.newline.co/@dmitryrogozhny/quick-introduction-to-displaying-charts-in-react-with-chartjs-and-react-chartjs-2--a85b4e2e&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To convert This chart to Bar chart we simply have to import Bar chat from react-chartjs-2 library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Bar
        data={{
          labels: props.chartLabels,
          datasets: [
            {
              data: props.chartData,
              label: "Activity",
              borderColor: "#3333ff",
              fill: true,
              backgroundColor: colorPicker.map(() =&amp;gt; colorPicker[Math.round(Math.random() * 2)])
              ,
            },

          ],
        }}
      /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And same for pie chart&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Pie
        data={{
          labels: props.chartLabels,
          datasets: [
            {
              data: props.chartData,
              label: "Activity",
              borderColor: "#3333ff",
              fill: true,
              backgroundColor: colorPicker.map(() =&amp;gt; colorPicker[Math.round(Math.random() * 2)])
              ,
            },
          ],
        }}
      /&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For other examples of chart you can refer &lt;br&gt;
&lt;a href="http://jerairrest.github.io/react-chartjs-2/#/"&gt;http://jerairrest.github.io/react-chartjs-2/#/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here &lt;code&gt;colorPicker&lt;/code&gt; is an array which we are using to generate random colors for charts &lt;code&gt;colorPicker.map(() =&amp;gt; colorPicker[Math.round(Math.random() * 2)])&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary:
&lt;/h2&gt;

&lt;p&gt;In this tutorial, you learnt how to show data in the form of charts using react.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#points-covered" class="anchor"&gt;
  &lt;/a&gt;
  Points covered:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add new input fields to react app dynamically.&lt;/li&gt;
&lt;li&gt;You can customise the look and feel of charts.&lt;/li&gt;
&lt;li&gt;Real time data representation in form of charts.&lt;/li&gt;
&lt;li&gt;Give random colors to the charts.&lt;/li&gt;
&lt;li&gt;Styling of input fields and buttons using Bootstrap.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#future-scopes" class="anchor"&gt;
  &lt;/a&gt;
  Future scopes:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can create charts for large data sets using react.&lt;/li&gt;
&lt;li&gt;You can create a Task Management System for an organization/school/universities.&lt;/li&gt;
&lt;li&gt;Customise charts to represent data in a more visually appealing way.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#motivation-behind-the-tutorial" class="anchor"&gt;
  &lt;/a&gt;
  Motivation behind the tutorial
&lt;/h3&gt;

&lt;p&gt;I and my friend (Kathan Trivedi) had taken part in the Facebook Community challenge 2020 &lt;a href="https://developercircles2020.devpost.com/"&gt;https://developercircles2020.devpost.com/&lt;/a&gt; .In which we had to make a basic tutorial about any facebook technology.&lt;/p&gt;

&lt;p&gt;Hope It helps.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>challenge</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Creating a JS Template Engine</title>
      <author>shadowtime2000</author>
      <pubDate>Mon, 21 Dec 2020 19:02:30 +0000</pubDate>
      <link>https://dev.to/shadowtime2000/creating-a-js-template-engine-1ii7</link>
      <guid>https://dev.to/shadowtime2000/creating-a-js-template-engine-1ii7</guid>
      <description>&lt;p&gt;&lt;strong&gt;NOTE ABOUT COPYRIGHT INFRINGEMENT&lt;/strong&gt; There is an online user going by the name of Stefanie Sayson who is copying and pasting various articles including this. Please do not read them at all because that will make their copy and paste of this article go higher in the search reesults.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-a-js-template-engine" class="anchor"&gt;
  &lt;/a&gt;
  Creating a JS Template Engine
&lt;/h1&gt;

&lt;p&gt;Hi, it's me &lt;a href="https://github.com/shadowtime2000"&gt;@shadowtime2000&lt;/a&gt;, one of the maintainers of &lt;a href="https://eta.js.org"&gt;Eta&lt;/a&gt;, a fast embeddable template engine. In this tutorial I will show you how to create an isomorphic (browser/node) template engine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-design" class="anchor"&gt;
  &lt;/a&gt;
  The Design
&lt;/h2&gt;

&lt;p&gt;The initial design of the template engine will be pretty simple. It will simply interpolate values from a &lt;code&gt;data&lt;/code&gt; object. It will use &lt;code&gt;{{valueName}}&lt;/code&gt; to interpolate values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-rendering" class="anchor"&gt;
  &lt;/a&gt;
  Simple Rendering
&lt;/h2&gt;

&lt;p&gt;First, lets create a simple rendering function which takes the template and the data and it will render the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/{{&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;?)&lt;/span&gt;&lt;span class="sr"&gt;}}/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/{{|}}/&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Basically, all that does is search for anything that is surrounded by the brackets, and it replaces it with the name inside &lt;code&gt;data&lt;/code&gt;. You can write your templates like this and it will take it from the data object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight handlebars"&gt;&lt;code&gt;Hi my name is &lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt;!
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi, my name is {{name}}!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shadowtime2000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But there is a problem, you can't have spaces in the interpolations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi, my name is {{ name }}!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shadowtime2000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="cm"&gt;/*
Hi, my name is undefined!
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This requires you to have spaces inside the data object, which isn't that clean. We can make it allow spaces by trimming leading and ending whitespace of the data name before interpolating.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/{{&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;?)&lt;/span&gt;&lt;span class="sr"&gt;}}/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/{{|}}/&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is pretty good, but for larger templates it wouldn't be that fast because it has to kind of parse it every time. That is why many template engines support compilation, where the template is compiled into a faster JS function which can take the data and interpolate it. Let's add compilation to our template engine, but before we do, we need to add a special parsing function. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parsing" class="anchor"&gt;
  &lt;/a&gt;
  Parsing
&lt;/h2&gt;

&lt;p&gt;Since parsing can be a little boring, let's just reuse some code from another JS template engine. I would have used the Eta parsing engine, but that has been extremely optimized and can be pretty confusing to people. So, lets use another popular JS template engine parsing code, &lt;a href="https://github.com/mde/ejs"&gt;mde/ejs&lt;/a&gt;. Do remember to attribute them for the parsing engine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/{{&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;?)&lt;/span&gt;&lt;span class="sr"&gt;}}/g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstPos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;firstPos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstPos&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;firstPos&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstPos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/{{&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;?)&lt;/span&gt;&lt;span class="sr"&gt;}}/g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What this basically does is loop over executing the regex pattern on the template and adding the stuff to a data structure. Here is what that data structure would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi my name is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{{ name }}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#compilation" class="anchor"&gt;
  &lt;/a&gt;
  Compilation
&lt;/h2&gt;

&lt;p&gt;Let's take a quick overview of what compilation would output. Imagine you enter this template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight handlebars"&gt;&lt;code&gt;Hi my name is &lt;span class="k"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="k"&gt;}}&lt;/span&gt;!
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It would give you this function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi my name is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's first create a function to parse and then create a string that can be used. We first have to parse the template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compileToString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We also have to create a string which will be used as the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compileToString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fnStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`""`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The reason we are using quotation marks at start is because when it is compiling the templates and such, they will all begin with a &lt;code&gt;+&lt;/code&gt;. Now we have to iterate over the AST.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compileToString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fnStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`""`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// checking to see if it is an interpolation&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;}}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// append it to fnStr&lt;/span&gt;
            &lt;span class="nx"&gt;fnStr&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`+data.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/{{|}}/&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// append the string to the fnStr&lt;/span&gt;
            &lt;span class="nx"&gt;fnStr&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`+"&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The final part of this function is to return the function string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compileToString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fnStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`""`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// checking to see if it is an interpolation&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;}}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// append it to fnStr&lt;/span&gt;
            &lt;span class="nx"&gt;fnStr&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`+data.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/{{|}}/&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// append the string to the fnStr&lt;/span&gt;
            &lt;span class="nx"&gt;fnStr&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`+"&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fnStr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So if it takes this template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight handlebars"&gt;&lt;code&gt;Hi my name is  &lt;span class="k"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="k"&gt;}}&lt;/span&gt;!
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It will return this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello my name is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now this is done, creating a compile function is relatively simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;return &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;compileToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we have completed compilation for our template engine. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;In this tutorial I showed how to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Implement a simple rendering function&lt;/li&gt;
&lt;li&gt;Understand a parsing engine adapted from EJS&lt;/li&gt;
&lt;li&gt;Iterate over the AST to create fast compiled functions&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>express</category>
      <category>typescript</category>
    </item>
    <item>
      <title>4 things I learned from my internship that helped me grow </title>
      <author>Mayank S Jha</author>
      <pubDate>Mon, 21 Dec 2020 17:37:03 +0000</pubDate>
      <link>https://dev.to/mayanksjha/4-things-i-learned-from-my-internship-that-helped-me-grow-2bgg</link>
      <guid>https://dev.to/mayanksjha/4-things-i-learned-from-my-internship-that-helped-me-grow-2bgg</guid>
      <description>&lt;p&gt;Over the summer I had the wonderful opportunity to work as a Software Development Engineer at Amazon. As an international student, getting to work at a prestigious company from FAANG was definitely a goal I never thought I would be able to reach.&lt;/p&gt;

&lt;p&gt;I was extremely nervous but also excited as I did not know what to expect. This was my first internship ever so it was also the first time I was going to be in a professional environment. College is great and all, but it never gives you the true experience of a working environment. We have all been there to some extent. A job/internship is very different from your experience at college or high-school.&lt;/p&gt;

&lt;p&gt;In my experience, I have always tried to take something away from a situation, sometimes the hard way. So, at the end of my internship, I compiled a list of the most important lessons I learned over the summer. I‚Äôd like to share them with you.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Start strong, end strong&lt;/li&gt;
&lt;li&gt; Feedback is everything&lt;/li&gt;
&lt;li&gt; You are responsible for your own career&lt;/li&gt;
&lt;li&gt; Have fun&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#start-strong-end-strong" class="anchor"&gt;
  &lt;/a&gt;
  Start Strong, End Strong
&lt;/h2&gt;

&lt;p&gt;Consistency is the name of the game. This a saying that is passed around as a lesson for almost anything in life. The reality is that it is harder than it sounds.&lt;/p&gt;

&lt;p&gt;Consistency, in my opinion, is an umbrella term.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Perseverance&lt;/strong&gt; ‚Äî One of the single greatest qualities we can have as humans, is perseverance. To face the odds no matter what, and continue to put in the effort to achieve something. Keep at it, and you will make progress to be proud of. Sure, some ideas may still crash and burn but you walk away with so much more. Thomas Edison said, ‚Äú&lt;em&gt;I just found&lt;/em&gt; &lt;strong&gt;&lt;em&gt;2,000 ways&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;not to&lt;/em&gt; &lt;strong&gt;&lt;em&gt;make a lightbulb&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;; I only needed to find one&lt;/em&gt; &lt;strong&gt;&lt;em&gt;way&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;to&lt;/em&gt; &lt;strong&gt;&lt;em&gt;make&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;it work&lt;/em&gt;.‚Äù&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dive Deep&lt;/strong&gt; ‚Äî When going up against herculean tasks, you need to be prepared. Break your tasks into smaller components. Go into the storm of your tasks ready. Check your equipment and gear ( tools you need ), check the map ( How will you complete this task? / What are you looking for? ), and READ THE F****** MANUAL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consistency&lt;/strong&gt; ‚Äî Remember that new year‚Äôs resolution that died down after school reopened or was it during that deadline week? Join the club. It‚Äôs easy to be on top of your game at the start of something but that same energy, dedication dies down after a while. Be aware of this mistake as I myself have fallen victim more than I‚Äôd like to admit.&lt;/p&gt;

&lt;p&gt;hm‚Ä¶ I should change the title‚Ä¶‚ÄúStart Strong, End &lt;strong&gt;Stronger&lt;/strong&gt;‚Äù&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feedback-is-everything" class="anchor"&gt;
  &lt;/a&gt;
  Feedback is Everything
&lt;/h2&gt;

&lt;p&gt;This is definitely an important one. Feedback is what drives us to be better at whatever we do. It is the fundamental on which the idea of competition exists. Competition in turn yields better output.&lt;/p&gt;

&lt;p&gt;So, where is the catch?&lt;/p&gt;

&lt;p&gt;Feedback is &lt;strong&gt;never&lt;/strong&gt; nonverbal. It is a bias to think that no feedback means everything is a-okay. Feedback is your own responsibility to make sure that you receive it.&lt;/p&gt;

&lt;p&gt;Don‚Äôt take feedback personally. Seek constructive criticism and accept it. I would sometimes make the mistake of feeling like I‚Äôm worthless because someone said, ‚ÄúThis is wrong, we went over this.‚Äù When in reality, I was being guided to watch out for silly mistakes that can happen to anyone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-are-responsible-for-your-own-career" class="anchor"&gt;
  &lt;/a&gt;
  You are responsible for your own career
&lt;/h2&gt;

&lt;p&gt;My first manager said, ‚ÄúYou are responsible for your own career.‚Äù and the words have stuck with me ever since. I have thought long and hard about this one.&lt;/p&gt;

&lt;p&gt;Focus on why you are doing what are you are doing. Take a minute to think about it. What is the outcome?&lt;/p&gt;

&lt;p&gt;When working together, trust others, and make sure others can trust you. We should be able to deliver results blindly without going back and forth for cleanups. It gets better over time as we learn to catch and rectify ourselves if something goes wrong.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#have-fun" class="anchor"&gt;
  &lt;/a&gt;
  Have fun
&lt;/h2&gt;

&lt;p&gt;This one is simple‚Ä¶&lt;/p&gt;

&lt;p&gt;Have fun. Take care of your health and well being and reach out when you need assistance. Over the summer, I was cooped up in my university dorm for 3 months working 8 hours a day remotely. So, believe me when I say that I wish I had done something more to keep my well being intact.&lt;/p&gt;

&lt;p&gt;You simply cannot perform at the same level as you would when you are at your best mentally, physically, emotionally and any other ‚Äú-allys‚Äù you can think of.&lt;/p&gt;




&lt;p&gt;When I try to think about what has changed since my summer, I feel that I am definitely a more confident person. I know that when I wake up tomorrow, I will follow these learnings as not just a handbook for the ‚Äúoffice life‚Äù but also as a form of self-discipline.&lt;/p&gt;

&lt;p&gt;Why? Because f*** it that‚Äôs why. But also, because I never said that these learnings helped me grow as a professional. I said that these learnings helped me grow. Period.&lt;/p&gt;

</description>
      <category>career</category>
      <category>leadership</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>How AWS Lambda Works Under The Hood</title>
      <author>Oliver Jumpertz</author>
      <pubDate>Mon, 21 Dec 2020 16:48:16 +0000</pubDate>
      <link>https://dev.to/oliverjumpertz/how-aws-lambda-works-under-the-hood-2iae</link>
      <guid>https://dev.to/oliverjumpertz/how-aws-lambda-works-under-the-hood-2iae</guid>
      <description>&lt;p&gt;AWS Lambda is an awesome offering. You provide the code, AWS handles the infrastructure and execution for you.&lt;/p&gt;

&lt;p&gt;But where is your code actually executed? How does AWS do it?&lt;/p&gt;

&lt;p&gt;I recently tried to find it out for myself, and this article is the result of what I learned.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinking-about-lambda" class="anchor"&gt;
  &lt;/a&gt;
  Thinking about Lambda
&lt;/h2&gt;

&lt;p&gt;We know that we can write a script that looks like below, and then upload it to AWS while they take care of everything else.&lt;br&gt;
And from simply looking at the code, it doesn't look like the usual API method we'd implement in Express.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello from Lambda!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We're exporting a function, so something else must take our code, import it, and then handle everything else.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion number one:&lt;/strong&gt;&lt;br&gt;
Something must run our code.&lt;/p&gt;

&lt;p&gt;We also know the infamous cold start issues which became better over time but are still there. Sometimes the environment is shut down and then started again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion number two:&lt;/strong&gt;&lt;br&gt;
Whatever runs our code can be shut down and started again.&lt;/p&gt;

&lt;p&gt;Have you ever noticed that it's actually impossible to access anything on the host system? If not, try to, and you'll see that the environment will prevent it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion number three:&lt;/strong&gt; &lt;br&gt;
The environment is pretty secure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinking-about-the-technology-lambda-is-based-on" class="anchor"&gt;
  &lt;/a&gt;
  Thinking about the technology Lambda is based on
&lt;/h2&gt;

&lt;p&gt;There are a few ways of how AWS could have implemented Lambda (taking into account its initial release year of 2014):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Containerization&lt;/li&gt;
&lt;li&gt;Virtualization&lt;/li&gt;
&lt;li&gt;Something running on bare metal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can quickly rule out "Something running on bare metal". AWS already had EC2 at that time and some good knowledge of virtualization.&lt;br&gt;
It would not have made a lot of sense for AWS to step back from virtualization and not make use of their existing infrastructure.&lt;br&gt;
They basically had everything in place to provision a virtual machine on-the-fly.&lt;/p&gt;

&lt;p&gt;What about Containers then?&lt;br&gt;
They can be spun up quickly and disposed of again.&lt;br&gt;
AWS could have taken the code, wrap it with something and then put it inside a container.&lt;br&gt;
This would have been a great idea, but also something completely new for AWS at that time.&lt;br&gt;
Additionally, it would not explain the (old) cold start issues, because containers are usually pretty fast to spin up.&lt;/p&gt;

&lt;p&gt;What about virtualization then?&lt;br&gt;
It would make a lot of sense. &lt;br&gt;
At the time of starting Lambda, AWS already had EC2 and all the infrastructure to provision a virtual machine on-the-fly. It would also explain why a lambda function being cold-started could sometimes take so long until it finally served a request. But how did they manage to reduce the cold start time up to today?&lt;/p&gt;

&lt;p&gt;Before we dive deeper, I'll give you the answer:&lt;br&gt;
Lambda has, since its release, been based on virtualization technology. No fancy containers, nothing self-developed.&lt;/p&gt;

&lt;p&gt;It simply made the most sense for AWS to do it exactly this way. They had all the knowledge, as you've read above, and they had the infrastructure for provision. All they had to add was something to wrap user functions, and something to call them, as well as some supporting services which could handle eventing.&lt;/p&gt;

&lt;p&gt;And now that we know that it's virtualization, we can take a look at what's exactly used nowadays.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enter-firecracker" class="anchor"&gt;
  &lt;/a&gt;
  Enter Firecracker
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://firecracker-microvm.github.io"&gt;Firecracker&lt;/a&gt; is a virtualization technology, or better, a virtual machine monitor (VMM) developed at Amazon (now open-sourced) and written in Rust.&lt;/p&gt;

&lt;p&gt;It's the engine powering all your Lambda functions.&lt;/p&gt;

&lt;p&gt;What Firecracker basically does is creating and managing a multitude of Linux Kernel-based Virtual Machines (KVMs), which are microVMs that are faster and more secure than traditional VMs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BQ1CRRHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/szlmqk7hri9doma31a7j.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQ1CRRHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/szlmqk7hri9doma31a7j.jpeg" alt="The architecture of Firecracker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The interesting thing about those microVMs is, that they are actually on par with containers regarding memory footprint and start-up time, all while offering even more security due to the advanced features KVM offers.&lt;/p&gt;

&lt;p&gt;You can read more about KVM &lt;a href="https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Firecracker comes with a REST API that is used to create VMs, delete them, manage them, etc.&lt;br&gt;
Whenever you create a new lambda function and upload your code, the Firecracker REST-API is called under the hood to create a microVM with your function's CPU and memory settings.&lt;/p&gt;

&lt;p&gt;AWS keeps base images that contain language/runtime specific bootstrap code.&lt;br&gt;
This is the code that actually invokes your handler, passes it the request, and takes the response to return it to the caller.&lt;br&gt;
This is also the code where various metrics are measured that are then used to calculate your bill.&lt;/p&gt;

&lt;p&gt;You can imagine the code as containing an infinite loop, waiting for requests, passing them to your function, returning the response, and gathering execution metrics.&lt;/p&gt;

&lt;p&gt;After Firecracker created a new microVM, including your language-specific runtime, your code is then put into its /var/runtime/bin folder. This is the place where the bootstrap code resides, too.&lt;br&gt;
Now your function is basically able to run and accept requests.&lt;/p&gt;

&lt;p&gt;AWS will, after a while, however, shut the VM down to save resources on their side. &lt;br&gt;
This is, once again, a call to the Firecracker API. &lt;/p&gt;

&lt;p&gt;Incoming requests, e.g. through API Gateway, lead to Firecracker being tasked to start the VM again, such that it can process the request.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#surrounding-infrastructure-and-supporting-services" class="anchor"&gt;
  &lt;/a&gt;
  Surrounding infrastructure and supporting services
&lt;/h2&gt;

&lt;p&gt;There are of course a lot of surrounding systems and services which do their work to make AWS Lambda what it is.&lt;/p&gt;

&lt;p&gt;There are services and systems around Firecracker that make all those requests to its API.&lt;br&gt;
Some services are routing the requests. Some services decide when to call Firecracker to shut a certain VM down or pause it, and when to spin it up again.&lt;br&gt;
And there are certainly a lot more services, like Queues, scheduling asynchronous messages, and much more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It's pretty interesting to see what way AWS has gone to make Lambda what it is today, and even more interesting to see Firecracker and how it solves a lot of problems serverless functions cause for service providers. And Firecracker is an integral part of it, as a pretty exciting piece of technology, that doesn't go the usual container route but used another awesome feature of the Linux kernel: KVM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-you-leave" class="anchor"&gt;
  &lt;/a&gt;
  Before you leave
&lt;/h2&gt;

&lt;p&gt;If you like my content, visit me on &lt;a href="https://twitter.com/oliverjumpertz"&gt;Twitter&lt;/a&gt;, and perhaps you‚Äôll like what you see.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>faas</category>
      <category>lambda</category>
    </item>
    <item>
      <title>Best 20 C# &amp; .NET Blogs</title>
      <author>Seb Nilsson</author>
      <pubDate>Mon, 21 Dec 2020 14:44:00 +0000</pubDate>
      <link>https://dev.to/sebnilsson/best-20-c-net-blogs-14n6</link>
      <guid>https://dev.to/sebnilsson/best-20-c-net-blogs-14n6</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Originally written for and published on &lt;a href="https://draft.dev/learn/technical-blogs/c-sharp-blogs"&gt;the Draft.dev blog&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;C# is a language loved by its users for being versatile, productive, and keeping up with the current problems programmers need to solve. For example, maintainers have added functional programming concepts to the primarily imperative C# language, adding the powerful query-functionality in LINQ, and smoother handling of asynchronous programming with the &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt;-syntax.&lt;/p&gt;

&lt;p&gt;The unification of all versions of .NET into .NET 5 has given C# and .NET future-safety, no matter which platform you use to develop or which platform you develop for: desktop, web, cloud, mobile, or other.&lt;/p&gt;

&lt;p&gt;Whether you're getting into C# with the launch of .NET 5 or if you're a long-time C# developer, there are a lot of great blogs out there. Based on writing quality, consistency, longevity, technical depth, and usefulness, I've put together &lt;strong&gt;this comprehensive list of the 20 best C# blogs publishing today&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#net-blog" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://devblogs.microsoft.com/dotnet/"&gt;.NET Blog&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yptiZsPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sebnilssonst.blob.core.windows.net/web/images/top-csharp-blogs/dotnet-blog.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yptiZsPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sebnilssonst.blob.core.windows.net/web/images/top-csharp-blogs/dotnet-blog.jpg" alt="Screenshot of the .NET Blog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maybe a bit obvious, but the .NET blog from Microsoft should probably your first place to check for new updates on C# and .NET. They consistently publish updates about everything related to C# and .NET but also dives deep into different subjects, such as functionality deep within .NET or the details about the performance improvements being made there.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 5&lt;/li&gt;
&lt;li&gt;Consistency: 5&lt;/li&gt;
&lt;li&gt;Longevity: 5&lt;/li&gt;
&lt;li&gt;Technical Depth: 5&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 5&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scott-hanselmans-blog" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.hanselman.com/blog"&gt;Scott Hanselman's Blog&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---10VdZyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sebnilssonst.blob.core.windows.net/web/images/top-csharp-blogs/hanselman.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---10VdZyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sebnilssonst.blob.core.windows.net/web/images/top-csharp-blogs/hanselman.jpg" alt="Screenshot of Scott Hanselman's blog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes, I'm unsure if you're allowed to use .NET if you're not reading Scott Hanselman's blog. There might be something in EULA about that. üòâ&lt;/p&gt;

&lt;p&gt;Jokes aside, Hanselman has been blogging about C# and .NET from the very start and has inspired many people with the content on his blog, his conference-talks, his podcast, his YouTube-channel, and more. He mixes high-level articles with some technical deep-dives, and his posts seem to be driven by his passion for learning and solving problems.&lt;/p&gt;

&lt;p&gt;Hanselman has become quite a household name in the .NET-world and is often featured in Microsoft's keynotes. This is well deserved, given his unparalleled professional approach to quality content, interesting topics, and entertaining delivery.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 5&lt;/li&gt;
&lt;li&gt;Consistency: 5&lt;/li&gt;
&lt;li&gt;Longevity: 5&lt;/li&gt;
&lt;li&gt;Technical Depth: 5&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 5&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ardalis-steve-smiths-blog" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://ardalis.com/blog"&gt;Ardalis: Steve Smith's Blog&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3j5RgMyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sebnilssonst.blob.core.windows.net/web/images/top-csharp-blogs/ardalis.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3j5RgMyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sebnilssonst.blob.core.windows.net/web/images/top-csharp-blogs/ardalis.jpg" alt="Screenshot of Ardalis: Steve Smith's Blog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Steve Smith (aka Ardalis) is a strong proponent of producing content instead of consuming it, which is quite obviously something he lives by when you look at his output. If you are a person wanting to build your own brand, Steve is a role-model. He continually puts out qualitative information on his blog, on Twitter, on Twitch, his newsletter, his Pluralsight-courses, and he now also is building his own developer coaching-community.&lt;/p&gt;

&lt;p&gt;Lately, Steve has been focusing on a lot of content around Domain-Driven Design (DDD) and the SOLID-principles. Much of this can be found on his blog and on some great Pluralsight-courses.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 5&lt;/li&gt;
&lt;li&gt;Consistency: 5&lt;/li&gt;
&lt;li&gt;Longevity: 5&lt;/li&gt;
&lt;li&gt;Technical Depth: 5&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 4&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#alvin-ashcrafts-morning-dew" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.alvinashcraft.com/"&gt;Alvin Ashcraft's Morning Dew&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cA94A9Gr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sebnilssonst.blob.core.windows.net/web/images/top-csharp-blogs/morning-dew.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cA94A9Gr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sebnilssonst.blob.core.windows.net/web/images/top-csharp-blogs/morning-dew.jpg" alt="Screenshot of Alvin Ashcraft's Morning Dew"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see basically every new article the community puts out every single day? Well, then Alvin Ashcraft's_Morning Dew_ has you covered when it comes to the subjects of C#, .NET, and the Microsoft-ecosystem.&lt;/p&gt;

&lt;p&gt;Alvin Ashcraft is a longtime Microsoft MVP. From what you can tell from comments on his website, Morning Dew is the result of Alvin reading through over 1,600 feeds daily. Any interesting articles found are categorized and published on the blog.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: N/A&lt;/li&gt;
&lt;li&gt;Consistency: 5&lt;/li&gt;
&lt;li&gt;Longevity: 5&lt;/li&gt;
&lt;li&gt;Technical Depth: N/A&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 5&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#troy-hunt" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.troyhunt.com/"&gt;Troy Hunt&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SOwuI_XR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sebnilssonst.blob.core.windows.net/web/images/top-csharp-blogs/troy-hunt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOwuI_XR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sebnilssonst.blob.core.windows.net/web/images/top-csharp-blogs/troy-hunt.jpg" alt="Screenshot of Troy Hunt's blog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the most influential voices on the topic of security within the Microsoft-ecosystem is Troy Hunt. He is the creator of the service &lt;a href="https://haveibeenpwned.com/"&gt;Have I Been Pwned (HIBP)&lt;/a&gt;, which helps users identify if and how they've been affected by data breaches and other malicious activity on the internet.&lt;/p&gt;

&lt;p&gt;Since Troy has Microsoft MVP for developer-security for a longer time, this is a subject that is often covered on his blog.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 5&lt;/li&gt;
&lt;li&gt;Consistency: 5&lt;/li&gt;
&lt;li&gt;Longevity: 5&lt;/li&gt;
&lt;li&gt;Technical Depth: 4&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 3&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tim-heuer" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://timheuer.com/blog"&gt;Tim Heuer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Tim Heuer has worked at Microsoft since 2005, currently with a focus on .NET, Visual Studio, and Azure. This gives him a lot of insight, which you can tell by the in-depth content and a great variety of technologies covered on his blog.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 5&lt;/li&gt;
&lt;li&gt;Consistency: 4&lt;/li&gt;
&lt;li&gt;Longevity: 5&lt;/li&gt;
&lt;li&gt;Technical Depth: 5&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 4&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-data-farm-julie-lermans-world-of-data" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://thedatafarm.com/blog/"&gt;The Data Farm: Julie Lerman's World of Data&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Julie Lerman is the absolute authority on &lt;a href="https://docs.microsoft.com/en-us/ef/"&gt;Entity Framework&lt;/a&gt;, including EF Core. No matter if you're looking for a detailed, low-level problem within EF, or if you're looking for a solid guide to walk you through various aspects of Entity Framework, there is a real chance that you'll find material around it produced by Julie Lerman.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 5&lt;/li&gt;
&lt;li&gt;Consistency: 4&lt;/li&gt;
&lt;li&gt;Longevity: 5&lt;/li&gt;
&lt;li&gt;Technical Depth: 5&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 4&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#youve-been-haacked" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://haacked.com/"&gt;You've Been Haacked&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Phil Haack was an integral part of helping Microsoft make many of its development-software open-source, along with Scott Hanselman, Scott Guthrie, and Rob Connery. Since then, Phil has moved on from Microsoft but still consistently blogs about technologies in the Microsoft-ecosystem.&lt;/p&gt;

&lt;p&gt;With his experience inside Microsoft during their exciting transformation, there is usually something interesting for developers to learn in his posts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 5&lt;/li&gt;
&lt;li&gt;Consistency: 4&lt;/li&gt;
&lt;li&gt;Longevity: 5&lt;/li&gt;
&lt;li&gt;Technical Depth: 4&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 4&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ploeh-mark-seemann" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://blog.ploeh.dk/"&gt;ploeh: Mark Seemann&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you feel completely bulletproof in your coding-skills, go check out Mark Seemann's blog and get a glimpse of the endless things you could be doing better.&lt;/p&gt;

&lt;p&gt;Writing good software is an art, so you can have endless opinions on other peoples' opinions, but there is almost always something new to learn from Mark's deep-diving and well-thought-through posts. Each article walks you through a complicated concept and helps you understand it and become a better developer who writes better, more maintainable code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 5&lt;/li&gt;
&lt;li&gt;Consistency: 5&lt;/li&gt;
&lt;li&gt;Longevity: 5&lt;/li&gt;
&lt;li&gt;Technical Depth: 5&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 3&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#daniel-cazzulinos-blog" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.cazzulino.com/"&gt;Daniel Cazzulino's Blog&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Daniel Cazzulino (aka 'kzu') is the creator of the most popular mocking framework for C# and .NET, called &lt;a href="https://github.com/moq/moq4"&gt;Moq&lt;/a&gt;, which is used for testing the source-code behind .NET.&lt;/p&gt;

&lt;p&gt;Kzu writes about all different kinds of technologies related to the Microsoft-ecosystem and mixes high-level guides with technical deep dives into non-mainstream topics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 5&lt;/li&gt;
&lt;li&gt;Consistency: 4&lt;/li&gt;
&lt;li&gt;Longevity: 4&lt;/li&gt;
&lt;li&gt;Technical Depth: 5&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 4&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#visual-studio-blog" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://devblogs.microsoft.com/visualstudio/"&gt;Visual Studio Blog&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The blog for the Visual Studio Engineering Team, of course, covers everything related to Visual Studio, but it also includes adjacent technologies, which can contribute to great inspiration. They cover topics like Unity, Visual Studio for Mac, GitHub-integrations, debugging with memory-dumping, and much more.&lt;/p&gt;

&lt;p&gt;For anyone interested in productivity in your Visual Studio-editor, it's worth noting that&lt;a href="https://www.madskristensen.net/"&gt;Mads Kristensen&lt;/a&gt; writes posts on the subject on the Visual Studio Blog.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 5&lt;/li&gt;
&lt;li&gt;Consistency: 5&lt;/li&gt;
&lt;li&gt;Longevity: 4&lt;/li&gt;
&lt;li&gt;Technical Depth: 4&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 4&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#maarten-balliauw" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://blog.maartenballiauw.be/"&gt;Maarten Balliauw&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Maarten has a focus on web and cloud-apps, but he was also the founder of &lt;a href="https://www.myget.org/"&gt;MyGet&lt;/a&gt; and is a frequent speaker at conferences. He brings a unique mix of experiences and knowledge to his blog, which covers many different technologies within the Microsoft-ecosystem.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 5&lt;/li&gt;
&lt;li&gt;Consistency: 4&lt;/li&gt;
&lt;li&gt;Longevity: 5&lt;/li&gt;
&lt;li&gt;Technical Depth: 4&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 4&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#jon-skeet" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://codeblog.jonskeet.uk/"&gt;Jon Skeet&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you have ever searched for a C# question, there's a 99% chance that you have, at least once, landed on an answer on Stack Overflow by Jon Skeet.&lt;/p&gt;

&lt;p&gt;He's been &lt;strong&gt;the number one contributor to Stack Overflow&lt;/strong&gt; for many years and usually with a focus on .NET and C#. It is said that he‚Äôs read the whole C# specification (maybe more than once), and he regularly blogs about some of the deepest subjects around C#.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 5&lt;/li&gt;
&lt;li&gt;Consistency: 4&lt;/li&gt;
&lt;li&gt;Longevity: 4&lt;/li&gt;
&lt;li&gt;Technical Depth: 5&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 3&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#jimmy-bogard" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://jimmybogard.com/"&gt;Jimmy Bogard&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Jimmy is the man behind some of the most productivity-boosting frameworks for C# and .NET developers: AutoMapper and MediatR. These frameworks help you write isolated and more easily maintainable code and his blog-posts revolve around these frameworks, but also these topics in general.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 4&lt;/li&gt;
&lt;li&gt;Consistency: 4&lt;/li&gt;
&lt;li&gt;Longevity: 4&lt;/li&gt;
&lt;li&gt;Technical Depth: 5&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 4&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#rick-strahls-web-log" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://weblog.west-wind.com/"&gt;Rick Strahl's Web Log&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you've worked with C# and .NET since its early days, especially with a focus on ASP.NET and the web, you will most probably have run into more than one of Rick Strahl's blog-posts.&lt;/p&gt;

&lt;p&gt;In the course of working hands-on solving problems for clients, Rick has documented many solutions to real-world problems on his blog. The topics often coincide with what other people are looking to answer, so you can often find one of Rick's articles linked in answers on Stack Overflow.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 4&lt;/li&gt;
&lt;li&gt;Consistency: 4&lt;/li&gt;
&lt;li&gt;Longevity: 5&lt;/li&gt;
&lt;li&gt;Technical Depth: 4&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 5&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#net-tools-blog-jetbrains" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://blog.jetbrains.com/dotnet/"&gt;.NET Tools Blog - JetBrains&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;JetBrain's blog for .NET covers very useful topics, whether you use their tools or not. They have specific posts about the popular tools ReSharper and Rider, but also great articles about a broad range of topics related to C# and .NET.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 5&lt;/li&gt;
&lt;li&gt;Consistency: 5&lt;/li&gt;
&lt;li&gt;Longevity: N/A&lt;/li&gt;
&lt;li&gt;Technical Depth: 4&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 4&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#shawn-wildermuth" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="http://wildermuth.com/"&gt;Shawn Wildermuth&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Shawn has been a prolific creator of content around C#, .NET, and the Microsoft-ecosystem since the earliest days of .NET. Focusing mainly on the web-aspect of .NET, and recently, with a lot of Vue.js content, he now describes himself as an author, teacher, and filmmaker.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 4&lt;/li&gt;
&lt;li&gt;Consistency: 4&lt;/li&gt;
&lt;li&gt;Longevity: 5&lt;/li&gt;
&lt;li&gt;Technical Depth: 4&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 3&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fabulous-adventures-in-coding-eric-lipperts-blog" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://ericlippert.com/"&gt;Fabulous Adventures in Coding - Eric Lippert's Blog&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Eric Lippert used to work on the C# language design team, which is clear based on his superhuman rate of answering questions on Stack Overflow. On his blog, he deep-dives into language-design with a focus on "making developers' lives better and having fun doing it".&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 5&lt;/li&gt;
&lt;li&gt;Consistency: 3&lt;/li&gt;
&lt;li&gt;Longevity: 5&lt;/li&gt;
&lt;li&gt;Technical Depth: 5&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 2&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#strathweb-filip-w" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.strathweb.com/"&gt;StrathWeb - Filip W.&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;When searching for various intricate technical issues related to the Microsoft-ecosystem, it is not uncommon to end up on an in-depth article written by Filip. Recently, the topic of quantum computing has been a big focus, to add to the long archive of articles focused on C# and .NET.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 4&lt;/li&gt;
&lt;li&gt;Consistency: 4&lt;/li&gt;
&lt;li&gt;Longevity: 4&lt;/li&gt;
&lt;li&gt;Technical Depth: 5&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 3&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#dont-code-tired-jason-roberts" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="http://dontcodetired.com/blog"&gt;Don't Code Tired - Jason Roberts&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Jason Roberts is a former Microsoft MVP who blogs on different topics around the Microsoft-ecosystem. Lately, he‚Äôs been focused on testing with posts about approval tests, feature-flags, and optimizing various testing frameworks.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing Quality: 4&lt;/li&gt;
&lt;li&gt;Consistency: 4&lt;/li&gt;
&lt;li&gt;Longevity: 5&lt;/li&gt;
&lt;li&gt;Technical Depth: 4&lt;/li&gt;
&lt;li&gt;Broad Usefulness: 2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#final-words" class="anchor"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;While researching this post, I went through every single account I subscribe to on Twitter to pick out the best blogs from the best people I've been following for many years - often over a decade. I was surprised to recognize so many names I had associated with quality content and learned so much from, but what surprised me even more was how many of these people had stopped blogging or switched focus away from C# and .NET.&lt;/p&gt;

&lt;p&gt;Scott Guthrie is probably a perfect example. He used to be one of the top bloggers within our field before he was promoted to the fancy title of &lt;em&gt;Executive Vice President&lt;/em&gt; at Microsoft, where the blog no longer seemed to be a priority. So subscribe to these blogs while you can. You never know when things will change.&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>dotnetcore</category>
      <category>visualstudio</category>
    </item>
    <item>
      <title>How to easily convert HTML Form to JSON</title>
      <author>Jordan Finneran</author>
      <pubDate>Mon, 21 Dec 2020 13:56:46 +0000</pubDate>
      <link>https://dev.to/jordanfinners/how-to-easily-convert-html-form-to-json-3pea</link>
      <guid>https://dev.to/jordanfinners/how-to-easily-convert-html-form-to-json-3pea</guid>
      <description>&lt;h1&gt;
  &lt;a href="#contents" class="anchor"&gt;
  &lt;/a&gt;
  Contents
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#intro"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#form-data"&gt;Form Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gotcha"&gt;Gotcha's&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;I have a love, but sometimes hate, relationship with HTML Forms. HTML Forms are absolutely brilliant for out of the box validation, accessibility and usability. But they can be a pain to style!&lt;br&gt;
Nevertheless, HTML Forms give you massive amounts of functionality with zero dependencies. &lt;/p&gt;

&lt;p&gt;If you are anything like me, you prefer your API to be JSON based. Making it easier and more consistent to deal with requests and responses on the backend.&lt;br&gt;
You &lt;em&gt;could&lt;/em&gt; add a middleware to your API endpoint that's going to handle your Form UI but why make that endpoint different from the rest?&lt;/p&gt;

&lt;p&gt;What if you could send your Form data off in JSON format and handle it like all your other endpoints. Now you can!&lt;/p&gt;

&lt;p&gt;TLDR; Skip to the &lt;a href="#examples"&gt;examples&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#form-data" class="anchor"&gt;
  &lt;/a&gt;
  Form Data &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Introducing &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData"&gt;FormData&lt;/a&gt;, this is a really nice Web API for manipulating data in HTML Forms.&lt;/p&gt;

&lt;p&gt;This allows us to easily convert a HTML Form to JSON using the following.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Grab the form element from the DOM.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Pass the form to the following function
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Creates a json object including fields in the form
 *
 * @param {HTMLElement} form The form element to convert
 * @return {Object} The form data
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Action the JSON Object result, however you want to handle the data from the form! Send it off with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch"&gt;Fetch&lt;/a&gt; for example.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;
  &lt;a href="#gotchas" class="anchor"&gt;
  &lt;/a&gt;
  Gotcha's &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;As with everything these are a few gotchas to look out for!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#checkboxs" class="anchor"&gt;
  &lt;/a&gt;
  Checkbox's
&lt;/h2&gt;

&lt;p&gt;If ticked your checkbox's will appear in the result as 'on'. Probably not the boolean you want.&lt;br&gt;
For example, if you've got this input in your form, which the user has checked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"isOpen"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It would produce, using the function above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"isOpen"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"on"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You will probably want to check for the property and if it equals 'on' and convert it to a boolean.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#file-uploads" class="anchor"&gt;
  &lt;/a&gt;
  File Uploads
&lt;/h2&gt;

&lt;p&gt;This one really caught me out, if you've got a file input which accepts multiple files, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"uploads"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;multiple&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If one file is uploaded you will get a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/File"&gt;File&lt;/a&gt; object.&lt;br&gt;
But if you have multiple files uploaded, you will actually get a list of them.&lt;/p&gt;

&lt;p&gt;Fortunately, there is a really simple fix for this to consistently provide you with a list of files.&lt;br&gt;
Grab the files from the result and process them like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will consistently give you a list of files, handling if only a single file is uploaded, no file is uploaded or multiples are uploaded.&lt;/p&gt;

&lt;p&gt;This also means you can do more client side checks on file sizes and limits for example as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inputs-with-the-same-name" class="anchor"&gt;
  &lt;/a&gt;
  Inputs with the same name
&lt;/h2&gt;

&lt;p&gt;Let's say you've got a list of possible tags and a user can tick the ones that apply, perhaps which programming languagues they know, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"tags"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"javascript"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"tags"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"python"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With the current solution, you would only get the last selected checkbox as the keys would be overridden in the reduce. However there is a simple fix for this as well.&lt;/p&gt;

&lt;p&gt;We check to see if the key (the name attribute on the input) already exists in the result, if it does then use a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/getAll"&gt;getAll&lt;/a&gt; method which will get a list of results.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Creates a json object including fields in the form
 *
 * @param {HTMLElement} form The form element to convert
 * @return {Object} The form data
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Similarly, to the file upload before, you'll want to handle only one being ticked, no being ticked or multiple, with something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]].&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Shut up and show me the code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#examples/interactive"&gt;Interactive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples/simple"&gt;Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples/full"&gt;Full&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples/test"&gt;Bonus: Example Test&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;br&gt;
&lt;iframe src="https://jsfiddle.net/Lmg1f3tu//embedded/result,html,css,js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-example" class="anchor"&gt;
  &lt;/a&gt;
  Simple Example &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"forms"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"forms"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Whats your username?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;How many years have you been a developer?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"age"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// get the form element from dom&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form#forms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// convert the form to JSON&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// handle the form submission event, prevent default form behaviour, check validity, convert form to JSON&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reportValidity&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#full-example" class="anchor"&gt;
  &lt;/a&gt;
  Full Example &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"forms"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"forms"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Whats your username?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;How many years have you been a developer?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"age"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Upload images
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"images"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;accept=&lt;/span&gt;&lt;span class="s"&gt;"image/png, image/jpeg"&lt;/span&gt; &lt;span class="na"&gt;multiple&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Do you know javascript?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"languages"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"javascript"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Do you know python?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"languages"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"python"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Enjoyed this blog?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"isHappyReader"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// get the form element from dom&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form#forms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// convert the form to JSON&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// handle the form submission event, prevent default form behaviour, check validity, convert form to JSON&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reportValidity&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// handle one, multiple or no files uploaded&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// handle one, multiple or no languages selected&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;languages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;languages&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]].&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// convert the checkbox to a boolean&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isHappyReader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isHappyReader&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isHappyReader&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// use spread function, but override the keys we've made changes to&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;isHappyReader&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bonus-example-test" class="anchor"&gt;
  &lt;/a&gt;
  Bonus: Example Test &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return a JSON representation of a form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;int&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deep&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In summary, you can use what browsers give you to get all the great benefits of HTML Forms, and then convert it to JSON so it's easier to work with the data! I hope this has been useful.&lt;/p&gt;

&lt;p&gt;Happy Form building!&lt;/p&gt;

&lt;p&gt;Would you be interested in a series of what you can achieve with HTML and Web APIs?&lt;br&gt;
What are you favourite web tips and tricks? &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>form</category>
    </item>
    <item>
      <title>Tips to better contribute to a product team as a Junior Developer</title>
      <author>Hibo Abdilaahi</author>
      <pubDate>Mon, 21 Dec 2020 11:56:51 +0000</pubDate>
      <link>https://dev.to/hiboabd/tips-to-better-contribute-to-a-product-team-as-a-junior-developer-40ka</link>
      <guid>https://dev.to/hiboabd/tips-to-better-contribute-to-a-product-team-as-a-junior-developer-40ka</guid>
      <description>&lt;p&gt;Over the past couple of weeks, my colleagues and I at &lt;a href="https://www.stairwaylearning.com/"&gt;Stairway&lt;/a&gt; have been working hard to improve our product process and become a more empowered and collaborative product team. I‚Äôve recently read ‚ÄúInspired: how to create tech products customers love‚Äù by Marty Cagan to help understand what a successful product team looks like. &lt;/p&gt;

&lt;p&gt;If you‚Äôre a junior developer working in a product team who‚Äôd like to know how to make themselves more useful, here are the tips I feel will help you.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-learn-about-the-product-process-and-the-responsibilities-within-the-product-team" class="anchor"&gt;
  &lt;/a&gt;
  1. Learn about the product process and the responsibilities within the product team
&lt;/h2&gt;

&lt;p&gt;As a Junior Developer with no prior technical background, product was one of the first terms I started hearing a lot of and it was very abstract to me. What is product? What do product managers do? What is their goal? Bring in other terms like ‚Äúproduct discovery‚Äù into the mix and I realised that it was a very important area of the company that I had no real understanding of. I also didn‚Äôt think it really had much to do with my day to day role aside from working with the product manager to implement features and shape designs but I couldn‚Äôt have been more wrong. &lt;/p&gt;

&lt;p&gt;An effective product team is one that works collaboratively to help the product manager to determine how to discover and build a product customers will love. And in order for you to effectively contribute to this team, it is crucial to understand what a successful and collaborative product team looks like (and likewise what it doesn‚Äôt look like). Ultimately, you need to learn about everyone‚Äôs role on the team and how your job helps them do their job. &lt;/p&gt;

&lt;p&gt;That being said, here are some resources to help you get started: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Inspired by Marty Cagan.&lt;/strong&gt; I cannot recommend this book enough. Although it is geared towards Product Managers, Marty dissects each role in the product team as well as what a correct product process looks like. &lt;a href="https://www.amazon.co.uk/INSPIRED-Create-Tech-Products-Customers-ebook/dp/B077NRB36N"&gt;View here.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Silicon Valley Product Group Blog.&lt;/strong&gt; A blog sharing best practices around how to build innovative products customers love. &lt;a href="https://svpg.com/articles/"&gt;View here.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lenny Rachitsky Newsletter.&lt;/strong&gt; This was recommended to me, it is a newsletter around product and growth, particularly useful if you are interested in working in product. The monthly email is free with the weekly emails requiring a paid subscription to access. &lt;a href="https://www.lennyrachitsky.com"&gt;View here.&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-learn-about-your-company-vision-and-strategy" class="anchor"&gt;
  &lt;/a&gt;
  2. Learn about your company vision and strategy
&lt;/h2&gt;

&lt;p&gt;Once you have a good understanding of the product team, you should take the time to understand your company vision and strategy. I am sure you probably already have good knowledge of this but I would still advise that you revisit it. You‚Äôll view it with a newfound perspective on how a product team and your role fits in with this wider goal. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-participate-in-the-research-phase-of-the-product-discovery-process" class="anchor"&gt;
  &lt;/a&gt;
  3. Participate in the research phase of the product discovery process
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Writing products comes from the deep understanding of the users needs combined with an equally deep understanding of what‚Äôs just now possible&lt;/em&gt; - Marty Cagan&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The product discovery process is a hugely important part of the work of a product team. It involves studying users to understand which features or products to commit resources to and build. I won‚Äôt go into too much detail about it now but &lt;a href="https://medium.com/@eugenesanu/7-principles-for-a-product-discovery-b2d9a44b98da"&gt;here&lt;/a&gt; is a useful article if you‚Äôd like to learn more.&lt;/p&gt;

&lt;p&gt;Evidence gathering is an important part of evaluating whether a feature should be prioritised and built. However, developers typically aren‚Äôt as involved in this process as they could/should be. The work of a developer mostly involves evaluating features/designs being worked on by the wider product team and implementing features that are ready for development. Thus, product discovery happens before developers typically get involved. &lt;/p&gt;

&lt;p&gt;However, engineers have a lot to contribute at this stage and so you need to play a bigger role in the initial stages of product discovery. More specifically, this involves keeping up with the latest data insights on users and also playing an active role in querying and analysing the data that you are collecting.&lt;/p&gt;

&lt;p&gt;At Stairway, we use BigQuery, Metabase and Amplitude to query and analyse data which are then shared in slack channels and discussed in meetings. This helps us to have a clear sense of direction with feature development as well as brainstorm further lines of inquiry for research.&lt;/p&gt;

&lt;p&gt;If your team conducts user testing sessions, join them and you will see the benefits it provides in helping you learn more about your users and the technological solutions that will make them love your product more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-consider-how-analytics-will-be-factored-into-every-feature-you-work-on" class="anchor"&gt;
  &lt;/a&gt;
  4. Consider how analytics will be factored into every feature you work on
&lt;/h2&gt;

&lt;p&gt;In order to be impactful for your users, the decisions of the team must be data-informed. And in order for decisions to be informed by data, data must be collected! And not just any data but the right data to answer the questions you are seeking to answer.&lt;/p&gt;

&lt;p&gt;Are you involved with conversations around analytics and how they will be implemented into new features? Are you aware of the analytics that you are collecting for the features already in production? What more could you be collecting?&lt;/p&gt;

&lt;p&gt;One thing I try to do when a new feature is being considered is to have a think about what analytics we would need to collect to evaluate the success of the feature. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is it important to know how many unique users used the feature? &lt;/li&gt;
&lt;li&gt;Are we interested in seeing if this increases the number of active users? &lt;/li&gt;
&lt;li&gt;Are you conducting an A/B test and comparing one data set to another? What difference are you expecting to see? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thinking in this way will help you to develop a data-driven mindset where decisions made are based on analytics and experiments and it will make a difference in your ability to conduct data analysis yourself. In terms of the goals of the wider product team, collecting the right analytics facilitates the crucial product discovery phase of the product process. As a junior developer, get involved in this!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-share-your-findings-and-ideas-with-the-team-regularly" class="anchor"&gt;
  &lt;/a&gt;
  5. Share your findings and ideas with the team regularly
&lt;/h2&gt;

&lt;p&gt;An effective product team is one that is collaborative. Instead of thinking about the team as having strict roles that everyone is assigned to, roles should be a bit more flexible and involve discussions with other team members to contribute a fresh perspective. &lt;/p&gt;

&lt;p&gt;Part of being more collaborative is knowledge sharing. This could involve sharing observations from data, user research or your own ideas you have to improve the product. At Stairway, one way we do this is by having a weekly show and tell session. Everyone discusses what they have been working on as well as any new insights and learnings they have discovered during the course of the week. We discuss everything from designs, to data, to new ideas for product and it works really well in facilitating collaborative decision making.&lt;/p&gt;

&lt;p&gt;Sharing ideas and knowledge is particularly important for engineers as they are often the best source of ideas as they have the knowledge required to consider how user problems could be solved using technology. Engineers are aware of how the system works and how easily something can be achieved. &lt;/p&gt;

&lt;p&gt;If you don‚Äôt have a culture of knowledge sharing in your team, try to implement it. You could make a slack channel (or another equivalent) where people post new insights they‚Äôve found or anything they‚Äôve been working on to get feedback. Working in this way will help facilitate continuous improvement which is an important ingredient to success in a product team. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-review-and-feedback-on-features-as-early-as-possible" class="anchor"&gt;
  &lt;/a&gt;
  6. Review and feedback on features as early as possible
&lt;/h2&gt;

&lt;p&gt;Developers typically review designs and features when they have been fleshed out by the designer and product manager and even tested in some initial user testing sessions. However, developers can provide value much earlier in this process, even when features are just ideas and designs are just simple drawings. The main benefit of this is that it makes the design process and feedback delivery easier. Sharing goals and ideas early benefits the whole team in terms of time and effort and prevents any large changes to designs being made late in the design process. &lt;/p&gt;

&lt;p&gt;If you are typically evaluating features at a later stage, discuss with your team to see if this is something that can be changed to bring the review process forward. &lt;/p&gt;

&lt;p&gt;If you struggle to think about how to evaluate a feature, consider these four product risks: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Value risk&lt;/strong&gt; (whether customers will buy it or users will choose to use it)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Usability risk&lt;/strong&gt; (whether users can figure out how to use it)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Feasibility risk&lt;/strong&gt; (whether our engineers can build what we need with the time, skills and technology we have)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Business viability risk&lt;/strong&gt; (whether this solution also works for the various aspects of our business)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whilst all risks should be considered when evaluating a feature, engineers should focus the majority of their attention on the feasibility risk, and take responsibility for it.&lt;/p&gt;

&lt;p&gt;You can read more about the four risks &lt;a href="https://svpg.com/four-big-risks/"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Thanks for reading this article. I hope it has helped you to understand how you can better contribute to a product team and think about new ways you can get involved in your team's work outside of development. &lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Testing PWAs on mobile devices during development</title>
      <author>Haider Ali Punjabi</author>
      <pubDate>Mon, 21 Dec 2020 11:05:08 +0000</pubDate>
      <link>https://dev.to/haideralipunjabi/testing-pwas-on-mobile-devices-during-development-22mm</link>
      <guid>https://dev.to/haideralipunjabi/testing-pwas-on-mobile-devices-during-development-22mm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#pwa-what-is-that" class="anchor"&gt;
  &lt;/a&gt;
  PWA? What is that?
&lt;/h2&gt;

&lt;p&gt;Progressive Web Applications (PWAs) are web applications (duh!) that use emerging web APIs and modern technologies to make the web app behave similar to a native application on any platform / operating system. They can be installed on your phone or PC, and even be distributed through App Stores.&lt;/p&gt;

&lt;p&gt;I will link some articles related to PWAs at the end.&lt;/p&gt;

&lt;p&gt;The capability to be installed on a mobile device is very important for a PWA, and to test those mobile-specific features even more important. PWAs can only be served over &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts"&gt;Secure Contexts&lt;/a&gt; (&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/HTTPS"&gt;HTTPS&lt;/a&gt;). It isn't a big deal today due to services like &lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt;, which provide free SSL Certificates. The HTTPS restriction isn't a problem but makes testing the PWA difficult. Most browsers treat localhost as a Secure Context, and testing PWA on your own machine isn't a problem. The problem arises when you access your web app from your phone (over local network), and it won't work because usually, you won't have an SSL Certificate for debugging on your own machine. One of the solutions to this problem is to get an SSL certificate, but it can be a complicated process for those not having experience with such stuff.&lt;/p&gt;

&lt;p&gt;In this blog post, I will explain two methods which will help you test your PWAs on your phone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chrome-port-forwarding" class="anchor"&gt;
  &lt;/a&gt;
  Chrome Port Forwarding
&lt;/h2&gt;

&lt;p&gt;Host a site on your machine, access the content from an Android Device (over Android Debugging Bridge). By using Port Forwarding, the browser on your mobile will be able to access the site on its own localhost, thus in a Secure Context.&lt;/p&gt;

&lt;p&gt;Most of the tutorials on internet use Wired ADB, which discourages many people from using this method. I will be using Wireless ADB, which isn't very difficult to setup.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adb-over-network" class="anchor"&gt;
  &lt;/a&gt;
  ADB over Network
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4aG4zpbC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hejc09z4sn9sh347jcpw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4aG4zpbC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hejc09z4sn9sh347jcpw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to your Phone Settings &amp;gt; System &amp;gt; Developer Options (This might vary in different phones, so if it is not the same in your's, look it up on the internet)&lt;/li&gt;
&lt;li&gt;Turn on Android Debugging and ADB over Network.&lt;/li&gt;
&lt;li&gt;Note the IP Address and Port shown under ADB over Network&lt;/li&gt;
&lt;li&gt;Install &lt;a href=""&gt;ADB&lt;/a&gt; on your computer&lt;/li&gt;
&lt;li&gt;Go to your command-line / command prompt and enter &lt;code&gt;adb connect &amp;lt;ip-address&amp;gt;:&amp;lt;port&amp;gt;&lt;/code&gt; (Use the IP Address and Port from Step 3)&lt;/li&gt;
&lt;li&gt;When connecting for the first time, you will need to authorize the connection on your phone.&lt;/li&gt;
&lt;li&gt;Your device should be connected to your PC over WiFi.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#using-chrome-port-forwarding" class="anchor"&gt;
  &lt;/a&gt;
  Using Chrome Port Forwarding
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Make sure your development server is running on your PC&lt;/li&gt;
&lt;li&gt;Go to &lt;a href="https://dev.tochrome://inspect/#devices"&gt;&lt;code&gt;chrome://inspect/#devices&lt;/code&gt;&lt;/a&gt;. You should see your device along with a Connected status indicator&lt;/li&gt;
&lt;li&gt;Enable Port Forwarding&lt;/li&gt;
&lt;li&gt;Click Add Rule&lt;/li&gt;
&lt;li&gt;In the Device Port, enter the port number on which you want to access the site on your device&lt;/li&gt;
&lt;li&gt;In the Local Address field, enter the address and port of your development server. (e.g, localhost:1313)&lt;/li&gt;
&lt;li&gt;Click Add&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YS1N3RdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.haideralipunjabi.com/uploads/maim-1591337806.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YS1N3RdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.haideralipunjabi.com/uploads/maim-1591337806.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Port Forwarding should be setup and you will be able to access your server on your Android Device on localhost:port (which you set in Step 5.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/local-server"&gt;More Detailed Tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros-vs-cons" class="anchor"&gt;
  &lt;/a&gt;
  Pros vs Cons
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Faster Deployment and Testing&lt;/li&gt;
&lt;li&gt;Already using ADB and Chrome, which will also be used if you want to use the Dev Tools on your mobile device&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can only be used for Android Devices&lt;/li&gt;
&lt;li&gt;The devices need to be on the same network&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#netlify-dev" class="anchor"&gt;
  &lt;/a&gt;
  Netlify Dev
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.netlify.com/products/dev/"&gt;Netlify Dev&lt;/a&gt; is part of the &lt;a href="https://docs.netlify.com/cli/get-started"&gt;netlify-cli&lt;/a&gt;, and is a great choice if you are already using netlify-cli, or need to showcase your work live without deploying it to production. Netlify Dev also allows you to use many features from the Netlify Ecosystem like Netlify Functions, Custom Headers, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup" class="anchor"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;p&gt;First of all, you will need to setup netlify-cli and authorize it. You will need an account on Netlify for it.&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;Here's a link to a detailed tutorial&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install netlify-cli
&lt;code&gt;npm install netlify-cli -g&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Authenticate&lt;br&gt;
&lt;code&gt;netlify login&lt;/code&gt;&lt;br&gt;
Authorize it in the browser window that opens.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setup your repository using&lt;br&gt;
a. Automated Setup (if your repository is on Github)&lt;br&gt;
&lt;code&gt;netlify init&lt;/code&gt;&lt;br&gt;
b. Manual (for other Git Providers, or if you wise to do it like this)&lt;br&gt;
&lt;code&gt;netlify init --manual&lt;/code&gt;&lt;br&gt;
You can do a lot of stuff with this cli, but I will skip directly to Netlify Dev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To start a Netlify Dev server, you can use &lt;code&gt;netlify dev&lt;/code&gt; , but since we want to Start a Public Live Session, we will use&lt;br&gt;
&lt;code&gt;netlify dev --live&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will get a URL that looks like &lt;code&gt;https://clever-cray-2aa156-6639f3.netlify.live/&lt;/code&gt;. This URL will be accessible by everyone on internet.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;netlify-cli has many more features you should read about in the &lt;a href="https://docs.netlify.com/cli/get-started/#netlify-dev"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-your-pwa-on-your-mobile" class="anchor"&gt;
  &lt;/a&gt;
  Testing your PWA on your mobile
&lt;/h2&gt;

&lt;p&gt;Now that you can access the PWA on your mobile, you need to find a way to test it properly. The Dev Tools available in PC Browsers help in debugging and testing, but unfortunately, I have yet to find a similar feature on phone. Fortunately, Chrome provides a solution by allowing us access to the Dev Tools for a page on mobile devices using ADB.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup ADB, as shown in the Chrome Port Forwarding&lt;/li&gt;
&lt;li&gt;In &lt;a href="https://dev.tochrome://inspect/#devices"&gt;&lt;code&gt;chrome://inspect/#devices&lt;/code&gt;&lt;/a&gt;, you will see a list of all pages opened on your mobile device.&lt;/li&gt;
&lt;li&gt;Click on the inspect button to launch the Dev Tools for that page&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_2HnkIM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.haideralipunjabi.com/uploads/maim-1591337816.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_2HnkIM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.haideralipunjabi.com/uploads/maim-1591337816.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps"&gt;Progressive Web Apps -Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.netlify.com/products/dev/"&gt;Netlify Dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/local-server"&gt;Access Local Servers - Google Tools for Web Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/webviews"&gt;Remote Debugging WebView&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me" class="anchor"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/HAliPunjabi"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.buymeacoffee.com/HAliPunjabi"&gt;Buy Me A Coffee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/haideralipunjabi"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>pwa</category>
    </item>
    <item>
      <title>How to write good documentation</title>
      <author>Victoria Drake</author>
      <pubDate>Mon, 21 Dec 2020 09:53:10 +0000</pubDate>
      <link>https://dev.to/victoria/how-to-write-good-documentation-6i1</link>
      <guid>https://dev.to/victoria/how-to-write-good-documentation-6i1</guid>
      <description>&lt;p&gt;If you‚Äôve ever half-written a software project before taking a few days off, this is the article you‚Äôll discover you needed when you reopen that IDE.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UzoNKXiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d80tf4azdv87zswimare.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UzoNKXiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d80tf4azdv87zswimare.png" alt="Friday's completed puzzle vs Monday's pile of puzzle pieces. Comic by author."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the technology teams I lead, we make a constant effort to document all the things. Documentation lives alongside the code as an equal player. This helps ensure that no one needs to make assumptions about how something works, or is calling lengthy meetings to gain working knowledge of a feature. Good documentation saves us a lot of time and hassle.&lt;/p&gt;

&lt;p&gt;That said, and contrary to popular belief, the most valuable software documentation is not primarily written for other people. As I said in this well-received tweet:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--7TLFsAUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1318325316436283392/oAuBzLxe_normal.jpg" alt="Victoria Drake profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Victoria Drake
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @victoriadotdev
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The secret to good documentation is to write it while you're writing the code. You are your first audience. Explain what you're doing to yourself. Future you will thank you!
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:46 PM - 24 Nov 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1331262801797652483" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1331262801797652483" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      56
      &lt;a href="https://twitter.com/intent/like?tweet_id=1331262801797652483" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      308
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;With holidays around the corner, it‚Äôd be prudent to prepare for the possibility of some eggnog-induced programming paralysis. (Pecan pie and Python make a great combination.) ü•ßüêç&lt;/p&gt;

&lt;p&gt;Here are three concrete steps you can take to write good documentation before it‚Äôs too late.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-start-with-accurate-notes" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://victoria.dev/blog/how-to-write-good-documentation/#1-start-with-accurate-notes"&gt;1. Start with accurate notes&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As you work out ideas in code, ensure you don‚Äôt soon forget important details by starting with accurate notes. While you will want to explain things to yourself in long-form later, short-form notes will suffice to capture details without interrupting your coding session flow.&lt;/p&gt;

&lt;p&gt;Keep a document open alongside your code and write down things like commands, decisions, and sources you use. This can include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Terminal commands you typed in&lt;/li&gt;
&lt;li&gt;Why you chose a particular method over another&lt;/li&gt;
&lt;li&gt;Links you visited for help or &lt;em&gt;cough_copy-paste_cough&lt;/em&gt; inspiration&lt;/li&gt;
&lt;li&gt;The order in which you did things&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don‚Äôt worry about full sentences at this point. Just ensure you accurately capture context, relevant code snippets, and helpful URLs. It can also be helpful to turn on any auto-save option available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-explain-decisions-in-long-form" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://victoria.dev/blog/how-to-write-good-documentation/#2-explain-decisions-in-long-form"&gt;2. Explain decisions in long form&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The ideal time to tackle this step is when you take a break from coding, but before you completely go out to lunch on whatever it is you‚Äôre working on at the moment. You want to ensure that context, ideas, and decisions are all still fresh in your mind when you explain them to yourself.&lt;/p&gt;

&lt;p&gt;Go over the short-form notes you took and start expanding them into conversational writing. Be your own rubber duck. Describe what you‚Äôre doing as if you were teaching it to someone else. You might cover topics such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quirky-looking decisions: ‚ÄúI would normally do it this way, but I chose to do something different because‚Ä¶‚Äù&lt;/li&gt;
&lt;li&gt;Challenges you ran into and how you overcame them&lt;/li&gt;
&lt;li&gt;Architectural decisions that support your project goals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stick to the main points. Long-form writing doesn‚Äôt mean you‚Äôll be paid by the word! Just use full sentences, and write as if explaining your project to a colleague. You‚Äôre explaining to future you, after all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-dont-neglect-prerequisite-knowledge" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://victoria.dev/blog/how-to-write-good-documentation/#3-dont-neglect-prerequisite-knowledge"&gt;3. Don‚Äôt neglect prerequisite knowledge&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This step is best done after a long lunch break, or even the next day (but probably not two). Re-read your document and fill in any blanks that become apparent after putting some distance between yourself and the project.&lt;/p&gt;

&lt;p&gt;Take extra care to fill in or at least link to prerequisite knowledge, especially if you frequently use different languages or tools. Even an action as small as pasting in a link to the API documentation you used can save hours of future searching.&lt;/p&gt;

&lt;p&gt;Write down or link to READMEs, installation steps, and relevant support issues. For frequently performed command-line actions, you can use a &lt;a href="https://victoria.dev/blog/how-to-create-a-self-documenting-makefile/"&gt;self-documenting Makefile&lt;/a&gt; to avoid having to &lt;code&gt;man&lt;/code&gt; common tasks each time you come back to a project.&lt;/p&gt;

&lt;p&gt;It‚Äôs easy to forget supporting details after even just a short break from your project. Capture anything you found helpful this time around.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#document-all-the-things" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://victoria.dev/blog/how-to-write-good-documentation/#document-all-the-things"&gt;Document all the things&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The next time you catch yourself thinking, ‚ÄúI‚Äôm sure I‚Äôll remember this part, no need to write it down,‚Äù just recall this emoji: ü§¶‚Äç‚ôÄÔ∏è&lt;/p&gt;

&lt;p&gt;Software projects are made up of a lot more than just their code. To best set up your future self for success, document all the things! Whether it‚Äôs a process you‚Äôve established, Infrastructure as Code, or a fleeting future roadmap idea ‚Äî write it down! Future you will thank you for it.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, I'd love to know. Join the thousands of people who learn along with me on &lt;a href="https://victoria.dev"&gt;victoria.dev&lt;/a&gt;! Visit and subscribe for more about building your coding skill stack.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>devtips</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Add code snippets using Gridsome Prism.js plugin</title>
      <author>Linda</author>
      <pubDate>Mon, 21 Dec 2020 09:24:48 +0000</pubDate>
      <link>https://dev.to/lindaojo/add-code-snippets-using-gridsome-prism-js-plugin-2njk</link>
      <guid>https://dev.to/lindaojo/add-code-snippets-using-gridsome-prism-js-plugin-2njk</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7G2e81mZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bp87vwioifx2kjxyvb2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7G2e81mZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bp87vwioifx2kjxyvb2y.png" alt="Code snippet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code snippets are a key part of writing for any developer. In this post, I am going to walk you through a simple way to add code snippets to your posts.&lt;/p&gt;

&lt;h3&gt;Install plugin&lt;/h3&gt;



&lt;p&gt;install the prism.js plugin by running the command below in your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;npm i gridsome-plugin-remark-prismjs-all
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;Add plugin in gridsome.config.js&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// In your gridsome.config.js&lt;/span&gt;
&lt;span class="nx"&gt;transformers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Add markdown support to all file-system sources&lt;/span&gt;
    &lt;span class="nl"&gt;remark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="na"&gt;externalLinksTarget&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_blank&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;externalLinksRel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nofollow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;noopener&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;noreferrer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;anchorClassName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;icon icon-link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gridsome-plugin-remark-prismjs-all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You could set custom class names which you can use for styling as shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// In your gridsome.config.js&lt;/span&gt;
&lt;span class="nx"&gt;transformers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gridsome-plugin-remark-prismjs-all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;showLineNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;highlightClassName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gridsome-highlight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;codeTitleClassName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gridsome-code-title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;classPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;language-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;Add a theme in your main.js&lt;/h3&gt;

&lt;p&gt;There are 3 different themes presently available, you can import anyone as shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gridsome-plugin-remark-prismjs-all/themes/night-owl.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gridsome-plugin-remark-prismjs-all/themes/solarized.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gridsome-plugin-remark-prismjs-all/themes/tomorrow.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;Add Code Snippet to file&lt;/h3&gt;

&lt;p&gt;Wrap your code in triple backquotes then specifying the code language. Check out some examples and their resulting renders below.&lt;/p&gt;

&lt;p&gt;Example 1&lt;/p&gt;

&lt;pre&gt;


```js
  let number = 4;
  console.log(number);
```

 
&lt;/pre&gt;

&lt;p&gt;Render&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Example 2&lt;/p&gt;

&lt;pre&gt;


```css
  body {
    min-height: 100vh;
    background-color: transparent;
    line-height: 1.5;
  }
```

 
&lt;/pre&gt;

&lt;p&gt;Render&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://lindaojo.com/articles"&gt;Read other articles&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>prismjs</category>
      <category>gridsome</category>
    </item>
    <item>
      <title>12 open source browser tools and how I've built them</title>
      <author>Vitaly Rtishchev</author>
      <pubDate>Mon, 21 Dec 2020 08:48:31 +0000</pubDate>
      <link>https://dev.to/rtivital/12-open-source-browser-tools-and-how-i-ve-built-them-1nl4</link>
      <guid>https://dev.to/rtivital/12-open-source-browser-tools-and-how-i-ve-built-them-1nl4</guid>
      <description>&lt;p&gt;I'm happy to announce that I've finished development of &lt;a href="https://omatsuri.app/"&gt;Omatsuri&lt;/a&gt; ‚Äì &lt;a href="https://github.com/rtivital/omatsuri"&gt;open source&lt;/a&gt; React PWA that includes 12 Frontend focused tools. In this post I'll share some insights on how these tools were built.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qq7h-6a4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n8ihfxr0zuxkv6my4733.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qq7h-6a4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n8ihfxr0zuxkv6my4733.png" alt="Omatsuri landing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-tools" class="anchor"&gt;
  &lt;/a&gt;
  The tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CSS Triangle Generator&lt;/li&gt;
&lt;li&gt;Gradient Generator + Gradient Gallery&lt;/li&gt;
&lt;li&gt;CSS Cursors list&lt;/li&gt;
&lt;li&gt;Color Shades Generator&lt;/li&gt;
&lt;li&gt;Curved Page Dividers Generator&lt;/li&gt;
&lt;li&gt;SVG compressor&lt;/li&gt;
&lt;li&gt;SVG to JSX converter&lt;/li&gt;
&lt;li&gt;Base64 encoder&lt;/li&gt;
&lt;li&gt;Realistic Fake Data Generator&lt;/li&gt;
&lt;li&gt;HTML/CSS Symbols Collection&lt;/li&gt;
&lt;li&gt;Lorem/Samuel/Poke Ipsum Generator&lt;/li&gt;
&lt;li&gt;JavaScript Events Keycodes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#technical-details" class="anchor"&gt;
  &lt;/a&gt;
  Technical details
&lt;/h2&gt;

&lt;p&gt;My main purpose was to make Omatsuri a browser only application. This approach allows to reduce costs for server hosting that does heavy jobs, like SVG compression, Prettier transformations, encodings and other heavy things. This also means that application will always be fully accessible offline without any limitations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#service-worker-and-offline-support" class="anchor"&gt;
  &lt;/a&gt;
  Service worker and offline support
&lt;/h3&gt;

&lt;p&gt;Since Omatsuri is a browser only application the only thing that we need from service worker is to cache assets and provide app shell. &lt;a href="https://github.com/NekR/offline-plugin"&gt;Offline plugin&lt;/a&gt; does exactly that, the only thing we need to do ‚Äì add it to the production build in &lt;a href="https://github.com/rtivital/omatsuri/blob/master/webpack.config.js#L192"&gt;webpack config&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OfflinePlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;autoUpdate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;appShell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;excludes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;404.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CNAME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we are ready to &lt;a href="https://github.com/rtivital/omatsuri/blob/master/src/components/Navbar/Navbar.jsx#L43-L47"&gt;listen to service worker ready state&lt;/a&gt; and propose user to install PWA when it's done loading:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setOffline&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setOffline&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#github-pages-and-react-router" class="anchor"&gt;
  &lt;/a&gt;
  Github Pages and React Router
&lt;/h3&gt;

&lt;p&gt;Omatsuri is hosted on Github Pages ‚Äì it's free and does fine job of serving static assets. There is only one problem ‚Äì it does not work well with browser history and as I was building a SPA I wanted to fully control routing with React Router. &lt;/p&gt;

&lt;p&gt;For example, gh-pages will return index.html for / request, but there is no way to force it to return the same index.html for /triangle-generator route. &lt;/p&gt;

&lt;p&gt;The workaround here is to create separate 404.html with the same content as in index.html ‚Äì gh-pages will send it for each request that cannot be found in static files and  service worker will do the rest of the job. This is not perfect as gh-pages will return 404 status, but at least it works fine.&lt;/p&gt;

&lt;p&gt;Another issue with gh-pages ‚Äì small cache TTL (10 minutes), it lowers Lighthouse score, but is not critical since we have service worker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwNaszLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvh3kig3d53kfe52usb6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwNaszLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvh3kig3d53kfe52usb6.png" alt="Omatsuri lighthouse score"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svg-compression" class="anchor"&gt;
  &lt;/a&gt;
  SVG compression
&lt;/h3&gt;

&lt;p&gt;There is actually only one good library for SVG compression (&lt;a href="https://github.com/svg/svgo"&gt;SVGO&lt;/a&gt;) written in JavaScript. And it does not have browser support, only Node.js. I found it very strange as compression is based entirely on string parsing and does not include any node specific logic. &lt;/p&gt;

&lt;p&gt;So my first task was to migrate SVGO to browser. It was pretty easy, since all core logic did not require any modifications. And now you can use &lt;a href="https://github.com/rtivital/svgo-browser"&gt;svgo-browser&lt;/a&gt; library in your projects if you ever need SVG compression in browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-workers" class="anchor"&gt;
  &lt;/a&gt;
  Web workers
&lt;/h3&gt;

&lt;p&gt;Some task are very heavy and can block your browser for several seconds. To fix this, we can put them in separate thread using web workers and they will run in background without blocking the main thread. &lt;/p&gt;

&lt;p&gt;I was surprised how easy it is to work with web workers in webpack. All you need is &lt;a href="https://github.com/webpack-contrib/worker-loader"&gt;worker-loader&lt;/a&gt; that will handle all worker bundling for you.&lt;/p&gt;

&lt;p&gt;Here is an &lt;a href="https://github.com/rtivital/omatsuri/blob/master/src/workers/svg-to-jsx.worker.js"&gt;example&lt;/a&gt; of web worker usage for transforming svg to jsx with prettier and svg compression:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// svg-to-jsx.worker.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;prettier&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prettier/standalone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;prettierBabel&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prettier/parser-babel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;svg2jsx&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svg-to-jsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;optimize&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svgo-browser/lib/optimize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`import React from 'react';\n\nexport default function SvgComponent() { return &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; }`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;optimize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;svg2jsx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;prettier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;generateComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;babel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prettierBabel&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// react component&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Svg2jsxWorker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../workers/svg-to-jsx.worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;svg2jsx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Svg2jsxWorker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SvgToJsx&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;svg2jsx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;svg2jsx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleMessage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;svg2jsx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleMessage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dark-theme-support" class="anchor"&gt;
  &lt;/a&gt;
  Dark theme support
&lt;/h3&gt;

&lt;p&gt;By default Omatsuri uses system theme, to listen to those changes, I've created &lt;a href="https://github.com/rtivital/xooks/blob/master/src/use-color-scheme/use-color-scheme.ts"&gt;react hook&lt;/a&gt; that returns current browser theme:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useColorScheme&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setScheme&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSchemeChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;setScheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleSchemeChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleSchemeChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's not enough though, since I wanted to give an option  to change theme. To achieve that I've created &lt;a href="https://github.com/rtivital/omatsuri/blob/master/src/ThemeProvider.jsx"&gt;ThemeProvider component&lt;/a&gt; that wraps entire application and provides theme value via react context. To get theme in any component all I need is to call useTheme hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTheme&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusions" class="anchor"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Omatsuri was my first PWA and I really enjoyed the process ‚Äì existing tools make it super easy to transform your regular React SPA to PWA and utilize complex things like web workers.&lt;/p&gt;

&lt;p&gt;During the development apart from Omatsuri itself I've created two additional npm libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/rtivital/xooks"&gt;xooks&lt;/a&gt; ‚Äì React hooks library that includes all hooks that I've used during Omatsuri development (localstorage manipulations, system theme detection, clipboard utils and six others).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rtivital/svgo-browser"&gt;svgo-browser&lt;/a&gt; ‚Äì svgo fork with better Node.js API and browser support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#support-omatsuri" class="anchor"&gt;
  &lt;/a&gt;
  Support Omatsuri
&lt;/h2&gt;

&lt;p&gt;If you like Omatsuri please give it a star on Github ‚Äì &lt;a href="https://github.com/rtivital/omatsuri"&gt;https://github.com/rtivital/omatsuri&lt;/a&gt; and install it as PWA ‚Äì this will assure that you have all 12 tools even when you are offline.&lt;/p&gt;

&lt;p&gt;Thanks for your support!&lt;/p&gt;

</description>
      <category>react</category>
      <category>pwa</category>
      <category>javascript</category>
      <category>webpack</category>
    </item>
  </channel>
</rss>
