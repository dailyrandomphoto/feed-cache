<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>You DON'T need these to be a web dev</title>
      <author>Nitzan Hen</author>
      <pubDate>Wed, 01 Dec 2021 00:18:43 +0000</pubDate>
      <link>https://dev.to/nitzanhen/you-dont-need-these-to-be-a-web-dev-c3b</link>
      <guid>https://dev.to/nitzanhen/you-dont-need-these-to-be-a-web-dev-c3b</guid>
      <description>&lt;p&gt;&lt;em&gt;"If you don't know all of these, don't call yourself a web developer"&lt;/em&gt;, followed by some list of web dev related terms. Have you encountered one of these posts before? I come across them every once in a while on social media.&lt;/p&gt;

&lt;p&gt;These sorts of divisive claims bring about nothing but toxicity to our community, and only alienate the junior developers who are new to it. Especially for the profit of some traffic on Twitter or elsewhere, it's despicable.&lt;/p&gt;

&lt;p&gt;They paint a completely wrong image of the web dev scene, too - being a web developer is much more about the perpetual process of self-improving, learning new tools &amp;amp; technologies and experimenting with methods to combine them in the best way, rather than knowing some constant list of terms (which are often occasionally useful at best). And, built on top of the open-source industry, the web dev industry is one of the most welcoming industries out there, to programmers of any caliber.&lt;/p&gt;

&lt;p&gt;So, to be perfectly clear - &lt;strong&gt;you don't need to know &lt;a href="https://stackoverflow.com/questions/111102/how-do-javascript-closures-work"&gt;closures&lt;/a&gt;, &lt;a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/"&gt;the event loop&lt;/a&gt;, &lt;a href="https://www.digitalocean.com/community/tutorials/understanding-hoisting-in-javascript"&gt;hoisting&lt;/a&gt;, etc. to be a web developer&lt;/strong&gt;. The same goes for non-niche concepts &amp;amp; technologies - you can be a good dev without knowing &lt;a href="https://docs.docker.com/get-started/overview/"&gt;Docker&lt;/a&gt;, &lt;a href="https://www.infoworld.com/article/3613715/what-is-functional-programming-a-practical-guide.html"&gt;FP&lt;/a&gt;/&lt;a href="https://searchapparchitecture.techtarget.com/definition/object-oriented-programming-OOP"&gt;OOP&lt;/a&gt; or &lt;a href="https://azure.microsoft.com/en-us/overview/what-is-cloud-computing/"&gt;cloud computing&lt;/a&gt;, for example. Knowledge is always good to have, so if you're not familiar with them you should aspire to learn them sometime, but you can also be a damn good developer without them.&lt;/p&gt;

&lt;p&gt;I think my personal journey is a good indication to this point: I was met with web development close to three years ago, when I began my mandatory service; beforehand I knew some Java, from school and from coding as a hobby. The "tutoring" I received consisted of one half-baked, 30 minute lesson about the basics of HTML, and my "training period" consisted of watching some YouTube tutorials for close to two weeks, after which I was already being assigned tasks (that I was obviously not ready for). &lt;br&gt;
Virtually all of my knowledge and experience was gained on-the-job, much of it through ad-hoc googling, and it was months before I actually went back and strengthened my knowledge on the fundamentals. And, for an even longer time, concepts like &lt;a href="https://www.youtube.com/watch?v=4KHiSt0oLJ0"&gt;CORS&lt;/a&gt;, &lt;a href="https://owasp.org/www-community/attacks/xss/"&gt;XSS&lt;/a&gt; and &lt;a href="https://reactjs.org/docs/faq-internals.html"&gt;Virtual DOM&lt;/a&gt; remained unclear to me.&lt;/p&gt;

&lt;p&gt;It's not like I'm at the top of the industry today (still working on it!) but I've definitely gained a lot of experience and knowledge as a web developer, and have created some awesome projects along the way. &lt;strong&gt;And you can too!&lt;/strong&gt; don't let anybody deter you from it.&lt;/p&gt;

&lt;p&gt;My bottom line is - don't let any random list of technical terms discredit your journey as a developer. &lt;em&gt;Be proud of what you know&lt;/em&gt;, and be curious in what you don't. &lt;/p&gt;

&lt;p&gt;And, perhaps most importantly, be a good person; see people, not their labels, and invest energy in helping them improve instead of discouraging them from doing so.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Get your open source project featured on GitHub</title>
      <author>Michelle Mannering</author>
      <pubDate>Tue, 30 Nov 2021 23:28:48 +0000</pubDate>
      <link>https://dev.to/github/get-your-open-source-project-featured-on-github-1n06</link>
      <guid>https://dev.to/github/get-your-open-source-project-featured-on-github-1n06</guid>
      <description>&lt;p&gt;Each month, GitHub publishes a &lt;a href="https://github.blog/?s=release+radar"&gt;Release Radar&lt;/a&gt;. Top community projects who have shipped major version releases during the previous month are featured on the blog post.&lt;/p&gt;

&lt;p&gt;Now, this is your chance to submit your project to be featured. We've launched an open source repo where you can find information on the Release and submit your open source project to be considered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-be-featured-on-the-release-radar"&gt;
  &lt;/a&gt;
  How to be featured on the Release Radar
&lt;/h2&gt;

&lt;p&gt;If you are a maintainer or contributor of an open source project, or you come across an awesome open source project, submit it! Head over to the new &lt;a href="https://releaseradar.github.com"&gt;GitHub Release Radar repo&lt;/a&gt; and &lt;a href="https://github.com/github/release-radar/issues/new?assignees=MishManners&amp;amp;labels=&amp;amp;template=release-radar-request.yml&amp;amp;title=%5BRelease+Radar+Request%5D+%3Ctitle%3E"&gt;open an issue&lt;/a&gt;. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/github"&gt;
        github
      &lt;/a&gt; / &lt;a href="https://github.com/github/release-radar"&gt;
        release-radar
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Repo for submission of projects to consider for the GitHub Release Radar 📡
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
GitHub Release Radar&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/mishmanners/github-release-radar/issues/new?assignees=MishManners&amp;amp;labels=&amp;amp;template=release-radar-request.yml&amp;amp;title=%5BRelease+Radar+Request%5D+%3Ctitle%3E"&gt;Submit your release for consideration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This repo is designed to collect projects to consider for the &lt;a href="https://github.blog/?s=release+radar" rel="nofollow"&gt;GitHub Release Radar&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/36594527/141879290-ffbc7a47-6843-4122-990b-684c4b885dbf.png"&gt;&lt;img width="700" src="https://res.cloudinary.com/practicaldev/image/fetch/s--mcin9T0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/36594527/141879290-ffbc7a47-6843-4122-990b-684c4b885dbf.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The GitHub Release Radar is a post written on the GitHub blog each month to showcase community projects that have shipped major version releases. A post is shipped at the start of the month showcasing community projects from the previous month.&lt;/p&gt;
&lt;p&gt;If you're a maintainer, or a contributor of an open source project, and you have a major version release that shipped, we'd love to hear from you.&lt;/p&gt;
&lt;p&gt;We can't promise we can feature all projects, but we would love to consider your project.&lt;/p&gt;
&lt;p&gt;Fill out this &lt;a href="https://github.com/mishmanners/github-release-radar/issues/new?assignees=MishManners&amp;amp;labels=&amp;amp;template=release-radar-request.yml&amp;amp;title=%5BRelease+Radar+Request%5D+%3Ctitle%3E"&gt;issue&lt;/a&gt; to be considered.&lt;/p&gt;
&lt;p&gt;If you have questions, check out the &lt;a href="https://github.com/mishmanners/github-release-radar/blob/main/faq.md"&gt;FAQs&lt;/a&gt;, or get in touch.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/github/release-radar"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;In the issue, fill out as much information as possible. The more information you include, the more likely we are to feature you. Side note, we're using &lt;a href="https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-issue-forms"&gt;GitHub Issue forms&lt;/a&gt; to collect information. &lt;a href="https://dev.to/github/how-to-build-google-like-forms-with-github-3ig2"&gt;You can create these forms too&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We get a lot of submissions each month. So while we can't promise we can feature all projects, we would love to consider your project. There are other opportunities to be featured on GitHub videos, &lt;a href="https://twitter.com/github/status/1465410387134849027"&gt;social media posts&lt;/a&gt;, and more.&lt;/p&gt;

&lt;p&gt;We also have a video released which goes out as part of the Release Radar each month. So there's lots of platforms for you to get eyes on your project 👀.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7d50L0kJncw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So if you're thinking about it, don't think. Just &lt;a href="https://github.com/github/release-radar/issues/new?assignees=MishManners&amp;amp;labels=&amp;amp;template=release-radar-request.yml&amp;amp;title=%5BRelease+Radar+Request%5D+%3Ctitle%3E"&gt;submit&lt;/a&gt; 💥&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-a-major-version-release"&gt;
  &lt;/a&gt;
  What's a major version release?
&lt;/h2&gt;

&lt;p&gt;The question we get asked the most, is "what's a major version". Each month we feature projects who shipped major version releases. Major version releases are usually x.0, ie. 1.0, 2.0 etc. But not everyone's major versions will follow this format.&lt;/p&gt;

&lt;p&gt;We also get loads of submissions, so we'll often favour x.0 releases. However, if you have a x.x release with major (or big) changes we'll also consider it.&lt;/p&gt;

&lt;p&gt;What's considered a "major" or "big" change is up to you. It's your open source project; whether you're a maintainer or contributor. If you think it's big, &lt;a href="https://github.com/github/release-radar/issues/new?assignees=MishManners&amp;amp;labels=&amp;amp;template=release-radar-request.yml&amp;amp;title=%5BRelease+Radar+Request%5D+%3Ctitle%3E"&gt;submit it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more answers regarding submissions and the Release Radar, please check out the &lt;a href="https://github.com/github/release-radar/blob/main/faq.md"&gt;FAQs on the repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;✨ Looking forward to seeing your submissions coming through ✨&lt;/p&gt;

</description>
      <category>contributorswanted</category>
      <category>opensource</category>
      <category>github</category>
      <category>news</category>
    </item>
    <item>
      <title>A Deep Dive Into Video Auto-Tagging
</title>
      <author>Prosper Otemuyiwa</author>
      <pubDate>Tue, 30 Nov 2021 22:49:39 +0000</pubDate>
      <link>https://dev.to/unicodeveloper/a-deep-dive-into-video-auto-tagging-3i4k</link>
      <guid>https://dev.to/unicodeveloper/a-deep-dive-into-video-auto-tagging-3i4k</guid>
      <description>&lt;p&gt;Video is one of the best ways for capturing audience attention. Product demonstrations, property tours, tutorials, and keynotes all make great content—provided that they’re readily searchable by your team and visitors alike. Even though tagging and categorization help organize videos and make them easy to find, the labeling process is labor intensive, taking time away from key tasks like creating new videos.&lt;/p&gt;

&lt;p&gt;The solution? Automation. Through machine learning (ML) algorithms, Cloudinary’s  &lt;a href="https://cloudinary.com/blog/new_google_powered_add_on_for_automatic_video_categorization_and_tagging"&gt;video-tagging&lt;/a&gt; feature &lt;strong&gt;automatically&lt;/strong&gt; detects video content. Video tagging extends image classification to image sequences, capable of detecting types of scenes (cities, mountains, the seaside) and objects (people, cars), and even inferring whether the content is appropriate for public viewing. Additionally, with video auto-tagging supplemented by detailed labels, you can moderate videos and automatically determine the minimum age for viewers.&lt;/p&gt;

&lt;p&gt;Video auto-tagging benefits a wide range of apps. For example: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For a basketball game, auto-tagging can identify which player has the ball and for how long. The team can then make use of that information in optimizing its game strategy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For personal protective equipment, such as face masks or hand covers, auto-tagging can help you pinpoint and recognize human emotions, automatically detecting if the people in a video are happy or sad, for example.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those capabilities might be highly challenging to implement, however. Gratifyingly, many major IT companies have recognized the need, offering various cloud services with AI-powered image and video analysis. Nonetheless, because each provider has its own programming interfaces or SDKs, you must use several completely different toolsets, complicating the workflow.&lt;/p&gt;

&lt;p&gt;Cloudinary’s convenient API simplifies video tagging through automation. You can decide which underlying tagging engine to use through the API and combine various services to further improve the tagging performance. This tutorial cites several use cases to which video tagging adds value, and steps you through an example that explains how to use Cloudinary’s API with the JavaScript client library. To follow this tutorial, you just need basic familiarity with HTML and JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#organization-of-media-library"&gt;
  &lt;/a&gt;
  Organization of Media Library
&lt;/h2&gt;

&lt;p&gt;Large companies often store hundreds or even thousands of videos in their website’s media library, which is a pain to organize. Organizing by file name or upload date is straightforward but unhelpful. Organizing through tagging, i.e., grouping videos by category, is much more effective. Instead of sorting videos into a single folder structure based on one basic property, you organize them by tag category, sorting footage by attribute, such as the featured product, location type, and color scheme. &lt;/p&gt;

&lt;p&gt;The process of manually adding descriptions and tagging is arduous and time consuming, however. Auto-tagging categorizes videos automatically, making it easy to quickly find what you and your app users are looking for. The technology, which relies on artificial intelligence (AI) trained on large datasets, automatically recognizes and labels objects, such as cars and animals; attributes, such as color; and sentiments, such as adventure. Cloudinary, for example, combines AI from Google and other sources to automatically label the objects in your videos as you upload them, making tagging as simple and efficient as possible. &lt;/p&gt;

&lt;p&gt;To work with the Cloudinary API, start by &lt;a href="https://cloudinary.com/documentation/upload_images"&gt;uploading your media assets&lt;/a&gt;. (Note that even though that post refers to examples on image upload, they apply to videos, too.) During the upload, you can specify the public identifier (ID) of your assets and divide them into folders to create structured delivery URLs. Alternatively, you can group the assets in folders and subfolders, organizing the media library according to the same structure as your on-premise server.&lt;/p&gt;

&lt;p&gt;While uploading media to Cloudinary, you can also apply transformations, e.g., on-the-fly video encoding and delivery, transcoding, resizing, and cropping, which can convert videos to animated images and even add blurred backgrounds. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useruploaded-content"&gt;
  &lt;/a&gt;
  User-Uploaded Content
&lt;/h2&gt;

&lt;p&gt;For all that user-uploaded content enhances your website, you cannot assume that your users are as knowledgeable and skilled as your internal team or that they would mount the level of effort for tagging and descriptions. For instance, if you’re running a real-estate website, users would upload videos of their property but might not accurately tag all the elements in the video. Instead, you can rely on auto-tagging to find objects like "pool" and "palm tree," which certain house shoppers might be looking for. Those tags greatly improve the listing’s discoverability and searchability. &lt;/p&gt;

&lt;p&gt;Another example: Consider an animal shelter that posts videos of animals that are up for adoption. Instead of having to manually type in a comprehensive set of tags for each animal, the staff needs to enter only the basic information, based on which the auto-tagging capability can figure out the animal type (like cat, dog, hamster, or horse), color, and other attributes.&lt;/p&gt;

&lt;p&gt;Any web app into which users can upload their media can benefit from the Cloudinary API, saving you the time and effort of building the capabilities yourself: upload, transformation, storage, and so on. Another alternative is to adopt serverless approaches like AWS Lambda or Azure Functions, which is easier than manual tagging. However, processing large videos with those services is either impossible (Lambda has an execution-time limit) or expensive (you pay for the execution time—the long tasks incur significantly higher costs). Ultimately, Cloudinary is the best answer for processing and tagging videos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#autotagging-in-action"&gt;
  &lt;/a&gt;
  Auto-Tagging in Action
&lt;/h2&gt;

&lt;p&gt;The demo below, which makes use of a &lt;a href="https://www.pexels.com/video/a-giraffe-walking-in-the-wilderness-5220298/"&gt;Pexels video&lt;/a&gt; of a giraffe in the wild, shows you how to use Cloudinary’s video-tagging feature with the JavaScript SDK. &lt;/p&gt;

&lt;p&gt;First, upload the video with the &lt;a href="https://cloudinary.com/documentation/image_upload_api_reference"&gt;upload method&lt;/a&gt; or the &lt;a href="https://cloudinary.com/documentation/upload_widget"&gt;Cloudinary upload widget&lt;/a&gt; on the Cloudinary portal. Here, you use the upload widget to access the advanced video uploader. Integrate the upload widget with your site by referencing the &lt;a href="https://widget.cloudinary.com/v2.0/global/all.js"&gt;JavaScript&lt;/a&gt;. Afterwards, you can use the various &lt;a href="https://cloudinary.com/documentation/upload_widget_reference#initialization_methods"&gt;widget initialization methods&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The upload widget supports signed and unsigned uploads. For this demo, use unsigned uploads, which require the upload preset. See the &lt;a href="https://cloudinary.com/documentation/upload_presets"&gt;related documentation&lt;/a&gt; on how to create an unsigned preset in the Cloudinary management console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YyVrh903--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/f_auto%2Cq_auto/Web_Assets/blog/upload_preset_auto_tag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YyVrh903--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/f_auto%2Cq_auto/Web_Assets/blog/upload_preset_auto_tag.png" alt="Upload preset" width="704" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When configuring the upload preset, you can also enable video auto-tagging on upload, setting your preference for how “confident” you want the algorithm to be before applying a tag.To do so, click the &lt;strong&gt;Media analysis and AI&lt;/strong&gt; tab of your preset, choose a categorization engine (for example, Google Automatic Video Tagging), and set the auto-tagging threshold (0.5), which denotes 50% confidence, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k5RHNFI6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/f_auto%2Cq_auto/Web_Assets/blog/edit-auto-tagging_preset.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k5RHNFI6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/f_auto%2Cq_auto/Web_Assets/blog/edit-auto-tagging_preset.png" alt="Edit Preset" width="512" height="329"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, proceed to implementation. See the complete source code &lt;a href="https://github.com/dawidborycki/Cloudinary-VideoAutoTagging-JS"&gt;on GitHub&lt;/a&gt;. Follow these steps:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Create a simple HTML page that references the Cloudinary widget scripts and that contains a button serving as the upload widget’s opener. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Video auto-tagging&amp;lt;/title&amp;gt;

    …
    &amp;lt;script src="https://widget.cloudinary.com/v2.0/global/all.js" type="text/javascript"&amp;gt;&amp;lt;/script&amp;gt;        
&amp;lt;/head&amp;gt;

&amp;lt;body class="w3-black"&amp;gt;
    &amp;lt;div class="w3-container"&amp;gt;
       &amp;lt;h1&amp;gt;Video auto-tagging&amp;lt;/h1&amp;gt;
       &amp;lt;hr /&amp;gt;

       &amp;lt;button id="upload_widget_opener" class="w3-button w3-orange"&amp;gt;
           Upload video file...
       &amp;lt;/button&amp;gt;        

       &amp;lt;a id="info_link" href="" target="_blank"&amp;gt;Click to get info&amp;lt;/p&amp;gt;       
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add custom JavaScript to handle the logic. Here, you create the upload widget and then store the reference to it under the &lt;code&gt;uploadWidget&lt;/code&gt; variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var uploadWidget = cloudinary.createUploadWidget({
    cloudName: '&amp;lt;YOUR_CLOUD_NAME&amp;gt;',
    uploadPreset: 'autotagging-preset',
    sources: [
        'local'
    ],
    cropping: false,
    multiple: false,
    styles: {
    palette: {
        window: "#10173a",
            sourceBg: "#20304b",
            windowBorder: "#7171D0",
            tabIcon: "#79F7FF",
            inactiveTabIcon: "#8E9FBF",
            menuIcons: "#CCE8FF",
            link: "#72F1FF",
            action: "#5333FF",
            inProgress: "#00ffcc",
            complete: "#33ff00",
            error: "#cc3333",
            textDark: "#000000",
            textLight: "#ffffff"
        }
    }
}, (error, result) =&amp;gt; uploadCallback(error, result));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Generate the above code on Cloudinary’s &lt;a href="https://demo.cloudinary.com/uw/#/"&gt;Upload Widget Demo page&lt;/a&gt; to visually configure the widget and get the corresponding configuration code. &lt;/p&gt;

&lt;p&gt;Show the widget by calling the &lt;code&gt;open&lt;/code&gt; method, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$('#upload_widget_opener').click(() =&amp;gt; { 
    uploadWidget.open();        
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Click the &lt;strong&gt;Upload video file&lt;/strong&gt; button. The app then displays the upload widget:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d7l4CzBe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/f_auto%2Cq_auto/Web_Assets/blog/upload-widget.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d7l4CzBe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/f_auto%2Cq_auto/Web_Assets/blog/upload-widget.png" alt="upload widget" width="512" height="357"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Implement the &lt;code&gt;uploadCallback&lt;/code&gt; function, which is invoked by the upload widget for specific events, for example, when the asset is uploaded.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function uploadCallback(error, result) {         
    if (!error &amp;amp;&amp;amp; result &amp;amp;&amp;amp; result.event === "success") {   

        // Cloudinary API info
        const apiKey = '&amp;lt;YOUR_API_KEY&amp;gt;';
        const apiSecret = '&amp;lt;YOUR_SECRET&amp;gt;';
        const baseUrl ='api.cloudinary.com/v1_1/&amp;lt;YOUR_CLOUD_NAME&amp;gt;/resources/video/upload/';

        const url = 'https://' + apiKey +':' + apiSecret 
            + '@' + baseUrl + result.info.public_id;

        $infoLink.attr("href", url);
        $infoLink.show();
    }    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the callback creates the URL to upload resources. The URL is supplemented by basic authorization (Cloudinary’s API and secret) and is displayed as an HTML tag next to the &lt;strong&gt;Upload video file&lt;/strong&gt; button (see the screenshot above). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Click the generated URL for details on the resource along with the video tags in JSON format, for example: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BT4fYKMa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/f_auto%2Cq_auto/Web_Assets/blog/auto-tag_json.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BT4fYKMa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/f_auto%2Cq_auto/Web_Assets/blog/auto-tag_json.png" alt="JSON" width="880" height="205"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown, Cloudinary successfully tagged the giraffe video with the appropriate keywords, from the type of animal to the type of environment, and to helpful words like the activity “safari” and the sentiment “adventure.” With those useful tags, giraffe fans, students who are studying grasslands, and adventure-seeking travelers can all readily find and enjoy the video.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Initially, the categorization section might be pending since the tagging might take some time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;Tools like Cloudinary save you innumerable hours of manual labor. Not only does auto-tagging enable you and your team to stay organized, it also helps your audience find videos through which they can become acquainted with your goods and services on a deeper level than with images and text alone.&lt;/p&gt;

&lt;p&gt;Now that you know how easy it is to use Cloudinary’s upload widget to automatically tag videos, why not incorporate this feature into your own app? Uploading your videos and encouraging your users to share theirs helps the audience find what they need: from adventure seekers in search of wildlife to homeowners looking for decorative trim and picture windows, and to pet lovers finding their lifelong companion.&lt;/p&gt;

&lt;p&gt;Do give auto-tagging a try and discover how Cloudinary can enhance your app’s videos. Start by &lt;a href="https://cloudinary.com/users/register/free"&gt;signing up for a free account&lt;/a&gt; along with free credits.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>video</category>
      <category>media</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 30 Nov 2021 21:17:44 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-5hj5</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-5hj5</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#honesty-amp-exhaustion"&gt;
  &lt;/a&gt;
  Honesty &amp;amp; Exhaustion
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/aliofonzy43"&gt;@aliofonzy43&lt;/a&gt;
, we wanted to give you a massive kudos for bravely sharing your story of exhaustion throughout the interviewing process. I invite everyone reading this roundup to take a look at Sam's post as I'm sure we can all relate to the feelings shared there. DEV is a place to be vulnerable and we're honored when you feel supported enough to do so. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aliofonzy43" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9woU2Rhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uTbX4QZZ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/682557/ed8056a2-b5fa-4b60-a81a-e7b941ed3e87.jpg" alt="aliofonzy43"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aliofonzy43/exhaustion-from-tech-hiring-process-2geb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Exhaustion From Tech Hiring Process&lt;/h2&gt;
      &lt;h3&gt;Sam ・ Nov 24 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#mentalhealth&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#stepping-back-to-see-the-big-picture"&gt;
  &lt;/a&gt;
  Stepping back to see the big picture
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/kvyshh"&gt;@kvyshh&lt;/a&gt;
 walks us through an exercise of career-related self-interviewing that's really valuable for everyone, regardless of their role or industry. Read on to do this meaningful work yourself! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kvyshh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZV6JXzn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Kn_PYaCb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/745261/b5792ea5-7eac-4344-8bdb-01047c9fdf07.png" alt="kvyshh"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kvyshh/roadmap-to-learning-what-kind-of-developerprogrammerengineer-you-are-2m2j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What kind of Developer do I want to be?&lt;/h2&gt;
      &lt;h3&gt;Kindred ・ Nov 24 ・ 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#all-about-amazon-linux"&gt;
  &lt;/a&gt;
  All about Amazon Linux!
&lt;/h2&gt;

&lt;p&gt;As &lt;a class="mentioned-user" href="https://dev.to/ssennettau"&gt;@ssennettau&lt;/a&gt;
 explains, "there's a lot of interesting nuances [with Amazon Linux 2022] compared to Amazon Linux 2." If you're looking for a clear comparison between the two as well as some (informed) personal opinions, you've come to the right post!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders " width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9fSqHOMq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bdXerw40--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/645925/6468bc44-8961-4198-a757-fdcd385adc32.jpeg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/whats-different-about-amazon-linux-2022-ilb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What's different about Amazon Linux 2022?&lt;/h2&gt;
      &lt;h3&gt;Stephen Sennett for AWS Community Builders  ・ Nov 24 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#getting-sassy"&gt;
  &lt;/a&gt;
  Getting SaSSy
&lt;/h2&gt;

&lt;p&gt;Don't miss this super detailed look at Sass — "a preprocessor scripting language that is interpreted or compiled into Cascading Style Sheets (CSS)." Thanks, &lt;a class="mentioned-user" href="https://dev.to/daaahailey"&gt;@daaahailey&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/daaahailey" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wA0s5ptc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5qBQd6oH--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/617504/235fe1d0-1f41-4415-9a31-d231e8d68b45.jpeg" alt="daaahailey"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/daaahailey/sassscss-for-beginners-2aci" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Sass(SCSS) for beginners&lt;/h2&gt;
      &lt;h3&gt;Dahye Ji ・ Nov 25 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#sass&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#scss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#fighting-legacy"&gt;
  &lt;/a&gt;
  Fighting legacy
&lt;/h2&gt;

&lt;p&gt;The heading I added to this section sounds like the name of an epic novel about a battle to inherit a throne or something 😂 &lt;a class="mentioned-user" href="https://dev.to/matteokov"&gt;@matteokov&lt;/a&gt;
's post is NOT about that, but it &lt;em&gt;is&lt;/em&gt; about a situation wherein their team created a legacy application before the first release! Really interesting takeaways in here. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/bornfightcompany" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rw_0Fqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--BddQSFwo--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1897/01c118d8-0fe8-43ae-a918-b0a3c2a75f60.jpg" alt="Bornfight" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZOBD3qSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--RS-5Tdux--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/346707/220661b5-e203-474b-9fb8-19c2ca0b6117.jpeg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/bornfightcompany/5-reasons-why-we-ended-up-rewriting-the-whole-application-before-its-release-1dch" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 reasons why we ended up rewriting the whole application before its release&lt;/h2&gt;
      &lt;h3&gt;Matteo Kovačić for Bornfight ・ Nov 22 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#engineeringmonday&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#no-more-term-daunt"&gt;
  &lt;/a&gt;
  No more "term daunt"!
&lt;/h2&gt;

&lt;p&gt;Unfortunately, tech is filled with daunting-sounding terms and as an industry, we don't do enough to abolish this kind of esotericism.  Folks like &lt;a class="mentioned-user" href="https://dev.to/amyoulton"&gt;@amyoulton&lt;/a&gt;
 are doing a really important thing when they seek to simply define basic tech terms instead of just using them liberally without explanation for early-career developers. Nice work!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/amyoulton" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--URMcwv1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rz8uVdo6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/618716/985cdde0-41c2-4924-9c59-23cd90ce5294.jpeg" alt="amyoulton"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/amyoulton/understanding-basic-coding-terminology-industry-basics-43p7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Understanding Basic Coding Terminology: Industry Basics ✏️&lt;/h2&gt;
      &lt;h3&gt;Amy Oulton ・ Nov 24 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#making-it-harder-to-do-the-wrong-thing"&gt;
  &lt;/a&gt;
  Making it harder to do the wrong thing
&lt;/h2&gt;

&lt;p&gt;... That's the philosophy &lt;a class="mentioned-user" href="https://dev.to/austingil"&gt;@austingil&lt;/a&gt;
 has about accessibility. It would be incredible if we could all be a11y experts, but that's just not possible. Instead, we need to make it easier for dev teams to do the right thing and vice versa. More fantastic accessibility insights in this post. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/austingil" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jiy-MsZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tIU8QoXU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/183813/b2a62452-2570-4bfb-9bae-f047ec689bb8.png" alt="austingil"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/austingil/making-accessibility-more-accessible-1gej" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Making Accessibility More Accessible&lt;/h2&gt;
      &lt;h3&gt;Austin Gil ・ Nov 26 ・ 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#development&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Cleaning up Async Functions in React's useEffect Hook (Unsubscribing)</title>
      <author>Elijah Trillionz</author>
      <pubDate>Tue, 30 Nov 2021 21:11:19 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/cleaning-up-async-functions-in-reacts-useeffect-hook-unsubscribing-3dkk</link>
      <guid>https://dev.to/elijahtrillionz/cleaning-up-async-functions-in-reacts-useeffect-hook-unsubscribing-3dkk</guid>
      <description>&lt;p&gt;Functional components in React are most beautiful because of &lt;strong&gt;React Hooks&lt;/strong&gt;. With Hooks, we can change state, perform actions when components are mounted and unmounted, and much more.&lt;/p&gt;

&lt;p&gt;While all these are beautiful, there is a little caveat (or maybe not) that is a little bit frustrating when working with useEffect hook.&lt;/p&gt;

&lt;p&gt;Before we look at this issue let's do a quick recap on the useEffect hook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#effect-hook"&gt;
  &lt;/a&gt;
  Effect Hook
&lt;/h2&gt;

&lt;p&gt;The useEffect hook allows you to perform actions when components mount and unmount.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// actions performed when component mounts&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// actions to be performed when component unmounts&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The callback function of the &lt;code&gt;useEffect&lt;/code&gt; function is invoked depending on the second parameter of the &lt;code&gt;useEffect&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The second parameter is an array of dependencies. You list your dependencies there.&lt;/p&gt;

&lt;p&gt;So whenever there is an update on any of the dependencies, the callback function will be called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stranger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the array of dependencies is empty like in our first example, React will only invoke the function once and that is when the component mounts.&lt;/p&gt;

&lt;p&gt;But you may wonder, "what about when it unmounts, doesn't React call the function too"?.&lt;/p&gt;

&lt;p&gt;Uhmmm no. The returned function is a closure and you do really not need to call the parent function (the callback function now) when you have access to the scope of the parent function right in the function you need (the returned function now).&lt;/p&gt;

&lt;p&gt;If this isn't clear to you, just take out 7 mins of your time to take a look at an article on &lt;a href="https://dev.to/elijahtrillionz/learn-javascript-closures-in-7-mins-324n"&gt;JavaScript closures&lt;/a&gt; I wrote.&lt;/p&gt;

&lt;p&gt;So now we have gone through the basics as a recap, let's take a look at the issue with async functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#async-functions-in-react"&gt;
  &lt;/a&gt;
  Async functions in React
&lt;/h2&gt;

&lt;p&gt;There is no doubt that you may have once used an async function inside the useEffect hook. If you haven't you are eventually going to do so soon.&lt;/p&gt;

&lt;p&gt;But there is a warning from React that appears most times when we unmount and mount a component when we have an async function in the useEffect hook. This is the warning&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vrk9SRLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0w170s4uwa0itjb8yte5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vrk9SRLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0w170s4uwa0itjb8yte5.png" alt="Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function." width="632" height="184"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you can't see the image, here is the warning&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Can't perform a React state update on an unmounted component. 
This is a no-op, but it indicates a memory leak in your application. 
To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The instruction is pretty clear and straightforward, "cancel all subscriptions and asynchronous tasks in a useEffect cleanup function". Alright, I hear you React! But how do I do this?&lt;/p&gt;

&lt;p&gt;It's simple. Very simple. The reason React threw that warning was because I used a setState inside the async function.&lt;/p&gt;

&lt;p&gt;That's not a crime. But React will try to update that state even when the component is unmounted, and that's kind of a crime (a leakage crime).&lt;/p&gt;

&lt;p&gt;This is the code that led to the warning above&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How do we fix this? We simply tell React to try to update any state in our async function when we are mounted.&lt;/p&gt;

&lt;p&gt;So we thus have&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, now we have progressed a little. Right now we are only telling React to perform an update if &lt;code&gt;mounted&lt;/code&gt; (you can call it subscribed or whatever) is true.&lt;/p&gt;

&lt;p&gt;But the &lt;code&gt;mounted&lt;/code&gt; variable will always be true, and thus doesn't prevent the warning or app leakage. So how and when do we make it false?&lt;/p&gt;

&lt;p&gt;When the component unmounts we can and should make it false. So we now have&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So when the component unmounts the &lt;code&gt;mounted&lt;/code&gt; variable changes to false and thus the &lt;code&gt;setUsername&lt;/code&gt; function will not be updated when the component is unmounted.&lt;/p&gt;

&lt;p&gt;We can tell when the component mounts and unmounts because of the first code we saw i.e&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// actions performed when component mounts&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// actions to be performed when component unmounts&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how you unsubscribe from async functions, you can do this in different ways like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is an example with an async function with the &lt;code&gt;fetch&lt;/code&gt; API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// only try to update if we are subscribed (or mounted)&lt;/span&gt;
      &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// cleanup function&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;When I was still new in React, I used to struggle with this warning a lot. But this turned things around.&lt;/p&gt;

&lt;p&gt;If you are wondering, "why does it only happen with async functions or tasks"? Well, that's because of the JavaScript event loop. If you don't know what that means, then check out this &lt;a href="https://youtu.be/8aGhZQkoFbQ"&gt;YouTube Video by Philip Roberts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading. I hope to see you next time. Please kindly like and follow me on Twitter &lt;a href="https://twitter.com/elijahtrillionz"&gt;@elijahtrillionz&lt;/a&gt; to stay connected.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Announcing the Chingu Holiday Hackathon</title>
      <author>Jim Medlock</author>
      <pubDate>Tue, 30 Nov 2021 20:50:41 +0000</pubDate>
      <link>https://dev.to/chingu/announcing-the-chingu-holiday-hackathon-25ba</link>
      <guid>https://dev.to/chingu/announcing-the-chingu-holiday-hackathon-25ba</guid>
      <description>&lt;p&gt;The Holiday Season is a time to celebrate with family and friends, a time to reflect on the past year, and a time to relax and have fun.&lt;/p&gt;

&lt;p&gt;And for Developers what better way to have fun than by participating in a holiday themed hackathon to both test and extend your skills?&lt;/p&gt;

&lt;p&gt;This year &lt;a href="https://chingu.io"&gt;Chingu&lt;/a&gt; is sponsoring a Holiday Hackathon so you can do just that! Read on to learn how to enter, compete, and celebrate the Season with a little code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-participate"&gt;
  &lt;/a&gt;
  How to Participate
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BOhzYxGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ch31iof5z8x8tnt4tha7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BOhzYxGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ch31iof5z8x8tnt4tha7.jpeg" alt="Banner" width="880" height="130"&gt;&lt;/a&gt;&lt;br&gt;
This hackathon will run from &lt;strong&gt;Wednesday, December 1st through Sunday, December 19th&lt;/strong&gt;. You can &lt;a href="https://github.com/chingu-hackathons/holidayhackathon2021/discussions"&gt;learn about the specifics here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may join as a solo Developer or as a team by signing up &lt;a href="https://airtable.com/shrzef3NVWMl9PiKt"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Be sure to &lt;a href="https://airtable.com/shrtPfnx6eX96AJxt"&gt;submit your completed project&lt;/a&gt; before the deadline. We will recognize your contribution in our &lt;a href="https://twitter.com/ChinguCollabs"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/company/chingu-os"&gt;LinkedIn&lt;/a&gt; feeds.&lt;/p&gt;

&lt;p&gt;We'll also award &lt;a href="https://chingu.myspreadshop.com/"&gt;Chingu swag&lt;/a&gt; to the top three projects chosen by a panel of judges. Members of the top three teams will receive a &lt;a href="https://tinyurl.com/yyaub5gh"&gt;Chingu water bottle&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Winners will be announced on &lt;em&gt;&lt;em&gt;Wednesday, December 22.&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All are welcome to participate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Ge2W_cI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8v920zdeub6ioeb63qao.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Ge2W_cI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8v920zdeub6ioeb63qao.jpg" alt="Santa" width="880" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>hackathon</category>
      <category>contributorswanted</category>
    </item>
    <item>
      <title>New learning</title>
      <author>Saverio683</author>
      <pubDate>Tue, 30 Nov 2021 20:50:32 +0000</pubDate>
      <link>https://dev.to/saverio683/new-learning-3jdh</link>
      <guid>https://dev.to/saverio683/new-learning-3jdh</guid>
      <description>&lt;p&gt;I' m currently learning React Router&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Pragmatic Programmer [Book Notes]</title>
      <author>Jorge Tovar</author>
      <pubDate>Tue, 30 Nov 2021 20:28:57 +0000</pubDate>
      <link>https://dev.to/jorgetovar621/pragmatic-programmer-1ll0</link>
      <guid>https://dev.to/jorgetovar621/pragmatic-programmer-1ll0</guid>
      <description>&lt;h1&gt;
  &lt;a href="#pragmatic-programmer"&gt;
  &lt;/a&gt;
  Pragmatic Programmer
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X"&gt;Pragmatic Programmer Book&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pragmatic-philosophy"&gt;
  &lt;/a&gt;
  Pragmatic philosophy
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Your life it's your life

&lt;ul&gt;
&lt;li&gt;Craftsmanship &lt;/li&gt;
&lt;li&gt;Early adopter &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Responsibility

&lt;ul&gt;
&lt;li&gt;Offer options &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Software Entropy

&lt;ul&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;li&gt;Maintenance&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Good enough software

&lt;ul&gt;
&lt;li&gt;Quality is a requirement&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Your knowledge portfolio:

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Investment in knowledge always pays the best interest&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Read nontechnical books&lt;/li&gt;
&lt;li&gt;Read conceptual books&lt;/li&gt;
&lt;li&gt;Learn one new language every year&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Communicate&lt;/li&gt;
&lt;li&gt;Testability is key&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pragmatic-approach"&gt;
  &lt;/a&gt;
  Pragmatic approach
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The essence of good design: ETC&lt;/li&gt;
&lt;li&gt;DRY: Code, Data, Documentation (Knowledge)

&lt;ul&gt;
&lt;li&gt;Don't abstract too early, wait until you have copied and pasted a couple of times, examples are needed to create good abstractions&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Orthogonality:

&lt;ul&gt;
&lt;li&gt;Eliminate effects between unrelated things&lt;/li&gt;
&lt;li&gt;Understandable, and easier to debug, test and maintain&lt;/li&gt;
&lt;li&gt;Design patterns&lt;/li&gt;
&lt;li&gt;SOLID&lt;/li&gt;
&lt;li&gt;Prefer composition and FP languages&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Reversibility:

&lt;ul&gt;
&lt;li&gt;Flexible architecture&lt;/li&gt;
&lt;li&gt;Have options&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Tracer bullets:

&lt;ul&gt;
&lt;li&gt;Code lean and complete&lt;/li&gt;
&lt;li&gt;Find the target&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Prototypes and post-it notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Information gathering&lt;/li&gt;
&lt;li&gt;Is coupling minimized&lt;/li&gt;
&lt;li&gt;Collaborations between components well-defined&lt;/li&gt;
&lt;li&gt;Responsibilities&lt;/li&gt;
&lt;li&gt;Interfaces and data clear and available&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Domain languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Program close to the problem domain&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Estimation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; I'll back to you&lt;/li&gt;
&lt;li&gt;optimistic, most likely and pessimistic&lt;/li&gt;
&lt;li&gt;model building: someone that already did it &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#basic-tools"&gt;
  &lt;/a&gt;
  Basic Tools
&lt;/h2&gt;

&lt;p&gt;Be more productive with your tools&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The power of plain text:

&lt;ul&gt;
&lt;li&gt;Self describing data&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Shell games &lt;/li&gt;
&lt;li&gt;Power Editing &lt;/li&gt;
&lt;li&gt;Debugging skills 

&lt;ul&gt;
&lt;li&gt;localhost test&lt;/li&gt;
&lt;li&gt;Explain to someone else&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Text manipulation

&lt;ul&gt;
&lt;li&gt;Unix: sed, awk &lt;/li&gt;
&lt;li&gt;Scripting languages: Python&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; Engineering daybooks&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pragmatic-paranoia"&gt;
  &lt;/a&gt;
  Pragmatic Paranoia
&lt;/h2&gt;

&lt;p&gt;Validate all the information we're given, assertions of bad data, and distrust data from potential attackers&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Design by contract

&lt;ul&gt;
&lt;li&gt;Preconditions, postconditions: Clojure Specs&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Dead programs tell no lies

&lt;ul&gt;
&lt;li&gt;Crash early&lt;/li&gt;
&lt;li&gt;Defensive programming is a waste of time let it crash! (Supervisor)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Assertive programming

&lt;ul&gt;
&lt;li&gt;Use assertions to prevent the impossible &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;How to balance resources

&lt;ul&gt;
&lt;li&gt;Release free resources&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Don't outrun your headlights

&lt;ul&gt;
&lt;li&gt;take small steps always&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bend-or-break"&gt;
  &lt;/a&gt;
  Bend or break
&lt;/h2&gt;

&lt;p&gt;Make our code as flexible as possible, a good way to stay flexible it's to write less code&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Decoupling

&lt;ul&gt;
&lt;li&gt;Allow flexibility&lt;/li&gt;
&lt;li&gt;Shy code that promotes cohesion&lt;/li&gt;
&lt;li&gt;Law of Demeter: Depend on abstractions&lt;/li&gt;
&lt;li&gt;Avoid global data&lt;/li&gt;
&lt;li&gt;Avoid inheritance&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Juggling the real world

&lt;ul&gt;
&lt;li&gt;Events&lt;/li&gt;
&lt;li&gt;Finite state machine&lt;/li&gt;
&lt;li&gt;Observer&lt;/li&gt;
&lt;li&gt;Publish/Subscribe (Channels)&lt;/li&gt;
&lt;li&gt;Reactive Streams&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Transforming programming

&lt;ul&gt;
&lt;li&gt;Think in programs like Input Output and transformation of data&lt;/li&gt;
&lt;li&gt;Process of data&lt;/li&gt;
&lt;li&gt;find . -name '*.java' | xargs wc -l | sort -n | tail -11 | head -10&lt;/li&gt;
&lt;li&gt;Programming is about code but programs are about data&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Inheritance tax

&lt;ul&gt;
&lt;li&gt;Coupling&lt;/li&gt;
&lt;li&gt;Interfaces to express polymorphism&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Configuration

&lt;ul&gt;
&lt;li&gt;Parameterize your app using external configuration&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#concurrency"&gt;
  &lt;/a&gt;
  Concurrency
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Concurrency: Two pieces of code run at the same time using Fibers, Threads, and process&lt;/li&gt;
&lt;li&gt;Parallelism: Hardware that can do two things at once&lt;/li&gt;
&lt;li&gt;Breaking temporal coupling&lt;/li&gt;
&lt;li&gt;Avoid shared state&lt;/li&gt;
&lt;li&gt;Actor and process&lt;/li&gt;
&lt;li&gt;Blackboards

&lt;ul&gt;
&lt;li&gt;Communication using Kafka or other streaming services&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#while-you-are-coding"&gt;
  &lt;/a&gt;
  While you are coding
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Listen to your lizard brain

&lt;ul&gt;
&lt;li&gt;Give time and space to your brains to organize your ideas&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Algorithm speed&lt;/li&gt;
&lt;li&gt;Refactoring

&lt;ul&gt;
&lt;li&gt;Rethink&lt;/li&gt;
&lt;li&gt;Gardening&lt;/li&gt;
&lt;li&gt;Unit test&lt;/li&gt;
&lt;li&gt;(Duplication, Not DRY, Bad performance, Outdated knowledge, Test passing. Nonorthogonal)&lt;/li&gt;
&lt;li&gt;Redesign&lt;/li&gt;
&lt;li&gt;Refactor early and often is like a surgery&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Test the code

&lt;ul&gt;
&lt;li&gt;Feedback&lt;/li&gt;
&lt;li&gt;Improve design&lt;/li&gt;
&lt;li&gt;Embrace TDD&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Property-based testing&lt;/li&gt;
&lt;li&gt;Security

&lt;ul&gt;
&lt;li&gt;Authentication &lt;/li&gt;
&lt;li&gt;I/O data&lt;/li&gt;
&lt;li&gt;Principle of least privilege&lt;/li&gt;
&lt;li&gt;Up to date&lt;/li&gt;
&lt;li&gt;Encrypt sensitive information&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Naming

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;At programming all the things have names and reveal the intent and belief of the system&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Communication&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0before-the-project"&gt;
  &lt;/a&gt;
   Before the project
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Requirements Pit

&lt;ul&gt;
&lt;li&gt;User doesn't know what he wants&lt;/li&gt;
&lt;li&gt;Our job is to help businesses to understand what they want&lt;/li&gt;
&lt;li&gt;Improve the feedback loop&lt;/li&gt;
&lt;li&gt;BDUF is not a good thing&lt;/li&gt;
&lt;li&gt;Work with the user to think like one&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Solving de puzzle 

&lt;ul&gt;
&lt;li&gt;Think out of the box&lt;/li&gt;
&lt;li&gt;Make time to think in the unfocused mode&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Working together

&lt;ul&gt;
&lt;li&gt;Pair programming&lt;/li&gt;
&lt;li&gt;Mob programming&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Agile

&lt;ul&gt;
&lt;li&gt;It's about values, context, and feedback loop&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pragmatic-teams"&gt;
  &lt;/a&gt;
  Pragmatic Teams
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Pragmatic Teams

&lt;ul&gt;
&lt;li&gt;No broken windows&lt;/li&gt;
&lt;li&gt;Be aware of the environment and health of the project&lt;/li&gt;
&lt;li&gt;DRY &lt;/li&gt;
&lt;li&gt;Small teams&lt;/li&gt;
&lt;li&gt;Cross-functional teams &lt;strong&gt;Tracer bullets&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Automation&lt;/li&gt;
&lt;li&gt;Create and identity (Team name)&lt;/li&gt;
&lt;li&gt;Schedule time to improve knowledge portfolio&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Context

&lt;ul&gt;
&lt;li&gt;Use the right tools and practices&lt;/li&gt;
&lt;li&gt;Software delivery (When release flow is slow status meetings are high)&lt;/li&gt;
&lt;li&gt;Kanban&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The programmer starter kit

&lt;ul&gt;
&lt;li&gt;Version control&lt;/li&gt;
&lt;li&gt;Ruthless testing

&lt;ul&gt;
&lt;li&gt;Unit, Integration, Component, Performance&lt;/li&gt;
&lt;li&gt;If modules don't work well as a unit, they won't work well as a system&lt;/li&gt;
&lt;li&gt;Saboteurs: Chaos engineering&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Automate everything

&lt;ul&gt;
&lt;li&gt;Software delivery es fully automated&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Delight your users

&lt;ul&gt;
&lt;li&gt;What are your expectations&lt;/li&gt;
&lt;li&gt;Deliver quality not code&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Pride and prejudice

&lt;ul&gt;
&lt;li&gt;Code that you feel proud&lt;/li&gt;
&lt;li&gt;Collective ownership&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>craftsmanship</category>
      <category>mindset</category>
      <category>java</category>
    </item>
    <item>
      <title>La experiencia de ser desvinculado / despedido</title>
      <author>Axel Valdez</author>
      <pubDate>Tue, 30 Nov 2021 20:26:09 +0000</pubDate>
      <link>https://dev.to/axelvaldez13/la-experiencia-de-ser-desvinculado-despedido-1pp3</link>
      <guid>https://dev.to/axelvaldez13/la-experiencia-de-ser-desvinculado-despedido-1pp3</guid>
      <description>&lt;p&gt;Bienvenidos a un nuevo post de experiencias siendo developer. Mi nombre es Axel Valdez, licenciado en diseño de interacción y multimedia en la UADE,  actualmente UI designer y frontend developer en Circular.&lt;/p&gt;

&lt;p&gt;En este post les voy a contar la experiencias de cómo fue &lt;strong&gt;la experiencia de haber sido desvinculado, o despedido según el país donde viven, de una empresa/agencia&lt;/strong&gt;. La idea de este post es acompañarlos en forma de guía para que sepan que cosas hay que hacer y qué no durante todo el proceso.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caso-personal"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Caso personal&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;En el trabajo donde estuve ejerciendo me llegó una llamada en el que se encontraba una persona de un alto rango dentro de la agencia y la chica de RRHH en el que me informaron que mi rol dentro de la agencia ya había finalizado. Las razones eran porque se había ido un cliente de la agencia, por ende, no había lugar para poder reubicarse dentro de la empresa.&lt;/p&gt;

&lt;p&gt;En ese momento obviamente lloré porque la simple razón de que estaba rompiendo una relación laboral. Sentí que mis skills no eran suficientes, que era muy chico para un puesto como tal, sentí que fue un fracaso total en mi vida profesional. Obviamente pregunté si mi rendimiento tenía algo que ver con el motivo de desvinculación y me comunicaron que por falta de proyectos lamentablemente no íbamos a continuar con esta relación. Las señales eran obvias, había días que no trabajaba mientras mis colegas si, no hacía absolutamente nada durante mis días más que aprender cursos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#el-proceso-tedioso-de-una-desvinculaci%C3%B3n"&gt;
  &lt;/a&gt;
  &lt;strong&gt;El proceso (tedioso) de una desvinculación&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Personalmente siempre digo que las relaciones hay que terminarlas de la mejor manera posible, porque tarde o temprano, ellos van a dar referencias. En este caso fue buena, pero tedioso por todo lo burocrático y por la necesidad de recibir una parte de la indemnización porque, claro, estamos sin trabajo. Los pasos que van a vivir son:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Contratar un abogado/a laboral (puede que la empresa puede pagarte una parte u ofrecen el de ellos, pero no es su obligación)&lt;/li&gt;
&lt;li&gt;Elegir una fecha para una reunión donde se juntan los abogados de cada parte para leer la desvinculación&lt;/li&gt;
&lt;li&gt;Decidir si la indemnización es correcta a lo que venís trabajando o no con tu abogado&lt;/li&gt;
&lt;li&gt;Tener la fecha con el ente mediador para firmar la desvinculación entre el trabajador y la empresa.&lt;/li&gt;
&lt;li&gt;Esperar que la liquidación llegue a tu caja de ahorro en la fecha pactada y &lt;strong&gt;avisarle al banco que vas a recibir una cierta cantidad de dinero.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Tengan mucho cuidado, les tiene que llegar un telegrama de despido. Anteriormente, en Argentina, había un DNU que impedía los despidos. Hoy en día deberian llegarles un telegrama, no firmen ningún tipo de renuncia y si tienen alguna duda consulten con su abogado.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#consejos-para-volver-arrancar"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Consejos para volver arrancar&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;No importa cómo fue su desvinculación, sea por rendimiento o falta de trabajo, quiero que sepan que &lt;strong&gt;nada de lo que le está pasando es su culpa.&lt;/strong&gt; Leyeron bien, no es su culpa, ustedes dieron lo mejor para poder crecer y lo hicieron.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;No se rebajen y ni se sientan menos que los demás porque lo tecnico tarde o temprano se aprende.&lt;/strong&gt; Lo van a aprender por ustedes mismos, por networking o consiguiendo un equipo de trabajo que los acompañe.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;No vean las búsquedas laborales de su anterior empresa&lt;/strong&gt;, no importa si encajan con su perfil, la relación con su anterior empresa así haya pasado 1 mes ya se terminó.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prioricen el networking,&lt;/strong&gt; puede ser su nueva entrada a un próximo desafío. Piensen que en redes es más fácil interactuar y conocerse, principalmente en twitter, no todo es hate sino que hay muy lindas comunidades donde pueden conocer mentores y otros devs que andan en la misma.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Practiquen y pidan challenges,&lt;/strong&gt; no importa si entran o no a un trabajo que están buscando, puede servirles como porfolio para próximas entrevistas y contarles cómo superaron el desafío que les brindaron en alguna que otra entrevista. En mi caso no me pidieron, pero porque contando mis desafíos fue más que suficiente para demostrar que sabía.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hablen de sus valores a la hora de tener entrevistas,&lt;/strong&gt; cuenten desafíos, busquen información del lugar donde van a aplicar. Piensen que si quedan y el lugar es malo pueden llevarse una decepción muy grande, por eso mismo, &lt;strong&gt;no actualicen tan rápido su estado en linkedin. No cierren las puertas a nuevos rumbos.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mi experiencia siendo desempleado fue difícil, principalmente a fin de año porque muchos se van de vacaciones y recien volvi a conseguir en febrero, no en mi actual trabajo, sino en otro que próximamente contaré un nuevo post. Espero que les haya sido util mi experiencia y algún que otro consejo que brinde en el post. Si se encuentran desempleados o lo están recientemente espero que consigan pronto, actualicen sus porfolios, hagan challenges, hagan networking y les prometo que con esto van a estar de nuevo en las pistas. 💃🕺🏼&lt;/p&gt;

&lt;p&gt;Buen fin de año y happy coding 🧑🏽‍💻✨&lt;/p&gt;

</description>
      <category>unemployed</category>
      <category>beginners</category>
      <category>frontend</category>
      <category>webdev</category>
    </item>
    <item>
      <title>I built an AI-Powered Image Processor at AWS re:Invent 😱 - Day 2</title>
      <author>Brian H. Hough</author>
      <pubDate>Tue, 30 Nov 2021 20:16:53 +0000</pubDate>
      <link>https://dev.to/aws-builders/i-built-an-ai-powered-image-processor-at-aws-reinvent-day-2-2hh6</link>
      <guid>https://dev.to/aws-builders/i-built-an-ai-powered-image-processor-at-aws-reinvent-day-2-2hh6</guid>
      <description>&lt;p&gt;Just wrapped up Day 2 of Amazon Web Services (AWS) re:Invent and from the Midnight Madness concert, to building an AI-Powered Image Processor during Talia Nassi's workshop, to catching up with the amazing Adrienne Tacke from MongoDB....there is a TON going on Vegas! &lt;/p&gt;

&lt;p&gt;In this episode of the &lt;a href="https://www.youtube.com/watch?v=kJV-OD_VAJk" rel="noopener noreferrer"&gt;Tech Stack Playbook&lt;/a&gt;, I'll be sharing more about AWS re:Invent - the year's largest global tech conference that brings together leaders, builders, innovators, and creators from cloud, DevOps, serverless, app development, and software engineering from all around the world.&lt;/p&gt;

&lt;p&gt;Also, I built an AI-Powered image processing application that can take images and analyze certain features about the uploaded images…so that was pretty cool 😱&lt;/p&gt;

&lt;p&gt;In this blog post and the blog posts to come this week, my hope is to vlog through the entire week and share all that I'm learning and building with you all so whether you are attending virtually or in person, this AWS re:Invent series on the Tech Stack Playbook will help you gain skills, level up in tech, and boost your software engineering abilities from the sessions I'm attending throughout the conference.&lt;/p&gt;

&lt;p&gt;Here’s a glance at what you’ll learn in this blog post:&lt;br&gt;
👉  What AWS re:Invent is all about&lt;br&gt;
👉  Traveling to Las Vegas for the year's largest tech conference&lt;br&gt;
👉  What I'll be learning about and building this week&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yrJlaw-uo9Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's going to be a major week for cloud and tech in general, so I am so excited to bring you along for the ride.&lt;/p&gt;

&lt;p&gt;What do you want to know about AWS, serverless, and DevOps? 💭&lt;/p&gt;

&lt;p&gt;Let me know in the comments below! ⬇️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-out-the-full-recording-below"&gt;
  &lt;/a&gt;
  Check out the full recording below:
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yrJlaw-uo9Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let me know if you found this post helpful! And if you haven't yet, make sure to check out these free resources below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Follow my Instagram for more: &lt;a href="https://instagram.com/brianhhough" rel="noopener noreferrer"&gt;@BrianHHough&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Watch my latest &lt;a href="https://youtube.com/brianhhough" rel="noopener noreferrer"&gt;YouTube video for more&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Listen to my Podcast on &lt;a href="https://podcasts.apple.com/us/podcast/tech-stack-playbook/id1553712082" rel="noopener noreferrer"&gt;Apple Podcasts&lt;/a&gt; and &lt;a href="https://open.spotify.com/show/01bHbabSyBmPfbc3ORMZa9?si=av_16aPbQEqL_bVu3RnO0g" rel="noopener noreferrer"&gt;Spotify&lt;/a&gt;&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Join my FREE &lt;a href="https://facebook.com/groups/techstackplaybook" rel="noopener noreferrer"&gt;Tech Stack Playbook Facebook Group&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's digitize the world together! 🚀&lt;/p&gt;

&lt;p&gt;-- Brian&lt;/p&gt;

</description>
      <category>ai</category>
      <category>machinelearning</category>
      <category>aws</category>
      <category>cloud</category>
    </item>
    <item>
      <title>How I improved nested arrays performance in our MongoDB</title>
      <author>Anton</author>
      <pubDate>Tue, 30 Nov 2021 20:10:15 +0000</pubDate>
      <link>https://dev.to/antmik/how-i-improved-nested-arrays-performance-in-our-mongodb-nko</link>
      <guid>https://dev.to/antmik/how-i-improved-nested-arrays-performance-in-our-mongodb-nko</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GyRDvFsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/12000/0%2Aoh9neGNt17Nx3vxQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GyRDvFsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/12000/0%2Aoh9neGNt17Nx3vxQ" alt="Photo by [Fotis Fotopoulos](https://unsplash.com/@ffstop?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How it started?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In 2019 I started to work on &lt;a href="https://fanficus.com"&gt;fanficus.com&lt;/a&gt;. Which is Russian speaking fiction writers/readers social network. Spent around a month thinking about how to structure the architecture of the web application. In the beginning, I didn’t know exactly what I am working on. Initially, it seemed a small side project for a few months.&lt;/p&gt;

&lt;p&gt;When starting I decided to choose to MEAN full-stack (MongoDB, Angular, ExpressJs, NodeJs). However, it was a dilemma what to choose MySQL or MongoDB. Because previously I had some experience with MySQL and I knew SQL databases had a major market share in web projects. MongoDB was chosen because it is based on javascript objects, therefore it’s natural to use on the current stack.&lt;/p&gt;

&lt;p&gt;The largest part of the web app is based on posts. They can be of different types and include a lot of parameters. Such as age rating, genres, tags, etc.&lt;/p&gt;

&lt;p&gt;Understanding that the database has to be flexible I decided to avoid nested arrays of objects. Because that was creating a risk of misalignment between collections. For example, there is a post that has genres array objects. Genre contains title and id. But at the same time, there is a genres collection. Where all genres are listed. We use it when creating new posts.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;post: {
  genres: [id1, id2, id3],
  tags: [id1, id2, id3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, what happens if we rename a genre? in the genres collection, it is renamed, but in all posts containing the genre, it remained with the old name. So we end up with a post that contains inexisting genre.&lt;/p&gt;

&lt;p&gt;Yes, you may say each time we update the genre we can update all the posts containing this genre. Though I wanted to avoid this obsolete load on the database.&lt;/p&gt;

&lt;p&gt;The way was chosen is to store in the post only an array of IDs of genres. It seemed the most effective solution. Anyway, it was more optimal than going in an SQL way and having three collections: posts, genres, post-genre.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The website was released and worked well enough. Even on each request, it was populating all the posts with an age rating, genres, etc. As a result on the frontend, I was receiving the full objects and didn’t need to run additional queries.&lt;/p&gt;

&lt;p&gt;However, after a few months number of posts increased. We started to mention slow loading times. After spending some time on the investigation figured out what was the issue. And the problem was in an ****array of IDs. Each post contained up to ten such nested arrays. Meaning each post had to run ten population commands.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PostModel.find({}).populate(‘genres’).populate(‘tags’).populate(‘ageRating’).exec();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It was not the only problem. The way we run search queries on posts also was impacted by the way we store nested IDs. Each time we run a search on the website it was seeking tags titles, then we took IDs and run a posts query.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const tagsFound = await TagModel.find({‘title’: { $in: keywordsRegArr }}).exec();
const tagsIdsArr = tagsFound.map( tag=&amp;gt; tag._id );
PostModel.find({tags:tagsIdsArr}).exec();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In addition to page load performance, we saw our MongoDB Atlas server was charging too much.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How it was solved?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After long arguments with myself, I saw that the most optimal solution will be to store the full objects inside each post. Yes, it was increasing database size. However, it was solving the main issue with performance and querying.&lt;/p&gt;

&lt;p&gt;Now posts collection looked this way:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;post: {
  genres: [{id: 1, title: 'one'}, {id: 2, title: 'two'}],
  tags: [{id: 1, title: 'one'}, {id: 2, title: 'two'}]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It was meaning now each time we search posts we don’t need to search tags to get their IDs. Now it’s just running **text search **over all posts.&lt;/p&gt;

&lt;p&gt;One more important thing that was added is &lt;strong&gt;caching&lt;/strong&gt;. For that one, I used node-cache npm package. Part of the queries is cached on the NodeJs. That way we reduce the load on the database. Some requests are cached for hours, some for minutes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As already was said, now we were able to run a &lt;strong&gt;text search&lt;/strong&gt; query and avoid multiple &lt;strong&gt;populations&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Post objects were retrieved from the posts-collection directly without any manipulations.&lt;/p&gt;

&lt;p&gt;As a result query and loading times were reduced at least by four times. And it’s on the current database which is in comparison to social networks is small.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drawbacks&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Now each time we change genres, age ratings, etc, we need to &lt;strong&gt;update all posts&lt;/strong&gt; containing these objects. But these items change rarely, so we can absorb this one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then also I had to modify &lt;strong&gt;search queries&lt;/strong&gt; from the &lt;strong&gt;client app&lt;/strong&gt;. Because post-collection contained a nested array of objects instead of an array of IDs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Storage size&lt;/strong&gt; increased. In the end, the database size didn’t increase significantly. We didn’t even mention it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The project was released a year ago. At the moment we have 22k users and it’s growing. We have a lot of features implemented, though a lot more are in development. There are many issues we meet on the road. However, overcoming them and conquering the next mountain peaks.&lt;/p&gt;

&lt;p&gt;Now the database refactoring is tested on our testing server and gonna be released soon.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>mongodb</category>
      <category>angular</category>
    </item>
    <item>
      <title>How to write more readable React code</title>
      <author>Matt Angelosanto</author>
      <pubDate>Tue, 30 Nov 2021 19:55:36 +0000</pubDate>
      <link>https://dev.to/logrocket/how-to-write-more-readable-react-code-5250</link>
      <guid>https://dev.to/logrocket/how-to-write-more-readable-react-code-5250</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/chakshunyu/"&gt;Chak Shun Yu&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;One of the most important aspects of code is its readability. Easily readable code is the result of well-written code, and it has a lot of long-term benefits. It will be easier to read, understand, maintain, review, less prone to unexpected errors, and generally make the lives of other developers a lot easier when they have to interact with that code.&lt;/p&gt;

&lt;p&gt;The difficulty of code readability is especially prominent in React development due to its composite nature. The resulting code is filled with a lot of code patterns, very fragmented, and generally distributed over multiple places. This further increases the difficulty of writing readable React code.&lt;/p&gt;

&lt;p&gt;However, writing readable React code is not an impossible task. Doing so starts with making the entire process a conscious one. For that, it's important to know what aspects to focus on.&lt;/p&gt;

&lt;p&gt;To help you with this, this article will cover multiple topics that you should consider when writing more readable code and its impact on readability, including:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="#length-code"&gt;Length of the code&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#how-closely-related-code-grouped-together"&gt;How closely-related code is grouped together&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#complicated-javascript-constructions"&gt;Complicated JavaScript constructions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#how-many-flows-handled-at-once"&gt;How many flows are handled at once&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#variable-naming"&gt;Variable naming&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#highlighting-similarities-differences"&gt;Highlighting similarities and differences&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hopefully, this information will provide you with a solid foundation on how to write more readable React code right now, and in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#length-of-the-code"&gt;
  &lt;/a&gt;
  Length of the code
&lt;/h2&gt;

&lt;p&gt;When discussing code readability, the topic that is most commonly mentioned is the length of the code. Shorter code, in both the vertical and horizontal directions, is often associated with being more readable. The main reason for this is that shorter code equals less code for developers to read through. This results in fewer opportunities that can confuse, which would otherwise make it harder for developers to read through the code.&lt;/p&gt;

&lt;p&gt;In reality, however, it's not that clearly differentiated. While writing less code can contribute a lot to readability, it's not an ultimate guarantee. There also comes a turning point where shortening the code even further turns it from being beneficial to harmful for the readability.&lt;/p&gt;

&lt;p&gt;When pushing for shorter code with the assumption that it's beneficial for the code readability, the other aspect that is often sacrificed is explicitness.&lt;/p&gt;

&lt;p&gt;Take the concept of inline conditional rendering, where it's often between the AND and the ternary operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;linkUrl&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;linkUrl&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PrettyLink&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; &lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// -- OR --&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;linkUrl&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkUrl&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;linkUrl&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PrettyLink&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The former is considered shorter and more concise, while the latter is considered lengthy and only appropriate when both branches of the condition are necessary.&lt;/p&gt;

&lt;p&gt;But using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#:~:text=The%20logical%20AND%20(%20%26%26%20)%20operator,it%20returns%20a%20Boolean%20value."&gt;&lt;code&gt;&amp;amp;&amp;amp; operator&lt;/code&gt;&lt;/a&gt; means that one branch is not explicitly stated, so it's up to the reader to figure out what the expected behavior is for the other branch (even if it's to render nothing), whether it was left out by mistake, and look for information that is not provided to them.&lt;/p&gt;

&lt;p&gt;This is a clear sacrifice of explicitness for the sake of saving on code length. Whether this is more readable depends on the scenario, but it isn't always as straightforward as "the shorter the better".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-closelyrelated-code-is-grouped-together"&gt;
  &lt;/a&gt;
  How closely-related code is grouped together
&lt;/h2&gt;

&lt;p&gt;One of the reasons we create custom components, Hooks, and functions in React is because it groups related code. Instead of scattering code all over the place, it packages everything in one location under a certain context or purpose.&lt;/p&gt;

&lt;p&gt;In the same fashion, the distance at which similar code is grouped also plays a role in the readability.&lt;/p&gt;

&lt;p&gt;One of the biggest examples of this occurrence in React development is the introduction of &lt;a href="https://blog.logrocket.com/react-hooks-the-good-the-bad-and-the-ugly/"&gt;React Hooks&lt;/a&gt;. Before Hooks, the only way to include logic with React components was through using class components. To do so, we had to implement lifecycle methods and put pieces of logic in the appropriate places.&lt;/p&gt;

&lt;p&gt;Unfortunately, these lifecycle methods were scattered across the component and, in certain cases, were written in a specific order — your logic was broken up and distributed across the component. This increased the distance between related code blocks and often made it hard to see and understand the logic flow.&lt;/p&gt;

&lt;p&gt;With the introduction of Hooks, we didn't only receive a way to &lt;a href="https://blog.logrocket.com/react-render-props-vs-custom-hooks/"&gt;reuse logic across multiple components&lt;/a&gt;, but also a way to group all the related code closely together. This reduced the distance at which similar code is grouped.&lt;/p&gt;

&lt;p&gt;This is an important factor for code readability and maintainability, and thus should be kept in mind whenever possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complicated-javascript-constructions"&gt;
  &lt;/a&gt;
  Complicated JavaScript constructions
&lt;/h2&gt;

&lt;p&gt;In the end, a major part of React development is JavaScript. Implementing React components, logic, Hooks, and more is all done in JavaScript, which means that all of JavaScript can be used for it. That can be both an advantage and a drawback.&lt;/p&gt;

&lt;p&gt;As a programming language, JavaScript is very extensive and allows for a lot of different implementations. But a major drawback to such an extensive language is that not everyone will be similarly familiar with all the language details.&lt;/p&gt;

&lt;p&gt;Many language features in JavaScript are based on intrinsic details or implicit behavior, which compounds its complexity when coupled with its dynamic nature. These two factors make certain JavaScript constructions more complicated to understand and can negatively impact the readability of your code based on how familiar your developers are with them.&lt;/p&gt;

&lt;p&gt;Let’s discuss a few common example JavaScript constructions that I've noticed are more difficult to understand. For all of these constructions, understanding the implicit concepts behind them is crucial for understanding the construction itself. Not having that information can significantly negatively affect readability.&lt;/p&gt;

&lt;p&gt;While it's likely that most React developers will be aware of these constructions, it's not a given guarantee, and thus something to keep in mind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-arrayreduce-endraw-function-for-data-conversion"&gt;
  &lt;/a&gt;
  The &lt;code&gt;Array.reduce&lt;/code&gt; function for data conversion
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;idObjects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getValueFromId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Array.reduce&lt;/code&gt; function is often used to convert an array into a different data structure, like an object. The code is very compact, but it's also often difficult to understand — there's a lot of details to keep track of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The original array&lt;/li&gt;
&lt;li&gt;  The &lt;code&gt;reduce&lt;/code&gt; call&lt;/li&gt;
&lt;li&gt;  The previous value&lt;/li&gt;
&lt;li&gt;  The current value&lt;/li&gt;
&lt;li&gt;  The initial structure&lt;/li&gt;
&lt;li&gt;  The resulting structure&lt;/li&gt;
&lt;li&gt;  How the different values are combined&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The order of this information is also unnatural, like the initial structure being defined last. A different structure that improves upon this is the for-loop. Although it’s considered more ugly and verbose, the resulting code is often more readable due to the more straightforward order of information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  First comes the initialization of variables&lt;/li&gt;
&lt;li&gt;  Second are the length and limits of the loop&lt;/li&gt;
&lt;li&gt;  Third come all the actions onto the relevant variables&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-ampamp-endraw-operator-for-conditional-rendering"&gt;
  &lt;/a&gt;
  The &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator for conditional rendering
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;hasImage&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hasImage&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A very commonly used construction for &lt;a href="https://www.chakshunyu.com/blog/react-readability-analysis-of-inline-conditional-rendering/"&gt;inline conditional rendering&lt;/a&gt; is the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator. Based on the value of the left-hand side operand, the right-hand side operand might be rendered.&lt;/p&gt;

&lt;p&gt;However, this construction only works due to the implicit JavaScript behavior called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation"&gt;short-circuiting&lt;/a&gt;. When the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; expression is evaluated and the left-hand side operator evaluates to a falsy value, then that operand is returned and the evaluation of the right-hand side operand is entirely skipped.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-many-flows-are-handled-at-once"&gt;
  &lt;/a&gt;
  How many flows are handled at once
&lt;/h2&gt;

&lt;p&gt;Any given web application will have to deal with all types of information flowing around. Together with the ever-increasing complexity of web applications, it's also never about handling just one data or logic flow. Any UI will have a dozen, hundred, or even a thousand smaller pieces. Every single piece will be connected to some kind of information and have multiple flows going through them.&lt;/p&gt;

&lt;p&gt;React provides us with a lot of tools to implement data and logic flows. Think of &lt;a href="https://blog.logrocket.com/react-hooks-cheat-sheet-unlock-solutions-to-common-problems-af4caf699e70/"&gt;out-of-the-box Hooks&lt;/a&gt; like &lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useReducer&lt;/code&gt;, &lt;code&gt;useEffect&lt;/code&gt;, and &lt;code&gt;useLayoutEffect&lt;/code&gt;, and the ability to reuse logic in the form of &lt;a href="https://blog.logrocket.com/advanced-react-hooks-creating-custom-reusable-hooks/"&gt;custom Hooks&lt;/a&gt;. While these tools allow React developers to handle flows very easily and effectively, they also have their drawbacks in certain scenarios.&lt;/p&gt;

&lt;p&gt;It's very easy to entangle a lot of flows in a single location because of how straightforward it is to implement flows into your components. Multiple flows going through a single component or combining pieces of logic from multiple flows into a single &lt;code&gt;useEffect&lt;/code&gt; Hook is not an uncommon occurrence.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Logic...&lt;/span&gt;

    &lt;span class="c1"&gt;// Here, we're combining flows for the data request, empty state, filled logic state, and&lt;/span&gt;
    &lt;span class="c1"&gt;// server error feedback into a single `useEffect`. It feels natural, but is it readable?&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setRequestState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LOADING&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setRequestState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DONE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;triggerEmptyState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setRequestState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DONE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataIsValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;updateOtherLogicWithData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;informServerDataIsInvalid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateOtherLogicWithData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;informServerDataIsInvalid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;triggerEmptyState&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="c1"&gt;// Render...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem with combining piece of logic from multiple flows into a single &lt;code&gt;useEffect&lt;/code&gt; Hook like this is that it can negatively influence code readability. Putting different flows closely together will make them intertwined, difficult to separate, and tightly coupled. The resulting code will thus become more difficult to understand and harder to maintain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variable-naming"&gt;
  &lt;/a&gt;
  Variable naming
&lt;/h2&gt;

&lt;p&gt;In general, one of the most difficult things in software development is naming things. Proper names can make or break the readability of code. React development is no exception. But due to the composite nature of React, there are a lot of entities to be named. Hooks, components, functions, variables, props, callbacks, contexts — and the list goes on.&lt;/p&gt;

&lt;p&gt;Together with the focus on reusability, their names cannot be so specific that they seemingly prevent reusability, but also can’t be too generic because they should reflect their scope and context.&lt;/p&gt;

&lt;p&gt;Properly naming them can bring you very far in writing more readable code. Not only does it benefit code readability, but it can also enhance the quality of the code and increase future maintainability. A few examples are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Include a prefix with the component's props to indicate the type of the API — this makes it clear to users what behavior is expected of it and how to use it

&lt;ul&gt;
&lt;li&gt;  e.g., instead of naming a boolean prop &lt;code&gt;valid&lt;/code&gt;, consider naming it &lt;code&gt;isValid&lt;/code&gt;; instead of &lt;code&gt;validate&lt;/code&gt;, consider calling it &lt;code&gt;onValidate&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  If you have multiple props that configure a similar aspect, then you can most likely simplify the API design. This can quickly be noticed by the names, like having both an &lt;code&gt;isLoading&lt;/code&gt; and an &lt;code&gt;isError&lt;/code&gt; boolean prop

&lt;ul&gt;
&lt;li&gt;  Considering an enumeration prop called that captures both of the previous props could make the API design more clear and less cluttered&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  Consider the scope in which components can be used — if you have an avatar rendering component that's generic for the whole platform, then it's fine to call it &lt;code&gt;Avatar&lt;/code&gt;, but if it's specifically meant to be used in a section of a card, then it's beneficial to make that explicit in the name and call it &lt;code&gt;CardAvatar&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  Name callbacks after what they do, not how they will be used: if you need to provide a callback to a component's &lt;code&gt;onChange&lt;/code&gt; prop, then naming that callback &lt;code&gt;onChange&lt;/code&gt; will not add any useful information to the reader

&lt;ul&gt;
&lt;li&gt;  e.g., instead, consider naming it after what they do: &lt;code&gt;updateStateValue&lt;/code&gt; increases the readability because it clarifies what the callback does and what will happen when the appropriate change event occurs in the used component&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are concrete examples of how naming variables differently can change the readability and quality of React code. But it’s not only limited to these examples — the most important thing is to keep this topic in mind when writing, consider the quality and specificity of your naming style, and potentially improve upon it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#highlighting-similarities-or-differences-in-react-code"&gt;
  &lt;/a&gt;
  Highlighting similarities or differences in React code
&lt;/h2&gt;

&lt;p&gt;There are a lot of different types of code flying around in React development — CSS, JS, HTML (or JSX) — and because of this, a lot of code is located in a single location. Especially in such a UI-centered development field, it means that there will be many scenarios where the code has either minor similarities or differences.&lt;/p&gt;

&lt;p&gt;Properly highlighting these occurrences can make a world of difference for the readability of the code. Consider the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomeSection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isEditable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEditable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;OuterSection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Edit&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SectionButton&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Clear&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SectionButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/OuterSection&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;OuterSection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Read&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/OuterSection&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// -- OR --&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomeSection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isEditable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;OuterSection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isEditable&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Edit this content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Read this content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isEditable&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SectionButton&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Clear&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SectionButton&amp;gt; : null &lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/OuterSection&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When these occurrences are highlighted, you can more easily see how certain flows, branches, or results are related to each other, which parts are connected, which parts are different, and so on.&lt;/p&gt;

&lt;p&gt;If the approach you use to do this isn’t thoughtful, it can result in duplicate code, or code that requires a higher cognitive load — meaning more things to keep track of, disconnected flows, and harder to understand code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;Writing readable code is one of the most important aspects of software development, and it isn't a trivial task. Its difficulty is especially prominent in React development because of its composite, fragmented, and distributed nature. There is a lot more code and factors to consider when dealing with code readability, which can be overwhelming and make it very difficult.&lt;/p&gt;

&lt;p&gt;In this article, I went over various React code aspects to consider when writing more readable code. These include the length of the code, how closely related blocks of code are grouped, whether complicated JavaScript constructions are used, how many flows are handled at once, the naming of your variables and entities, and the degree to which similarities or differences are highlighted. For each topic, we went over why they matter, their impact on the code readability, and how their impact can be controlled.&lt;/p&gt;

&lt;p&gt;Using this information, you should have a solid foundation on what aspects to consider and how to write more readable React code. Not only will this have an immediate impact on the readability of your code, but also on its reviewability and long-term maintainability.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#full-visibility-into-production-react-apps"&gt;
  &lt;/a&gt;
  Full visibility into production React apps
&lt;/h2&gt;

&lt;p&gt;Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;try LogRocket&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your React app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.&lt;/p&gt;

&lt;p&gt;The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your React apps — &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;start monitoring for free&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
