<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 Best Google Cloud Professional Data Engineer Certification Courses to Crack Exam in 2021</title>
      <author>javinpaul</author>
      <pubDate>Mon, 19 Jul 2021 09:27:50 +0000</pubDate>
      <link>https://dev.to/javinpaul/5-best-google-cloud-professional-data-engineer-certification-courses-to-crack-exam-in-2021-33p2</link>
      <guid>https://dev.to/javinpaul/5-best-google-cloud-professional-data-engineer-certification-courses-to-crack-exam-in-2021-33p2</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hello folks, If you are preparing for Google Cloud Professional Data Engineer Certification Exam in 2021 and looking for useful preparation material and online courses then you have come to the right place. &lt;/p&gt;

&lt;p&gt;Earlier, I have shared &lt;a href="https://dev.to/javinpaul/top-5-courses-to-pass-amazon-aws-certified-solutions-architect-associate-exam-saa-c01-in-2020-56g7"&gt;best AWS Solution Architect Associate courses&lt;/a&gt; and in this article, I am going to share best online courses to crack Google Cloud Professional Data engineer certification in 2021. &lt;/p&gt;

&lt;p&gt;If you are following cloud computing trends then you may know that Google Cloud Professional Data Engineers are currently in high demand for their ability to maintain the process of accumulating, converting, and publishing data with a certain level of expertise. &lt;/p&gt;

&lt;p&gt;They are famous for having the capability to put machine learning models into operation, creating and structuring data processing systems to work accurately, and ensuring that the data is secure and scalable.&lt;/p&gt;

&lt;p&gt;A career in Google cloud data engineering is mostly pursued by those who are confident in their programming skills and wish to conduct in-depth studies in data and data technologies. &lt;/p&gt;

&lt;p&gt;If you have an interest in programming and manipulating data tech, then it's recommended that you take a look into data engineering.&lt;/p&gt;

&lt;p&gt;As for the additional rewards of being a &lt;a href="https://www.java67.com/2020/10/5-free-courses-to-pass-google-cloud-professional-data-engineer-certification-exam.html"&gt;Google Cloud Data Engineer&lt;/a&gt;, you could potentially receive an average salary of more than $117,000 per year. The rates may vary depending on how much experience you possess in data engineering as data engineering is best learned with much practice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-best-google-cloud-professional-data-engineer-certification-exam-courses-for-beginners"&gt;
  &lt;/a&gt;
  5 Best Google Cloud Professional Data Engineer Certification Exam Courses for Beginners
&lt;/h2&gt;

&lt;p&gt;In order to become a Google Cloud Data Engineer, one must first pass the exam that will certify them as a data engineer. This exam is conducted online and tests the user's knowledge of data engineering in &lt;a href="https://medium.com/javarevisited/5-best-courses-to-learn-google-cloud-platform-gcp-in-2021-169093a3771a"&gt;Google Cloud&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;There are no prerequisites necessary to qualify for this certificate but it is recommended that you have a thorough knowledge and some practice in data engineering before the exam is conducted. There are many courses online available to help you with this.&lt;/p&gt;

&lt;p&gt;Here are the top 5 recommended online courses to prepare for Google Cloud Data Engineering certification:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-udemy-gcp-complete-google-data-engineer-and-cloud-architect-guide"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fgcp-data-engineer-and-cloud-architect%2F"&gt;Udemy - GCP: Complete Google Data Engineer and Cloud Architect Guide&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is one of the best Udemy course to become a Google Data Engineer in 2021. Its lessons are taught by two instructors who have been working for Google as Cloud data engineers for 7 years after successfully completing Google Cloud's data engineer certification exam.&lt;/p&gt;

&lt;p&gt;The course's total video content measures 28 hours long and is taught in a very engaging and practical way with downloadable material available for additional information and practice. They break down complex topics in a way that the participant will find easy to comprehend and apply in the certification exam.&lt;/p&gt;

&lt;p&gt;The course can only be accessed through Udemy. &lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2F"&gt;Udemy&lt;/a&gt; is an online learning platform that uses a one-time payment for each of their courses and they also offer a refund within 30 days if you are not satisfied with your course of choice.&lt;/p&gt;

&lt;p&gt;They also give very good discounts on their prices which makes their courses very affordable. Udemy also has a section where you can ask the instructors a question regarding the course. They generally answer these in 24 hours or less.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fgcp-data-engineer-and-cloud-architect%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g4JUAmMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-9K64fbsdjC0/XtOpzlwMSaI/AAAAAAAAfeU/qnfuHHqY8w8Qi5MGsVbpIWbYBBfkTvr1ACLcBGAsYHQ/s400/Udemy%252B-%252BGCP%252Band%252BGoogle%252BCloud%252BPlatform%252BData%252BEngineer%25252C%252BCloud%252BArchitect%252Bbest%252Bcourse.png" alt="Top 5 Course to become a Google Cloud Professional Data Engineer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-udemy-google-cloud-professional-data-engineer-course"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Flearn-gcp-become-a-certified-data-engineer-express-course%2F"&gt;Udemy - Google Cloud Professional Data Engineer Course&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;At 4.5 hours long, this Udemy course is a very short one but makes up for that in terms of the content that is focused on. It is taught by a &lt;a href="https://medium.com/javarevisited/8-free-google-cloud-data-engineer-certification-courses-and-practice-tests-594f31643b58"&gt;certified Google Cloud Professional Data Engineer&lt;/a&gt; who has plenty of experience working with data tech.&lt;/p&gt;

&lt;p&gt;The course builds on your foundation of GCP's products by explaining the role of each of the products as well as the applications of GCP that you will need to know to be able to pass the exam. There are quizzes at the end of each section, aiming to help you apply and retain the information you've learned.&lt;/p&gt;

&lt;p&gt;However, before you start the course there are some requirements which include &lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-courses-to-learn-microsoft-sql-server-mssql.html"&gt;SQL Basics&lt;/a&gt; and having an understanding of Relational Databases and &lt;a href="https://medium.com/javarevisited/10-free-online-courses-to-learn-mongodb-and-nosql-942609611664"&gt;NoSQL&lt;/a&gt;. These concepts are not difficult to grasp and won't require more than a Google search or two.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Flearn-gcp-become-a-certified-data-engineer-express-course%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QjeTSfWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-56BApQSJqmg/XtOpzhV02MI/AAAAAAAAfeQ/bBQYWSNTw6o6m6-kJS9ofCaIDpJCeETeACLcBGAsYHQ/s400/Udemy%252B-%252BGCP%252BComplete%252BGoogle%252BData%252BEngineer%252Band%252BCloud%252BArchitect%252BGuide%252Bbest%252Bcourse.png" alt="Top 5 Course to Crack Google Cloud Platform Data Engineer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-coursera-data-engineering-with-google-cloud-professional-certificate"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprofessional-certificates%2Fgcp-data-engineering"&gt;Coursera: Data Engineering with Google Cloud Professional Certificate&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This best Coursera course for Google Cloud Platform has landed jobs in data engineering with Google Cloud for many of its students. &lt;/p&gt;

&lt;p&gt;It's offered by the Google Cloud Team themselves and is taught by many certified instructors from top companies and universities.&lt;/p&gt;

&lt;p&gt;Upon entering this course, you will gain access to a plethora of resources structured to help you apply the google cloud technology and pass the exam for the Google Cloud Data Engineering Certificate.&lt;/p&gt;

&lt;p&gt;There is also a certificate of completion that will be given to you upon completion of the course. To access the course, you'll need to purchase a Coursera subscription for $49 monthly but in case you would like to confirm that you are satisfied with the course, you can start a 7-day free trial and cancel any time after.&lt;/p&gt;

&lt;p&gt;And, if you find Coursera courses and certifications useful then you should also join the &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fcourseraplus"&gt;Coursera Plus&lt;/a&gt;&lt;/strong&gt;, a subscription plan from Coursera which provides you &lt;strong&gt;unlimited access&lt;/strong&gt; to their most popular courses, specialization, professional certificate, and guided projects. It cost around $399/year but its complete worth of your money as you get &lt;em&gt;unlimited certificates&lt;/em&gt; and its also very cost-effective.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprofessional-certificates%2Fgcp-data-engineering"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QEnDc9m1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-i5ZC6VvhCT0/XtOpziL3T1I/AAAAAAAAfeM/x58Y-Ak5AWc-ksUq07nUXhrUnjp_KSHSACLcBGAsYHQ/s400/Coursera%252BData%252BEngineering%252Bwith%252BGoogle%252BCloud%252BProfessional%252BCertificate%252Bbest%252Bcourse.png" alt="Best Coursera Course to pass Google Cloud Professional Data Engineer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-pluralsight-data-engineering-on-google-cloud"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fpaths%2Fdata-engineering-on-google-cloud-platform"&gt;Pluralsight: Data Engineering on Google Cloud&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Designed by &lt;a href="https://javarevisited.blogspot.com/2019/07/top-5-google-cloud-platform-gcp-courses-certifications-online.html"&gt;Google Cloud&lt;/a&gt;, this course on Pluralsight offers Cloud Data Engineer training for all levels from beginner to advanced data engineering. &lt;/p&gt;

&lt;p&gt;You are taught all the necessary skills needed to become a Google Cloud Data Engineer such as processing and streaming data, building data processing systems, and managing data pipelines.&lt;/p&gt;

&lt;p&gt;This is all through a series of presentations, demos, and labs. Pluralsight offers a &lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Flearn"&gt;10-day free trial&lt;/a&gt;, but you'll have to pay a fee of $29 per month after that trial is over.&lt;/p&gt;

&lt;p&gt;One important thing to note about Google cloud certification is that they are valid for two years from the data you passed the exam and after expiration, you need to re-certify yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fpaths%2Fdata-engineering-on-google-cloud-platform"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--86BtRVKv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-NXRACxjdlBo/XtOp0kN1euI/AAAAAAAAfec/Nx3i0Be0XawaF3xRFEsVHyJhF5mD0VcLQCLcBGAsYHQ/s400/google-cloud-platform-big-data-machine-learning-fundamentals-v2-best-pluralsight-course.png" alt="Best Pluralsight Course to pass Google Cloud Professional Data Engineer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-udemy-gcp-google-cloud-platform-data-engineer-cloud-architect"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fgcp-google-cloud-platform-data-engineer-cloud-architect%2F"&gt;Udemy - GCP: Google Cloud Platform: Data Engineer, Cloud Architect&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This Udemy online course is taught by two instructors who have years of experience in Google Cloud Data Engineering and coaching others who wish to get into the field. &lt;/p&gt;

&lt;p&gt;They take great care in making sure that the individual taking the course will get a thorough knowledge of the GCP concepts and examples to know what it is like to take on the tasks of a &lt;a href="https://medium.com/javarevisited/7-best-google-cloud-professional-data-engineer-certification-exam-courses-in-2021-dd15631a6ebd"&gt;data engineer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before this, they will show you how to set up the Google Cloud Platform on your computer in order to follow along with them in their demos so that you can get hands-on experience with the products while you are taking the course.&lt;/p&gt;

&lt;p&gt;The course is 8.5 hours long and contains many downloadable training material resources to help you along with the lectures. You will get all those materials without any additional costs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fgcp-google-cloud-platform-data-engineer-cloud-architect%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w8FwpLxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-VAWzYdXbRRY/XtOp0eUeqeI/AAAAAAAAfeY/STndiUjx7jUtBroupATRS9XGJhjCq3XGgCLcBGAsYHQ/s400/Udemy%252B-%252BGoogle%252BCloud%252BProfessional%252BData%252BEngineer%252BCourse%252Bbest.png" alt="Best Udemy Course to pass Google Cloud Professional Data Engineer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all about the &lt;strong&gt;best online courses to become a Google Cloud Platform Data Engineer in 2021&lt;/strong&gt;. These online courses are specially designed keeping this prestigious cloud certification in mind and they cover all topics specified in official exam guides. &lt;/p&gt;

&lt;p&gt;If you are preparing for Google Cloud Certification, particularly Data Engineer then you should take benefit of these courses for better preparation.&lt;/p&gt;

&lt;p&gt;Other &lt;strong&gt;IT and Cloud Certification Articles&lt;/strong&gt; you may like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/05/top-5-course-to-crack-google-cloud-associate-cloud-engineer-certification-exam.html"&gt;5 Courses to become Google Cloud  Certified Associate Cloud Engineer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/top-5-course-to-crack-aws-certified-devops-engineer-professional-exam-certification.html"&gt;Top 5 Courses to Crack AWS DevOps Engineer Exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/top-5-course-to-crack-aws-solution-architect-professional-sap-c01-certification-exam.html"&gt;Top 5 Courses to Crack AWS Solution Architect Professional Exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/08/how-to-crack-spring-core-professional-certification-exam-java-latest.html"&gt;How to pass Spring Core Professional 5.0 Certification&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-AZ-900-exam-Azure-Fundamentals-certification-practice-tests-and-mock-exams-to.html"&gt;Top 5 AZ-900 Practice tests for programmers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.freecodecamp.org/how-to-pass-oracles-java-certifications-a-practical-guide-for-developers-e9b607ba6173"&gt;How to Crack Oracle's Java Certification in 2021?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/05/top-5-course-to-crack-google-cloud-associate-cloud-engineer-certification-exam.html"&gt;Top 5 Courses to become GCP Associate Cloud Enginee&lt;/a&gt;r&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/how-to-crack-microsoft-azure-solution-architect-exam-az-300.html"&gt;How to Pass the AZ-300 Azure Solution Architect exam?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/07/top-5-courses-to-crack-azure-architecture-technologies-certification-az-300-exam.html#axzz6E6VuRMsx"&gt;Top 5 Courses to crack Azure Cloud Architect (AZ-300) Exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/08/top-5-free-aws-solution-architect-Associate-certification-dumps-practice-questions.html"&gt;5 Free AWS Solution Architect Practice Test&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/how-to-crack-microsoft-azure-fundamentals-certification-az-900-exam.html"&gt;How to Crack Azure Fundamentals (AZ-900) Certification&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you find these Google Cloud Platform Data Engineer courses useful then please share with your friends and colleagues on Facebook, Twitter, and LinkedIn. If you have any questions or about then please drop a note.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S. -&lt;/strong&gt; Apart from going through these GCP Associate Cloud engineer courses you can also check out the exam guide or take the** &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fgoogle-cloud-platform-associate-cloud-engineer-practice-test-x%2F"&gt;practice exam&lt;/a&gt;** that will help you in identifying and focusing on the main areas during your preparation.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Tell your users the remaining reading time, in CSS</title>
      <author>Fabrizio Calderan</author>
      <pubDate>Mon, 19 Jul 2021 09:15:49 +0000</pubDate>
      <link>https://dev.to/fcalderan/tell-your-users-the-remaining-reading-time-in-css-1mik</link>
      <guid>https://dev.to/fcalderan/tell-your-users-the-remaining-reading-time-in-css-1mik</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this demo must be tested in Chrome Canary 90+ with the &lt;code&gt;--enable-experimental-web-platform-features flag&lt;/code&gt; enabled;&lt;/p&gt;




&lt;p&gt;Recently, thanks to the new &lt;code&gt;@scroll-timeline&lt;/code&gt; property available on Chrome Canary, I have seen an &lt;a href="https://codepen.io/bramus/pen/WNGLpyV"&gt;interesting demo&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/bramus"&gt;@bramus&lt;/a&gt;
 where the user is aware of the time needed to read a page with a sticky progress bar that stretches horizontally, where its width is dependant on the current scrolling position of the root element.&lt;/p&gt;

&lt;p&gt;I've extended this idea a little bit by showing an &lt;strong&gt;animated countdown&lt;/strong&gt; of the exact time needed to read the page. All you need to do is to just set the time in minutes and the CSS animations will do the work for you. &lt;/p&gt;

&lt;p&gt;Demo (scroll the page until the end):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/fcalderan/embed/JjNKoLP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;Here is a step-by-step explanation&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-variables"&gt;
  &lt;/a&gt;
  The variables
&lt;/h3&gt;

&lt;p&gt;Basically, two variables &lt;code&gt;--ss&lt;/code&gt; and &lt;code&gt;--mm&lt;/code&gt; hold the values of seconds and minutes and two distinct animations change them. In order to make the interpolation of the values in the keyframes work, these variables have been registered as &lt;code&gt;integers&lt;/code&gt; properties through the &lt;a href="https://web.dev/css-props-and-vals/"&gt;Houdini's API&lt;/a&gt; integrated on Chrome.&lt;/p&gt;

&lt;p&gt;So the &lt;code&gt;--ss&lt;/code&gt; variable is declared in the CSS like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@property --ss {
  syntax: "&amp;lt;integer&amp;gt;";
  initial-value: 0;
  inherits: true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;while the &lt;code&gt;--mm&lt;/code&gt; is declared instead in a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; block, inside the markup because here is where you are going to set the minutes needed (e.g. &lt;code&gt;7&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    @property --mm {
       syntax: "&amp;lt;integer&amp;gt;";
       initial-value: 7;
       inherits: true;
    }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since it's not (still) possibile to print out the value of a variable using the &lt;code&gt;content&lt;/code&gt; property I've set two counters and print their values through the &lt;code&gt;counter()&lt;/code&gt; function with a leading &lt;code&gt;0&lt;/code&gt; when necessary&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;counter-reset: ss var(--ss);
...
content: counter(ss, decimal-leading-zero);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;counter-reset: mm var(--mm);
...
content: counter(mm, decimal-leading-zero);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#the-scrolltimeline"&gt;
  &lt;/a&gt;
  The scroll-timeline
&lt;/h3&gt;

&lt;p&gt;I've set the scroll-timeline animation in this way&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@scroll-timeline scroll {
  time-range: 60s;
  start: 200px;
  end  : calc(100% - 150px);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;time-range&lt;/code&gt; has been set to &lt;code&gt;60&lt;/code&gt; seconds in order to make the calculations of the animations easier (at least for my brain) . &lt;/p&gt;

&lt;p&gt;To give a meaningful example let's say that we want to start the countdown after &lt;code&gt;200px&lt;/code&gt; of scroll — to exclude the title or maybe a hero image, but you could even set it to &lt;code&gt;0&lt;/code&gt; or to another value of course — and we want to also stop it before a hypothetical footer &lt;code&gt;150px&lt;/code&gt; tall.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-animations"&gt;
  &lt;/a&gt;
  The animations
&lt;/h3&gt;

&lt;p&gt;This is the most intriguing part due to the tricky computations. Here is the animation of the minutes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@keyframes mins {
  to   { --mm: 0;  }
}

...
animation: mins 
   /* duration   */ 60s 
   /* timing     */ steps(var(--mm), start) 
   /* delay      */ calc(calc(60s / (calc(var(--mm)) - 1)) / 60 / var(--mm))
   /* repetition */ 1
   /* fill mode  */ forwards;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;@keyframes&lt;/code&gt; start from the value we have previously set and should decrease until &lt;code&gt;0&lt;/code&gt;, so the definition of the last keyframe is enough.&lt;/p&gt;

&lt;p&gt;The animation should takes &lt;code&gt;60s&lt;/code&gt; which is the same amount of time we defined for the &lt;code&gt;@scroll-timeline&lt;/code&gt;. The &lt;code&gt;delay&lt;/code&gt; expression is calculated so that the value of the minutes decreases immediately after &lt;code&gt;1s&lt;/code&gt; (e.g. switching from &lt;code&gt;7:00&lt;/code&gt; to &lt;code&gt;6:59&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The animation of seconds is quite similar but in this case we need to specify the starting value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@keyframes secs {
  from { --ss: 59; }
  to   { --ss: 0;  }
}

...
animation: secs 
   /* duration   */ calc(60s / calc(var(--mm)))
   /* timing     */ linear
   /* delay      */ calc(calc(60s / (calc(var(--mm)) - 1)) / 60 / var(--mm))
   /* repetition */ var(--mm) 
   /* fill-mode  */ forwards;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only difference here is the duration: seconds need to be updated faster than minutes, running &lt;code&gt;--mm&lt;/code&gt; times from &lt;code&gt;59&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; with a &lt;code&gt;repetition&lt;/code&gt; of &lt;code&gt;--mm&lt;/code&gt;. Here the purpose of the &lt;code&gt;delay&lt;/code&gt; is just to wait the first update of the minutes.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#always-respect-user-preferences"&gt;
  &lt;/a&gt;
  Always respect user preferences
&lt;/h3&gt;

&lt;p&gt;The update of the seconds is amazing but it can be annoying for users who don't like continuous animations and that prefer a reduced motion.&lt;/p&gt;

&lt;p&gt;We may hide the element with the seconds using a simple mediaquery:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media (prefers-reduced-motion: reduce) {
  .countdown__display--ss {
    display: none;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Ta-da!&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-words-amp-thoughts"&gt;
  &lt;/a&gt;
  Final words &amp;amp; thoughts
&lt;/h2&gt;

&lt;p&gt;Feel free to &lt;a href="https://codepen.io/fcalderan/"&gt;follow me on Codepen&lt;/a&gt; or &lt;a href="https://twitter.com/fcalderan"&gt;Twitter&lt;/a&gt; where I usually talk about frontend and trees.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is a &lt;strong&gt;carbon free&lt;/strong&gt; article so I pledge to plant &lt;a href="https://ecologi.com/fcalderan?r=5f0f0ba9be14f7001a6f431a"&gt;25 trees with Ecologi&lt;/a&gt; &lt;strong&gt;plus 1 tree&lt;/strong&gt; for each retweet of &lt;a href="https://twitter.com/fcalderan/status/1417050737796915204"&gt;the announcement below&lt;/a&gt;👇 in the next 12 days &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RB0JwDaY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1417048991519412227/pu/img/KZNhuYDdrEe7suNS.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--xqNx82s_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1409213607255150592/sDnD9EM6_normal.jpg" alt="Fabrizio Calderan profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Fabrizio Calderan
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/fcalderan"&gt;@fcalderan&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      New article published on &lt;a href="https://t.co/ZCxAlz23D6"&gt;dev.to&lt;/a&gt;&lt;br&gt;&lt;a href="https://t.co/BDgEHteNYo"&gt;dev.to/fcalderan/tell…&lt;/a&gt;&lt;br&gt;«Tell your users the remaining reading time, in &lt;a href="https://twitter.com/hashtag/CSS"&gt;#CSS&lt;/a&gt; &lt;br&gt;&lt;br&gt;This is &lt;a href="https://twitter.com/hashtag/carbonfree"&gt;#carbonfree&lt;/a&gt; article: I'll plant 1 tree with &lt;a href="https://twitter.com/Ecologi_hq"&gt;@Ecologi_hq&lt;/a&gt;  for each retweet (see the article for the notes) 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      09:16 AM - 19 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1417050737796915204" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1417050737796915204" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1417050737796915204" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;&lt;small&gt;(up to 75 trees, retweets from human accounts with 20+ followers)&lt;/small&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>frontend</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Create a simple pomodoro timer in python</title>
      <author>Code_Jedi</author>
      <pubDate>Mon, 19 Jul 2021 09:11:40 +0000</pubDate>
      <link>https://dev.to/code_jedi/create-a-simple-pomodoro-timer-in-python-l97</link>
      <guid>https://dev.to/code_jedi/create-a-simple-pomodoro-timer-in-python-l97</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hey"&gt;
  &lt;/a&gt;
  Hey👋
&lt;/h2&gt;

&lt;p&gt;If you're looking for a pretty useful yet simple python project, you've come to the right place!&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#for-those-who-dont-know-what-a-pomodoro-timer-is"&gt;
  &lt;/a&gt;
  For those who don't know what a pomodoro timer is:
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;A pomodoro timer is a special type of timer used to increase productivity.&lt;/em&gt;&lt;br&gt;
It works something like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A pomodoro timer will give you ~25-30 minutes to work, then once you've finished working (thus completing 1 pomodoro), it will give you ~10 minutes to rest, then the timer will repeat the process.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;To get started with making a pomodoro timer in python, you'll first need to install the "plyer" library by running &lt;code&gt;pip install plyer&lt;/code&gt; or &lt;code&gt;pip3 install plyer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then import these 2 libraries at the beginning of your python file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import time
from plyer import notification
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, define the variable which will represent the amount of pomodoros completed by the user, as well as an indicator that the pomodoro timer has started:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import time
from plyer import notification

count = 0
print("The pomodoro timer has started, start working!")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#now-lets-make-the-actual-timer"&gt;
  &lt;/a&gt;
  Now let's make the actual timer!
&lt;/h3&gt;

&lt;p&gt;First, you'll need to put the timer in a &lt;code&gt;while True:&lt;/code&gt; loop nested inside an &lt;code&gt;if __name__ == "__main__":&lt;/code&gt; statement (if you're not familiar with it, here's a good explanation: &lt;a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do):"&gt;https://stackoverflow.com/questions/419163/what-does-if-name-main-do):&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if __name__ == "__main__":
    while True:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, make the first notification function which will notify the user when they've finished a pomodoro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if __name__ == "__main__":
    while True:
        notification.notify(
            title = "Good work!",
            message = "Take a 10 minute break! You have completed " + str(count) + " pomodoros so far",
        )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this "notify()" function notifies the user that he/she has finished a pomodoro, and it indicates how many pomodoros the user has finished so far with the "count" variable.&lt;/p&gt;




&lt;p&gt;Next, you'll need to create the "notify()" function which will notify the user once his/her 10 minutes of break time are over:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if __name__ == "__main__":
    while True:
        notification.notify(
            title = "Good work!",
            message = "Take a 10 minute break! You have completed " + str(count) + " pomodoros so far",
        )
        notification.notify(
            title = "Back to work!",
            message = "Try doing another pomodoro...",
        )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#your-pomodoro-timer-is-almost-finished"&gt;
  &lt;/a&gt;
  Your pomodoro timer is almost finished!
&lt;/h4&gt;

&lt;p&gt;The only things left to do are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set timeouts between the "notify()" functions.&lt;/li&gt;
&lt;li&gt;Increment the "count" variable every time the user finishes a pomodoro.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if __name__ == "__main__":
    while True:
        time.sleep(1800)
        count += 1
        notification.notify(
            title = "Good work!",
            message = "Take a 10 minute break! You have completed " + str(count) + " pomodoros so far",
        )
        time.sleep(600)
        notification.notify(
            title = "Back to work!",
            message = "Try doing another pomodoro...",
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#let-me-explain"&gt;
  &lt;/a&gt;
  Let me explain:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The first "time.sleep()" function waits 30 minutes(1800 seconds) before displaying the first notification, then before displaying the notification, the "count" variable is incremented since 30 minutes have passed, meaning that the user has done one pomodoro!&lt;/li&gt;
&lt;li&gt;Finally, the second "time.sleep()" function waits 10 minutes(600 seconds) before notifying the user that his/her 10 minute break is over.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#there-you-have-it"&gt;
  &lt;/a&gt;
  There you have it!
&lt;/h2&gt;

&lt;p&gt;If you put everything together, your pomodoro timer should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import time
from plyer import notification

count = 0
print("The pomodoro timer has started, start working!")

if __name__ == "__main__":
    while True:
        time.sleep(1800)
        count += 1
        notification.notify(
            title = "Good work!",
            message = "Take a 10 minute break! You have completed " + str(count) + " pomodoros so far",
        )
        time.sleep(600)
        notification.notify(
            title = "Back to work!",
            message = "Try doing another pomodoro...",
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Get the hottest programming stuff of the week in your inbox every Friday via &lt;a href="https://codejedi.substack.com/welcome"&gt;my newsletter&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Byeeeee👋 &lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>sideprojects</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Journey of a web page - How browsers work</title>
      <author>Paulo</author>
      <pubDate>Mon, 19 Jul 2021 09:04:55 +0000</pubDate>
      <link>https://dev.to/gitpaulo/journey-of-a-web-page-how-browsers-work-10co</link>
      <guid>https://dev.to/gitpaulo/journey-of-a-web-page-how-browsers-work-10co</guid>
      <description>&lt;p&gt;This article covers the processes that happen in-between a user entering a web address in a browser and a web page showing up as a result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;If you're like me—if you like to understand the tools you work with—I hope this article helps you learn something you did not know before. Let's get started!&lt;/p&gt;

&lt;p&gt;There are a handful of steps that occur between the time a user requests a web page and the time it displays in their browser. I've divided these steps into the following sections:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="#navigation"&gt;&lt;strong&gt;Navigation&lt;/strong&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Resolving the web address (URL)&lt;/li&gt;
&lt;li&gt;Establishing a connection to the server (TCP 3-way handshake)&lt;/li&gt;
&lt;li&gt;Establishing a security protocol (TLS negotiation)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#fetching"&gt;&lt;strong&gt;Fetching&lt;/strong&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;HTTP request&lt;/li&gt;
&lt;li&gt;HTTP response&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#parsing"&gt;&lt;strong&gt;Parsing&lt;/strong&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Building the DOM tree&lt;/li&gt;
&lt;li&gt;Building the CSSOM tree&lt;/li&gt;
&lt;li&gt;Combining the trees into the render tree&lt;/li&gt;
&lt;li&gt;Preload Scanner&lt;/li&gt;
&lt;li&gt;JavaScript Compilation&lt;/li&gt;
&lt;li&gt;Building the Accessibility Tree&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#rendering"&gt;&lt;strong&gt;Rendering&lt;/strong&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Layout&lt;/li&gt;
&lt;li&gt;Paint&lt;/li&gt;
&lt;li&gt;Compositing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#finalising"&gt;&lt;strong&gt;Finalising&lt;/strong&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Javascript Occupied.&lt;/li&gt;
&lt;li&gt;User can now browse the page!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Use this section to jump to any particular section of interest. However, if you're new to some of these concepts—stay here. It is time for a quick background lesson.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;This section contains a quick and general overview of the core background concepts that are required to understand the later parts of the article. You may skip this section if you're already familiar with them!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#networking-models"&gt;
  &lt;/a&gt;
  Networking models
&lt;/h3&gt;

&lt;p&gt;Models exist to explain how data is transmitted through a network. And there even exists a model so widely known that even those that do not partake in hackerman things might've heard of—we call it the Open Systems Interconnected (OSI) model. Here it goes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ACXWrtYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sx08iepkwc18o55nwx9s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ACXWrtYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sx08iepkwc18o55nwx9s.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.iso.org/ics/35.100/x/"&gt;The Open Systems Interconnection (OSI) model&lt;/a&gt; describes seven layers that computer systems use to communicate over a network. Each upper layer is one level of abstraction higher than the previous, all the way up to the application (browser) layer which we will be talking about.&lt;/p&gt;

&lt;p&gt;It’s important to note that the OSI model is a “conceptual model” for how applications communicate over a network. It is not a protocol. Do not get the two confused. Protocols are strict sets of rules that may live within these layers.&lt;/p&gt;

&lt;p&gt;An older and very similar model, and more relevant to the article, is the &lt;a href="https://en.wikipedia.org/wiki/Internet_protocol_suite"&gt;TCP/IP model&lt;/a&gt;. This model is used for both modelling current Internet architecture and providing a set of rules that are followed by all forms of transmission over the network.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JT8svLRj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4qicoy7basi6gd4joxr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JT8svLRj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4qicoy7basi6gd4joxr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will be referring to this model and its associated protocols throughout the article.&lt;/p&gt;

&lt;p&gt;As hinted at before, any data sent from an application to another will have to travel up and down through these layers a few numbers of times (depending on how many middle men there are). Of course, this happens incredibly fast nowadays, however, it still does happen and understanding the overview of the process is something that every developer should know. The following is an image representation of this process between a server and a client application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u7wLINLi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24o98vnamwefnr850216.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u7wLINLi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24o98vnamwefnr850216.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take our example, a user requesting to browse a page using a browser: the request is first sent to the application layer, where it is processed from layer to layer down with each layer performing its designated functions. The data is then transmitted over the physical layer of the network until the destination server or another device receives it. At this point the data is passed up through the layers again, each layer performing its assigned operations until the data is used by the web server software. This process is repeated again for the response of the server. This is how machines communicate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#highlevel-abstraction-of-a-browser"&gt;
  &lt;/a&gt;
  High-level abstraction of a browser
&lt;/h3&gt;

&lt;p&gt;The later sections of the article will be covering how a typical browser displays the content of the page on the screen. A high-level understanding of the browser is important when reading those sections. I will be referencing some of the following browser components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;The user interface:&lt;/strong&gt; this includes the address bar, back/forward button, bookmarking menu, etc. Every part of the browser display except the window where you see the requested page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The browser engine:&lt;/strong&gt; marshals actions between the UI and the rendering engine.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The rendering engine:&lt;/strong&gt; responsible for displaying requested content. For example, if the requested content is HTML, the rendering engine parses HTML and CSS, and displays the parsed content on the screen.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Networking:&lt;/strong&gt; for network calls such as HTTP requests, using different implementations for different platforms behind a platform-independent interface.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UI backend:&lt;/strong&gt; used for drawing basic widgets like combo boxes and windows. This backend exposes a generic interface that is not platform-specific. Underneath it uses operating system user interface methods.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;JavaScript interpreter:&lt;/strong&gt; Used to parse and execute JavaScript code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Data storage:&lt;/strong&gt; This is a persistence layer. The browser may need to save all sorts of data locally, such as cookies. Browsers also support storage mechanisms such as localStorage, IndexedDB, WebSQL and FileSystem.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cONYVUsU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivei7zfohim9n6l83bbk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cONYVUsU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivei7zfohim9n6l83bbk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is important to note that browsers such as Chrome have a multi-process approach for performance and security reasons. This means that they run instances of some of these components, such as the rendering engine, for each tab (each tab is a separate process). You can find proof of this by checking chrome's processes in a task manager.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n3eKu4Nw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wv6sub7wk7fxyi25j1yh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n3eKu4Nw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wv6sub7wk7fxyi25j1yh.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As you can see each tabe has a process priority and CPU/Network/GPU statistics implying that they work like normal processes. Indeed they do. You can further confirm this by listing your OS's tasks and you will find them.&lt;/p&gt;

&lt;p&gt;Finally, it is also important to note that what you just read so far in this background section is a very high-level generalisation of how networks and browsers work. Not all networks strictly abide by the OSI/TCP IP models and the main browsers in use today are all different in their own ways but share a common base of concepts that allows us to abstract them to what you've just read. For browsers, this is because they all follow (to some degree) the specifications maintained by the &lt;a href="https://www.w3.org/"&gt;W3C (World Wide Web Consortium) organization&lt;/a&gt;, which is the standards organization for the web. As an example, their rendering engines are different, Internet Explorer uses Trident, Firefox uses Gecko, Safari uses WebKit. Chrome, Edge and Opera use Blink, a fork of WebKit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#journey-of-a-page"&gt;
  &lt;/a&gt;
  Journey of a page
&lt;/h2&gt;

&lt;p&gt;You open up a browser and type in &lt;a href="http://www.google.com"&gt;www.google.com&lt;/a&gt;. This is what happens.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#navigation"&gt;
  &lt;/a&gt;
  Navigation
&lt;/h3&gt;

&lt;p&gt;The first step is navigating to the correct place. Navigating to a web page is finding where the assets for that page are located. To us, web pages are simply domain names, but to computers they resolve into IP addresses. If you navigate to &lt;a href="http://www.google.com"&gt;www.google.com&lt;/a&gt;, the page resources will be located on a server with an IP address such as 93.184.216.34 (of sorts). If you’ve never visited this site, a Domain Name System (DNS) lookup must happen.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#round-trip-time"&gt;
  &lt;/a&gt;
  Round Trip Time
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Round-trip_delay"&gt;Round-trip time (RTT)&lt;/a&gt; is the duration, measured in milliseconds, from when a browser sends a request to when it receives a response from a server. It's a key performance metric for web applications and one of the main factors, along with &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/time_to_first_byte"&gt;Time to First Byte (TTFB)&lt;/a&gt;, when measuring page load time and network latency.&lt;/p&gt;

&lt;p&gt;I will be annotating each network process with their corresponding RTT.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#resolving-a-web-address-the-dns-process-o-rtt"&gt;
  &lt;/a&gt;
  Resolving a web address - The DNS Process (O RTT)
&lt;/h4&gt;

&lt;p&gt;An overview of the DNS process for &lt;code&gt;www.google.com&lt;/code&gt; is as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check browser &amp;amp; OS cache, return if IP found.&lt;/li&gt;
&lt;li&gt;Browser sends out a request asking for a DNS resolver. 

&lt;ol&gt;
&lt;li&gt;DNS resolver checks its cache, return if IP is found.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;DNS resolver sends out a request asking root nameservers.&lt;/li&gt;
&lt;li&gt;A root nameserver responds to the DNS resolver with an IP address to a TLD nameserver (in this case the TLD for extensions of &lt;code&gt;.com&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;DNS resolver sends out another request, now to the TLD nameserver, asking if they know what the IP is.&lt;/li&gt;
&lt;li&gt;TLD nameserver responds back to the DNS resolver with an IP of the authoritative nameserver.&lt;/li&gt;
&lt;li&gt;DNS resolver sends out the final request to the authoritative nameserver asking for the IP.&lt;/li&gt;
&lt;li&gt;The authoritative nameserver will scan zones files to find the domainname:ipaddress mapping and will return whether it exists or not to the DNS resolver.&lt;/li&gt;
&lt;li&gt;Finally, the DNS resolver will now respond back to the browser with the IP of the server the browser is trying to communicate.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l9SEiwNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hglrqe8nj9us42fuxs8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l9SEiwNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hglrqe8nj9us42fuxs8d.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Note that this process is usually incredibly fast and rarely follows through in its entirety because of all the layers of caching. It was designed to be fast!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#establishing-a-connection-to-the-server-tcp-handshake-1-rtt"&gt;
  &lt;/a&gt;
  Establishing a connection to the server - TCP Handshake (1 RTT)
&lt;/h4&gt;

&lt;p&gt;Now that the IP address is known, the browser sets up a connection to the server via a &lt;a href="https://www.sciencedirect.com/topics/computer-science/three-way-handshake"&gt;TCP three-way handshake&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol"&gt;TCP&lt;/a&gt; uses a three-way handshake to establish a reliable connection. The connection is full-duplex, and both sides synchronize (SYN) and acknowledge (ACK) each other. The exchange of these four flags is performed in three steps—SYN, SYN-ACK, and ACK—as shown in&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KhenfJDf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn8y466ruwdfllwwtaig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KhenfJDf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn8y466ruwdfllwwtaig.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client chooses an initial sequence number, set in the first SYN packet. &lt;/li&gt;
&lt;li&gt;The server also chooses its own initial sequence number. &lt;/li&gt;
&lt;li&gt;Each side acknowledges the other's sequence number by incrementing it; this is the acknowledgement number.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once a connection is established, ACKs typically follow for each segment. The connection will eventually end with an RST (reset or tear down the connection) or FIN (gracefully end the connection).&lt;/p&gt;

&lt;p&gt;This mechanism is designed so that two entities attempting to communicate, in this case, the browser and web server, can negotiate the parameters of the network TCP socket connection before transmitting data, in our case, it will be over HTTPS—the secure version of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP"&gt;HTTP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;HTTPS is HTTP with encryption. The only difference between the two protocols is that HTTPS uses &lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security"&gt;TLS (SSL)&lt;/a&gt; to encrypt normal HTTP requests and responses. As a result, HTTPS provides a solid layer of security over HTTP. A website that uses HTTP has &lt;code&gt;http://&lt;/code&gt; in its URL, while a website that uses HTTPS has &lt;code&gt;https://&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#establishing-a-security-protocol-tls-negotiation-2-rtt"&gt;
  &lt;/a&gt;
  Establishing a security protocol - TLS Negotiation (~2 RTT)
&lt;/h4&gt;

&lt;p&gt;For secure connections established over HTTPS, another "handshake" is required. This handshake, or rather the TLS negotiation, determines which cypher will be used to encrypt the communication, verifies the server, and establishes that a secure connection is in place before beginning the actual transfer of data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8I5bXx9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muxmc254vu339latlf61.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8I5bXx9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muxmc254vu339latlf61.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;While making the connection secure adds time to the page load, a secure connection is worth the latency expense, as the data transmitted between the browser and the web server cannot normally be decrypted by a third party. TLS has come a long way and version 1.3 upwards has reduced the Round Trip Time (RTT) from 4 all the way to 2 or even 1 depending on the situation.&lt;/p&gt;

&lt;p&gt;Assuming DNS is instantaneous and adding in the HTTP fetch RTT (next section), this leaves 4 round trips before the browser can start showing the page. If you’re visiting a site you’ve recently connected to, the TLS handshake phase can be shortened from 2 round trips to 1 with TLS session resumption.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New Connection: 4 RTT + DNS&lt;/li&gt;
&lt;li&gt;Resumed Connection: 3 RTT + DNS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fetching"&gt;
  &lt;/a&gt;
  Fetching
&lt;/h3&gt;

&lt;p&gt;Now that we have a TCP connection setup and the TLS exchange has been completed, the browser can now begin to fetch the page's resources. It starts by fetching the markup document for the page. It does this by using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP"&gt;HTTP protocol&lt;/a&gt;. HTTP requests are sent via TCP/IP and in our case encrypted with Transport Layer Security (TLS)—since google uses HTTPS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#http-request"&gt;
  &lt;/a&gt;
  HTTP Request
&lt;/h4&gt;

&lt;p&gt;To fetch a page an &lt;a href="https://www.restapitutorial.com/lessons/idempotency.html"&gt;idempotent&lt;/a&gt; (not changing the server state) request is made. We use the HTTP GET request.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;GET&lt;/code&gt;—Requests information from a given server using a &lt;a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier"&gt;Uniform Resource Identifier (URI)&lt;/a&gt;. GET requests only retrieve data and do not cause changes in state. No matter how many times you request the same resource, you will never cause a change in state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are other idempotent request types (PUT, DELETE) and not idempotent (POST, ...). They don't matter for fetching pages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET / HTTP/2
Host: www.google.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-GB,en;q=0.5
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Upgrade-Insecure-Requests: 1
Cache-Control: max-age=0
TE: Trailers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#http-response"&gt;
  &lt;/a&gt;
  HTTP Response
&lt;/h4&gt;

&lt;p&gt;Once the webserver receives the request. It will parse the request and try to fulfil it. We assume the request is valid and the files are available. It will reply with an HTPP response attaching the relevant response headers and the contents of the HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HTTP/2 200 OK
date: Sun, 18 Jul 2021 00:26:11 GMT
expires: -1
cache-control: private, max-age=0
content-type: text/html; charset=UTF-8
strict-transport-security: max-age=31536000
content-encoding: br
server: gws
content-length: 37418
x-xss-protection: 0
x-frame-options: SAMEORIGIN
domain=www.google.com
priority=high
X-Firefox-Spdy: h2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*the source code of the HTML document will be in the body of the response.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parsing"&gt;
  &lt;/a&gt;
  Parsing
&lt;/h3&gt;

&lt;p&gt;Once the browser receives the response, it can begin parsing the information received. Parsing is the step the browser takes to turn the data it receives over the network into the DOM and CSSOM, which is used by the renderer to paint a page to the screen.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Document_Object_Model"&gt;Document Object Model (DOM)&lt;/a&gt; is an internal representation of the objects that comprise the structure and content of the markup (HTML in this case) document the browser just received. It represents the page so that programs can change the document structure, style, and content. &lt;/p&gt;

&lt;p&gt;The DOM represents the document as nodes and objects. That way, programming languages can connect to the page. There are many different types of nodes in a DOM tree. An example part of the specification for the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Node"&gt;DOM Node Interface&lt;/a&gt; looks as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Node.ELEMENT_NODE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node.ATTRIBUTE_NODE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node.TEXT_NODE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node.CDATA_SECTION_NODE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node.PROCESSING_INSTRUCTION_NODE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node.COMMENT_NODE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node.DOCUMENT_NODE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node.DOCUMENT_TYPE_NODE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node.DOCUMENT_FRAGMENT_NODE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node.NOTATION_NODE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These node types cover all possible nodes in the document. Such representations help programming languages connect to the page so that they can manipulate it.&lt;/p&gt;

&lt;p&gt;To conclude our parsing preface, we need to talk about the CSSOM. &lt;/p&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model"&gt;CSS Object Model (CSSOM)&lt;/a&gt; is a set of APIs allowing the manipulation of CSS from JavaScript. It is much like the DOM, but for the CSS rather than the HTML. It allows users to read and modify CSS style dynamically. It is represented very similarly to the DOM, as a tree, and it will be used along with the DOM to form a render tree so that the browser can begin its rendering process. Let's find out how by going through the entire process.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#building-the-dom-tree"&gt;
  &lt;/a&gt;
  Building the DOM tree
&lt;/h4&gt;

&lt;p&gt;The first step is processing the HTML markup and building the DOM tree. HTML parsing involves tokenization and tree construction. &lt;/p&gt;

&lt;p&gt;HTML may come as a surprise in the world of parsing as it cannot be parsed through conventional means as it cannot be defined by a &lt;a href="https://en.wikipedia.org/wiki/Context-free_grammar"&gt;Context Free Grammar (CFG)&lt;/a&gt;. Instead, there is a formal format for defining HTML which is called the &lt;a href="https://en.wikipedia.org/wiki/Document_type_definition"&gt;Document Type Definition (DTD)&lt;/a&gt;. I will not be going too much into detail about how this is done but main the reasons for this are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The forgiving nature of the language.&lt;/li&gt;
&lt;li&gt;The fact that browsers have traditional error tolerance to support well known cases of invalid HTML.&lt;/li&gt;
&lt;li&gt;The parsing process is reentrant. For other languages, the source doesn't change during parsing, but in HTML, dynamic code (such as script elements containing document.write() calls) can add extra tokens, so the parsing process actually modifies the input.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unable to use the regular parsing techniques, browsers create custom parsers for parsing HTML.&lt;/p&gt;

&lt;p&gt;The parsing algorithm is described in detail by the &lt;a href="https://html.spec.whatwg.org/multipage/parsing.html"&gt;HTML5 specification&lt;/a&gt;. The algorithm consists of two stages: tokenization and tree construction.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Tokenization&lt;/strong&gt; is the lexical analysis, parsing the input into tokens. Among HTML tokens are start tags, end tags, attribute names and attribute values.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Tree construction&lt;/strong&gt; is essentially creating a tree based of the parsed tokens and what we will be focusing on—The DOM tree.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The DOM tree describes the content of the document. The &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element is the first tag and root node of the document tree. The tree reflects the relationships and hierarchies between different tags. Tags nested within other tags are child nodes. The greater the number of DOM nodes, the longer it takes to construct the DOM tree. Below you can find a visual representation of the DOM tree—The output of the parser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o22o5uQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2ovvtmkybu182f1ak2b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o22o5uQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2ovvtmkybu182f1ak2b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the parser finds non-blocking resources, such as an image, the browser will request those resources and continue parsing. Parsing can continue when a CSS file is encountered, but &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags—particularly those without an async or defer attribute—block rendering, and pause the parsing of HTML. Though the browser's preload scanner hastens this process, excessive scripts can still be a significant bottleneck.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#building-the-cssom-tree"&gt;
  &lt;/a&gt;
  Building the CSSOM tree
&lt;/h4&gt;

&lt;p&gt;The second step is processing CSS and building the CSSOM tree. In a similar fashion to the DOM parsing phase, the browser goes through each rule set in the CSS, creating a tree of nodes with parent, child, and sibling relationships based on the CSS selectors.&lt;/p&gt;

&lt;p&gt;In regards to parsing, well, unlike HTML, CSS is a context free grammar and can be parsed using regular CFG parsing techniques. In fact the &lt;a href="https://www.w3.org/TR/CSS21/grammar.html"&gt;CSS specification defines CSS lexical and syntax grammar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As with HTML, the browser needs to convert the received CSS rules into something it can work with. From there, it repeats the HTML-to-object process, but for the CSS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#combining-the-trees-into-the-render-tree"&gt;
  &lt;/a&gt;
  Combining the trees into the render tree
&lt;/h4&gt;

&lt;p&gt;The CSSOM and DOM trees are combined into a render tree, which is then used to compute the layout of each visible element and serves as an input to the paint process that renders the pixels to screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EC1yfdjR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6lpm4e05fws0naziz4p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EC1yfdjR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6lpm4e05fws0naziz4p.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To construct the render tree, the browser roughly does the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Starting at the root of the DOM tree, traverse each visible node.

&lt;ul&gt;
&lt;li&gt;Some nodes are not visible (for example, script tags, meta tags, and so on), and are omitted since they are not reflected in the rendered output.&lt;/li&gt;
&lt;li&gt;Some nodes are hidden via CSS and are also omitted from the render tree; for example, the span node—in the example above—is missing from the render tree because we have an explicit rule that sets the "display: none" property on it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For each visible node, find the appropriate matching CSSOM rules and apply them.&lt;/li&gt;
&lt;li&gt;Emit visible nodes with content and their computed styles. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The final output is a render that contains both the content and style information of all the visible content on the screen. With the render tree in place, we can proceed to the "layout" stage.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#preload-scanner"&gt;
  &lt;/a&gt;
  Preload Scanner
&lt;/h4&gt;

&lt;p&gt;While the browser's main thread is busing building the DOM tree it has a helper worker scan through the content available. This helper is the &lt;a href="https://ariya.io/2013/04/css-preload-scanner-in-webkit"&gt;preload scanner&lt;/a&gt; and will prepare high priority fetch request for resources like CSS, JavaScript, and web fonts. This is an optimization added over the parsing stage as it would take far too long to make these requests as the parser finds references to them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"styles.css"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"myscript.js"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"myimage.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"image description"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"anotherscript.js"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Taking the example above, the preload scanner will try to find the scripts and images, and start downloading them. There are ways to communicate to the preload scanner via the html—the attributes: &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;async&lt;/code&gt;: When present, it specifies that the script will be executed asynchronously as soon as it is available.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;defer&lt;/code&gt;: When present, it specifies that the script is executed when the page has finished parsing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Waiting to obtain CSS doesn't block HTML parsing or downloading, but it does block JavaScript, because JavaScript is often used to query CSS properties’ impact on elements.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#javascript-compilation"&gt;
  &lt;/a&gt;
  JavaScript Compilation
&lt;/h4&gt;

&lt;p&gt;While the CSS is being parsed and the CSSOM created, other assets, including JavaScript files, are downloading (thanks to the preload scanner). JavaScript is interpreted, compiled, parsed and executed. The scripts are parsed into &lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;abstract syntax trees&lt;/a&gt;. Some browser engines take the Abstract Syntax Tree and pass it into an interpreter, outputting bytecode which is executed on the main thread. This is known as JavaScript compilation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#building-the-accessibility-tree"&gt;
  &lt;/a&gt;
  Building the Accessibility Tree
&lt;/h4&gt;

&lt;p&gt;The browser also builds an accessibility tree that assistive devices use to parse and interpret content. The &lt;a href="https://wicg.github.io/aom/explainer.html"&gt;accessibility object model (AOM)&lt;/a&gt; is like a semantic version of the DOM. The browser updates the accessibility tree when the DOM is updated. The accessibility tree is not modifiable by assistive technologies themselves.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QoKHXBl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4e181v8hq7vmuvdegh5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QoKHXBl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4e181v8hq7vmuvdegh5.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Until the AOM is built, the content is not accessible to screen readers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rendering"&gt;
  &lt;/a&gt;
  Rendering
&lt;/h3&gt;

&lt;p&gt;Now that the information has been parsed the browser can begin to display it. To achieve this the browser will now use the render tree to produce a visual representation of the document. Rendering steps include layout, paint and, in some cases, compositing. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#layout"&gt;
  &lt;/a&gt;
  Layout
&lt;/h4&gt;

&lt;p&gt;Layout is the rendering stage where the geometry and positioning of the render tree nodes are determined.&lt;/p&gt;

&lt;p&gt;Once the render tree is built, the layout commences. Layout is a recursive process. It begins at the root renderer, which corresponds to the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element of the HTML document. Layout continues recursively through some or all of the frame hierarchy, computing geometric information for each renderer that requires it. The layout usually has the following pattern:&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#dirty-bit-system"&gt;
  &lt;/a&gt;
  Dirty bit system
&lt;/h5&gt;

&lt;p&gt;In order not to do a full layout for every small change, browsers use a "dirty bit" system. A renderer that is changed or added marks itself and its children as "dirty": needing layout.&lt;/p&gt;

&lt;p&gt;There are two flags: &lt;br&gt;
    - &lt;strong&gt;dirty:&lt;/strong&gt; node needs a layout.&lt;br&gt;
    - &lt;strong&gt;children are dirty:&lt;/strong&gt; node has at least one child that needs a layout.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#overview-of-layout-process"&gt;
  &lt;/a&gt;
  Overview of layout process
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Parent node determines its own width.&lt;/li&gt;
&lt;li&gt;Parent goes over children and:

&lt;ol&gt;
&lt;li&gt;Calculate child render's size&lt;/li&gt;
&lt;li&gt;Calls child layout if they have a dirty descendant&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Parent uses children's accumulative heights and the heights of margins and padding to set its own height–this will be used by the parent renderer's parent.&lt;/li&gt;
&lt;li&gt;Sets its dirty bit to false.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An added important concept is that of &lt;em&gt;reflow&lt;/em&gt;. As previously mentioned, the first time the size and position of nodes are determined is called &lt;em&gt;layout&lt;/em&gt;. Subsequent recalculations of node size and locations are called reflows. As an example, suppose the initial layout occurs before the image is returned. Since we didn't declare the size of our image, there will be a reflow once the image size is known.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#paint"&gt;
  &lt;/a&gt;
  Paint
&lt;/h4&gt;

&lt;p&gt;The third and last stage of rendering. In this painting phase, the browser converts each box calculated in the layout phase to actual pixels on the screen. Painting involves drawing every visual part of an element to the screen, including text, colours, borders, shadows, and replaced elements like buttons and images. The browser needs to do this super quickly.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#painting-order"&gt;
  &lt;/a&gt;
  Painting order
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://www.w3.org/TR/CSS21/zindex.html"&gt;CSS2 defines the order of the painting process&lt;/a&gt;. This is actually the order in which the elements are stacked in the stacking contexts. This order affects painting since the stacks are painted from back to front. The stacking order of a block renderer is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;background colour&lt;/li&gt;
&lt;li&gt;background image&lt;/li&gt;
&lt;li&gt;border&lt;/li&gt;
&lt;li&gt;children&lt;/li&gt;
&lt;li&gt;outline&lt;/li&gt;
&lt;/ol&gt;

&lt;h5&gt;
  &lt;a href="#paint-layers"&gt;
  &lt;/a&gt;
  Paint Layers
&lt;/h5&gt;

&lt;p&gt;Painting can break the elements in the layout tree into layers. Promoting content into layers on the GPU (instead of the main thread on the CPU) improves paint and repaint performance. There are specific properties and elements that instantiate a layer, including &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;, and any element which has the CSS properties of opacity, a 3D transform, will-change, and a few others. These nodes will be painted onto their own layer, along with their descendants, unless a descendant necessitates its own layer for one (or more) of the above reasons.&lt;/p&gt;

&lt;p&gt;Layers do improve performance but are expensive when it comes to memory management, so should not be overused as part of web performance optimization strategies.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#compositing"&gt;
  &lt;/a&gt;
  Compositing
&lt;/h4&gt;

&lt;p&gt;When sections of the document are drawn in different layers, overlapping each other, compositing is necessary to ensure they are drawn to the screen in the right order and the content is rendered correctly.&lt;/p&gt;

&lt;p&gt;As the page continues to load assets, reflows can happen (recall our example image that arrived late).  A reflow sparks a repaint and a re-composite. Had we defined the size of our image, no-reflow would have been necessary, and only the layer that needed to be repainted would be repainted, and composited if necessary. But we didn't include the image size! When the image is obtained from the server, the rendering process goes back to the layout steps and restarts from there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finalising"&gt;
  &lt;/a&gt;
  Finalising
&lt;/h3&gt;

&lt;p&gt;Once the main thread is done painting the page, you would think we would be "all set." That isn't necessarily the case. If the load includes JavaScript, which was correctly deferred, and only executed after the onload event fires, the main thread might be busy, and not available for scrolling, touch, and other interactions.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#javascript-occupied"&gt;
  &lt;/a&gt;
  Javascript Occupied
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://web.dev/interactive/"&gt;Time to Interactive (TTI)&lt;/a&gt; is the measurement of how long it took from that first request which led to the DNS lookup and SSL connection to when the page is interactive—interactive being the point in time after the &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/First_contentful_paint"&gt;First Contentful Paint&lt;/a&gt; when the page responds to user interactions within 50ms. If the main thread is occupied parsing, compiling, and executing JavaScript, it is not available and therefore not able to respond to user interactions in a timely (less than 50ms) fashion.&lt;/p&gt;

&lt;p&gt;In our example, maybe the image loaded quickly, but perhaps the anotherscript.js file was 2MB and our user's network connection was slow.  In this case, the user would see the page super quickly, but wouldn't be able to scroll without jank until the script was downloaded, parsed and executed. That is not a good user experience. Avoid occupying the main thread, as demonstrated in this WebPageTest example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1V0GkrV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xbkoby5bedm789lskzyb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1V0GkrV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xbkoby5bedm789lskzyb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, the DOM content load process took over 1.5 seconds, and the main thread was fully occupied that entire time, unresponsive to click events or screen taps.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-user-can-now-browse-the-page"&gt;
  &lt;/a&gt;
  The user can now browse the page! 🎉
&lt;/h4&gt;

&lt;p&gt;Yes, after all these stages the user can now both see and interact with the page!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;For a simple page to be displayed in our browser window it may need to go through:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DNS Lookup: To find out the ip of the web address.&lt;/li&gt;
&lt;li&gt;TCP Handshake: To set up TCP/IP communication between the client and server for the susbsequent steps.&lt;/li&gt;
&lt;li&gt;TLS Handshake: To safeguard the information that will be sent via encryption.&lt;/li&gt;
&lt;li&gt;HTTP communication: To establish a method of communication that browsers can understand.&lt;/li&gt;
&lt;li&gt;Browser Parsing: To parse the HTTP's response—the document of the page to be displayed.&lt;/li&gt;
&lt;li&gt;Browser Rendering: To render the document on the browsers window.&lt;/li&gt;
&lt;li&gt;Javascript Occupied: To wait for JS to compile and execute as it may hog the main thread.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is incredible the number of things that happen for this seemingly simple task to be accomplished. Truly an impressive journey for our little page :)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#there-is-more"&gt;
  &lt;/a&gt;
  There is more...
&lt;/h4&gt;

&lt;p&gt;In a real-world scenario, our little page may have to tackle even more obstacles before reaching its destination things such as: &lt;a href="https://www.nginx.com/resources/glossary/load-balancing/"&gt;load balancers, proxies&lt;/a&gt;, &lt;a href="https://www.nginx.com/resources/glossary/what-is-a-waf/"&gt;multiple layers of firewalls&lt;/a&gt;, etc... &lt;/p&gt;

&lt;p&gt;These topics are beasts of their own and if you're curious about how they work I recommend looking them up! Perhaps i'll write something for them in the future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading,&lt;br&gt;
Paulo 😎&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work#overview"&gt;https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work#overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork"&gt;https://www.html5rocks.com/en/tutorials/internals/howbrowserswork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/fundamentals/"&gt;https://developers.google.com/web/fundamentals/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.cloudflare.com/introducing-0-rtt/"&gt;https://blog.cloudflare.com/introducing-0-rtt/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.cloudflare.com/keyless-ssl-the-nitty-gritty-technical-details/"&gt;https://blog.cloudflare.com/keyless-ssl-the-nitty-gritty-technical-details/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.fs.com/blog/tcpip-vs-osi-whats-the-difference-between-the-two-models.html"&gt;https://community.fs.com/blog/tcpip-vs-osi-whats-the-difference-between-the-two-models.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sciencedirect.com/topics/computer-science/three-way-handshake"&gt;https://www.sciencedirect.com/topics/computer-science/three-way-handshake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>architecture</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Integrate an Application with Prometheus Operator and Package with a Helm Chart</title>
      <author>Julien Acroute</author>
      <pubDate>Mon, 19 Jul 2021 08:59:28 +0000</pubDate>
      <link>https://dev.to/camptocamp-ops/integrate-an-application-with-prometheus-operator-and-package-with-a-helm-chart-1159</link>
      <guid>https://dev.to/camptocamp-ops/integrate-an-application-with-prometheus-operator-and-package-with-a-helm-chart-1159</guid>
      <description>&lt;p&gt;In the previous posts, we saw:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how to implement metrics in applications&lt;/li&gt;
&lt;li&gt;how to run the monitoring stack locally&lt;/li&gt;
&lt;li&gt;how to test and debug metrics generated by a simple Python Flask application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post we will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use Kubernetes Custom Resources to integrate our application with the Prometheus Operator&lt;/li&gt;
&lt;li&gt;define some alerts based on the metrics generated by the application&lt;/li&gt;
&lt;li&gt;deploy a custom dashboard in Grafana&lt;/li&gt;
&lt;li&gt;package everything in a Helm chart, including a Grafana dashboard&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#connect-prometheus-to-your-application"&gt;
  &lt;/a&gt;
  Connect Prometheus to your Application
&lt;/h2&gt;

&lt;p&gt;Prometheus will retrieve metrics from &lt;em&gt;Pods&lt;/em&gt; with a &lt;code&gt;/metrics&lt;/code&gt; HTTP endpoint. If the Prometheus Operator is deployed in your Kubernetes Cluster, the discovery of the &lt;em&gt;Pods&lt;/em&gt; is done by deploying one of the following custom Kubernetes objects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#servicemonitor"&gt;&lt;em&gt;ServiceMonitor&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#podmonitor"&gt;&lt;em&gt;PodMonitor&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#using-servicemonitor"&gt;
  &lt;/a&gt;
  Using &lt;em&gt;ServiceMonitor&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;When a &lt;em&gt;ServiceMonitor&lt;/em&gt; object is deployed, Prometheus will create one target per address defined in the &lt;em&gt;Endpoints&lt;/em&gt; object linked to the &lt;em&gt;Service&lt;/em&gt;. This means every &lt;em&gt;Pod&lt;/em&gt; is in a ready status used by the &lt;em&gt;Service&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For example, if you have the following &lt;em&gt;Service&lt;/em&gt; and &lt;em&gt;Deployment&lt;/em&gt; in your cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webapp&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
    &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterIP&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http&lt;/span&gt;
    &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
    &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
    &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webapp&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
    &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webapp&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
    &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
      &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
        &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ghcr.io/camptocamp/course_docker_backend:python&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webapp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As defined in the &lt;em&gt;Deployment&lt;/em&gt;’s &lt;code&gt;spec.template.metadata.labels&lt;/code&gt; field, &lt;em&gt;Pods&lt;/em&gt; will have the following labels: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;component: backend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instance: app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name: containers-my-app&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;em&gt;Service&lt;/em&gt; has a selector that matches labels of the &lt;em&gt;Pod&lt;/em&gt;. Therefore the &lt;em&gt;Service&lt;/em&gt; will load balance traffic to &lt;em&gt;Pods&lt;/em&gt; deployed by the &lt;em&gt;Deployment&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ServiceMonitor&lt;/em&gt; objects also use a selector to discover which &lt;em&gt;Services&lt;/em&gt; need to be monitored. Prometheus will scrape metrics from every &lt;em&gt;Pods&lt;/em&gt; behind selected &lt;em&gt;Services&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For example, to retrieve metrics from our &lt;em&gt;Pods&lt;/em&gt;, we can deploy the following &lt;em&gt;ServiceMonitor&lt;/em&gt; object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;monitoring.coreos.com/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ServiceMonitor&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webapp&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
    &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
    &lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;namespaceSelector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchNames&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
      &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
  &lt;span class="na"&gt;endpoints&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Prometheus Operator will search for &lt;em&gt;Services&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in the &lt;code&gt;my-app&lt;/code&gt; namespace,&lt;/li&gt;
&lt;li&gt;with the following labels:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;component: backend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instance: app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name: containers-my-app&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;with a port named: &lt;code&gt;http&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will then use the &lt;em&gt;Service&lt;/em&gt; selector to find &lt;em&gt;Pods&lt;/em&gt;. As a result, one target per &lt;em&gt;Pod&lt;/em&gt; will be created in the Prometheus configuration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-podmonitor"&gt;
  &lt;/a&gt;
  Using &lt;em&gt;PodMonitor&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;PodMonitor&lt;/em&gt; objects use a selector to find &lt;em&gt;Pods&lt;/em&gt; directly. No &lt;em&gt;Service&lt;/em&gt; needs to be deployed.&lt;/p&gt;

&lt;p&gt;For our &lt;em&gt;Pods&lt;/em&gt;, we can use the following &lt;em&gt;PodMonitor&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;monitoring.coreos.com/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PodMonitor&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webapp&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;acomponent&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
    &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
    &lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;namespaceSelector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchNames&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
      &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
  &lt;span class="na"&gt;podMetricsEndpoints&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webapp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Prometheus operator will search for &lt;em&gt;Pods&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in the &lt;code&gt;my-app&lt;/code&gt; namespace,&lt;/li&gt;
&lt;li&gt;with the following labels:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;component: backend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instance: app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name: containers-my-app&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;with a port named: &lt;code&gt;webapp&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each &lt;em&gt;Pod&lt;/em&gt;, a new target will be added to the Prometheus configuration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-alerts"&gt;
  &lt;/a&gt;
  Configure Alerts
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#why-use-alerts"&gt;
  &lt;/a&gt;
  Why use Alerts?
&lt;/h3&gt;

&lt;p&gt;Gathering and storing metrics is very useful to investigate when something goes wrong. But there are often some modifications of one or a combination of metrics before a service becomes completely unusable.&lt;/p&gt;

&lt;p&gt;A common example of this is remaining free disk space. Fixing hard thresholds with arbitrary values on disk space is usually inefficient (you might actually end up with 95%, 100% and 101% thresholds). What needs to be monitored is actually the estimated time left until the disk is full, which can be obtained by running &lt;a href="https://prometheus.io/docs/prometheus/latest/querying/functions/#predict_linear"&gt;a time regression on the metric&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some other examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For an online store, having no purchases during the afternoon is unusual, maybe there is an issue that blocks users in the payment process.&lt;/li&gt;
&lt;li&gt;If the ratio of HTTP responses with code 500 suddenly increases, investigation is needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the purpose of alerts: when such events are detected, the system notifies the right person, allowing you to keep your eyes off dashboards.&lt;/p&gt;

&lt;p&gt;After investigating and finding the root cause, you should always ask yourself if you can build an alert to detect such a case. There is also the possibility of increasing the observability if some metrics are missing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-define-alerts"&gt;
  &lt;/a&gt;
  How to define Alerts?
&lt;/h3&gt;

&lt;p&gt;The Prometheus Operator allows the definition of alerts with a custom Kubernetes object: &lt;a href="https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#prometheusrule"&gt;&lt;em&gt;PrometheusRule&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this custom resource, you can define multiple alerts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;monitoring.coreos.com/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PrometheusRule&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webapp&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
    &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kube-prometheus-stack&lt;/span&gt;
    &lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;groups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
      &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;alert&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;NoProductViewSince1h&lt;/span&gt;
          &lt;span class="na"&gt;expr&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;(view_total - view_total offset 1h) &amp;lt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
          &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;5m&lt;/span&gt;
          &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;severity&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Critical&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, only one alert is defined. &lt;/p&gt;

&lt;p&gt;Find below what needs to be defined for usual cases for each alert:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;alert&lt;/code&gt;: the alert name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;expr&lt;/code&gt;: a PromQL expression that triggers an alert if it returns something. This is why most of the time a threshold is used. With the &lt;code&gt;offset&lt;/code&gt; function we compute the views from the past hour, if the result is above the threshold &lt;code&gt;1&lt;/code&gt;, then an alert is created and pushed to AlertManager.&lt;/li&gt;
&lt;li&gt;Optional &lt;code&gt;labels&lt;/code&gt;: a set of labels, usually used for alert severity&lt;/li&gt;
&lt;li&gt;Optional &lt;code&gt;for&lt;/code&gt;: delays triggering the alert. The PromQL expression must return some sample during the duration of the field &lt;code&gt;for&lt;/code&gt;, before an alert is triggered.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#troubleshooting"&gt;
  &lt;/a&gt;
  Troubleshooting
&lt;/h2&gt;

&lt;p&gt;There are many selectors involved in this process: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;selector on &lt;em&gt;ServiceMonitor&lt;/em&gt; to find &lt;em&gt;Services&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;selector on &lt;em&gt;Service&lt;/em&gt; to find &lt;em&gt;Pods&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;selector on &lt;em&gt;PodMonitor&lt;/em&gt; to find &lt;em&gt;Pods&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also selectors to discover &lt;em&gt;ServiceMonitor&lt;/em&gt;, &lt;em&gt;PodMonitor&lt;/em&gt;, and &lt;em&gt;PrometheusRule&lt;/em&gt; objects. Those selectors are defined in the &lt;em&gt;Prometheus&lt;/em&gt; object using the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Discovery of &lt;em&gt;ServiceMonitor&lt;/em&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spec.serviceMonitorSelector&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.serviceMonitorNamespaceSelector&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Discovery of &lt;em&gt;PodMonitor&lt;/em&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spec.podMonitorSelector&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.podMonitorNamespaceSelector&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Dicovery of &lt;em&gt;PrometheusRule&lt;/em&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spec.ruleSelector&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.ruleNamespaceSelector&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iUuTmOvT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/prometheus-operator/prometheus-operator/raw/master/Documentation/custom-metrics-elements.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iUuTmOvT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/prometheus-operator/prometheus-operator/raw/master/Documentation/custom-metrics-elements.png" alt="Selectors used by Prometheus Operator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-selectors"&gt;
  &lt;/a&gt;
  Check Selectors
&lt;/h3&gt;

&lt;p&gt;If the target is not discovered by Prometheus:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check that your &lt;em&gt;ServiceMonitor&lt;/em&gt; or &lt;em&gt;PodMonitor&lt;/em&gt; is deployed in a &lt;em&gt;Namespace&lt;/em&gt; that matches the namespace selector in the &lt;em&gt;Prometheus&lt;/em&gt; object.&lt;/li&gt;
&lt;li&gt;Check that labels on your &lt;em&gt;ServiceMonitor&lt;/em&gt; or &lt;em&gt;PodMonitor&lt;/em&gt; match the selector in the &lt;em&gt;Prometheus&lt;/em&gt; object.&lt;/li&gt;
&lt;li&gt;Check that the selector on your &lt;em&gt;ServiceMonitor&lt;/em&gt; or &lt;em&gt;PodMonitor&lt;/em&gt; matches labels defined in the &lt;em&gt;Service&lt;/em&gt; or &lt;em&gt;Pod&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Check that the &lt;em&gt;Service&lt;/em&gt; or &lt;em&gt;Pod&lt;/em&gt; are deployed in the &lt;em&gt;Namespace&lt;/em&gt; selected by the namespace selector defined in the &lt;em&gt;ServiceMonitor&lt;/em&gt; or &lt;em&gt;PodMonitor&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to check a label selector, you can use the &lt;code&gt;-l&lt;/code&gt; option of &lt;code&gt;kubectl&lt;/code&gt;. For example, to check the following selector in a &lt;em&gt;ServiceMonitor&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
      &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="nv"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;backend,instance&lt;span class="o"&gt;=&lt;/span&gt;app,name&lt;span class="o"&gt;=&lt;/span&gt;containers-my-app get service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#check-port-name-or-number"&gt;
  &lt;/a&gt;
  Check Port Name or Number
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Check that the port number or name matches a port defined in a &lt;em&gt;Service&lt;/em&gt; or a &lt;em&gt;Pod&lt;/em&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;ServiceMonitor&lt;/em&gt; references either an incoming port defined in the &lt;em&gt;Service&lt;/em&gt; or a &lt;em&gt;Pod&lt;/em&gt; port:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ServiceMonitor.spec.endpoints.port&lt;/code&gt; references the name of a &lt;em&gt;Service&lt;/em&gt; port: &lt;code&gt;Service.spec.ports.name&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ServiceMonitor.spec.endpoints.targetPort&lt;/code&gt; references a &lt;em&gt;Pod&lt;/em&gt; port: &lt;code&gt;Pod.spec.containers.ports.containerPort&lt;/code&gt; or &lt;code&gt;Pod.spec.containers.ports.name&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;PodMonitor&lt;/em&gt; references port defined on &lt;em&gt;Pod&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;PodMonitor.spec.podMetricsEndpoints.port&lt;/code&gt; reference the name of a &lt;em&gt;Pod&lt;/em&gt; port: &lt;code&gt;Pod.spec.containers.ports.name&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that Prometheus will only use &lt;em&gt;Pods&lt;/em&gt; with a Ready state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-grafana-dashboards-as-configmaps"&gt;
  &lt;/a&gt;
  Create Grafana Dashboards as ConfigMaps
&lt;/h2&gt;

&lt;p&gt;Grafana includes an auto discovery mechanism for dashboards. Any &lt;em&gt;ConfigMap&lt;/em&gt; with a label &lt;code&gt;grafana_dashboard=1&lt;/code&gt; is loaded into Grafana.&lt;/p&gt;

&lt;p&gt;The following &lt;em&gt;ConfigMap&lt;/em&gt; will create a minimal dashboard in Grafana. Note that this &lt;em&gt;ConfigMap&lt;/em&gt; needs to be deployed in the same &lt;em&gt;Namespace&lt;/em&gt; as Grafana.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-dashboard&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;grafana_dashboard&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;1"&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;dashboard.json&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;{ "title": "Product Views",&lt;/span&gt;
      &lt;span class="s"&gt;"time": { "from": "now-6h", "to": "now" },&lt;/span&gt;
      &lt;span class="s"&gt;"editable": false,&lt;/span&gt;
      &lt;span class="s"&gt;"panels": [ {&lt;/span&gt;
          &lt;span class="s"&gt;"gridPos": { "h": 9, "w": 12, "x": 0, "y": 0 },&lt;/span&gt;
          &lt;span class="s"&gt;"id": 2,&lt;/span&gt;
          &lt;span class="s"&gt;"targets": [ {&lt;/span&gt;
              &lt;span class="s"&gt;"exemplar": true,&lt;/span&gt;
              &lt;span class="s"&gt;"expr": "rate(view_total[2m])",&lt;/span&gt;
              &lt;span class="s"&gt;"interval": "",&lt;/span&gt;
              &lt;span class="s"&gt;"legendFormat": "{{product}}",&lt;/span&gt;
              &lt;span class="s"&gt;"refId": "A"&lt;/span&gt;
            &lt;span class="s"&gt;} ],&lt;/span&gt;
          &lt;span class="s"&gt;"title": "Product View",&lt;/span&gt;
          &lt;span class="s"&gt;"type": "timeseries"&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
      &lt;span class="s"&gt;]&lt;/span&gt;
    &lt;span class="s"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#package-monitoring-objects-with-applications-using-helm-charts"&gt;
  &lt;/a&gt;
  Package Monitoring Objects with Applications using Helm Charts
&lt;/h2&gt;

&lt;p&gt;Including monitoring objects in Application Helm Charts is a good way to maintain the observability layer of an application. The monitoring components can be versioned with application packaging. Also the deployment of monitoring can follow the same workflow as the application.&lt;/p&gt;

&lt;p&gt;I will not explain how to package an application, but I’ll demonstrate how to include the following elements: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dashboard: &lt;em&gt;ConfigMap&lt;/em&gt; with dashboard code&lt;/li&gt;
&lt;li&gt;Alerts: &lt;em&gt;PrometheusRule&lt;/em&gt; with alerts definition&lt;/li&gt;
&lt;li&gt;Metrics endpoint: &lt;em&gt;PodMonitor&lt;/em&gt; or &lt;em&gt;ServiceMonitor&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the chart’s &lt;code&gt;values.yaml&lt;/code&gt;, add a new section for monitoring:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;monitoring&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;alerts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;dashboard&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;monitoring.alerts&lt;/code&gt; values controls the deployment of the &lt;em&gt;PrometheusRule&lt;/em&gt; object. The deployment of the &lt;em&gt;ConfigMap&lt;/em&gt; for the dashboard is controlled by &lt;code&gt;monitoring.dashboard&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the &lt;em&gt;PodMonitor&lt;/em&gt; or &lt;em&gt;ServiceMonitor&lt;/em&gt; objects, we can check if the Prometheus Operator is installed using the &lt;a href="https://helm.sh/docs/chart_template_guide/builtin_objects/"&gt;.Capabilities.APIVersions.Has&lt;/a&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- if .Capabilities.APIVersions.Has "servicemonitor.monitoring.coreos.com/v1"&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;monitoring.coreos.com/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ServiceMonitor&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- end&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, for alerts and dashboards, we can check the "values" set on the Helm release:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- if .Capabilities.APIVersions.Has "prometheusrule.monitoring.coreos.com/v1"&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- if .Values.monitoring.alerts&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;monitoring.coreos.com/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PrometheusRule&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- end&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- end&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A common workflow to maintain a dashboard is to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;edit dashboards in the Grafana Web UI&lt;/li&gt;
&lt;li&gt;copy the JSON model from Web UI&lt;/li&gt;
&lt;li&gt;paste the JSON to a file in the Helm Chart&lt;/li&gt;
&lt;li&gt;commit and push modifications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;⚠ If the JSON representation of the dashboard is stored in the &lt;em&gt;ConfigMap&lt;/em&gt; code, you will have to indent the content properly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-dashboard&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;grafana_dashboard&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;1"&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;dashboard.json&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;{ "title": "Product Views",&lt;/span&gt;
      &lt;span class="s"&gt;"time": { "from": "now-6h", "to": "now" },&lt;/span&gt;
      &lt;span class="s"&gt;"editable": false,&lt;/span&gt;
      &lt;span class="s"&gt;"panels": [ {&lt;/span&gt;
          &lt;span class="s"&gt;"gridPos": { "h": 9, "w": 12, "x": 0, "y": 0 },&lt;/span&gt;
          &lt;span class="s"&gt;"id": 2,&lt;/span&gt;
          &lt;span class="s"&gt;"targets": [ {&lt;/span&gt;
              &lt;span class="s"&gt;"exemplar": true,&lt;/span&gt;
              &lt;span class="s"&gt;"expr": "rate(view_total[2m])",&lt;/span&gt;
              &lt;span class="s"&gt;"interval": "",&lt;/span&gt;
              &lt;span class="s"&gt;"legendFormat": "{{product}}",&lt;/span&gt;
              &lt;span class="s"&gt;"refId": "A"&lt;/span&gt;
            &lt;span class="s"&gt;} ],&lt;/span&gt;
          &lt;span class="s"&gt;"title": "Product View",&lt;/span&gt;
          &lt;span class="s"&gt;"type": "timeseries"&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
      &lt;span class="s"&gt;]&lt;/span&gt;
    &lt;span class="s"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is generally easier to store the dashboard code in a dedicated file and then load the contents in the &lt;em&gt;ConfigMap&lt;/em&gt; with some Helm templating functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- if .Capabilities.APIVersions.Has "prometheusrule.monitoring.coreos.com/v1"&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- if .Values.monitoring.dashboard&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="s"&gt;…&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;                                             
  &lt;span class="s"&gt;dashboard.json&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;                               
    &lt;span class="s"&gt;{{- .Files.Get "dashboard.json" | trim | nindent 4 }}&lt;/span&gt;
&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- end&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- end&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Deploying monitoring stacks —Prometheus, Grafana, AlertManager, ElasticSearch, Loki, …— provides much more observability in a project, but at the cost of consuming more resources. Developers not using these features is a waste of resources. The project also has poor observability because only system metrics and maybe http metrics are retrieved. Adding application specific metrics and even business metrics allows you to build beautiful dashboards with colors and graphs that are very fun to report during boring review meetings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9i-n09KS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ffu21rl2xyylx5778gb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9i-n09KS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ffu21rl2xyylx5778gb.png" alt="grafana"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>helm</category>
      <category>kubernetes</category>
      <category>alerting</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>Best Top 3 Programming Fonts</title>
      <author>CoderZ90</author>
      <pubDate>Mon, 19 Jul 2021 08:31:37 +0000</pubDate>
      <link>https://dev.to/official_fire/best-top-3-programming-fonts-12dj</link>
      <guid>https://dev.to/official_fire/best-top-3-programming-fonts-12dj</guid>
      <description>&lt;p&gt;Hello guys 👋 Hope you are fine 😊&lt;/p&gt;

&lt;p&gt;So On Top of the list the font comes is - &lt;strong&gt;Operator Mono&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-operator-mono-premium-"&gt;
  &lt;/a&gt;
  1. Operator Mono ( Premium )
&lt;/h2&gt;

&lt;p&gt;This font is so cool and beautiful but its a little expensive. This font is one of my favourite font&lt;/p&gt;

&lt;p&gt;The font looks like this &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bk2cG7D9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t61oy77mmxeottw4z3t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bk2cG7D9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t61oy77mmxeottw4z3t.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you see it is looking so cool and clean 😊&lt;/p&gt;

&lt;p&gt;Link To Download - &lt;a href="https://www.typography.com/fonts/operator/styles"&gt;https://www.typography.com/fonts/operator/styles&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-fira-code-free-"&gt;
  &lt;/a&gt;
  2. Fira Code ( Free )
&lt;/h2&gt;

&lt;p&gt;Fira Code is a free monospaced font containing ligatures for common programming multi-character combinations.&lt;/p&gt;

&lt;p&gt;It looks pretty too here it is 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mUZ4E2hK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kusc3vinn0imz1mm6vz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mUZ4E2hK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kusc3vinn0imz1mm6vz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link To Download - &lt;a href="https://fonts.google.com/specimen/Fira+Code"&gt;https://fonts.google.com/specimen/Fira+Code&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-cascadia-code-free-from-microsoft-"&gt;
  &lt;/a&gt;
  3. Cascadia Code ( FREE from Microsoft )
&lt;/h2&gt;

&lt;p&gt;This font is also cool it is similiar to Fira code and also has Ligatures which are just amazing&lt;/p&gt;

&lt;p&gt;Here is a quick look &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UX91CA4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygylaqh2m37jew6btrki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UX91CA4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygylaqh2m37jew6btrki.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Download - &lt;a href="https://github.com/microsoft/cascadia-code"&gt;https://github.com/microsoft/cascadia-code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool right ? 🔥&lt;/p&gt;

&lt;p&gt;Hope you enjoyed Reading This Blog  😊&lt;/p&gt;

&lt;p&gt;Also Subscribe to my youtube Channel to Learn more about coding Thankyou! for giving your time 😊💛&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtube.com/c/codingfire?sub_confirmation=1"&gt;https://youtube.com/c/codingfire?sub_confirmation=1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codequality</category>
      <category>vscode</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>2021 CS50x</title>
      <author>Hermes</author>
      <pubDate>Mon, 19 Jul 2021 08:28:20 +0000</pubDate>
      <link>https://dev.to/truepadawan/2021-cs50x-21bd</link>
      <guid>https://dev.to/truepadawan/2021-cs50x-21bd</guid>
      <description>&lt;p&gt;&lt;em&gt;CS50x(Intro to Computer Science)&lt;/em&gt; is a free course offered by Harvard which focuses on the Programming Aspect of Computer Science.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ha6iyTqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626634073842/vgjlHocVP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ha6iyTqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626634073842/vgjlHocVP.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Its 2021 session is currently on-going and you might want to check it out because its pretty decent for a free resource and you can use it as a chance to learn about other Languages. I know this because I am currently in it and I'm just about to move to Week 5 which focuses on Data Structures.&lt;/p&gt;

&lt;p&gt;Each Week(0 - 10) focuses on a different topic : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scratch(Basically just a smooth intro into Programming for beginners)&lt;/li&gt;
&lt;li&gt;C (C Programming Language)&lt;/li&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;li&gt;Algorithms&lt;/li&gt;
&lt;li&gt;Memory&lt;/li&gt;
&lt;li&gt;Data Structures&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;HTML, CSS, JavaScript&lt;/li&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;li&gt;Ethics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Like I said, It's a free course and anyone can register and start immediately and it also awards you with a certificate if you manage to get over 70% total score at the end of the course(There is also a paid certificate).&lt;/p&gt;

&lt;p&gt;Each Week has a 'Problem Set' where you are tasked to solve a problem based on what you learned the following week, my most recent problem set which I just completed today was where you had to write a program using C which recovers JPEGs from a forensic image(not as complex as it sounds). The problems can get pretty complex FAST, a particular problem set for Week 3 called Tideman(Implement a Program that runs a Tideman election) is regarded as one of the hardest problems in the entire course even though it's just in Week 3 probably because that week focuses on Algorithms(Sorting algorithms and Recursion), Luckily it's not mandatory to do it so i did everything except it and moved on.&lt;/p&gt;

&lt;p&gt;The main thing about the entire course that excites me is the Final Project of the course where you develop your very own software or something similar drawing on what you've learned in the course:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GVOFPOUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626633893741/ibf2wmlHd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GVOFPOUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626633893741/ibf2wmlHd.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're interested in CS50, you can enroll &lt;a href="https://cs50.edx.org/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also there are other CS50 Programs(PAID) you can take -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CS50 Web Development &lt;a href="https://cs50.edx.org/programs/web"&gt;Program&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;CS50 Artificial Intelligence &lt;a href="https://cs50.edx.org/programs/ai"&gt;Program&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;CS50 Game Development &lt;a href="https://cs50.edx.org/programs/games"&gt;Program&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Note : You don't necessarily have to take each lecture weekly, you can take them daily if you want to(assuming you complete all problem sets daily which is unlikely except in the beginning)&lt;/code&gt;&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Remote Jobs for Javascript, Go, Python and Fullstack Developers</title>
      <author>Stefan Wuthrich</author>
      <pubDate>Mon, 19 Jul 2021 08:26:25 +0000</pubDate>
      <link>https://dev.to/golangch/remote-jobs-for-javascript-go-python-and-fullstack-developers-4c8f</link>
      <guid>https://dev.to/golangch/remote-jobs-for-javascript-go-python-and-fullstack-developers-4c8f</guid>
      <description>&lt;p&gt;We know it all...&lt;/p&gt;

&lt;p&gt;Since Covid 19 changed all our lives, Remote Jobs offers are growing, as many companies realized that this mode of work works fine for them and can attract new developers out there.&lt;/p&gt;

&lt;p&gt;I have run now about three years four developer-related Job Boards, which have since begun a Remote Filter for Job Candidates and, of course, those options for companies adding Remote Jobs.&lt;/p&gt;

&lt;p&gt;Here the boards:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fullstackjob.com/jobs/remote-ok"&gt;Remote Fullstack Developer Jobs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://javascriptjob.xyz/jobs/remote-ok"&gt;Remote Javascript Developer Jobs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pythonjob.xyz/jobs/remote-ok"&gt;Remote Python Developer Jobs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://golangjob.xyz/jobs/remote-ok"&gt;Remote Golang Developer Jobs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>go</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>A Look at Selenium and Its Alternative Solution for 2021 and Beyond
</title>
      <author>Brian Anderson</author>
      <pubDate>Mon, 19 Jul 2021 08:15:51 +0000</pubDate>
      <link>https://dev.to/briananderson2209/a-look-at-selenium-and-its-alternative-solution-for-2021-and-beyond-1n82</link>
      <guid>https://dev.to/briananderson2209/a-look-at-selenium-and-its-alternative-solution-for-2021-and-beyond-1n82</guid>
      <description>&lt;p&gt;Selenium was initially published in the mid-2000s as a Web browser plugin for recording and replaying Web browser interactions. Since then, it has undoubtedly become the most used test automation tool. According to a study of the automated testing community, the framework is utilized by more than 80% of those polled.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selenium is an open-source framework for Web-based application automation, including Selenium WebDriver, Selenium IDE, and Selenium Grid. &lt;/li&gt;
&lt;li&gt;Selenium IDE is a browser plugin that captures and replays user interactions.&lt;/li&gt;
&lt;li&gt;Selenium Grid enables WebDriver to simultaneously execute automation tests on many computers, browsers, and OS systems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Selenium is frequently utilized in the software automation sector due to the benefits it gives. First, it is developer-friendly, enabling developers to build and test any programming language of their choosing. Second, the framework is a cross-browser and cross-operating system, allowing teams to perform test automation across several browsers and operating systems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-structure-of-selenium-webdriver"&gt;
  &lt;/a&gt;
  The Structure of Selenium WebDriver
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---u8T-GAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pudy65usdmmyaxeh35vb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---u8T-GAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pudy65usdmmyaxeh35vb.png" alt="Selenium WebDriver Architecture"&gt;&lt;/a&gt;&lt;br&gt;
The Selenium WebDriver architecture is made up of three parts: the WebDriver, the Browser Specific Drivers or Drivers, and the Browser. These components communicate bidirectionally or two-ways, issuing HTTP requests and receiving HTTP replies in RESTful services.&lt;/p&gt;

&lt;p&gt;WebDriver includes language-specific client libraries, often known as language bindings, for creating automation scripts and executing script commands in the Browser using Drivers. Selenium can now enable scripting in various languages, including Java, C#, Python, Ruby, and JavaScript, thanks to these language bindings.&lt;br&gt;
Browser Specific Drivers, also known as Drivers, are responsible for running the actual Browser via delivering WebDriver requests. Drivers can be implemented and extended by third parties. Two browser driver implementations are GeckoDriver for Firefox and ChromeDriver for Chrome.&lt;br&gt;
Browser component accepts requests from the Drivers component to drive interactions on the application under test (AUT). Selenium is compatible with all major browsers, including Chrome, Firefox, Internet Explorer, Opera, and Safari.&lt;/p&gt;

&lt;p&gt;WebDriver can operate on a separate system than the Drivers and Browser components. In this configuration, WebDriver connects with these components remotely through Selenium Server or Remote WebDriver. Selenium can now perform automated tests on many browsers and computers seamlessly at the same time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-this-structure"&gt;
  &lt;/a&gt;
  Benefits of this structure
&lt;/h2&gt;

&lt;p&gt;The architecture is disjointed. Three components connect using the HTTP protocol and RESTful Web services as the mode of communication. This property enables an element to function independently of the others. Changes and improvements to one component may be performed quickly and without impacting the others. Selenium may be platform- and language-neutral thanks to its loosely linked design.&lt;br&gt;
Moreover, the architecture is accessible. Selenium WebDriver is a W3C Recommendation, which allows for many contributions from the software community.&lt;br&gt;
These architectural characteristics result in a spate of significant Selenium characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cross-platform and cross-language compatibility. Because several implementations of the Drivers component are available, users may run automation scripts on various operating systems and browsers. As long as language bindings in the WebDriver are accessible, Selenium automation scripts may be developed in various languages.&lt;/li&gt;
&lt;li&gt;Developer friendly. Because Selenium supports various languages, developers may build automation scripts in their preferred language. They may also create and incorporate a binding library in the WebDriver component to help a new scripting language if necessary.&lt;/li&gt;
&lt;li&gt;Open for extension. The Selenium architecture allows for language binding expansions by supporting additional test scripting languages or Drivers for new browsers.&lt;/li&gt;
&lt;li&gt;Open for integration with a test automation framework. A new test automation framework may be constructed on top of Selenium by utilizing it as an engine for executing scripts for Web automation, as demonstrated in the figure below.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-demand-for-a-selenium-alternative-solution"&gt;
  &lt;/a&gt;
  The Demand for a Selenium Alternative Solution
&lt;/h2&gt;

&lt;p&gt;When viewed through the eyes of individuals who do not possess programming or sophisticated technical abilities, Selenium's advantages in assisting programming are really its drawbacks. Many testers see Selenium as a barrier to getting started with test automation due to complex programming. As a result, using Selenium directly presents a high learning curve for many testers.&lt;/p&gt;

&lt;p&gt;Selenium also lacks means for separating automation scripts from test data, resulting in high test script maintenance costs and difficulties with test script and test data reusability. There is also a deficiency in managing and organizing test materials such as test scripts, data, and test objects.&lt;/p&gt;

&lt;p&gt;These restrictions help to explain the rapid rise of Selenium-based products in the software test automation industry in recent years. Teams and companies want a solution that provides out-of-the-box testing capabilities without requiring them to develop their own Selenium-based framework to start their automation process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-structure-of-seleniumbased-test-frameworks"&gt;
  &lt;/a&gt;
  The Structure of Selenium-based Test Frameworks
&lt;/h2&gt;

&lt;p&gt;On top of Selenium, a variety of test automation frameworks have been developed. These frameworks attempt to solve several of Selenium's shortcomings, such as the absence of modules for reporting, logging, monitoring, and reusing test automation assets. Importantly, these frameworks aid in overcoming the challenge of developing and launching an automation effort with Selenium.&lt;/p&gt;

&lt;p&gt;The diagram below presents various components of a typical test framework that uses Selenium as its test execution engine. &lt;/p&gt;

&lt;p&gt;Many current automation solutions use this Selenium-based framework. Some examples are Katalon Studio, CrossBrowserTesting, QMetry Automation Studio, Lambda Test, and Sauce Labs. Many of these solutions go a step further by incorporating Appium as a test automation engine for mobile apps, allowing them to handle both web and mobile automation in a single tool.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Resource&lt;/em&gt;&lt;/strong&gt;: &lt;a href="https://www.katalon.com/resources-center/blog/selenium-alternative-solution/"&gt;A Deep Dive into Selenium, Its Alternative Solution for 2021 and Beyond&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.katalon.com/resources-center/blog/selenium-ide-alternative-firefox-chrome/"&gt;Top 3 Selenium IDE Alternative&lt;/a&gt;&lt;br&gt;
Also Katalon are introduce &lt;a href="https://www.katalon.com/selenium-test-migration/"&gt;how to migrate from Selenium&lt;/a&gt; &lt;/p&gt;

</description>
      <category>opensource</category>
      <category>testing</category>
      <category>testdev</category>
    </item>
    <item>
      <title>AWS open source news and updates #76</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 19 Jul 2021 07:52:13 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-76-2e23</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-76-2e23</guid>
      <description>&lt;h2&gt;
  &lt;a href="#19th-july-2021-instalment-76"&gt;
  &lt;/a&gt;
  19th July, 2021 - Instalment #76
&lt;/h2&gt;

&lt;p&gt;Newsletter #76.&lt;/p&gt;

&lt;p&gt;This week, we have new oss projects such as ecs-files-composer, lucid-dynamodb, kubectl-trace, tailscale-layer and more. AWS and community blog posts featuring OpenSearch, Kubernetes, COBOL, Jamulus, Firecracker, Apache Hudi, Apache Kakfa, Apache Flink, Redis and more. In the videos section we catch up with a couple of the sessions from the Airflow Summit and finally, some new events for your diary.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Tal Hoffman, Corey Quinn, John Preston, Pahud Hsieh, Vu Dao, Martin Baillie, Richard Austin Melchior, Re Alvarez-Parmar, Nithish Kumar Murcherla, Drew Zhang, Ali Arsanjani, Ashish Khetan, Li Zhang, Yi Xiang,  Piotr Chotkowski, John Mousa, Sascha Janssen, Veliswa Boya, Didier Durand, Scott Kellish, Asaf Porat Stoler, Zach Gardner, Yaron Sananes, Zoltan Bozoky, Soyean Kim, Victor Leung, Nelson Assis, Param Sharma, Arindam Chatterji, Kyle Thomson, Matt Asay, Antony Prasad Thevaraj, Helge Aufderheide, Dhiraj Thakur, Sameer Goel, and Imtiaz Sayed.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-from-open-source-projects"&gt;
  &lt;/a&gt;
  Latest from open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ecs-files-composer&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/qs"&gt;ecs-files-composer&lt;/a&gt; and useful open source project from John Preston, ECS Files Composer, is a small program that will allow users to define files they need pulled out of AWS Services, such as AWS S3 or AWS SSM Parameter Store, and load the content to a given location, adding builtin capabilities to set file ownership, mode, and other handy features. Great examples, use cases and top notch documentation as you would expect from a project form Mr Preston. Nice work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;lucid-dynamodb&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/qj"&gt;lucid-dynamodb&lt;/a&gt; Dinesh Sonachalam has put together this open source project that is Python wrapper for AWS DynamoDB, and he provides plenty of documentation and examples to help you get going with this project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kubectl-trace&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/qi"&gt;kubectl-trace&lt;/a&gt; this new project, kubectl trace, is a kubectl plugin that allows you to schedule the execution of bpftrace programs in your Kubernetes cluster. &lt;a href="https://github.com/iovisor/bpftrace"&gt;bpftrace&lt;/a&gt; is a high-level tracing language for Linux enhanced Berkeley Packet Filter (eBPF) available in recent Linux kernels (4.x). This project has good documentation and examples so you can get going.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tailscale-layer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/qh"&gt;tailscale-layer&lt;/a&gt; what is this, an open source project from Corey Quinn? Indeed it is, and this project builds an AWS Lambda extension to provide a SOCKS5 proxy inside of the Lambda runtime environment. According to Corey, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tailscale is a next-generation VPN approach that wraps around Wireguard. It offers a useful management interface, uses far less power on mobile devices than options like OpenVPN, and claims to run on almost anything.&lt;br&gt;
In other words, this extension can be used with any existing Lambda function to provide communication across your Tailscale network — without having to configure a bunch of network rules that, frankly, don't work very well across different provider boundaries. &lt;br&gt;
So far, I've used the extension to have Lambda functions talk to: The Raspberry Pi in my video production studio/guest room/sewing closet/screamatorium. My massively overpowered instance running in Oracle Cloud's yes-it's-actually-free tier. My iPhone and iPad. Resources living inside of my AWS VPCs, without having to use a NAT instance or Managed NAT Gateway to allow those functions to also speak to external resources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Read more in the blog post he put around this, in &lt;a href="https://aws-oss.beachgeek.co.uk/q6"&gt;Corey Writes Open-Source Code for Lambda and Tailscale&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;serverless-mux-on-aws&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/qx"&gt;serverless-mux-on-aws&lt;/a&gt; new project from Pahud Hsieh, that shows you how you can do a local build, test and deploy your &lt;a href="https://github.com/gorilla/mux"&gt;gorilla/mux&lt;/a&gt; application for both AWS Lambda and AWS Fargate with AWS CDK.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_kqcNps--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pahud/serverless-mux-on-aws/63e544f85d44a4de606ad2f4ad06e93578e82fd0/images/serverless-mux-go.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_kqcNps--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pahud/serverless-mux-on-aws/63e544f85d44a4de606ad2f4ad06e93578e82fd0/images/serverless-mux-go.svg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;blog-multi-arch-springboot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/qf"&gt;blog-multi-arch-springboot&lt;/a&gt; an open source project that shows you how you can build a multi-architecture pipeline to deploy a sample application (in this instance a Spring Boot app) onto any architecture type and to any location (thanks to the ECS Anywhere capability of Amazon ECS). The python CDK application builds everything you need, and I have written a blog post that will walk you through this in &lt;a href="https://aws-oss.beachgeek.co.uk/qg"&gt;Creating a multi architecture CI/CD deployment for Amazon ECS and ECS Anywhere&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#community-open-source-posts"&gt;
  &lt;/a&gt;
  Community open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Firecracker&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tal Hoffman dives deep in his blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/qz"&gt;Firecracker internals: a deep dive inside the technology powering AWS Lambda&lt;/a&gt; guiding you through some of the Firecracker code. An often forgotten fact that sometimes just going through the source code of open source projects like Firecracker is one of the best ways to improve your understanding of it. Very nice post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NPJSMRyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/MUj6Aon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NPJSMRyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/MUj6Aon.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Emacs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are an Emacs user, then Martin Baillie has a must read post for you this week, in &lt;a href="https://aws-oss.beachgeek.co.uk/r0"&gt;Emacs TRAMP over AWS SSM APIs&lt;/a&gt; showing you how you can use Emacs &lt;a href="https://www.emacswiki.org/emacs/TrampMode"&gt;TRAMP&lt;/a&gt; mode to copy files to and from different locations on an EC2 instances, using SSH proxied over SSM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/qy"&gt;AWS EKS With EFS CSI Driver And IRSA Using CDK&lt;/a&gt; another very nice post from Vu Dao on how you can configure your Amazon EKS cluster to use AWS EFS (Elastic File Service) with the  Amazon EFS Container Storage Interface (CSI) driver, via an AWS CDK application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C4am5Ya8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--X0JpEvKy--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/efs-csi/img/efs-provisioner-arch.png%253Fraw%253Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C4am5Ya8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--X0JpEvKy--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/efs-csi/img/efs-provisioner-arch.png%253Fraw%253Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Richard Austin Melchior has put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/qr"&gt;Ship it, Next.js on AWS with Serverless Framework&lt;/a&gt; where he shows you how you can take a built Next.js application and ship it onto an AWS serverless stack using the Serverless framework.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-amazon-open-source-posts"&gt;
  &lt;/a&gt;
  AWS and Amazon open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/qc"&gt;OpenSearch 1.0 launches&lt;/a&gt; Eli Fisher, Carl Meadows, Jules Graybill, Kyle Davis, and Mehul Shah share in this blog post the exciting news that the OpenSearch project has reached a major milestone with the launch of OpenSearch 1.0. This milestone marks the first production-ready version of OpenSearch. In addition to being production-ready, multiple new enhancements were added to the project: data streams, trace analytics span filtering, report scheduling, and more.&lt;/p&gt;

&lt;p&gt;Essential reading this week, and a great shout out to the contributors so far.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;COBOL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Great two part post from Veliswa Boya and Didier Durand, &lt;a href="https://aws-oss.beachgeek.co.uk/qk"&gt;Serverless COBOL: Rejuvenating legacy code with open source software Part 1&lt;/a&gt; (and &lt;a href="https://aws-oss.beachgeek.co.uk/ql"&gt;Part 2&lt;/a&gt;) show you how you can use open source software, in this instance GnuCOBOL, combined with AWS to extend the life of legacy code to help build modern (serverless) mainframes. They also take a look at the additional benefits of open source software when legacy features are deployed in such a modern environment. Really great post, and recommended reading this week. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4mwXu8ju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/07/08/didduran-Lambda-Cobol_architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4mwXu8ju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/07/08/didduran-Lambda-Cobol_architecture.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jamulus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jamulus is an open source project that enables you to play music, rehearse, or just jam with anyone online with low latency and works across multiple desktop clients such as Windows, macOS, or Linux. These clients connect to Jamulus servers worldwide. In this post from Helge Aufderheide, &lt;a href="https://aws-oss.beachgeek.co.uk/qv"&gt;Running your own server for Jamulus, an open source solution to jam with other musicians online&lt;/a&gt; you will soon be able to get your own Jamulus server up and running and fulfil your musical rockstar ambitions to a global audience (rather than just the shower or car)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IwEI31qs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/06/25/ahelge-jamulus_f7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IwEI31qs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/06/25/ahelge-jamulus_f7.png" alt="jamullus"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/qb"&gt;Building an Apache Kafka data processing Java application using the AWS CDK&lt;/a&gt; is a post from  Piotr Chotkowski who walks you through the process of creating a simple end-to-end data processing application. Thanks to AWS Cloud Development Kit (CDK), in just a few lines of code you will have set up an Apache Kafka cluster as well as explaining how to structure your project and package your application for deployment. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--23xwxehh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0716d9708d321ffb6a00818614779e779925365c/2021/07/12/architecture-1024x517.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--23xwxehh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0716d9708d321ffb6a00818614779e779925365c/2021/07/12/architecture-1024x517.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Hudi&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dhiraj Thakur, Sameer Goel, and Imtiaz Sayed have come together to write this first in a series of posts, &lt;a href="https://aws-oss.beachgeek.co.uk/qw"&gt;Query an Apache Hudi dataset in an Amazon S3 data lake with Amazon Athena part 1: Read-optimized queries&lt;/a&gt;. This series will look at Athena and Apache Hudi, and will provide a short overview of key Hudi capabilities along with detailed procedures for using read-optimized queries, snapshot queries, and bootstrapped tables. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Flink/Grafana&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;John Mousa and Sascha Janssen have put together this blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/qd"&gt;Near real-time processing with Amazon Kinesis, Amazon Timestream, and Grafana&lt;/a&gt; is part of a series of posts  that aim to explore various patterns for data ingestion and cost-effective architecture pipelines. This particular looks at device telemetry uses cases. You will see how you can monitor your devices’ operations by visualising operational data with Grafana, using Apache Flink to transforms and aggregate streaming data in near-real time, to detect and clean any errors in time series data timestamps before ingesting them in Timestream to optimise operational analytics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnWUD6Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/07/06/DBB-1453-image011.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnWUD6Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/07/06/DBB-1453-image011.png" alt="overview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the &lt;a href="https://aws-oss.beachgeek.co.uk/qe"&gt;source code&lt;/a&gt; is available so you can reproduce this for yourself. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/qm"&gt;Migrate Amazon ElastiCache to Graviton2 processors&lt;/a&gt; Scott Kellish, Asaf Porat Stoler, Zach Gardner, and Yaron Sananes explore the performance benefits of Graviton2 instances and how to migrate your ElastiCache for Redis cluster to Graviton2. More and more workloads are moving to Arm, and this is an area where open source projects are helping to unlock the ability for customers to run their workloads on any processor architecture.&lt;/p&gt;

&lt;p&gt;Last week we also had Matt Asay and Antony Prasad Thevaraj post, &lt;a href="https://aws-oss.beachgeek.co.uk/qu"&gt;How AWS and Redis Labs partner to make a better Redis&lt;/a&gt; which takes a look at how you can both collaborate with and compete with open source. The post explores that in detail as well as taking a look at how it all comes back to how we can best serve our customers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Param Sharma and Arindam Chatterji show you how to set up end-to-end encryption on Amazon Elastic Kubernetes Service (Amazon EKS) with AWS Certificate Manager Private Certificate Authority in the post, &lt;a href="https://aws-oss.beachgeek.co.uk/qo"&gt;TLS-enabled Kubernetes clusters with ACM Private CA and Amazon EKS&lt;/a&gt;. You will learn how you can set up an NGINX ingress controller on Amazon EKS. As part of the example, we show you how to configure an AWS Network Load Balancer (NLB) with HTTPS using certificates issued via ACM Private CA in front of the ingress controller. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p5aYan1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2021/07/13/TLS-enabled-Kubernetes-clusters-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p5aYan1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2021/07/13/TLS-enabled-Kubernetes-clusters-2.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fluentd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Following on from last weeks Fluentd/Amazon EKS post, this week it is the turn of Re Alvarez-Parmar, Nithish Kumar Murcherla, and Drew Zhang in the post &lt;a href="https://aws-oss.beachgeek.co.uk/q8"&gt;Capturing logs at scale with Fluent Bit and Amazon EKS&lt;/a&gt; where they explore the need for optimisation when using Fluentd or Fluent Bit for log aggregation and demonstrate recent enhancements to Fluent Bit that are designed to reduce the volume API calls it makes to the Kubernetes API servers. An image is worth many words they say, so let me leave this here to tempt you into reading more. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n_Yqlncp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/07/08/image-2021-07-07T200546.692.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n_Yqlncp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/07/08/image-2021-07-07T200546.692.png" alt="graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SageMaker JumpStart&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SageMaker JumpStart is a capability in SageMaker that allows you to quickly get started with ML. JumpStart uses open-source pre-trained models to solve common ML problems like image classification, object detection, text classification, sentence pair classification, and question answering. In this first of a series, Ali Arsanjani, Ashish Khetan, and Li Zhang have put together &lt;a href="https://aws-oss.beachgeek.co.uk/qa"&gt;Run image classification with Amazon SageMaker JumpStart&lt;/a&gt;, covers image classification tasks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tensorflow Serving&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yi Xiang has put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/q9"&gt;Deploy variational autoencoders for anomaly detection with TensorFlow Serving on Amazon SageMaker&lt;/a&gt; that looks at how you can implement a variational autoencoder on SageMaker to solve an anomaly detection tasks,  showing you how you can deploy multiple trained models to a single TensorFlow Serving multi-model endpoint. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PD4ByXHc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/07/01/ML1533-image017.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PD4ByXHc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/07/01/ML1533-image017.png" alt="model"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-study"&gt;
  &lt;/a&gt;
  Case study
&lt;/h3&gt;

&lt;p&gt;Zoltan Bozoky, Soyean Kim, and Victor Leung from Providence Health Care together with Nelson Assis from AWS shared how a public health organisation can use cloud services together with open source to improve medical care, such as infection prevention and control practices in controlled environments, in the post &lt;br&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/qn"&gt;Using cloud computing to develop an open source infection prevention and disease control solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fHBIDMLD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/07/14/nlsss_quickstart-arch_f1_new.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fHBIDMLD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/07/14/nlsss_quickstart-arch_f1_new.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The open source AWS Quick Start solution described in this post can help you increase data throughput, minimise the total cost of ownership, and enable robust security, while providing enhanced availability, capacity, and scalability through access to advanced data mining and modelling services. [hands on]&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-airflow-summit-2021"&gt;
  &lt;/a&gt;
  Apache Airflow Summit 2021
&lt;/h3&gt;

&lt;p&gt;In case you missed it, last week was the Airflow Summit, a free online conference for the worldwide community of developers and users of Apache Airflow. There were a few sessions covering Amazon Managed Workflows for Apache Airflow (MWAA), as well as lots of other great sessions which you should check out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow 2.0 on Amazon MWAA&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.crowdcast.io/e/airflowsummit2021/39"&gt;https://www.crowdcast.io/e/airflowsummit2021/39&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this session we will discuss Amazon Managed Workflows for Apache Airflow (MWAA), how Apache Airflow (and specifically version 2.0) is implemented in the service, best practices for deployment and operations, and the Amazon MWAA team’s commitment to open source usage and contributions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MWAA: Design Choices and Road Ahead&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.crowdcast.io/e/airflowsummit2021/53"&gt;https://www.crowdcast.io/e/airflowsummit2021/53&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An informal and fun chat about the journey that we took and the decisions that we made in building Amazon Managed Workflows for Apache Airflow. We will talk about Our first tryst with understanding Airflow Talking to Amazon Data Engineers and how they ran workflows at scale Key design decisions and the reasons behind them Road ahead, and what we dream about for future of Apache Airflow. Open-Source tenets and commitment from the team We will leave time at the end for a short AMA/Questions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;AWS Toolkit for JetBrains&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/qp"&gt;AWS Toolkit for JetBrains now supports Go and TypeScript&lt;/a&gt; Kyle Thomson shares how Go and TypeScript are now supported in this open source plugin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amplify Flutter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week the AWS Amplify’s tools and libraries for Flutter were updated to support null safety for all of our use cases. Flutter developers can now enjoy all the easy-to-integrate Amplify functionality with higher reliability and improved developer ergonomics. Sound null safety is a Dart language feature in which code is non-nullable by default and turns runtime null-dereference errors into edit-time analysis errors. This enables developers to reduce bugs in their code and benefit from performance improvements through smaller binaries and faster execution.&lt;/p&gt;

&lt;p&gt;Null safety protection was introduced with Flutter 2 as an opt-in feature for developers and, as of Flutter 2.2, is enabled by default for all new Flutter apps. With this release of Amplify Flutter developers can now create new apps with null safety enabled, and no longer have to wait to migrate their existing apps to be null safe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have updated Amazon RDS for PostgreSQL to support PostgreSQL minor versions 13.3, 12.7, 11.12, 10.17, and 9.6.22. This release closes security vulnerabilities in PostgreSQL and contains bug fixes and improvements done by the PostgreSQL community.&lt;/p&gt;

&lt;p&gt;This release also adds support for the oracle_fdw extension, which allows your PostgreSQL database to connect and retrieve data stored in separate Oracle databases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FreeRTOS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FreeRTOS AWS reference integrations are pre-integrated FreeRTOS projects ported to microcontroller-based evaluation boards that demonstrate end-to-end connectivity to AWS IoT Core. This helps developers save months of development effort and accelerate time to market. FreeRTOS AWS reference integrations now include the new managed AWS IoT Over-the-Air update (OTA) library, AWS IoT Jobs library, and the AWS IoT Device Defender custom metrics feature from the FreeRTOS 202012.01 LTS release, and the coreMQTT Agent library from the FreeRTOS 202104.00 release.&lt;/p&gt;

&lt;p&gt;Developers can use the reference integrations to get started on a wide variety of evaluation boards and use the integrated libraries to remotely update IoT device firmware, manage IoT device fleets, monitor IoT device fleet metrics, and to simplify the management of MQTT connections in multi-threaded applications.&lt;/p&gt;

&lt;p&gt;Read more, including &lt;a href="https://aws-oss.beachgeek.co.uk/q3"&gt;links to supporting blog posts here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open datasets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Forty-four new or updated datasets from the National Library of Medicine, Digital Earth Africa, Amazon, and others are available on the Registry of Open Data in the following categories: COVID-19, Agriculture, Climate and Weather, Energy, Geospatial, Life Sciences and Machine Learning.&lt;/p&gt;

&lt;p&gt;Check out the full announcement, including links to the open datasets in, &lt;a href="https://aws-oss.beachgeek.co.uk/q4"&gt;New datasets available on the Registry of Open Data from the National Library of Medicine, Digital Earth Africa, Amazon, and others&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also read the blog post from Joe Flasher, &lt;a href="https://aws-oss.beachgeek.co.uk/qt"&gt;Satellite imagery over Africa, a large-scale climate ensemble, and product listings with 3D renderings: The latest open data on AWS&lt;/a&gt; that looks at a few of those open datasets in more detail.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hugging Face&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week we announced AWS Deep Learning Containers (DLCs) with integrated SDKs for inference that enable customers to easily deploy Hugging Face models in Amazon SageMaker at scale. Read the full announcement in the post, &lt;a href="https://aws-oss.beachgeek.co.uk/q5"&gt;Amazon announces new AWS Deep Learning Containers to deploy Hugging Face models faster on Amazon SageMaker&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;Later this week, there are a couple of interesting looking events you should check out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developing Secure Open Source Software (OSS)&lt;/strong&gt; [FREE Event]&lt;br&gt;
&lt;strong&gt;July 20th, 9:30 – 11:00am PDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;David Wheeler, Director of Open Source Supply Chain Security at The Linux Foundation will discuss steps you can take to develop more secure OSS and evaluate OSS for security.&lt;/p&gt;

&lt;p&gt;Read more and &lt;a href="https://aws-oss.beachgeek.co.uk/pm"&gt;register here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ML Dev Day Live Workshop&lt;/strong&gt; [FREE Event]&lt;br&gt;
&lt;strong&gt;July 21st 9:00am PDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learn how to build highly scalable and reliable pipelines for analytics using open source technologies such as Apache Spark, Delta Lake and open source machine learning frameworks such as TensorFlow, XGBoost, scikit-learn and MLFlow.&lt;/p&gt;

&lt;p&gt;Read more and &lt;a href="https://aws-oss.beachgeek.co.uk/pl"&gt;register here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open Data Lakes with Presto, Apache Hudi &amp;amp; AWS Glue and S3 – the next generation of analytics&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;July 27th at 10am PT/ 1pm ET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sign up for this roundtable discussion where experts from each layer in this stack – Presto, AWS, and Apache Hudi – will discuss why they are seeing a pronounced adoption to this next generation of cloud data lake analytics and how these technologies enable open, flexible, and highly performant analytics in the cloud.&lt;/p&gt;

&lt;p&gt;Read more &lt;a href="https://aws-oss.beachgeek.co.uk/q7"&gt;and register here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;23rd September, Bern Switzerland&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is this, an in person event returning? A stellar line up including our own Michael Hausenblas, an event looking at CNCF projects and the future of IT. Find out more and to view prices/register, by clicking &lt;a href="https://cloudnativeday.ch/en/#speakers"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on [@AWSOpen](&lt;a href="https://twitter.com/AWSOpen"&gt;https://twitter.com/AWSOpen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>Which AWS Region Is Cheapest? A Costing Report</title>
      <author>Lou (🚀 Open Up The Cloud ☁️)</author>
      <pubDate>Mon, 19 Jul 2021 07:31:21 +0000</pubDate>
      <link>https://dev.to/aws-builders/which-aws-region-is-cheapest-a-costing-report-3je9</link>
      <guid>https://dev.to/aws-builders/which-aws-region-is-cheapest-a-costing-report-3je9</guid>
      <description>&lt;p&gt;I’ve heard lots of anecdotal over the years about which AWS regions are the cheapest, with both Ireland, and North Virginia coming up frequently. But whilst researching the cheapest AWS region I was amazed to see there was no data about which AWS region is the cheapest—so I crunched my own data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wNYr5Hry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/aws-regions.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wNYr5Hry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/aws-regions.png" alt="Which AWS Region?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which AWS region is the cheapest?&lt;/strong&gt; The US Regions Ohio, North Virginia and Oregon are the cheapest (based on S3, EC2, RDS and Lambda), followed by EU regions (e.g. Stockholm, Ireland and London), then the Asia Pacific AWS regions (e.g. Tokyo and Seoul), and finally South America (e.g. Sao Paulo) which is the most expensive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analysing-the-cheapest-aws-region"&gt;
  &lt;/a&gt;
  Analysing The Cheapest AWS Region
&lt;/h2&gt;

&lt;p&gt;To find the cheapest AWS region I analysed data across the AWS regions comparing the cost of the following AWS services: AWS S3, EC2, RDS, and Lambda. Let me just go ahead and share the results with you…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bWQ9ELqM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/aws-region-costs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bWQ9ELqM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/aws-region-costs.png" alt="AWS Region Cost Comparison Table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://docs.google.com/spreadsheets/d/e/2PACX-1vR0gBoKn8BmtP1zVXvjZb1w6KmLE8YNd7W-6nXkQ_3EzKmPu9PMT6U8XuJ72Gr-ZW-UlLRl0yLFRI4_/pubhtml"&gt;find the raw data here&lt;/a&gt; (data taken from &lt;a href="https://calculator.aws/#/"&gt;AWS cost calculator&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#key-findings"&gt;
  &lt;/a&gt;
  Key Findings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Costs can almost double between AWS regions&lt;/li&gt;
&lt;li&gt;Northern California is the most expensive US region&lt;/li&gt;
&lt;li&gt;Costs are grouped roughly by continent, i.e North America, Europe, Asia Pacific then South America&lt;/li&gt;
&lt;li&gt;Sao Paulo is the most expensive AWS region&lt;/li&gt;
&lt;li&gt;AWS Lambda has the most consistent pricing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#finding-your-cheapest-aws-region"&gt;
  &lt;/a&gt;
  Finding Your Cheapest AWS Region
&lt;/h2&gt;

&lt;p&gt;Of course, this cost analysis should form only the start of your research, as all architectures differ, so you’ll want an accurate estimate based on your situation.&lt;/p&gt;

&lt;p&gt;If you’re looking to learn more about cloud and AWS, be sure to check out: &lt;a href="https://openupthecloud.com/recommended-resources/"&gt;My (Highly) Recommended Books &amp;amp; Courses.&lt;/a&gt; You’ll probably also like the &lt;a href="http://newsletter.thedevcoach.co.uk/"&gt;Open Up The Cloud Newsletter&lt;/a&gt;, a monthly newsletter about cloud updates and news.&lt;/p&gt;




&lt;p&gt;Hey! 👋 If we haven't met, let me introduce myself, I'm &lt;a href="https://twitter.com/loujaybee"&gt;Lou&lt;/a&gt;, and I created &lt;em&gt;&lt;a href="http://thedevcoach.co.uk/"&gt;Open Up The Cloud&lt;/a&gt;&lt;/em&gt; to help you get your start, and grow your career in cloud 🚀. &lt;/p&gt;

&lt;p&gt;If you're interested in cloud, the best way to keep up-to-date with news, and everything I publish is via the &lt;a href="http://newsletter.thedevcoach.co.uk/"&gt;monthly cloud newsletter&lt;/a&gt;. And find &lt;em&gt;Open Up The Cloud&lt;/em&gt; on &lt;a href="https://www.youtube.com/channel/UCAklaE5D59xWtip-3Jwa7xA"&gt;YouTube&lt;/a&gt;, &lt;a href="https://twitter.com/openupthecloud"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.instagram.com/openupthecloud"&gt;Instagram&lt;/a&gt;... wherever you like to hang out! 😄&lt;/p&gt;




&lt;p&gt;The post &lt;a href="https://openupthecloud.com/which-aws-region-cheapest/"&gt;Which AWS Region Is Cheapest? A Costing Report&lt;/a&gt; appeared first on &lt;a href="https://openupthecloud.com"&gt;Open Up The Cloud&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
    <item>
      <title>How To Find Which AWS Region Is Closest To You?</title>
      <author>Lou (🚀 Open Up The Cloud ☁️)</author>
      <pubDate>Mon, 19 Jul 2021 07:23:59 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-to-find-which-aws-region-is-closest-to-you-2e5e</link>
      <guid>https://dev.to/aws-builders/how-to-find-which-aws-region-is-closest-to-you-2e5e</guid>
      <description>&lt;p&gt;You can’t do anything in AWS without picking a region. You can’t navigate the console, launch a server, or even &lt;a href="https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-region.html"&gt;use the SDK&lt;/a&gt;. AWS resources have to exist in some physical location. So where should you pick? And based on what?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fp0bKKEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/aws-regions-760x425.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fp0bKKEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/aws-regions-760x425.png" alt="Which AWS Region?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many first-time AWS users pick the region closest to them. This is okay to get started, but you should also understand the implications (such as cost, latency, resilience, and regulations) when choosing an AWS region.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which AWS region is closest to you?&lt;/strong&gt; Review the &lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/"&gt;AWS global infrastructure&lt;/a&gt; map to see your geographical distance to AWS regions. Use &lt;a href="https://www.cloudping.info/"&gt;cloudping.info&lt;/a&gt; to see latency from your browser, &lt;a href="http://cloudping.co"&gt;cloudping.co&lt;/a&gt; for inter-region latency, or &lt;a href="https://github.com/ekalinin/awsping"&gt;awsping&lt;/a&gt; (command line tool) to see latencies from a remote server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-closest-aws-regions-to-major-cities"&gt;
  &lt;/a&gt;
  The Closest AWS Regions To Major Cities
&lt;/h2&gt;

&lt;p&gt;Some of you will want to just get started quickly and don’t need to know the fine details involved in picking a region. If that’s you, here are the closest geographic regions to some major cities around the world. Take your pick.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Location&lt;/th&gt;
&lt;th&gt;AWS Region&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;America (San Francisco)&lt;/td&gt;
&lt;td&gt;Oregon / Northern California&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;America (New York)&lt;/td&gt;
&lt;td&gt;Northern Virginia / Ohio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;United Kingdom (London)&lt;/td&gt;
&lt;td&gt;London&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Russia (Moscow)&lt;/td&gt;
&lt;td&gt;Stockholm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Israel (Tel Aviv)&lt;/td&gt;
&lt;td&gt;Frankfurt&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;India (New Delhi)&lt;/td&gt;
&lt;td&gt;Mumbai&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Australia (Sydney)&lt;/td&gt;
&lt;td&gt;Sydney&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;If you want to calculate your AWS region more scientifically than picking based on geography alone there are a few techniques and tools that we’ll go through that you can use to create a shortlist of suitable regions.&lt;/p&gt;

&lt;p&gt;When you have that shortlist, there are some factors to consider such as cost and functionality differences which we’ll also cover. Let’s start by looking at the different ways to find your closest region more accurately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-shortlist-aws-regions"&gt;
  &lt;/a&gt;
  How To Shortlist AWS Regions
&lt;/h2&gt;

&lt;p&gt;Your first stop when choosing an AWS region should be the &lt;a href="https://aws.amazon.com/about-aws/global-infrastructure"&gt;AWS Global Infrastructure&lt;/a&gt;. On this part of the AWS website, you’ll find important details for each AWS region, such as the number of availability zones per region and proximity to edge locations. From here you can start to make a shortlist.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7jHwjixG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/awsglobalnetwork.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7jHwjixG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/awsglobalnetwork.png" alt="AWS Global Network Map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don’t be fooled by choosing an AWS region based solely on geographic proximity (i.e drawing a line between two locations). Because data doesn’t travel the internet in direct lines, it has to follow the existing infrastructure of the internet within countries and between them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zy9jNdUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/global-internet-infra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zy9jNdUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/global-internet-infra.png" alt="Global Internet Infrastructure Map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take a look at the &lt;a href="https://www.infrapedia.com/app"&gt;infrapedia global internet infrastructure map&lt;/a&gt; (above), to see what I mean. You’ll want to take the global infrastructure into account when choosing a region, and consider running latency tests before finalising your choice (more on how to do that below!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-your-nearest-aws-region-from-your-browser"&gt;
  &lt;/a&gt;
  Find Your Nearest AWS Region From Your Browser
&lt;/h2&gt;

&lt;p&gt;A neat way to find the AWS region closest to your current location is the website &lt;a href="https://www.cloudping.info/"&gt;cloudping.info&lt;/a&gt;, created by Michael Leonhard. Cloud ping will show you all the latencies to different AWS regions straight-in your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WR9JZef9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/cloudping.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WR9JZef9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/cloudping.png" alt="Cloud Ping Results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main downside of this approach is that it doesn’t allow you to test speeds to regions from arbitrary locations other than your own. To test latencies from different locations we’ll need a tool we can run on different machines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-your-nearest-aws-region-via-the-command-line"&gt;
  &lt;/a&gt;
  Find Your Nearest AWS Region Via The Command Line
&lt;/h2&gt;

&lt;p&gt;If you need to automate the process of finding your nearest region, you can use &lt;a href="http://git@github.com:ekalinin/awsping.git"&gt;AWS ping&lt;/a&gt;, by Eugene Kalinin, which you can find on GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wcnqq8WN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/awsping-github.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wcnqq8WN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/awsping-github.png" alt="AWS Ping Region Latency Results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The source code for AWS ping is quite simple (written in Go) should you needed to modify or extend it to suit your needs. You can use AWS ping to test latencies from different locations, or latencies between your shortlisted regions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0HmItxWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/awsping.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0HmItxWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/awsping.png" alt="AWS Ping CLI Output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-latencies-between-all-aws-regions"&gt;
  &lt;/a&gt;
  Find Latencies Between All AWS Regions
&lt;/h2&gt;

&lt;p&gt;But, sometimes, the latency you’re after is the latency between the AWS regions themselves, for instance, if you already have a region already chosen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K9e0t_d3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/region-latency.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K9e0t_d3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/region-latency.png" alt="Latencies Between All AWS Regions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A good tool for seeing latencies between regions is &lt;a href="https://www.cloudping.co/grid"&gt;cloudping.co&lt;/a&gt; (a different one this time!) created by &lt;a href="https://twitter.com/mda590"&gt;Matt Adorjan&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#factors-which-affect-the-aws-region-you-should-choose"&gt;
  &lt;/a&gt;
  Factors Which affect The AWS Region You Should Choose
&lt;/h2&gt;

&lt;p&gt;Not all AWS regions are the same with regards to cost and functionality. We’ve looked at some ways you can shortlist AWS regions, but we’ve mostly discussed geographical distance and latency. Let’s now take a look at the factors to consider before finalising your AWS region choice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#factor-1-latency"&gt;
  &lt;/a&gt;
  Factor 1: Latency
&lt;/h3&gt;

&lt;p&gt;As we’ve already discussed, latency to your customer is an important factor when choosing an AWS region. Be sure to factor in the internet infrastructure surrounding your chosen region, and not just the geographical distance, doing some testing of your own where you can. You’ll also want to test the latency between regions if you choose more than one.&lt;/p&gt;

&lt;p&gt;If latency is important to you, there also other AWS services and tools that are worth researching, such as &lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/localzones"&gt;AWS local zones&lt;/a&gt;, and &lt;a href="https://aws.amazon.com/edge/services/"&gt;AWS edge locations&lt;/a&gt;, which allow you to lower the physical distance to your customer, and also advanced routing techniques like &lt;a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html"&gt;latency and geo-based routing&lt;/a&gt; which allow you to dynamically find the most performant service to route your customers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#factor-2-cost-differences"&gt;
  &lt;/a&gt;
  Factor 2: Cost Differences
&lt;/h3&gt;

&lt;p&gt;Not all services cost the same across all regions— the differences in the price can be quite drastic where your choice of region could nearly double your cloud bill. The best way to understand the variation is to add your predicted or current architecture into the &lt;a href="https://calculator.aws/#/"&gt;the AWS cost calculator&lt;/a&gt; to compare between regions.&lt;br&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--52EPtufp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/differing-aws-costs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--52EPtufp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/differing-aws-costs.png" alt="Comparing the price of two EC2 instances in two regions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To give you an idea of the potential price differences, a &lt;strong&gt;t4g.xlarge (4 vcpus, 16 GiB RAM) EC2 instance&lt;/strong&gt; with a &lt;strong&gt;30GB EBS (GP2)&lt;/strong&gt; will cost you &lt;strong&gt;64.54 USD&lt;/strong&gt; in North Virginia, as compared with &lt;strong&gt;103.72 USD&lt;/strong&gt; in Cape town.&lt;/p&gt;

&lt;p&gt;Additionally, an often-overlooked cost factor is data transfer, which can be notoriously difficult to predict. Again, to get a high-level estimate of predicted transfer costs your best bet is to use the &lt;a href="https://calculator.aws/"&gt;AWS cost calculator&lt;/a&gt; but instead of adding a service, search for “Data Transfer”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzBJ489_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/data-trasnfer-regions.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzBJ489_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/data-trasnfer-regions.png" alt="Comparing data transfer costs between AWS regions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now of course most of you at this point will be thinking: “Which is the cheapest AWS region?” But pricing varies based on region, so it’s hard to definitively say which AWS region is cheapest. That being said, North Virginia is commonly reported as the cheapest region anecdotally.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#factor-3-functionality-differences"&gt;
  &lt;/a&gt;
  Factor 3: Functionality Differences
&lt;/h3&gt;

&lt;p&gt;Not all regions are given equal treatment when it comes to service rollout. AWS states: “Our general policy is to deliver AWS services, features and instance types to all AWS Regions within 12 months of general availability.” (&lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/regions_az/"&gt;source&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Whilst this is true in many cases, anecdotal evidence shows that some regions can wait years before a service becomes available. So if you want a cutting-edge service, it’s best to use one of the more actively updated regions (e.g. us-east-1). Find the &lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/?p=ngi&amp;amp;loc=4"&gt;full list of AWS services available in each region&lt;/a&gt; here.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#factor-4-stability-differs-per-region"&gt;
  &lt;/a&gt;
  Factor 4: Stability Differs Per Region
&lt;/h3&gt;

&lt;p&gt;Not all regions have the same stability. The availability of services between regions has been known to differ, with North Virginia (us-east-1) being notoriously unstable as most service updates are rolled out to that region first.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cj5nuGlx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1373606574116245505/LDUlelgc_normal.jpg" alt="Luc van Donkersgoed profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Luc van Donkersgoed
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @donkersgood
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Honest question: since us-east-1 can objectively be considered the least stable region, why would anyone use it, aside from strict latency requirements?
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:05 PM - 25 Nov 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1331690522373709829" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1331690522373709829" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1331690522373709829" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Because AWS doesn’t publish any region-specific availability data it’s hard to do a scientific region stability comparison. However in line with general best practices, for high availability, your workloads should be balanced across multiple availability zones, or even regions for redundancy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#factor-5-governance-requirements"&gt;
  &lt;/a&gt;
  Factor 5: Governance Requirements
&lt;/h3&gt;

&lt;p&gt;The final factor to consider when choosing an AWS region are your legal obligations. For compliance with policies such as &lt;a href="https://gdpr.eu/"&gt;GDPR&lt;/a&gt; it could be necessary for you to store or process data within a certain region, so don’t forget to consider the requirements for locating your data and services when making your choice on which AWS region to choose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choose-the-aws-region-right-for-you"&gt;
  &lt;/a&gt;
  Choose The AWS Region Right For You
&lt;/h2&gt;

&lt;p&gt;Quite a bit of analysis can go into finding the closest, best-fitting AWS region. If you’re just starting with AWS you can choose a region based on practicality. However, when it comes to moving services to production, consider things like latency, cost and functionality before you make your final decision.&lt;/p&gt;

&lt;p&gt;If you’re looking to learn more about AWS and the cloud, you should also check out &lt;a href="https://openupthecloud.com/recommended-resources/"&gt;My (Highly) Recommended Books &amp;amp; Courses&lt;/a&gt;, and check out the monthly &lt;a href="http://newsletter.thedevcoach.co.uk/"&gt;Open Up The Cloud newsletter&lt;/a&gt; to stay up to date with cloud news!&lt;/p&gt;




&lt;p&gt;Hey! 👋 If we haven't met, let me introduce myself, I'm &lt;a href="https://twitter.com/loujaybee"&gt;Lou&lt;/a&gt;, and I created &lt;em&gt;&lt;a href="http://thedevcoach.co.uk/"&gt;Open Up The Cloud&lt;/a&gt;&lt;/em&gt; to help you get your start, and grow your career in cloud 🚀. &lt;/p&gt;

&lt;p&gt;If you're interested in cloud, the best way to keep up-to-date with news, and everything I publish is via the &lt;a href="http://newsletter.thedevcoach.co.uk/"&gt;monthly cloud newsletter&lt;/a&gt;. And find &lt;em&gt;Open Up The Cloud&lt;/em&gt; on &lt;a href="https://www.youtube.com/channel/UCAklaE5D59xWtip-3Jwa7xA"&gt;YouTube&lt;/a&gt;, &lt;a href="https://twitter.com/openupthecloud"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.instagram.com/openupthecloud"&gt;Instagram&lt;/a&gt;... wherever you like to hang out! 😄&lt;/p&gt;




&lt;p&gt;The post &lt;a href="https://openupthecloud.com/find-aws-region-closest/"&gt;How To Find Which AWS Region Is Closest To You?&lt;/a&gt; appeared first on &lt;a href="https://openupthecloud.com"&gt;Open Up The Cloud&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>cloud</category>
    </item>
  </channel>
</rss>
