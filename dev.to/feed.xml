<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Searching Better In Google Using 5 Tricks!</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sun, 29 Aug 2021 22:56:40 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/searching-better-in-google-using-5-tricks-41l1</link>
      <guid>https://dev.to/ayabouchiha/searching-better-in-google-using-5-tricks-41l1</guid>
      <description>&lt;p&gt;Hello everybody, I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, today, I'm going to share with you 5 useful tips &amp;amp; tricks to search better on google and find what you want easily.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#related"&gt;
  &lt;/a&gt;
  related
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;related:&lt;a href="http://www.website.com"&gt;www.website.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;related: is a keyword used to find the websites that are like the specified one&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9MJlyVOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghy4jk2zouk4uuwckc7r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MJlyVOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghy4jk2zouk4uuwckc7r.PNG" alt="how to search in google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-double-quotes"&gt;
  &lt;/a&gt;
  "" (double quotes)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;"sentence"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;"": helps you to tell the search engine that the results have to include the exact sentence between quotes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Q-ftY1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvez8s9sjjjsas7pn3a7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Q-ftY1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvez8s9sjjjsas7pn3a7.PNG" alt="how to search in google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#site"&gt;
  &lt;/a&gt;
  site
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;site:&lt;a href="http://www.website.com"&gt;www.website.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;site: is used for searching for something on a specific website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lFvZhHx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z305egl146np950r7psz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lFvZhHx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z305egl146np950r7psz.PNG" alt="how to search in google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-minus"&gt;
  &lt;/a&gt;
  - (minus)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;-word&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;minus: used for excluding and ignoring specific words&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zuv5SWQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1432cwuxogsjyqhvj4z.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zuv5SWQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1432cwuxogsjyqhvj4z.PNG" alt="how to search in google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filetype"&gt;
  &lt;/a&gt;
  filetype
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;filetype:extension&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;filetype: used for specifying the file type of the wanted results&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZX_1fiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6yk4xfhzx702cf3iexf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZX_1fiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6yk4xfhzx702cf3iexf.PNG" alt="how to search in google"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eg3wHwXDIEc"&gt;https://www.youtube.com/watch?v=eg3wHwXDIEc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a good day&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>El amor  por el código sí existe</title>
      <author>Eloy Manuel Chacón Martínez</author>
      <pubDate>Sun, 29 Aug 2021 22:11:24 +0000</pubDate>
      <link>https://dev.to/eloymanuelch/el-amor-por-el-codigo-si-existe-2i6i</link>
      <guid>https://dev.to/eloymanuelch/el-amor-por-el-codigo-si-existe-2i6i</guid>
      <description>&lt;p&gt;Holaaaa Programador... No se trata de cosas banales o simplemente de un enamoramiento pasajero, el código te hace crear, te hace vivir, el código es como el pincel para el pintor, una herramienta capaz de hacernos crear cosas maravillosas, de la nada a algo que muchas personas pueden ver, usar, disfrutar, aprender, trabajar, en fin hacer que sus vidas sean más fáciles.&lt;/p&gt;

&lt;p&gt;Nosotros los programadores somos los Da Vinci del siglo XXI, con nuestros código hemos mantenido a la gente en contacto gracias a las redes sociales, los hemos entretenido y hasta enseñado muchas cosas con videos, hemos ayudado a millones de empresas a mostrar sus productos y servicios, hemos y hemos y hemos... la lista es interminable, pero ¿cómo inició esta historia de amor?&lt;/p&gt;

&lt;p&gt;Todo inició con un Hola Mundo, que alegría sentimos esa primera vez cuando el Hola Mundo apareció en nuestro navegador, fue amor a primera vista, eso no quiere decir que todo sea color de rosa, porque como en cualquier relación hay altas y bajas, como esa primera cuando nos salió Error 500, aaaarrrr me acuerdo y me lleno de coraje, porque son esas cosas incomprensibles que nunca lograremos entender, pero bueno unas cuantas respiraciones y unas cuantas caricias (ajustes) y ohalaaaa todo vuelve a la normalidad.&lt;/p&gt;

&lt;p&gt;Durante nuestra vida como programador conoceremos diferentes personas con idiomas diferentes (lenguajes de programación) y con personalidades diferentes (frameworks), algunos les gustan las tradicionales y con mucha experiencia y otros se la pasan de mujeriegos saltando de una en una, pero esta bien, porque a diferencia de la vida real, en nuestro mundo de programadores esta bien enamorarse de mucha gente, claro está siempre existirá una que será nuestra favorita.&lt;/p&gt;

&lt;p&gt;Así es como esta historia de amor, vive en nuestra computadora y en nuestra mente, yo solo espero seguir escribiendo código por muchísimos años hasta que sea un viejito, me imagino que ya para entonces si mis mano no dan para escribir pueda dictarle a algún both lo que pasa por mi mente.&lt;/p&gt;

&lt;p&gt;Saludos,&lt;/p&gt;

&lt;p&gt;Eloy Manuel&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codequality</category>
      <category>spanish</category>
      <category>codereview</category>
    </item>
    <item>
      <title>100 days of hacking</title>
      <author>Camila Vilarinho</author>
      <pubDate>Sun, 29 Aug 2021 21:41:55 +0000</pubDate>
      <link>https://dev.to/camilaavilarnho/100-days-of-hacking-4n13</link>
      <guid>https://dev.to/camilaavilarnho/100-days-of-hacking-4n13</guid>
      <description>&lt;p&gt;The #100daysofCode challenge was created by &lt;a href="https://twitter.com/ka11away"&gt;Alex Kallaway&lt;/a&gt; when he decided that he wanted to become a better programmer. In order to do that, he made a public commitment to code for 100 days in a row, thus helping him to create a new habit. By sharing about his challenge daily, he ended up encouraging a lot of people to do the same and created a movement of people looking for self improvement that goes beyond coding. &lt;/p&gt;

&lt;p&gt;Today this movement encompasses several others challenges in the #100DaysOfX, like one hundred days of reading, exercise, foreign languages and even the one hundred days without (#100daysWithout) to help people looking to quit a habit.&lt;/p&gt;

&lt;p&gt;It's proven that making a public commitment improves people’s ability to stick to changes and create new habits. This works very well with me: when I make a commitment with someone it's very important to me to keep what I promised. Even if no one is looking or asking me for updates, if I make a commitment I feel obligated to go all the way.&lt;/p&gt;

&lt;p&gt;This is a great thing, especially if you don't stick to your plans or projects for long like me. That's why I decided to start this challenge to encourage myself to learn more about what I've been most interested in lately: Hacking!*  🎉&lt;/p&gt;

&lt;p&gt;My interest in hacking started a long time ago, but only now I decided to overcome my fear and really learn more about the subject. My sister says something that makes a lot of sense: "When you put yourself in motion things happen". &lt;/p&gt;

&lt;p&gt;And it really happened: when I started to learn more about the subject and follow people that talked about hacking some really cool things started to happen, one of them was being selected to participate in the Bugcrowd Mentorship Program. Bugcrowd is a cybersecurity platform where companies have their bug bounty program to encourage security researchers to test their systems and identify vulnerabilities. &lt;/p&gt;

&lt;p&gt;It has being a great learning opportunity, but sometimes work, life and other things gets in the way and I end up not prioritising my hacking studies. So the focus of  my 100 days of hacking will be to study, practice and look for security vulnerabilities in web applications. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Motivations&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be able to track my learning progress.&lt;/li&gt;
&lt;li&gt;Make better use of the opportunity to be part of the Bugcrowd Mentoring Program.&lt;/li&gt;
&lt;li&gt;An opportunity to practice what I've been wanting to do for a while, which is to write more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Rules&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monday to Friday: study for 1h (theory + practice in labs)&lt;/li&gt;
&lt;li&gt;Saturday and Sunday: Bug hunting for 2 hours&lt;/li&gt;
&lt;li&gt;Write a blog post about what I learned in the week.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Goal at the end of the 100 days: &lt;strong&gt;find a valid bug 🐞&lt;/strong&gt;         &lt;/p&gt;

&lt;p&gt;*&lt;em&gt;By hacking I'm referring to Web Application Hacking, there are other types but my focus is this one.&lt;/em&gt;&lt;br&gt;&lt;br&gt;
*&lt;em&gt;I'm also referring to ethical hacking&lt;/em&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>100daysofhacking</category>
      <category>selfimprovement</category>
    </item>
    <item>
      <title>"npm" Command Cheat Sheet</title>
      <author>geetcloud</author>
      <pubDate>Sun, 29 Aug 2021 21:21:57 +0000</pubDate>
      <link>https://dev.to/geetcloud/npm-command-cheat-sheet-3j27</link>
      <guid>https://dev.to/geetcloud/npm-command-cheat-sheet-3j27</guid>
      <description>&lt;p&gt;Welcome back to a new blog post. Throughout my uses of npm and creating applications in angular, I have found a set of commands that I keep coming back to to use again and again. While they're all used very commonly, it might be heard to remember them all of the time. So without any further ado, here they are for your convenient use! Hope it helps.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#to-install-nodejs"&gt;
  &lt;/a&gt;
  To install node.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; # To install node.js
 # Install from the below official download link.
 # https://nodejs.org/en/#download

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-install-typescript"&gt;
  &lt;/a&gt;
  To install typescript
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To install typescript
npm install typescript -g

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-install-angular-cli"&gt;
  &lt;/a&gt;
  To install angular CLI
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#  To install angular CLI
npm install @angular/cli -g

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-check-angular-version"&gt;
  &lt;/a&gt;
  To check angular version
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To check angular version
ng version

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-check-the-existing-installed-paths-of-nodejs"&gt;
  &lt;/a&gt;
  To check the existing installed paths of node.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To check the existing installed paths of node.js
where node

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-create-new-angular-app"&gt;
  &lt;/a&gt;
  To create new angular app
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To create new angular app
ng new &amp;lt;app_name&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-create-module"&gt;
  &lt;/a&gt;
  To create module
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To create module
ng g module &amp;lt;module_name&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-install-dependencies"&gt;
  &lt;/a&gt;
  To install dependencies
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To install dependencies
npm install

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-run-or-serve-app"&gt;
  &lt;/a&gt;
  To run or serve app
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To run/serve app
#To serve app =&amp;gt; cd to the app folder and run
#Note:- npm start also will call ng serve and start the application.
ng serve

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-create-service"&gt;
  &lt;/a&gt;
  To create service
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To create service
ng gnerate service service_name

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-generate-interface"&gt;
  &lt;/a&gt;
  To generate interface
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To generate interface
ng generate interface git-search

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-install-latest-angularfire-and-firebase-for-latest-angular-cli-7x"&gt;
  &lt;/a&gt;
  To install latest AngularFire and Firebase for latest Angular CLI 7.x
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To install latest AngularFire and Firebase for latest Angular CLI 7.x
npm install firebase @angular/fire --save

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#to-skipavoid-long-path-in-terminal-shortcut"&gt;
  &lt;/a&gt;
  To skip/avoid long path in terminal (shortcut)
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To skip/avoid long path in terminal (shortcut)
prompt $$

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#thanks-for-reading-this-post"&gt;
  &lt;/a&gt;
  Thanks for reading this post!
&lt;/h3&gt;

&lt;p&gt;I hope this article is informative and helpful in some way. If it is, please like and share this article. Follow me on &lt;a href="https://twitter.com/geetcloud"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/sangeetha-karthik/"&gt;LinkedIn&lt;/a&gt; for more related tips and posts.&lt;/p&gt;

&lt;p&gt;Happy learning!&lt;/p&gt;

</description>
      <category>npm</category>
      <category>firebase</category>
      <category>angular</category>
      <category>node</category>
    </item>
    <item>
      <title>Asynchronous Rust: basic concepts</title>
      <author>Roger Torres Paes (he/him/ele)</author>
      <pubDate>Sun, 29 Aug 2021 20:56:01 +0000</pubDate>
      <link>https://dev.to/rogertorres/asynchronous-rust-basic-concepts-44ed</link>
      <guid>https://dev.to/rogertorres/asynchronous-rust-basic-concepts-44ed</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;TL;DR: I will try to give an easy-to-understand account of some of concepts surrounding asynchronous Rust: async, await, Future, Poll, Context, Waker, Executor and Reactor.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As with most things I write here, we already have good content related to asynchronous Rust. Let me mention a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://rust-lang.github.io/async-book"&gt;&lt;em&gt;Asynchronous Programming in Rust&lt;/em&gt;&lt;/a&gt;, a.k.a. &lt;em&gt;async book&lt;/em&gt;; incomplete, but great.&lt;/li&gt;
&lt;li&gt;Steve's talks on &lt;a href="https://www.youtube.com/watch?v=lJ3NC-R3gSI"&gt;Rust's Journey to async/await&lt;/a&gt; and on &lt;a href="https://www.youtube.com/watch?v=NNwK5ZPAJCk"&gt;how it works&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Without Boats' &lt;a href="https://without.boats/blog/await-decision/"&gt;proposal for await syntax&lt;/a&gt; (the other entries with the tags &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;Future&lt;/code&gt; are also excellent).&lt;/li&gt;
&lt;li&gt;Jon's stream on &lt;a href="https://www.youtube.com/watch?v=9_3krAQtD2k"&gt;how Futures and async/await works&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this amount of superb information, why writing about it? My answer here is the same for &lt;del&gt;almost&lt;/del&gt; every other entry on my DEV blog: to reach an audience for which this content is still a bit too hard to grasp.&lt;/p&gt;

&lt;p&gt;So, if you want something in a more intermediary level, go straight to the content listed above. Otherwise, let's go :)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#asyncawait"&gt;
  &lt;/a&gt;
  async/.await
&lt;/h2&gt;

&lt;p&gt;Asynchronous Rust (async Rust, for short) is delivered through the &lt;code&gt;async/.await&lt;/code&gt; syntax. It means that these two keywords (&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;.await&lt;/code&gt;) are the centerpieces of writing async Rust. But what is async Rust?&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;async book&lt;/em&gt; states that async is a &lt;em&gt;concurrent programming model&lt;/em&gt;. Concurrent means that different tasks will perform their activities alternatively; e.g., task A does a bit of work, hands the thread over to task B, who works a little and give it back, etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Do not confuse it with parallel programming, where different tasks are running&lt;/em&gt; simultaneously.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In short, we use the &lt;code&gt;async&lt;/code&gt; keyword to tell Rust that a block or a function is going to be asynchronous.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// asynchronous block&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// asynchronous function&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what does it mean &lt;strong&gt;for a Rust program&lt;/strong&gt; to be asynchronous? It means that it will return an implementation of the &lt;code&gt;Future&lt;/code&gt; trait. I will cover &lt;code&gt;Future&lt;/code&gt; in the next section; for now, it is enough to say that a &lt;code&gt;Future&lt;/code&gt; represents a value that may or may not be ready.&lt;/p&gt;

&lt;p&gt;We handle a &lt;code&gt;Future&lt;/code&gt; that is returned by an async block/function with the &lt;code&gt;.await&lt;/code&gt; keyword. Consider the silly example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c"&gt;// it is possible to .await only inside async fn or block&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, &lt;code&gt;x&lt;/code&gt; is not &lt;code&gt;i32&lt;/code&gt;, but the implementation of the &lt;code&gt;Future&lt;/code&gt; trait (&lt;code&gt;impl Future&amp;lt;Output = i32&amp;gt;&lt;/code&gt; in this case). The variable &lt;code&gt;y&lt;/code&gt; on the other hand, will be a &lt;code&gt;i32&lt;/code&gt;: &lt;strong&gt;11&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Other way to visualize this is to understand that Rust will &lt;em&gt;desugar&lt;/em&gt; this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;into something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, there is no asynchronous anything happening here. But if &lt;code&gt;foo()&lt;/code&gt; was complex, having to wait for &lt;a href="https://dev.to/rogertorres/smart-pointers-in-rust-what-why-and-how-oma"&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt; locks or a stream, instead of holding the thread for the whole time, Rust would do as much progress as possible on &lt;code&gt;foo()&lt;/code&gt; and then release the thread to do something else, taking it back when it could do more work. &lt;/p&gt;

&lt;p&gt;Hopefully, it will make sense after we go through concepts like &lt;code&gt;Future&lt;/code&gt;, &lt;code&gt;Poll&lt;/code&gt; and &lt;code&gt;Wake&lt;/code&gt;. For now, it is enough that you have a general idea of the use of both &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Be sure to read the &lt;a href="https://rust-lang.github.io/async-book/01_getting_started/04_async_await_primer.html"&gt;async/.await Primer&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#futures"&gt;
  &lt;/a&gt;
  Futures
&lt;/h2&gt;

&lt;p&gt;I think it is not an exaggeration to say that the &lt;code&gt;Future&lt;/code&gt; trait is the heart of async Rust. &lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Future&lt;/code&gt; is a trait that has:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;code&gt;Output&lt;/code&gt; type (&lt;code&gt;i32&lt;/code&gt; in the example above).&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;poll&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;poll()&lt;/code&gt; is a function that does as much work as it can, and then returns an enum called &lt;code&gt;Poll&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;Poll&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;Ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;Pending&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This enum is the representation of what I wrote earlier, that a Future represents a value that may or may not be ready.&lt;/p&gt;

&lt;p&gt;The general idea behind this function is simple: when someone calls &lt;code&gt;poll()&lt;/code&gt; on a future, if it went all the way through completion, it returns &lt;code&gt;Ready(T)&lt;/code&gt; and the &lt;code&gt;.await&lt;/code&gt; will return &lt;code&gt;T&lt;/code&gt;. Otherwise, it will return &lt;code&gt;Pending&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The question is, if it returns &lt;code&gt;Pending&lt;/code&gt;, how do we get back at it, so it can keep working towards completion? The short answer is the &lt;em&gt;reactor&lt;/em&gt;. However, we have some ground to cover before getting there.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#poll-context-waker-executor-and-reactor"&gt;
  &lt;/a&gt;
  Poll, Context, Waker, Executor and Reactor
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Lots of words!&lt;/strong&gt; But I honestly think it is easier to bundle everything together because it is easier to understand what they do in context. And to illustrate this, I came up with a simplified hypothetical scenario.&lt;/p&gt;

&lt;p&gt;Suppose we have a &lt;code&gt;Future&lt;/code&gt; created via &lt;code&gt;async&lt;/code&gt; keyword. Let's remember what a Future is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[must_use&lt;/span&gt; &lt;span class="nd"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"futures do nothing unless you `.await` or poll them"&lt;/span&gt;&lt;span class="nd"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Poll&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nn"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As hinted by the code above, futures in Rust are lazy, which means that just declaring them will not make them run.&lt;/p&gt;

&lt;p&gt;Now, let's say we run the future using &lt;code&gt;.await&lt;/code&gt;. "Run" here means delivering it to an executor that will call &lt;code&gt;poll()&lt;/code&gt; in the future. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I will not cover&lt;/em&gt; &lt;code&gt;Pin&lt;/code&gt; &lt;em&gt;here, as it is somewhat complex and not necessary to understand what is going on here.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If &lt;code&gt;poll()&lt;/code&gt; returns &lt;code&gt;Ready&lt;/code&gt;, the executor will get rid of it.&lt;/p&gt;

&lt;p&gt;Alternatively, if the polled future wasn't able to do all the work, it will return &lt;code&gt;Pending&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;After receiving &lt;code&gt;Pending&lt;/code&gt;, the executor will not poll the future again until it is told so. And who is going to tell him? The reactor. It will call the &lt;code&gt;wake()&lt;/code&gt; function on the &lt;code&gt;Waker&lt;/code&gt; that was passed as an argument in the &lt;code&gt;poll()&lt;/code&gt; function. That allows the executor to know that the associated task is ready to move on. &lt;/p&gt;

&lt;p&gt;When we talk about executor and reactor we are already talking about runtimes; and when we talk about runtimes we are usually talking about &lt;a href="https://tokio.rs/"&gt;Tokio&lt;/a&gt;. In fact, calling it by the names &lt;a href="https://docs.rs/tokio/0.1.22/tokio/executor/index.html"&gt;executor&lt;/a&gt; and &lt;a href="https://docs.rs/tokio/0.1.22/tokio/reactor/index.html"&gt;reactor&lt;/a&gt; is already adhering to Tokio nomenclatures.&lt;/p&gt;

&lt;p&gt;Regarding the executor, what Tokio does is more or less what I have described above. When it comes to the reactor, complexity grows exponentially. And the reason is that the reactor is some sort of "interface" between the future and some I/O. &lt;a href="https://www.youtube.com/watch?v=9_3krAQtD2k&amp;amp;t=3004s"&gt;Jon spent 45 minutes explaining this while drawing on a blackboard,&lt;/a&gt; and I will not pretend I can do a better job. So, if you want to dive into this level of detail, check the link above.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Let us recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;async&lt;/code&gt; is used to create an asynchronous block or function, making it return a &lt;code&gt;Future&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.await&lt;/code&gt; will wait for the completion of the future and then give back the value (or an error, which is why it is common to use the &lt;a href="https://doc.rust-lang.org/reference/expressions/operator-expr.html#the-question-mark-operator"&gt;question mark operator&lt;/a&gt; in &lt;code&gt;.await?&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Future&lt;/code&gt; is the representation of an asynchronous computation, a value that may or may not be ready, something that is represented by the variants of the &lt;code&gt;Poll&lt;/code&gt; enum.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Poll&lt;/code&gt; is the enum returned by a future, whose variants can be either &lt;code&gt;Ready&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code&gt;Pending&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;poll()&lt;/code&gt; is the function that works the future towards its completion. It receives a &lt;code&gt;Context&lt;/code&gt; as a parameter and is called by the executor.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Context&lt;/code&gt; is a wrapper for &lt;code&gt;Waker&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Waker&lt;/code&gt; is a type that contains a &lt;code&gt;wake()&lt;/code&gt; function that will be called by the &lt;strong&gt;reactor&lt;/strong&gt;, telling the &lt;strong&gt;executor&lt;/strong&gt; that it may poll the future again.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Executor&lt;/strong&gt; is a scheduler that executes the futures by calling &lt;code&gt;poll()&lt;/code&gt; repeatedly.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reactor&lt;/strong&gt; is something like an event loop responsible for waking up the pending futures.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Ok, there is certainly more to talk about, such as the &lt;code&gt;Send&lt;/code&gt; and &lt;code&gt;Sync&lt;/code&gt; traits, &lt;code&gt;Pinning&lt;/code&gt; and so on, but I think that, for a beginner post, we had enough.&lt;/p&gt;

&lt;p&gt;See you next time!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cover art by &lt;a href="https://unsplash.com/photos/9AxFJaNySB8"&gt;TK&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>rust</category>
      <category>beginners</category>
      <category>programming</category>
      <category>learning</category>
    </item>
    <item>
      <title>Git and GitHub - The Complete Guides - Chapter 1</title>
      <author>iFieryGod</author>
      <pubDate>Sun, 29 Aug 2021 20:43:12 +0000</pubDate>
      <link>https://dev.to/ifierygod/git-and-github-the-complete-guides-chapter-1-23cp</link>
      <guid>https://dev.to/ifierygod/git-and-github-the-complete-guides-chapter-1-23cp</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FhW7ONfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wawlk9o3wj5n9y1yszrr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FhW7ONfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wawlk9o3wj5n9y1yszrr.gif" alt="Greetings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you make websites, mobiles app or write any type of code, it is a good idea to use a &lt;u&gt;version control system.&lt;/u&gt;&lt;br&gt;
The most popular and widely used version control system is &lt;strong&gt;GitHub&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nowadays any professional developer or designer needs to know how to work with Git and Github.&lt;/p&gt;

&lt;h2&gt;Git&lt;/h2&gt;

&lt;p&gt;Git enables you to record different versions of your project and it allows you to go back in time to check the previous states of your project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---rXJbWLO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vmbowsfhacp70bg3gyo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---rXJbWLO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vmbowsfhacp70bg3gyo.gif" alt="Git"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;GitHub&lt;/h2&gt;

&lt;p&gt;Github is an online service that allows you to share your code with the world and also allows you to collaborate with different developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dnsj9HNU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzdbcfw21iqc8mzupsk3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dnsj9HNU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzdbcfw21iqc8mzupsk3.gif" alt="Git-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Chapter 1: Git Basics&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What is Git?&lt;/li&gt;
&lt;li&gt;Git Setup&lt;/li&gt;
&lt;li&gt;Basics of Terminal&lt;/li&gt;
&lt;li&gt;Create first Repository&lt;/li&gt;
&lt;li&gt;Make first Commit&lt;/li&gt;
&lt;li&gt;Check History&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;What is Git?&lt;/h2&gt;

&lt;p&gt;Git is a distributed version control system. Those of you not familiar with Git are probably feeling this explanation is not quite clear.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--19lQO2rv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1e7q5rx52st1wd4b4ow0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--19lQO2rv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1e7q5rx52st1wd4b4ow0.gif" alt="huh"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make it a bit simpler, &lt;strong&gt;version control&lt;/strong&gt; or you may also hear someone say &lt;strong&gt;source control&lt;/strong&gt; is a system that records changes of your file/project and then you are able to recall any specific version of that file/project later.&lt;/p&gt;

&lt;p&gt;In other words you can go back in time and get the previous state of your project and even compare it with its current state.&lt;/p&gt;

&lt;p&gt;For those of you familiar with gaming, the concept of version control is similar to a &lt;strong&gt;save file&lt;/strong&gt;. You would usually save a game after you accomplished a task, since you prefer not to repeat it, in case you fail as you progress further. What's also useful it allows you to go back to that save file whenever you want and play the game exactly how you left it when you saved. &lt;strong&gt;&lt;em&gt;That's the basic idea behind version control.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To really see how useful Git is, you have to think how you would go about doing this sort of thing manually. So let's say you have been working on a website and you've completed about half of what you need to do. You are happy so far, so you save the changes you made. You can call this folder version 1 of the website.&lt;/p&gt;

&lt;p&gt;Let's say the following day you want to try out something new in the website, that involves changing everything or some part of what you were doing the previous day. However you still want to keep your previous work just in case things don't work out. To make things easy, you will make a copy of the version 1 folder and call the copy version 2 and so on and so on...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ix78ZKO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtkfvp5ymcl8catvb27i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ix78ZKO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtkfvp5ymcl8catvb27i.gif" alt="Why-Git"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not only is this tedious, it's painful to manage and it can also fill up the space on your storage, especially if you working on really big projects. So this is not the most efficient way of doing this type of thing. This is why the version control system was created.&lt;/p&gt;

&lt;p&gt;Version control allows you to make &lt;em&gt;snapshots&lt;/em&gt; of the current state of your project which means it saves all the different versions of the project in just one directory.&lt;/p&gt;

&lt;p&gt;There are many version control systems out there but the most popular is Git.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9OoGv_aH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nuishow75uy4x9getqui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9OoGv_aH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nuishow75uy4x9getqui.png" alt="Git-on-top"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the advantages of Git is &lt;strong&gt;Collaboration&lt;/strong&gt;, this is the ability to have different developers work on the same project. The most common way to do this is through Github which is an online service, where you can host your projects. Github is a shareable place where everyone can work on and see your projects. Github will be discussed in later chapters...&lt;/p&gt;

&lt;p&gt;We said that Git is a a distributed version control system. In general there are two types of version control systems. &lt;strong&gt;Centralised&lt;/strong&gt; system and &lt;strong&gt;Distributed&lt;/strong&gt; or &lt;strong&gt;Decentralised&lt;/strong&gt; system.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IV8d0YSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzgdre9ynflgjboy1r3j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IV8d0YSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzgdre9ynflgjboy1r3j.png" alt="types-of-version-controls"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Centralised version control systems have a a single server that contains all the different versions of projects so that developers can collaborate. This type of version control has its downsides.&lt;/p&gt;

&lt;h2&gt;Drawbacks&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Without a network connection then you will not have access to versions&lt;/li&gt;
&lt;li&gt;If the server corrupts, you will lose all versions&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Distributed version control systems allows you to save versions of your project locally on different computers and also on the server, each copy of the project is a complete backup of all your data.&lt;/p&gt;

&lt;h2&gt;Upside&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If the server corrupts, you still have complete project data stored locally.&lt;/li&gt;
&lt;li&gt;You don't need network connection in order to save versions of your project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;How Git works&lt;/h2&gt;

&lt;p&gt;In order to use Git in your project, first of all you need to &lt;strong&gt;initialise&lt;/strong&gt; it. Lets say we have a folder called My-Website in which we have a couple a different files for our website.&lt;/p&gt;

&lt;p&gt;After &lt;strong&gt;Git initialisation&lt;/strong&gt;, there will be a folder created called &lt;strong&gt;.git&lt;/strong&gt;, how to perform Git initialisation will be discussed later...&lt;/p&gt;

&lt;p&gt;Once the .git folder is created, that entire directory where the .git folder is placed will become a repository. Sometimes just called a &lt;strong&gt;repo&lt;/strong&gt;. A repo is a &lt;em&gt;&lt;u&gt;container&lt;/u&gt;&lt;/em&gt; for a project that you want to track with Git.&lt;/p&gt;

&lt;p&gt;Now we are able to track changes to files in the entire directory. All the changes will be recognised by Git.&lt;/p&gt;

&lt;blockquote&gt;Any changes made outside/above of the directory where the .git folder is placed will not be tracked.&lt;/blockquote&gt; 

&lt;p&gt;Now lets say we have a new file we want add to our repo, for instance a javascript file called &lt;em&gt;script.js&lt;/em&gt; and we want to set this version of our project in history. We can do that by using &lt;strong&gt;commit&lt;/strong&gt; which actually allows us to take a snapshot and set the current state of our project in history.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cYOllQoi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sj2g4dcmfpls2hfdcj9i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cYOllQoi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sj2g4dcmfpls2hfdcj9i.gif" alt="repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's another diagram to better explain this concept. Let's say the line represents the history or &lt;em&gt;timeline&lt;/em&gt; of the development of the project. Before we have started with anything we are at the &lt;em&gt;start&lt;/em&gt; of the project. When we start doing some work and we want to set the state of the project we have to do a commit. After some more work we add more files to the project and do another commit to set the state in history.&lt;/p&gt;

&lt;p&gt;We have now created the history of the development of the project. Now anytime in the future we can go back in time and get any previous state of the project. In reality we can make as many commits as we want.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ej2aC68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkcrd7gonv575gp2umni.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ej2aC68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkcrd7gonv575gp2umni.gif" alt="Timeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;The line in the diagram is called the &lt;strong&gt;branch&lt;/strong&gt; or to be more precise it's called the &lt;strong&gt;Master Branch&lt;/strong&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Git Setup&lt;/h2&gt;

&lt;p&gt;To get properly setup with everything to follow along with the guides we are going to need a &lt;strong&gt;terminal&lt;/strong&gt; and a &lt;strong&gt;text editor&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;My recommended text editor is Visual Studio Code, which you can find and download here &lt;a href="https://visualstudio.microsoft.com/"&gt;VS_Code&lt;/a&gt;&lt;br&gt;
It is relatively simple to download and install.&lt;/p&gt;

&lt;p&gt;To find and download Git you can go to &lt;a href="https://git-scm.com/"&gt;https://git-scm.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ju2KKwIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hk1t4tx0yaebl7tnne3x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ju2KKwIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hk1t4tx0yaebl7tnne3x.gif" alt="git-upload"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6xBtBSzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fy206tyxiht8e9h52byg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6xBtBSzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fy206tyxiht8e9h52byg.gif" alt="git-upload-2"&gt;&lt;/a&gt;&lt;br&gt;
We can see the version of Git by typing the following into the GitBash terminal and pressing enter/carriage return: &lt;strong&gt;git --version&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jyTa7yoS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94tnpmwz6m262j6p8a6t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jyTa7yoS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94tnpmwz6m262j6p8a6t.gif" alt="git-bash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Basics of Terminal&lt;/h2&gt;

&lt;p&gt;When you open GitBash, by default the current directory is the folder of the user. &lt;/p&gt;

&lt;p&gt;To check this you can use the command: &lt;strong&gt;pwd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To navigate between directories, we can use the command: &lt;strong&gt;cd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For example to navigate from the user directory to the Desktop. You can enter the command: &lt;strong&gt;cd Desktop&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to move back up the directory you can use the command: &lt;strong&gt;cd ..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can move up more than one directory by using: &lt;strong&gt;cd ../..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we are in the Desktop directory, in order to create a folder we use the command: &lt;strong&gt;mkdir&lt;/strong&gt;&lt;br&gt;
We use this command followed by the name of the folder you want to create. for example: &lt;strong&gt;mkdir myFolder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can navigate inside the folder using command: &lt;strong&gt;cd myFolder&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;With GitBash you don't have to write the entire folder name, "myFolder". You can enter the starting characters and press &lt;strong&gt;TAB&lt;/strong&gt; and GitBash will autocomplete it automatically.&lt;/blockquote&gt;

&lt;p&gt;To create files we use the command: &lt;strong&gt;touch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For example we can create a file in the myFolder directory by typing: &lt;strong&gt;touch index.html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can see which files exist in a directory by using the command: &lt;strong&gt;ls&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To rename a file we use the command: &lt;strong&gt;mv&lt;/strong&gt;&lt;br&gt;
The &lt;strong&gt;mv&lt;/strong&gt; command takes the original name followed by the new name.&lt;br&gt;
For example: &lt;strong&gt;mv index.html about.html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To copy a file we can use the command: &lt;strong&gt;cp&lt;/strong&gt;&lt;br&gt;
The &lt;strong&gt;cp&lt;/strong&gt; command takes the name of the file you want to copy followed by the directory you want to place it in.&lt;br&gt;
For example: &lt;strong&gt;cp index.html ..&lt;/strong&gt;&lt;br&gt;
This will place the file in the Desktop directory.&lt;/p&gt;

&lt;blockquote&gt;Just like with any file system, you cannot place a file with the same name as an existing file in that folder&lt;/blockquote&gt;

&lt;p&gt;To delete a file we can use the command: &lt;strong&gt;rm&lt;/strong&gt;&lt;br&gt;
This command is followed by the name of the file you want to delete.&lt;br&gt;
For example: &lt;strong&gt;rm about.html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To delete a folder we can use the command: &lt;strong&gt;rm -rf&lt;/strong&gt;&lt;br&gt;
This command is followed by the name of the folder you want to delete.&lt;br&gt;
For example: &lt;strong&gt;rm -rf myFolder/&lt;strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To clear the contents of the terminal use the command: &lt;strong&gt;clear&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pwd : shows you the current directory to are inside of&lt;/li&gt;
&lt;li&gt;cd : To navigate between directories&lt;/li&gt;
&lt;li&gt;mkdir : create a folder&lt;/li&gt;
&lt;li&gt;touch : To create files&lt;/li&gt;
&lt;li&gt;ls : You can see which files exist in a directory&lt;/li&gt;
&lt;li&gt;mv : To rename a file&lt;/li&gt;
&lt;li&gt;cp : To copy a file&lt;/li&gt;
&lt;li&gt;rm : To delete a file&lt;/li&gt;
&lt;li&gt;rm -rf : To delete a folder&lt;/li&gt;
&lt;li&gt;clear - to clear the terminal&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Create first Repository&lt;/h2&gt;

&lt;p&gt;To create our first repository we first need to open GitBash and create a folder named gitProject inside our Desktop directory.&lt;/p&gt;

&lt;p&gt;To open Visual Studio Code along with the folder we created, use the command: &lt;strong&gt;code gitProject&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Visual Studio Code will now open inside the gitProject directory. Now we need to create a file called index.html inside our gitProject directory.&lt;/p&gt;

&lt;p&gt;We can also create a file by using VS-Code (Visual Studio Code)&lt;/p&gt;

&lt;p&gt;Like we said before, the first thing we need to do in order to create a git repository is to perform a &lt;strong&gt;git initialisation&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;We do this by typing our first Git command: &lt;strong&gt;git init&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4QJEWlYg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ko3g5uiobsh770zt2ss.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4QJEWlYg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ko3g5uiobsh770zt2ss.gif" alt="Git repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see when we perform git initialisation, a new folder called .git is created inside our project directory. If you notice our files inside our directory also changed &lt;em&gt;&lt;u&gt;green&lt;/u&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you don't see the .git folder, it may be that visual studio code is not set to display it. To change that you can go to the setting in VS-Code. If you still don't see it after making the change, restart the text editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OqqwUxGX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljsda8nwy4csqr7tujdt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OqqwUxGX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljsda8nwy4csqr7tujdt.gif" alt="git-repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So far we have a new folder called .git and our files have turned green but our files are not setup to be tracked by git. This can be proven by the &lt;strong&gt;U&lt;/strong&gt; on the right side of our files. This means our files are untracked. We can check whether this is true by using another git command we will be using frequently: &lt;strong&gt;git status&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lQvoP4RJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18dl9b9ktq1xqxk8hj00.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lQvoP4RJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18dl9b9ktq1xqxk8hj00.gif" alt="git-status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are still many git commands we will be discussing later but for any specific commands we do not cover here can be explored by using the &lt;strong&gt;--help&lt;/strong&gt; parameter after a git command.&lt;br&gt;
For example: &lt;strong&gt;git init --help&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RhYjgukc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqiahn356fcock0a1kvr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RhYjgukc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqiahn356fcock0a1kvr.gif" alt="git-help"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Make first Commit&lt;/h2&gt;

&lt;p&gt;Time to go through the whole cycle, meaning from untracked files until we commit. There are several phases that a file/project goes through but remember in general there are two primary phases, &lt;strong&gt;UNTRACKED&lt;/strong&gt; and &lt;strong&gt;TRACKED&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tracked: files which were in the last snapshot.&lt;/li&gt;
&lt;li&gt;Untracked: Files which were not in the last snapshot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below we can see the phases a file goes through and the commands used to change a files state:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r_9rphbX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdvzhwvr8pqc7s7p5zs4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r_9rphbX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdvzhwvr8pqc7s7p5zs4.gif" alt="git-phases"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown above, we have another git command that puts our files in the staged status, meaning our files are now ready to be committed. To add files to the staged area we use the command: &lt;strong&gt;git add&lt;/strong&gt;&lt;br&gt;
The command is followed by the file/files you want to add to the staged status.&lt;br&gt;
For example: &lt;strong&gt;git add index.html style.css&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once we stage our files we can check the status of the files by using the command: &lt;strong&gt;git status&lt;/strong&gt;&lt;br&gt;
We can also remove the files from the staged status by using the command: &lt;strong&gt;git rm --cached&lt;/strong&gt;&lt;br&gt;
This command is followed by the name of the file you want to remove from the staged status.&lt;br&gt;
For example: &lt;strong&gt;git rm --cached index.html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yHvgDz10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idtrppt87jyp55aofn96.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yHvgDz10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idtrppt87jyp55aofn96.gif" alt="git-status-check"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We now are ready to make our first commit!&lt;br&gt;
To make a commit we use the git command: &lt;strong&gt;git commit -m "placeholder"&lt;/strong&gt;&lt;br&gt;
The git commit command requires us to create a message describing our commit, this is what goes in-between quotation marks.&lt;/p&gt;

&lt;blockquote&gt;The message should be short and descriptive.&lt;/blockquote&gt;

&lt;p&gt;You might be surprised to see git respond with a message &lt;strong&gt;"Please tell me who you are"&lt;/strong&gt; that requires you to run a few necessary commands. This is shown because git needs to know who you are, since it will track which developer made the snapshots to the files of a project.&lt;/p&gt;

&lt;p&gt;We will first start by giving git our name.&lt;br&gt;
We do this by typing the commands: &lt;strong&gt;git config --global user.name John&lt;/strong&gt;&lt;br&gt;
Next we will give git our email address. You can use your real email if you want to or a fictional one like we have here.&lt;br&gt;
We do this by typing the commands: &lt;strong&gt;git config --global user.email john&lt;span&gt;@&lt;/span&gt;gmail.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XnwtxBJ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4bo1wl7iuykha1l8btc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XnwtxBJ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4bo1wl7iuykha1l8btc.gif" alt="git-authentication"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we make our commit we have to check that our username and email address are correct, we can do this by using the following commands. &lt;br&gt;
To check our username we use the command: &lt;strong&gt;git config --global user.name&lt;/strong&gt;&lt;br&gt;
To check our email address we use the command: &lt;strong&gt;git config --global user.email&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally we can perform our commit!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sB-kSEvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf4eokyv8vhq1521wukp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sB-kSEvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf4eokyv8vhq1521wukp.gif" alt="git-commit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may think that once you perform a commit, you are storing a copy of the project. &lt;strong&gt;But that's not right!&lt;/strong&gt;&lt;br&gt;
Every time you make a commit, git basically takes a picture of what your files look like at a specific moment and it stores a reference to that snapshot. This a one of the advantages of using git.&lt;/p&gt;

&lt;p&gt;We have covered the phases or cycle a file goes through when using git, we have given our name and email address to git so that it knows who we are and we performed our first commit, I think it's time to move on...&lt;/p&gt;

&lt;h2&gt;Check History&lt;/h2&gt;

&lt;p&gt;Checking the history of our project is a valuable asset especially as time goes on, going back in time to see your previous work has great uses for developers.&lt;/p&gt;

&lt;p&gt;Imagine you are working on a project and you have tons of files to modify, when you use the &lt;strong&gt;git add&lt;/strong&gt; command followed by the file/files you need to add. It can be tedious to add each file name especially if you got 20+ files to stage. Another way to add all the files you inserted and modified at once is the command: &lt;strong&gt;git add .&lt;/strong&gt;. Adding the . at the end, will select all files that have been inserted or modified.&lt;/p&gt;

&lt;p&gt;After we've added new files and made modifications to existing ones. We need to prepare them for a commit by using &lt;strong&gt;git add&lt;/strong&gt;. Once they have been committed we can check the history of our commits by using the command: &lt;strong&gt;git log&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zztq3iYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frt6az4f91q4h152fecd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zztq3iYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frt6az4f91q4h152fecd.gif" alt="git-log"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The output of the log shows us our commits we've made. The first thing to notice is the string of weird characters next to the word commit. These weird characters are actually the unique identifier of this specific commit.&lt;br&gt;
Next we see the (Head -&amp;gt; master), which is a sort of pointer, but this will be discussed later...&lt;br&gt;
Below that we see the Author, which is the person who made the commit followed by the &lt;em&gt;date and time&lt;/em&gt; the commit was made.&lt;br&gt;
Lastly we see the message of the particular commit.&lt;/p&gt;

&lt;p&gt;But lets say you have made a lot of commits and you want to see them all, having this long output can make it difficult to navigate, this is why there is another way which summarises the logs returned from using &lt;strong&gt;git log&lt;/strong&gt;&lt;br&gt;
The command which will give us a shorter output is: &lt;strong&gt;git log --oneline&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FMIIR4Fu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9u3fg64h997rhj12okx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FMIIR4Fu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9u3fg64h997rhj12okx.gif" alt="git-log-short"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is surely a better output than before and makes it easier to navigate and make sense of our commits we've made.&lt;/p&gt;

&lt;p&gt;This concludes this chapter on Git and Github. I hope you enjoyed it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PM0Calsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqlnh8gjmc4kj1r99kzg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PM0Calsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqlnh8gjmc4kj1r99kzg.gif" alt="phew"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The CSS 'Scrabble' writer — The next gen typewriter</title>
      <author>Temani Afif</author>
      <pubDate>Sun, 29 Aug 2021 20:42:29 +0000</pubDate>
      <link>https://dev.to/afif/the-css-scrabble-writer-the-next-gen-typewriter-fbi</link>
      <guid>https://dev.to/afif/the-css-scrabble-writer-the-next-gen-typewriter-fbi</guid>
      <description>&lt;p&gt;Get tired of the classic typewriter and its blinking caret? I am here to the rescue with my 'Scrabble' writer. A new and innovative way to type your text. &lt;/p&gt;

&lt;p&gt;Impress your visitor with such unexpected animation!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qKTl1hIY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2uetxrjcw02jei2sdbv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qKTl1hIY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2uetxrjcw02jei2sdbv.gif" alt="CSS scrabble writer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#see-the-demo"&gt;
  &lt;/a&gt;
  &lt;a href="https://codepen.io/t_afif/pen/vYZNVPX"&gt;See the Demo&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The HTML code is pretty basic and all you have to do is to adjust a CSS variable (for the number of letters) and the &lt;code&gt;font-size&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"scrabble"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;CSS&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"scrabble"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;is&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"scrabble animate"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"--n:5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;crazy&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can easily animate any text you want:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWoaxNa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;PS: click on the "rerun" button to see the animation again&lt;/sup&gt;&lt;/p&gt;



&lt;p&gt;A quick overview of the previous events:&lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/alvaromontoro"&gt;@alvaromontoro&lt;/a&gt;
 started the war with his CSS-only typewriter:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alvaromontoro" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ekLisLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--aTV3h--8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/161327/2ff05281-db58-4dcb-946a-4b679e4a266b.jpeg" alt="alvaromontoro"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alvaromontoro/typewriter-effect-with-css-38im" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Typewriter Effect with CSS&lt;/h2&gt;
      &lt;h3&gt;Alvaro Montoro ・ Aug 27 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;I replied with my "simple-code" implementation&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/a-scalable-css-only-typewriter-effect-2opn" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A scalable CSS only Typewriter Effect&lt;/h2&gt;
      &lt;h3&gt;Temani Afif ・ Aug 28 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;He strike back with a cartoon 0-element version&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alvaromontoro" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ekLisLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--aTV3h--8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/161327/2ff05281-db58-4dcb-946a-4b679e4a266b.jpeg" alt="alvaromontoro"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alvaromontoro/animated-no-element-typewriter-2835" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Animated no-element typewriter&lt;/h2&gt;
      &lt;h3&gt;Alvaro Montoro ・ Aug 29 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#art&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Another warrior (&lt;a class="mentioned-user" href="https://dev.to/auroratide"&gt;@auroratide&lt;/a&gt;
) is trying to defeat us with an SVG version!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/auroratide" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IQGc9Jrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--yRZgsqjz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/176563/df2440ff-8bcb-4662-bdd6-c1f1a5c06c0d.png" alt="auroratide"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/auroratide/a-typewriter-but-with-no-html-css-or-js-1bgd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A Typewriter, but with no HTML, CSS, or JS?!&lt;/h2&gt;
      &lt;h3&gt;Timothy Foster ・ Aug 29 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#svg&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;But, I am here with my secret weapon: &lt;strong&gt;the Scrabble writer!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_SU3W_vs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/X5wqqXmtbttG121WMy/giphy.gif%3Fcid%3Decf05e47jnr1ayqczx022cegqu9xawicym7361sdd8xiidct%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_SU3W_vs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/X5wqqXmtbttG121WMy/giphy.gif%3Fcid%3Decf05e47jnr1ayqczx022cegqu9xawicym7361sdd8xiidct%26rid%3Dgiphy.gif%26ct%3Dg" alt="to be continued"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Tutorials For Learning 10 Of The Most Helpful Python Modules</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sun, 29 Aug 2021 20:17:24 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/tutorials-for-learning-10-of-the-most-helpful-python-modules-73d</link>
      <guid>https://dev.to/ayabouchiha/tutorials-for-learning-10-of-the-most-helpful-python-modules-73d</guid>
      <description>&lt;p&gt;Hi, I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, on this beautiful and amazing day, we're going to talk about 10 helpful python modules.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#json"&gt;
  &lt;/a&gt;
  json
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;json:  is a built-in package used for reading json data, or converting data to json.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#articles-amp-youtube-videos"&gt;
  &lt;/a&gt;
  articles &amp;amp; youtube videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/all-you-need-to-know-about-python-json-module-5ef0"&gt;https://dev.to/ayabouchiha/all-you-need-to-know-about-python-json-module-5ef0&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://realpython.com/python-json/"&gt;https://realpython.com/python-json/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.programiz.com/python-programming/json"&gt;https://www.programiz.com/python-programming/json&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.w3schools.com/python/python_json.asp"&gt;https://www.w3schools.com/python/python_json.asp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#requests"&gt;
  &lt;/a&gt;
  requests
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;requests: This is a module that helps you to send http requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#articles-amp-youtube-videos"&gt;
  &lt;/a&gt;
  articles &amp;amp; youtube videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/sending-get-post-put-delete-requests-in-python-45o8"&gt;https://dev.to/ayabouchiha/sending-get-post-put-delete-requests-in-python-45o8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.edureka.co/blog/python-requests-tutorial/"&gt;https://www.edureka.co/blog/python-requests-tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=tb8gHvYlCFs"&gt;https://www.youtube.com/watch?v=tb8gHvYlCFs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KM_9in6ei50"&gt;https://www.youtube.com/watch?v=KM_9in6ei50&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#beautifulsoup"&gt;
  &lt;/a&gt;
  beautifulSoup
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;beautifulSoup: used for web scraping.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#articles-amp-youtube-videos"&gt;
  &lt;/a&gt;
  articles &amp;amp; youtube videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://www.youtube.com/watch?v=XVv6mJpFOb0"&gt;https://www.youtube.com/watch?v=XVv6mJpFOb0&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.youtube.com/watch?v=ng2o98k983k"&gt;https://www.youtube.com/watch?v=ng2o98k983k&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.geeksforgeeks.org/implementing-web-scraping-python-beautiful-soup/"&gt;https://www.geeksforgeeks.org/implementing-web-scraping-python-beautiful-soup/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#selenium"&gt;
  &lt;/a&gt;
  selenium
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;selenium: for controlling web browsers through programs and performing browser automation.&lt;a href="https://www.geeksforgeeks.org/selenium-python-tutorial/"&gt;more details&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#articles-amp-youtube-videos"&gt;
  &lt;/a&gt;
  articles &amp;amp; youtube videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/selenium-python-tutorial/"&gt;https://www.geeksforgeeks.org/selenium-python-tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softwaretestinghelp.com/selenium-python-tutorial/"&gt;https://www.softwaretestinghelp.com/selenium-python-tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=3dQY_JqGalk"&gt;https://www.youtube.com/watch?v=3dQY_JqGalk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#math"&gt;
  &lt;/a&gt;
  math
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;math: used for performing mathematical tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#articles-amp-youtube-videos"&gt;
  &lt;/a&gt;
  articles &amp;amp; youtube videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.programiz.com/python-programming/modules/math"&gt;https://www.programiz.com/python-programming/modules/math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-math-module/"&gt;https://realpython.com/python-math-module/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/5-helpful-python-math-module-methods-44gf"&gt;https://dev.to/ayabouchiha/5-helpful-python-math-module-methods-44gf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#os"&gt;
  &lt;/a&gt;
  os
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;os: used for interacting with the operating system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#articles-amp-youtubes-videos"&gt;
  &lt;/a&gt;
  articles &amp;amp; youtubes videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/6-helpful-os-module-methods-5e3k"&gt;https://dev.to/ayabouchiha/6-helpful-os-module-methods-5e3k&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialsteacher.com/python/os-module"&gt;https://www.tutorialsteacher.com/python/os-module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.analyticsvidhya.com/blog/2021/05/30-useful-methods-from-python-os-module/"&gt;https://www.analyticsvidhya.com/blog/2021/05/30-useful-methods-from-python-os-module/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=tJxcKyFMTGo"&gt;https://www.youtube.com/watch?v=tJxcKyFMTGo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#csv"&gt;
  &lt;/a&gt;
  csv
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;csv: used for interacting with csv files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#articles-amp-youtubes-videos"&gt;
  &lt;/a&gt;
  articles &amp;amp; youtubes videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/csv.html"&gt;https://docs.python.org/3/library/csv.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-csv/"&gt;https://realpython.com/python-csv/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/working-csv-files-python/"&gt;https://www.geeksforgeeks.org/working-csv-files-python/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#array"&gt;
  &lt;/a&gt;
  array
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;array: for defining an object type that can compactly represent an array of basic values: characters, integers, floating-point numbers. &lt;a href="https://docs.python.org/3/library/array.html"&gt;more details&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#articles-amp-youtubes-videos"&gt;
  &lt;/a&gt;
  articles &amp;amp; youtubes videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://data-flair.training/blogs/python-array-module/"&gt;https://data-flair.training/blogs/python-array-module/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.programiz.com/python-programming/array"&gt;https://www.programiz.com/python-programming/array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/python-arrays/"&gt;https://www.geeksforgeeks.org/python-arrays/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#random"&gt;
  &lt;/a&gt;
  random
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;random: used for generating random numbers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#articles-amp-youtubes-videos"&gt;
  &lt;/a&gt;
  articles &amp;amp; youtubes videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/5-helpful-python-random-module-methods-10g1"&gt;https://dev.to/ayabouchiha/5-helpful-python-random-module-methods-10g1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/python-random-module/#:~:text=Python%20Random%20module%20is%20an,a%20list%20or%20string%2C%20etc."&gt;https://www.geeksforgeeks.org/python-random-module/#:~:text=Python%20Random%20module%20is%20an,a%20list%20or%20string%2C%20etc.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KzqSDvzOFNA"&gt;https://www.youtube.com/watch?v=KzqSDvzOFNA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pandas"&gt;
  &lt;/a&gt;
  pandas
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;pandas: used for data analysis&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#articles-amp-youtubes-videos"&gt;
  &lt;/a&gt;
  articles &amp;amp; youtubes videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/python-data-analysis-using-pandas/"&gt;https://www.geeksforgeeks.org/python-data-analysis-using-pandas/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/python/pandas/default.asp"&gt;https://www.w3schools.com/python/pandas/default.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=PfVxFV1ZPnk"&gt;https://www.youtube.com/watch?v=PfVxFV1ZPnk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a good day :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Introduction</title>
      <author>ksanroman</author>
      <pubDate>Sun, 29 Aug 2021 20:08:08 +0000</pubDate>
      <link>https://dev.to/ksanroman/introduction-3dmf</link>
      <guid>https://dev.to/ksanroman/introduction-3dmf</guid>
      <description>&lt;p&gt;Hi my name is Karina San Roman. I am a senior Human Centered design and development major and have a minor in SRA. I am from Long Island New York and I am the youngest of 7. I am interested in web development because my major revolves heavly around it. I also enjoy programming and web development so I am very excited for this semester. I have used javascript before but not much so I am looking forward to learning more about it and becoming familiar with it. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Building a habit </title>
      <author>Clever coder</author>
      <pubDate>Sun, 29 Aug 2021 19:52:31 +0000</pubDate>
      <link>https://dev.to/yusuf_software/building-a-habit-lgg</link>
      <guid>https://dev.to/yusuf_software/building-a-habit-lgg</guid>
      <description>&lt;p&gt;"Rome wasn't built in a day"&lt;/p&gt;

&lt;p&gt;You probably know this quote and its meaning, which is, "Great things take time".&lt;/p&gt;

&lt;p&gt;The same goes to building an amazing lifestyle or being a great Techie 🙂&lt;/p&gt;

&lt;p&gt;It's all about the game of "&lt;em&gt;patience&lt;/em&gt;".&lt;/p&gt;

&lt;p&gt;If you play it right, you'll become successful, if you try to cheat, you'll fail in the process.&lt;/p&gt;

&lt;p&gt;The #1 reason you fail in building a habit, is because you don't try to build habits, but you try to build a lifestyle.&lt;/p&gt;

&lt;p&gt;Habit ≠ Good Lifestyle&lt;/p&gt;

&lt;p&gt;Habits compounded = Good Lifestyle&lt;/p&gt;

&lt;p&gt;You can't build an amazing lifestyle, without building great habits.&lt;/p&gt;

&lt;p&gt;To build great habits, you need to be patient and build ONE at a time.&lt;/p&gt;

&lt;p&gt;I've tried it both ways, and I've failed horribly.&lt;/p&gt;

&lt;p&gt;I've tried building 10 habits at once and building 1 habit at a time and I've noticed the second is more effective.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;I'll explain.&lt;/p&gt;

&lt;p&gt;Think about the reason why you never succeed with your new year's resolutions?&lt;/p&gt;

&lt;p&gt;You don't have patience.&lt;/p&gt;

&lt;p&gt;You expect results fast.&lt;/p&gt;

&lt;p&gt;When you start to build too many habits all at the same time, you overwhelm yourself with all these new things and when the excitement wears off, you slip out of it.&lt;/p&gt;

&lt;p&gt;Because it's not fun anymore, you feel bored, you get disappointed because your lifestyle didn't change in a week or month.&lt;/p&gt;

&lt;p&gt;When you focus on building one habit at a time, you don’t feel overwhelmed but you feel obliged to do it on a daily basis.&lt;/p&gt;

&lt;p&gt;You can focus on building one habit for 21 days and then it becomes a daily ritual, after that you can start working on building another habit, and so on.&lt;/p&gt;

&lt;p&gt;If you follow this — You will have successfully have built 17 new habits in 1 year.&lt;/p&gt;

&lt;p&gt;Doesn't that sound crazy? 🤯&lt;/p&gt;

&lt;p&gt;It only takes 21 days to build a habit.&lt;/p&gt;

&lt;p&gt;So take it one step at a time, build a habit, then another, and another, compounding towards building that amazing lifestyle you want.&lt;/p&gt;

&lt;p&gt;If I get good comments, I'll show you how to take actionable steps towards building great habits as a developer and how I track my habits and stick to them.&lt;/p&gt;

&lt;p&gt;Disclaimer: this are all personal view that work for me if if doesn't work for you maybe build yours.&lt;/p&gt;

&lt;p&gt;Drop by drop is the water pot filled. -Buddha&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>health</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Design for Color Blindness</title>
      <author>Standly Mith</author>
      <pubDate>Sun, 29 Aug 2021 19:50:35 +0000</pubDate>
      <link>https://dev.to/standlymith/how-to-design-for-color-blindness-7e1</link>
      <guid>https://dev.to/standlymith/how-to-design-for-color-blindness-7e1</guid>
      <description>&lt;p&gt;Color blindness or color vision deficiency (CVD) affects around 1 in 12 men and 1 in 200 women worldwide. This means that for every 100 users that visit your website or app, up to 8 people could actually experience the content much differently that you’d expect. But how do you ensure that your user experience appeals equally to these visitors? We’re here to lend a helping hand. So, before you run to your design team in a panic, take a look at our roundup of top things to consider when designing a UX for color accessibility.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SA6dTFWO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y79ahkcody4mv2it67u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SA6dTFWO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y79ahkcody4mv2it67u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;First up, what exactly is color blindness?&lt;/h2&gt;

&lt;p&gt;Most color blind people are able to see things just as clearly as the rest of the population, the difference is their inability to distinguish red, green, or blue light. The deficiency is the result of a mutation in the X-chromosome – meaning women are more likely to be carriers than sufferers – and it can manifest in 3 main ways.&lt;/p&gt;

&lt;p&gt;The most common is red/green color blindness, where sufferers mix up all colors which have red or green as part of the whole color. Those affected by Protan color blindness are less sensitive to red light, whilst sufferers of Deuteranopia have the same problem with green. For example, a person with Protanopia will confuse blue and purple because they can’t recognize the red element of the color purple. The third type of color deficiency, Tritanopia, is the least common and refers to sufferers who struggle to distinguish blue or yellow light. The image below shows what the rainbow may look like to individuals with each of these forms of color blindness. If you need to know more about it &lt;a href="https://www.colorblindnesstest.org/"&gt;check the colour blindness tool&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;How Can I Design for Better Color Accessibility?&lt;/h2&gt;

&lt;p&gt;You might be thinking: “why should I bother designing for such a small group of users?” But generally, the elements that are favorable for colorblind users are actually considered to be good design practices in the wider sense. So if your site is well designed, it should already be accessible to all users.&lt;/p&gt;

&lt;p&gt;Designing for accessibility doesn’t mean that the aesthetic integrity of your design needs to suffer. With that in mind, here are the top five elements you should be focusing on for a colorblind-friendly UX:&lt;/p&gt;

&lt;h3&gt;1. Use both colors and symbols&lt;/h3&gt;

&lt;p&gt;You shouldn’t rely on color alone to convey a message; for example, certain types of color blindness might make it difficult or even impossible to see common red error messages. One approach is to use both colors and symbols where users’ attention is required. A good example of this is Facebook’s form fields and the error messaging attached.&lt;/p&gt;

&lt;h3&gt;2. Keep it minimal&lt;/h3&gt;

&lt;p&gt;You should limit the color palette you use for your website; the fewer colors you use in your design, the fewer instances there will be for confusion.&lt;/p&gt;

&lt;p&gt;Not only is minimalistic design a timeless and aesthetically pleasing trend, it’s also useful when you’re designing for color accessibility.&lt;/p&gt;

&lt;h3&gt;3. Use patterns and textures to show contrast&lt;/h3&gt;

&lt;p&gt;Try to use different textures, as opposed to multiple colors, for elements that require emphasis. For example, it might be difficult for color blind users to interpret graphs and charts. In this case, it’s better to use contrasting patterns and, where possible, place text instead.&lt;/p&gt;

&lt;h3&gt;4. Be careful with contrasting colors and hues&lt;/h3&gt;

&lt;p&gt;Instead of relying on black and white as your only contrasting colors; try to use a range of clearly contrasting colors and hues in your design. For example, the game Word Feud uses four colors for its tiles that can be easily distinguished by those with or without color vision deficiency.&lt;/p&gt;

&lt;h3&gt;5. Avoid bad color combos&lt;/h3&gt;

&lt;p&gt;You need to be smart when picking out your color combinations. Since color blindness affects people in different ways, it’s difficult to determine which colors are ‘safe’ to use in web design. That being said, here’s a few color combinations to avoid because they’re a potential nightmare to color blind users:&lt;/p&gt;

&lt;p&gt;• Green &amp;amp; Red&lt;br&gt;
• Green &amp;amp; Brown&lt;br&gt;
• Blue &amp;amp; Purple&lt;br&gt;
• Green &amp;amp; Blue&lt;br&gt;
• Light Green &amp;amp; Yellow&lt;br&gt;
• Blue &amp;amp; Grey&lt;br&gt;
• Green &amp;amp; Grey&lt;br&gt;
• Green &amp;amp; Black&lt;/p&gt;

&lt;p&gt;Well… Some people go years without knowing they’re color blind as the effects can go relatively unnoticed unless someone else points them out. The image below is commonly used to test for color blindness – give it a go! (You can find a link to the full test at the bottom of this article.)&lt;/p&gt;

&lt;h2&gt;Still not sure?&lt;/h2&gt;

&lt;p&gt;Ishihara Color Blindness Test: You can take the 38 plate based test and get feedback as well.&lt;/p&gt;

&lt;p&gt;Color Blind Check: an Android App created by Colorblindor where you can test whether you are color blind in ±60 seconds.&lt;/p&gt;

&lt;p&gt;Coblis: Color Blindness Simulator: here you can upload an image and take a look at what it’d look like through the eyes of people with different types of color blindness.&lt;/p&gt;

&lt;p&gt;Mobile Apps: here’s 3 Android and iOS apps specifically developed to help color blind users.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Generally, UX designers should create websites that are accessible and user-friendly to all. Unfortunately there isn’t a one-size-fits-all solution when designing for color blindness specifically, but there are a few essential UX design principles to bear in mind that will certainly help:&lt;/p&gt;

&lt;p&gt;• Don’t only rely on color to convey a message&lt;br&gt;
• Keep your color palette limited to 2 or 3 colors&lt;br&gt;
• Use texture and patterns to show contrast&lt;br&gt;
• Carefully select any contrasting colors and shades&lt;br&gt;
• Avoid using bad color combinations&lt;/p&gt;

</description>
    </item>
    <item>
      <title>A Typewriter, but with no HTML, CSS, or JS?!</title>
      <author>Timothy Foster</author>
      <pubDate>Sun, 29 Aug 2021 19:49:21 +0000</pubDate>
      <link>https://dev.to/auroratide/a-typewriter-but-with-no-html-css-or-js-1bgd</link>
      <guid>https://dev.to/auroratide/a-typewriter-but-with-no-html-css-or-js-1bgd</guid>
      <description>&lt;p&gt;Apparently a battle of sorts has erupted amongst devs clamoring for the title of Best Typewriter Animator Person.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/alvaromontoro"&gt;@alvaromontoro&lt;/a&gt;
 started with a &lt;a href="https://dev.to/alvaromontoro/typewriter-effect-with-css-38im"&gt;Typewriter effect in CSS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/afif"&gt;@afif&lt;/a&gt;
 then gave us &lt;a href="https://dev.to/afif/a-scalable-css-only-typewriter-effect-2opn"&gt;A scalable CSS only Typewriter Effect&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
 has promised us an HTML-only typewriter&lt;/li&gt;
&lt;li&gt;And &lt;a class="mentioned-user" href="https://dev.to/alvaromontoro"&gt;@alvaromontoro&lt;/a&gt;
 came back with an &lt;a href="https://dev.to/alvaromontoro/animated-no-element-typewriter-2835"&gt;Animated no-element typewriter &lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the classic spirit of one-uppery that has arisen, it was only a matter of time before &lt;em&gt;someone&lt;/em&gt;, &lt;em&gt;somewhere&lt;/em&gt; took on the most legendary of tasks: to create a typewriter animation for the web without using &lt;em&gt;anything&lt;/em&gt;. No Javascript. No CSS. Not even HTML.&lt;/p&gt;

&lt;p&gt;Behold, the power of &lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG"&gt;Scalable Vector Graphics&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/auroratide/embed/ExXVdZG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Ok but actually &lt;strong&gt;don't use this&lt;/strong&gt; if you want a typewriter animation! It's got browser compatibility and accessibility issues, but at least it's a cute experiment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;The SVG spec has something called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/SVG_animation_with_SMIL"&gt;Synchronized Multimedia Integration Language&lt;/a&gt; (SMIL) which allows animations to be defined in the XML document directly.&lt;/p&gt;

&lt;p&gt;For example, consider the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate"&gt;animate&lt;/a&gt; tag. When made a child of some shape like &lt;code&gt;rect&lt;/code&gt;, you can choose what attribute to animate over time and specify the way in which it changes.&lt;/p&gt;

&lt;p&gt;So for example, the text cursor is given a simple blink animation just by adjusting the width of a rectangle between 0 and 1, and doing it discretely so it blinks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"4"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"12"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;animate&lt;/span&gt;
    &lt;span class="na"&gt;attributeName=&lt;/span&gt;&lt;span class="s"&gt;"width"&lt;/span&gt;
    &lt;span class="na"&gt;calcMode=&lt;/span&gt;&lt;span class="s"&gt;"discrete"&lt;/span&gt;
    &lt;span class="na"&gt;values=&lt;/span&gt;&lt;span class="s"&gt;"1; 0"&lt;/span&gt;
    &lt;span class="na"&gt;dur=&lt;/span&gt;&lt;span class="s"&gt;"1s"&lt;/span&gt;
    &lt;span class="na"&gt;repeatCount=&lt;/span&gt;&lt;span class="s"&gt;"indefinite"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rect&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the first time I've ever used SMIL, so almost certainly someone smarter than me can find a better way than adjusting an overlaying white rectangle!&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>svg</category>
      <category>html</category>
    </item>
  </channel>
</rss>
