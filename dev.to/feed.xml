<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to use Ngrok for tunnelling the local servers?
</title>
      <author>ROHAN KADAM</author>
      <pubDate>Tue, 07 Dec 2021 14:50:57 +0000</pubDate>
      <link>https://dev.to/rohan2596/how-to-use-ngrok-for-tunnelling-the-local-servers-58n4</link>
      <guid>https://dev.to/rohan2596/how-to-use-ngrok-for-tunnelling-the-local-servers-58n4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#ngrok"&gt;
  &lt;/a&gt;
  Ngrok
&lt;/h2&gt;

&lt;p&gt;Hello👋, Its Rohan Kadam😊&lt;/p&gt;

&lt;p&gt;Developing an application and testing it's at the same time is part of any software. We might need to expose our local server for testing our application. We wish to show our work to a colleague or client, or we need a secure, publicly available callback URL to interact with a web service. We could go ahead and upload your app to a hosting platform like AWS or Google Cloud, but then every time we make an update, we have to push those changes to our host server…not great. To overcome this problem we could concept called &lt;strong&gt;tunnelling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R7WqmUNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/6000/1%2AbhVNy_mtUOvqfIP1Durbsw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R7WqmUNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/6000/1%2AbhVNy_mtUOvqfIP1Durbsw.jpeg" alt="ngrok" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-tunnelling"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is Tunnelling?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Tunnelling is used to &lt;strong&gt;create a network link between two computers in conditions of restricted network connectivity including firewalls, NATs and ACLs&lt;/strong&gt;, among other restrictions. The tunnel is created by an intermediary called a proxy server which is usually located in a DMZ.In order to achieve we used &lt;a href="https://ngrok.com/"&gt;**Ngrok &lt;/a&gt;**Tunnelling&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-ngrok"&gt;
  &lt;/a&gt;
  What is Ngrok?
&lt;/h3&gt;

&lt;p&gt;Ngrok exposes local servers behind NATs and firewalls to the public internet over secure tunnels.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does It work?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Download ngrok:-&lt;/strong&gt; Download and run a program on your machine and provide it with the port of a network service, usually a web server.&lt;/p&gt;

&lt;p&gt;**Connect your service:- **Connect to ngrok cloud service which accepts traffic on a public address.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Access from anywhere:-&lt;/strong&gt; Traffic is relayed through to the ngrok process running on your machine and then on to the local address you specified.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-its-good-for"&gt;
  &lt;/a&gt;
  What it's Good For?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Run personal cloud services from your home.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Demo websites without deploying.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build webhook consumers on your dev machine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test mobile apps connected to your locally running backend.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stable addresses for your connected devices that are deployed in the field.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-1-on-running-exe-file-below-screen-will-be-visible"&gt;
  &lt;/a&gt;
  Step 1: On Running Exe file below screen will be visible
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RD9akhnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A-jv4x5x3PkRJc6ZFJC2Obw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RD9akhnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A-jv4x5x3PkRJc6ZFJC2Obw.png" alt="ngrok-1" width="718" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-exposing-or-tunnelling-port-8080"&gt;
  &lt;/a&gt;
  Step 2: Exposing or Tunnelling port 8080
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2-TUh3Ly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A-gTslzJKK_M8Fwpz9uVm0Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2-TUh3Ly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A-gTslzJKK_M8Fwpz9uVm0Q.png" alt="Tunnelling Port 8080" width="349" height="41"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-on-successful-tunnelling-able-to-see-the-below-screen"&gt;
  &lt;/a&gt;
  Step 3: On Successful Tunnelling able to see the below screen.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hqLO4R2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ATUUGwApe5MaLpfVy_QVp5A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hqLO4R2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ATUUGwApe5MaLpfVy_QVp5A.png" alt="Ngrok Cli" width="839" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note:- Above is a free version which is valid for two hours and&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commands"&gt;
  &lt;/a&gt;
  COMMANDS:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;authtoken save auth token to the configuration file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;http :- start an HTTP tunnel&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;start:- start tunnels by name from the configuration file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tcp:- start a TCP tunnel&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tls:- start a TLS tunnel&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;update:- update ngrok to the latest version&lt;br&gt;
version print the version string&lt;br&gt;
help Shows a list of commands or helps for one command&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ngrok is a command-line application, try typing ‘ngrok.exe http 80’&lt;br&gt;
at this terminal prompt to expose port 80.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:-
&lt;/h3&gt;

&lt;p&gt;In the article, we tried to answers many questions related to Tunneling and especially Ngrok Tunnelling how it helps developers around the world to test the application on the real servers without deploying cloud code and built faster applications.&lt;/p&gt;

&lt;p&gt;Please do share and like💖 if you find the article useful. Follow me on medium &lt;a href="https://dev.toundefined"&gt;Rohan Ravindra Kadam&lt;/a&gt; and on Twitter at &lt;a href="https://twitter.com/rohankadam25"&gt;**rohankadam25&lt;/a&gt;**&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bibliography"&gt;
  &lt;/a&gt;
  Bibliography:-
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://ngrok.com/product"&gt;Ngrok Documentation&lt;/a&gt;
&lt;a href="https://ngrok.com/product"&gt;&lt;strong&gt;ngrok - secure introspectable tunnels to localhost&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tNroQqiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2Af9TMjifJVReTlh93qJ845Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNroQqiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2Af9TMjifJVReTlh93qJ845Q.png" alt="Thank You, Viewers." width="880" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How to overcome Imposter Syndrome in Tech</title>
      <author>Saji Wang</author>
      <pubDate>Tue, 07 Dec 2021 14:41:15 +0000</pubDate>
      <link>https://dev.to/codesphere/how-to-overcome-imposter-syndrome-in-tech-4e1o</link>
      <guid>https://dev.to/codesphere/how-to-overcome-imposter-syndrome-in-tech-4e1o</guid>
      <description>&lt;p&gt;Have you ever wondered why someone thinks so highly of you? Have you questioned why they’ve given you such a cool and important project to own at work? &lt;/p&gt;

&lt;p&gt;The majority of us have probably experienced Imposter Syndrome during some stage of our lives. No matter if you’re just starting out in your career, if you’re a perfectionist, or a high performer with many years experience, millions of people suffer with imposter syndrome. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-is-imposter-syndrome-exactly"&gt;
  &lt;/a&gt;
  So, what is imposter syndrome, exactly?
&lt;/h3&gt;

&lt;p&gt;A belief that you are not intelligent, creative or generally deserving of the success you are experiencing, even though there is plenty of evidence of your achievements.&lt;/p&gt;

&lt;p&gt;People who experience imposter syndrome are basically experiencing the feeling of being a fraud who is undeserving, which brings feelings of anxiety and stress as you feel like you’re misleading your colleagues and employees. &lt;/p&gt;

&lt;p&gt;Imposter syndrome is prevalent within the tech industry, with about 58% of tech employees stating that they currently experience some form of the condition within their careers. It’s especially common in software engineers, developers, and designers. It’s usually worse in people who are new within the tech industry, are part of an underrepresented group, or have come from different professional backgrounds. &lt;/p&gt;

&lt;p&gt;Some of these thoughts are normal to have while experiencing imposter syndrome:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“What am I doing here? I’m not a developer, I am fooling myself and other people”&lt;/li&gt;
&lt;li&gt;“My team is much smarter than I am, I don’t deserve to be here”&lt;/li&gt;
&lt;li&gt;“When people realise I’m not as intelligent as I make out, I’ll be fired”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The thought processes above make people believe that they are not worthy enough, that their achievements aren’t good enough, and that they’re fooling people into thinking they’re someone that they’re not. &lt;/p&gt;

&lt;p&gt;You will most likely become very worried about your position and performance which can lead to high amounts of stress and even burnout from working too much, seemingly to catch up with your peers - perpetuating the notion that you need to work twice as hard to keep up, just to prove your worthiness. &lt;/p&gt;

&lt;p&gt;The result of imposter syndrome is a working life dominated by anxiety, exhaustion, uncertainty, confusion and fear. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-vicious-cycle"&gt;
  &lt;/a&gt;
  The vicious cycle
&lt;/h3&gt;

&lt;p&gt;The tech industry is rife with imposter syndrome, the majority of designers and programmers suffer with it at one, or several points, in their career. You may assume that success will eradicate the syndrome and finally make you feel more worthy, however the more successful someone becomes, the more likely it is that they will feel like they’re fooling everyone. Rather than enjoying that success and recognising that their success came from themselves, and not because someone higher up made a mistake about you. &lt;/p&gt;

&lt;p&gt;One of the biggest problems with this syndrome is that a lot of people get stuck in a cycle. Believing that you’re not good enough leads to perfectionism, meaning that even the most menial tasks will take you much longer to complete, as you become obsessed that everything has to be perfect before submission. &lt;/p&gt;

&lt;p&gt;People who suffer with Imposter Syndrome may also find that they will over prepare for projects and meetings, you may find that you begin suffering with stage fright - not being able to present your work any more as you put too much pressure on yourself to perform perfectly, even on the spot. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-to-begin-to-overcome-imposter-syndrome"&gt;
  &lt;/a&gt;
  How to begin to overcome Imposter Syndrome
&lt;/h3&gt;

&lt;p&gt;Even though the effects of Imposter Syndrome are clearly bad for mental health, confidence and sense of self, once you start to recognise the symptoms we’ve discussed above, there are ways you can begin to overcome it, and regain your self belief. &lt;/p&gt;

&lt;p&gt;The three steps that will help:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find a mentor&lt;/li&gt;
&lt;li&gt;Remember your past experiences and training&lt;/li&gt;
&lt;li&gt;Keep track of your accomplishments &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s take a look at these in a little more detail. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-mentors"&gt;
  &lt;/a&gt;
  1. Mentors
&lt;/h3&gt;

&lt;p&gt;Finding a mentor within your professional environment will give you an outside perspective on what people really think of you and your work. You’ll find yourself feeling less alone in your negative self-view as you have someone specifically to talk through how you are feeling. &lt;/p&gt;

&lt;p&gt;As well as getting an outside perspective and building your confidence, a mentor will also be able to identify knowledge gaps that you might have and suggest training and learnings that you should work on to keep you constantly improving.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-past-experiences"&gt;
  &lt;/a&gt;
  2. Past experiences
&lt;/h3&gt;

&lt;p&gt;Reflecting on your past experiences and remembering the training you’ve been through will give you a much better perspective on how far you’ve come. Remembering how inexperienced you were at the beginning of your journey, compared to how much experience you’ve gained now should give you a sense of achievement, not fear.&lt;/p&gt;

&lt;p&gt;Knowing that you still have a lot to learn is a great thing - but don’t forget how much you’ve already learned and be proud of that fact. You don’t need to be an expert in your field before you experience success. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-your-accomplishments"&gt;
  &lt;/a&gt;
  3. Your accomplishments
&lt;/h3&gt;

&lt;p&gt;One piece of advice I’ve received that has worked wonders is to keep track of your accomplishments. Keep a document where you add praise you receive for the work you’ve done. &lt;br&gt;
When you’re not feeling worthy enough or your confidence has taken a hit you can open that document and remind yourself of all the great stuff you’ve achieved, and how much people have appreciated your hard work. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#to-wrap-up"&gt;
  &lt;/a&gt;
  To wrap up
&lt;/h3&gt;

&lt;p&gt;Remember - sometimes you can have a bad day, sometimes you will struggle to figure out a problem, and sometimes it will take you a little longer to figure out a solution to a project you’re working on. &lt;/p&gt;

&lt;p&gt;Once you recognise you’re suffering from Imposter Syndrome, take some of the advice we’ve spoken about here and put it into action. Constantly remind yourself of your achievements, and always listen to people's positive opinions of you and your work. &lt;/p&gt;

&lt;p&gt;We’re all human beings, and nobody should expect perfection from you all the time - not even you.&lt;/p&gt;




&lt;p&gt;Have you experienced imposter syndrome in your career? What are your top tips for other coders? Let us know in the comments below!&lt;/p&gt;

&lt;p&gt;Happy coding from your good friends at &lt;a href="https://link.codesphere.com/GS"&gt;Codesphere&lt;/a&gt;, the next-generation cloud provider.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Getting back into web-development. </title>
      <author>Hardik Singh</author>
      <pubDate>Tue, 07 Dec 2021 14:41:01 +0000</pubDate>
      <link>https://dev.to/shinzokun/getting-back-into-web-development-21bp</link>
      <guid>https://dev.to/shinzokun/getting-back-into-web-development-21bp</guid>
      <description>&lt;p&gt;At the almost end of the last year, I had taken up a ritual, a religious virtue on my hands. To learn to code, to learn to build, not just websites but build value, And to some extent, that’s what I solely did. Learned to provide value through code, through menial lines of words displayed on a screen that didn’t make sense to most people but somehow it conveyed value, somehow it made me happy. Somehow it quite brightened my life. &lt;/p&gt;

&lt;p&gt;But that didn’t last long, more than I expected. at the peak of October this year. I started getting frustrated, frustrated with coding, not coding but the reason that I had at the start of my journey was morphed into something I didn’t want. Annoyed, that I almost religiously started to hate building websites. &lt;/p&gt;

&lt;p&gt;I was angry, at myself. For getting bored, watching Tutorials, after tutorials. I was basically stuck in a tutorial hell and didn’t seem to find any reasons why I would want to continue on this path. I was bored of making websites too, changing the font style, changing the header tag. And god knows what.&lt;/p&gt;

&lt;p&gt;I had lost my reason. The reason that got me into it in the first place, The reason that had helped me endure the terrible cycles of learning and practice. The reason that actually made me get excited about learning to code. And actually to code. &lt;/p&gt;

&lt;p&gt;I had lost it somewhere, somewhere in the journey. From the superfluous innovation, I dreamt of at the start of my journey, to the money I was chasing by the end. &lt;/p&gt;

&lt;p&gt;I wasn’t excited, I wasn’t enjoying the “stucks” the coding provided me, just simply I was not sure about the path ahead. &lt;/p&gt;

&lt;p&gt;So, I dumped it. And went to look for a path. A different path that would excite me for the time being. &lt;/p&gt;

&lt;p&gt;Tried, I won’t say a lot but a few things, Things with careful consideration. From Day-Trade To Possibly enrolling for Psychology. But in the end, nothing worked. At least not the way I thought it would. I was still chasing money, it’s not that I don’t deem the importance of it, but I find it exhilarating to chase something that I don’t find exciting. &lt;/p&gt;

&lt;p&gt;Only to end up here again, The dream I had at the beginning of my adolescence. To innovate, to create, and to at least change the world with value, with value that I can provide, that my abilities and capabilities can provide. &lt;/p&gt;

&lt;p&gt;I knew I wanted to innovate, but also knew I had to get above money. Just enough to pass by, to strive. So that’s what I chose. This time. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My top priority is to innovate and secondary to strive.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;But, before any of that jazz, I got to learn, learn everything again from scratch till the moderate intermediate I was.&lt;/p&gt;

&lt;p&gt;So, here’s my journey. From now on, getting into development again. And possibly for the last time.&lt;br&gt;
My goal this time is to expand as much as possible, but also specialize in a few areas to keep myself sane. To at least get “ching ching” money. &lt;/p&gt;

&lt;p&gt;So, I’ll be starting as the most start. By going through The basic standards of the web. Html, CSS, And JS.&lt;/p&gt;

&lt;p&gt;And then probably will move to “React Native”, this time as I am quite excited to explore the awakenings of mobile development. And possibly Flutter too.&lt;/p&gt;

&lt;p&gt;Though my end goal as of right now in the hierarchy is to learn and understand more about “Blockchain, And CryptoCurrency Tech”. But yes I’ll probably be dwelling into a lot of spaces before I either find one (which is unlikely) or just explore possibly everything (which is also unlikely). &lt;/p&gt;

&lt;p&gt;yes. The only thing I would say I need this time. Is LUCK. &lt;br&gt;
&lt;em&gt;So, Best Of Luck&lt;/em&gt;. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Use this Tailwind CSS Cheat Sheet to speed up your development process</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Tue, 07 Dec 2021 14:32:36 +0000</pubDate>
      <link>https://dev.to/zolidev/use-this-tailwind-css-cheat-sheet-to-speed-up-your-development-process-2l6p</link>
      <guid>https://dev.to/zolidev/use-this-tailwind-css-cheat-sheet-to-speed-up-your-development-process-2l6p</guid>
      <description>&lt;p&gt;I've been working on the past few days on a &lt;a href="https://flowbite.com/tools/tailwind-cheat-sheet/"&gt;cheat sheet tool for Tailwind CSS&lt;/a&gt; that you can use to search for the utility classes from the framework from a single page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pDS73tRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2tjy3p73thb0ori7pp3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pDS73tRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2tjy3p73thb0ori7pp3.gif" alt="Tailwind CSS Cheat Sheet" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although I would still recommend using the official documentation when working with Tailwind CSS, having a searchable single page where you can quickly find the utility classes can speed up your development process even more.&lt;/p&gt;

&lt;p&gt;This cheat sheet tool includes all of the utility classes from the latest stable version of Tailwind CSS and as soon as v3.0 becomes stable I'll update the contents to include the JIT features as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flowbite.com/tools/tailwind-cheat-sheet/"&gt;Check it out here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How To Set Up a GitHub Action to Update the README File in All Your GitHub Repositories</title>
      <author>Geraldine</author>
      <pubDate>Tue, 07 Dec 2021 14:06:03 +0000</pubDate>
      <link>https://dev.to/geraldiner/how-to-set-up-a-github-action-to-update-the-readme-file-in-all-your-github-repositories-4epj</link>
      <guid>https://dev.to/geraldiner/how-to-set-up-a-github-action-to-update-the-readme-file-in-all-your-github-repositories-4epj</guid>
      <description>&lt;center&gt;&lt;h2&gt;Submission Info&lt;/h2&gt;&lt;/center&gt;


&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;A workflow for updating the README file in all your repositories. This is especially helpful if you use a template and want to update a specific section with new information, e.g. an "Other Projects" section that needs to be updated with more recent projects.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category
&lt;/h3&gt;

&lt;p&gt;Wacky Wildcards&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/geraldiner"&gt;
        geraldiner
      &lt;/a&gt; / &lt;a href="https://github.com/geraldiner/projects-readme-tutorial"&gt;
        projects-readme-tutorial
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;See below for a full tutorial!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#readme-files-in-brief-and-how-to-set-one-up"&gt;
  &lt;/a&gt;
  README Files in Brief and How to Set One Up
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#why-you-should-have-a-readme-file-in-your-github-repositories"&gt;
  &lt;/a&gt;
  Why You Should Have a README File in Your GitHub Repositories
&lt;/h3&gt;

&lt;p&gt;As you continue to build out your portfolio with projects on GitHub, it's a good idea to include a README at the root of each project to describe what the project is about and how it was built. This is useful for anyone who comes across your project—other developers, recruiters, or even your future self—to get a quick understanding of the project and your process. Personally, it is also a great reflection tool, since I usually write them after a project has been completed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S1Rl-nCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637519491653/tjH7fm8tr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S1Rl-nCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637519491653/tjH7fm8tr.png" alt="README file template by Alec Ortega (@alecortega)" width="880" height="858"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-write-a-readme-file-for-your-project"&gt;
  &lt;/a&gt;
  How to Write a README File for Your Project
&lt;/h3&gt;

&lt;p&gt;But of course, you don't always have to do this from scratch. Resources, such as &lt;a href="https://www.readme-templates.com/"&gt;GitHub README Templates&lt;/a&gt;, allows you to view README layouts for different sites, which can give you an idea of how to format your own README. &lt;a href="https://www.google.com/search?q=github+readme+template"&gt;A simple Google search for "github readme template"&lt;/a&gt; will also bring up a number of templates in repositories that you can just fork for yourself.&lt;/p&gt;

&lt;p&gt;As the title of this post suggests, a full breakdown of a README for your project is beyond the scope of this post. To help you get started, I recommend reading &lt;a href="https://hashnode.com/@tracycod3r"&gt;Tracy Nuwagaba&lt;/a&gt;'s article, &lt;a href="https://tracy.hashnode.dev/how-to-write-a-readme-for-your-github-project"&gt;How to write a readme for your GitHub project&lt;/a&gt;. If you're like me, you can pick your favorite template and tweak it to fit your needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-tip-load-the-template-as-a-snippet-in-vs-code"&gt;
  &lt;/a&gt;
  Bonus Tip: Load the template as a snippet in VS Code
&lt;/h3&gt;

&lt;p&gt;If you use VS Code as your main code/text editor, you can save your own snippets to reuse chunks of code in different places.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GfV84mtx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qvzd07gobrkmuhbcrft.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GfV84mtx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qvzd07gobrkmuhbcrft.gif" alt="Using code snippets in VS Code" width="880" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow &lt;a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets"&gt;these directions&lt;/a&gt; to save the template as a custom snippet in VS Code. You can also use &lt;a href="https://snippet-generator.app/"&gt;this snippet generator&lt;/a&gt; to easily format the code snippet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem-updating-older-readme-files-with-newer-content"&gt;
  &lt;/a&gt;
  Problem: Updating Older README Files with Newer Content
&lt;/h2&gt;

&lt;p&gt;As previously mentioned, I use the same README template for my projects, which includes a section for "Other Projects" and links to the repos of my other projects. (This is a not-so-secret technique to keep the user clicking through my GitHub portfolio 😏)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--adt36vXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tndgn6znrkkuzahohxi5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--adt36vXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tndgn6znrkkuzahohxi5.png" alt="Other Projects section of the README template I use for my projects" width="802" height="253"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Naturally, in my older projects, there were links to even-older projects. As I continue learning, I've built more projects and want to make sure the most recent and polished projects are always on display. But who wants to go through the other ~20+ repositories to update EVERY. SINGLE. README. FILE. 😵 Definitely not me.&lt;/p&gt;

&lt;p&gt;Using the tried-and-true method of Googling to see if anyone else has encountered this issue, I came across Eugene Yan's article, &lt;a href="https://eugeneyan.com/writing/how-to-update-github-profile-readme-automatically/"&gt;How to Update a GitHub Profile README Automatically&lt;/a&gt;. He also cites Simon Willison, who achieved a similar task of &lt;a href="https://simonwillison.net/2020/Jul/10/self-updating-profile-readme/"&gt;building a self-updating profile README for GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Both of these were done with GitHub Actions, which I'd never heard of until then. And while this sounds like a really neat integration for the GitHub Profile README, it wasn't quite what I needed. But I thought maybe I could still use GitHub Actions to solve my problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-github-actions-to-run-a-script-that-interacts-with-the-github-api"&gt;
  &lt;/a&gt;
  Solution: GitHub Actions to Run a Script that Interacts with the GitHub API
&lt;/h2&gt;

&lt;p&gt;In short, &lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt; are automated workflows that run based on triggers to perform a set of jobs. (For JavaScript folks, it's like &lt;code&gt;addEventListener&lt;/code&gt; for GitHub 😅) From pushes, to pull requests, to issues, a GitHub Action can be attached to those events, which will trigger the action and the job(s) will run. &lt;/p&gt;

&lt;p&gt;Again, I'd never heard of GitHub Actions before, so I had to spend a lot of time reading the documentation and other people's code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TcArqE81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://3.bp.blogspot.com/-pH1pCb3OqtQ/W9EagJJc50I/AAAAAAAMQOg/ew-YHjCU4E4hw7ortL3ZDscpc-fXur4kwCLcBGAs/s1600/AS0004540_16.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TcArqE81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://3.bp.blogspot.com/-pH1pCb3OqtQ/W9EagJJc50I/AAAAAAAMQOg/ew-YHjCU4E4hw7ortL3ZDscpc-fXur4kwCLcBGAs/s1600/AS0004540_16.gif" alt="https://3.bp.blogspot.com/-pH1pCb3OqtQ/W9EagJJc50I/AAAAAAAMQOg/ew-YHjCU4E4hw7ortL3ZDscpc-fXur4kwCLcBGAs/s1600/AS0004540_16.gif" width="370" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It turned out to be simpler than I thought, especially since I figured out you could write a script that you set up the action to run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stepbystep-instructions-to-setting-up-the-github-action"&gt;
  &lt;/a&gt;
  Step-by-Step Instructions to Setting Up the GitHub Action
&lt;/h2&gt;

&lt;p&gt;GitHub Actions uses YAML, which this tutorial doesn't require you to know a lot of. (Personally, I relied on the documentation and Eugene and Simon's code for this part.) But the main script is written in JavaScript and uses Node.js, so some knowledge of both is needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-set-up-your-project-in-your-local-environment"&gt;
  &lt;/a&gt;
  Step 1: Set up your project in your local environment
&lt;/h3&gt;

&lt;p&gt;First, set up your project on your computer or other work environment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 If you're not particularly tied to one editor or don't have a local environment, you can still code in the browser! Check out my article on browser-based code editors: &lt;a href="https://blog.geraldiner.com/three-levels-of-code-editors-in-the-browser"&gt;Three Levels of Code Editors in the Browser&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For this tutorial, I have a directory called &lt;code&gt;projects-readme-tutorial&lt;/code&gt; and I'll be using VS Code as my code editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J-3fOk5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4qjgi6x6v3nr6r4ggf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J-3fOk5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4qjgi6x6v3nr6r4ggf5.png" alt="VS Code editor with a project initialized" width="880" height="965"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-initiate-a-nodejs-project-with-raw-npm-init-endraw-and-install-dependencies"&gt;
  &lt;/a&gt;
  Step 2: Initiate a Node.js project with &lt;code&gt;npm init&lt;/code&gt; and install dependencies
&lt;/h3&gt;

&lt;p&gt;Next you have to initiate a Node.js project and install dependencies via a Terminal or Command Prompt.&lt;/p&gt;

&lt;p&gt;In VS Code, you can open the terminal by going to Terminal &amp;gt; New Terminal. You can use &lt;code&gt;npm init&lt;/code&gt;, which will take you through a series of questions to initiate your project, or use &lt;code&gt;npm init -y&lt;/code&gt; to use all the default configuration settings.&lt;/p&gt;

&lt;p&gt;Here, I used &lt;code&gt;npm init -y&lt;/code&gt; and a &lt;code&gt;package.json&lt;/code&gt; file was created in the directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z6xHYHRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqgqvtwyxclj3rs7no68.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z6xHYHRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqgqvtwyxclj3rs7no68.png" alt="In the terminal, run  raw `npm init -y` endraw  to initialized a NodeJS project" width="737" height="542"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can install some dependencies for this project. &lt;/p&gt;

&lt;p&gt;For this project, you'll need the following dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@octokit/core"&gt;@octokit/core&lt;/a&gt; - For accessing the GitHub API&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/dotenv"&gt;dotenv&lt;/a&gt; - For loading environment variables (such as a GitHub Personal Access Token) and keeping them secret when you push to the repository&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/nodemon"&gt;nodemon&lt;/a&gt; (optional) - For automatically restarting the node application when files are changed. I like to use this for quick and easy testing/debugging so I don't have to stop and start the server every time I change a file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run the following line in your terminal to install the dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;octokit&lt;/span&gt;&lt;span class="sr"&gt;/core dotenv nodemo&lt;/span&gt;&lt;span class="err"&gt;n
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your &lt;code&gt;package.json&lt;/code&gt; file should be updated with the dependencies you just installed. We'll come back to this in a bit to update the &lt;code&gt;scripts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xTk3Z5et--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oloq6wx4y6obxgumh2mx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xTk3Z5et--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oloq6wx4y6obxgumh2mx.png" alt="In package.json, you can see the dependencies added" width="734" height="460"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We'll also be using &lt;code&gt;fs&lt;/code&gt; for file system access, but that's already integrated with Node.js.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-set-up-the-file-that-holds-the-text-to-update-all-the-readme-files"&gt;
  &lt;/a&gt;
  Step 3: Set up the file that holds the text to update all the README files
&lt;/h3&gt;

&lt;p&gt;Now you'll create the file that holds the text that will replace all the old text in the README files. This is the dynamic content, such as my "Other Projects" section of my README template. &lt;/p&gt;

&lt;p&gt;When creating this file, make sure there is some part that is easily distinguishable from the rest. This is so that in the main script, you can easily look for where the new content should be placed. You could add comments, such as &lt;code&gt;&amp;lt;!-- start dynamic content here --&amp;gt;&lt;/code&gt;, but I chose to go by the heading instead. There is no other "Other Projects" heading in the file.&lt;/p&gt;

&lt;p&gt;I've created a new file named &lt;code&gt;projects.md&lt;/code&gt; and pasted in the content that will replace the old content in the README files. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N_5eykj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61nurrmh44u54aoa7nue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N_5eykj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61nurrmh44u54aoa7nue.png" alt="Side by side comparison of the projects.md and README template file" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;projects.md&lt;/code&gt; file on the left is just the "Other Projects" section from my README template file on the right.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-write-a-script-to-access-the-github-api-and-update-the-readme-file-in-all-repos"&gt;
  &lt;/a&gt;
  Step 4: Write a script to access the GitHub API and update the README file in all repos
&lt;/h3&gt;

&lt;p&gt;Now comes the meat and potatoes of the project. This is the script that will do all the work in finding the README file in all your repositories, updating the README file with the content from the &lt;code&gt;projects.md&lt;/code&gt; file, and pushing the new file and its changes to the repository. If you're looking to do something else with this project, be sure to read the &lt;a href="https://docs.github.com/en/rest/guides/getting-started-with-the-rest-api"&gt;GitHub API documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For anything interesting, we need a Personal Access Token when making requests to the GitHub API. Follow these instructions to get your own &lt;a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"&gt;Personal Access Token&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you've got the Personal Access Token, save it in a &lt;code&gt;.env&lt;/code&gt; file in the root of your project folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WLN26hyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dan3k4st6qsu2ltery2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WLN26hyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dan3k4st6qsu2ltery2.png" alt="Add your GitHub Personal Access Token to a .env file" width="880" height="773"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, create a file named &lt;code&gt;index.js&lt;/code&gt;. We'll need the &lt;code&gt;fs&lt;/code&gt;, &lt;code&gt;dotenv&lt;/code&gt;, and &lt;code&gt;octokit&lt;/code&gt; packages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1NdS_zKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t22g3hv414an7u5via2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1NdS_zKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t22g3hv414an7u5via2.png" alt="Working on index.js" width="880" height="772"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we have to set up the &lt;code&gt;octokit&lt;/code&gt; client with our Personal Access Token to access our repos and files. For more information about setting up &lt;code&gt;octokit&lt;/code&gt;, take a look at &lt;a href="https://github.com/octokit/octokit.js"&gt;their documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eIYf5wae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/313zp4u5952v7q96iyl2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eIYf5wae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/313zp4u5952v7q96iyl2.png" alt="Adding octokit client to index.js" width="880" height="252"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The rest of the file is made up of asynchronous functions that will&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find all your repos&lt;/li&gt;
&lt;li&gt;Access the current README file (or create one if it doesn't exist)&lt;/li&gt;
&lt;li&gt;Commit the updated/new README file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Find All Your Repos&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This part of the script uses the &lt;a href="https://docs.github.com/en/rest/reference/repos#list-repositories-for-a-user"&gt;"List repositories for a user" endpoint&lt;/a&gt; of the GitHub API. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dwuJt0hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6hlw6y40bq9ywvloukl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dwuJt0hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6hlw6y40bq9ywvloukl.png" alt="Asynchronous function to find all repositories and update the README file in each" width="880" height="395"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On &lt;code&gt;line 5&lt;/code&gt;, note that if you have more than 100 repositories, you'll have to modify the code a bit to cover all your repositories, since the max per page is 100.&lt;/p&gt;

&lt;p&gt;On &lt;code&gt;line 7&lt;/code&gt;, I take the extra step of filtering out certain repos that I don't want to be updated, including the README file for my GitHub profile and the project itself.&lt;/p&gt;

&lt;p&gt;Then, on &lt;code&gt;lines 8-10&lt;/code&gt; a simple for loop goes through each repo to find and access the README file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Access the Current README file&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This part of the script uses the &lt;a href="https://docs.github.com/en/rest/reference/repos#get-repository-content"&gt;"Get repository content" endpoint&lt;/a&gt; of the GitHub API. There are two other endpoints for specifically getting the README file of a directory, but for some reason, I couldn't get those to work. This one was the only one that would successfully retrieve the file (if it existed).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QtDrApkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uojtu7gi0f010hahkt5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QtDrApkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uojtu7gi0f010hahkt5i.png" alt="Asynchronous function to handle updating the README in the given repo" width="880" height="491"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On &lt;code&gt;line 3&lt;/code&gt; is where the actual request is being made.&lt;/p&gt;

&lt;p&gt;The data looks something like this 🤯:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9xrTsCSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxscxiso9mr72ks4zkc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9xrTsCSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxscxiso9mr72ks4zkc2.png" alt="Using the GitHub API, we can get the data for the README file in a repo as shown here" width="880" height="1503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But what we're most interested in are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;path&lt;/code&gt; - the file name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sha&lt;/code&gt; - the id for the latest commit&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;content&lt;/code&gt; - the actual content of the README file in &lt;code&gt;base64&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;encoding&lt;/code&gt; - the encoding for the file content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So on &lt;code&gt;line 4&lt;/code&gt;, there is some destructuring to isolate those pieces of information.&lt;/p&gt;

&lt;p&gt;The lines that follow are for converting the file contents from &lt;code&gt;base64&lt;/code&gt; to a String. Then, it finds the index for the "Other Projects" section heading (remember when I said to make it something easily distinguishable?). With this index, we can use &lt;code&gt;.slice()&lt;/code&gt; to only take the first part of the content and concatenate the new content from the &lt;code&gt;projects.md&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;There is a helper function to easily get the new content using the &lt;code&gt;fs&lt;/code&gt; package:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CwSUMO_k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mq2fyi01knimcp0kqnd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CwSUMO_k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mq2fyi01knimcp0kqnd.png" alt="Helper function to get the contents of the projects.md file, which is used to update each README file" width="880" height="206"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the README file doesn't exist, it will just create a new one with the content from &lt;code&gt;projects.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Commit the updated/new README file&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally, the updated/new README file will be committed to their respective repos. This is where the &lt;code&gt;sha&lt;/code&gt; in the previous code segment comes in handy, so that it can replace the newest commit.&lt;/p&gt;

&lt;p&gt;This part of the script uses the &lt;a href="https://docs.github.com/en/rest/reference/repos#create-or-update-file-contents"&gt;"Create or update file contents" endpoint&lt;/a&gt; of the GitHub API. Using information generated in the previous code segment, it will make a &lt;code&gt;PUT&lt;/code&gt; request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---w1gutDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prvrqqzfyjl7xpy9iovm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---w1gutDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prvrqqzfyjl7xpy9iovm.png" alt="Asynchronous function to handle committing the updated README file to the repo" width="880" height="348"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The final script&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The final script should look like the code below. Remember that we've only defined functions right now. We need to actually call the main function, &lt;code&gt;updateAllRepos()&lt;/code&gt;, so all that work will actually run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9MRo-d12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75kfryo38l2kkbxna8nf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MRo-d12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75kfryo38l2kkbxna8nf.png" alt="Final version of index.js" width="880" height="1155"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Running/Testing the script&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we've got the script set up, you can test it yourself by running &lt;code&gt;index.js&lt;/code&gt; with &lt;code&gt;node&lt;/code&gt; (or &lt;code&gt;nodemon&lt;/code&gt;, if it was installed).&lt;/p&gt;

&lt;p&gt;Back in the &lt;code&gt;package.json&lt;/code&gt; file, add the following to the &lt;code&gt;scripts&lt;/code&gt; section:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I6Yrgb-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r97ev7m7q9i7toxmody0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I6Yrgb-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r97ev7m7q9i7toxmody0.png" alt="Adding scripts to package.json" width="880" height="773"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-set-up-the-github-action-in-a-yaml-file"&gt;
  &lt;/a&gt;
  Step 5: Set up the GitHub Action in a YAML file
&lt;/h3&gt;

&lt;p&gt;Now that we've got the main script set up, we can work on setting up the actual GitHub Action. GitHub Actions are &lt;strong&gt;workflows&lt;/strong&gt; made of &lt;strong&gt;event(s)&lt;/strong&gt; that trigger &lt;strong&gt;job(s)&lt;/strong&gt;. For this GitHub Action, we ultimately want to run the script we just created whenever the &lt;code&gt;projects.md&lt;/code&gt; file is updated and pushed to the repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EjhI8hpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f7fkfk787jdc358ifns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EjhI8hpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f7fkfk787jdc358ifns.png" alt="Basic GitHub Action workflow" width="212" height="197"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the root of your project directory, create a folder called &lt;code&gt;.github&lt;/code&gt;, and in that folder, create another folder called &lt;code&gt;workflows&lt;/code&gt;. In the &lt;code&gt;workflows&lt;/code&gt; folder, create a file called &lt;code&gt;action.yaml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6GHViOz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60psf1ksy0irrejsee1t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6GHViOz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60psf1ksy0irrejsee1t.png" alt="Directory structure for the GitHub Action" width="880" height="206"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This action can be broken down to the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;event&lt;/strong&gt; will be a &lt;code&gt;push&lt;/code&gt; to the repository, specifically for the &lt;code&gt;projects.md&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;The main &lt;strong&gt;job&lt;/strong&gt; is to run the &lt;code&gt;index.js&lt;/code&gt; script, which is further broken down to the following steps:

&lt;ul&gt;
&lt;li&gt;Check out the repo&lt;/li&gt;
&lt;li&gt;Set up a Node.js environment&lt;/li&gt;
&lt;li&gt;Install the dependencies&lt;/li&gt;
&lt;li&gt;Run the script&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;code&gt;action.yaml&lt;/code&gt; file, this translates to the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3jVLchd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h98ylfars1mr0iryrkco.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3jVLchd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h98ylfars1mr0iryrkco.png" alt="GitHub Action code for running index.js when the projects.md file is pushed to the repo" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll notice on &lt;code&gt;lines 20-21&lt;/code&gt; that we're setting an environment variable called &lt;code&gt;GH_TOKEN&lt;/code&gt;, like we did in the &lt;code&gt;.env&lt;/code&gt; file. In order for the script to have access to the &lt;code&gt;GH_TOKEN&lt;/code&gt; while being run by the action, you need to set a repository secret. &lt;a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository"&gt;Follow these instructions&lt;/a&gt; to set a secret for your repository. &lt;/p&gt;

&lt;p&gt;You can set any number of environment variables and secrets, and access them the same way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-set-up-a-github-repository-for-where-the-github-action-should-live"&gt;
  &lt;/a&gt;
  Step 6: Set up a GitHub repository for where the GitHub Action should live
&lt;/h3&gt;

&lt;p&gt;Now that we've got all our files set up, we can push all our code to GitHub and get the GitHub Action up and running.&lt;/p&gt;

&lt;p&gt;First, set up a GitHub repository to house this project and the GitHub Action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sTXHsa3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajg2rgraakbmyh75ja3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sTXHsa3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajg2rgraakbmyh75ja3h.png" alt="Setting up a repo on GitHub for the project" width="880" height="904"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, follow the instructions for "...or push an existing repository from the command line" to connect to your local work environment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--piIgZA82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bu9o3b1mu89ie7gizjxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--piIgZA82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bu9o3b1mu89ie7gizjxg.png" alt="Follow instructions for connecting your local environment to the repo just created" width="880" height="904"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Don't forget to set up a &lt;code&gt;.gitignore&lt;/code&gt; file to ignore the &lt;code&gt;node_modules&lt;/code&gt; folder and &lt;code&gt;.env&lt;/code&gt; file that contains your Personal Access Token.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlV2Dagl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9fszo7kjwguw25uco2b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlV2Dagl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9fszo7kjwguw25uco2b.png" alt="Set up .gitignore file" width="880" height="315"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything worked out smoothly, you should see your code in the repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oE_6GeTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbsxdqp8x67yx9pikcyt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oE_6GeTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbsxdqp8x67yx9pikcyt.png" alt="Commit all the code we've done to the repo" width="880" height="675"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you go to the "Actions" tab, you might not see anything yet since it's the initial commit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u3UmsfEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbhsfod2tc29w673ba73.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u3UmsfEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbhsfod2tc29w673ba73.png" alt="Initially, the Actions tab in the repo might be empty because of the initial commit" width="880" height="801"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, once you make some changes to &lt;code&gt;projects.md&lt;/code&gt; and push the changes to the repository, it should run the action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--18iIniDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l42l2m53x8q763odx68k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18iIniDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l42l2m53x8q763odx68k.png" alt="Actions tab seeing some action after projects.md is committed with changes" width="880" height="490"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And once the action is completed, you should see your README files updated, like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ih558-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3f7qhe5g54bbxgemr5uc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ih558-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3f7qhe5g54bbxgemr5uc.png" alt="Changes seen in the README file for one of my older repos" width="880" height="906"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;And that's it! Now you have a single file that can be used to update a bajillion other files! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Rp0gktX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/527fbaf54fd5e4a1df0431dc0dbdd3fb/tenor.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Rp0gktX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/527fbaf54fd5e4a1df0431dc0dbdd3fb/tenor.gif" alt="Silly Ton Ton gif" width="498" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you learned as much as I did about GitHub Actions. It makes me curious about a whole bunch of other automations I could create, like the one that autogenerates the GitHub Profile README. &lt;/p&gt;

&lt;p&gt;If you have any questions or need some help, please feel free to reach out. &lt;/p&gt;

&lt;p&gt;Happy coding~ ✨&lt;/p&gt;




&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;💖 Geraldine | Say hi on Twitter 👋🏾 &lt;a href="https://twitter.com/geraldinedesu"&gt;@geraldinedesu&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nm2YUN91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/gM0piFxf9AMVy/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nm2YUN91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/gM0piFxf9AMVy/giphy.gif" alt="It's feng shui" width="398" height="285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post was put together as if rearranging furniture. I had to move around the different pieces to make sure the step-by-step instructions were logical and easy to follow.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://media2.giphy.com/media/gM0piFxf9AMVy/giphy.gif"&gt;Giphy&lt;/a&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>github</category>
    </item>
    <item>
      <title>😱 Static HTML Export with i18n compatibility in Next.js 😱</title>
      <author>Adriano Raiano</author>
      <pubDate>Tue, 07 Dec 2021 13:56:15 +0000</pubDate>
      <link>https://dev.to/adrai/static-html-export-with-i18n-compatibility-in-nextjs-8cd</link>
      <guid>https://dev.to/adrai/static-html-export-with-i18n-compatibility-in-nextjs-8cd</guid>
      <description>&lt;p&gt;You know &lt;a href="https://nextjs.org"&gt;Next.js&lt;/a&gt;, right? - If not, stop reading this article and make something else.&lt;/p&gt;

&lt;p&gt;Next.js is awesome! It gives you the best developer experience with all the features you need...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#toc"&gt;
  &lt;/a&gt;
  TOC
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#but"&gt;BUT, you may have heared about this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-do"&gt;So what can we do now?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#receipe"&gt;The receipe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#outcome"&gt;The outcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#voluntary"&gt;The voluntary part&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#congratulations"&gt;🎉🥳 Congratulations 🎊🎁&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#but-you-may-have-heard-about-this"&gt;
  &lt;/a&gt;
  &lt;strong&gt;BUT&lt;/strong&gt;, you may have heard about this: &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Error: i18n support is not compatible with next export. See here for more info on deploying: &lt;a href="https://nextjs.org/docs/deployment"&gt;https://nextjs.org/docs/deployment&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This happens if you're using the &lt;a href="https://nextjs.org/docs/advanced-features/i18n-routing"&gt;internationalized routing&lt;/a&gt; feature and are trying to generate a &lt;a href="https://nextjs.org/docs/advanced-features/static-html-export"&gt;static HTML export&lt;/a&gt; by executing &lt;code&gt;next export&lt;/code&gt;.&lt;br&gt;
Well, this features requires a Node.js server, or dynamic logic that cannot be computed during the build process, that's why it is &lt;a href="https://nextjs.org/docs/advanced-features/static-html-export#unsupported-features"&gt;unsupported&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the case if you're using &lt;a href="https://github.com/isaachinman/next-i18next"&gt;next-i18next&lt;/a&gt; for example.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#so-what-can-we-do-now"&gt;
  &lt;/a&gt;
  So what can we do now? &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--An1489aN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxvvwq4isdg7uw9357en.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--An1489aN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxvvwq4isdg7uw9357en.jpg" alt="what" width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An obvious option is, to renounce to the static HTML export and use a Node.js server or &lt;a href="https://vercel.com"&gt;Vercel&lt;/a&gt; as deployment environment.&lt;/p&gt;

&lt;p&gt;But sometimes, due to company or architectural guidelines it is mandatory to use a static web server.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Ok then renounce to i18n? - Not really, if we are here, it seems like to be a requirement.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
So then do it without &lt;a href="https://nextjs.org"&gt;Next.js&lt;/a&gt;? - But this usually means to rewrite the whole project.&lt;/p&gt;

&lt;p&gt;Executing &lt;code&gt;next export&lt;/code&gt; when not using i18n seems to work.&lt;br&gt;
What if we do not try to use the &lt;a href="https://nextjs.org/docs/advanced-features/i18n-routing"&gt;internationalized routing&lt;/a&gt; feature and do the i18n routing on our own?&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-recipe"&gt;
  &lt;/a&gt;
  The recipe &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Km3cNKZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7ocgtio6v78cj6bq42v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Km3cNKZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7ocgtio6v78cj6bq42v.jpg" alt="recipe" width="880" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To "cook" this recipe you will need the following ingredients:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use the &lt;a href="https://nextjs.org/docs/routing/introduction#dynamic-route-segments"&gt;dynamic route segments&lt;/a&gt; feature&lt;/li&gt;
&lt;li&gt;willingness to change the structure of your project files&lt;/li&gt;
&lt;li&gt;willingness to adapt a bit of code&lt;/li&gt;
&lt;li&gt;a logic to detect the user language and redirect accordingly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sounds feasible. Let's start!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Remove the i18n options from &lt;code&gt;next.config.js&lt;/code&gt;.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;  - const { i18n } = require('./next-i18next.config')
  - 
  module.exports = {
  -   i18n,
    trailingSlash: true,
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Create a &lt;code&gt;[locale]&lt;/code&gt; folder inside your pages directory.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;a) Move all your pages files to that folder &lt;em&gt;(not &lt;code&gt;_app.js&lt;/code&gt; or &lt;code&gt;_document.js&lt;/code&gt; etc..)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;b) Adapt your imports, if needed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Create a &lt;code&gt;getStatic.js&lt;/code&gt; file and place it for example in a &lt;code&gt;lib&lt;/code&gt; directory.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;serverSideTranslations&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-i18next/serverSideTranslations&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;i18nextConfig&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../next-i18next.config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getI18nPaths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;i18nextConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lng&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}))&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getI18nPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getI18nProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;serverSideTranslations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getI18nProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4. Use &lt;code&gt;getStaticPaths&lt;/code&gt; and &lt;code&gt;makeStaticProps&lt;/code&gt; in your pages, like this:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;  import { useTranslation } from 'next-i18next'
  import { getStaticPaths, makeStaticProps } from '../../lib/getStatic'
  import { Header } from '../../components/Header'
  import { Footer } from '../../components/Footer'
  import Link from '../../components/Link'

  + const getStaticProps = makeStaticProps(['common', 'footer'])
  + export { getStaticPaths, getStaticProps }

  const Homepage = () =&amp;gt; {
    const { t } = useTranslation('common')

    return (
      &amp;lt;&amp;gt;
        &amp;lt;main&amp;gt;
          &amp;lt;Header heading={t('h1')} title={t('title')} /&amp;gt;
          &amp;lt;div&amp;gt;
            &amp;lt;Link href='/second-page'&amp;gt;&amp;lt;button type='button'&amp;gt;{t('to-second-page')}&amp;lt;/button&amp;gt;&amp;lt;/Link&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/main&amp;gt;
        &amp;lt;Footer /&amp;gt;
      &amp;lt;/&amp;gt;
    )
  }

  export default Homepage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5. Install &lt;a href="https://github.com/adrai/next-language-detector"&gt;next-language-detector&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i next-language-detector&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Create a &lt;code&gt;languageDetector.js&lt;/code&gt; file and place it for example in the &lt;code&gt;lib&lt;/code&gt; directory.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;languageDetector&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-language-detector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;i18nextConfig&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../next-i18next.config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;languageDetector&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;supportedLngs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i18nextConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fallbackLng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i18nextConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultLocale&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;7. Create a &lt;code&gt;redirect.js&lt;/code&gt; file and place it for example in the &lt;code&gt;lib&lt;/code&gt; directory.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;languageDetector&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./languageDetector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useRedirect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asPath&lt;/span&gt;

    &lt;span class="c1"&gt;// language detection&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;detectedLng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;languageDetector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;detectedLng&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/404&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// prevent endless loop&lt;/span&gt;
        &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;detectedLng&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nx"&gt;languageDetector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;detectedLng&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;detectedLng&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Redirect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;useRedirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// eslint-disable-next-line react/display-name&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getRedirect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;useRedirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;8. For each of your pages files in your &lt;code&gt;[locale]&lt;/code&gt; directory, but especially for the &lt;code&gt;index.js&lt;/code&gt; file, create a file with the same name with this content:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Redirect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../lib/redirect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Redirect&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;9. Create a &lt;code&gt;Link.js&lt;/code&gt; component and place it for example in the &lt;code&gt;components&lt;/code&gt; directory.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LinkComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;skipLocaleHandling&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asPath&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;skipLocaleHandling&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;skipLocaleHandling&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[locale]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;LinkComponent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;10. Replace al &lt;code&gt;next/link&lt;/code&gt; &lt;code&gt;Link&lt;/code&gt; imports with the appropriate &lt;code&gt;../components/Link&lt;/code&gt; &lt;code&gt;Link&lt;/code&gt; import:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;  - import Link from 'next/link'
  + import Link from '../../components/Link'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;11. Add or modify your &lt;code&gt;_document.js&lt;/code&gt; file to set the correct html &lt;code&gt;lang&lt;/code&gt; attribute:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextScript&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/document&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;i18nextConfig&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../next-i18next.config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyDocument&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentLocale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__NEXT_DATA__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;i18nextConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultLocale&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Html&lt;/span&gt; &lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;currentLocale&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NextScript&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Html&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyDocument&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;12. In case you have a language switcher, create or adapt it:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// components/LanguageSwitchLink.js&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;languageDetector&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../lib/languageDetector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LanguageSwitchLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asPath&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;locale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;pName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`[&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;]`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;pName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`[&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;]`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pName&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt;
        &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;languageDetector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;small&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;LanguageSwitchLink&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// components/Footer.js&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useTranslation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-i18next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LanguageSwitchLink&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./LanguageSwitchLink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;i18nextConfig&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../next-i18next.config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Footer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTranslation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;footer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentLocale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;i18nextConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultLocale&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;footer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;lineHeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4.65em&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;small&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change-locale&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i18nextConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;currentLocale&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LanguageSwitchLink&lt;/span&gt;
                &lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;})}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/footer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#the-outcome"&gt;
  &lt;/a&gt;
  The outcome &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RiE03E3B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtfv2qm923g4cwtfhabr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RiE03E3B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtfv2qm923g4cwtfhabr.jpg" alt="result" width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you know start your project (&lt;code&gt;next dev&lt;/code&gt;) you should see, more or less, the same behaviour as before.&lt;/p&gt;

&lt;p&gt;So what's the benefit?&lt;/p&gt;

&lt;p&gt;Try: &lt;code&gt;next build &amp;amp;&amp;amp; next export&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should see something like this at the end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;●  &lt;span class="o"&gt;(&lt;/span&gt;SSG&lt;span class="o"&gt;)&lt;/span&gt;     automatically generated as static HTML + JSON &lt;span class="o"&gt;(&lt;/span&gt;uses getStaticProps&lt;span class="o"&gt;)&lt;/span&gt;

info  - using build directory: /Users/usr/projects/my-awesome-project/.next
info  - Copying &lt;span class="s2"&gt;"static build"&lt;/span&gt; directory
info  - No &lt;span class="s2"&gt;"exportPathMap"&lt;/span&gt; found &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"/Users/usr/projects/my-awesome-project/next.config.js"&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt; Generating map from &lt;span class="s2"&gt;"./pages"&lt;/span&gt;
info  - Launching 9 workers
info  - Copying &lt;span class="s2"&gt;"public"&lt;/span&gt; directory
info  - Exporting &lt;span class="o"&gt;(&lt;/span&gt;3/3&lt;span class="o"&gt;)&lt;/span&gt;
Export successful. Files written to /Users/usr/projects/my-awesome-project/out
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Yeah no &lt;code&gt;i18n support is not compatible with next export&lt;/code&gt; error anymore!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations! Now you can "deploy" the content of your &lt;code&gt;out&lt;/code&gt; directory to any static web server.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🧑‍💻 The complete code can be found &lt;a href="https://github.com/adrai/next-language-detector/tree/main/example"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-voluntary-part"&gt;
  &lt;/a&gt;
  The voluntary part &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oHioS-pu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ciyxpusc2tf2mqirgvtz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oHioS-pu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ciyxpusc2tf2mqirgvtz.jpg" alt="translation workflow" width="880" height="247"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect to an awesome translation management system and manage your translations outside of your code.&lt;/p&gt;

&lt;p&gt;Let's synchronize the translation files with &lt;a href="https://locize.com"&gt;locize&lt;/a&gt;.&lt;br&gt;
This can be done on-demand or on the CI-Server or before deploying the app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-do-to-reach-this-step"&gt;
  &lt;/a&gt;
  What to do to reach this step:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;in locize: signup at &lt;a href="https://locize.com/register"&gt;https://locize.com/register&lt;/a&gt; and &lt;a href="https://docs.locize.com/integration/getting-started/create-a-user-account"&gt;login&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;in locize: &lt;a href="https://docs.locize.com/integration/getting-started/add-a-new-project"&gt;create a new project&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;in locize: add all your additional languages (this can also be done via &lt;a href="https://docs.locize.com/integration/api#add-new-language"&gt;API&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;install the &lt;a href="https://github.com/locize/locize-cli"&gt;locize-cli&lt;/a&gt; (&lt;code&gt;npm i locize-cli&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#use-the-locizecli"&gt;
  &lt;/a&gt;
  Use the &lt;a href="https://github.com/locize/locize-cli"&gt;locize-cli&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Use the &lt;code&gt;locize sync&lt;/code&gt; command to synchronize your local repository (&lt;code&gt;public/locales&lt;/code&gt;) with what is published on locize.&lt;/p&gt;

&lt;p&gt;Alternatively, you can also use the &lt;code&gt;locize download&lt;/code&gt; command to always download the published locize translations to your local repository (&lt;code&gt;public/locales&lt;/code&gt;) before bundling your app.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#congratulations"&gt;
  &lt;/a&gt;
  🎉🥳 Congratulations 🎊🎁 &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;I hope you’ve learned a few new things about static site generation (SSG), &lt;a href="https://nextjs.org"&gt;Next.js&lt;/a&gt;, &lt;a href="https://github.com/isaachinman/next-i18next"&gt;next-i18next&lt;/a&gt;, &lt;a href="https://www.i18next.com"&gt;i18next&lt;/a&gt; and &lt;a href="https://locize.com"&gt;modern localization workflows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So if you want to take your i18n topic to the next level, it's worth to try the &lt;a href="https://locize.com"&gt;localization management platform - locize&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The founders of &lt;a href="https://locize.com"&gt;locize&lt;/a&gt; are also the creators of &lt;a href="https://www.i18next.com"&gt;i18next&lt;/a&gt;. So with using &lt;a href="https://locize.com"&gt;locize&lt;/a&gt; you directly support the future of &lt;a href="https://www.i18next.com"&gt;i18next&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  👍
&lt;/h1&gt;

</description>
      <category>nextjs</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Web3 for Dummies</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Tue, 07 Dec 2021 13:21:45 +0000</pubDate>
      <link>https://dev.to/abhirajb/web3-for-dummies-gj</link>
      <guid>https://dev.to/abhirajb/web3-for-dummies-gj</guid>
      <description>&lt;p&gt;You've probably heard of Web3 unless you've been living under a rock. Web3 is widely regarded as the Internet's future, and Web3 apps have recently become all the rage. What is Web3? How can developers create Web3 apps? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started
&lt;/h2&gt;

&lt;p&gt;The first phase of the Internet, Web1, was mainly about providing online content and information. As such, Web1 was largely static and practically only allowed users to read information. &lt;/p&gt;

&lt;p&gt;The cloud, which is a remote data storage and processing service accessible over the internet, powers most online services like email, social networking, and shopping. Cloud services are available through Amazon Web Services, Google Cloud, Microsoft Azure, and other platforms. This means that any information shared by users on these platforms is stored by the cloud service provider employed by an online business, such as food delivery or e-commerce. That is known as Web2&lt;/p&gt;

&lt;p&gt;Web3 is the next generation of the internet, with blockchain-based services. Data in Web3 is shared rather than owned by centralised institutions. Furthermore, Web3 prioritises back-end functionality, whereas Web2 prioritised front-end functionality. The advent of dApps, or decentralised applications, which could eventually replace standard applications, is another notable element of the Web3 era. &lt;/p&gt;

&lt;p&gt;You may have heard about "Web3.js" while learning about Web3 and its practical uses. What exactly is Web3.js? The Web3.js library is the primary JavaScript library you'll use while creating Web3 applications. This library is primarily used to interface with the Ethereum blockchain. Web3.js can be thought of as an Ethereum JavaScript API. As a developer, you can use the Web3.js library to create clients or applications that communicate with the Ethereum blockchain. If you wish to properly deal with an Ethereum blockchain from JavaScript, you'll need to bridge the gap between JavaScript and Web3.&lt;/p&gt;

&lt;p&gt;The transition to Web3 is, without a doubt, the Internet’s most significant paradigm shift since the emergence of Web2. So, what is Web3? Well, whereas Web1 was a largely static, read-only web, and Web2 was a dynamic, read-write web, Web3 will provide a decentralized, unmediated read-write Internet. &lt;br&gt;
Obviously, cryptocurrency is a key building block for Web3 since one needs to transact crypto coins or tokens to participate in them. But Web3 is a lot more than that and its use cases are still evolving.&lt;br&gt;
The best example of the Web3 universe is NFTs or non-fungible tokens, which are bought using crypto coins.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-metaverse-and-web3-related"&gt;
  &lt;/a&gt;
  Are Metaverse and Web3 related?
&lt;/h2&gt;

&lt;p&gt;Though there is a lot of interest around both, experts said both are not correlated. The metaverse is about creating digital avatars and interacting with others in virtual spaces, be it offices or arcades. It does not have to be on a blockchain.&lt;/p&gt;

&lt;p&gt;Most role-playing games offer similar services. Imagine metaverse as a role-playing game in a 3D realm. Microsoft is rolling out metaverses through MS Teams in 2022, which will probably run on Azure rather than Ethereum or Solana.&lt;/p&gt;

&lt;p&gt;The whole point of Web3 is decentralisation. While building a metaverse on blockchain is a possibility, it does not make it a purely Web3 use case.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-example"&gt;
  &lt;/a&gt;
  An example
&lt;/h2&gt;

&lt;p&gt;Below, I shall list the differences between Web1, Web2 and Web3 for clearer understanding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mW7QEaPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.cloudflare.com/content/images/2021/10/image5-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mW7QEaPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.cloudflare.com/content/images/2021/10/image5-2.png" alt="web1" width="880" height="481"&gt;&lt;/a&gt; - Web1&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--acaTMAgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.cloudflare.com/content/images/2021/10/image2-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--acaTMAgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.cloudflare.com/content/images/2021/10/image2-2.png" alt="web2" width="880" height="488"&gt;&lt;/a&gt; - Web2&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HnmzxLMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.cloudflare.com/content/images/2021/10/image3-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HnmzxLMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.cloudflare.com/content/images/2021/10/image3-1.png" alt="web3" width="880" height="320"&gt;&lt;/a&gt; - Web 3&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading.
&lt;/h2&gt;

&lt;p&gt;Subscribe to my newsletter to never miss out on my blogs and tech news.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://getrevue.co/profile/abhiraj"&gt;Abhiraj's Dev-letter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Until next time,&lt;br&gt;
&lt;a href="https://abhiraj.glitch.me"&gt;Abhiraj&lt;/a&gt;&lt;/p&gt;

</description>
      <category>web3</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Countdown Loading with JS</title>
      <author>Jatin Sharma</author>
      <pubDate>Tue, 07 Dec 2021 13:17:45 +0000</pubDate>
      <link>https://dev.to/j471n/countdown-loading-with-js-g8j</link>
      <guid>https://dev.to/j471n/countdown-loading-with-js-g8j</guid>
      <description>&lt;p&gt;In this article, we are building a countdown with the help of Javascript and CSS. It can also be used as the loading countdown. Let's first look at what are we building -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BXfXm4TZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/tYadwyQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BXfXm4TZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/tYadwyQ.gif" alt="preview" width="526" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you know how it will look like, So let's look at the code now  -&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the HTML code, the &lt;code&gt;card&lt;/code&gt; class is the main container and it has one  section as child&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;number&lt;/code&gt; :  it is the main countdown number or value&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0e1538&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--text-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--font&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--background-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--font&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* main Card */&lt;/span&gt;
&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;275px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Linear Background by using ::before */&lt;/span&gt;
&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;skew&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;315deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#00ccff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#0e1538&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#d400d4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* countdown number */&lt;/span&gt;
&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--background-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--text-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;225&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;225&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;225&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;720deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the main part is the javascript in order to run this properly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#js"&gt;
  &lt;/a&gt;
  JS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Countdown Interval which runs on every 1s&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;countdownInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// if count is less than or equal to 1 then clear the Interval&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countdownInterval&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`0&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/j471n/embed/NWjGzEx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/j471n/pen/NWjGzEx"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AKOF1Df--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/MNtTdVp.png" alt="codepen" width="300" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;This is the countdown made by using Javascript and CSS you can use this in your project however you want. If you have any suggestions or any query comment down.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can now extend your support by buying me a Coffee.😊👇&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/j471n"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUX4imFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/2QWo3cm.png" alt="buymecoffee" width="374" height="88"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#also-read"&gt;
  &lt;/a&gt;
  Also Read
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/curved-css-timeline-5ab3"&gt;Curved Timeline in CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/how-to-use-web-storage-api-3o28"&gt;How to use Web Storage API?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/fully-functional-google-clone-with-nextjs-223o"&gt;Fully functional google search with next.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>RudderStack’s Transformations API</title>
      <author>RudderStack</author>
      <pubDate>Tue, 07 Dec 2021 13:03:20 +0000</pubDate>
      <link>https://dev.to/rudderstack/rudderstacks-transformations-api-3hbe</link>
      <guid>https://dev.to/rudderstack/rudderstacks-transformations-api-3hbe</guid>
      <description>&lt;p&gt;RudderStack Transformations let you transform any data that you send through RudderStack. You can use them across Event Stream, Warehouse Actions, and Cloud Extract pipelines. They are easy to build, debug, and manage; and they run in real-time, after data collection and before it is delivered to your destination. Simply put, they're data transformations that work like you think they should.&lt;/p&gt;

&lt;p&gt;Although Transformations is one of the most popular RudderStack features, its API wasn't accessible to users -- until now. We are pleased to release the RudderStack Transformations API. With it, you can programmatically add and remove transformations to the platform, create an organization-wide sandbox where your team can store transformations before publishing them to the live environment, define libraries, and version control your transformations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-rudderstack-transformations-api"&gt;
  &lt;/a&gt;
  What is the RudderStack Transformations API?
&lt;/h2&gt;

&lt;p&gt;The Transformations API allows you to perform various operations on your transformations and libraries via HTTP API calls. The API is integrated with the RudderStack UI so that you can easily access and manage your transformations and libraries. You can even publish multiple transformations in a single operation, functionality that is not yet available on the RudderStack UI.&lt;/p&gt;

&lt;p&gt;The Transformations API is a RESTful API. It lets you create and use a transformation and get a JSON object as a response. You can leverage the standard HTTP response codes to determine the success or failure of your API requests.&lt;/p&gt;

&lt;p&gt;Some other key features of the Transformations API include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Lets you version control all your transformations so that every change in a transformation creates a new version.&lt;/li&gt;
&lt;li&gt;  Lets you store your transformations in an organization-wide sandbox before publishing them.&lt;/li&gt;
&lt;li&gt;  Works with Transformation libraries -- modular, reusable JavaScript blocks which you can use in transformations.&lt;/li&gt;
&lt;li&gt;  Authenticates via &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication/"&gt;Basic HTTP Authentication&lt;/a&gt; mechanism.&lt;/li&gt;
&lt;li&gt;  Checks for successful compilation and execution of new transformations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#crud-operations-on-transformations"&gt;
  &lt;/a&gt;
  CRUD Operations on Transformations
&lt;/h2&gt;

&lt;p&gt;The Transformations API allows you to perform the standard CRUD (Create, Retrieve, Update, Delete) operations on your transformations.&lt;/p&gt;

&lt;p&gt;Typically, you can create a transformation and get a JSON object as a response. Updating the transformation with any changes creates a new version or revision. The API also offers an optional parameter (&lt;code&gt;publish)&lt;/code&gt; for these operations, which allows you to publish the latest version of the transformation and make the code live for the incoming event traffic.&lt;/p&gt;

&lt;p&gt;The API assigns an ID to every published transformation. You can leverage this ID to retrieve, update or delete a transformation. Also, you can get all the revisions made to that transformation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#version-control"&gt;
  &lt;/a&gt;
  Version Control
&lt;/h2&gt;

&lt;p&gt;The API creates a new version of the transformation or the library with every change, allowing you to track the whole lineage of that transformation/library.&lt;/p&gt;

&lt;p&gt;The way the Transformations API implements version control is quite interesting. Let's say you create a transformation. Any update or change in it causes RudderStack to save the older version of the transformation as a revision. You can make multiple such changes to the transformation, and the API will record every such revision, while the current version is always available for you to publish and use. The API also allows you to roll back and use any specific version of the transformation you want to publish via its Publish API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transformation-libraries"&gt;
  &lt;/a&gt;
  Transformation Libraries
&lt;/h2&gt;

&lt;p&gt;The Transformation API exposes libraries for a better development workflow for your transformations. They give you the flexibility to reuse and maintain different versions of your transformation code while sparing you manual, repetitive coding work.&lt;/p&gt;

&lt;p&gt;As mentioned above, these libraries are JavaScript functions that you can write, export, and reuse. Let's say you write a function that you want to reuse across multiple transformations configured per destination in RudderStack. All you have to do is export it and import the module by the library name in the desired transformation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You can apply all the CRUD operations mentioned in the above section to the libraries as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For more information and technical details on using the RudderStack Transformations API, check out the &lt;a href="https://docs.rudderstack.com/adding-a-new-user-transformation-in-rudderstack/"&gt;docs&lt;/a&gt;. We've also built some handy transformation templates that you can use to create your transformations. Find them in our &lt;a href="https://github.com/rudderlabs/sample-user-transformers/"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-for-free-and-start-sending-data"&gt;
  &lt;/a&gt;
  Sign up for Free and Start Sending Data
&lt;/h2&gt;

&lt;p&gt;Test out our event stream, ELT, and reverse-ETL pipelines. Use our HTTP source to send data in less than 5 minutes, or install one of our 12 SDKs in your website or app. &lt;a href="https://app.rudderlabs.com/signup?type=freetrial/"&gt;Get started&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>api</category>
      <category>rudderstack</category>
      <category>datatransformation</category>
      <category>datawarehouse</category>
    </item>
    <item>
      <title>Serverless مقدمة عن </title>
      <author>Mohammed Ismaeel</author>
      <pubDate>Tue, 07 Dec 2021 13:03:07 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/serverless-mqdm-n-2bjb</link>
      <guid>https://dev.to/awsmenacommunity/serverless-mqdm-n-2bjb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#serverless-%D9%85%D8%A7-%D9%87%D9%88-%D8%A7%D9%84"&gt;
  &lt;/a&gt;
  Serverless ما هو ال
&lt;/h2&gt;

&lt;p&gt;مجموعة من الخدمات السحابية التي  تتيحُ لك                                     بناء وتشغيل التطبيقات والخدمات دون الحاجة إلى التفكير بالسيرفير&lt;br&gt;&lt;br&gt;
&lt;br&gt;                                  الحوسبة بدون خوادم او سيرفرات تتيح للمطور بناء وتشغيل التطبيقات والخدمات دون الحاجة الى التفكير بالخوادم. ان خدمات السيرفيرلس لا تتطلب منك تجهيز او ادارة او توسيع البنية التحتية. &lt;br&gt;
&lt;br&gt;&lt;br&gt;
يمكن استخدام خدمات السيرفيرلس تقريبا في جميع المجالات كاتطوير المواقع او تطوير تطبيقات الموبايل او في الذكاء الصناعي &lt;br&gt;
&lt;br&gt;                              تعتبر خدمات السيرفرلس اقتصاديه جدا فانت كمظور لا تدفع للخدمه اذا كانت في الوضع الخامل انت تدفع فقط في حالة استعمال الخدمة وهذا شي رائع بالنسبة للشركات الصغيرة او الناشئة او في حال كنت تريد ان تجرب شي جديد&lt;br&gt;&lt;br&gt;
&lt;br&gt;                          من الجدير بالذكر ان جميع التحديثات الامنية وتوفر الخدمة على مدار الساعة هي مسؤولية مزود الخدمة. ان تطوير او بناء خدمات بتقنية السيرفرلس تساعد الموطورين على التركيز على المنتج النهائي وهذا يؤدي الى سرعة الوصول الى السوق والمستخدم  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless-services-%D9%85%D8%A7-%D9%87%D9%8A"&gt;
  &lt;/a&gt;
  Serverless services ما هي
&lt;/h2&gt;

&lt;p&gt;تنقسم الى ثلاثة اقسام كما مبين ادناه&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-compute"&gt;
  &lt;/a&gt;
  1. Compute
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;AWS Lambda&lt;/li&gt;
&lt;li&gt;AWS Fargate&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-integration"&gt;
  &lt;/a&gt;
  2. Integration
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;EventBridge&lt;/li&gt;
&lt;li&gt;Step Function&lt;/li&gt;
&lt;li&gt;SQS&lt;/li&gt;
&lt;li&gt;SNS&lt;/li&gt;
&lt;li&gt;API Gateway&lt;/li&gt;
&lt;li&gt;AppSync&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-data-store"&gt;
  &lt;/a&gt;
  3. Data Store
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;S3&lt;/li&gt;
&lt;li&gt;DynamoDB&lt;/li&gt;
&lt;li&gt;RDS Proxy&lt;/li&gt;
&lt;li&gt;Aurora Serverless&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#serverless-%D9%85%D8%A7-%D9%87%D9%8A-%D8%A7%D9%81%D8%B6%D9%84-%D8%A7%D8%B3%D8%AA%D8%AE%D8%AF%D9%85%D8%A7%D8%AA-%D8%A7%D9%84"&gt;
  &lt;/a&gt;
  Serverless ما هي افضل استخدمات ال
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;معالجة الملفات&lt;/li&gt;
&lt;li&gt;معالجة البيانات&lt;/li&gt;
&lt;li&gt;ألشبكات&lt;/li&gt;
&lt;li&gt;انترنت الاشياء&lt;/li&gt;
&lt;li&gt;تطبيقات الويب والمحمول&lt;/li&gt;
&lt;li&gt;تطبيقات قائمة على الأحداث Event Driven Application&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%D9%81%D9%8A%D8%AF%D9%8A%D9%88-%D8%AA%D8%B9%D9%84%D9%8A%D9%85%D9%8A"&gt;
  &lt;/a&gt;
  فيديو تعليمي
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=c2jS5HOEz7U&amp;amp;list=PLOoZRfEtk6kVk4xHNFi_4cukuzsL-BNz3"&gt;youtube 1&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=OpcLz3BHO34&amp;amp;list=PLOoZRfEtk6kVk4xHNFi_4cukuzsL-BNz3&amp;amp;index=3"&gt;youtube 2&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%D8%B1%D9%88%D8%A7%D8%A8%D8%B7-%D8%B0%D8%A7%D8%AA-%D8%B5%D9%84%D8%A9"&gt;
  &lt;/a&gt;
  روابط ذات صلة
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://serverlessland.com/"&gt;Serverless Land&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aws.amazon.com/serverless/"&gt;AWS Serverless Services&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aws.amazon.com/event-driven-architecture/"&gt;Event-Driven Architecture&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.serverless.com/"&gt;Serverless Framework&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>career</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Start using JSON Schema validation with AJV</title>
      <author>Clara Dios</author>
      <pubDate>Tue, 07 Dec 2021 12:58:03 +0000</pubDate>
      <link>https://dev.to/dcsl-guidesmiths/start-using-json-schema-validation-with-ajv-21c6</link>
      <guid>https://dev.to/dcsl-guidesmiths/start-using-json-schema-validation-with-ajv-21c6</guid>
      <description>&lt;p&gt;&lt;strong&gt;Why JSON Schema validation?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main advantage you get from JSON Schema over other validation options is that it's cross-platform. JSON Schema validators can be found for almost every programming language. This means that you can write a JSON Schema, and use it on the frontend and the backend no matter the language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But wait, what is a JSON Schema?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://json-schema.org/"&gt;https://json-schema.org/&lt;/a&gt; JSON Schema is a vocabulary that allows you to annotate and validate JSON documents.&lt;/p&gt;

&lt;p&gt;Let's start validating something. Imagine we have a collection of emojis:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;emojiName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:smiling_face_with_tear:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;😂&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;polite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;meanings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;someone is laughing to tears&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;emojiName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:slightly_smiling_face:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🙂&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;polite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;meanings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;someone is happy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;someone wants to make a passive aggressive statement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;emojiName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:middle_finger:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🖕&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;polite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;meanings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;disagreement in a strong way with someone or something&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;go f*** yourself&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;emojiName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:gem:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💎&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;polite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;meanings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;It means diamond, wealth, marriage, and jewelry. It is mostly used to suggest marriage engagements, expensiveness, and aristocracy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A schema that would help us to validate the elements of this collection would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emojiName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;polite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;meanings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But that's a bit too generic. Let's add more information about each property inside the object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emojiName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;polite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;meaning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;emojiName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;polite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;meanings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;array&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can go further by adding information about the schema itself, such as a title and a description. We can also limit the number of properties allowed. Additionally, when the property has the type "integer" we can specify a range of numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Emoji - English translator schema&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Here you can add some info about the schema&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emojiName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;polite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;meanings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;emojiName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The emoji's official name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nx"&gt;polite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;If the emoji can be used without fear in a formal context&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nx"&gt;meanings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;array&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The different interpretations of that emoji&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nx"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Emotional intensity from 0 - 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;minimum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;maximum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Now, how do we get a validation output using the schema?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, first let's choose a validation library. Here you can find different validators for different languages: &lt;a href="https://json-schema.org/implementations.html"&gt;https://json-schema.org/implementations.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, we are going to use AJV for node.js: &lt;a href="https://ajv.js.org/"&gt;https://ajv.js.org/&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Let's create a simple project. You can find the code here: &lt;a href="https://github.com/claradios/json-schema-validation-sample"&gt;https://github.com/claradios/json-schema-validation-sample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The structure will be as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EQrUgLqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btybd4lpvbcyywuikxx7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EQrUgLqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btybd4lpvbcyywuikxx7.png" alt="project structure" width="193" height="249"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will need to: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add node &lt;code&gt;npm init&lt;/code&gt; on the root folder.&lt;/li&gt;
&lt;li&gt;install the AJV JSON-Schema validation library &lt;code&gt;npm i ajv&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;inside &lt;code&gt;index.js&lt;/code&gt; import it, and create an &lt;code&gt;AJV&lt;/code&gt; instance.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// index.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Ajv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ajv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ajv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Ajv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to import our collection to validate and the schema we have created for that purpose:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emoji&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./schemas/emoji.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emojiCollection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./emojiCollection.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And validate as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// index.js&lt;/span&gt;

&lt;span class="nx"&gt;emojiCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;emojiItem&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// loop collection elements for validation&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ajv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;emojiItem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;validation&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`emoji: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;emojiItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is correctly built`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`emoji: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;emojiItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; has the following errors: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ajv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that AJV will return by default the first error it finds. If we want to get all errors we pass the following when instantiating:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const ajv = new Ajv({ allErrors: true })&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Now we are ready to run our code (&lt;code&gt;node index.js&lt;/code&gt; or &lt;code&gt;npm start&lt;/code&gt;) and see the validation output on a terminal:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iWkUFV9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5q1nolsp4vrerlr7g73.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iWkUFV9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5q1nolsp4vrerlr7g73.png" alt="validation logs on terminal" width="801" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first three elements of our collection seem to be perfectly fine but the diamond has several problems:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f_7ToNu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38x7fbuv8cw5uv7cyj8g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_7ToNu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38x7fbuv8cw5uv7cyj8g.png" alt="diamond validation logs" width="477" height="646"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Work with errors output and make them human-readable.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Given that the error output for a given element can bring a huge amount of information we may want to reshape what those errors look like, in order to make them easier to read. If so, we can install: &lt;code&gt;npm install ajv-errors&lt;/code&gt; to our schema and adjust our imports like this and then add the keyword &lt;code&gt;errorMessage&lt;/code&gt;to our schema.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Ajv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ajv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ajv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Ajv&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;allErrors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// Ajv option allErrors is required&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ajv-errors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;ajv&lt;/span&gt; &lt;span class="cm"&gt;/*, {singleError: true} */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can, for example, create specific messages for each keyword to make them more understandable, or return a single message that communicates the core error in a simpler way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;errorMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should be an object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// will not replace internal "type" error for the properties listed above&lt;/span&gt;
        &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;emojiName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should have a string property 'emojiName'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;polite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should have a boolean property 'polite'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;meanings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should have an array of strings property 'meanings'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;emotionalIntensity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should have an integer property 'emotionalIntensity'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should have a string property 'symbol'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;additionalProperties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should not have properties other than emojiName, polite, meanings, emotionalIntensity, symbol&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What's next and what can AJV be used for?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a real-life example, Disco is a backend project I am working on. It is based on microservices architecture that translates XML files into JSON and serves them through an API to be rendered.&lt;/p&gt;

&lt;p&gt;During the translation process, the JSON schema validator verifies that the resulting JSON files are valid and consistent to continue through the chain.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We have created different instances of AJV. Each instance contains a collection of several schemas. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some schemas are used inside others. That is possible thanks to a &lt;code&gt;$ref&lt;/code&gt; property that allows you to create links between them. This also helps us to recursively validate content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We have wrapped the AJV library into our own custom library and published as an NPM package so we can install it in several parts of the chain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We have visually documented our schemas in a React.js + d3.js that renders all the schemas and properties our content should match. This in fact could be the subject of another article.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is all for now, hope it was useful, cheers!&lt;/p&gt;

</description>
      <category>node</category>
      <category>ajv</category>
      <category>json</category>
      <category>validation</category>
    </item>
    <item>
      <title>Simplifying Event Filtering and Value Aggregation with RudderStack</title>
      <author>RudderStack</author>
      <pubDate>Tue, 07 Dec 2021 12:55:23 +0000</pubDate>
      <link>https://dev.to/rudderstack/simplifying-event-filtering-and-value-aggregation-with-rudderstack-44gc</link>
      <guid>https://dev.to/rudderstack/simplifying-event-filtering-and-value-aggregation-with-rudderstack-44gc</guid>
      <description>&lt;p&gt;Dealing with event data is dirty work at times. Developers may transmit events with errors because of a change a developer made. Also, sometimes errors could be introduced if the data engineering team decides to change something on the data warehouse schema. Due to these changes to the schema, data type conflict may occur. How can someone deal with all the different event data issues that might arise in a production environment? This blog discusses how &lt;a href="http://www.rudderstack.com/"&gt;RudderStack&lt;/a&gt; handles event filtering and value aggregation without introducing manual errors.&lt;/p&gt;

&lt;p&gt;RudderStack's solution is a sophisticated mechanism. Here, you can implement custom logic using JavaScript to define transformations. You can apply these transformations to the incoming events.&lt;/p&gt;

&lt;p&gt;Having an expressive environment like RudderStack offers endless possibilities of how a data engineering team can interact with the data. In this blog post, we will explore just two of the most common use cases we've encountered among the RudderStack community. Event filtering and value aggregation are universal, simple to implement, yet very powerful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-transformation-for-event-filtering-and-value-aggregation"&gt;
  &lt;/a&gt;
  User Transformation for Event Filtering and Value Aggregation
&lt;/h2&gt;

&lt;p&gt;You can define user transformations in the Configuration Plane of your RudderStack setup. Few sample user transformations are available on our &lt;a href="https://github.com/rudderlabs/sample-user-transformers/"&gt;GitHub&lt;/a&gt;. This blog provides an insight into one such sample transformation that you can use for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Event Filtering: This stops events from passing to a destination. You might need to filter events where an organization employs multiple tools/platforms for addressing different business requirements. Also, you may want to route only specific events to specific tool/platform destinations.&lt;/li&gt;
&lt;li&gt;  Value Aggregation: This allows aggregation of values on specific attributes of particular event types. You might need to aggregate values where an organization is not looking to employ a tool/platform to perform transaction-level record keeping and/or analysis. Instead, they want consolidated records/analytics. So, this kind of transformation helps in reducing the network traffic, and request/message volume. This is because the system can replace multiple events of a particular type by a single event of the same type with the aggregated value(s). This transformation also helps in cost reduction, where the destination platform charges by volume of events/messages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can view the sample transformation on our &lt;a href="https://github.com/rudderlabs/sample-user-transformers/"&gt;GitHub&lt;/a&gt; page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;You need to contain all logic within the &lt;code&gt;transform&lt;/code&gt; function, which takes an array of events as input and returns an array of transformed events. The &lt;code&gt;transform&lt;/code&gt; function is the entry-point function for all user transformations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filterEventNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="c1"&gt;// Add list of event names that you want to filter out&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;game_load_time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lobby_fps&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

 &lt;span class="c1"&gt;//remove events whose name match those in above list&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eventName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;filterEventNames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code snippet above shows how you can use the &lt;code&gt;filter&lt;/code&gt; function of JavaScript arrays to filter out events based on the event name.&lt;/p&gt;

&lt;p&gt;A variation of this code is also possible. Here, the values in the array of event names are the ones you &lt;em&gt;want&lt;/em&gt; to retain, and you remove the not (&lt;code&gt;!&lt;/code&gt;) condition from the &lt;code&gt;return&lt;/code&gt; statement in the penultimate line.&lt;/p&gt;

&lt;p&gt;Below code shows event removal based on a simple check like event name match but more complex logic involving checking the presence of value for a related attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//remove events of a certain type if related property value does not satisfy the pre-defined condition&lt;/span&gt;
&lt;span class="c1"&gt;//in this example, if 'total_payment' for a 'spin' event is null or 0, then it would be removed.&lt;/span&gt;
        &lt;span class="c1"&gt;//Only non-null, non-zero 'spin' events would be considered&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nonSpinAndSpinPayerEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filteredEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eventName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// spin events&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total_payments&lt;/span&gt; 
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total_payments&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see from the above examples, you can use the filtered array available as output from one step as the input to the next. As a result, you can daisy-chain the transformation conditions.&lt;/p&gt;

&lt;p&gt;Finally, the following code shows how you can prepare aggregates for specific attributes across events of a particular type present in a batch. After this, the code returns a single event of the concerned type. Also, the code returns the aggregated values for the corresponding attributes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//remove events of a certain type if related property value does not satisfy the pre-defined condition&lt;/span&gt;
&lt;span class="c1"&gt;//in this example, if 'total_payment' for a 'spin' event is null or 0, then it would be removed.&lt;/span&gt;
        &lt;span class="c1"&gt;//Only non-null, non-zero 'spin' events would be considered&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nonSpinAndSpinPayerEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filteredEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eventName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// spin events&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total_payments&lt;/span&gt; 
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total_payments&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In the above snippet:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  First, the code collects the &lt;code&gt;spin_result&lt;/code&gt; events into an array.&lt;/li&gt;
&lt;li&gt;  Then, the code aggregates the values for three attributes -- &lt;code&gt;bet_amount&lt;/code&gt;, &lt;code&gt;win_amount&lt;/code&gt;, and &lt;code&gt;no_of_spin&lt;/code&gt; by iterating over the elements of the above array.&lt;/li&gt;
&lt;li&gt;  After this, the system assigns the aggregated values to the respective attributes of the first &lt;code&gt;spin_result&lt;/code&gt; event in the array.&lt;/li&gt;
&lt;li&gt;  Now, the code separates the events that are not of the target type (&lt;code&gt;spin_result&lt;/code&gt; in this case) into another array. If there were no such events, an empty array is created.&lt;/li&gt;
&lt;li&gt;  Finally, the system adds the &lt;code&gt;single spin_result&lt;/code&gt; event to the array created in the previous step, and the result is returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-for-free-and-start-sending-data"&gt;
  &lt;/a&gt;
  Sign up for Free and Start Sending Data
&lt;/h2&gt;

&lt;p&gt;Test out our event stream, ELT, and reverse-ETL pipelines. Use our HTTP source to send data in less than 5 minutes, or install one of our 12 SDKs in your website or app. &lt;a href="https://app.rudderlabs.com/signup?type=freetrial/"&gt;Get started&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>eventfiltering</category>
      <category>valueaggregation</category>
      <category>eventdata</category>
      <category>rudderstack</category>
    </item>
  </channel>
</rss>
