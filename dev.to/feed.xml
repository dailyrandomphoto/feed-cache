<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>URL Shortener App üòç</title>
      <author>Said Mounaim</author>
      <pubDate>Thu, 08 Apr 2021 21:44:01 +0000</pubDate>
      <link>https://dev.to/said_mounaim/url-shortener-app-1d3n</link>
      <guid>https://dev.to/said_mounaim/url-shortener-app-1d3n</guid>
      <description>&lt;p&gt;URL Shortener App Using Vanilla JavaScript üéâüòç&lt;/p&gt;

&lt;p&gt;Demo :&lt;br&gt;
&lt;a href="https://shorturlapp.netlify.app/"&gt;https://shorturlapp.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code :&lt;br&gt;
&lt;a href="https://github.com/saidMounaim/100DaysOfCode/tree/main/Day9"&gt;https://github.com/saidMounaim/100DaysOfCode/tree/main/Day9&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My #100DaysOfCode Challenge üòç&lt;br&gt;
&lt;a href="https://github.com/saidMounaim/100DaysOfCode/"&gt;https://github.com/saidMounaim/100DaysOfCode/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Branding Yourself is Easy</title>
      <author>D\sTro</author>
      <pubDate>Thu, 08 Apr 2021 21:22:39 +0000</pubDate>
      <link>https://dev.to/slimdestro/branding-yourself-is-easy-4c59</link>
      <guid>https://dev.to/slimdestro/branding-yourself-is-easy-4c59</guid>
      <description>&lt;p&gt;Branding yourself is important if you have to survive in the industry for long. Good news is, it's easy for people like us whose professional playground is the internetüëå&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A github account with little or more nerdy user name with few repos. Don't get demotivated by looking at others repo. If others have lots of repo or unique research that means they've been doing this constantly for long&lt;/p&gt;

&lt;p&gt;Join &lt;strong&gt;Communities&lt;/strong&gt; like Dev, hashnode, medium, fcc, Twitter or just gBlog and keep posting your (*research) and interesting findings &lt;/p&gt;

&lt;p&gt;Plain &lt;strong&gt;Profile picture&lt;/strong&gt; suits social media but for tech forums, it should reflect who you are&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open source Contribution&lt;/strong&gt; is great but ignore it if you are offered code comments kind if task only &lt;/p&gt;

&lt;p&gt;There are &lt;strong&gt;"coding models"&lt;/strong&gt; on Instagram and most of them are either coding amateur or just got stated but their contents creation style motivates other developers. You should try this too&lt;/p&gt;

&lt;p&gt;You don't need to own a domain with your full name for &lt;strong&gt;Portfolio&lt;/strong&gt;. You can use heroku or any other forum which serves subdomain based blog. Great one is "github pages" Which will force you to learn how to push code successfully&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Peach yourself&lt;/strong&gt;. This skill requires both connections as well as courage. There's a saying "if product you built is not great then make sure the marketing is great". This skill is the backbone of this saying &lt;/p&gt;

&lt;p&gt;You won't survive on &lt;strong&gt;Stack overflow&lt;/strong&gt; so better use this platform for learning until you are confident&lt;/p&gt;

&lt;p&gt;Having &lt;strong&gt;SEO&lt;/strong&gt; skill is nice but not important people talk about you and your work &lt;/p&gt;

&lt;p&gt;Follow &lt;strong&gt;Technical blogs&lt;/strong&gt;. for example mit, deepai, FbAi, google etc. This will keep your knowledge of the domain on track&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Follow my &lt;a href="https://twitter.com/slimDestro/status/1380237743721082881"&gt;Twitter&lt;/a&gt; account for regular updates&lt;/p&gt;

&lt;p&gt;-Thanks&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>SOLID: Open Closed Principle</title>
      <author>Victor Manuel Pinzon</author>
      <pubDate>Thu, 08 Apr 2021 21:18:03 +0000</pubDate>
      <link>https://dev.to/victorpinzon1988eng/solid-open-closed-principle-58na</link>
      <guid>https://dev.to/victorpinzon1988eng/solid-open-closed-principle-58na</guid>
      <description>&lt;p&gt;&lt;em&gt;This is a continuation of the &lt;a href="https://dev.to/victorpinzon1988eng/solid-single-responsibility-principle-48an"&gt;SOLID principles&lt;/a&gt;  series.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Open/Closed Principle (OCP) is one of the most important SOLID principles but the least used. One of the reasons is its ambiguous and confusing definition. The OCP was first defined by Bertrand Meyer in his &lt;a href="https://www.amazon.com/-/es/Bertrand-Meyer/dp/0136291554"&gt;‚ÄúObject-Oriented Software Construction‚Äù&lt;/a&gt; book. The OCP, according to Meyer, states the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Software entities should be open for extension but closed for modification.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The original definition given by Meyer led to some confusion within the developer community because it was poorly phrased. Years later, Bob Martin expanded the definition as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You should be able to extend the behavior of a system without having to modify that system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This definition was in tune with the plug-in architecture, which was at its peak at that time. The plug-in architecture states that you should build software that is able to extend its core functionality by providing plugins, which you could add, remove or change with little or no effect on the rest of the core system.&lt;/p&gt;

&lt;p&gt;For instance, an integrated development environment (IDE) allows you to extend its core functionality by using plugins, such as Lite Server, Remote SSH, etc... These plugins do not affect the IDE‚Äôs core system. This means that an IDE is in tune with the plug-in architecture and the Open/Closed Principle.&lt;/p&gt;

&lt;p&gt;Another example of OCP can be found in software libraries. These are usually developed to be used in different contexts and projects. Some standard libraries even allow you to extend their core functionality by using inheritance and polymorphism.  These libraries are also in tune with the Open/Closed Principle because you could extend the functionality of these libraries without affecting their core functionality. &lt;/p&gt;

&lt;p&gt;Now let's see a code example. Suppose you work for a gaming development company. Your boss, as part of a project, asks you to implement a library for calculating any rectangle¬¥s area. This will be used for drawing the game‚Äôs characters.&lt;/p&gt;

&lt;p&gt;You develop the following classes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Rectangle&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Rectangle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/*Getters / Setters*/&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Rectangle class stores the width and height of any rectangle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AreaCalculator&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculateArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Rectangle&lt;/span&gt; &lt;span class="n"&gt;rectangle&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rectangle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getWidth&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;rectangle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getHeight&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;   
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The AreaCalculator class defines just one method in charge of the area calculation, which is done by multiplying the rectangle‚Äôs width by the rectangle‚Äôs height.&lt;/p&gt;

&lt;p&gt;The library is used as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;

        &lt;span class="nc"&gt;AreaCalculator&lt;/span&gt; &lt;span class="n"&gt;areaCalc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;AreaCalculator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;Rectangle&lt;/span&gt; &lt;span class="n"&gt;rec1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Rectangle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;13.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Rectangle&lt;/span&gt; &lt;span class="n"&gt;rec2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Rectangle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;7.89&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;9.85&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Rectangle's area #1: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;areaCalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calculateArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rec1&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Rectangle's area #2: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;areaCalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calculateArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rec2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your library is a success and is used in multiple projects. Months later, your boss asks you to implement the area calculation for squares.&lt;/p&gt;

&lt;p&gt;When you start the analysis of the new requirement you realize the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A square is a special case of the rectangle. The difference is that the sides of the square are the same length.&lt;/li&gt;
&lt;li&gt;The area of a square is calculated by multiplying the length of the sides by itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You immediately realize that your library does not comply with Open/Closed Principle, because you cannot extend the library functionality by adding new geometric figures without modifying the existing code. Of course, we could discuss that in order to add the square functionality you could set the same length for all the sides of the rectangle, but what if you want to add the circle functionality?&lt;/p&gt;

&lt;p&gt;The answer is the Open/Closed Principle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-the-openclosed-principle"&gt;
  &lt;/a&gt;
  Applying the Open/Closed Principle
&lt;/h2&gt;

&lt;p&gt;The Area Calculator library shows us the problems that can arise when we do not take into account the future changes that a specific module can have. The main objective of the OCP is to develop software solutions where you can easily extend functionalities without affecting the core system. To achieve this, you must identify the modules in your code that are most likely to change in the future and decouple them, so you can easily extend their behavior.&lt;/p&gt;

&lt;p&gt;Decoupling means taking the key parts of your classes‚Äô functionality and replace them with interfaces. This allows you to replace these key parts with any class that extends the interface.  &lt;/p&gt;

&lt;p&gt;To apply OCP in the Area Calculator library, we‚Äôll define a geometric figure interface that will have just one method for area calculation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;GeometricFigure&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculateArea&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we‚Äôll define the specific geometric figure classes. Each figure will define its own implementation of the area calculation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Rectangle&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;GeometricFigure&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Rectangle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculateArea&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Square&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;GeometricFigure&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;side&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Square&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;side&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;side&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;side&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculateArea&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;side&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;side&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Circle&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;GeometricFigure&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="no"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.1416&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Circle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculateArea&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Circle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will modify the AreaCalculator class so that the calculateArea method receives a GeometricFigure object. So it can calculate its own area by using the object's method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AreaCalculator&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculateArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;GeometricFigure&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calculateArea&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;    
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The library is used as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="nc"&gt;AreaCalculator&lt;/span&gt; &lt;span class="n"&gt;areaCalc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;AreaCalculator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;Square&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Square&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.15&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Rectangle&lt;/span&gt; &lt;span class="n"&gt;rectangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Rectangle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;7.85&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.85&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Circle&lt;/span&gt; &lt;span class="n"&gt;circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Circle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;7.98&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Square's area: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;areaCalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calculateArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Rectangle's area: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;areaCalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calculateArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rectangle&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Circle's area #1:"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;areaCalc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calculateArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;circle&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The new design for the Area Calculator library allows us to extend the functionality of any geometric figure as long as we implement the GeometricFigure interface. Now the library complies with the Open/Closed Principle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-we-always-apply-the-openclosed-principle"&gt;
  &lt;/a&gt;
  Should we always apply the Open/Closed Principle?
&lt;/h2&gt;

&lt;p&gt;The OCP should not be an unbreakable rule when designing software solutions, it should be more like a best practice. The problem with OCP, as the same as the Single Responsibility Principle, is that you must guess the possible future changes your code will suffer. This can be easy for a senior or semi-senior developer, but for a junior developer could be a disaster. The poor implementation of the OCP could complicate the structure needlessly.&lt;/p&gt;

&lt;p&gt;My recommendation is to always design your solutions in a way that your code is easily understood by other developers and easily scalable for changes in the future. About OCP, it is always better to wait for the first iteration of changes (because it always changes) so that you can identify the modules where you can apply the Open/Closed Principle.&lt;/p&gt;

&lt;p&gt;If you like to read more about OCP, you can have a look at &lt;a href="http://blog.cleancoder.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html"&gt;Uncle Bob's Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next post, we will talk about the Liskov Substitution Principle.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/victorpinzon198"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/victor-manuel-pinzon-reyes-072251134/"&gt;Linkedin&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>oop</category>
      <category>programming</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Write when your angry</title>
      <author>Adam Crockett</author>
      <pubDate>Thu, 08 Apr 2021 21:06:36 +0000</pubDate>
      <link>https://dev.to/adam_cyclones/write-when-your-angry-4kon</link>
      <guid>https://dev.to/adam_cyclones/write-when-your-angry-4kon</guid>
      <description>&lt;p&gt;Ahhhhhhh üò°, bad day, you?&lt;/p&gt;

</description>
      <category>career</category>
      <category>anonymous</category>
    </item>
    <item>
      <title>One-liner to install peerDependencies</title>
      <author>matoruru</author>
      <pubDate>Thu, 08 Apr 2021 20:39:05 +0000</pubDate>
      <link>https://dev.to/matoruru/one-liner-to-install-peerdependencies-9ee</link>
      <guid>https://dev.to/matoruru/one-liner-to-install-peerdependencies-9ee</guid>
      <description>&lt;p&gt;The command is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"console.log(Object.keys(require('./package.json').peerDependencies).join(' '))"&lt;/span&gt; | xargs yarn add
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;Let's say we have &lt;code&gt;peerDependencies&lt;/code&gt; in our &lt;code&gt;package.json&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"peerDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.2"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll see one by one:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Load the &lt;code&gt;package.json&lt;/code&gt; and get the peerDependencies.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Welcome to Node.js v15.14.0.
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./package.json'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.peerDependencies
&lt;span class="o"&gt;{&lt;/span&gt; react: &lt;span class="s1"&gt;'^17.0.2'&lt;/span&gt;, &lt;span class="s1"&gt;'react-dom'&lt;/span&gt;: &lt;span class="s1"&gt;'^17.0.2'&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Object.keys&lt;/code&gt; function collects the keys of the object and put them together in the array.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Welcome to Node.js v15.14.0.
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Object.keys&lt;span class="o"&gt;({&lt;/span&gt; react: &lt;span class="s1"&gt;'^17.0.2'&lt;/span&gt;, &lt;span class="s1"&gt;'react-dom'&lt;/span&gt;: &lt;span class="s1"&gt;'^17.0.2'&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;, &lt;span class="s1"&gt;'react-dom'&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;join&lt;/code&gt; method joins the elements with the given string.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;, &lt;span class="s1"&gt;'react-dom'&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;.join&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;'react react-dom'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;node -e&lt;/code&gt; evaluates the given script.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"console.log('react react-dom')"&lt;/span&gt;
&lt;span class="s1"&gt;'react react-dom'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pass it to the &lt;code&gt;yarn add&lt;/code&gt; with &lt;code&gt;xargs&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"console.log('react react-dom')"&lt;/span&gt; | xargs yarn add
yarn add v1.22.5
&lt;span class="o"&gt;[&lt;/span&gt;1/4] Resolving packages...
&lt;span class="o"&gt;[&lt;/span&gt;2/4] Fetching packages...
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="c"&gt;########------------------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Done ü•≥&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Introducing nest-commander</title>
      <author>Jay McDoniel</author>
      <pubDate>Thu, 08 Apr 2021 20:23:02 +0000</pubDate>
      <link>https://dev.to/nestjs/introducing-nest-commander-5a3o</link>
      <guid>https://dev.to/nestjs/introducing-nest-commander-5a3o</guid>
      <description>&lt;p&gt;&lt;em&gt;Jay is a member of the NestJS core team, primarily helping out the community on Discord and Github and contributing to various parts of the framework.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What's up Nestlings! So you've been developing web servers with NestJS for a while now, and you're in love with the DI context that it brings. You're enthralled by the class first approach, and you have "nest-itis" where you just want everything to work with Nest because, well, it just feels good. But now, after building some web servers and application, you realize you need to be able to run some one-off methods, or maybe you want to provide a full CLI package for one of your projects. You could write these commands using shell scripts (and I wish you the best if so), or you could use a CLI package like &lt;code&gt;yargs&lt;/code&gt; or &lt;code&gt;commander&lt;/code&gt;. Those are all fine options, but none of them are using Nest, which is sad for those of you with "nest-itis". So what do you do? You go to Google, type in "nest commander package" and search through the results, finding &lt;code&gt;nest-commander&lt;/code&gt;. And that's where you see the light.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-sets-nestcommander-apart-from-other-nest-cli-packages"&gt;
  &lt;/a&gt;
  What sets nest-commander apart from other Nest CLI packages
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#-raw-nestjscommand-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/nestjs-command"&gt;&lt;code&gt;nestjs-command&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;uses &lt;code&gt;yargs&lt;/code&gt; as the underlying CLI engine&lt;/li&gt;
&lt;li&gt;uses parameter decorators for command&lt;/li&gt;
&lt;li&gt;has a &lt;code&gt;CommandModuleTest&lt;/code&gt; built into the package&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-nestjsconsole-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/nestjs-console"&gt;&lt;code&gt;nestjs-console&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;uses &lt;code&gt;commander&lt;/code&gt; for the underlying CLI engine&lt;/li&gt;
&lt;li&gt;has a &lt;code&gt;ConsoleService&lt;/code&gt; to create commands or can use decorator&lt;/li&gt;
&lt;li&gt;no immediate testing integration&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-nestcommander-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/nest-commander"&gt;&lt;code&gt;nest-commander&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;uses &lt;code&gt;commander&lt;/code&gt; for the underlying CLI engine&lt;/li&gt;
&lt;li&gt;uses a decorator on a class for a command and a decorator on class methods for command options&lt;/li&gt;
&lt;li&gt;has a separate testing package to not bloat the final CLI package size&lt;/li&gt;
&lt;li&gt;has an &lt;code&gt;InquirerService&lt;/code&gt; to integrate inquirer into your CLI application&lt;/li&gt;
&lt;li&gt;has a &lt;code&gt;CommandFactory&lt;/code&gt; to run similar to &lt;code&gt;NestFactory&lt;/code&gt; for a familiar DX&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it
&lt;/h1&gt;

&lt;p&gt;Okay, so we've talked about what's different, but let's see how we can actually write a command using &lt;code&gt;nest-commander&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Let's say we want to create a CLI that takes in a name, and an age and outputs a greeting. Our CLI will have the inputs of &lt;code&gt;-n personName&lt;/code&gt; and &lt;code&gt;-a age&lt;/code&gt;. In commander itself, this would look something like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;program&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-n &amp;lt;personName&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-a &amp;lt;age&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, you're still rather young!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, you're in the prime of your life!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, getting up there in age, huh? Well, you're only as young as you feel!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works out well, and it pretty easy to run, but as your program grows it may be difficult to keep all of the logic clean and separated. Plus, in some cases you may need to re-instantiate services that Nest already manages for you. So enter, the &lt;code&gt;@Command()&lt;/code&gt; decorator and the &lt;code&gt;CommandRunner&lt;/code&gt; interface. &lt;/p&gt;

&lt;p&gt;All &lt;code&gt;nest-commander&lt;/code&gt; commands implement the &lt;code&gt;CommadnRunner&lt;/code&gt; interface, which says that every &lt;code&gt;@Command()&lt;/code&gt; will have an &lt;code&gt;async run(inputs: string[], options?: Record&amp;lt;string, any&amp;gt;): Promise&amp;lt;void&amp;gt;&lt;/code&gt; method. &lt;code&gt;inputs&lt;/code&gt; are values that are passed directly to the command, as defined by the &lt;code&gt;arguments&lt;/code&gt; property of the &lt;code&gt;@Command()&lt;/code&gt; decorator. &lt;code&gt;options&lt;/code&gt; are the options passed for the command that correlate back to each &lt;code&gt;@Option()&lt;/code&gt; decorator. The above command could be written with &lt;code&gt;nest-commander&lt;/code&gt; like so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sayHello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;isDefault&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SayHelloCommand&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Commandrunner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, you're still rather young!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, you're in the prime of your life!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, getting up there in age, huh? Well, you're only as young as you feel!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Opiton&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-n &amp;lt;personName&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;parseName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-a &amp;lt;age&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;parseAge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now all we need to do is add the &lt;code&gt;SayHelloCommand&lt;/code&gt; to the Nest application and make use of &lt;code&gt;CommandFactory&lt;/code&gt; in our &lt;code&gt;main.ts&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/say-hello.module.ts&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;SayHelloCommand&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SayHelloModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/main.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CommandFactory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nest-commander&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SayHelloModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./say-hello.module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;fucntion&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;CommandFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SayHelloModule&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there you have it, the command is fully operational. If you end up forgetting to pass in an option, commander will inform you the call is invalid.&lt;/p&gt;

&lt;p&gt;Now, this is all fine and dandy, but the real magic, as mentioned before, is that all of Nest's DI context still works! So long as you are using singleton or transient providers, there's no limitation to what the &lt;code&gt;CommandFactory&lt;/code&gt; can manage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inquirerservice"&gt;
  &lt;/a&gt;
  InquirerService
&lt;/h2&gt;

&lt;p&gt;So now what? You've got this fancy CLI application and it runs awesome, but what about when you want to get user input during runtime, not just when starting the application. Well, that's where the &lt;code&gt;InquirerService&lt;/code&gt; comes in. The first thing that needs to happen is a class with &lt;code&gt;@QuestionSet()&lt;/code&gt; needs to be created. This will be the class that holds the questions for the named set. The name is important as it will be used in the &lt;code&gt;InquirerService&lt;/code&gt; later. Say that we want to get the name and age at runtime or at start time, first we need to change the options to optional by changing from chevrons to brackets (i.e. &lt;code&gt;&amp;lt;personName&amp;gt;&lt;/code&gt; to &lt;code&gt;[personName]&lt;/code&gt;). Next, we need to create our question set&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;QuestionSet&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;personInfo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PersonInfoQuestions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;personInput&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;What is your name?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;parseName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;How old are you?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;parseAge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in the &lt;code&gt;SayHelloCommand&lt;/code&gt; we need to add in the &lt;code&gt;InquirerService&lt;/code&gt; and ask for the information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sayHello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;isDefault&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SayHelloCommand&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;CommandRunner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="na"&gt;inquireerService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;InquirerService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inquirerService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;personInfo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, you're still rather young!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, you're in the prime of your life!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, getting up there in age, huh? Well, you're only as young as you feel!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The rest of the class follows as above. Now we can pass in the &lt;code&gt;options&lt;/code&gt; commander already found, and inquirer will skip over asking for them again, allowing for the a great UX by not having to duplicate their information (now if only resume services were so nice). Now in &lt;code&gt;SayHelloModule&lt;/code&gt; we add in the &lt;code&gt;PersonInfoQuestions&lt;/code&gt; to the &lt;code&gt;providers&lt;/code&gt; and everything else just works ‚Ñ¢Ô∏è&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;SayHelloCommand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;PersonInfoQuestions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SayHelloModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And just like that, we've now created a command line application using &lt;code&gt;nest-commander&lt;/code&gt;, allowing for users to pass the info in via flags or using prompts and asking for it at runtime. &lt;/p&gt;

&lt;p&gt;For more information on the project &lt;a href="https://github.com/jmcdo29/nestjs-commander"&gt;you can check the repo here&lt;/a&gt;. There's also a testing package to help with testing both the commander input and the inquirer input. Feel free to raise any issues or use the #nest-commander channel on the &lt;a href="https://discord.gg/nestjs"&gt;official NestJS Discord&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cli</category>
      <category>typescript</category>
      <category>nestjs</category>
    </item>
    <item>
      <title>Arch Linux (April 2021) - A NEW guided installer is included</title>
      <author>Michael Crump</author>
      <pubDate>Thu, 08 Apr 2021 20:17:21 +0000</pubDate>
      <link>https://dev.to/mbcrump/arch-linux-april-2021-a-new-guided-installer-is-included-3h1a</link>
      <guid>https://dev.to/mbcrump/arch-linux-april-2021-a-new-guided-installer-is-included-3h1a</guid>
      <description>&lt;p&gt;Hello everyone, &lt;/p&gt;

&lt;p&gt;I wanted to share a new video that I recently created geared towards beginners that are looking to learn how to install Arch Linux from scratch without all the messy configuration in previous builds though a guide installer (which now ships with the April 2021 release). &lt;/p&gt;

&lt;p&gt;What is Arch Linux?&lt;/p&gt;

&lt;p&gt;Arch Linux is a Linux distribution for computers with x86-64 processors. Arch Linux is focused on simplicity, modernity, pragmatism, user centrality, and versatility. In practice, this means the project attempts to have minimal distribution-specific changes, and therefore minimal breakage with updates, and be pragmatic over ideological design choices and focus on customizability rather than user-friendliness.&lt;/p&gt;

&lt;p&gt;With the April 2021 release, the new installer streamlines some of the most common aspects associated with the installation of a new operating system, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selecting a disk to install to, optionally adding encryption&lt;/li&gt;
&lt;li&gt;Format disk and mount it for you&lt;/li&gt;
&lt;li&gt;Installs some standard packages, but gives you the ability to add more&lt;/li&gt;
&lt;li&gt;Includes the option to install several different windows managers such as (awesome window manager, GNOME, XFCE, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since this is such a big release, I have created a video to show you how to install it step-by-step by using the new guided installer. &lt;/p&gt;

&lt;p&gt;Video (14 mins)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3ks2hwE7k14"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Conclusion&lt;/p&gt;

&lt;p&gt;Stay tuned for &lt;a href="https://twitch.tv/mbcrump"&gt;future Twitch streams&lt;/a&gt; as we learn about security and app development or you can watch the condensed version of all of my streams by subscribing to my &lt;a href="https://youtube.com/mbcrump"&gt;YouTube&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Stay connected with me on social platforms for daily software development news.&lt;/p&gt;

&lt;p&gt;-&lt;a href="https://twitter.com/intent/follow?screen_name=mbcrump"&gt;Twitter&lt;/a&gt; | &lt;a href="https://twitch.tv/mbcrump"&gt;Twitch&lt;/a&gt; | &lt;a href="https://instagram.com/mbcrump"&gt;Instagram&lt;/a&gt; | &lt;a href="https://youtube.com/mbcrump"&gt;YouTube&lt;/a&gt; | &lt;a href="https://github.com/mbcrump"&gt;GitHub&lt;/a&gt; | &lt;a href="https://www.michaelcrump.net"&gt;Website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>productivity</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
    <item>
      <title>O que preciso saber  para aprender React?</title>
      <author>Matheus dos Reis de Jesus</author>
      <pubDate>Thu, 08 Apr 2021 20:13:06 +0000</pubDate>
      <link>https://dev.to/reisdev/o-que-preciso-saber-para-aprender-react-1cag</link>
      <guid>https://dev.to/reisdev/o-que-preciso-saber-para-aprender-react-1cag</guid>
      <description>&lt;p&gt;Capa por &lt;a href="https://unsplash.com/@casparrubin?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Caspar Camille Rubin&lt;/a&gt; no &lt;a href="https://unsplash.com/s/photos/react.js?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meu primeiro contato com React, na Semana de Inform√°tica da UFV, foi uma experi√™ncia traum√°tica. Eu n√£o entendia nada, mesmo sabendo programar. As linhas de c√≥digo n√£o faziam sentido. Era Redux, React Router, Classes, ComponentDidIsso, ComponentDidAquilo. Levei mais de 1 ano pra ter coragem de tentar aprender novamente.&lt;/p&gt;

&lt;p&gt;Pelo que tenho visto no Twitter e em v√°rias comunidades, as dificuldades de outras pessoas s√£o as mesmas que eu tive. Ent√£o, para evitar que enfrentem a mesma dificuldade que eu, vamos ao que interessa.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#html-e-css"&gt;
  &lt;/a&gt;
  HTML e CSS
&lt;/h1&gt;

&lt;p&gt;Parece simples, n√©? Mas saber HTML e CSS faz muita diferen√ßa. Conhecer qual o prop√≥sito de cada elemento que pode ser usado num c√≥digo HTML impacta diretamente na qualidade da sua aplica√ß√£o. Um HTML e CSS bem constru√≠do impactam diretamente na Acessibilidade, SEO, legibilidade e experi√™ncia do usu√°rio. Usar divs(ou tables üò¨) est√° longe das melhores pr√°ticas.&lt;/p&gt;

&lt;p&gt;Onde encontro conte√∫do?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/html"&gt;W3Schools - HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/css"&gt;W3Schools - CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://html.com"&gt;HTML.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learnlayout.com"&gt;LearnLayout - CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h1&gt;

&lt;p&gt;Esse aqui √© indispens√°vel. Quando comecei a aprender React, eu n√£o sabia Javascript, ent√£o tive muita dificuldade em entender a sintaxe, fun√ß√µes an√¥nimas, os problemas com tipos e alguns operadores. Se eu soubesse JS antes de tentar aprender React, esse processo certamente teria sido bem mais simples e menos traum√°tico.&lt;/p&gt;

&lt;p&gt;Do meu ponto de vista, os principais pontos da linguagem s√£o:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AJAX (Fetch, async/await e Promises)&lt;/li&gt;
&lt;li&gt;Spread Operator&lt;/li&gt;
&lt;li&gt;Strict equality vs Loose equality&lt;/li&gt;
&lt;li&gt;Entender como "undefined" funciona&lt;/li&gt;
&lt;li&gt;Object e Array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se tiver conhecimentos s√≥lidos sobre o que citei, provavelmente voc√™ n√£o ter√° grandes dificuldades no seu aprendizado.&lt;/p&gt;

&lt;p&gt;Onde encontro conte√∫do?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;FreeCodeCamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codecademy.com/learn/introduction-to-javascript"&gt;CodeAcademy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.learn-js.org"&gt;Learn JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#programa%C3%A7%C3%A3o-funcional"&gt;
  &lt;/a&gt;
  Programa√ß√£o Funcional
&lt;/h1&gt;

&lt;p&gt;A partir da vers√£o 16.8 o React migrou a cria√ß√£o de componentes para fun√ß√µes, dando o suporte ao controle de estados e todo o ciclo de vida do componente usando fun√ß√µes.&lt;/p&gt;

&lt;p&gt;Nas vers√µes anteriores, os componentes eram declarados como classe, o ciclo de vida era gerenciado atrav√©s de m√©todos embutidos(componentDidMount,componentDidUpdate, etc) e os estados eram controlados atrav√©s de atributos e m√©todos.&lt;/p&gt;

&lt;p&gt;Com a nova vers√£o, √© poss√≠vel controlar todo o componente usando apenas fun√ß√µes. Al√©m disso, foi criada tamb√©m a "Context API", que veio para suprir a necessidade de uso do &lt;i&gt;Redux&lt;/i&gt; para controlar estados "globais" em uma aplica√ß√£o.&lt;/p&gt;

&lt;p&gt;Onde encontro conte√∫do?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/trainingcenter/programa%C3%A7%C3%A3o-funcional-para-iniciantes-9e2beddb5b43"&gt;Programa√ß√£o Funcional para Iniciantes - Training Center&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/fellipecouto/programao-funcional-o-que--e-qual-a-importncia-2nia"&gt;O que √© programa√ß√£o funciona e qual a sua import√¢ncia - Fellipe Couto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@paula_vaz/fundamentos-de-programa%C3%A7%C3%A3o-funcional-4b483aeeda9d"&gt;Fundamentos da programa√ß√£o funcional - Paula Vaz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclus√£o
&lt;/h1&gt;

&lt;p&gt;Os 3 t√≥picos acima n√£o necessariamente cobrem tudo o que voc√™ precisa saber para entender como o React funciona, mas eles podem te dar um bom direcionamento para aprender a usar essa biblioteca que revolucionou o desenvolvimento front-end. Boa sorte nos seus estudos!&lt;/p&gt;

&lt;p&gt;Gostou deste artigo? Deixe suas rea√ß√µes e me siga em outras redes: &lt;a href="https://twitter.com/reisdev"&gt;Twitter&lt;/a&gt; | &lt;a href="https://instagram.com/reisdev"&gt;Instagram&lt;/a&gt; | &lt;a href="https://youtube.com/reisdev"&gt;Youtube&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;At√© o pr√≥ximo artigo!üëãüèΩ&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>How I Added Themes to My Website Using Tailwind</title>
      <author>Austin Crim</author>
      <pubDate>Thu, 08 Apr 2021 19:17:27 +0000</pubDate>
      <link>https://dev.to/austincrim/how-i-added-themes-to-my-website-using-tailwind-3ig3</link>
      <guid>https://dev.to/austincrim/how-i-added-themes-to-my-website-using-tailwind-3ig3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;I recently added theming to my &lt;a href="https://austincrim.com"&gt;website&lt;/a&gt; and I wanted to quickly jot down my implementation. I ran into a little friction along the way, but I am really happy with how the result looks and feels. I'm excited about adding even more themes!&lt;br&gt;&lt;br&gt;
A lot of this is based on Tailwind Labs' own &lt;a href="https://www.youtube.com/watch?v=MAtaT8BZEAo"&gt;theming video&lt;/a&gt; and I highly encourage you to start there if you are interested in adding themes with Tailwind. All code examples will assume that your project is already integrated with TailwindCSS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note ‚ö†Ô∏è: Most of this article applies to any site, regardless if you use TailwindCSS. If you're not using Tailwind, feel free to read on, you might learn something!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;The modern mechanism for theming on the web today is through CSS Custom Properties (aka CSS Variables). They are incredibly flexible and make theming much simpler than it used to be. A basic workflow for adding theme support to a website looks something like this:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;define color palettes in CSS variables&lt;/li&gt;
&lt;li&gt;use CSS variables wherever a theme-specific value is needed&lt;/li&gt;
&lt;li&gt;add/remove theme class names in the DOM based on some action (button click, dropdown select, etc.)&lt;/li&gt;
&lt;li&gt;optionally persist a user's preference&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In Tailwind, an extra step is required somewhere in that list: &lt;strong&gt;generating new class names with your &lt;code&gt;tailwind.config.js&lt;/code&gt;&lt;/strong&gt;. Therein lies the rub that makes theming with Tailwind different. I found this process to offer some friction, but being a major TW lover, I persevered in the name of not writing custom CSS classes by hand.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#defining-your-palette-in-css-variables"&gt;
  &lt;/a&gt;
  Defining Your Palette in CSS Variables
&lt;/h2&gt;

&lt;p&gt;This step honestly contained the bulk of the time spent in my case. I was trying to craft each theme from scratch, so coming up with all of the color values took a decent amount of trial and error.   &lt;/p&gt;

&lt;p&gt;Using the &lt;a href="https://tailwindcss.com/docs/customizing-colors#color-palette-reference"&gt;full TailwindCSS color palette&lt;/a&gt; as a reference, I copied and pasted RGB values into my CSS variables to preview them on my site. Not the best workflow, but I stuck with it and got a good result. I wanted to stay within Tailwind colors, but unfortunately, I don't know of a way to reference Tailwind colors in a plain CSS file. This resulted in my copy/paste workflow which, in my opinion, was the most painful part of the whole theming process.  &lt;/p&gt;

&lt;p&gt;After finishing a theme, my CSS would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.theme-dark&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--color-base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;39&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="c"&gt;/* gray-900 */&lt;/span&gt;
    &lt;span class="py"&gt;--color-text-base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;243&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;244&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;246&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c"&gt;/* gray-100 */&lt;/span&gt;
    &lt;span class="py"&gt;--color-off-base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;55&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;            &lt;span class="c"&gt;/* gray-800 */&lt;/span&gt;
    &lt;span class="py"&gt;--color-text-muted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;229&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;231&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;235&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="c"&gt;/* gray-200 */&lt;/span&gt;
    &lt;span class="py"&gt;--color-muted-offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;209&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;213&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;219&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c"&gt;/* gray-300 */&lt;/span&gt;
    &lt;span class="py"&gt;--color-primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;147&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;197&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;253&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="c"&gt;/* blue-300 */&lt;/span&gt;
    &lt;span class="py"&gt;--color-secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;165&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;250&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="c"&gt;/* blue-400 */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, I attempted to name my variables generically enough to be reusable while maintaining clarity. I have a few base colors for backgrounds and text, as well as offsets, a primary, and a secondary. You can include as many different variables as your theme requires, but I tried to keep it reasonably simple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generating-and-using-new-theme-classes"&gt;
  &lt;/a&gt;
  Generating and Using New Theme Classes
&lt;/h2&gt;

&lt;p&gt;Once you have your themes outlined in CSS variables, you've done the hard bit. Now we are almost to the fun part! To use these dynamic theme colors in Tailwind, you have to generate utility classes using the config file. If you have never tweaked a &lt;code&gt;tailwind.config.js&lt;/code&gt; file, this step might take some getting used to, but it is fairly straightforward once you have had some practice.  &lt;/p&gt;

&lt;p&gt;Here's a snippet from my config file:&lt;br&gt;&lt;br&gt;
(For an explanation on the &lt;code&gt;withOpacity&lt;/code&gt; function, please refer to the Tailwind Labs video linked above.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;withOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variableName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;opacityValue&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;opacityValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`rgba(var(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;variableName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;), &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;opacityValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`rgb(var(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;variableName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;))`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="p"&gt;...,&lt;/span&gt; 

   &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// we want to extend the current colors instead of replacing them&lt;/span&gt;
        &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// this will generate utilities like `bg-base` and `bg-primary`&lt;/span&gt;
            &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;withOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--color-base&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;off-base&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;withOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--color-off-base&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;withOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--color-primary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="na"&gt;secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;withOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--color-secondary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="na"&gt;muted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;withOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--color-text-muted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="c1"&gt;// these classes end up like `text-base` and `text-primary`&lt;/span&gt;
            &lt;span class="na"&gt;textColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;withOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--color-text-base&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="na"&gt;muted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;withOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--color-text-muted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;muted-offset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;withOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--color-muted-offset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;withOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--color-primary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="na"&gt;secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;withOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--color-secondary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since our utility classes reference CSS variables, their values will respond when we toggle our theme classes. In my example, I only generated utilities for &lt;code&gt;backgroundColor&lt;/code&gt; and &lt;code&gt;textColor&lt;/code&gt; specifically. You can generate classes for any applicable properties or generate classes for all color properties using the &lt;code&gt;theme.extend.colors&lt;/code&gt; key in the config.&lt;br&gt;&lt;br&gt;
Now using these classes is as simple as this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;'theme-dark bg-base text-primary'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Hello Tailwind Themes!
&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's also important to apply a theme class by default to ensure correct styling on the initial page load. You can also define your base theme on the CSS &lt;code&gt;:root&lt;/code&gt; selector and those values will take effect by default, without adding any extra classes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#switching-themes-on-the-fly"&gt;
  &lt;/a&gt;
  Switching Themes on the Fly
&lt;/h2&gt;

&lt;p&gt;Now that we have our classes generated and applied, we can start switching themes! This process just consists of toggling different class names on the document. On my website, I show a list of the different available themes and, when one is clicked, I run something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newTheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, I am replacing the current theme class with whatever the user has selected. I'm doing it on the &lt;code&gt;documentElement&lt;/code&gt; but you can apply this to wherever you want your top-level theme class to live.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note ‚ö†Ô∏è: My website uses React, so I track the &lt;code&gt;currentTheme&lt;/code&gt; in a piece of state. However, this can be done in several ways in vanilla JavaScript, like a global variable or a &lt;code&gt;data-theme&lt;/code&gt; attribute. The important part is that you swap out the current theme for the user's selection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#hanging-on-to-a-users-choice"&gt;
  &lt;/a&gt;
  Hanging on to a User's Choice
&lt;/h2&gt;

&lt;p&gt;If you've made it this far, congrats! You now have fully functioning themes on your site. But you might notice if you select a theme and refresh the page, you've lost your choice! This is where data persistence comes into play. Don't worry, it can be really simple! Here's a look at how my site does it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;pickTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newTheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newTheme&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newTheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;crimTheme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newTheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setCurrent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newTheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;pickTheme&lt;/code&gt; function is called when a theme choice is selected.&lt;br&gt;&lt;br&gt;
Let's break it down:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;return early if they selected the theme that's currently applied to prevent unnecessary work&lt;/li&gt;
&lt;li&gt;replace the current theme class with the new one&lt;/li&gt;
&lt;li&gt;save the user's choice in browser local storage&lt;/li&gt;
&lt;li&gt;update my current theme state (React style)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a great start! Now when a user selects a new theme, we get it applied to the DOM and then save it to the browser's local storage.&lt;br&gt;&lt;br&gt;
There is one more step we have to do before the whole experience works smoothly. Currently, even though our theme choice is in local storage, if we refresh the page we don't see any difference. On page load, we need to check local storage and get the theme applied right away, before the user sees the default theme. Here's what I did:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// theme.js&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;crimTheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;crimTheme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme-light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;crimTheme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme-light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not too bad! We first check local storage for our theme and apply it if it exists. If not, we set them up with the default theme. I load this &lt;code&gt;theme.js&lt;/code&gt; file directly in my &lt;code&gt;index.html&lt;/code&gt; to ensure it runs early enough to prevent flashes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion üéâ
&lt;/h2&gt;

&lt;p&gt;Big kudos to you if you made it this far. We have accomplished a lot!&lt;br&gt;&lt;br&gt;
Let's review:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We set up our themes with CSS variables&lt;/li&gt;
&lt;li&gt;We generated custom Tailwind classes to apply our CSS variable values&lt;/li&gt;
&lt;li&gt;We allowed users to swap themes by updating our theme class in the DOM&lt;/li&gt;
&lt;li&gt;Finally, we boosted the user experience by saving and retrieving a user's theme preference in local storage&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Theming adds a lot of personality to sites and I hope to see more of it in the future. Reach out and show me your themed sites!&lt;/p&gt;

</description>
      <category>css</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Episode 3: To Boldly Debug</title>
      <author>Jason C. McDonald</author>
      <pubDate>Thu, 08 Apr 2021 19:15:35 +0000</pubDate>
      <link>https://dev.to/bughunterscafe/episode-3-to-boldly-debug-1pel</link>
      <guid>https://dev.to/bughunterscafe/episode-3-to-boldly-debug-1pel</guid>
      <description>&lt;p&gt;What is DevOps anyway? How about SRE? What's so awesome about Jupyter Notebook? And what do you do when that rogue process is more of a Nazgul than a zombie?&lt;/p&gt;

&lt;p&gt;Moshe Zadka joins hosts Bojan Miletic and Jason C. McDonald on this episode of The Bug Hunters Caf√© to answer those questions and more.&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/bughunters/episode-3-to-boldly-debug"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;Episode 3: To Boldly Debug&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/bughunters"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        The Bug Hunters Caf√© ¬†

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-episode-3-to-boldly-debug" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-episode-3-to-boldly-debug" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-episode-3-to-boldly-debug" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-episode-3-to-boldly-debug" alt="The Bug Hunters Caf√©" src="https://res.cloudinary.com/practicaldev/image/fetch/s--HcQK0LIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--i_HToh91--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/515/8f7faf4d-72cf-4a14-b946-d9b98b78df49.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-episode-3-to-boldly-debug"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/bughunters/episode-3-to-boldly-debug"&gt;
      &lt;img id="episode-profile-image" alt="Episode 3: To Boldly Debug" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--FSVsSzry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9lT7-EEd--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/515/8f7faf4d-72cf-4a14-b946-d9b98b78df49.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;√ó&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;





&lt;p&gt;Moshe Zadka (Website): &lt;a href="https://cobordism.com/"&gt;https://cobordism.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Moshe Zadka, Glyph Creating And Consuming Modern Web Services with Twisted PyCon 2017: &lt;a href="https://www.youtube.com/watch?v=ztkBG4qLR_4"&gt;https://www.youtube.com/watch?v=ztkBG4qLR_4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Music by: &lt;a href="https://audionautix.com"&gt;https://audionautix.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sponsored by Softerrific: &lt;a href="https://www.softerrific.com/"&gt;https://www.softerrific.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>debugging</category>
      <category>python</category>
      <category>devops</category>
      <category>sre</category>
    </item>
    <item>
      <title>AzureFunBytes Episode 38 - Azure Static Web Apps with @nthonyChu!</title>
      <author>Jay Gordon</author>
      <pubDate>Thu, 08 Apr 2021 19:08:18 +0000</pubDate>
      <link>https://dev.to/azure/azurefunbytes-episode-38-azure-static-web-apps-with-nthonychu-4o3p</link>
      <guid>https://dev.to/azure/azurefunbytes-episode-38-azure-static-web-apps-with-nthonychu-4o3p</guid>
      <description>&lt;p&gt;AzureFunBytes is a weekly opportunity to learn more about the fundamentals and foundations that make up Azure. It's a chance for me to understand more about what people across the Azure organization do and how they do it. Every week we get together at 11 AM Pacific on &lt;a href="https://cda.ms/226"&gt;Microsoft LearnTV&lt;/a&gt; and learn more about Azure.&lt;/p&gt;

&lt;p&gt;This week I welcomed &lt;a href="https://twitter.com/nthonychu"&gt;Anthony Chu&lt;/a&gt;, Program Manager at Microsoft, to discuss &lt;a href="https://cda.ms/23H"&gt;Azure Static Web Apps&lt;/a&gt; and &lt;a href="https://cda.ms/23J"&gt;Azure Functions&lt;/a&gt;.  Anthony and I have a conversation on why this service makes sense for your web apps.  We discussed how the Azure Static Web App Service enables collaboration with your development team by utilizing triggered CI/CD runs from &lt;a href="https://cda.ms/23K"&gt;GitHub Actions&lt;/a&gt; or &lt;a href="https://cda.ms/23L"&gt;Azure DevOps Pipelines&lt;/a&gt;.  There's support right out of the box for static site generators like &lt;a href="https://cda.ms/23V"&gt;Gatsby&lt;/a&gt;, &lt;a href="https://cda.ms/23W"&gt;Hugo&lt;/a&gt;, &lt;a href="https://cda.ms/23X"&gt;VuePress&lt;/a&gt;, and more.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zyszzWPnzog"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We cover: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Jamstack?&lt;/li&gt;
&lt;li&gt;What is Azure Static Web Apps? (Can probably just talk to the product overview page)&lt;/li&gt;
&lt;li&gt;Demos + chatting + questions&lt;/li&gt;
&lt;li&gt;Take a single page app and deploy it to Static Web Apps&lt;/li&gt;
&lt;li&gt;Add an API&lt;/li&gt;
&lt;li&gt;Add authentication&lt;/li&gt;
&lt;li&gt;Add custom domain&lt;/li&gt;
&lt;li&gt;Look at an app that uses other Azure services (&lt;a href="https://cda.ms/24p"&gt;SignalR&lt;/a&gt;, &lt;a href="https://cda.ms/24q"&gt;Cosmos DB&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Learn about Azure fundamentals with me!&lt;/p&gt;

&lt;p&gt;Live stream is available on Twitch, YouTube, and LearnTV at 2 pm EST Thursday. You can also find the recordings here as well:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitch.tv/azurefunbytes"&gt;AzureFunBytes on Twitch&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aka.ms/jaygordononyoutube"&gt;AzureFunBytes on YouTube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UC-ikyViYMM69joIAv7dlMsA"&gt;Azure DevOps YouTube Channel&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/azurefunbytes"&gt;Follow AzureFunBytes on Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Useful Docs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cda.ms/219"&gt;Get $200 in free Azure Credit&lt;/a&gt; &lt;br&gt;
&lt;a href="https://cda.ms/23Y"&gt;Azure Static Web Apps documentation&lt;/a&gt; &lt;br&gt;
&lt;a href="https://cda.ms/23Z"&gt;What is Azure Static Web Apps Preview?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/240"&gt;Set up local development for Azure Static Web Apps Preview&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/241"&gt;Add an API to Azure Static Web Apps Preview with Azure Functions&lt;/a&gt; &lt;br&gt;
&lt;a href="https://cda.ms/242"&gt;Microsoft Learn: Azure Static Web Apps&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/243"&gt;Microsoft Learn: Introduction to Azure fundamentals&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>5 Best Resources To Learn JavaScript For Free</title>
      <author>The Code Lounge</author>
      <pubDate>Thu, 08 Apr 2021 18:45:44 +0000</pubDate>
      <link>https://dev.to/codeloungedev/5-best-resources-to-learn-javascript-for-free-n53</link>
      <guid>https://dev.to/codeloungedev/5-best-resources-to-learn-javascript-for-free-n53</guid>
      <description>&lt;p&gt;&lt;a href="https://codelounge.dev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oZGLRauQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617198357271/uoNdlXnwM.png" alt="cover (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Originally posted on the codelounge.dev blog =&amp;gt; &lt;a href="https://codelounge.dev/5-best-resources-to-learn-javascript-for-free"&gt;5 Best Resources To Learn JavaScript For Free&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;There are countless resources to learn JavaScript, and that is both a bad and a good thing. The good thing is that we have many options to choose from. However, the bad thing is that we do not know which resource is the best.&lt;/p&gt;

&lt;p&gt;Thus, the purpose of this article is to shine some light, and guide you towards the best resources to learn JavaScript. Especially as a beginner. Therefore, let us see the best resources.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#freecodecamp"&gt;
  &lt;/a&gt;
  FreeCodeCamp
&lt;/h1&gt;

&lt;p&gt;The first resource on the list is FreeCodeCamp. FreeCodeCamp provides an excellent introduction to JavaScript. Moreover, it dives into advanced topics as well. It takes you from no knowledge to an intermediate level.&lt;/p&gt;

&lt;p&gt;However, once you dive into the advanced topics, you might have to supplement the learning with additional resources. Or with their YouTube channel. By the way, talking about their YouTube channel, it is another excellent resource. They have many JavaScript tutorials created by professional developers.&lt;/p&gt;

&lt;p&gt;Thus, you can get to an advanced level just by using the FreeCodeCamp platform and their YouTube channel.&lt;/p&gt;

&lt;p&gt;Check:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/learn/"&gt;FreeCodeCamp curriculum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ"&gt;FreeCodeCamp YouTube channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#you-dont-know-javascript"&gt;
  &lt;/a&gt;
  You Don‚Äôt Know JavaScript
&lt;/h1&gt;

&lt;p&gt;The book series ‚ÄúYou Don‚Äôt Know JavaScript‚Äù is one of the best resources to learn JavaScript, if not the best. This series is split into six books, and it takes you from zero knowledge to an advanced level. It teaches you about the scope, closures, ‚Äúthis‚Äù keyword, object prototype, types &amp;amp; grammar, async, performance, and ES6 &amp;amp; beyond.&lt;/p&gt;

&lt;p&gt;The series is written by Kyle Simpson, who is a very knowledgeable person, and an active JavaScript developer. The good thing is that, like FreeCodeCamp, YDKJS series is free. Of course, you can, and you should buy them to support the author if you can afford it.&lt;/p&gt;

&lt;p&gt;The ‚ÄúYou Don‚Äôt Know JavaScript‚Äù series is my go-to manual. Whenever I want to refresh concepts or learn new ones, I use this resource first. It is well-written, detailed, to the point, and always following the ECMAScript specification.&lt;/p&gt;

&lt;p&gt;Check:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/getify/You-Dont-Know-JS"&gt;You Don‚Äôt Know JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#javascript30"&gt;
  &lt;/a&gt;
  JavaScript30
&lt;/h1&gt;

&lt;p&gt;Practising by building application yourself is critical in programming. As a result, I want to recommend you JavaScript30, which focuses exclusively on building JavaScript applications. It does not use any frameworks, compilers, boilerplates, and so on. It is purely vanilla JavaScript.&lt;/p&gt;

&lt;p&gt;The JavaScript30 course is for beginners and intermediate. It is going to teach you the JavaScript fundamentals and how to work with the Document Object Model (DOM). Bear in mind; you should already have basic JavaScript knowledge before starting the course. The purpose of the course is to make you apply that knowledge.&lt;/p&gt;

&lt;p&gt;JavaScript30 is entirely free, as well. Until this point, you have three excellent resources to skyrocket your JavaScript skills for free!&lt;/p&gt;

&lt;p&gt;Check:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://javascript30.com/"&gt;JavaScript30&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#mdn-web-docs-javascript"&gt;
  &lt;/a&gt;
  MDN Web Docs JavaScript
&lt;/h1&gt;

&lt;p&gt;MDN cannot miss from this article, as it is an excellent website. Thus, it is no surprise that their JavaScript tutorial is fantastic. &lt;/p&gt;

&lt;p&gt;The online tutorial is split into four parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Complete beginners&lt;/li&gt;
&lt;li&gt;JavaScript Guide&lt;/li&gt;
&lt;li&gt;Intermediate&lt;/li&gt;
&lt;li&gt;Advanced&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As with the other resource listed in the article, you can go from a basic level to an advanced level. Besides that, the course is written and maintained by professional developers. &lt;/p&gt;

&lt;p&gt;Therefore, you can bet on the tutorial provided by MDN. It is of the highest quality.&lt;/p&gt;

&lt;p&gt;Check:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"&gt;MDN JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#javascriptinfo"&gt;
  &lt;/a&gt;
  JavaScript.info
&lt;/h1&gt;

&lt;p&gt;The last resource I want to mention is JavaScript.info, which is a superb website for reference. It contains information on basic JavaScript, advanced concepts, and Document Object Model. &lt;/p&gt;

&lt;p&gt;The website is split into three parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;The JavaScript Language&lt;/strong&gt; ‚Äì start from scratch and go on to advanced concepts like OOP. The focus is on the language itself here.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Browser: Document, Events, Interfaces&lt;/strong&gt; ‚Äì learn how to manage the browser page: add elements, manipulate their size and position, dynamically create interfaces and interact with the visitor.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Additional Articles&lt;/strong&gt; ‚Äì a list of extra topics that assume you‚Äôve covered the first two parts of the tutorial. There is no clear hierarchy here; you can read articles in the order you want.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The information is dense, and to the point. You can use the website as your primary study guide, or you can use it in conjuncture with the other resources. &lt;/p&gt;

&lt;p&gt;Check:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://javascript.info/"&gt;JavaScript.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;The list in this article is not exhaustive, but it covers some of the best resources to learn JavaScript. By using these resources, you can get to a pretty advanced level, and even get a job offer. For the best results, try to mix them because you can learn something from all of them.&lt;/p&gt;

&lt;p&gt;And the best thing: they are entirely free (except for printed copies of YDKJS, which you can buy if you want to support the author).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you enjoyed the article, consider sharing it so more people can benefit from it!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
