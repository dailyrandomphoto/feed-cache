<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Tip: use the WordPress code editor to pass attributes to your Gutenberg block variations</title>
      <author>Ashley Kolodziej</author>
      <pubDate>Sun, 11 Apr 2021 02:00:02 +0000</pubDate>
      <link>https://dev.to/ashleykolodziej/tip-use-the-wordpress-code-editor-to-pass-attributes-to-your-gutenberg-block-variations-4jcb</link>
      <guid>https://dev.to/ashleykolodziej/tip-use-the-wordpress-code-editor-to-pass-attributes-to-your-gutenberg-block-variations-4jcb</guid>
      <description>&lt;p&gt;I’ve been learning Gutenberg block development lately, and one of the things I was struggling with was trying to figure out what parameters I could pass on to blocks defined in block variations. I was looking all over the place for documentation on the parameters each block takes, such as font size and color. Little did I know I had all the documentation I needed right in front of me, in the form of the WordPress code editor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-whats-a-variation"&gt;
  &lt;/a&gt;
  Wait, what’s a variation?
&lt;/h2&gt;

&lt;p&gt;A block variation is an easy way of leveraging WordPress core blocks (and even custom blocks you build) to create your own sets of blocks without writing any React code. You’ll need to write a bit of JavaScript, but it’s a lot like writing an array or object. If you can do that, you can write a block variation.&lt;/p&gt;

&lt;p&gt;I like using block variations to create recommended sets of content and help guide my users in content entry. You can nest blocks in block variations, and do things like pre-set the background or font size on them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-the-editor-to-speed-up-block-variation-development"&gt;
  &lt;/a&gt;
  Use the editor to speed up block variation development
&lt;/h2&gt;

&lt;p&gt;My new workflow with block variations is to build the variation just the way I like it in the visual editor, and then switch over to the code editor to grab the attributes I need from there. This lets me set hard-to-remember parameters the right way, like gradients, without having to guess and check, like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6_szirpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8hg7bjq1pk76zj8q5ae.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6_szirpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8hg7bjq1pk76zj8q5ae.jpeg" alt="The attributes in the code editor are between curly braces, and can be used in block variations."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you identify the block you want to model your variation off of in the code editor, just grab those attributes and bring them back into your block variations code. &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations/blob/solution-code/src/variations/index.js#L61"&gt;Here’s what that looks like in my final code.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXg78IZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6s03fvk2bs6j9ma3hzt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXg78IZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6s03fvk2bs6j9ma3hzt.jpeg" alt="Code example demonstrating attributes being passed to a block variation using the attributes parameter."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This works for both your variations and your &lt;code&gt;innerBlocks&lt;/code&gt;. &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations/blob/solution-code/src/variations/index.js#L28"&gt;Here’s an example in my final code of how I used this in a nested block.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7nX8CpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5pl3yxmaj8qh82eopv9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7nX8CpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5pl3yxmaj8qh82eopv9.jpeg" alt="Code example demonstrating attributes being passed to inner blocks in a block variation."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Block variations are a low key way to get into Gutenberg block development and get familiar with the ecosystem without getting into React or the more complicated bits. Check it out if you’re new to Gutenberg and looking for a place to start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-tutorial"&gt;
  &lt;/a&gt;
  Full tutorial
&lt;/h2&gt;

&lt;p&gt;If you’re new to JavaScript or Gutenberg, I recorded my full process of building block variations using this method in a beginner-friendly way here.  I also put together sample code below in Github you can use to get started with a new block variation.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/m6IH-G286DU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ashleykolodziej"&gt;
        ashleykolodziej
      &lt;/a&gt; / &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations"&gt;
        professorkexplains-block-variations
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Block Variations tutorial&lt;/h1&gt;
&lt;p&gt;These are companion files to my &lt;a href="https://youtu.be/m6IH-G286DU" rel="nofollow"&gt;Build Your First Block Variation tutorial on YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use these files, download them, and then unzip them to the directory of your choice. In my tutorial, this directory is called &lt;code&gt;variations-example&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can view the final code from the tutorial on the &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations/tree/solution-code"&gt;solution-code branch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also see exactly what changed codewise from the beginning of the tutorial to the end of the tutorial by &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations/pull/1"&gt;taking a look at this pull request&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ashleykolodziej/professorkexplains-block-variations"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>wordpress</category>
      <category>javascript</category>
      <category>gutenberg</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Are Default Params in JavaScript bad? (Snack pack #4)</title>
      <author>Blake Campbell</author>
      <pubDate>Sun, 11 Apr 2021 01:52:58 +0000</pubDate>
      <link>https://dev.to/blaketweeted/are-default-params-in-javascript-bad-snack-pack-4-g9</link>
      <guid>https://dev.to/blaketweeted/are-default-params-in-javascript-bad-snack-pack-4-g9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#not-if-its-still-passed"&gt;
  &lt;/a&gt;
  Not if it's still passed
&lt;/h1&gt;

&lt;p&gt;Take this example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NjeZ1Rp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljcsshc6kr9q2fy1164o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjeZ1Rp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljcsshc6kr9q2fy1164o.png" alt="carbon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wrote this function well over two years ago. It just pops up a notification if the user makes a CRUD call. (Create, Read, Update Delete). The function only takes two defined parameters a message and a notification. &lt;/p&gt;

&lt;p&gt;The notification parameter is a boolean.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;notification = true // notify user by a pop-up
notification = false // inline-notification by form button, or in a defined space
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Looking back at this function, it could be much better. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instead of a notification boolean, it can be notification style as a string. &lt;/li&gt;
&lt;li&gt;Call with the second parameter everywhere&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#back-to-the-question-default-params-in-js-bad"&gt;
  &lt;/a&gt;
  Back to the question: &lt;strong&gt;Default Params in JS bad?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I think so if I'm not explicitly calling with all the params of a function. &lt;strong&gt;It's okay to have a fallback, but don't depend on it!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It's leaves technical debt. &lt;/li&gt;
&lt;li&gt;How is another developer supposed to know what parameters are passed if they only see a partial picture? &lt;/li&gt;
&lt;li&gt;My boolean parameter is bad in this case.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#how-i-refactored-this-function"&gt;
  &lt;/a&gt;
  How I refactored this function:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SZYSqqnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhir0fjvc94eo9na9av9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SZYSqqnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhir0fjvc94eo9na9av9.png" alt="carbon (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My snack pack reads are intended for a quick read without any fluff or BS.&lt;/p&gt;

&lt;p&gt;Feedback is always welcome.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codequality</category>
      <category>refactorit</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How I set up my Mac</title>
      <author>Alessandro</author>
      <pubDate>Sat, 10 Apr 2021 23:56:14 +0000</pubDate>
      <link>https://dev.to/dieman/how-i-set-up-my-mac-9m4</link>
      <guid>https://dev.to/dieman/how-i-set-up-my-mac-9m4</guid>
      <description>&lt;p&gt;&lt;strong&gt;Keep in mind:&lt;/strong&gt; some of these steps will be of course optional, such as the iTerm2 installation and configuration. I personally highly suggest the following everything to improve your productivity! If you are at an advanced level already, you can skip all of this.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mac-shortcuts"&gt;
  &lt;/a&gt;
  Mac Shortcuts
&lt;/h2&gt;

&lt;p&gt;If you are not very experienced with a Macbook, follow this chapter to discover useful tips!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#spotlight-search"&gt;
  &lt;/a&gt;
  Spotlight Search
&lt;/h3&gt;

&lt;p&gt;This will be your best friend. Are you looking for a specific software or folder... or whatever? Press &lt;code&gt;Command-Space&lt;/code&gt; and start writing what you need. You can even use it as a calculator. Try it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#application-switcher"&gt;
  &lt;/a&gt;
  Application Switcher
&lt;/h3&gt;

&lt;p&gt;Press &lt;code&gt;Command-Tab&lt;/code&gt; to open the switcher. If you keep Command key pressed you can use Tab repetitively to navigate through the icons and choose the one you wish to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terminal"&gt;
  &lt;/a&gt;
  Terminal
&lt;/h2&gt;

&lt;p&gt;If you never used Linux or Mac before, you probably need to learn how to use a terminal efficiently. Below a list of the most used commands.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Home Directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd ..&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Move to parent directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd &amp;lt;folder&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Move to the specified folder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pwd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show your current directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display files and subdir in the actual directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ls -la&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Same as before but detailed with hidden files as well&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mkdir &amp;lt;name folder&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Create a new directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rm -R &amp;lt;folder&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Delete folder with its entire content&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rm &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Delete a file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;touch &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Create a file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;chmod -x &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Make a file executable.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;./&amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Run an executable file. Example: &lt;code&gt;./install.sh&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;top&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display info about running processes (similar to Task Manager), you can exit it with CTRL+C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kill &amp;lt;PID&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Kill a process using its PID (using the top command, it will be the first column)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cat &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Output the content of a specified file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nano &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Open and edit a file with the in-built Linux editor&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;These are - in my opinion - the basic that you need to navigate easily through the Terminal. There are many other more commands and flags, and if you need a more detailed list, you can always google it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-install"&gt;
  &lt;/a&gt;
  What to Install
&lt;/h2&gt;

&lt;p&gt;What do you need to install on your new shiny Mac? Below I will cover what I think any Mac should have, and some are real MUST.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#homebrew"&gt;
  &lt;/a&gt;
  Homebrew
&lt;/h3&gt;

&lt;p&gt;Homebrew is a package manager. You can use it to install most of the stuff you need, very fast and from the Terminal.&lt;/p&gt;

&lt;p&gt;Open your Terminal and copy-paste this command to install Homebrew:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/bin/bash &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/Homebrew/install/master/install.sh&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now install new software with the &lt;code&gt;brew install &amp;lt;name&amp;gt;&lt;/code&gt; or &lt;code&gt;brew cask install &amp;lt;name&amp;gt;&lt;/code&gt; if what you want to install is a graphical GUI application such as our next in the list: Visual Studio Code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-studio-code"&gt;
  &lt;/a&gt;
  Visual Studio Code
&lt;/h3&gt;

&lt;p&gt;If you still do not have a favourite code editor, I suggest you give VSCode a try.&lt;/p&gt;

&lt;p&gt;You can install VSCode with Homebrew:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew cask &lt;span class="nb"&gt;install &lt;/span&gt;visual-studio-code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the installation, to be able to use &lt;code&gt;code&lt;/code&gt; command from the terminal, we need to first to install the 'code' command in PATH. How? Open VSCode with Spotlight (&lt;code&gt;Command-Space&lt;/code&gt;) and press F1 (if you have Touch Bar, press fn and it will appear on it) and type &lt;code&gt;path&lt;/code&gt;, select the first sentence and press enter. Now go in the terminal and try to open your current folder with the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;code &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, have fun customising your new code editor!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-better-terminal"&gt;
  &lt;/a&gt;
  A better terminal
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GucBJ6g---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oww14k8k0lmkz320iw5y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GucBJ6g---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oww14k8k0lmkz320iw5y.png" alt="iTerm2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's time to install and customise iTerm2 and finally get rid of the default Terminal. This process will not only make your Terminal look good, but also improve your productivity with syntax highlight, auto-suggestion and tab auto-complete.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#install-iterm2"&gt;
  &lt;/a&gt;
  Install iTerm2
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew cask &lt;span class="nb"&gt;install &lt;/span&gt;iterm2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#install-oh-my-zsh"&gt;
  &lt;/a&gt;
  Install Oh My Zsh
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#install-powerlevel10k"&gt;
  &lt;/a&gt;
  Install Powerlevel10k
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/romkatv/powerlevel10k.git &lt;span class="nv"&gt;$ZSH_CUSTOM&lt;/span&gt;/themes/powerlevel10k
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;code ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visual Studio Code will open then set &lt;code&gt;ZSH_THEME="powerlevel10k/powerlevel10k"&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#install-autosuggestion"&gt;
  &lt;/a&gt;
  Install Auto-Suggestion
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-autosuggestions &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ZSH_CUSTOM&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="p"&gt;~/.oh-my-zsh/custom&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/plugins/zsh-autosuggestions
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;code ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now type the following code &lt;code&gt;plugins=(zsh-autosuggestions)&lt;/code&gt; on a new line.&lt;/p&gt;

&lt;p&gt;Close the terminals (Command-Q) and restart it again (&lt;code&gt;Command-Space iTerm2&lt;/code&gt;) and follow the instructions as per your preference.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#syntax-highlighting"&gt;
  &lt;/a&gt;
  Syntax highlighting
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;zsh-syntax-highlighting
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add &lt;code&gt;source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&lt;/code&gt; at the end of &lt;code&gt;~./zshrc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Restart the terminal to apply the changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;I will write something else in the near future!&lt;/p&gt;

&lt;p&gt;Meanwhile feel free to join us in our &lt;a href="https://discord.gg/ohmyzsh"&gt;ohmyzsh discord&lt;/a&gt; if you need any help!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tips</category>
    </item>
    <item>
      <title>Ruby blocks made easy, part II, curry and procs as arguments</title>
      <author>Leandro Proença</author>
      <pubDate>Sat, 10 Apr 2021 23:21:53 +0000</pubDate>
      <link>https://dev.to/leandronsp/ruby-blocks-made-easy-part-ii-curry-and-procs-as-arguments-3c25</link>
      <guid>https://dev.to/leandronsp/ruby-blocks-made-easy-part-ii-curry-and-procs-as-arguments-3c25</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/leandronsp/ruby-blocks-made-easy-part-i-methods-and-procs-ji2"&gt;In the previous post&lt;/a&gt;, we learned that methods can be transformed into procs to be evaluated &lt;em&gt;later&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;One thing worth to mention is that, the method itself can be used like a proc: every &lt;code&gt;Method&lt;/code&gt; structure has a method called &lt;code&gt;call&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 2021-04-10 17:22:05&lt;/span&gt;

&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:now&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 2021-04-10 17:22:06&lt;/span&gt;
&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:now&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 2021-04-10 17:22:07&lt;/span&gt;

&lt;span class="c1"&gt;# checking the classes&lt;/span&gt;
&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:now&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; Method&lt;/span&gt;
&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:now&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; Proc (lambda)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Given that, the &lt;code&gt;method&lt;/code&gt; structure is good enough to be used in &lt;em&gt;later evaluations&lt;/em&gt;. In theory, it is NOT a Proc. But in practice, it &lt;strong&gt;behaves&lt;/strong&gt; like proc lambdas and &lt;em&gt;will&lt;/em&gt; evaluate the expression later.&lt;/p&gt;

&lt;p&gt;We can also evaluate methods later with arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#proc-with-arguments-curry"&gt;
  &lt;/a&gt;
  Proc with arguments (curry)
&lt;/h3&gt;

&lt;p&gt;Sometimes it's useful to define a proc with some &lt;em&gt;static arguments&lt;/em&gt;, which can be evaluated later along with the dynamic arguments. These arguments can be "curried" to the proc using the method &lt;code&gt;.curry&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# creates a proc with no curried arguments&lt;/span&gt;
&lt;span class="c1"&gt;#   and calls using two dynamic arguments&lt;/span&gt;
&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 8&lt;/span&gt;

&lt;span class="c1"&gt;# creates a proc with the first argument curried&lt;/span&gt;
&lt;span class="c1"&gt;#   and calls using one remaining dynamic argument&lt;/span&gt;
&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 8&lt;/span&gt;
&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 15&lt;/span&gt;

&lt;span class="c1"&gt;# checking the class&lt;/span&gt;
&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; Proc&lt;/span&gt;
&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; It's also a Proc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This feature is powerful because it allows us to write more expressive code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;multiply_by_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;multiply_by_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;multiply_by_2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 8&lt;/span&gt;
&lt;span class="n"&gt;multiply_by_3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#passing-a-lambda-method-as-argument-to-another-method"&gt;
  &lt;/a&gt;
  Passing a lambda method as argument to another method
&lt;/h3&gt;

&lt;p&gt;Lambda methods can be passed as arguments to methods like any other valid expression. &lt;/p&gt;

&lt;p&gt;Let's suppose we want a method which takes a list of numbers and applies some &lt;strong&gt;calculation&lt;/strong&gt; method to each number, returning a new calculated list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calculation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;
    &lt;span class="c1"&gt;# `calculation` is a proc, but we don't care about&lt;/span&gt;
    &lt;span class="c1"&gt;#    its logic: we simply evaluate whatever the&lt;/span&gt;
    &lt;span class="c1"&gt;#    calculation is to the number&lt;/span&gt;
    &lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;calculation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;new_list&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we want to use the method &lt;code&gt;map_numbers&lt;/code&gt; to take a list of numbers and return a new list with &lt;em&gt;each number multiplied by 2&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# declaring the list&lt;/span&gt;
&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# declaring the "calculation" proc, using the "2" curried&lt;/span&gt;
&lt;span class="c1"&gt;#    as we've seen in the previous example&lt;/span&gt;
&lt;span class="n"&gt;multiply_by_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiply_by_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; [2, 4, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can do even better, &lt;em&gt;in a single line&lt;/em&gt;, applying other calculations as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# multiplying by 2&lt;/span&gt;
&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# multiplying by 4&lt;/span&gt;
&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# multiplying by 42&lt;/span&gt;
&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could go beyond, supposing we'd have more calculation methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:sum_by&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:square_of&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We learned that procs can be passed as arguments to another methods and, optionally, can use curried arguments, making our code appear more &lt;em&gt;declarative&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/leandronsp/ruby-blocks-made-easy-part-iii-grand-finale-blocks-and-syntactic-sugar-4d48"&gt;In the next and last post of this series&lt;/a&gt;, we will unblock more fundamentals and introduce &lt;em&gt;blocks&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>programming</category>
      <category>softwaredevelopment</category>
    </item>
    <item>
      <title>Ruby blocks made easy, part I, methods and procs</title>
      <author>Leandro Proença</author>
      <pubDate>Sat, 10 Apr 2021 23:17:45 +0000</pubDate>
      <link>https://dev.to/leandronsp/ruby-blocks-made-easy-part-i-methods-and-procs-ji2</link>
      <guid>https://dev.to/leandronsp/ruby-blocks-made-easy-part-i-methods-and-procs-ji2</guid>
      <description>&lt;p&gt;Blocks in Ruby are powerful structures that are part of our daily basis as Ruby developers. We see them being used across a variety of standard classes as well as in almost every popular gem. &lt;/p&gt;

&lt;p&gt;A few examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# print each number within an array&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# usage in some ActiveRecord models &lt;/span&gt;
&lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:published&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;published: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# usage in Devise configuration&lt;/span&gt;
&lt;span class="no"&gt;Devise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setup&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;# config.encryptor = :sha512&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# usage in Rails views&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sx"&gt;%= form_for @user do |form| %&amp;gt;
  // do something with the `form` object
&amp;lt;% end %&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The examples could go beyond.&lt;/p&gt;

&lt;p&gt;Blocks enable &lt;em&gt;flexibility and extensibility&lt;/em&gt;. It's practically impossible for any Ruby application to exist without blocks. &lt;/p&gt;

&lt;p&gt;There are &lt;a href="https://www.rubyguides.com/2016/02/ruby-procs-and-lambdas/"&gt;lots of blogposts explaining the differences between blocks, procs and lambdas&lt;/a&gt;, but in this guide which is a series of articles, I'll explain the fundamentals and try to present, in baby-steps, some common problems and how Ruby blocks can help to solve them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-ruby-evaluates-expressions"&gt;
  &lt;/a&gt;
  How Ruby evaluates expressions
&lt;/h2&gt;

&lt;p&gt;Everything in Ruby is an expression, so an expression results in a value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ruby evaluates the expression, which results in a value `2`&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# ruby evaluates the expression, which results in a value `2`, and stores the result in the variable `number`&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Same as calling any method in an Object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ruby evaluates the method `.now` in the class `Time`,&lt;/span&gt;
&lt;span class="c1"&gt;#  resulting in a value which is the current time,&lt;/span&gt;
&lt;span class="c1"&gt;#  and stores the result in the variable `current_time` &lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#everything-in-ruby-is-an-object"&gt;
  &lt;/a&gt;
  Everything in Ruby is an object
&lt;/h4&gt;

&lt;p&gt;For those who are already know that &lt;a href="https://dev.to/craigbrad/everything-is-an-object-5184"&gt;everything in Ruby is an object&lt;/a&gt;, the following expression is familiar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;1&lt;/code&gt; is an instance object of the class &lt;code&gt;Integer&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The class &lt;code&gt;Integer&lt;/code&gt; defines a special method, called &lt;code&gt;+&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;This method takes an argument, which should be an instance of the class &lt;code&gt;Integer&lt;/code&gt;, in this case, &lt;code&gt;2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The method results in a value, which is &lt;code&gt;3&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that, once:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;everything is object&lt;/li&gt;
&lt;li&gt;objects have methods&lt;/li&gt;
&lt;li&gt;and everything is an expression which results in a value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, expressions are all about &lt;em&gt;calling methods&lt;/em&gt;. Hence, we can come to the conclusion that &lt;strong&gt;expressions are evaluated immediately&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_current_time&lt;/span&gt;
  &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch_current_time&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, Ruby will evaluate the expression &lt;code&gt;fetch_current_time&lt;/code&gt;, which is a &lt;em&gt;method&lt;/em&gt;, then resulting in the value &lt;strong&gt;immediately&lt;/strong&gt;, storing the result in the variable &lt;code&gt;current_time&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:06&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:06&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:06&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:06&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No matter how many times we call the variable: anytime the variable &lt;code&gt;current_time&lt;/code&gt; is called, it will produce the &lt;em&gt;same&lt;/em&gt; value that was already evaluated previously. Expressions are evaluated &lt;strong&gt;only immediately&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluating-expressions-later"&gt;
  &lt;/a&gt;
  Evaluating expressions later
&lt;/h2&gt;

&lt;p&gt;What if we wanted to evaluate an expression, &lt;em&gt;not immediately&lt;/em&gt;, but &lt;strong&gt;later&lt;/strong&gt;? Sometimes, we have the need to pass through some variable that contains an expression to be evaluated in &lt;em&gt;another context&lt;/em&gt;, not in the current one. &lt;/p&gt;

&lt;p&gt;Let's see the implementation for the &lt;code&gt;fetch_current_time&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_current_time&lt;/span&gt;
  &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's suppose we want to store this method in some variable, but we want to send this variable to another component, class, whatever context, but &lt;em&gt;later&lt;/em&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#potential-solution"&gt;
  &lt;/a&gt;
  Potential solution
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#this-is-not-ruby-code-just-a-pseudo-code-for-didatic-purposes"&gt;
  &lt;/a&gt;
  This is not Ruby code, just a PSEUDO CODE for didatic purposes
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;later&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fetch_current_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we &lt;strong&gt;could&lt;/strong&gt; have the ability to call &lt;code&gt;current_time&lt;/code&gt;, producing a different result (time) everytime it is called:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;evaluate&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:15&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;evaluate&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:16&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;evaluate&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:17&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that, everytime time the variable is called, the expression within &lt;strong&gt;is evaluated again&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ruby-solution"&gt;
  &lt;/a&gt;
  Ruby solution
&lt;/h3&gt;

&lt;p&gt;The Ruby standard API provides a method called &lt;code&gt;method&lt;/code&gt; which takes an argument which is the method &lt;em&gt;name&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:fetch_current_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#&amp;lt;Method: main.fetch_current_time() (irb):91&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Yes, this is weird at first but it is part of the metaprogramming Ruby API. Metaprogramming in Ruby is really powerful. We should learn and use its capabilities &lt;strong&gt;consciously&lt;/strong&gt; and with moderation.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;meth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:fetch_current_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; Method&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, this is the representation of a &lt;em&gt;method&lt;/em&gt;. &lt;br&gt;
It is literally the instance of the class &lt;code&gt;Method&lt;/code&gt; (remember everything in Ruby is object? Methods included!). &lt;br&gt;
And as such, it has a method that &lt;strong&gt;transforms the method into an structure that can be evaluated later&lt;/strong&gt;. This method is called &lt;code&gt;.to_proc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:fetch_current_time&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_proc&lt;/span&gt;

&lt;span class="c1"&gt;#&amp;lt;Proc:0x00007fca441d4ed8 (lambda)&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;it returns an instance of the class &lt;code&gt;Proc&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;the class &lt;code&gt;Proc&lt;/code&gt; is used to include expressions that will be evaluated later&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;lambda&lt;/code&gt; indicates that this proc is a &lt;em&gt;lambda&lt;/em&gt; type. Then, we can say that &lt;em&gt;method procs are lambdas&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we know that, how to use the proc to solve the problem of evaluating the &lt;code&gt;current_time&lt;/code&gt; variable many times later?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:fetch_current_time&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_proc&lt;/span&gt;

&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:42:00&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:42:01&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:42:02&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this post we learned that Ruby methods can be transformed into Procs to be evaluated later. &lt;/p&gt;

&lt;p&gt;In the upcoming series, we will keep learning the fundamentals of &lt;em&gt;Ruby blocks&lt;/em&gt; and see &lt;a href="https://dev.to/leandronsp/ruby-blocks-made-easy-part-ii-curry-and-procs-as-arguments-3c25"&gt;how to use procs as arguments to methods&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>programming</category>
      <category>softwaredevelopment</category>
    </item>
    <item>
      <title>Tools to improve as a Programmer</title>
      <author>Elijah Trillionz</author>
      <pubDate>Sat, 10 Apr 2021 22:54:09 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/tools-to-improve-as-a-programmer-a7i</link>
      <guid>https://dev.to/elijahtrillionz/tools-to-improve-as-a-programmer-a7i</guid>
      <description>&lt;p&gt;Hello Devs! I have put together some activities to improve daily as a programmer. Be you a &lt;strong&gt;web developer&lt;/strong&gt;, &lt;strong&gt;Front-End&lt;/strong&gt;, &lt;strong&gt;Back-End&lt;/strong&gt;, &lt;strong&gt;Full-Stack&lt;/strong&gt;; whatever you are into, as long as you are coding then this is for you.&lt;/p&gt;

&lt;p&gt;It's all in one &lt;a href="https://discord.gg/K5YNx85pta"&gt;&lt;strong&gt;Discord server&lt;/strong&gt;&lt;/a&gt;. This server has channels for all programmers.&lt;/p&gt;

&lt;p&gt;The primary aim of this server is to make programmers develop and improve on a daily basis.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;p&gt;• &lt;strong&gt;Coding Tasks&lt;/strong&gt;: Get access to tasks from our API as often as you want. You can also add tasks if you want.&lt;/p&gt;

&lt;p&gt;Tasks are into different categories, &lt;em&gt;beginners&lt;/em&gt;, &lt;em&gt;intermediates&lt;/em&gt;, and &lt;em&gt;experts&lt;/em&gt;.&lt;br&gt;
I have made a bot to supply you any category you need.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Project challenging&lt;/strong&gt;: Challenge yourself or others in building projects that will improve your confidence and skills. Good thing is you can be challenged as well. I recently challenged myself to build a &lt;strong&gt;NoSQL database Clone with JavaScript Classes&lt;/strong&gt; which I have done.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;100DaysOfCode&lt;/strong&gt;: The 100DaysOfCode is one of the best ways to stick to coding daily and realize your daily achievements.&lt;/p&gt;

&lt;p&gt;With this challenge you dedicate at least an hour of coding daily.&lt;br&gt;
I built a bot to track your progress on this challenge.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;100DaysOfLearning&lt;/strong&gt;: Are you learning a new technology? Taking a new course? And you can't seem to be focused. Well this challenge is for you.&lt;/p&gt;

&lt;p&gt;This challenge will task you to commit at least an hour to learning on a daily basis.&lt;br&gt;
There is also a bot that tracks your progress on this challenge.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Numerous Project Ideas&lt;/strong&gt;: You a beginner? And want to put your learning into practice with some real projects? Then this is for you.&lt;/p&gt;

&lt;p&gt;Be it mini projects like &lt;em&gt;calculator&lt;/em&gt;, &lt;em&gt;calendar&lt;/em&gt; or big projects like a &lt;em&gt;Music app&lt;/em&gt;, we've got you covered.&lt;br&gt;
I am building a bot for this function.&lt;br&gt;
When I am done with the bot, you will be able to add project ideas as well.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Infinite Resources&lt;/strong&gt;: New technologies in town! New courses! Great Books! New Tools! In this server you get to hear it and you get to share it.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Projects&lt;/strong&gt;: You can share your projects for testing and feedback. For collaborations, suggestions etc.&lt;/p&gt;

&lt;p&gt;There are numerous other features and more others to come. Joining this server is completely free, no boost, no pro feature.&lt;/p&gt;

&lt;p&gt;If you want to join. &lt;a href="https://discord.gg/K5YNx85pta"&gt;Click here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>4 Books that are not about computers that made me a good Software Developer</title>
      <author>Jordi Enric</author>
      <pubDate>Sat, 10 Apr 2021 22:29:05 +0000</pubDate>
      <link>https://dev.to/jordienr/4-books-that-are-not-about-computers-that-made-me-a-good-software-developer-2hac</link>
      <guid>https://dev.to/jordienr/4-books-that-are-not-about-computers-that-made-me-a-good-software-developer-2hac</guid>
      <description>&lt;p&gt;I enjoy reading and learning about Software Development but if I spend half my day working as a Software Dev and the other half reading about Software Development I end up burning out and not doing any reading for a while.&lt;/p&gt;

&lt;p&gt;What I do is read about other things. Sometimes it happens that whatever I'm reading about helps me with aspects of my career. These are the books that helped me the most so far.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-a-mind-for-numbers-by-barbara-oakley"&gt;
  &lt;/a&gt;
  1. A mind for numbers by Barbara Oakley
&lt;/h2&gt;

&lt;p&gt;If you ever think that you're not "good with numbers" or letters or whatever, read this. It will teach you how you learn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-so-good-they-cant-ignore-you-by-cal-newport"&gt;
  &lt;/a&gt;
  2. So good they can't ignore you by Cal Newport
&lt;/h2&gt;

&lt;p&gt;Taught me the value of becoming an expert in something and all the ways it pays off. Motivated me to focus on Frontend Development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-the-war-of-art-by-steven-pressfield"&gt;
  &lt;/a&gt;
  3. The War of Art by Steven Pressfield
&lt;/h2&gt;

&lt;p&gt;I should read this one once a year. It taught me that the hard part is sitting down to do a job, not doing it itself. If you have procrastination problems I recommend this one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-show-your-work-by-austin-kleon"&gt;
  &lt;/a&gt;
  4. Show your work by Austin Kleon
&lt;/h2&gt;

&lt;p&gt;I learned to keep track of the work I was doing and showing it to the world no matter how imperfect it was. Thanks to doing that I got my job as a SD.&lt;/p&gt;

&lt;p&gt;If you know any other books not related directly to software development that helped you please share them :)&lt;/p&gt;

&lt;p&gt;If you liked the article you can &lt;a href="https://twitter.com/intent/user?screen_name=jordienr"&gt;follow me on twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>micro-MVC :: Alternative Web Development Framework</title>
      <author>George Delaportas (ViR4X)</author>
      <pubDate>Sat, 10 Apr 2021 21:29:41 +0000</pubDate>
      <link>https://dev.to/g0d/micro-mvc-alternative-web-development-framework-1o62</link>
      <guid>https://dev.to/g0d/micro-mvc-alternative-web-development-framework-1o62</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HtirPMxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/koxl5xejnh60qt3oji4n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtirPMxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/koxl5xejnh60qt3oji4n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having a solid 20+ years of experience on programming languages, frameworks, utilities, etc. and having seen various approaches to problems, ideas and techniques, I decided to develop an alternative framework for web development that is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enterprise-ready&lt;/li&gt;
&lt;li&gt;Dead simple (KISS)&lt;/li&gt;
&lt;li&gt;Extensible with no limits&lt;/li&gt;
&lt;li&gt;Secure&lt;/li&gt;
&lt;li&gt;Having very small footprint&lt;/li&gt;
&lt;li&gt;Fast and reliable&lt;/li&gt;
&lt;li&gt;Creative and not super strict&lt;/li&gt;
&lt;li&gt;Able to integrate any other framework/platform&lt;/li&gt;
&lt;li&gt;...and much more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For all the details check micro-MVC at &lt;a href="https://github.com/g0d/micro-MVC"&gt;https://github.com/g0d/micro-MVC&lt;/a&gt; and read all the critical details in the documentation at &lt;a href="https://github.com/g0d/micro-MVC/tree/master/Documentation"&gt;https://github.com/g0d/micro-MVC/tree/master/Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>mvc</category>
      <category>ajax</category>
    </item>
    <item>
      <title>Update blog to ghost version 4 running in Kubernetes</title>
      <author>Harish Babu</author>
      <pubDate>Sat, 10 Apr 2021 21:11:25 +0000</pubDate>
      <link>https://dev.to/chekkan/update-blog-to-ghost-version-4-running-in-kubernetes-2b43</link>
      <guid>https://dev.to/chekkan/update-blog-to-ghost-version-4-running-in-kubernetes-2b43</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwWzphAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chekkan/image/upload/q_auto:good/ghostv3-kubernetes-ghostv4--2-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwWzphAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chekkan/image/upload/q_auto:good/ghostv3-kubernetes-ghostv4--2-.png" alt="Update blog to ghost version 4 running in Kubernetes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My personal blog site is running on the ghost blogging platform at the time of this writing. Its current running version 3.42.x and there was a new major version released recently and its currently on version 4.2.0. There are guides available on &lt;a href="https://ghost.org/docs/update/"&gt;ghost documentation site&lt;/a&gt; to help make the upgrade when you have installed ghost on a server using the ghost-CLI tooling. However, none exists for ghost running on Kubernetes, or docker containers. &lt;code&gt;ghost-cli&lt;/code&gt; update path seemed desirable compared to the clean install option especially because some database migration might be involved I assumed. Also, I didnt want to re-configure my site with google analytics etc.   &lt;/p&gt;

&lt;p&gt;Follow the initial steps of backing up all the important content as mentioned in &lt;a href="https://ghost.org/docs/update/"&gt;the documentation site&lt;/a&gt;. Then come back here...  &lt;/p&gt;

&lt;p&gt;You will have ssh into the docker container in order to copy the content folder across.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl cp &amp;lt;namespace&amp;gt;/&amp;lt;pod_name&amp;gt;:/var/lib/ghost/content ghost-migration-to-4.x/content
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I didn't have much luck copying the theme folder in content. But, I haven't made any changes to the theme using the default Casper theme at present. Make sure run the upgrade check for your theme before progressing any further. Download your existing theme from the Admin site and upload the zipped file into the &lt;a href="https://gscan.ghost.org/"&gt;GScan&lt;/a&gt; website.  &lt;/p&gt;

&lt;p&gt;The way I have the blog setup in Kubernetes is by using the base image &lt;a href="https://hub.docker.com/r/chekkan/ghost-cloudinary"&gt;chekkan/ghost-cloudinary&lt;/a&gt; which builds off the &lt;code&gt;ghost-alpine&lt;/code&gt; image. I have already gone ahead and published version &lt;code&gt;4.2.0&lt;/code&gt; of the docker image.   &lt;/p&gt;

&lt;p&gt;You will need to ssh into the docker container pod and install &lt;code&gt;ghost-cli&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl exec --stdin --tty -n "&amp;lt;namespace&amp;gt;" "&amp;lt;pod_name&amp;gt;" -- /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
ssh into the pod thats running ghost container







&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g ghost-cli@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
install ghost-cli npm package





&lt;p&gt;Make sure your current working directory is where you've installed ghost. For me, its at &lt;code&gt;/var/lib/ghost&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I used environment variables in deployment spec file together with Kubernetes secrets to configure my database credentials. For some reason, these were not picked up when I ran &lt;code&gt;ghost config get database.connection.host&lt;/code&gt; command. So, I decided to configure them again manually.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ghost config --db mysql --dbhost &amp;lt;dbhost&amp;gt; --dbuser &amp;lt;dbuser&amp;gt; \
  --dbpass &amp;lt;dbpass&amp;gt; --dbport &amp;lt;dbport&amp;gt; --dbname &amp;lt;dbname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
Update the ghost config values for database





&lt;p&gt;Running the above command will update the &lt;em&gt;config.production.json&lt;/em&gt; file. Review the file to make sure its got the expected values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;su node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
switch user to node





&lt;p&gt;&lt;code&gt;ghost-cli&lt;/code&gt; stops you from updating as a &lt;code&gt;root&lt;/code&gt; user. If you wanted to get back to being a root user again, &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before you can update to version 4, ghost wants you to be in the latest version of the currently installed ghost version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ghost update v3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
updates ghost to the latest version of major version 3







&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ghost update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
updates ghost to the latest version; version 4.2.0 at the time of writing





&lt;p&gt;Once ghost is updated, go ahead and &lt;code&gt;kubectl apply&lt;/code&gt; with your deployment spec file thats updated to the same version of ghost.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>docker</category>
      <category>ghost</category>
    </item>
    <item>
      <title>Rails Dependent Destroy</title>
      <author>M Bellucci</author>
      <pubDate>Sat, 10 Apr 2021 21:02:04 +0000</pubDate>
      <link>https://dev.to/delbetu/rails-dependent-destroy-id3</link>
      <guid>https://dev.to/delbetu/rails-dependent-destroy-id3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#dependent-options"&gt;
  &lt;/a&gt;
  Dependent Options
&lt;/h1&gt;

&lt;p&gt;Given:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;dependent: &lt;/span&gt;&lt;span class="no"&gt;XXXXXXX&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see what happens when using the existing dependent options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#destroy"&gt;
  &lt;/a&gt;
  destroy
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Load&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;SELECT&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;*&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                      
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                                       
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                                       
  &lt;span class="no"&gt;User&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                                       
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                             
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;User id: 1, name: "John", email: "some@email.com", created_at: "2021-04-10 13:39:08.099961000 +0000", updated_at: "2021-04-10 13:39:08.099961000 +0000"&amp;gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deleteall"&gt;
  &lt;/a&gt;
  delete_all
&lt;/h2&gt;

&lt;p&gt;:delete  =&amp;gt; u.destroy will call u.posts.delete (callbacks no executed)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                             
  &lt;span class="no"&gt;User&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                                       
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                             
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;User id: 1, name: "John", email: "some@email.com", created_at: "2021-04-10 13:17:09.423794000 +0000", updated_at: "2021-04-10 13:17:09.423794000 +0000"&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#destroyasync"&gt;
  &lt;/a&gt;
  destroy_async
&lt;/h2&gt;

&lt;p&gt;It is supposed to delete posts in an async job but for my case this was the behavior:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Load&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;SELECT&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;*&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                      
  &lt;span class="no"&gt;User&lt;/span&gt; &lt;span class="no"&gt;Destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;DELETE&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                                                                       
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;rollback&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                           
&lt;span class="no"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                                                                                                                                    
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;                                                                                                                                                                               
&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvalidForeignKey&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SQLite3&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ConstraintException&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;FOREIGN&lt;/span&gt; &lt;span class="no"&gt;KEY&lt;/span&gt; &lt;span class="n"&gt;constraint&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#nullify"&gt;
  &lt;/a&gt;
  nullify
&lt;/h2&gt;

&lt;p&gt;:nullify =&amp;gt; user.destroy will try to user.posts.each { |p| p.user = nil } (callbacks no executed)&lt;br&gt;
Will raise an error if column is not nullable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Update&lt;/span&gt; &lt;span class="no"&gt;All&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;UPDATE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;SET&lt;/span&gt; &lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                           
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;rollback&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                           
&lt;span class="no"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                                                                                                                                    
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;                                                                                                                                                                               
&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;NotNullViolation&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;SQLite3&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ConstraintException&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;NOT&lt;/span&gt; &lt;span class="no"&gt;NULL&lt;/span&gt; &lt;span class="n"&gt;constraint&lt;/span&gt; &lt;span class="ss"&gt;failed: &lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#restrictwithexception"&gt;
  &lt;/a&gt;
  restrict_with_exception
&lt;/h2&gt;

&lt;p&gt;:restrict_with_exception =&amp;gt; u.destroy will do raise ActiveRecord::DeleteRestrictionError if u.posts.any?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Exists&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="no"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="no"&gt;LIMIT&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"LIMIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                              
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;rollback&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                           
&lt;span class="no"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                                                                                                                                    
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;                                                                                                                                                                               
&lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DeleteRestrictionError&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Cannot&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;because&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;dependent&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;:destroy =&amp;gt; a.destroy will call a.bs.destroy_all&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#restrictwitherror"&gt;
  &lt;/a&gt;
  restrict_with_error
&lt;/h2&gt;

&lt;p&gt;:restrict_with_error =&amp;gt; causes an error to be added to the owner if there is an associated object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;                                                                                                                                                                            
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                              
  &lt;span class="no"&gt;Post&lt;/span&gt; &lt;span class="no"&gt;Exists&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="no"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="no"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="no"&gt;FROM&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="no"&gt;WHERE&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="no"&gt;LIMIT&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s2"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"LIMIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;                                                                              
  &lt;span class="no"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;rollback&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;                                                                                                                                                           
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;                                                                                                                                                                                              
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;003&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;                                                                                                                                                                             
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;#&amp;lt;ActiveModel::Errors:0x00007fc2b209d428 @base=#&amp;lt;User id: 1, name: "John", email: "some@email.com", created_at: "2021-04-10 13:17:09.423794000 +0000", updated_at: "2021-04-10 13:17:09.423794000 +&lt;/span&gt;
&lt;span class="mo"&gt;0000&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;, @errors=[#&amp;lt;ActiveModel::Error attribute=base, type=restrict_dependent_destroy.has_many, options={:record=&amp;gt;"&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="s2"&gt;"}&amp;gt;]&amp;gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>rails</category>
    </item>
    <item>
      <title>Build your own Shakespeare Translation Web App with JavaScript Fetch API</title>
      <author>Neha Gupta</author>
      <pubDate>Sat, 10 Apr 2021 20:50:54 +0000</pubDate>
      <link>https://dev.to/nayyyhaa/build-your-own-shakespeare-translation-web-app-with-javascript-fetch-api-loo</link>
      <guid>https://dev.to/nayyyhaa/build-your-own-shakespeare-translation-web-app-with-javascript-fetch-api-loo</guid>
      <description>&lt;p&gt;Shakespeare may have been a genius, but one thing's for sure: he wasn't speaking our language. His ever-popular works (dramas and poems) make his unique language style live even today.&lt;br&gt;
I've always been curious about how Shakespeare would've expressed my thoughts in his words. &lt;em&gt;Have you been too??&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Then you've come to the right place, my friend!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a vanillaJS project which uses API from &lt;a href="https://funtranslations.com/"&gt;https://funtranslations.com/&lt;/a&gt; to &lt;strong&gt;translate English text into Shakespeare English.&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Prerequisites&lt;/th&gt;
&lt;th&gt;Basic understanding of HTML and CSS, an understanding of what JavaScript is.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This is what we'll build:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BYZvR8g3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85qojwxr74iiajwgrumb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BYZvR8g3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85qojwxr74iiajwgrumb.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Try out the app &lt;a href="https://iamshakespeare.netlify.app/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h2&gt;

&lt;p&gt;In case you get lost while following along, you can grab the &lt;a href="https://github.com/nayyyhaa/shakespeare-translator"&gt;source code from here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's begin!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;To get started, we'll be using VSCode for writing our code. Create your first file with the name &lt;strong&gt;index.html&lt;/strong&gt; for writing out HTML code.&lt;br&gt;
In our Application, we have 3 basic elements:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Input Field - to accept the user's input&lt;/li&gt;
&lt;li&gt;Translate Button - to create an event when the user clicks on the translate button.&lt;/li&gt;
&lt;li&gt;Output Field - to preview the translated text.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These 3 elements can be created as follows in HTML:&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#html-code-snippet-indexhtml"&gt;
  &lt;/a&gt;
  HTML code snippet - index.html
&lt;/h6&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"textarea"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"inputTxt"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"insert your text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"translateButton"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Translate!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"outputTxt"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;'/scripts/app.js'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: &amp;lt; script &amp;gt; tag is being used to bind this HTML file with the JavaScript file &lt;strong&gt;app.js&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#initialising-variables-to-store-our-data"&gt;
  &lt;/a&gt;
  Initialising variables to store our data
&lt;/h2&gt;

&lt;p&gt;This section of the code sets up the variables we need to store the data our program will use.&lt;br&gt;
In your &lt;strong&gt;app.js&lt;/strong&gt; file, create the following variables:&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#js-code-snippet-appjs"&gt;
  &lt;/a&gt;
  JS code snippet - app.js
&lt;/h6&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;inputElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#inputTxt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// input element&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;translateBtnElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#translateButton&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// button element&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;outputElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#outputTxt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// output element&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://shakespeare.p.mashape.com/shakespeare.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//API URL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The first three variables &lt;code&gt;inputElement&lt;/code&gt;, &lt;code&gt;translateBtnElement&lt;/code&gt;, &lt;code&gt;outputElement&lt;/code&gt; are each made to store a reference to the form text input, translate button and output element in our HTML.&lt;br&gt;
Our final variable &lt;code&gt;url&lt;/code&gt; is used to store the server's API call URL from where we obtain the translated data.&lt;/p&gt;

&lt;p&gt;Here, we've used &lt;code&gt;.querySelector()&lt;/code&gt; function for selecting the particular &lt;strong&gt;id&lt;/strong&gt; that we've already set in our index.html file.&lt;/p&gt;

&lt;p&gt;To listen to the button click event we need to define an event handler function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;translateBtnElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;translateFunction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;   &lt;code&gt;click&lt;/code&gt; - is the event&lt;/li&gt;
&lt;li&gt;   &lt;code&gt;translateBtnElement&lt;/code&gt; - is the event listener&lt;/li&gt;
&lt;li&gt;   &lt;code&gt;translateFunction&lt;/code&gt; - is the event handler/callback function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After &lt;code&gt;click&lt;/code&gt; event has been fired on &lt;code&gt;translateBtnElement&lt;/code&gt;, the  &lt;code&gt;addEventListener()&lt;/code&gt; method handles by calling &lt;code&gt;translateFunction()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before defining the &lt;code&gt;translateFunction()&lt;/code&gt; we need to get some basic knowledge about APIs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-an-api"&gt;
  &lt;/a&gt;
  What is an API?
&lt;/h3&gt;

&lt;p&gt;API stands for &lt;strong&gt;Application Programming Interface&lt;/strong&gt;, is a set of functions that allows applications to access data and interact with external software components, operating systems, or microservices.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;WOAH! What?!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;OK! Let me explain this to you in easy words. Suppose you are in a restaurant and you are dying to have that chocolate cake. You don't go straight to the chef for placing the order, right? The waiter does that for you. That's what API is. &lt;strong&gt;It's an interface that communicates between applications.&lt;/strong&gt;&lt;br&gt;
Here,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;   You/Customer: Client&lt;/li&gt;
&lt;li&gt;   Waiter: API&lt;/li&gt;
&lt;li&gt;   Chef: Server
Hence, in order to get the data from the web servers, we need APIs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's call this API with&lt;br&gt;
In our example, we are using &lt;a href="https://funtranslations.com/shakespeare"&gt;FunTranslationAPI&lt;/a&gt; to fetch the data in JSON format(key - value pair).&lt;/p&gt;

&lt;p&gt;Let's call the API then!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#fetch-api"&gt;
  &lt;/a&gt;
  Fetch API
&lt;/h2&gt;

&lt;p&gt;The Fetch API is a modern interface that allows you to make HTTP requests to servers from web browsers to given URL.&lt;/p&gt;

&lt;p&gt;Basic syntax involved:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// handle the response&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// handle the error&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here in the &lt;code&gt;fetch()&lt;/code&gt; function we pass the URL of the resource from where we are requesting the data. This will pass the data as a &lt;code&gt;response&lt;/code&gt; object. The &lt;code&gt;response&lt;/code&gt; object is the API wrapper for the fetched resource with a number of useful properties and methods to inspect the response. This will then passed to the &lt;code&gt;data&lt;/code&gt; variable (you can give any name to this) for printing output.&lt;/p&gt;

&lt;p&gt;Now, it's time to define the functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-functions-for-some-action"&gt;
  &lt;/a&gt;
  Defining Functions() &lt;em&gt;for some action&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;To get our code into some action, we need to define some functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;translateFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;//fetching input value &lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                             &lt;span class="c1"&gt;//Fetch API call&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;outputElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Something wrong with the server! Try after sometime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's break it down:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We'll extract &lt;code&gt;inputElement&lt;/code&gt; value into &lt;code&gt;inputValue&lt;/code&gt; variable. &lt;/li&gt;
&lt;li&gt;Making &lt;code&gt;fetch&lt;/code&gt; API call using the given &lt;code&gt;url&lt;/code&gt; and then extracting &lt;code&gt;response&lt;/code&gt; object. This is just an HTTP response, not the actual JSON. To extract the JSON body content from the response, we use the &lt;code&gt;json()&lt;/code&gt; method via using an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;arrow&lt;/a&gt; function.&lt;/li&gt;
&lt;li&gt;Setting &lt;code&gt;data&lt;/code&gt; variable's value to the &lt;code&gt;outputElement&lt;/code&gt; variable.&lt;/li&gt;
&lt;li&gt;Finally, error handling with &lt;code&gt;catch()&lt;/code&gt; function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's try our application. Go to the browser, input your text &amp;amp; click on the translate button. You'll get the following output. &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#in-console"&gt;
  &lt;/a&gt;
  In console
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"code"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Bad Request: text is missing."&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's not the output that we were expecting. That's because we've to pass the text to our URL. For that we'll define another function &lt;code&gt;translatedURL()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;translatedURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ?text= &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try our app with sample text &lt;em&gt;Hi. How are you?&lt;/em&gt; and calling in fetch() function as &lt;code&gt;fetch(translatedURL(inputValue))&lt;/code&gt; instead of previous &lt;code&gt;fetch(url)&lt;/code&gt; to concatenate the text message to our server API's URL. We'll get output like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"total"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"contents"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"translated"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Good morrow. How art thee?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
        &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hi. How are you?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;     
        &lt;/span&gt;&lt;span class="nl"&gt;"translation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"shakespeare"&lt;/span&gt;&lt;span class="w"&gt;         
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Success! Not so much. Notice that the output text doesn't look pretty. This output is JSON data and we need to extract the translated value from it.&lt;/p&gt;

&lt;p&gt;Here,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;   translated: translated text&lt;/li&gt;
&lt;li&gt;   text: input text&lt;/li&gt;
&lt;li&gt;   translation: language of translation being used from FunTranslation API
We refer it by &lt;code&gt;json.contents.translated&lt;/code&gt;. Now our code should look something like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;translatedURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ?text= &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;translateFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;finalURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;translatedURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;finalURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;outputElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Something wrong with the server! Try after sometime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we get the following output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rFwNTIcf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us63l9tbhxnt004el08i.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rFwNTIcf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us63l9tbhxnt004el08i.PNG" alt="output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Voila!&lt;/strong&gt; We've built our very own Shakespeare Translation Web App with JavaScript Fetch API.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Funtranslation APIs are free to use, hence they have a limitation of 5 calls/hour. Once it exceeds this limit, it would result in a failure with an error we've mentioned in the &lt;code&gt;catch()&lt;/code&gt; block.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#finished-for-now"&gt;
  &lt;/a&gt;
  Finished for now...
&lt;/h2&gt;

&lt;p&gt;Congrats on making it this far! We've got the basic understanding of DOM scripting i.e. JS in the browser, calling servers, and getting data from there, taking user input and showing user output, and many more things.&lt;/p&gt;

&lt;p&gt;Now all that's left for you is to design your own styling with CSS. You can also check out funtranslation &lt;a href="https://funtranslations.com"&gt;site&lt;/a&gt; for a similar app with different translation languages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://iamshakespeare.netlify.app/"&gt;Click here&lt;/a&gt; to check out the live project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Give it a try, create your version of the same and share your experience and feedback on the comments section.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top 5 Programming Skills Worth Learning in 2021</title>
      <author>Brock Herion</author>
      <pubDate>Sat, 10 Apr 2021 20:34:40 +0000</pubDate>
      <link>https://dev.to/brockherion/top-5-programming-skills-worth-learning-in-2021-98a</link>
      <guid>https://dev.to/brockherion/top-5-programming-skills-worth-learning-in-2021-98a</guid>
      <description>&lt;p&gt;2021 has already proven itself as another crazy year. It’s also another fantastic opportunity to learn new skills and expand on existing ones. In software development, stagnation is a sure-fire way to fall behind the curve. With new languages, technologies, best practices, and frameworks coming out more and more rapidly, this is the perfect opportunity to reevaluate where you want to go as a developer.&lt;/p&gt;

&lt;p&gt;At the beginning of this year, I did just that. I wrote an article earlier this year about what I felt were the best languages to learn in 2021. With those, I felt that there was a nice mix for developers of any level and area of interest. However, they weren’t the languages for me to learn. Already in working with Python, Typescript, C#, and BASH, I thought about what I could do to help move my skills forward in other ways. After a lot of thought, I came up with a few programming skills that I believe are worth learning in 2021.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-functional-programming"&gt;
  &lt;/a&gt;
  1. Functional Programming
&lt;/h1&gt;

&lt;p&gt;This is a big one. Functional programming is a programming paradigm that revolves around the idea of moving data around, well, functionally! Instead of creating objects and callings methods on those objects, your data can be thought of as a stream, moving from function to function. It requires a different way of thinking about your programs. It's a lot easier to show it than to explain it.&lt;/p&gt;

&lt;p&gt;Let's take a look at this Java code. It should be pretty familiar to anybody who has worked in an OOP language.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Here,are,some,words"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;","&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;trim&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toUpperCase&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are replacing the commas with spaces, trimming whitespace off the end, and then setting the whole thing to uppercase.&lt;/p&gt;

&lt;p&gt;Now, let's look at the same example in Elixir, my favorite functional programming language.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Here,are,some,words"&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trim&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upcase&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are taking our stream and piping it into the replace function, which replaces commas with spaces. The output of that is piped into trim, which is then piped into upcase. Notice how words is assigned once, where as in our Java example, we declare it then reassign it three times. This is a key feature of Elixir. Data is immutable, meaning it cannot be changed. The string being passed into replace does not change but instead returns a new reference to a string. This new string is passed into trim, which returns a new one to upcase. Our variable words is only assigned once and our original input was never changed. This pattern of programming can help to create more robust and more maintainable software.&lt;/p&gt;

&lt;p&gt;For those wanting to get started with functional programming, there is a lot to chose from! If you are on the JVM, you have Scala or Clojure to choose from. Scala might be easier, as it supports both OOP and functional programming paradigms. For those in the .NET side of the world, F# is a fantastic language. There is also a version of Clojure that runs on the .NET platform as well. My personal preference is Elixir, as its syntax is similar to that of Ruby’s but gives you the power of the BEAM, Erlang’s virtual machine.&lt;/p&gt;

&lt;p&gt;You can find more information on Elixir at &lt;a href="https://elixir-lang.org/"&gt;https://elixir-lang.org/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-swift-kotlin-and-mobile-development"&gt;
  &lt;/a&gt;
  2. Swift, Kotlin, and Mobile Development
&lt;/h1&gt;

&lt;p&gt;This one might strike some people as odd. However, I believe Swift has a place beyond just writing iOS apps. In 2015, Swift was published under the Apache 2.0 license, thus making it open source. As of now, it can be run on Mac and Linux and can run on Windows through the use of Docker.&lt;/p&gt;

&lt;p&gt;Given this, Swift can be used to create more than just iPhone apps now. You can build APIs, command-line apps, and even do machine learning with it. Unfortunately, iOS is still restricted to Macs only, but it is a start.&lt;/p&gt;

&lt;p&gt;The beauty in how easy the language is to write and use. It’s certainly C-inspired but &lt;em&gt;feels&lt;/em&gt; like a modern language. It is nowhere near as clunky or verbose as Java. The same argument can be made for Kotlin, which is essentially aiming to fix the problems of Java while being a modern language. Kotlin is developed by JetBrains, so you know it’s treated as a first-class citizen in their IntelliJ platform. Kotlin can be used to build Android apps, which is excellent at but also building web apps using the Spring framework. It can be used alongside Java in existing projects, so adding it in is simple. Both of these languages blow past their predecessors in almost every way.&lt;/p&gt;

&lt;p&gt;So why are these skills important? For one, mobile development is not going anywhere. In fact, I believe its need will continue to increase, due to the ever-growing number of systems that can now interact with phones. Apps now let you control your car, house, let you make payments, and so much more. Beyond that, both of these languages can now be used to build more kinds of applications. You essentially can build your mobile and backend in the same language now. If you learn Kotlin, you can even compile to JavaScript and use it on the web. And this isn’t even going into the amount of other smart appliances coming out. Watches, doorbells, and even washing machines are all getting smarter. Both Swift and Kotlin are great for building apps for these appliances or for building mobile apps to interface with them. These are fast, modern, and versatile languages with a lot to offer.&lt;/p&gt;

&lt;p&gt;As a side note, Apple Silicon has already proven itself a beast and both of these languages have been shown to do very well on it. I believe we will see a wider implementation of ARM chips from all vendors eventually, so knowing these languages would be a great way to dive headfirst into these next-generation CPUs.&lt;/p&gt;

&lt;p&gt;You can start with Swift at &lt;a href="https://swift.org/"&gt;https://swift.org/&lt;/a&gt; and Kotlin at &lt;a href="https://kotlinlang.org/"&gt;https://kotlinlang.org/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-blockchain-and-cryptocurrency"&gt;
  &lt;/a&gt;
  3. Blockchain and Cryptocurrency
&lt;/h1&gt;

&lt;p&gt;Blockchain technology is not going anywhere anytime soon. We've seen the kinds of disruption that Bitcoin, Ethereum, and even Dogecoin have created. Cryptocurrency has steamrolled ahead, while traditional banking and investment institutions have fought it tooth and nail. I am not going to explain the ins and outs of how the blockchain works here, but I believe that knowing how to program apps to take advantage of this technology is an extremely valuable skill to have.&lt;/p&gt;

&lt;p&gt;Cryptocurrency essentially removes the middleman in finance. Bitcoin and Ethereum are not controlled or owned by a centralized bank or printed from the government. Because of this, they are seen as more private and a way to future-proof against inflation and any changes to the value of the dollar. This is absolutely crucial. A bitcoin is worth the same everywhere in the world.&lt;/p&gt;

&lt;p&gt;Why is this important for us as developers? Well recently, Tesla announced they would be accepting Bitcoin as payment and not converting back into a stable coin or into USD. This is a massive step forward for cryptos. If things keep moving this way, there will come a time when developers need to know and understand how to build apps that can integrate with the blockchain. As more people start investing in and taking an interest in cryptocurrency, the demand for being able to use it for commerce in websites and apps will only grow. &lt;/p&gt;

&lt;p&gt;My advice for getting started would be to learn Solidity, the programming language used for building apps to take advantage of Ethereum. You will also need a knowledge of languages like Python and JavaScript to be able to let your users interact with your applications. Below is a simple Hello, World app taken from Solidity's website.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pragma solidity ^0.8.0;
contract MyContract {
    function helloWorld() public pure returns (string memory) {
        return "Hello, World!";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More information can be found at &lt;a href="https://soliditylang.org/"&gt;https://soliditylang.org/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-graphql"&gt;
  &lt;/a&gt;
  4. GraphQL
&lt;/h1&gt;

&lt;p&gt;Moving away from broader language categories into more design and architecture, GraphQL aims to solve a couple of the problems of REST APIs. It was designed by Facebook to in order help them streamline getting data from their servers to their client apps.&lt;/p&gt;

&lt;p&gt;Instead of declaring endpoints for your API, you have one GraphQL endpoint that you pass your queries and mutations to. A query is essentially a defined set of data you want back from your server. You would use queries to define the structure of the data and how many records you want back from your server. Mutations can be thought of as a traditional create, update, or delete command. You send data to the server that you are creating or updating or whatever you want to do with it.&lt;/p&gt;

&lt;p&gt;GraphQL aims to simplify retrieval and management between clients and servers. You no longer are fetching more or fewer data than what you expected and really don’t need to create a bunch of DTOs to manage requests and responses. You just define your object types and then you can specify what fields from it you want your server to return.&lt;/p&gt;

&lt;p&gt;Will GraphQL replace REST? Well no, I don’t think so. Each has a specific use case. Sometimes, setting up a REST API might work better for your app. Other times you might want to use GraphQL. Why I think GraphQL is worth learning because of how much more complicated our data is becoming. Complicated data models no longer need to have complicated logic to build your dataset on your backend. With GraphQL, you tell the server exactly what you want back.&lt;/p&gt;

&lt;p&gt;You can learn more about GraphQL at &lt;a href="https://graphql.org/"&gt;https://graphql.org/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-docker"&gt;
  &lt;/a&gt;
  5. Docker
&lt;/h1&gt;

&lt;p&gt;Docker has been a tool that I cannot live without. Docker is a tool used to help simplify code environments. You pull down an “image” of an existing environment, say like one for Python or JavaScript, and using a file called a Dockerfile, you can copy your code into the image and run it there instead of on your machine.&lt;/p&gt;

&lt;p&gt;There are a number of advantages to this from a developer's perspective. You, for one, can keep your development environment off your local machine. All your dependencies and code are isolated in the image. This helps prevent any headaches you might run into with running your environments locally. It also makes sharing your environment with team members easier. All you need to give them is your code and the Dockerfile and they can use the code exactly how you have it set up on your machine.&lt;/p&gt;

&lt;p&gt;You can also set up more complicated environments using Docker Compose, where you can create environments using multiple images. You can spin up databases, message brokers, and more, all without having to download and install these pieces of software on your system. You can then reference those within your software, whether you are running that in a container or not. It greatly simplifies the process of creating and managing development environments.&lt;/p&gt;

&lt;p&gt;This can be taken a step further with tools like Docker Swarm and Kubernetes, which make the process of setting up and configuring production environments much simpler. Being able to package and deploy software in containers like this greatly reduces the risk of taking down the whole system. Again, having all your configurations and applications isolated in this way really helps to ensure that your code will run exactly the same way no matter where it is.&lt;/p&gt;

&lt;p&gt;Like with GraphQL, Docker and container technology helps solve complicated business infrastructure. With more and more components to applications now, and with them becoming more microservice oriented, Docker is an essential tool for developers to learn and use. The power and flexibility it gives you to control every part of your stack and deploy it with confidence are invaluable to any development workflow.&lt;/p&gt;

&lt;p&gt;More information on Docker can be found at &lt;a href="https://www.docker.com/"&gt;https://www.docker.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;The world of development is constantly changing and evolving, and we as developers have to stay on top of it. How software is written and the tooling we use to create it can change overnight sometimes. It’s important to constantly be learning and adding new skills to what you know.&lt;/p&gt;

&lt;p&gt;These skills and technologies I have discussed are a great way to do just that. More mainstream languages are introducing functional elements into their syntax. Our home appliances and phones are not only getting smarter, but more available and more complicated. Swift and Kotlin are great languages to learn in that regard. Blockchain technology will continue to grow and become more widely adopted as the demand and awareness of cryptos continue to grow. GraphQL and Docker are tools to help with how you build your apps and fetch data for them. They solve the issues of deployments, APIs, dependencies, and so much more. With these skills, you are not only helping to write better software, but you are also helping to future-proofing yourself.&lt;/p&gt;

&lt;p&gt;(Photo by Firos nv on Unsplash)&lt;/p&gt;

</description>
      <category>functional</category>
      <category>devops</category>
      <category>docker</category>
      <category>mobile</category>
    </item>
  </channel>
</rss>
