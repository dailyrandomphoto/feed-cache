<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>SHIFT15M: Multiobjective Large-scale Fashion Dataset with Distributional Shifts</title>
      <author>Masanari KIMURA</author>
      <pubDate>Fri, 10 Sep 2021 01:34:05 +0000</pubDate>
      <link>https://dev.to/nocotan/shift15m-multiobjective-large-scale-fashion-dataset-with-distributional-shifts-3ebp</link>
      <guid>https://dev.to/nocotan/shift15m-multiobjective-large-scale-fashion-dataset-with-distributional-shifts-3ebp</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQqwUFzU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l72ux3fhh2mzreh3mtip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQqwUFzU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l72ux3fhh2mzreh3mtip.png" alt="Overview of the SHIFT15M dataset."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi, everyone.&lt;/p&gt;

&lt;p&gt;We present a novel dataset aimed at properly evaluating machine learning models under distributional shifts.&lt;/p&gt;

&lt;p&gt;Our SHIFT15M dataset has several good properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiobjective. Each instance in the dataset has several numerical values that can be used as target variables.&lt;/li&gt;
&lt;li&gt;Large-scale. The SHIFT15M dataset consists of 15million fashion images.&lt;/li&gt;
&lt;li&gt;Coverage of types of dataset shifts. SHIFT15M contains multiple dataset shift problem settings (e.g., covariate shift or target shift). SHIFT15M also enables the performance evaluation of the model under various magnitudes of dataset shifts by switching the magnitude.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, we provide software to handle SHIFT15M in a very simple way.&lt;/p&gt;

&lt;p&gt;If you are interested feel free to check out:&lt;/p&gt;

&lt;p&gt;Arxiv: &lt;a href="https://arxiv.org/abs/2108.12992"&gt;https://arxiv.org/abs/2108.12992&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href="https://github.com/st-tech/zozo-shift15m"&gt;https://github.com/st-tech/zozo-shift15m&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>deeplearning</category>
    </item>
    <item>
      <title>How to contribute to OSS AsyncAPI Initiative üåà</title>
      <author>Alejandra Quetzalli üêæ</author>
      <pubDate>Fri, 10 Sep 2021 01:31:16 +0000</pubDate>
      <link>https://dev.to/alejandra_quetzalli/how-to-contribute-to-oss-asyncapi-initiative-dh7</link>
      <guid>https://dev.to/alejandra_quetzalli/how-to-contribute-to-oss-asyncapi-initiative-dh7</guid>
      <description>&lt;p&gt;You may remember that I joined Postman, focusing solely on the &lt;em&gt;Open-Source (OSS)&lt;/em&gt; &lt;a href="https://www.asyncapi.com"&gt;AsyncAPI Initiative&lt;/a&gt;. üíï &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2WpNFXiT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxega686n9l16aijr4kh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2WpNFXiT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxega686n9l16aijr4kh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yesterday, someone on social media asked me what contributions are needed the most for AsyncAPI Initiative. After asking my team, they gave me a comprehensive list of what is most needed. Ready to contribute? üòÉ &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-contributions-are-needed-most"&gt;
  &lt;/a&gt;
  What contributions are needed most
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Volunteers and speakers for the &lt;a href="https://www.asyncapi.com/blog/events2021"&gt;upcoming October Hackathon and our Online Conference&lt;/a&gt; running from November 16-18. &lt;/li&gt;
&lt;li&gt;More &lt;a href="https://www.asyncapi.com/docs/getting-started"&gt;docs&lt;/a&gt;! &lt;/li&gt;
&lt;li&gt;Dev effort in our react component in the 1.0 version so that we can start working on &lt;a href="https://github.com/asyncapi/studio"&gt;Studio UI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;More hands-on CLI development; we're using TS and &lt;a href="https://github.com/vadimdemedes/ink"&gt;Ink&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Regular maintenance for our &lt;a href="https://github.com/asyncapi/vs-asyncapi-preview"&gt;VS Code plugin&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Continue improvements and add new features to core tools such as our &lt;a href="https://github.com/asyncapi/parser-js"&gt;spec parser/validator&lt;/a&gt; and &lt;a href="https://github.com/asyncapi/generator"&gt;code generator&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Test out our new baby &lt;a href="https://github.com/asyncapi/glee"&gt;Glee&lt;/a&gt; and share feedback.&lt;/li&gt;
&lt;li&gt;Our &lt;a href="https://www.asyncapi.com/"&gt;website&lt;/a&gt; sorely needs a Front-End Dev that is willing to work without designs; we're using React, Tailwind, and Next.js. (&lt;strong&gt;Note:&lt;/strong&gt; Since our OSS team doesn't have a designer, this means being open to improve stuff via trial/error and having the patience to accept that in open source, any contributor can jump into a PR and comment.) &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mWS-q3A2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmrfv2yseumh0sle4y0w.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mWS-q3A2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmrfv2yseumh0sle4y0w.jpeg" alt="AsyncAPI, the future of event-driven architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-contributing"&gt;
  &lt;/a&gt;
  Thank you for contributing üíï
&lt;/h2&gt;

&lt;p&gt;We constantly need help at &lt;strong&gt;AsyncAPI Initiative&lt;/strong&gt; and look forward to regular contributors. In return, we offer any onboarding support you need and a lovely community of people!&lt;/p&gt;

&lt;p&gt;Let us know if you need anything to get started! üåà &lt;/p&gt;

&lt;p&gt;üëâüèΩ Don't forget to join our &lt;a href="https://asyncapi.slack.com/join/shared_invite/enQtNDY3MzI0NjU5OTQyLTM5NTlkYzFmZDQyMGVkNzVkOTRhMGU2N2VmMWRlOTdkNWE0YzdjMGQ2NzRlOWU1NGJkYjUyZDEzMzM3ZGYzYzM#/shared-invite/email"&gt;Slack channel&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>contributorswanted</category>
      <category>opensource</category>
      <category>eventdriven</category>
      <category>tooling</category>
    </item>
    <item>
      <title>My First Blog - Exploring Open Source! </title>
      <author>MizuhoOkimoto</author>
      <pubDate>Fri, 10 Sep 2021 00:07:01 +0000</pubDate>
      <link>https://dev.to/okimotomizuho/my-first-blog-exploring-open-source-40ab</link>
      <guid>https://dev.to/okimotomizuho/my-first-blog-exploring-open-source-40ab</guid>
      <description>&lt;p&gt;Hi, I'm Mizuho Okimoto!&lt;/p&gt;

&lt;p&gt;I'm a junior programmer, and student in my 5th semester, at Seneca College in Toronto. One of my current courses, Open Source Development(OSD600), gave me a great opportunity to write blogs here.&lt;/p&gt;

&lt;p&gt;First of all, let me introduce myself!&lt;br&gt;
Before I came to Toronto, I lived in Japan. I worked as a human resource consultant, where my role included providing websites and human resource management systems and collecting and analyzing data. At the time I wished I could build websites and software myself for my clients, to improve their business issues.&lt;br&gt;
After my one-year Canadian visa expired, I was going to go back to Japan, but I have decided to make a change and achieve my wish.&lt;/p&gt;

&lt;p&gt;I chose the OSD600 course as one of my optional courses because when I attended a career session to find my Co-op job, all of the Seneca students who worked for the company recommended us to take the course by David Humphrey. After I watched his first lecture video on YouTube, I was fascinated by the course concepts.&lt;br&gt;
He said we have to write a bunch of code, and it's challenging, so I'm still worried if I can do it. However, I thought if I didn't challenge myself during school, there was no way to improve my skills.&lt;/p&gt;

&lt;p&gt;This term, my accomplishment is to get a Co-op job from January as a web developer and be involved the Open Source community through this course to expand my programming knowledge. I haven't made up my mind about what kind of project I want to work on yet, but I would like to find something specifically with JavaScript.&lt;/p&gt;

&lt;p&gt;As part of the tasks I forked the following Open Source repository on GitHub.&lt;br&gt;
30 Seconds of Code: &lt;a href="https://github.com/MizuhoOkimoto/30-seconds-of-code"&gt;https://github.com/MizuhoOkimoto/30-seconds-of-code&lt;/a&gt;&lt;br&gt;
It's an open source JavaScript snippet that you can understand in 30 seconds or less. It's more like documentation, not a project, but I thought it was an interesting concept and very useful.&lt;/p&gt;

&lt;p&gt;Finally, I'm working on creating my portfolio which is approximately 3/4 complete. Please take a look :D&lt;br&gt;
-&amp;gt; &lt;a href="https://www.okimotomizuho.com/"&gt;https://www.okimotomizuho.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading my first blog. See you soon!&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>programming</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Feature Flags Simply Explained üé•[video]</title>
      <author>Davide 'CoderDave' Benvegn√π</author>
      <pubDate>Thu, 09 Sep 2021 23:44:31 +0000</pubDate>
      <link>https://dev.to/n3wt0n/feature-flags-simply-explained-video-11n1</link>
      <guid>https://dev.to/n3wt0n/feature-flags-simply-explained-video-11n1</guid>
      <description>&lt;p&gt;What are Feature Flags (or Feature Toggles)? How do they work? Why they are important?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feature Flags are a super important tool&lt;/strong&gt; to use in your application, but many are still confused about them&lt;/p&gt;

&lt;p&gt;This is why I put together a video with a &lt;strong&gt;simple explanation&lt;/strong&gt; on how Feature Flags work, how to implement them, and what &lt;strong&gt;benefits&lt;/strong&gt; they bring.&lt;/p&gt;

&lt;p&gt;‚è≤Ô∏è The overall outline of the video is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What are Feature Flags&lt;/li&gt;
&lt;li&gt;Release vs Deployment&lt;/li&gt;
&lt;li&gt;Feature Flag Implementation theory&lt;/li&gt;
&lt;li&gt;Continuous Experimentation&lt;/li&gt;
&lt;li&gt;Platforms with Feature Flags&lt;/li&gt;
&lt;li&gt;Controlling Feature Flags&lt;/li&gt;
&lt;li&gt;Recap&lt;/li&gt;
&lt;li&gt;Final Considerations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoy the watch!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/c8KgKTgyFUE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/c8KgKTgyFUE"&gt;Link to the video: https://youtu.be/c8KgKTgyFUE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What do you think of it? How do you plan to use or already use Feature Flags? Any more questions about this topic?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let me know in the comment section below&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üìß &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
üåê &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/c8KgKTgyFUE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>devops</category>
      <category>video</category>
      <category>explained</category>
    </item>
    <item>
      <title>Go tutorial: Build a card game with Golang</title>
      <author>Erin Schaffer</author>
      <pubDate>Thu, 09 Sep 2021 23:10:47 +0000</pubDate>
      <link>https://dev.to/educative/go-tutorial-build-a-card-game-with-golang-35ph</link>
      <guid>https://dev.to/educative/go-tutorial-build-a-card-game-with-golang-35ph</guid>
      <description>&lt;p&gt;Golang, or Go, is a popular programming language used by many top tech companies. If you dream of working for one of these top companies, it‚Äôs important to have experience with the programming languages they use. The best way to learn any programming language is to dive right in and get real-world, hands-on experience. A solid portfolio with coding projects can help demonstrate your skills and experience in a programming language. Today, we‚Äôre going to walk you through a real-world Go portfolio project. &lt;/p&gt;

&lt;p&gt;Let‚Äôs get started!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We‚Äôll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#description"&gt;Project description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#featureone"&gt;Building feature 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#featuretwo"&gt;Building feature 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrapup"&gt;Project wrap up and related interview questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nextsteps"&gt;Next steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-description"&gt;
  &lt;/a&gt;
  Project description
&lt;/h2&gt;

&lt;p&gt;Card games are popular all around the world, with people of all ages playing different variations of them. Let's say that you work for a startup that wants to create a web app to play different card games. They want to design common games, like poker and solitaire, as well as create their own unique games. All of the games can be played in single-player or multiplayer mode. Since there will be a single-player option, your team needs to create an ‚Äúopponent‚Äù to play against users.&lt;/p&gt;

&lt;p&gt;The first part of the project involves implementing a feature that helps the user &lt;strong&gt;play a variation of poker&lt;/strong&gt;. You will have to design the feature so that it can determine if a given hand of cards is a hand of straights or not. The second part of the project involves creating a feature for a &lt;strong&gt;custom card game&lt;/strong&gt; named &lt;em&gt;Fizzle&lt;/em&gt;. You will have to design the feature so that the user can find the maximum points that can be obtained by picking out cards from a set of ten random cards.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Feature 1&lt;/strong&gt;: Determine if a hand of straights is possible.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Feature 2&lt;/strong&gt;: Find the maximum number of points that can be obtained from a set of ten random cards.
Now that you know the background, let‚Äôs get started working on the first feature!

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-feature-1"&gt;
  &lt;/a&gt;
  Building feature 1
&lt;/h2&gt;

&lt;p&gt;For feature #1, we‚Äôre working on a poker game variation concerned with a hand of straights. In traditional poker, players have sets of five cards (called &lt;strong&gt;&lt;em&gt;hands&lt;/em&gt;&lt;/strong&gt;). Normally, a hand of straights is formed by five cards of sequential ranks, like &lt;em&gt;9&lt;/em&gt;, &lt;em&gt;8&lt;/em&gt;, &lt;em&gt;7&lt;/em&gt;, &lt;em&gt;6&lt;/em&gt;, and &lt;em&gt;5&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;In our new variation of poker, a number &lt;em&gt;k&lt;/em&gt; will be determined by a dice roll. If the dice roll a 1, it should be rolled again. That way, &lt;em&gt;k&lt;/em&gt; will always be in the range of 2-6. A &lt;strong&gt;hand of straights&lt;/strong&gt; is only possible if &lt;em&gt;k&lt;/em&gt; sets of cards can be formed using all of the cards in the given hand. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kd9MnFxO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqas0squo706hj9f2lcd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kd9MnFxO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqas0squo706hj9f2lcd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, we can see that we were dealt a hand of nine cards. The dice rolled a 3, so &lt;em&gt;k&lt;/em&gt; is &lt;strong&gt;3&lt;/strong&gt;. Then, the cards were arranged into three groups. Each group contains three cards in sequential order. During implementation, we‚Äôll receive these cards in an array, like &lt;code&gt;{10, 3, 6, 2, 13, 12, 5, 4, 7}&lt;/code&gt;. The jack, king, and queen cards are denoted by 11, 12, and 13 respectively. The number after the dice roll is given as an integer. The module should return &lt;code&gt;true&lt;/code&gt; if a hand of straights can be formed. If a hand of straights can‚Äôt be formed, it should return &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;The common intuition behind the solution is to try and &lt;strong&gt;form groups of size *k&lt;/strong&gt;&lt;em&gt;, starting with the lowest card. Once the lowest card is identified, a hand of straights is only possible if the lowest card is at the bottom end of a *k-sized&lt;/em&gt; group. For example, if &lt;em&gt;k&lt;/em&gt; is &lt;em&gt;4&lt;/em&gt; and the lowest card is &lt;em&gt;2&lt;/em&gt;, we know that the group will be &lt;em&gt;2, 3, 4, 5&lt;/em&gt;. If we can‚Äôt find this group, the hand isn‚Äôt a hand of straights. &lt;/p&gt;

&lt;p&gt;Let‚Äôs get started coding the feature! We‚Äôll break the solution down into steps. Before we get started, we need to import the proper packages so we can test our code at the end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main
import (
  "fmt"
  "sort"
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Set up the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func isHandOfStraights(hand []int, k int) bool{
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Check if the number of cards in the hand is divisible by &lt;em&gt;k&lt;/em&gt;. If not, we can‚Äôt create groups, so return &lt;code&gt;false&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    if len(hand) % k != 0{
        return false
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Count the occurrences of each card in the given hand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    count := make(map[int]int)
    for _, i := range hand{
        count[i] = count[i] + 1
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Sort the list and start traversing it from the lowest-ranking card. We can use a hash map by storing card numbers as keys and occurrences as values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    sort.Ints(hand)
    i := 0
    n := len(hand)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Use a nested loop that runs &lt;em&gt;k&lt;/em&gt; times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        for i &amp;lt; n {
                current := hand[i]
                for j := 0; j &amp;lt; k; j++ {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5.1&lt;/strong&gt;: Check if the current card and the next &lt;em&gt;k-1&lt;/em&gt; cards (in increasing ranking) are in the &lt;code&gt;count&lt;/code&gt; map. If any of them don‚Äôt exist, return &lt;code&gt;false&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;            if _, ok := count[current + j]; !ok || count[current + j] == 0 {
                return false
            }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5.2&lt;/strong&gt;: When each of the required cards is found, decrease its number of occurrences in the &lt;code&gt;count&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;            count[current + j]--
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5.3&lt;/strong&gt;: After a complete group is found, use a while loop to find the next group‚Äôs smallest card and determine which of the next cards in &lt;code&gt;count&lt;/code&gt; has more than zero occurrences left.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        for i &amp;lt; n &amp;amp;&amp;amp; count[hand[i]] == 0{
            i++
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;: Return &lt;code&gt;true&lt;/code&gt; if all cards are sorted into groups.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   return true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let‚Äôs test our feature using two sample hands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main
import (
  "fmt"
  "sort"
)
func isHandOfStraights(hand []int, k int) bool{
    if len(hand) % k != 0{
        return false
    }

    count := make(map[int]int)
    for _, i := range hand{
        count[i] = count[i] + 1
    }

    sort.Ints(hand)
    i := 0
    n := len(hand)

    for i &amp;lt; n {
        current := hand[i]
        for j := 0; j &amp;lt; k; j++ {
            if _, ok := count[current + j]; !ok || count[current + j] == 0 {
                return false
            }
            count[current + j]--
        }
        for i &amp;lt; n &amp;amp;&amp;amp; count[hand[i]] == 0{
            i++
        }
    }
    return true
}

func main() {
    hand := []int{5,2,4,4,1,3,5,6,3}
    k := 3
    fmt.Println(isHandOfStraights(hand, k))

    hand2 := []int{1,9,3,5,7,4,2,9,11}
    k = 2
    fmt.Println(isHandOfStraights(hand2, k))
}

=&amp;gt; true
=&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-feature-2"&gt;
  &lt;/a&gt;
  Building feature 2
&lt;/h2&gt;

&lt;p&gt;For feature #2, we‚Äôre working on a custom card game called &lt;em&gt;Fizzle&lt;/em&gt;. In this game, the dealer shuffles the deck of cards, and then linearly spreads out all of the cards facing upwards. Then, the players take turns rolling a dice. The number rolled is &lt;em&gt;k&lt;/em&gt;. Players will then take turns to &lt;strong&gt;remove &lt;em&gt;k&lt;/em&gt; cards&lt;/strong&gt; from the deck, but they can only choose cards from the &lt;strong&gt;left or right side&lt;/strong&gt; of the cards. The goal is to pick out the cards with the maximum number of points. Each card has point values that correspond to its number, and the face cards: jack, queen, king, and ace, have 11, 12, 13, and 14 points respectively.&lt;/p&gt;

&lt;p&gt;We want to create a feature for &lt;em&gt;Fizzle&lt;/em&gt; players that analyzes the deck‚Äôs current state and the number the player rolled and &lt;strong&gt;determines the maximum score&lt;/strong&gt; that the player can get on that turn.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ihuloJrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bdu6lz0jubn5v8folil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ihuloJrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bdu6lz0jubn5v8folil.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, the player chose the cards &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;6&lt;/code&gt;, and &lt;code&gt;3&lt;/code&gt; to get the maximum amount of points possible. During implementation, we‚Äôll get a deck of cards in array form, like &lt;code&gt;{5, 3, 4, 4, 2, 3, 4, 6, 3}&lt;/code&gt;. The number we get after rolling the dice will be given as an integer. The module should return the maximum number of points as an integer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;To implement this feature, we need to test &lt;strong&gt;every possible combination&lt;/strong&gt; in which &lt;em&gt;k&lt;/em&gt; cards can be picked from the deck from the left or right side. We can‚Äôt pick the &lt;em&gt;n*th card from the right (or left), unless the (*n&lt;/em&gt; - 1)th card from the right (or left) is picked. If we pick &lt;em&gt;k&lt;/em&gt; - 1 cards from the right, then 1 card will be picked from the left side, and so on. We can find all possible combinations by &lt;strong&gt;assuming a sliding window&lt;/strong&gt; of &lt;em&gt;k&lt;/em&gt; size that wraps from right to left. The output will be the maximum sum found by trying all of the possible combinations.&lt;/p&gt;

&lt;p&gt;Let‚Äôs get started coding this feature! We‚Äôll break it down into steps. Before we get started, we need to import the proper packages so we can test our code at the end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main
import (
  "fmt"
  "math"
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Set up the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func maxPoints(deck []int, k int) int{
    left := 0;
    right := len(deck) - k
    var total, best int
    total = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Assume that &lt;em&gt;k&lt;/em&gt; cards on the right side give us the maximum points.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    for i := right; i &amp;lt; len(deck); i++ {
        total += deck[i]
    }
    best = total
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Use a loop that runs &lt;em&gt;k&lt;/em&gt; times and test all the combinations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    for i := 0; i &amp;lt; k; i++ {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Remove the points of the card on the right side and add the points on the left side.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        total += deck[left] - deck[right]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Compare the &lt;code&gt;total&lt;/code&gt; points with the current &lt;code&gt;best&lt;/code&gt; points and keep the maximum.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        best = int(math.Max(float64(best), float64(total)))
        left++
        right++
    }
    return best
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let‚Äôs test our feature using a sample deck.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main
import (
  "fmt"
  "math"
)
func maxPoints(deck []int, k int) int{
    left := 0;
    right := len(deck) - k
    var total, best int
    total = 0
    for i := right; i &amp;lt; len(deck); i++ {
        total += deck[i]
    }
    best = total
    for i := 0; i &amp;lt; k; i++ {
        total += deck[left] - deck[right]
        best = int(math.Max(float64(best), float64(total)))
        left++
        right++
    }
    return best
}

func main() {
    deck := []int{5,3,4,4,2,3,2,6,3}
    k := 4
    fmt.Println(maxPoints(deck, k))
}

=&amp;gt; 17
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-wrap-up-and-related-interview-questions"&gt;
  &lt;/a&gt;
  Project wrap up and related interview questions
&lt;/h2&gt;

&lt;p&gt;Congrats! You made it to the end of the project. Throughout this project, we learned how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build a feature that can identify a hand of straights by grouping cards in &lt;strong&gt;sequential order&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Use the &lt;strong&gt;sliding window technique&lt;/strong&gt; to build a feature to find cards with the maximum point values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problems that we solved today are also commonly asked interview questions at top tech companies. After our experience building the project, you now can identify problems with the same patterns and solve those problems using the techniques we implemented today. Let‚Äôs take a look at a couple of &lt;strong&gt;related interview questions&lt;/strong&gt; that we can solve using a similar approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Divide an array in sets of K consecutive numbers&lt;/li&gt;
&lt;li&gt;Find the maximum sum from either end of an array

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;Building a strong coding portfolio gets you hands-on practice with real-world software development problems. A strong portfolio is a great way to set yourself apart from the competition as a Go developer. We completed just one project today, but there are so many more real-world projects that you could work on to learn more about the software development world and help you better prepare yourself for your Go interview. Some more project ideas include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improving the user experience in finding content to watch on Netflix&lt;/li&gt;
&lt;li&gt;Implementing productivity-enhancing features for Google Calendar&lt;/li&gt;
&lt;li&gt;Optimizing customer-facing features on Amazon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get hands-on with these projects and more, check out Educative‚Äôs course &lt;a href="https://www.educative.io/courses/decode-the-coding-interview-go"&gt;&lt;strong&gt;Decode the Coding Interview in Go: Real-World Examples&lt;/strong&gt;&lt;/a&gt;. In this curated course, you‚Äôll prepare for your Go interview by tackling real-world problems faced by top tech companies. After each project, you‚Äôll learn about what kinds of interview questions are related to the project, so you‚Äôre even more prepared for your interview.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to prepare for more coding interviews, check out our &lt;strong&gt;Decode the Coding Interview&lt;/strong&gt; series. We have courses in the following languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/courses/decode-coding-interview-python"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/courses/decode-coding-interview-js"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/courses/decode-coding-interview-cpp"&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/courses/decode-coding-interview-java"&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/courses/decode-the-coding-interview-csharp"&gt;C#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-learning-about-coding-interview-projects"&gt;
  &lt;/a&gt;
  Continue learning about coding interview projects
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/react-instagram-tutorial"&gt;React tutorial: How to build the Instagram UI with React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/javascript-snake-game-tutorial"&gt;JavaScript snake game tutorial: Build a simple, interactive game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/how-to-develop-an-android-app"&gt;Android tutorial: How to develop an Android app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>programming</category>
      <category>beginners</category>
      <category>go</category>
    </item>
    <item>
      <title>5 tips for creating dysfunctional teams</title>
      <author>Jethro Larson</author>
      <pubDate>Thu, 09 Sep 2021 22:08:49 +0000</pubDate>
      <link>https://dev.to/jethrolarson/making-dysfunctional-teams-1lci</link>
      <guid>https://dev.to/jethrolarson/making-dysfunctional-teams-1lci</guid>
      <description>&lt;p&gt;There are so many blog articles showing how to make teams more effective but what if you need your team or organization to go belly-up or grind productivity to a halt? This guide will give you concrete strategies for making sure that success is a distant memory.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-find-the-weakest-links"&gt;
  &lt;/a&gt;
  1. Find the Weakest Links
&lt;/h1&gt;

&lt;p&gt;Whenever something goes wrong make sure that one individual receives a majority of the blame. That person should be one of the individual contributors. While it may seem more effective to blame a manager for the mistakes of their team as that could cause loss of faith in management, the effect of dragging a worker through the coals will be more widespread. Quickly workers will learn that mistakes aren't learning opportunities but career-destroying disasters that they must protect themselves from at all costs. Workers also learn that their managers don't have their back when mistakes happen no worry there.&lt;/p&gt;

&lt;p&gt;Within a couple sprints everyone will be covering their asses, and spending a lot of time making sure everyone knows how careful and productive they are. They'll also jump at the smallest provocation to disclaim responsibility for any minor infraction and will sabotage each other to avoid the Eye of Sauron.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-make-strong-commitments"&gt;
  &lt;/a&gt;
  2. Make Strong Commitments
&lt;/h1&gt;

&lt;p&gt;One of the best ways to harm a team long term is to develop a crunch-culture and the best way to do that is to make time-bound promises to stakeholders before work has even begun. Commit to public demos at industry conferences, set drop-dead dates that really mean something. Make plans that fully utilize all your available funding so that the only way that the team even partially succeeds is by everything going impossibly perfect or by working hellacious overtime.&lt;/p&gt;

&lt;p&gt;When the team starts getting progress back into green make sure to set "stretch goals" that affect management bonuses to keep that heat cranked.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-reward-the-heroes"&gt;
  &lt;/a&gt;
  3. Reward the Heroes
&lt;/h1&gt;

&lt;p&gt;This one is unintuitive but works really well. You may think that people that are super-smart and working crazy hours to bail the team out of near-miss disasters are your worst enemy, but remember that your goal is to prevent sustained engineering. Lavish praise and bonuses on these champions and everyone else will realize that success doesn't come from sustainable practices but from letting things fall apart and clawing a janky success from the jaws of defeat.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-make-the-data-work-for-you"&gt;
  &lt;/a&gt;
  4. Make the Data Work for You
&lt;/h1&gt;

&lt;p&gt;Even though data-driven decision-making is a hallmark of effective organizations, all you have to do to flip this around is massage the data a little. You'll find with very little effort that with careful analysis and omission you can justify any claim or project you want to. To pull this off however you need to horde your data and only give others the graphs that you curate. An alternative approach is cast doubt on any existing metrics you don't like. When your audience is confused that's the perfect place to insert your opinion. Then everyone in the room will fight over whose opinion is right and your job is done.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-make-the-workplace-competitive"&gt;
  &lt;/a&gt;
  5. Make the Workplace Competitive
&lt;/h1&gt;

&lt;p&gt;This approach is easy to defend as being based on Charles Darwin's natural selection. Take your workforce and separate it into as many small groups as you can, and make the org tree really deep. Then have have competition reign at every level. ICs should compete with each other for fixed bonuses and promotions. Managers should compete with each other for headcount and be paid relative to the number of people working for them so they're encouraged to scale their teams massively. Project managers have to fight for schedule time and development resources for every project. Make sure that everyone learns that the best way to succeed is to take the biggest slice of the pie.&lt;/p&gt;

</description>
      <category>management</category>
      <category>satire</category>
    </item>
    <item>
      <title>Fazendo ci√™ncia de dados com docker</title>
      <author>Edinei Cavalcanti</author>
      <pubDate>Thu, 09 Sep 2021 21:22:05 +0000</pubDate>
      <link>https://dev.to/edinei_dev/fazendo-ciencia-de-dados-com-docker-1l3i</link>
      <guid>https://dev.to/edinei_dev/fazendo-ciencia-de-dados-com-docker-1l3i</guid>
      <description>&lt;p&gt;Supondo que voc√™ j√° tenha &lt;a href="https://docs.docker.com/get-docker/"&gt;docker instalado e devidademente configurado seja Windows/Linux/Mac&lt;/a&gt;. Temos uma &lt;a href="https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html"&gt; documenta√ß√£o sobre as imagens do Jupyter&lt;/a&gt; se quiser uma outra configura√ß√£o vamos usar a &lt;code&gt;jupyter/datascience-notebook&lt;/code&gt; mas temos diversas outras.&lt;/p&gt;

&lt;p&gt;Usando o &lt;code&gt;docker run&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run --rm -p 10000:8888 -e JUPYTER_ENABLE_LAB=yes -v .\my-notebook:/home/jovyan/work jupyter/datascience-notebook
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fobdq6r4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yo48b43mkv8sis8ytgo6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fobdq6r4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yo48b43mkv8sis8ytgo6.png" alt="Veja que o token do jupyter ser√° exposto e ser√° usado a porta 8888 mas vamos usar 10000"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ficando no final &lt;a href="http://127.0.0.1:10000/?token=6f2fa7151f0fa43cd17af52a830bb76114e20e9b3cd31078"&gt;http://127.0.0.1:10000/?token=6f2fa7151f0fa43cd17af52a830bb76114e20e9b3cd31078&lt;/a&gt; ao acessar:&lt;/p&gt;

&lt;p&gt;Imagem do launcher do jupyter&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JevwLVww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdndhbqjt3wgv98w0ysz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JevwLVww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdndhbqjt3wgv98w0ysz.png" alt="Imagem do launcher do jupyter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos selecionar a pasta work&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_-iis-sG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jgpbrrkjgf8qvz0nj5j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_-iis-sG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jgpbrrkjgf8qvz0nj5j.png" alt="Vamos selecionar a pasta work"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E escolher Python 3 no Notebook&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QPhPWxsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ovbs4i5bib0ll2l9c42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QPhPWxsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ovbs4i5bib0ll2l9c42.png" alt="E escolher Python 3 no Notebook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Escrever &lt;code&gt;!python ‚Äî version&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y6EHoHWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h8jkexyesg3ahdapk64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y6EHoHWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h8jkexyesg3ahdapk64.png" alt="Escrever !python ‚Äî version"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos notar que o nosso arquivo Untitled.ipynb do jupyter foi para nosso host.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BFnI6Unx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szlhedvngezcqiu6hb7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BFnI6Unx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szlhedvngezcqiu6hb7h.png" alt="Vamos notar que o nosso arquivo Untitled.ipynb do jupyter foi para nosso host."&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>devops</category>
      <category>datascience</category>
    </item>
    <item>
      <title>September 9th, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Thu, 09 Sep 2021 21:20:37 +0000</pubDate>
      <link>https://dev.to/nickytonline/september-9th-2021-what-did-you-learn-this-week-184i</link>
      <guid>https://dev.to/nickytonline/september-9th-2021-what-did-you-learn-this-week-184i</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1xpm1nTQiRL96Di3Q6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1xpm1nTQiRL96Di3Q6/giphy.gif" alt="A picture it a dog waving their paw with the caption ‚ÄúLearning, cool at school or at home‚Äù"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Leveraging JS Proxies for the DOM</title>
      <author>Nathan Pham</author>
      <pubDate>Thu, 09 Sep 2021 21:06:03 +0000</pubDate>
      <link>https://dev.to/phamn23/leveraging-js-proxies-for-the-dom-3ppm</link>
      <guid>https://dev.to/phamn23/leveraging-js-proxies-for-the-dom-3ppm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;A recurring problem for many front-end developers is choosing what framework to use. Maybe your mind skipped to React, or the new star, Vue. Or maybe you're into Ember and Mithril. No one cares about Angular though. We all know it's a bloated relic living somewhere in the Great Pacific Garbage Patch.&lt;/p&gt;

&lt;p&gt;It's strange how we always skip over to &lt;code&gt;create-[framework]-app&lt;/code&gt; or another boilerplate template without noticing the extreme amounts of overhead. Relatively simple side or personal projects don't require a framework at all. Choosing the vanilla JS option is considerably more responsible (we're not killing the client's poor Nokia browser with our 10 GB library) and requires no extensive bundler configuration. The browser was built for JavaScript, so use JavaScript.&lt;/p&gt;

&lt;p&gt;Frameworks were created to boost productivity, modularize elements into reusable components, provide a novel way of manipulating data, ensure faster rendering through the virtual DOM, and supply a well supported developer toolset. We're missing out on a lot if we pick vanilla. Using native JS APIs is also an absolute nightmare. Who wants to write &lt;code&gt;document.querySelectorAll&lt;/code&gt; 50 times? &lt;/p&gt;

&lt;p&gt;Regardless, there isn't a need to re-invent the wheel. Although it may seem cool to have a functioning SPA, what you're really doing is writing another hundred lines of code or importing a heavy library with extensive polyfills just to rewrite the JS history API. It's not like the user cares if the url changed without refreshing the page. It's "smooth", but not if the page can't even load because of all of the crap you packed into it. Even Webpack can't save your file sizes now. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-elements"&gt;
  &lt;/a&gt;
  Creating Elements
&lt;/h2&gt;

&lt;p&gt;There are several ways to tackle vanilla JS's lack of maintainability and ease of use. You could use this simple function I described in an &lt;a href="https://dev.to/phamn23/making-a-very-simple-jquery-clone-49dj"&gt;earlier post on jQuery&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, querying elements is not the only tool we need as developers. Oftentimes, it's creating the elements that's the problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create a div element&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// create a paragraph element &amp;amp; fill it with "Hello World!"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// append nodes to div and then to the body element&lt;/span&gt;
&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vanilla JS gets really ugly. Really fast. Feeling the itch to go back to React yet?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proxies"&gt;
  &lt;/a&gt;
  Proxies
&lt;/h2&gt;

&lt;p&gt;Here's where the proxies come in. Proxies in JS allow you to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"&gt;"intercept and redefine fundamental operations for that object"&lt;/a&gt;. As a bonus, it's supported by all the major browsers. Obviously, now that IE is dead, we don't have to worry about it anymore. Kinda like Angular!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I highly recommend reading the first few paragraphs of the MDN docs I linked above.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can create proxies with the built-in &lt;code&gt;Proxy&lt;/code&gt; class. It takes two arguments: a target object and a handler function that indicates how the target should be manipulated. &lt;/p&gt;

&lt;p&gt;I like to think proxies are useful for "listening" to when a property in an object is accessed or changed. For example, you could extend arrays to support negative indexes, similar to Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allowNegativeIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;allowNegativeIndex&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dom-manipulation"&gt;
  &lt;/a&gt;
  DOM Manipulation
&lt;/h2&gt;

&lt;p&gt;I randomly stumbled upon this &lt;a href="https://twitter.com/mfandl/status/1421073961652310019"&gt;code snippet&lt;/a&gt; when I was scrolling through my Twitter feed. I can't explain how genius this is. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_JR7pVTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlsuc3aui1hueuzjlgtf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_JR7pVTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlsuc3aui1hueuzjlgtf.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Using a proxy to create elements! While this clearly applies to Hyperapp (a &lt;a href="https://github.com/jorgebucaran/hyperapp"&gt;"tiny framework for building hypertext applications"&lt;/a&gt;), there's no reason why this couldn't apply to vanilla JS. &lt;/p&gt;

&lt;p&gt;Imagine writing this instead of &lt;code&gt;document.createElement&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; 
    &lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is a paragraph&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="cm"&gt;/*
&amp;lt;div&amp;gt;
    &amp;lt;h1 id="test"&amp;gt;Hello World&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;This is a paragraph&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It doesn't require JSX or a fancy framework, and using functions based on the literal HTML5 tag actually makes a lot of sense. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;You can find a working demo on &lt;a href="https://codepen.io/nathan-pham/pen/qBjrYVw?editors=0110"&gt;Codepen&lt;/a&gt; and &lt;a href="https://testing-h.phamn23.repl.co/"&gt;Replit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First we need to have some logic to easily create elements. I'll call it &lt;code&gt;h&lt;/code&gt;. &lt;code&gt;h&lt;/code&gt; should accept three arguments: an HTML tag, a list of attributes/event listeners that should be applied to the element, and an array of children that should be appended to the element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// create the element&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// loop through the props&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// if the prop starts with "on" then add it is an event listener&lt;/span&gt;
    &lt;span class="c1"&gt;// otherwise just set the attribute&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;on&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// loop through the children&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// if the child is a string then add it as a text node&lt;/span&gt;
    &lt;span class="c1"&gt;// otherwise just add it as an element&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// return the element&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could use this function as-is and immediately see some  benefits.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; 
    &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is much more developer friendly, but we can still make it better with proxies. Let's create a proxy called &lt;code&gt;elements&lt;/code&gt;. Every time we access a property from &lt;code&gt;elements&lt;/code&gt;, we want to return our newly created &lt;code&gt;h&lt;/code&gt; function using the property as the default tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
      &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can write stuff that looks kinda like HTML directly in our vanilla JS. Looks amazing doesn't it?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt;
  &lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is a paragraph&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bruh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click me&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// this also works but destructuring is cleaner&lt;/span&gt;
&lt;span class="c1"&gt;// elements.h1({}, "")&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#state-management"&gt;
  &lt;/a&gt;
  State Management
&lt;/h2&gt;

&lt;p&gt;Proxies also have a &lt;code&gt;set&lt;/code&gt; method, meaning you can trigger an action (ie: a re-render) when a variable is changed. Sound familiar? I immediately thought of state management. In a brief attempt to marry proxies with web components, I went on to build a library called &lt;a href="https://github.com/nathan-pham/stateful-components"&gt;stateful components&lt;/a&gt;. It uses this concept of proxy-based state and "functional" elements to easily create web components. I haven't looked at it in a while, so if you're looking for something a little more fleshed out you should give &lt;a href="https://hyperapp.dev"&gt;Hyperapp&lt;/a&gt; a go. I know this article railed on frameworks a lot, but that doesn't mean I don't recognize their utility and purpose in a given context. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing"&gt;
  &lt;/a&gt;
  Closing
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed this short article. A lot of thanks to &lt;a href="https://twitter.com/mfandl"&gt;Matej Fandl&lt;/a&gt; for discovering this awesome hack, and I look forward to seeing what you build with proxies!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>proxy</category>
      <category>dom</category>
    </item>
    <item>
      <title>Light Bulb üí°: Machine learning made easy</title>
      <author>Mage</author>
      <pubDate>Thu, 09 Sep 2021 21:04:26 +0000</pubDate>
      <link>https://dev.to/mage_ai/light-bulb-machine-learning-made-easy-ink</link>
      <guid>https://dev.to/mage_ai/light-bulb-machine-learning-made-easy-ink</guid>
      <description>&lt;p&gt;Light Bulb is a tool to help you label, train, test and deploy machine learning models without any coding.&lt;/p&gt;

&lt;p&gt;Go directly to the Github project &lt;a href="https://github.com/czhu12/light_bulb"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let‚Äôs say you want to build a photo-sharing app called SnapCat, that only allows users to send pictures of cats, and nothing else.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tJ5fayQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6iz1lal99rcz63ylg91e.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tJ5fayQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6iz1lal99rcz63ylg91e.jpeg" alt='"Snapcat"'&gt;&lt;/a&gt;&lt;em&gt;Snapcat&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;How would you go about starting this? It‚Äôll probably looks something like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Collect a large set of cat and not cat photos.&lt;/li&gt;
&lt;li&gt;Manually label the posts as cat or not cat.&lt;/li&gt;
&lt;li&gt;Split the dataset into train, test, and validation sets.&lt;/li&gt;
&lt;li&gt;Train some model (lets say a convolutional neural network) on the dataset.&lt;/li&gt;
&lt;li&gt;Look at the accuracy on the test set, if it‚Äôs not good enough, then go back and rethink each step.&lt;/li&gt;
&lt;li&gt;Save the model weights, and load them into some web backend, to start classifying new posts.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let‚Äôs see how Light Bulb can help you with all of this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-light-bulb"&gt;
  &lt;/a&gt;
  Introducing: Light Bulb üí°
&lt;/h2&gt;

&lt;p&gt;Light Bulb is a service that will integrate this end to end, from labeling, all the way through to production. First define this config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# config/cat_not_cat.ymltask:
  title: Is this a cat?
dataset:
  directory: dataset/cat_not_cat/
  data_type: images
  judgements_file: outputs/cat_not_cat/labels.csv
label:
  type: classification
  classes:
    - Cat
    - Not Cat
model:
  directory: outputs/cat_not_cat/models/
user: chris
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then from the root of the app run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;make
make dataset/cat_not_cat
.virt/bin/python code/server.py --config config/cat_not_cat.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which will start a server on &lt;code&gt;http://localhost:5000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vo5POR5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcns4h4km112a2blqwum.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vo5POR5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcns4h4km112a2blqwum.png" alt="Start Labeling"&gt;&lt;/a&gt;&lt;em&gt;Start Labeling&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you label a few entries, you‚Äôll see the Training icon change from No to Yes. This means that a model is actively training on the newly labeled posts. As you label more posts, the model gets smarter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rzcFeuCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cztrrm1icvytbhjcoqul.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rzcFeuCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cztrrm1icvytbhjcoqul.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Light Bulb is getting smarter!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After labeling more images (and giving the model some time to train), you‚Äôll see an Accuracy statistic, that shows you how well the model is doing. In this case our model is getting about 87% accuracy, which is pretty amazing since we only labeled 78 images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1nAK0FPS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ib8mghcy1nt0oyynw2yg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1nAK0FPS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ib8mghcy1nt0oyynw2yg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#labeling-2000-images-in-15-minutes"&gt;
  &lt;/a&gt;
  Labeling 2000 images in 15 minutes
&lt;/h2&gt;

&lt;p&gt;Now that our model is trained, it‚Äôll start helping us label more data üò≤. Light Bulb will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go through the dataset, and labeling images that it feels fairly confident about (97% confident in fact).&lt;/li&gt;
&lt;li&gt;Store the labels the model assigns and present them to you in batches. All you have do is confirm the labels are correct.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Nd1Mf6a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyfemzqse8i2imi5b27s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Nd1Mf6a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyfemzqse8i2imi5b27s.gif" alt="Verifying the automatically labeled images"&gt;&lt;/a&gt;&lt;em&gt;Verifying the automatically labeled images&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;With this batch labeling feature, I managed to label all 2000 images in just 15 minutes.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#model-serving"&gt;
  &lt;/a&gt;
  Model Serving
&lt;/h2&gt;

&lt;p&gt;Light Bulb also exposes an API for your model. You can easily issue API requests to the server, and score new images. Let‚Äôs see what our model thinks about &lt;a href="https://github.com/czhu12/light-bulb/raw/master/docs/images/cat-image-1.jpg"&gt;this image&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQKziwD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xkm330zgwk2tpt21etr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQKziwD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xkm330zgwk2tpt21etr.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl --header "Content-Type: application/json" \
     --request POST \
     --data '{"type": "images","urls": ["https://github.com/czhu12/light-bulb/raw/master/docs/images/cat-image-1.jpg"]}' \ http://localhost:5000/score
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which returns:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "labels": [
    "Cat",
    "Not Cat"
  ],
  "scores": [
    [
      0.9971857666969299, # Our model thinks its 99% a cat!
      0.0028141846414655447
    ]
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now lets try something thats &lt;a href="https://raw.githubusercontent.com/czhu12/light-bulb/master/docs/images/not-cat-image-1.jpg"&gt;not a cat&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YYIjLCc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9tunno54ubwtmyvxgfy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YYIjLCc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9tunno54ubwtmyvxgfy.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl --header "Content-Type: application/json" \
     --request POST \
     --data '{"type": "images","urls": ["https://raw.githubusercontent.com/czhu12/light-bulb/master/docs/images/not-cat-image-1.jpg"]}' \ http://localhost:5000/score
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our model returns:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "labels": [
    "Cat",
    "Not Cat"
  ],
  "scores": [
    [
      0.007293896283954382,
      0.9927061200141907 # Our model thinks this is 99.2% not a cat!
    ]
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Encoder-Decoder&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Most deep learning tasks can be framed as an encoder ‚Äî decoder architecture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#images"&gt;
  &lt;/a&gt;
  Images
&lt;/h2&gt;

&lt;p&gt;For all image tasks we use a &lt;a href="https://arxiv.org/abs/1602.07360"&gt;Squeeze Net&lt;/a&gt; encoder pre-trained on &lt;a href="http://www.image-net.org/"&gt;Image Net&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Image Classification: Image classification is done with a CNN based encoder, that is fed into a multi-layer perceptron decoder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8bWbRlra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sd8y3r0tzxgwm1zks0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8bWbRlra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sd8y3r0tzxgwm1zks0i.png" alt="Image Classification"&gt;&lt;/a&gt;&lt;em&gt;Image Classification&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Object Detection (work in progress): Object detection can be framed as a CNN based encoder, that is fed into a regression decoder. For object detection, the decoder will be a pre-trained &lt;a href="https://arxiv.org/abs/1804.02767"&gt;YOLOv3&lt;/a&gt; head.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cgyg-WRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cicicinrnkvwz3u4uflc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cgyg-WRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cicicinrnkvwz3u4uflc.jpeg" alt="Object detection example"&gt;&lt;/a&gt;&lt;em&gt;Object detection example&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#text"&gt;
  &lt;/a&gt;
  Text
&lt;/h2&gt;

&lt;p&gt;For all text tasks, we use a 3 layer LSTM encoder pre-trained as a language model on Wikitext-103.&lt;br&gt;
Text Classification: Text classification can be framed as an LSTM encoder that outputs into a logistic regression decoder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--15vWoPR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iw9lfs9vra6v9ykprp4y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--15vWoPR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iw9lfs9vra6v9ykprp4y.png" alt="Sentiment classification is a classic text classification problem"&gt;&lt;/a&gt;&lt;em&gt;Sentiment classification is a classic text classification problem&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sequence Tagging (work in progress): Sequence tagging can be framed as an LSTM encoder, where at each time-step, the output is fed into a CRF model.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BiqIOzM4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgxjqynnqaf5vvlqq3tz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BiqIOzM4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgxjqynnqaf5vvlqq3tz.png" alt="Named entity recognition is a sequence tagging problem."&gt;&lt;/a&gt;&lt;em&gt;Named entity recognition is a sequence tagging problem.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#secret-sauce"&gt;
  &lt;/a&gt;
  Secret Sauce
&lt;/h2&gt;

&lt;p&gt;Light Bulb uses a few tricks to train a model as fast as efficiently as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#active-learning"&gt;
  &lt;/a&gt;
  Active Learning
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--482iKkMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yirkpslhk733lg75en53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--482iKkMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yirkpslhk733lg75en53.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When Light Bulb decides which post to show you to label next, it chooses based on a process known as maximum entropy sampling. Before Light Bulb shows you an image to label, it‚Äôll first try to make a prediction. Let's say one image was scored as 95% cat, 5% not cat, and another image was scored as 50% cat, 50% not cat. Which one should Light Bulb show you next? Intuitively, the second image should be labelled next, since that seems to be the one the model isn‚Äôt quite sure about. This way, we don‚Äôt waste any of your labels!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pretraining"&gt;
  &lt;/a&gt;
  Pre-training
&lt;/h2&gt;

&lt;p&gt;Light Bulb will leverage state of the art semi supervised learning, and pre-training. One of the reasons why deep learning is so powerful, is because of its unique ability to transfer knowledge from one task to another (see: &lt;a href="https://blog.acolyer.org/2016/04/21/the-amazing-power-of-word-vectors/"&gt;word vectors&lt;/a&gt;, &lt;a href="https://machinelearningmastery.com/transfer-learning-for-deep-learning/"&gt;transfer learning&lt;/a&gt;). For instance, a model that is good at predicting the next word in a sentence, ie: a language model, will also be good at classifying the sentiment of the sentence. Likewise, a model that is good at the &lt;a href="https://en.wikipedia.org/wiki/ImageNet"&gt;ImageNet dataset&lt;/a&gt;, will also be good at predicting cat vs not cat, with small tweaks of course.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#semi-supervised-learning"&gt;
  &lt;/a&gt;
  Semi Supervised Learning
&lt;/h2&gt;

&lt;p&gt;Light Bulb also leverages semi supervised learning techniques to learn as much as possible from the dataset you provide. In the cat vs not cat dataset above, there were around 2000 images, but we only labeled about 80 of them. But that doesn‚Äôt mean that we can‚Äôt learn from the other 1920 images! Light Bulb uses all the images in the dataset, even if you haven‚Äôt labeled them, to train the model, by fine-tuning an auto-encoder, which will essentially learn the general properties of all the 2000 images.&lt;/p&gt;

&lt;p&gt;For full details check out the &lt;a href="https://github.com/czhu12/light-bulb"&gt;Github project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Any questions, suggestions, bugs, or just want to reach out, PM me on &lt;a href="https://twitter.com/chriszhu12"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Happy Labeling!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Probability vs Likelihood</title>
      <author>Sameer Soin</author>
      <pubDate>Thu, 09 Sep 2021 20:53:51 +0000</pubDate>
      <link>https://dev.to/sameersoin/probability-vs-likelihood-5609</link>
      <guid>https://dev.to/sameersoin/probability-vs-likelihood-5609</guid>
      <description>&lt;p&gt;When I first came across the term &lt;strong&gt;'Likelihood&lt;/strong&gt;' in the same sentence having the word &lt;strong&gt;'Probability'&lt;/strong&gt;, I was very confused and could not make any sense of that statement! This actually happened while I was learning about &lt;strong&gt;maximum likelihood estimation&lt;/strong&gt; for &lt;strong&gt;logistic regression&lt;/strong&gt;. The reason for this confusion was my common day understanding that the likelihood of something refers to the probability of something and the often incorrect use of these terms interchangeably. I then started digging more in order to make any sense of that statement. And therefore, in this blog, I have tried to explain the difference between likelihood and probability. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-probability"&gt;
  &lt;/a&gt;
  Understanding Probability
&lt;/h2&gt;

&lt;p&gt;The common understanding of &lt;strong&gt;Probability&lt;/strong&gt; of an event is that it is the ratio of the favorable outcomes of the event to the total possible outcomes for the concerned experiment. (in the example of housing prices of a housing dataset, the &lt;em&gt;event&lt;/em&gt; refers to getting a house having the price less than x, and the &lt;em&gt;experiment&lt;/em&gt; refers to the random picking of a house from a sample).  &lt;/p&gt;

&lt;p&gt;Let's take a little deeper look at the above definition. The above definition of probability is defined over some underlying assumptions on the experiment, or the process of that experiment (like all houses are equally likely to be picked, all neighborhoods' houses are equally likely to be picked, etc.) that are known as the parameters of that experiment, \(\theta\).&lt;/p&gt;

&lt;p&gt;When the parameters \(\theta\) of the experiment are fixed, it gives a specific probability density function or probability distribution (in the case of discrete variables) for the outcomes of an event. Given the probability density function, the probability of an event can be easily computed by finding the area under the curve for the concerned event as shown in the below image for house prices more than x.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GN8Vosm4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i00lcrw46knbbqv9grzq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GN8Vosm4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i00lcrw46knbbqv9grzq.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means that if a house is picked, the probability of its price being more than x is given by the area of the shaded region in the above image.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mathematical-representation"&gt;
  &lt;/a&gt;
  Mathematical representation
&lt;/h3&gt;

&lt;p&gt;Given the parameters \(\theta\), the probability of an event is formally represented as:&lt;br&gt;&lt;br&gt;
P(price &amp;gt; x | mean = y and variance = z).&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Note: For the purpose of this example, I have assumed the houses price as a normal distribution with some mean and variance. The concept is valid for all distributions. &lt;br&gt;
The mean and variance are the characteristics of the PDF (and define its position and shape respectively) and hence are written on the right-hand side of the 'pipe' symbol in the formal representation. *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since the parameters \(\theta\) define the PDF, and changing the parameters can change the PDF, it can also be wirtten as:&lt;br&gt;&lt;br&gt;
P(price &amp;gt; x | \(\theta\)) or P(data | \(\theta\))&lt;/p&gt;

&lt;p&gt;This implies that given the fixed process parameters, the probability of an event or a value will change on changing the event. For example, P(price &amp;gt; 100k | \(\theta\)) will be different from P(price &amp;gt; 80k | \(\theta\)).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-likelihood"&gt;
  &lt;/a&gt;
  Understanding Likelihood
&lt;/h2&gt;

&lt;p&gt;Often when trying to model a real-world process, the parameters \(\theta\) are unknown. We observe the outcomes O and try to estimate the parameters \(\theta\) that are a plausible choice for the given observed outcomes O. This implies that given the observed outcomes O, we try to estimate the PDF or the probability distribution that best explains the observed outcomes O.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c_PpU_Q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630625290441/lDhGNkpct.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c_PpU_Q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630625290441/lDhGNkpct.jpeg" alt="WhatsApp Image 2021-09-03 at 04.57.03.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above image, as we keep changing the model parameters \(\theta\), we get different PDFs that give different values on the y-axis for the given data point x. These different values are known as the likelihood of the distribution. &lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Therefore, Likelihood is the plausability of a particular distribution explaining the given data. The higher the likelihood of a distribution, the more likely it is to explain the observed data.&lt;br&gt;
*&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the housing price example given above to explain the probability, suppose we change the model or process parameters \(\theta\) (model parameters refer to some set of values that define the house picking process like, all the neighborhoods are not equally likely to be picked and the picking process has some inherent bias for one neighborhood over another, etc.) it will change the PDFs of the house prices and thus the likelihood of the distribution for the given data will change with the model parameters \(\theta\). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mathematical-representation"&gt;
  &lt;/a&gt;
  Mathematical representation
&lt;/h3&gt;

&lt;p&gt;Mathematically likelihood for a given data is represented as:&lt;br&gt;&lt;br&gt;
L(\(\theta\) | data)&lt;br&gt;&lt;br&gt;
This implies that the model parameters are changed and the observed data is kept fixed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Probability is how likely are the chances of a certain data to occur if the model parameters are fixed and Likelihood is the chances of a particular model parameter explaining the given observed data.&lt;/p&gt;

&lt;p&gt;The mathematical representation of Probability and Likelihood have reverse order of occurrence for the observed data and the model parameters. In probability, the \(\theta\) appears on the right-hand side and is kept fixed while the data is varied, and in likelihood, the observed data appears on the right-hand side and is kept fixed while the model parameters \(\theta\) are varied.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: The same concept is valid for continuous variables as well as random variables.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope this blog would have helped you in understanding the crucial difference between probability and likelihood in the statistics world. If you have any doubts, or suggestions regarding the writing or the explanation of the concept, please let me know in the comments.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>statistics</category>
      <category>probability</category>
    </item>
    <item>
      <title>Become A Better Developer Today: Quick Wins</title>
      <author>Simon Barker</author>
      <pubDate>Thu, 09 Sep 2021 20:01:53 +0000</pubDate>
      <link>https://dev.to/allthecode/become-a-better-developer-today-quick-wins-4ll8</link>
      <guid>https://dev.to/allthecode/become-a-better-developer-today-quick-wins-4ll8</guid>
      <description>&lt;p&gt;Here are some common mistakes you might be making daily that are slowing you down, holding you back and building tech debt.&lt;/p&gt;

&lt;p&gt;üß™ &lt;strong&gt;Not writing tests&lt;/strong&gt;. Get used to writing these sooner rather than later. You don‚Äôt need to go full Test Driven Development (TDD) but at least be comfortable. I should have started earlier!&lt;/p&gt;

&lt;p&gt;üìÑ &lt;strong&gt;Not documenting code&lt;/strong&gt;. Coming back to old code is a nightmare without good docs, I can‚Äôt remember how code I wrote last week works so after 1 year I have no chance.&lt;/p&gt;

&lt;p&gt;üß∞ &lt;strong&gt;Not breaking out common code into a reusable library&lt;/strong&gt;. Reusable code is your toolbox, it saves you time, effort and complexity. Start building your personal toolbox or your teams toolbox now.&lt;/p&gt;

&lt;p&gt;üç± &lt;strong&gt;Forgetting to split projects into smaller modules&lt;/strong&gt;. Good organisation is the best way to keep a codebase sensible and manageable, it doesn‚Äôt come for free though so you have to work at it.&lt;/p&gt;

&lt;p&gt;üèõ &lt;strong&gt;Not using external libraries&lt;/strong&gt;. Build on other peoples code and don‚Äôt write everything from scratch, this lets you move faster, benefit from others work and you can focus on your core business logic.&lt;/p&gt;

&lt;p&gt;üíÖ &lt;strong&gt;Not using an auto code formatter&lt;/strong&gt;. Worrying about how to format and layout your code should be the last thing on your mind, get used to auto format on save and you will love it!&lt;/p&gt;

&lt;p&gt;ü§ñ &lt;strong&gt;Not automating&lt;/strong&gt;. There is a knack in knowing when to automate, too early in a process and you risk automating the wrong thing and having to change it, too late and you'll have an overly complex process to automate that will take weeks to sort out. If you've done the same thing 3 times in a short period of time (measured in weeks) then it's time to automate it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;None of these on their own will derail a software project but all of them can add friction to the development process and slow you down. Pick one and implement it in your current project today.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#one-more-win"&gt;
  &lt;/a&gt;
  One more win
&lt;/h3&gt;

&lt;p&gt;Head over to &lt;a href="https://careerswitchtocoding.com/"&gt;Career Switch To Coding&lt;/a&gt; and join my mailing list for regular tips and a free chapter of my book üòÄ &lt;/p&gt;

</description>
      <category>career</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
