<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Day 0: Joined dev.to!</title>
      <author>Nandan Wewhare</author>
      <pubDate>Sat, 22 Jan 2022 08:52:43 +0000</pubDate>
      <link>https://dev.to/nandanwewhare/day-0-joined-devto-16md</link>
      <guid>https://dev.to/nandanwewhare/day-0-joined-devto-16md</guid>
      <description>&lt;p&gt;Joined dev.to, aiming to write posts everyday here. The posts will be quite informal and maybe I'll try and use dev.to as a daily blog.&lt;/p&gt;

&lt;p&gt;Working on a full stack project, will update more on this in the coming posts. Technically haven't written a single line of code for this but design and stack is ready.&lt;/p&gt;

&lt;p&gt;Feeling a bit down on health side, let's see when I open the IDE üòú.&lt;/p&gt;

&lt;p&gt;Here's to beginnings üç∫&lt;/p&gt;

</description>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 5 Websites To Find Great Illustrations</title>
      <author>Sachin Chaurasiya</author>
      <pubDate>Sat, 22 Jan 2022 08:13:15 +0000</pubDate>
      <link>https://dev.to/sachinchaurasiya/top-5-websites-to-find-great-illustrations-1kal</link>
      <guid>https://dev.to/sachinchaurasiya/top-5-websites-to-find-great-illustrations-1kal</guid>
      <description>&lt;p&gt;When we work with website designing and development we might need to add some illustrations to give some visuals so that users can visualize what we are designing and developing.&lt;/p&gt;

&lt;p&gt;To add illustrations we need to find or create one that matches our requirements. creating illustrations from scratch is time-consuming and takes a lot of effort, so instead of creating our own illustrations, we can get them from illustrations websites that are available for free plus (we can buy paid ones if required).&lt;/p&gt;

&lt;p&gt;In this article, I'm going to share the top 5 illustrations website where you can find different kinds of great illustrations for your next project.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storyset"&gt;
  &lt;/a&gt;
  Storyset
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M3bNdyOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642762568143/AuUYcwFZL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M3bNdyOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642762568143/AuUYcwFZL.png" alt="image.png" width="880" height="596"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Storyset is a cool collection of illustrations to power up your next project. there are 5 different styles available in Storyset. you can choose one and customize it as you want then export it as SVG or PNG.&lt;br&gt;
You can also apply the animation and export the animation in HTML, GIF or MP4 video formats.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-for-storyset"&gt;
  &lt;/a&gt;
  &lt;a href="https://storyset.com/"&gt;Link for storyset&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;## Open Doodles&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d3XDqyaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642762683841/NxN3ICuPr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d3XDqyaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642762683841/NxN3ICuPr.png" alt="image.png" width="880" height="596"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open Doodle is an open-source collection of free illustrations. it allows you to download illustrations in &lt;br&gt;
 SVG and PNG format.&lt;/p&gt;

&lt;p&gt;It also provides you with the &lt;a href="https://generator.opendoodles.com/"&gt;generator&lt;/a&gt; to generate doodles &lt;br&gt;
 using an existing theme or by creating your own theme.&lt;/p&gt;

&lt;p&gt;### &lt;a href="https://www.opendoodles.com/"&gt;Link for open doodles&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#themeisle"&gt;
  &lt;/a&gt;
  Themeisle
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C_vSH4oI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642762738674/otvK9iO1_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C_vSH4oI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642762738674/otvK9iO1_.png" alt="image.png" width="880" height="596"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Themeisle is a great website to get high-quality, free and delightful illustrations to use in your next project.&lt;br&gt;
You have to just specify your brand colour and then it will create all the illustrations with your brand colour.&lt;br&gt;
The best thing about themeisle is it allows you to download all the illustrations in one go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-for-theme-isle"&gt;
  &lt;/a&gt;
  &lt;a href="https://themeisle.com/illustrations/"&gt;Link for theme isle&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#humaaans"&gt;
  &lt;/a&gt;
  Humaaans
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9tXiqIx4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642762832497/23qh7niDF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9tXiqIx4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642762832497/23qh7niDF.png" alt="image.png" width="880" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Humaaans is a great website to get illustrations of people with a design library. You can edit all the illustrations using blush editor.&lt;br&gt;
You can customize their positions, clothing, colours, and hairstyle to create some cool scenes. You can add backgrounds and use the power of libraries to make it your own.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-for-humaaans"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.humaaans.com//"&gt;Link for humaaans&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#drawkit"&gt;
  &lt;/a&gt;
  Drawkit
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rkaZAXAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642763037711/vMvWr_kOy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rkaZAXAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642763037711/vMvWr_kOy.png" alt="image.png" width="880" height="596"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Drawkit comes with various types of illustrations like &lt;strong&gt;Health &amp;amp; Medical Illustrations&lt;/strong&gt;, &lt;strong&gt;Digital marketing Illustrations&lt;/strong&gt;, &lt;strong&gt;Marketing and ads Illustrations&lt;/strong&gt; and etc.&lt;br&gt;
Drawkit has both free and premium illustrations. it also has a collection of icons to use in your next project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-for-drawkit"&gt;
  &lt;/a&gt;
  &lt;a href="https://drawkit.com/"&gt;Link for drawkit&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#undraw"&gt;
  &lt;/a&gt;
  UnDraw
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3PfFM9K_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642763080428/plZ9ODIWB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3PfFM9K_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642763080428/plZ9ODIWB.png" alt="image.png" width="880" height="596"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;UnDraw is an OpenSource illustration project with beautiful SVG images that you can use completely free and without attribution.&lt;br&gt;
You can create your own illustration and contribute to the UnDraw project. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-for-undraw"&gt;
  &lt;/a&gt;
  &lt;a href="https://undraw.co/illustrations/"&gt;Link for undraw&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;To summarize we talked about the top 5 illustration websites, some of them are open source and some of them are freemium.&lt;br&gt;
I use unDraw and Humaaans very often for my projects. let me know which one do you use and if it's not mentioned here then please add comments so that people get to know those websites as well.&lt;/p&gt;

&lt;p&gt;And that‚Äôs it for this topic. Thank you for reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/sachin-chaurasiya"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://twitter.com/sachindotcom"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/sachin87"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y61HrVIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-blue.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Make Your First Contribution To Open Source</title>
      <author>Susmita Dey</author>
      <pubDate>Sat, 22 Jan 2022 07:44:05 +0000</pubDate>
      <link>https://dev.to/susmitadey/make-your-first-contribution-to-open-source-ono</link>
      <guid>https://dev.to/susmitadey/make-your-first-contribution-to-open-source-ono</guid>
      <description>&lt;h2&gt;
  &lt;a href="#open-source-is-something-awesome-it-will-make-you-fall-in-love-with-it"&gt;
  &lt;/a&gt;
  Open Source is something awesome. It will make you fall in love with it.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#read-the-following-steps-to-know-more"&gt;
  &lt;/a&gt;
  Read the following steps to know more:-
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It increases your level of confidence and helps you to connect with people from various countries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It makes you to learn how to contribute on any project and collaborate together.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It increases your communication skills.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It can also give you a remote job and connect with your clients if you're freelancing as your side hustle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Open Source is not just about code&lt;/strong&gt;; it's more than  connecting and collaborating with people and working on a project (maybe it's small or big doesn't matter) together; creating issues and pull requests, documenting the README file, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Conclusion:-&lt;/strong&gt;&lt;br&gt;
So, I would suggest you to remove your fear and start contributing to Open source repositories on GitHub. &lt;br&gt;
I started my Open Source journey by the inspiration of &lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/eddiejaoude"&gt;@eddiejaoude&lt;/a&gt; and joined his amazing #EddieHub Community on GitHub and did my first contribution there.&lt;/p&gt;

&lt;p&gt;üí°&lt;strong&gt;Important One:-&lt;/strong&gt;&lt;br&gt;
This is my &lt;a href="https://github.com/Susmita-Dey"&gt;GitHub profile link&lt;/a&gt;&lt;br&gt;
Do check it out and feel free to contribute to any of my repositories. Start doing your first contribution on GitHub today. &lt;br&gt;
Also, feel free to &lt;a href="https://twitter.com/its_SusmitaDey"&gt;connect with me&lt;/a&gt; üòä&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>opensource</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>CSS Pseudo-classes: Links</title>
      <author>Chris Bongers</author>
      <pubDate>Sat, 22 Jan 2022 07:14:17 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/css-pseudo-classes-links-bm5</link>
      <guid>https://dev.to/dailydevtips1/css-pseudo-classes-links-bm5</guid>
      <description>&lt;p&gt;We already had a look at &lt;a href="https://daily-dev-tips.com/posts/css-pseudo-elements/"&gt;CSS pseudo-elements&lt;/a&gt;, and even how to use &lt;a href="https://daily-dev-tips.com/posts/tailwind-css-pseudo-elements/"&gt;pseudo-elemtns in Tailwind CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But then I realized I've never talked about pseudo-classes, and they are pretty substantial as we use them all the time in web development.&lt;/p&gt;

&lt;p&gt;So this article is dedicated to pseudo-classes.&lt;/p&gt;

&lt;p&gt;Pseudo-classes can be used to style based on a certain state of an element.&lt;br&gt;
States could be that the user hovers an element or is an element is invalid.&lt;/p&gt;

&lt;p&gt;I've split this up into a series of four, where this is the first part about link pseudo-states.&lt;/p&gt;

&lt;p&gt;The other parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Link pseudo-states&lt;/em&gt; (this one üíñ)&lt;/li&gt;
&lt;li&gt;Form pseudo states (coming soon)&lt;/li&gt;
&lt;li&gt;Element state selectors (coming soon)&lt;/li&gt;
&lt;li&gt;Other pseudo states (coming soon)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#link-pseudostates"&gt;
  &lt;/a&gt;
  Link pseudo-states
&lt;/h2&gt;

&lt;p&gt;One of the more common use-cases is to apply styling to link elements.&lt;/p&gt;

&lt;p&gt;The options we get here are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:link&lt;/code&gt;: Unvisited links&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:visited&lt;/code&gt;: Visited links&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:active&lt;/code&gt;: Currently interacting with it, like a click&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:hover&lt;/code&gt;: Mouse hover over it&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:target&lt;/code&gt;: When a user clicks an anchor target like &lt;code&gt;#section-1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:focus&lt;/code&gt;: Tabbed to this element, or input has the focus&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:focus-within&lt;/code&gt;: If a child element has the focus&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:focus-visible&lt;/code&gt;: Can be used to apply focus styles on keyboard events only&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#-raw-link-endraw-amp-raw-visited-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:link&lt;/code&gt; &amp;amp; &lt;code&gt;:visited&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;:link&lt;/code&gt; selector can be applied to indicate which pages have already been visited by the user.&lt;/p&gt;

&lt;p&gt;It's often used to make a link appear less bright, so the user knows he already visited that page.&lt;/p&gt;

&lt;p&gt;In the following example, I've made the default links blue, and once you visit them, they turn gray.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:visited&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;darkGray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: Try visiting some links and come back to this page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/bGoQXoo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-active-endraw-amp-raw-hover-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:active&lt;/code&gt; &amp;amp; &lt;code&gt;:hover&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;These two can be used to indicate user interactions with a link.&lt;br&gt;
Hover is when we hover our mouse over an element and are active when clicking on it.&lt;/p&gt;

&lt;p&gt;In your CSS, it's good to know that the active state should always come &lt;strong&gt;after&lt;/strong&gt; the hover state.&lt;br&gt;
Else the hover will take priority of it.&lt;/p&gt;

&lt;p&gt;In this example, we'll make the hover links have a purple background and white text, and once we click, they turn red.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try it out in this example.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/oNGQKpX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-target-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;target&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This one is super cool and often overlooked.&lt;br&gt;
It can be used to indicate which element is clicked on and navigated to.&lt;/p&gt;

&lt;p&gt;This works for one-pages that link to a specific section with something like the following setup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"section-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Hi I'm section one
  &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#section-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Go to section two&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"section-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;And I'm the second section&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you click this button, you will navigate to the second section.&lt;/p&gt;

&lt;p&gt;As for the magic part ü™Ñ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#section-2&lt;/span&gt;&lt;span class="nd"&gt;:target&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try to scroll to the second section manually first. It should just show a white section.&lt;br&gt;
If you scroll back up and click the button, it should move there and make it pink.&lt;/p&gt;

&lt;p&gt;Pretty cool stuff, right!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/dyVQxmG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-focus-endraw-raw-focuswithin-endraw-amp-raw-focusvisible-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:focus&lt;/code&gt;, &lt;code&gt;:focus-within&lt;/code&gt;, &amp;amp; &lt;code&gt;:focus-visible&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Let's try and spread these out a bit. The first one is &lt;code&gt;:focus&lt;/code&gt;. It can be used to indicate if an element received focus. Generally, this would work well for input fields, but you can use it for &lt;code&gt;buttons&lt;/code&gt;, which will be our vibe today.&lt;/p&gt;

&lt;p&gt;For the default focus state, we can use the following CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;dashed&lt;/span&gt; &lt;span class="no"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline-offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: Try to click on the "Focus button" in the CodePen below. You can also tab to it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As for &lt;code&gt;:focus-within&lt;/code&gt;, this is an excellent pseudo-class to use, and I even dedicated a whole article to why &lt;a href="https://daily-dev-tips.com/posts/why-css-focus-within-is-amazing/"&gt;focus-within is amazing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's try out a small example with another button that could show a helper text on focus.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"focus-wrap"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Focus within&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"helper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we can then add the following CSS to make this helper only show if the button has focus.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.helper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:focus-within&lt;/span&gt; &lt;span class="nc"&gt;.helper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: You can try this by focusing on the "Focus within" button below.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The last one is &lt;code&gt;focus-visible&lt;/code&gt;, and it can be used to target only keyboard events.&lt;/p&gt;

&lt;p&gt;We want to show a state on click but appear different on the keyboard tab.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nc"&gt;.visible&lt;/span&gt;&lt;span class="nd"&gt;:focus-visible&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try and click on this button. You should see the dashed border, but it should show a solid border once you use the tab navigation.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/BawGXPm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Run CI Tests with GitHub Actions ‚öôÔ∏è</title>
      <author>Pierre-Henry Soria ‚ú®</author>
      <pubDate>Sat, 22 Jan 2022 06:48:47 +0000</pubDate>
      <link>https://dev.to/pierre/create-ci-unit-tests-github-actions-52p3</link>
      <guid>https://dev.to/pierre/create-ci-unit-tests-github-actions-52p3</guid>
      <description>&lt;p&gt;Thanks to &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;, we can now setup workflows for our git repository very easily without any configuration from the GitHub platform. Indeed, we just need to create a specific .yml file in &lt;code&gt;.github/workflows&lt;/code&gt; folder of your repository.&lt;/p&gt;

&lt;p&gt;Having a CI running on every "git pull" (or scheduled with a cron setting in the GitHub Action) increases the quality for each pull request made against your project. You can run performance (PHPStan), code analysis tools (eslint/prettier),  formatting scripts (PHP CS/CodeSniffer), unit tests, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-your-1st-github-action"&gt;
  &lt;/a&gt;
  Create your 1st GitHub Action üéâ
&lt;/h2&gt;

&lt;p&gt;In this article, we will create a GitHub action that runs the unit tests of your application. However, you can literally create any kind of GitHub actions for the workflow of your repository üòÉ &lt;/p&gt;

&lt;p&gt;First, go to your GitHub repository, and then create a &lt;code&gt;.github/workflows&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;workflows&lt;/code&gt; folder, create a file called &lt;code&gt;test.yml&lt;/code&gt; or &lt;code&gt;ci.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside of it, you will start with the name of the CI Action (as it will be shown in the GitHub Actions tab). &lt;/p&gt;

&lt;p&gt;In our cast, let's do &lt;code&gt;name: Tests&lt;/code&gt; üôÇ&lt;/p&gt;

&lt;p&gt;Then, you can mention on what event you would like GitHub to listen thanks to &lt;code&gt;on:&lt;/code&gt;. I usually mention &lt;code&gt;on: [push,pull_request]&lt;/code&gt;. That way, it will run on every &lt;code&gt;git push&lt;/code&gt; and pull request.&lt;/p&gt;

&lt;p&gt;Then, we can start declaring the jobs of our GitHub Action, &lt;code&gt;jobs: run:&lt;/code&gt; where we mention each action we want to job to execute for us.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;runs-on&lt;/code&gt; is on what OS you would like your job to be executed on.  In my case, it will just be Linux and Windows, so I can mention &lt;code&gt;runs-on: [ 'ubuntu-latest', 'windows-latest' ]&lt;/code&gt;. &lt;code&gt;-latest&lt;/code&gt; suffix means it will use the latest OS available.&lt;/p&gt;

&lt;p&gt;So, so far, we have this üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Tests&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ubuntu-latest'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;windows-latest'&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;php-versions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;7.3'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;7.4'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;8.0'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;8.1'&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PHP ${{ matrix.php-versions }} Test on ${{ matrix.os }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can mention the steps for our GitHub Action's jobs. They are the steps of action to be executed each time our GitHub Workflow needs to be ran.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup PHP&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;shivammathur/setup-php@v2&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;php-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.php-versions }}&lt;/span&gt;
    &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mbstring&lt;/span&gt;
    &lt;span class="na"&gt;coverage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;
    &lt;span class="na"&gt;tools&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;phpunit:${{ matrix.phpunit-version }}, composer:v2&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check PHP Version&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;php -v&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check Composer Version&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer -V&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Validate composer.json &amp;amp; composer.lock&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer validate --strict&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install PHP dependencies&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer install --no-interaction --no-progress --no-suggest&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run Test Suite&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;php vendor/bin/phpunit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The few job steps such as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check PHP Version&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;php -v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check Composer Version&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer -V&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;are just there to give you further information about the version running on your CI in case you need to investigate on an issue coming from your GitHub Action.&lt;/p&gt;




&lt;p&gt;And the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Validate composer.json &amp;amp; composer.lock&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer validate --strict&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is used to validate the &lt;code&gt;composer.json&lt;/code&gt; file before installing the dependencies.&lt;/p&gt;

&lt;p&gt;Finally, the last step will execute the unit tests&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run Test Suite&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;php vendor/bin/phpunit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Once you are all done with the configuration of your CI file, GitHub will automatically run your new workflow action you just added. &lt;/p&gt;

&lt;p&gt;On new commit pushed or pull requests (depending on what event your configuration (&lt;code&gt;on: [push,pull_request]&lt;/code&gt;), GitHub will show the status of each CI run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eaxtEkLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38k4p3nvpv5aeu2l6x1t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eaxtEkLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38k4p3nvpv5aeu2l6x1t.png" alt="PR, GitHub Action" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0LobGal6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fohd68zm5evekf5dtcbq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0LobGal6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fohd68zm5evekf5dtcbq.png" alt="Commit failing" width="772" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Ql-yV1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxqkhq0odkf456xrx1ul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Ql-yV1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxqkhq0odkf456xrx1ul.png" alt="Commit status based on your GitHub Action" width="880" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#speed-amp-caching"&gt;
  &lt;/a&gt;
  Speed &amp;amp; Caching
&lt;/h2&gt;

&lt;p&gt;With CI, it's always a good practice to cache the needed dependencies. Some CI (Travis, Circle CI or others) aren't free and you will need to pay per usage. When you are caching them, they get faster and consume less resources. That way, they will also be cheaper to be executed. &lt;/p&gt;

&lt;p&gt;If you use Composer, you can add those two steps in your GitHub Action's jobs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get Composer Cache Directory&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer-cache&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "::set-output name=dir::$(composer config cache-files-dir)"&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache Composer dependencies&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.composer-cache.outputs.dir }}&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}&lt;/span&gt;
  &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-composer-&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: You can also use the commit hash &lt;code&gt;key: mycache-${{ github.sha }}&lt;/code&gt; as the cache key to update the cache when a new commit has been pushed. This is usually useful of your project is just a library and that your composer.lock doesn't get changed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-npm"&gt;
  &lt;/a&gt;
  With NPM
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache NPM deps&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;~/.npm&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}&lt;/span&gt;
    &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-npm-&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#if-you-use-pipenv-with-python"&gt;
  &lt;/a&gt;
  If you use Pipenv with Python,
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache Pipenv&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
      &lt;span class="s"&gt;~/.cache/pip&lt;/span&gt;
      &lt;span class="s"&gt;~/.cache/pipenv&lt;/span&gt;
      &lt;span class="s"&gt;~/.local/share/virtualenvs/&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pip-pipenv-${{ hashFiles('Pipfile.lock') }}&lt;/span&gt;
    &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pip-pipenv-&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-python@v2&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3.9&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pip install pipenv&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pipenv install --deploy --dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resource: &lt;a href="https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows"&gt;GitHub: Caching dependencies to speed up workflows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example üëâ &lt;a href="https://github.com/pH-7/pH2Gravatar/blob/master/.github/workflows/test.yml"&gt;https://github.com/pH-7/pH2Gravatar/blob/master/.github/workflows/test.yml&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beyond-testing-actions"&gt;
  &lt;/a&gt;
  Beyond testing actions üöÄ
&lt;/h2&gt;

&lt;p&gt;Like I said previously, you have GitHub actions for many other purposes other than running tests.&lt;/p&gt;

&lt;p&gt;Indeed, developers often find themselves doing repetitive tasks that can be easily automated by CI. &lt;/p&gt;

&lt;p&gt;You can use GitHub actions for much more than just running tests such as &lt;a href="https://github.com/marketplace/actions/deploy-to-github-pages"&gt;deploying your changes to GitHub Pages&lt;/a&gt;, &lt;a href="https://github.com/marketplace/actions/npm-publish"&gt;re-publishing an NPM packages&lt;/a&gt; or even an action that &lt;a href="https://github.com/marketplace/actions/dev-to-posts-to-markdown"&gt;creates a PR with your DEV.to .md post file&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;And you? What's your most common usage of the GitHub Actions? üòÑ&lt;/p&gt;

</description>
      <category>github</category>
      <category>workflows</category>
      <category>ci</category>
      <category>testing</category>
    </item>
    <item>
      <title>Git Commands Every Dev MUST know</title>
      <author>Mursal Furqan</author>
      <pubDate>Sat, 22 Jan 2022 06:04:57 +0000</pubDate>
      <link>https://dev.to/mursalfk/git-commands-every-dev-must-know-53c3</link>
      <guid>https://dev.to/mursalfk/git-commands-every-dev-must-know-53c3</guid>
      <description>&lt;p&gt;Hello and Good Morning ‚òï&lt;br&gt;
I know I had not been writing lately, but now I am back on my writing spree üéâ&lt;br&gt;
Today we are going to see some awesome git commands, that every developer MUST know. Look carefully when I stress on the word MUST. Knowing these commands would definitely make your time easier. üòâ&lt;br&gt;
So let's start.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initialize local git repository
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a particular file to a repository
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git add git_commands.md&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add all uncommitted files to the repository
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set Repository
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git config --global user.name 'mursalfk'&lt;br&gt;
git config --global user.email 'mursalfurqan@gmail.com'&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add message to your commit
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git commit -m "You can add a message to your commit like this"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See commit history
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git log&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add remote Name/URL
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git remote add origin 'https://github.com/mursalfk/mursalfk.git'&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Push your changes to remote repository
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git push origin master&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clone any repository
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git clone 'https://github.com/mursalfk/mursalfk.git'&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update the current working directory
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git pull origin master&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tired already? Come on... It's not that long üòâ&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fH8p-4R7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nm22olicm0zakxf1xoso.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fH8p-4R7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nm22olicm0zakxf1xoso.png" alt="Image description" width="500" height="414"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Check difference in between commits
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git diff HEAD~1 HEAD&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download files from any repository
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git fetch origin master&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new branch
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git branch branchName&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new branch inside a folder
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git branch branchFolder/branchName&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Switch to another branch
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git checkout branchName&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Switch to another branch present in another folder
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git checkout branchFolder/branchName&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create and checkout to the new branch at the same time
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git checkout -b branchName&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create and checkout to the new branch present in another folder at the same time
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git checkout branchFolder/branchName&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Merge to a new branch
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git merge master&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

</description>
      <category>git</category>
      <category>devops</category>
      <category>opensource</category>
      <category>programming</category>
    </item>
    <item>
      <title>Self-Taught Developer Journal, Day 45: TOP Building Rock Paper Scissors UI cont.</title>
      <author>Jennifer Tieu</author>
      <pubDate>Sat, 22 Jan 2022 05:44:26 +0000</pubDate>
      <link>https://dev.to/jennifer_tieu/self-taught-developer-journal-day-45-top-building-rock-paper-scissors-ui-cont-48pj</link>
      <guid>https://dev.to/jennifer_tieu/self-taught-developer-journal-day-45-top-building-rock-paper-scissors-ui-cont-48pj</guid>
      <description>&lt;p&gt;Today...&lt;/p&gt;

&lt;p&gt;I am still working on the Rock Paper Scissors UI for The Odin Project.&lt;/p&gt;

&lt;p&gt;I designed a rough mock up of what I plan to create for the game. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YvGR0-TV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4zmyjzfgv42cxxegrh5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YvGR0-TV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4zmyjzfgv42cxxegrh5.png" alt="Mockup" width="880" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we already created the logic for the game in JavaScript, I don't have to worry about the script right now. So I am going to focus on creating the HTML elements first and use CSS to set them in the desired locations. Then I will add the DOM manipulation methods and events in my JavaScript code because I'll have something to select. &lt;/p&gt;

&lt;p&gt;After testing the game, I will go back and add the CSS to style. I am not sure yet on the exact design, but I will decide that after I get the game working on the webpage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.theodinproject.com/paths/foundations/courses/foundations/"&gt;The Odin Project&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/revisiting-rock-paper-scissors"&gt;Revisiting Rock Paper Scissors&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Some laughs for the evening</title>
      <author>Nick Taylor</author>
      <pubDate>Sat, 22 Jan 2022 04:01:14 +0000</pubDate>
      <link>https://dev.to/nickytonline/some-laughs-for-the-evening-12jp</link>
      <guid>https://dev.to/nickytonline/some-laughs-for-the-evening-12jp</guid>
      <description>&lt;p&gt;I'm laughing at my own joke tonight, so to lighten the mood, what's some funny things you've come across recently?&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tvmXOnOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FJrVmt2WUAASNO-.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--P11PQVAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1152392593042485249/M7M0YZ4j_normal.jpg" alt="Nick Taylor (he/him) | nicktaylor.eth profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nick Taylor (he/him) | nicktaylor.eth
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nickytonline"&gt;@nickytonline&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Vanilla Ice is the best open source maintainer because he always collaborates and listens. New release? Brand new edition. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      03:45 AM - 22 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1484733894058512389" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1484733894058512389" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1484733894058512389" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Also, if you don't know who Vanilla Ice is, &lt;a href="https://en.wikipedia.org/wiki/Vanilla_Ice"&gt;Wikipedia has you covered&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Remember to keep it clean. üòé&lt;/p&gt;

</description>
      <category>jokes</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Create A React Router App in 5 Minutes</title>
      <author>ayubf</author>
      <pubDate>Sat, 22 Jan 2022 01:28:23 +0000</pubDate>
      <link>https://dev.to/ayubf/create-a-react-router-app-in-5-minutes-3ccp</link>
      <guid>https://dev.to/ayubf/create-a-react-router-app-in-5-minutes-3ccp</guid>
      <description>&lt;p&gt;¬†¬†¬†¬†Have you ever created a React app and wondered what it would take to add routes? Have, let's say, a seperate &lt;br&gt;
page for your posts and pictures? Routes are a basic concept in web development and are necessary for any web development framework, frontend or backend. This is especially essential for RESTful APIs that take advantage of the ability for routes to output different pages, carry out different functions like logging in, logging out, etc. In this article I'll show you how to set up routes in React with a library called React Router.&lt;/p&gt;



&lt;p&gt;Before you can start you should make sure you have the proper packages and tools installed. &lt;br&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#node-amp-npm"&gt;
  &lt;/a&gt;
  Node &amp;amp; NPM
&lt;/h3&gt;

&lt;p&gt;¬†¬†¬†¬†Node is the environment that runs JavaScript frameworks and libraries like React and is essential for projects like these. NPM is the package manager for Node, and that basically means NPM installs the required files to use React and other libraries. We will use it later in this article to install libraries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodejs.dev/"&gt;Install Node.js&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#text-editor"&gt;
  &lt;/a&gt;
  Text Editor
&lt;/h3&gt;

&lt;p&gt;¬†¬†¬†¬†To put it simply, a text editor is just the application on your computer that will edit the text files to create the React app. My personal choice is one called VSCode, but there are other good options like Sublime Text, Notepad++, &amp;amp; Atom, but even your default text editor can get the job done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;Install VSCode&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-1-creating-react-app"&gt;
  &lt;/a&gt;
  Step 1: Creating React App
&lt;/h3&gt;

&lt;p&gt;¬†¬†¬†¬†To initiate the React app we'll use a tool that's gonna make the process much simpler. Run the command below to create the React app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app reactrouterapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;npx&lt;/code&gt; is a package bundled with &lt;code&gt;npm&lt;/code&gt; and is used to execute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;reactrouterapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; will move us into the directory for the React app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i react-router react-router-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command installs the required packages for this app. &lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#step-2-adding-routes"&gt;
  &lt;/a&gt;
  Step 2: Adding Routes
&lt;/h3&gt;

&lt;p&gt;¬†¬†¬†¬†In this step we will create the app's routes and route outputs. First open the &lt;code&gt;/src&lt;/code&gt; folder inside the &lt;code&gt;reactrouterapp&lt;/code&gt; directory.&lt;br&gt;
Create a new file named &lt;code&gt;Page.js&lt;/code&gt; and type the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†¬†¬†¬†The function &lt;code&gt;Page()&lt;/code&gt; returns a JSX object in its' &lt;code&gt;return&lt;/code&gt; statement. The &lt;code&gt;export default&lt;/code&gt; statement at the bottom lets us use this in other files, very convenient.&lt;/p&gt;

&lt;p&gt;Next, change the contents of &lt;code&gt;App.js&lt;/code&gt; to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/page&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Routes&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†¬†¬†¬†The first line imports from the React Router library, and it imports three components for our routing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†¬†¬†¬†The second line imports from our &lt;code&gt;Page.js&lt;/code&gt; file from earlier, and it imports the &lt;code&gt;&amp;lt;Page /&amp;gt;&lt;/code&gt; component we created earlier.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;App()&lt;/code&gt; returns this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/page&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Routes&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†¬†¬†¬†Routes holds the routes and with the &lt;code&gt;path=&lt;/code&gt; parameter can have a prefix. &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; defines the specific routes, their paths, and the elements rendered (in this example that's our &lt;code&gt;&amp;lt;Page /&amp;gt;&lt;/code&gt; component).&lt;/p&gt;

&lt;p&gt;The app will return the &lt;code&gt;&amp;lt;Page /&amp;gt;&lt;/code&gt; element when the &lt;code&gt;/page&lt;/code&gt; route is visited.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#step-3-running"&gt;
  &lt;/a&gt;
  Step 3: Running
&lt;/h3&gt;

&lt;p&gt;To run the app run the follow command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The out put should be something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    Compiled successfully!

    You can now view reactrouterapp &lt;span class="k"&gt;in &lt;/span&gt;the browser.

      Local:            http://localhost:3000
      On Your Network:  http://10.0.0.87:3000

    Note that the development build is not optimized.
    To create a production build, use npm run build.

    assets by status 6.93 KiB &lt;span class="o"&gt;[&lt;/span&gt;cached] 1 asset
    assets by chunk 1.6 MiB &lt;span class="o"&gt;(&lt;/span&gt;name: main&lt;span class="o"&gt;)&lt;/span&gt;
      asset static/js/bundle.js 1.53 MiB &lt;span class="o"&gt;[&lt;/span&gt;emitted] &lt;span class="o"&gt;(&lt;/span&gt;name: main&lt;span class="o"&gt;)&lt;/span&gt; 1 related asset
      asset main.cdf5e8aba95c1b3dac48.hot-update.js 71.4 KiB &lt;span class="o"&gt;[&lt;/span&gt;emitted] &lt;span class="o"&gt;[&lt;/span&gt;immutable] &lt;span class="o"&gt;[&lt;/span&gt;hmr] &lt;span class="o"&gt;(&lt;/span&gt;name: main&lt;span class="o"&gt;)&lt;/span&gt; 1 related asset
    assets by path &lt;span class="k"&gt;*&lt;/span&gt;.json 611 bytes
      asset asset-manifest.json 583 bytes &lt;span class="o"&gt;[&lt;/span&gt;emitted]
      asset main.cdf5e8aba95c1b3dac48.hot-update.json 28 bytes &lt;span class="o"&gt;[&lt;/span&gt;emitted] &lt;span class="o"&gt;[&lt;/span&gt;immutable] &lt;span class="o"&gt;[&lt;/span&gt;hmr]
    asset index.html 1.67 KiB &lt;span class="o"&gt;[&lt;/span&gt;emitted]
    Entrypoint main 1.6 MiB &lt;span class="o"&gt;(&lt;/span&gt;1.62 MiB&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; static/js/bundle.js 1.53 MiB main.cdf5e8aba95c1b3dac48.hot-update.js 71.4 KiB 2 auxiliary assets
    cached modules 1.41 MiB &lt;span class="o"&gt;[&lt;/span&gt;cached] 107 modules
    runtime modules 31.3 KiB 15 modules
    javascript modules 3.95 KiB
      ./src/index.js 1.81 KiB &lt;span class="o"&gt;[&lt;/span&gt;code generated]
      ./src/App.js 2.14 KiB &lt;span class="o"&gt;[&lt;/span&gt;built] &lt;span class="o"&gt;[&lt;/span&gt;code generated]
    webpack 5.67.0 compiled successfully &lt;span class="k"&gt;in &lt;/span&gt;75 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†¬†¬†¬†Visit the link in the output, either one of them, and then visit the &lt;code&gt;/page&lt;/code&gt; route and you should see something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m1veq9DN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceqc6i3r2f5v0n3g25qk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m1veq9DN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceqc6i3r2f5v0n3g25qk.png" alt="Successfully run React app with React Router" width="483" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†¬†¬†¬†Congrats! You quickly created a React app with routes using React Router. Understanding &amp;amp; using routes and routing is a crucial skill for a wev developer, this will come up often in projects or on the job.&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://reactrouter.com/docs/en/v6"&gt;React Router v6&lt;/a&gt; &lt;br&gt;
&lt;a href="https://create-react-app.dev"&gt;Create-React-App&lt;/a&gt;&lt;br&gt;
&lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;&lt;br&gt;
&lt;a href="https://nodejs.org/en"&gt;Node.js&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.npmjs.com"&gt;Npm&lt;/a&gt;&lt;br&gt;
&lt;a href="https://code.visualstudio.com"&gt;VSCode&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/npx"&gt;Npx&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>So you want to know about Web Workers?</title>
      <author>Wardell Bagby</author>
      <pubDate>Fri, 21 Jan 2022 23:55:31 +0000</pubDate>
      <link>https://dev.to/wardellbagby/so-you-want-to-know-about-web-workers-4aoe</link>
      <guid>https://dev.to/wardellbagby/so-you-want-to-know-about-web-workers-4aoe</guid>
      <description>&lt;p&gt;Hey! Wardell here! So you've got yourself a website and you're interested in potentially off-loading some of your heavy-hitting computations to another thread?&lt;/p&gt;

&lt;p&gt;Sounds like you want a Web Worker!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hold-up-what-even-is-a-web-worker"&gt;
  &lt;/a&gt;
  Hold up, what even &lt;em&gt;is&lt;/em&gt; a Web Worker?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers"&gt;Web Workers&lt;/a&gt; are a simple means for web content to run scripts in background threads.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before I tell you &lt;em&gt;how&lt;/em&gt; to use a Web Worker, let's first go over things to consider before deciding to use a Web Worker.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You've &lt;a href="https://developer.chrome.com/docs/devtools/evaluate-performance/"&gt;profiled&lt;/a&gt; your website and discovered what you're considering putting in a Web Worker is actually slow.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't bother with a Web Worker if you don't actually need it. Adding an extra thread to communicate with will complicate your code, and if you aren't getting noticeable performance gains from it, it's an unnecessary complication.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The work you want to offload &lt;em&gt;can&lt;/em&gt; be done asynchronously.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is difficult to define, but &lt;a href="https://www.youtube.com/watch?v=L7-0ugujS2U"&gt;if you know, you know&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You don't need &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;document&lt;/code&gt;, or anything else DOM related.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Workers don't have direct access to the DOM of your site. There are ways around this but it's generally just a good idea &lt;em&gt;not&lt;/em&gt; to do it in the first place.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#whats-something-youve-used-a-web-worker-for"&gt;
  &lt;/a&gt;
  What's something you've used a Web Worker for?
&lt;/h2&gt;

&lt;p&gt;See, I just love your questions!&lt;/p&gt;

&lt;p&gt;My app &lt;a href="https://lyricistant.app"&gt;Lyricistant&lt;/a&gt; currently has two web workers, but we're going to talk about the easier to understand one: &lt;a href="https://github.com/wardellbagby/lyricistant/blob/7e047c48a112076545551ee720bef01c2cef1f5c/packages/rhyme-generator/main/rhyme-generator.ts"&gt;a Web Worker that generates rhymes on demand, totally offline&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I won't get into the nitty-gritty of how it all works, 'cause I mostly wrote it in a tired stupor at 2am one night, but it needs to load a 6 MiB JSON file, iterate through 135,165 words, and compare the syllables of those 135k words to the syllables of an inputted word.&lt;/p&gt;

&lt;p&gt;That is to say, if you type "Time" into Lyricistant (make sure to enable the Offline Rhymes in Preferences first!), my web worker will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find the pronunciation of "time" (T AY1 M)&lt;/li&gt;
&lt;li&gt;Iterate over &lt;em&gt;every single one&lt;/em&gt; of the 135k words it has pronunciations for.&lt;/li&gt;
&lt;li&gt;Compare the syllables of "time" to the syllables of the word its currently looking at.&lt;/li&gt;
&lt;li&gt;Calculate a score based off the comparison in step 3.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It's also worth noting that this all happens on almost &lt;em&gt;every&lt;/em&gt; keypress (its debouncing, of course; I'm not a monster), so not only are we finding rhymes for "time", but also "tim" and "ti" if you type slow enough.&lt;/p&gt;

&lt;p&gt;This is a &lt;strong&gt;very&lt;/strong&gt; naive way of generating rhymes, and also extremely slow. My excuse is I'm not a linguist! I'm barely a programmer! üòÇ&lt;/p&gt;

&lt;p&gt;Anyway, you can imagine how slow all of that code can be, so a Web Worker was the perfect choice to use! Although, fun fact: my initial implementation had this all run in the browser's main thread, and 60% of the time, it would finish in under 60 milliseconds, meaning Lyricistant could &lt;em&gt;mostly&lt;/em&gt; hit 60fps on my 2015 MacBook Pro using Chrome. Browsers are pretty fast!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#alright-enough-talking-i-wanna-make-my-own-web-worker"&gt;
  &lt;/a&gt;
  Alright, enough talking. I wanna make my own Web Worker!
&lt;/h2&gt;

&lt;p&gt;Fair enough; this blog post was starting to look like one of those &lt;a href="https://www.reddit.com/r/mildlyinfuriating/comments/bcuvs3/literally_every_online_recipe_now_days/"&gt;online recipe intros&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-your-web-worker"&gt;
  &lt;/a&gt;
  Creating your Web Worker
&lt;/h3&gt;

&lt;p&gt;There are quite a few ways to make a Web Worker, but probably the easiest for most people will be using &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt; for bundling and &lt;a href="https://github.com/GoogleChromeLabs/comlink"&gt;Comlink&lt;/a&gt; for communication.&lt;/p&gt;

&lt;p&gt;Assuming you're already using Webpack, making your Web Worker is super easy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myWorker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./path/to/my/file.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-worker-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The bit you give to &lt;code&gt;URL&lt;/code&gt; should match exactly what it'd look like in an &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; statement. This works with any path mappings or resolve aliases you might have set up as well.&lt;/p&gt;

&lt;p&gt;I.e, if you'd normally import the file like &lt;code&gt;import '@my-app/my-file.ts'&lt;/code&gt;, then you'd do &lt;code&gt;new URL('@my-app/my-file.ts')&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you're &lt;em&gt;not&lt;/em&gt; using Webpack, you should probably consult your own module bundler's docs. If you're not using any bundler, omit the &lt;code&gt;new URL&lt;/code&gt; and instead do &lt;code&gt;new Worker("./path/to/your/output/file.js");&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communicating-with-your-web-worker"&gt;
  &lt;/a&gt;
  Communicating with your Web Worker
&lt;/h3&gt;

&lt;p&gt;This is where Comlink comes into play!&lt;/p&gt;

&lt;p&gt;Web Workers, at their core, communicate via posting messages back and forth. Your main thread code communicates with your Worker with &lt;code&gt;worker.postMessage&lt;/code&gt;, your Worker listens to those messages with &lt;code&gt;self.onmessage&lt;/code&gt;, your Worker responds with &lt;code&gt;self.postMessage&lt;/code&gt;, and your main thread listens to those responses with &lt;code&gt;window.onmessage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That's not very easy to follow, is it?&lt;/p&gt;

&lt;p&gt;Comlink removes all that hassle and instead gives you a much nicer &lt;code&gt;Promise&lt;/code&gt;-based API.&lt;/p&gt;

&lt;p&gt;Let's imagine you've got a Web Worker that simply multiples two numbers. With Comlink, you can set that up like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Worker code math-worker.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;expose&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;comlink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;multiplicand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;multiplier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;multiplicand&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;multiplier&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Every function we "expose" this way will be available in the main thread. Functions that aren't exposed won't be available.&lt;/span&gt;
&lt;span class="nx"&gt;expose&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Main thread code&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;wrap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;comlink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mathWorker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./math-worker.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;math-worker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;math&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mathWorker&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Wrapping mathWorker gives us access to the exposed functions, but now they return Promises!&lt;/span&gt;
&lt;span class="nx"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 4&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#know-anything-i-should-be-on-the-lookout-for-or-just-general-advice"&gt;
  &lt;/a&gt;
  Know anything I should be on the lookout for? Or just general advice?
&lt;/h2&gt;

&lt;p&gt;As I mentioned earlier, your Worker doesn't have access to the DOM or &lt;code&gt;window&lt;/code&gt;. That makes sense; you don't actually have a DOM in a Web Worker because you don't have any UI. Outside of that, you can do almost anything you want, including spawning &lt;em&gt;more&lt;/em&gt; Workers!&lt;/p&gt;

&lt;p&gt;You also can't use &lt;code&gt;this&lt;/code&gt; at the root level of your Worker code; use &lt;code&gt;self&lt;/code&gt; instead. &lt;code&gt;this&lt;/code&gt; still works fine in functions and classes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Verify that your code is actually running in a Web Worker!&lt;/strong&gt; This bit me a few times, where I had messed up the setup and had inadvertently ran my worker in the main thread. Super easy to do if you import the file your Worker is supposed to run directly as an &lt;code&gt;import&lt;/code&gt;. The easiest way to verify your Web Worker is running is by opening up Dev Tools and going to the "Sources" tab. You should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dtFBw7C3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm9ey63obj2wzbatc219.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dtFBw7C3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm9ey63obj2wzbatc219.png" alt="Image of Chrome Dev Tools" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In that image, "top" refers to the main thread, and "platform" and "rhyme-generator" are Web Workers.&lt;/p&gt;

&lt;p&gt;If you only see "top", your Web Worker isn't running. This is either because you haven't started it yet (which you do by sending some data to it) or because you've misconfigured it.&lt;/p&gt;

&lt;p&gt;Also, remember that concurrency is difficult! Try and keep your Workers as simple and stateless as possible. This'll make your life much easier overall.&lt;/p&gt;

&lt;p&gt;One last tip: much like regular threads, there's diminishing returns to having too many Web Workers. A tip that I've heard is the maximum number of Web Workers you should spawn is &lt;code&gt;window.navigator.hardwareConcurrency - 1&lt;/code&gt;. We subtract one to save a core for the main thread. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#alright-i-think-ive-got-it-now-thanks"&gt;
  &lt;/a&gt;
  Alright, I think I've got it now! Thanks!
&lt;/h2&gt;

&lt;p&gt;Of course, no problem! Have fun and don't work your workers too hard!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Sending Custom emails with NodeJS from ü™Ñscratch  and for no cost whatsoeverüó°</title>
      <author>IroncladDev</author>
      <pubDate>Fri, 21 Jan 2022 23:34:43 +0000</pubDate>
      <link>https://dev.to/ironcladdev/sending-custom-emails-with-nodejs-from-scratch-and-for-no-cost-whatsoever-1i2n</link>
      <guid>https://dev.to/ironcladdev/sending-custom-emails-with-nodejs-from-scratch-and-for-no-cost-whatsoever-1i2n</guid>
      <description>&lt;p&gt;In this tutorial, I'm going to show you how you can send custom emails with just NodeJS, two sweet npm packages, and a single email address.&lt;/p&gt;

&lt;p&gt;The best part?  No email hosting is required, you can do this for no cost at all, and all in under 50 lines of code!&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;




&lt;p&gt;In this example, I'll be using gmail to get an email.  You may do this anywhere else, but I would prefer google due to how easy it is to get an alternate email account.&lt;/p&gt;

&lt;p&gt;After signing up for google, go to &lt;a href="https://myaccount.google.com/"&gt;https://myaccount.google.com/&lt;/a&gt;, go to the Security section and scroll to the &lt;strong&gt;Signing in to Google&lt;/strong&gt; section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1qGqOvzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ztvby82mbnjccqxcujm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1qGqOvzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ztvby82mbnjccqxcujm.png" alt="Signing into Google" width="880" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To be able to send emails, you'll need an app password from your google account.  You can obtain this after setting up two-step verification.  If you are not using google, use the password for that email account and keep it somewhere safe since we'll need it again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F_JvgGiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hokfh1bmy9ojby2lltgi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F_JvgGiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hokfh1bmy9ojby2lltgi.png" alt="Click on App Passwords" width="880" height="675"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After turning on two-step verification, click on App Passwords and create a new one for Mail.  As for the device, click on &lt;strong&gt;Other (custom name)&lt;/strong&gt; and name it anything you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_SnSYgRn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7b1j3rjqjug94fnhsk9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_SnSYgRn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7b1j3rjqjug94fnhsk9.png" alt="Setting up the password" width="880" height="175"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, copy the 16-digit app password, save it, and we're ready to start getting into the code.&lt;/p&gt;




&lt;p&gt;First, install two packages from npm - &lt;strong&gt;nodemailer&lt;/strong&gt; and &lt;strong&gt;nodemailer-juice&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nodemailer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inLineCss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nodemailer-juice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why do we need nodemailer-juice?  Emails typically only accept inline styles and not any styling from CSS.  If you don't want to sweat your brain to pieces, it's a good option to use nodemailer juice - it automatically converts css within &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; tags into inline CSS for you.&lt;/p&gt;

&lt;p&gt;Now for the emailing function.  I've already made it, so all you have to do is call it to send an email.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sendEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;transporter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransport&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gmail&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//change if not using gmail&lt;/span&gt;
    &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;smtp.gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// also change if not using gmail&lt;/span&gt;
    &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;465&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;secure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;you@email.com&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;your-app-password&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;transporter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;compile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inLineCss&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;//makes your email nice and full of css&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mailDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;you@email.com&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;transporter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the sendEmail function, you &lt;em&gt;will&lt;/em&gt; have to pass in an html document for the parameter &lt;code&gt;message&lt;/code&gt;.  Just to let you know, hover states, css listeners, and literally anything that won't run in inline styles &lt;strong&gt;will not run&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, I'm too lazy to write an entire document here for you.  I do have a template email at &lt;a href="https://replit.com/@IroncladDev/Noseletter"&gt;https://replit.com/@IroncladDev/Noseletter&lt;/a&gt; in case you wanted to use it.&lt;/p&gt;

&lt;p&gt;To make things a bit easier, I would store the html document in a function (as a template string) and have some parameters in which I could pass title, body, and some other options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emailTemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    ...
    &amp;lt;style&amp;gt;
      ...
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To pass the email template function into the sendEmail function, simply do like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sendEmail("someone@email.com", "Email Title", emailTemplate("Email Title", "This is the body of the email"));&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That, my friend, is all it takes to send emails in NodeJS.&lt;/p&gt;




&lt;p&gt;Liked this post?&lt;br&gt;
Don't forget to subscribe to my &lt;a href="https://www.connerow.dev"&gt;newsletter&lt;/a&gt; (located on my website footer) for new posts, new projects, recaps, and more!&lt;/p&gt;

&lt;p&gt;Join my &lt;a href="https://discord.gg/TZCc8P2cyH"&gt;discord&lt;/a&gt; to get in touch and hang out!&lt;/p&gt;

&lt;p&gt;Also, be sure to support this post with a couple reactions!&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to add amazing loading effect - PACE.JS</title>
      <author>Adeleye Ayodeji</author>
      <pubDate>Fri, 21 Jan 2022 22:54:06 +0000</pubDate>
      <link>https://dev.to/adeleyeayodeji/how-to-add-amazing-loading-effect-pacejs-2ln3</link>
      <guid>https://dev.to/adeleyeayodeji/how-to-add-amazing-loading-effect-pacejs-2ln3</guid>
      <description>&lt;h6&gt;
  &lt;a href="#do-you-want-to-add-amazing-web-loading-animation-like-devto-and-google-app-then-this-tutorial-is-for-you"&gt;
  &lt;/a&gt;
  Do you want to add amazing web loading animation like Dev.to and Google App? then this tutorial is for you.
&lt;/h6&gt;

&lt;p&gt;Youtube Tutorial : &lt;a href="https://www.youtube.com/watch?v=JvfMUbB4Tn4"&gt;https://www.youtube.com/watch?v=JvfMUbB4Tn4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PACE JS CDN: &lt;a href="https://codebyzach.github.io/pace/"&gt;https://codebyzach.github.io/pace/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have an issue? Comment below.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Source Code::&lt;/p&gt;

&lt;p&gt;index.php&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- Required meta tags --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- Bootstrap CSS --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
            &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;AJAX IMAGE UPLOAD WITH PROGRESS BAR&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"css/flash.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;AJAX IMAGE UPLOAD WITH PROGRESS BAR&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"uploadimage"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"p-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Upload File&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"image"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress mt-3"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"display:none;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-bar"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"progressbar"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width: 0%;"&lt;/span&gt; &lt;span class="na"&gt;aria-valuenow=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;aria-valuemin=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;
                    &lt;span class="na"&gt;aria-valuemax=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0%&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary mt-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Upload&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;


        &lt;span class="c"&gt;&amp;lt;!-- Optional JavaScript; choose one of the two! --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- Option 1: Bootstrap Bundle with Popper --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"&lt;/span&gt;
            &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- Option 2: Separate Popper and Bootstrap JS --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"&lt;/span&gt;
            &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js"&lt;/span&gt;
            &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"js/pace.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ajaxStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;Pace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;restart&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#uploadimage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input[name='image']&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Select an image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="c1"&gt;//AJAX&lt;/span&gt;
                &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;upload.php&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;contentType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;processData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;beforeSend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.progress&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;slideDown&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#uploadimage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Uploading....&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="na"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                        &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;progress&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="c1"&gt;//Check for progress&lt;/span&gt;
                            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lengthComputable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;percentage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loaded&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                &lt;span class="c1"&gt;//100%&lt;/span&gt;
                                &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;percentageformatted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                                &lt;span class="c1"&gt;//progress bar initialize&lt;/span&gt;
                                &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.progress-bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;width&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;percentageformatted&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aria-valuenow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;percentageformatted&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                    &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;percentageformatted&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                            &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.progress-bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bg-success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#uploadimage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Upload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
