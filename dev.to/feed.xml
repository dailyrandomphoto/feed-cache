<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Day 76/100 The Book</title>
      <author>Rio Cantre</author>
      <pubDate>Tue, 30 Nov 2021 13:34:00 +0000</pubDate>
      <link>https://dev.to/riocantre/day-76100-the-book-29dp</link>
      <guid>https://dev.to/riocantre/day-76100-the-book-29dp</guid>
      <description>&lt;p&gt;Learning is a continuous process with resources widely used with people who acknowledge the challenging journey of accomplishing a successful goal. Though it can be daunting at first, once you grasp the flow and understand the definitions of each detail, one would be grateful for their fruit of labor. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQutQpYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7j4g2b4slwcwpqtdadw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQutQpYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7j4g2b4slwcwpqtdadw.png" alt="The Book V3" width="300" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-chapters"&gt;
  &lt;/a&gt;
  The Chapters
&lt;/h2&gt;

&lt;p&gt;This book renders an excellent understanding of the history of JavaScript. It consists of twenty-one chapters with unique motivational quotes as an introduction to each section. Each part discusses the basics of the language, accessibility, and primary functions. It is curated to fully understand the whole concept and interactive approach of grasping information. Additionally, examples and exercises are uniquely designed to get the feel of the language.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-code-example-shown-in-a-specific-part"&gt;
  &lt;/a&gt;
  A code example shown in a specific part:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let rabbit = {};
rabbit.speak = function(line) {
  console.log(`The rabbit says '${line}'`);
};

rabbit.speak("I'm alive.");
// → The rabbit says 'I'm alive.'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following are the three parts with twenty-one chapters inside the book:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1: Language&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/01_values.html"&gt;Values, Types, and Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/02_program_structure.html"&gt;Program Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/03_functions.html"&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/04_data.html"&gt;Data Structures: Objects and Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/05_higher_order.html"&gt;Higher-Order Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/06_object.html"&gt;The Secret Life of Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/07_robot.html"&gt;Project: A Robot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/08_error.html"&gt;Bugs and Errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/09_regexp.html"&gt;Regular Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/10_modules.html"&gt;Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/11_async.html"&gt;Asynchronous Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/12_language.html"&gt;Project: A Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Part 2: The Browser&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/13_browser.html"&gt;JavaScript and the Browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/14_dom.html"&gt;The Document Object Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/15_event.html"&gt;Handling Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/16_game.html"&gt;Project: A Platform Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/17_canvas.html"&gt;Drawing on Canvas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/18_http.html"&gt;HTTP and Forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/19_paint.html"&gt;Project: A Pixel Art Editor&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Part 3: Node&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/20_node.html"&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/21_skillsharing.html"&gt;Project: Skill-Sharing Website&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-exercises"&gt;
  &lt;/a&gt;
  The Exercises
&lt;/h2&gt;

&lt;p&gt;Some of the sections contain exercises that practice what you have learned. Most of them are three parts with different methods of showing how the particular element could be used. Each has instructions to follow and hints to give an idea of how to implement the code. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#an-example-exercise"&gt;
  &lt;/a&gt;
  An example exercise:
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Disk persistence&lt;/strong&gt;&lt;br&gt;
The skill-sharing server keeps its data purely in memory. This means that when it crashes or is restarted for any reason, all talks and comments are lost.&lt;/p&gt;

&lt;p&gt;Extend the server so that it stores the talk data to disk and automatically reloads the data when it is restarted. Do not worry about efficiency—do the simplest thing that works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hints&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The simplest solution I can come up with is to encode the whole talks object as JSON and dump it to a file with writeFile. There is already a method (updated) that is called every time the server’s data changes. It can be extended to write the new data to disk.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pick a filename, for example ./talks.json. When the server starts, it can try to read that file with readFile, and if that succeeds, the server can use the file’s contents as its starting data.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Beware, though. The talks object started as a prototype-less object so that the in operator could reliably be used. JSON.parse will return regular objects with Object.prototype as their prototype. If you use JSON as your file format, you’ll have to copy the properties of the object returned by JSON.parse into a new, prototype-less object.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-sandbox"&gt;
  &lt;/a&gt;
  Code Sandbox
&lt;/h2&gt;

&lt;p&gt;Every exercise has an example solution where you can compare your code. It could be challenging to understand the instructions, but the hints would help you better solve the problem.&lt;br&gt;
&lt;a href="https://eloquentjavascript.net/code/"&gt;Code Sandbox Link&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Having read the book enlightened me of how tough it is to learn JavaScript. I would not say I remembered every detail and solved every exercise. It takes significant effort and time to master the language fully. Reading it alone would not make me one but instead, educate me on how great and brilliant the people are behind this book. It is the third edition, and I am pleased to stumble upon this book and have the time to feel all the sensation of being an expert on a specific skill.&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>programming</category>
      <category>motivation</category>
      <category>challenge</category>
    </item>
    <item>
      <title>Day 3 - Applied Visual Design | #100DaysOfCode</title>
      <author>MD Jannatin Naim</author>
      <pubDate>Tue, 30 Nov 2021 13:31:07 +0000</pubDate>
      <link>https://dev.to/jannatinnaim/day-3-applied-visual-design-100daysofcode-2gdn</link>
      <guid>https://dev.to/jannatinnaim/day-3-applied-visual-design-100daysofcode-2gdn</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pTvmwdCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04d8ag6hkymnk5u3h19c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pTvmwdCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04d8ag6hkymnk5u3h19c.jpg" alt="Coding Motivation Banner" width="880" height="1074"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-did-i-learn-today"&gt;
  &lt;/a&gt;
  What did I learn today?
&lt;/h3&gt;

&lt;p&gt;Well, I learnt a lot today about CSS and it's applied uses from the &lt;a href="https://www.freecodecamp.org/learn/responsive-web-design#applied-visual-design"&gt;Applied Visual Design&lt;/a&gt; course lesson from &lt;a href="https://freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;. I got the hang of things like text formatting, box shadows, opacities, transitions, animations, etc. It was mostly about how to modify elements and it's behaviors with CSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-problems-did-i-face"&gt;
  &lt;/a&gt;
  What problems did I face?
&lt;/h3&gt;

&lt;p&gt;I actually faced quite a bit of issues today. The most notable of them is with animations, especially the &lt;code&gt;bezier-curve&lt;/code&gt;. It's a bit of a new topic for me and I couldn't get my head around it. The animations part is what I struggled with the most and there's a giant hole in my knowledge about CSS animations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-i-want-to-do-tomorrow"&gt;
  &lt;/a&gt;
  What do I want to do tomorrow?
&lt;/h3&gt;

&lt;p&gt;I'm going to take a look at these animations once again tomorrow as I still don't fully understand them. I want to also check out the &lt;a href="https://www.freecodecamp.org/learn/responsive-web-design#applied-accessibility"&gt;Applied Accessibility&lt;/a&gt; section of the course.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-was-the-experience-so-far"&gt;
  &lt;/a&gt;
  How was the experience so far?
&lt;/h3&gt;

&lt;p&gt;Today I struggled a lot unlike the previous days. Things seem to be getting interesting. If this is just the surface, I wonder what I'll find at the deep ends of web development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JannatinNaim/"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Web 3.0: A Developer Roadmap, Guide, and Resources to Get Started</title>
      <author>Olubisi Idris Ayinde💡</author>
      <pubDate>Tue, 30 Nov 2021 13:30:03 +0000</pubDate>
      <link>https://dev.to/olanetsoft/web-30-a-developer-roadmap-guide-and-resources-to-get-started-45oa</link>
      <guid>https://dev.to/olanetsoft/web-30-a-developer-roadmap-guide-and-resources-to-get-started-45oa</guid>
      <description>&lt;p&gt;Blockchains are still prominent, and the industry is in desperate need of engineers right now. It's not just a lucrative field to work in, but it's also a fascinating one.&lt;/p&gt;

&lt;p&gt;You'll need to be dedicated to your learning if you want to be a part of it and advance your career as a Web 3.0 developer.&lt;/p&gt;

&lt;p&gt;I'll provide a road map and some great online resources I found after studying how to get started. In this article, you'll go from having no programming experience to being a Solidity and Blockchain specialist.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-learn-about-smart-contracts-and-solidity"&gt;
  &lt;/a&gt;
  1. Learn About Smart Contracts and Solidity
&lt;/h2&gt;

&lt;p&gt;Smart contracts are how the blockchain can be programmed. They are pieces of code that have been distributed to the blockchain and are written in a language that blockchain nodes can understand.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ipwxYa-F1uY"&gt;A Full Course on Ethereum, Blockchain Development, Smart Contracts, and the EVM&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.coursera.org/learn/smarter-contracts"&gt;Smart Contracts - Zero to Hero&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/learn-solidity-blockchain-and-smart-contracts-in-a-free/"&gt;Learn Solidity, Blockchain, and Smart Contracts&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=p3C7jljTXaA"&gt;Full Solidity Tutorial&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://solidity-by-example.org"&gt;Solidity By Exaxmple&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.soliditylang.org/en/v0.8.10/"&gt;Official Solidity Docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-learn-the-fundamentals-of-blockchain-technology"&gt;
  &lt;/a&gt;
  2. Learn the fundamentals of blockchain technology
&lt;/h2&gt;

&lt;p&gt;A blockchain is a digital log of duplicated transactions and distributed across the blockchain's complete network of computer systems. &lt;/p&gt;

&lt;p&gt;Blockchains are a fantastic piece of technology, but they aren't easy to understand. To comprehend what you'll subsequently build on, you'll need to devote some time to it.&lt;/p&gt;

&lt;p&gt;Learn what blockchain is, in a simpler term here 👇&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/course/blockchain-and-bitcoin-fundamentals/"&gt;Blockchain and Bitcoin Fundamentals&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.edx.org/course/blockchain-technology"&gt;Blockchain Technology&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ci_AIMCF-HA"&gt;Blockchain Roadmap&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=1WZdH3kD1d8"&gt;Blockchain Test&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-creating-zombies-is-a-great-way-to-learn-about-solidity"&gt;
  &lt;/a&gt;
  3. Creating Zombies is a great way to learn about solidity.
&lt;/h2&gt;

&lt;p&gt;A Gamified Programming course, where you'll learn how to develop Smart Contracts while creating a Zombie factory to start your world-conquering plan, turns out to be one of the best tools for learning about solidity.&lt;/p&gt;

&lt;p&gt;You learn by playing a game.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cryptozombies.io/"&gt;Zoombies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-learn-web3js-and-ethersjs-to-connect-your-dapp"&gt;
  &lt;/a&gt;
  4. Learn Web3.js and Ethers.js to connect your dAPP
&lt;/h2&gt;

&lt;p&gt;You can use Web3.js to create clients that interface with the Etherem Blockchain. It's a collection of libraries that, among other things, allow you to transfer Ether from one account to another, read and write data from smart contracts, and build smart contracts.&lt;/p&gt;

&lt;p&gt;The ethers.js library intends to be a comprehensive and lightweight interface to the Ethereum Blockchain and its ecosystem. It was created with ethers.io in mind but has now evolved into a more general-purpose library.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=itUrxH-rksc"&gt;Intro to ETH&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=a0osIaAOFSE"&gt;A guide by Nader Dabit&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=t3wM5903ty0"&gt;Web3.js Complete Guide&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=h9PdvEDuZS8"&gt;Smart Contract w/React&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=swZRo6LFrCw"&gt;React + Ether.js + MetaMask&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.ethers.io/v5/"&gt;Official Ethers Docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-develop-a-decentralize-app"&gt;
  &lt;/a&gt;
  5. Develop a Decentralize App
&lt;/h2&gt;

&lt;p&gt;To enhance your grasp of blockchain programming, start building your DApps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://buildspace.so/"&gt;Buildspace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-join-communities"&gt;
  &lt;/a&gt;
  6. Join Communities
&lt;/h2&gt;

&lt;p&gt;When it comes to learning or working in the tech world, communities are essential. So far, the web3 community has been one of the most accommodating. It is pretty beneficial to have the impression that you are not alone, and guess what? I'll highlight a few of them that I found to be quite helpful, as well as working with great devs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/developer_dao"&gt;Developer DAO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/_buildspace"&gt;Buildspace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dacade.org/"&gt;Dacade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Pot_Heads_NFT/"&gt;Pot Heads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/sigleapp"&gt;Explorer Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/web3community"&gt;Web3Community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-create-a-portfolio-and-build-projects"&gt;
  &lt;/a&gt;
  7. Create a Portfolio and Build Projects
&lt;/h2&gt;

&lt;p&gt;In your job search, having a portfolio of projects can be beneficial. Build, build, build if you want to work in this profession.&lt;/p&gt;

&lt;p&gt;I hope you find this helpful 😊 &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I will also keep this article up to date; if you know of any additional resources that would be useful, please let me know in the comments section, and I will add them to the list.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I intend to release several projects soon and create a blog post about them so that everyone can benefit.&lt;/p&gt;

&lt;p&gt;I'd love to connect with you at &lt;a href="https://twitter.com/olanetsoft"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/olubisi-idris-ayinde-05727b17a/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/Olanetsoft"&gt;GitHub&lt;/a&gt; | &lt;a href="https://idrisolubisi.com/"&gt;Portfolio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you in my next blog article. Take care!!!&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>smart</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A Simple KeyVal Store Implemented in Motoko</title>
      <author>David Dal Busco</author>
      <pubDate>Tue, 30 Nov 2021 13:27:48 +0000</pubDate>
      <link>https://dev.to/daviddalbusco/a-simple-keyval-store-implemented-in-motoko-55na</link>
      <guid>https://dev.to/daviddalbusco/a-simple-keyval-store-implemented-in-motoko-55na</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v8CqMR4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ATtIqarWb4Sbvh2lntKUlHg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v8CqMR4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ATtIqarWb4Sbvh2lntKUlHg.jpeg" alt="" width="880" height="583"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@peterlaster?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Pedro Lastra&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;I am a fond of offline web applications and most of my personal open source projects, such as &lt;a href="http://deckdeckgo.com/"&gt;DeckDeckGo&lt;/a&gt; or &lt;a href="https://tietracker.app.link/"&gt;Tie Tracker&lt;/a&gt;, follow the approach.&lt;/p&gt;

&lt;p&gt;In these two particular apps, I use &lt;a href="https://github.com/jakearchibald/idb-keyval"&gt;idb-keyval&lt;/a&gt; to ease the interaction with IndexedDB through a keyval-like API.&lt;/p&gt;

&lt;p&gt;That’s why, in the last iteration of our migration to the &lt;a href="https://dfinity.org/"&gt;DFINITY&lt;/a&gt;’s Internet Computer, I developed a generic store for canister smart contract in &lt;a href="https://smartcontracts.org/docs/language-guide/motoko.html"&gt;Motoko&lt;/a&gt; that also maintain data with key and values.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#store"&gt;
  &lt;/a&gt;
  Store
&lt;/h3&gt;

&lt;p&gt;My goal is to be able to reuse the same store across canisters and projects, multiple times. If one of my actor would contain different types of data, for example cars and vegetables, I would like to re-use the same helper that encapsulates the data and exposes functions such as: &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt; and &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, the store I developed is nothing less than a generic class that uses a &lt;a href="https://sdk.dfinity.org/docs/base-libraries/hashmap"&gt;HashMap&lt;/a&gt; for the persistence with textual keys (type &lt;a href="https://smartcontracts.org/docs/base-libraries/Text.html"&gt;Text&lt;/a&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mo:base/Text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;HashMap&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mo:base/HashMap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Iter&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mo:base/Iter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mo:base/Array&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DataStore&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HashMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
                &lt;span class="nx"&gt;HashMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#put-get-amp-delete"&gt;
  &lt;/a&gt;
  Put, Get &amp;amp; Delete
&lt;/h3&gt;

&lt;p&gt;Functions that modifies the state are basically applying changes directly to the &lt;code&gt;HashMap&lt;/code&gt; except the deletion operation, which I extended with a &lt;code&gt;getter&lt;/code&gt;, even though a &lt;code&gt;delete&lt;/code&gt; does not do anything if the key does not exist. I thought occasionally it can be interesting to get back the value of the key that has been deleted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;del&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(?&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#list"&gt;
  &lt;/a&gt;
  List
&lt;/h3&gt;

&lt;p&gt;Getting a list of all entries of the store would also not be much more than querying the &lt;code&gt;HashMap&lt;/code&gt; directly if it were not for the possibility of filtering the data. Indeed, it might be interesting to search only keys that start with or contain a particular prefix.&lt;/p&gt;

&lt;p&gt;I firstly defined a new type &lt;code&gt;DataFilter&lt;/code&gt; for the filter and implemented the effective filtering functions that acknowledge the optional nature of these options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;DataFilter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;keyStartsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(?&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;keyContains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(?&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above functions are returning &lt;code&gt;true&lt;/code&gt; if no filters are defined, assuming &lt;code&gt;undefined&lt;/code&gt; means “ignore the option”. There is probably a better way of  implementing such condition in Motoko but, I am not yet as fluid in it as I am with others languages such as TypeScript. If you are up to improve the solution, go for it, send me a &lt;a href="https://github.com/deckgo/deckdeckgo/blob/main/canisters/src/data/data.filter.mo"&gt;Pull Request&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Finally, I implemented the &lt;code&gt;list&lt;/code&gt; function itself that either returns all entries or applies the filter following an &lt;code&gt;and&lt;/code&gt; logic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;DataFilter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Iter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Iter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Iter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(?&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;keyValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Iter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
                        &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mapFilter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;?(&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyStartsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; 
                    &lt;span class="nx"&gt;keyContains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;?(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;};&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#upgrades"&gt;
  &lt;/a&gt;
  Upgrades
&lt;/h3&gt;

&lt;p&gt;To preserve the state of the canisters on upgrades, &lt;a href="https://smartcontracts.org/docs/language-guide/upgrades.html#_preupgrade_and_postupgrade_system_methods"&gt;preupgrade and postupgrade&lt;/a&gt; system hooks can be implemented for variable that are not stable per default. To foresee such process, I also added two final functions to the store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;preupgrade&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;HashMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;postupgrade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stableData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;data&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;HashMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromIter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stableData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;p&gt;To showcase the usage of such generic store in an actor, we create an empty canister that defines a type of object to store, such as a &lt;code&gt;Car&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;We &lt;code&gt;import&lt;/code&gt; the helper and declare both the objects we are going to use. The &lt;code&gt;store&lt;/code&gt; itself and a stable &lt;code&gt;entries&lt;/code&gt; to maintain the state on upgrades.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Iter&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mo:base/Iter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DataStore&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;actor&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;manufacturer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DataStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DataStore&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
                       &lt;span class="nx"&gt;DataStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DataStore&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;stable&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="nx"&gt;system&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;preupgrade&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;entries&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Iter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preupgrade&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;system&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;postupgrade&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postupgrade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;entries&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once these defined, we expose the functions that modify the state and link these with the store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(?&lt;/span&gt;&lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;del&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;del&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we plug the last bit of code, the function that lists and filters the entries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(?&lt;/span&gt;&lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Et voilà, with few lines of code, we have implemented a simple keyval canister smart contract that store our data 🥳.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#playground"&gt;
  &lt;/a&gt;
  Playground
&lt;/h3&gt;

&lt;p&gt;Wanna play with the previous example and store? Checkout this &lt;a href="https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=1517752901"&gt;Motoko Playground&lt;/a&gt; and have fun 🤙.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--83wf0rGf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ACgTzjuNqFv3mr1IpCZsPgw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--83wf0rGf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ACgTzjuNqFv3mr1IpCZsPgw.png" alt="" width="880" height="579"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h3&gt;

&lt;p&gt;Wanna read more our project? Here is the list of blog posts I published since we started the project with the Internet Computer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/daviddalbusco/typescript-utilities-for-candid-caj"&gt;TypeScript Utilities For Candid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/daviddalbusco/bye-bye-amazon-google-hello-web-3-0-1d0e"&gt;Bye-Bye Amazon &amp;amp; Google, Hello Web 3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/daviddalbusco/dynamically-import-esm-modules-from-a-cdn-4ao5"&gt;Dynamically Import ESM Modules From A CDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/daviddalbusco/internet-computer-web-app-decentralized-database-architecture-2llk"&gt;Internet Computer: Web App Decentralized Database Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/daviddalbusco/singleton-factory-patterns-with-typescript-explained-with-haidresser-and-ice-creams-shop-mfi"&gt;Singleton &amp;amp; Factory Patterns With TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/daviddalbusco/getting-started-with-the-internet-computer-web-hosting-5g8n"&gt;Hosting on the Internet Computer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/daviddalbusco/we-received-a-grant-to-port-our-web-app-to-the-internet-computer-318o"&gt;We Received A Grant To Port Our Web App To The Internet Computer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#keep-in-touch"&gt;
  &lt;/a&gt;
  Keep In Touch
&lt;/h3&gt;

&lt;p&gt;To follow our adventure, you can star and watch our &lt;a href="https://github.com/deckgo/deckdeckgo"&gt;GitHub repo&lt;/a&gt; ⭐️ and &lt;a href="http://eepurl.com/hKeMLD"&gt;sign up&lt;/a&gt; to join the list of beta tester.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;There might be a better way to implement the filtering options and, not sure such the architecture is the state of the art (do other Motoko developers create stores next to their canisters?).&lt;/p&gt;

&lt;p&gt;However, it fits very well my projects and, as I am still learning, it can only be improved within time because I am porting our web editor to &lt;a href="https://dfinity.org/"&gt;DFINITY&lt;/a&gt;’s Internet Computer and do not intend to stop soon.&lt;/p&gt;

&lt;p&gt;To infinity and beyond!&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;




&lt;p&gt;You can reach me on &lt;a href="https://twitter.com/daviddalbusco"&gt;Twitter&lt;/a&gt; or my &lt;a href="https://daviddalbusco.com"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Give a try to &lt;a href="https://deckdeckgo.com/"&gt;DeckDeckGo&lt;/a&gt; for your next slides!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://deckdeckgo.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4yatxfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://deckdeckgo.com/assets/meta/deckdeckgo-meta.png" alt="DeckDeckGo" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>motoko</category>
      <category>blockchain</category>
      <category>web3</category>
      <category>dapp</category>
    </item>
    <item>
      <title>How to build a Tailwind CSS modal component</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Tue, 30 Nov 2021 12:55:23 +0000</pubDate>
      <link>https://dev.to/themesberg/how-to-build-a-tailwind-css-modal-component-31ko</link>
      <guid>https://dev.to/themesberg/how-to-build-a-tailwind-css-modal-component-31ko</guid>
      <description>&lt;p&gt;In this tutorial I would like to show you how you can build a &lt;a href="https://flowbite.com/docs/components/modal/"&gt;Tailwind CSS modal&lt;/a&gt; element using Flowbite and make it work with dark mode as well.&lt;/p&gt;

&lt;p&gt;Last time I showed you how to build a &lt;a href="https://dev.to/themesberg/building-a-responsive-navbar-component-in-tailwind-css-1jmh"&gt;responsive navbar&lt;/a&gt; using Tailwind CSS here on the DEV community and I'm excited to get started with this modal component.&lt;/p&gt;

&lt;p&gt;Modals are a very important and interactive element that you can use to show and receive information from your website users.&lt;/p&gt;

&lt;p&gt;Here's a preview of what we will build:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4XAGygfd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60v3ol2wcokknirp15t4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4XAGygfd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60v3ol2wcokknirp15t4.gif" alt="Tailwind CSS modal component" width="880" height="546"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-modal-component"&gt;
  &lt;/a&gt;
  Tailwind CSS modal component
&lt;/h2&gt;

&lt;p&gt;Before getting started, make sure that you have Tailwind CSS and Flowbite installed on your project.&lt;/p&gt;

&lt;p&gt;I assume that you already have a working Tailwind CSS project so we'll start by installing Flowbite:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @themesberg/flowbite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now require it as a plugin in your &lt;code&gt;tailwind.config.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {

    plugins: [
        require('@themesberg/flowbite/plugin')
    ]

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now also include the Flowbite JavaScript file either from NPM or as a CDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="../path/to/@themesberg/flowbite/dist/flowbite.bundle.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Via CDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link rel="stylesheet" href="https://unpkg.com/@themesberg/flowbite@1.2.0/dist/flowbite.min.css" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! Let's now first add the button that will toggle the modal itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- Modal toggle --&amp;gt;
&amp;lt;button class="block text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" type="button" data-modal-toggle="default-modal"&amp;gt;
  Toggle modal
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we added a &lt;code&gt;data-modal-toggle&lt;/code&gt; data attribute where &lt;code&gt;default-modal&lt;/code&gt; is the id of the modal element that we will now build.&lt;/p&gt;

&lt;p&gt;Let's use one of the &lt;a href="https://flowbite.com/docs/components/modal/"&gt;modal component examples&lt;/a&gt; from Flowbite and add it just after the button component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- Main modal --&amp;gt;
&amp;lt;div id="default-modal" aria-hidden="true" class="hidden overflow-x-hidden overflow-y-auto fixed h-modal md:h-full top-4 left-0 right-0 md:inset-0 z-50 justify-center items-center"&amp;gt;
    &amp;lt;div class="relative w-full max-w-2xl px-4 h-full md:h-auto"&amp;gt;
        &amp;lt;!-- Modal content --&amp;gt;
        &amp;lt;div class="bg-white rounded-lg shadow relative dark:bg-gray-700"&amp;gt;
            &amp;lt;!-- Modal header --&amp;gt;
            &amp;lt;div class="flex items-start justify-between p-5 border-b rounded-t dark:border-gray-600"&amp;gt;
                &amp;lt;h3 class="text-gray-900 text-xl lg:text-2xl font-semibold dark:text-white"&amp;gt;
                    Terms of Service
                &amp;lt;/h3&amp;gt;
                &amp;lt;button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-toggle="default-modal"&amp;gt;
                    &amp;lt;svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;  
                &amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;!-- Modal body --&amp;gt;
            &amp;lt;div class="p-6 space-y-6"&amp;gt;
                &amp;lt;p class="text-gray-500 text-base leading-relaxed dark:text-gray-400"&amp;gt;
                    With less than a month to go before the European Union enacts new consumer privacy laws for its citizens, companies around the world are updating their terms of service agreements to comply.
                &amp;lt;/p&amp;gt;
                &amp;lt;p class="text-gray-500 text-base leading-relaxed dark:text-gray-400"&amp;gt;
                    The European Union’s General Data Protection Regulation (G.D.P.R.) goes into effect on May 25 and is meant to ensure a common set of data rights in the European Union. It requires organizations to notify users as soon as possible of high-risk data breaches that could personally affect them.
                &amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;!-- Modal footer --&amp;gt;
            &amp;lt;div class="flex space-x-2 items-center p-6 border-t border-gray-200 rounded-b dark:border-gray-600"&amp;gt;
                &amp;lt;button data-modal-toggle="default-modal" type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"&amp;gt;I accept&amp;lt;/button&amp;gt;
                &amp;lt;button data-modal-toggle="default-modal" type="button" class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:ring-gray-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600"&amp;gt;Decline&amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great job! Now you have a working and responsive modal that you can use in your Tailwind CSS projects.&lt;/p&gt;

&lt;p&gt;This modal component also supports dark mode and you can check out the &lt;a href="https://flowbite.com/docs/customize/dark-mode/"&gt;Tailwind CSS dark mode switch&lt;/a&gt; guide from Flowbite to set it up yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wqhIjyJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5f2dfhxq6bozm0nb0zv2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wqhIjyJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5f2dfhxq6bozm0nb0zv2.png" alt="Tailwind CSS dark modal" width="880" height="581"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are plenty of other modal component variations and sizes from the &lt;a href="https://flowbite.com/docs/components/modal/"&gt;Flowbite component library&lt;/a&gt; that you can check out and use for your projects.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>tutorial</category>
      <category>opensource</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Best Java Frameworks to Learn in 2022 for Microservices and Cloud Native Development</title>
      <author>javinpaul</author>
      <pubDate>Tue, 30 Nov 2021 12:53:17 +0000</pubDate>
      <link>https://dev.to/javinpaul/5-best-java-frameworks-to-learn-in-2022-for-microservices-and-cloud-native-development-4732</link>
      <guid>https://dev.to/javinpaul/5-best-java-frameworks-to-learn-in-2022-for-microservices-and-cloud-native-development-4732</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hello Java devs, if you want to develop Microservice and Cloud-Native applications in Java and looking for best resources like Microservice frameworks, libraries, and technologies then you have come to the right place. &lt;/p&gt;

&lt;p&gt;Being an author of Java blog, I often receive questions like which Java framework is best for building Microservices? whether I should us Spring Boot + Spring cloud or Quarkus? Does MicroNaut better than Quarkus? Is GrallVM good for Microservices? Is Quarkus and MicroNaut tougher than Spring Boot etc. &lt;/p&gt;

&lt;p&gt;If you are wondering what they are then don't worry, they are just a few Java framework you can use to create Microservice and cloud native Java applications. &lt;/p&gt;

&lt;p&gt;Earlier, I have shared the &lt;a href="https://javarevisited.blogspot.com/2018/02/top-5-spring-microservices-courses-with-spring-boot-and-spring-cloud.html"&gt;best Microservice courses&lt;/a&gt;, and &lt;a href="https://javarevisited.blogspot.com/2021/09/microservices-design-patterns-principles.html"&gt;Microservice design patterns&lt;/a&gt; and in this article,  I am going to share the best Microservice Framework for Java developers. &lt;/p&gt;

&lt;p&gt;While &lt;a href="https://javarevisited.blogspot.com/2018/05/top-5-courses-to-learn-spring-boot-in.html"&gt;Spring Boot&lt;/a&gt; and &lt;a href="https://javarevisited.blogspot.com/2018/04/top-5-spring-cloud-courses-for-java.html#axzz6jsdEHyTp"&gt;Spring Cloud&lt;/a&gt; is the leading framework for developing Microservice applications in Java, there are a couple of more new options has emerged in last year &lt;a href="https://javarevisited.blogspot.com/2020/09/top-5-courses-to-learn-dropwizard-Micronaut-Quarkus-Java-Microservices.html"&gt;MicroNaut&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/10-best-free-dropwizard-vert-x-micronaut-and-quarkus-online-courses-for-java-developers-9c2b4161f17"&gt;DropWizard&lt;/a&gt;, and Quarkus IO. &lt;/p&gt;

&lt;p&gt;In this article, you will learn about the top 6 frameworks you can use to develop Microservice in Java. Along the way, I will share useful resources like online courses you can use to learn these Java frameworks for Microservices. &lt;/p&gt;

&lt;p&gt;While most of these frameworks are new and there are not many resources available about how to use these frameworks for developing production-quality Microservices in Java, except documentation and some tutorials here and there, along the way, I will also share some useful resources like online courses and books to learn these frameworks like online courses and tutorials.&lt;/p&gt;

&lt;p&gt;By the way, if you want to learn about Microservice architecture, principle and concepts then you can also checkout  &lt;a href="https://www.educative.io/courses/introduction-microservice-principles-concepts?affiliate_id=5073518643380224"&gt;&lt;strong&gt;An Introduction to Microservice Principles and Concepts&lt;/strong&gt;&lt;/a&gt; course on Educative. This interactive course is good to learn basics of Microservices. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/introduction-microservice-principles-concepts?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g7b98aSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/525/1%2ARXvRgA_aP-aEiMLHaEa7Xg.png" alt="best Java Microservices Frameworks and libraries " width="525" height="261"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-are-microservices-what-benefits-microservices-offers"&gt;
  &lt;/a&gt;
  What are Microservices? What benefits Microservices Offers?
&lt;/h3&gt;

&lt;p&gt;When you search for Microservices on the internet, you will find a lot of different definitions, some of them are too technical and some of them are too easy to describe what is Microservice.&lt;/p&gt;

&lt;p&gt;I am going to explain this based upon my own experience, this may not be the perfect or most accurate definition of Microservice, but this is what you will build or see when you work on a Microservice architecture or application.&lt;/p&gt;

&lt;p&gt;Before going to &lt;a href="https://www.java67.com/2021/04/5-free-microservice-courses-for-java.html"&gt;Microservices&lt;/a&gt;, let's take a step back and try to understand the evolution of application architecture and what caused the development of Microservices in the software development world.&lt;/p&gt;

&lt;p&gt;Long back there was a time when we just maintain one application, one code-based, and they are also deployed into each machine.&lt;/p&gt;

&lt;p&gt;For example, Windows software like Microsoft Word and other PC games. When we needed more functionality we just keep adding them into source code. This means after some years, your codebase is quite large, and adding or changing a single functionality requires a lot of regression testing, affecting delivery timelines and efforts.&lt;/p&gt;

&lt;p&gt;People realized this and they created best practices to divide code into different modules. The idea is that each module should be independent of each other so that you can develop, test, and deploy them separately, and Web applications are born.&lt;/p&gt;

&lt;p&gt;In the case of &lt;a href="https://javarevisited.blogspot.com/2020/06/top-5-courses-to-learn-python-full-stack-web-development.html"&gt;Web applications&lt;/a&gt;, you don't need to deploy the whole application to the client machine, all you need is a browser and it can connect to the server to get whatever it needs to function. Now, you don't need to deploy the client and server on the same machine.&lt;/p&gt;

&lt;p&gt;This evolution continues on the server-side as well and people started breaking down a big monolithic application into multiple standalone, independent smaller applications, or should I say micro applications.&lt;/p&gt;

&lt;p&gt;These Micro applications provide one service and completely focus on that like authorization, authentication, service discovers load balancing, etc and they are known as &lt;a href="https://medium.com/javarevisited/8-best-online-courses-to-learn-service-oriented-soa-and-microservices-architecture-94c01d6b94e6"&gt;MicroService&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The architecture where we have multiple Micro applications providing different services connect to each and perform as one application is known as &lt;a href="https://javarevisited.blogspot.com/2021/09/microservices-design-patterns-principles.html"&gt;Microservice architecture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, you might be thinking what is the benefit of it? Well, these Microservices are very small as compared to Monolithic applications which means you can develop, test, and deploy them quickly and independently. This really improves the delivery and release cycle.&lt;/p&gt;

&lt;p&gt;It also makes a distributed architecture where you can deploy &lt;a href="https://javarevisited.blogspot.com/2018/02/top-5-spring-microservices-courses-with-spring-boot-and-spring-cloud.html"&gt;Microservices&lt;/a&gt; on a different host or same host, this means better utilization of server resources like storage, memory, and CPU. And, finally, it also helps with scalability as you can quickly spawn new instances of the service whose demand is increasing.&lt;/p&gt;

&lt;p&gt;For example, let's think about Amazon Prime Day when a lot of people shop and traffic to the Amazon site increases, at that point you need more processes to handle those checkouts, so you will create new instances of those processes but you don't need to scale other services which are not prime related, like services which are indexing Amazon products.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmicroservices-with-spring-boot-and-spring-cloud%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i22F0jLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-s0DgY3SKmac/YMbZezvmxSI/AAAAAAAAoPA/Z1GNpvIX1hoWHnFM1hTsU8SnxqUxBbdYgCLcBGAsYHQ/w451-h275/best%252BJava%252BMicroservice%252BFrameworks.png" alt="Top 5 Frameworks for creating Microservices in Java" width="451" height="275"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-best-java-frameworks-for-microservice-and-cloud-native-development"&gt;
  &lt;/a&gt;
  5 Best Java Frameworks for Microservice and Cloud Native Development
&lt;/h2&gt;

&lt;p&gt;So, this was my explanation of Microservices in general. As I have said, this may not be accurate or technically correct, but this is what you will see in most the places where a Microservice architecture is actually implemented.&lt;/p&gt;

&lt;p&gt;Now that we know what is Microservice and what are its benefits, let's explore a couple of &lt;a href="https://medium.com/javarevisited/5-essential-frameworks-every-java-developer-should-learn-6ed83315f1fb"&gt;best Java frameworks&lt;/a&gt; that can help you to develop Microservices in Java.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-spring-boot-spring-cloud"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://spring.io/projects/spring-boot"&gt;Spring Boot +  Spring Cloud&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;There is no doubt that Spring Boot together with Spring Cloud is the best option for developing Microservices in Java. It's the most established and tested framework and you will find a bigger community to support you when you are stuck.&lt;/p&gt;

&lt;p&gt;Apart from up-to-date and in-depth documentation, there are also a lot of resources available online when it comes to learning Spring Boot and Spring Cloud, like Spring Boot Microservices course on Udemy which can get you started in no time.&lt;/p&gt;

&lt;p&gt;These are the very important point when you are starting from scratch because you need to learn quickly and deliver quickly.&lt;/p&gt;

&lt;p&gt;Now coming towards feature, Spring Cloud provides many features out-of-the-box which are needed in a Microservice architecture like service discovery and load balancing. It follows Netflix Microservice architecture, which is also the most common implementation.&lt;/p&gt;

&lt;p&gt;If you want to learn Spring Boot and Spring Cloud for Microservice development in Java and need a resource, I highly recommend &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmicroservices-with-spring-boot-and-spring-cloud%2F"&gt;Master Microservices with Spring Boot and Spring Cloud&lt;/a&gt;&lt;/strong&gt; course by Ranga Karnam of In28Minutes. &lt;/p&gt;

&lt;p&gt;This 19.5-hour course is a great resource to learn Microservice with Spring Boot for both beginners and intermediate Java developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmicroservices-with-spring-boot-and-spring-cloud%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5oU-s9gV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-_9YMxOe0KEk/YMbZPM6cruI/AAAAAAAAoOw/5vQc1ck6hKEv62OA1tcQMRiMsHLAsiVQwCLcBGAsYHQ/w384-h217/Spring-BOOT-Interview-questions-1.jpg" alt="best Frameworks for creating Microservices in Java" width="384" height="213"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because of community, resources, and features, I personally think Spring Boot + Spring Cloud is the best Java framework for Microservice development. &lt;/p&gt;

&lt;p&gt;Btw, I am not alone, Marcus Biel, a Java Champion, and fellow Twitterati have asked his readers to choose between different Microservice frameworks, and Spring Boot comes out as the most popular option.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-quarkusio"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://quarkus.io/"&gt;QuarkusIO&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Quarkus is another full-stack, Kubernetes-native Java framework made for Java virtual machines (JVMs) and native compilation, optimizing Java specifically for containers and enabling it to become an effective platform for serverless, cloud, and Kubernetes environments.&lt;/p&gt;

&lt;p&gt;Quarkus is backed by Redhat and it's quickly gaining ground for creating high-performance, and scalable Java applications. One of the key features of Quarkus based applications is fast boot time.&lt;/p&gt;

&lt;p&gt;Many Java programmers are looking to try Quarkus for fast and reactive Microservices and if you also want to learn Quarkus in 2022, I highly recommend you to check out this &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fquarkus-starting-with-quarkus%2F"&gt;Starting with Quarkus&lt;/a&gt;&lt;/strong&gt; course by Antonio Goncalves, one of the Quarkus pioneers on Udemy. This 3.5-hour long course is a great starting point for any Java developer willing to learn Quarkus.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fquarkus-starting-with-quarkus%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tYuhoSbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-mP51mLEXiEw/YMbYTXBKQmI/AAAAAAAAoNw/5Avn9BYfMI0yUhEL75FkOSMJorKU1BFyACLcBGAsYHQ/w412-h224/Quarkus_looser.png" alt="Quarkus best Java framework for Microservice Development" width="411" height="224"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-micronaut"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://micronaut.io/"&gt;MicroNaut&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is another modern, JVM-based, full-stack framework for building modular, easily testable microservice and serverless applications. &lt;/p&gt;

&lt;p&gt;Micronaut is getting a lot of love from the Java community and with big companies like Oracle and JetBrains putting their weight behind MicroNaut may emerge as a strong contender to &lt;a href="https://medium.com/javarevisited/10-advanced-spring-boot-courses-for-experienced-java-developers-5e57606816bd"&gt;Spring Boot&lt;/a&gt; and &lt;a href="https://medium.com/javarevisited/10-best-java-microservices-courses-with-spring-boot-and-spring-cloud-6d04556bdfed"&gt;Spring cloud&lt;/a&gt; in near future.&lt;/p&gt;

&lt;p&gt;When it comes to technical things, there is a key difference between MicroaNaut and Spring Framework, Spring which relies exclusively on runtime reflection and proxies, Micronaut uses compile-time data to implement dependency injection.&lt;/p&gt;

&lt;p&gt;This is not a new approach but approaches are taken by tools such as Google's Dagger, which is designed primarily with Android in mind.&lt;/p&gt;

&lt;p&gt;Another interesting thing to know about MicroNaut is that it's created by OCI, the same company that created Grails, a popular web development framework for Groovy developers.&lt;/p&gt;

&lt;p&gt;The current version of MicroNaut is MicroNaut 2.5 which supports Gradle 6.5 and incremental compilation and has better reactive libraries for Microservices. &lt;/p&gt;

&lt;p&gt;If you want to learn MicroNaut in 2022 and need a resource, I also recommend you to check out &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Flearn-micronaut%2F"&gt;Learn Micronaut - cloud-native microservices with Java &lt;/a&gt;&lt;/strong&gt;course by Daniel Prinz on Udemy. This 6.5-hour long course is a great resource to learn MicroNaut from scratch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Flearn-micronaut%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cocIS0EA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-A7b0-LT7p2U/YMbYEeJ4GuI/AAAAAAAAoNk/rI1HF-aRy78TGHvMkm2NLuVjFyplmzdcwCLcBGAsYHQ/w408-h223/Micronaut_OG_Logo.png" alt="best course to learn MicroNaut for Java Programmers" width="408" height="223"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-dropwizard"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://www.dropwizard.io/en/latest/"&gt;DropWizard&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;DropWizard is another powerful framework for creating RESTful web services and microservices. It uses popular Java libraries like Jetty, &lt;a href="https://www.java67.com/2019/09/3-ways-to-ignore-null-fields-in-json-java-jackson.html"&gt;Jackson&lt;/a&gt;, and Jersey for creating high-performance Java applications quicker and easier.&lt;/p&gt;

&lt;p&gt;The good thing about DropWizard is that it provides in-built support for configuration, monitoring, metrics, and many more operational tasks. When it comes to learning DropWizard there are not many resources available.&lt;/p&gt;

&lt;p&gt;You can check documentation but if you are looking for books and online courses, then there are not many, I only find &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fgetting-started-with-dropwizard%2F"&gt;Getting started with Dropwizard&lt;/a&gt;&lt;/strong&gt; course on Udemy which is kind of ok, not the best but you can still start with DropWizard by following this course.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fgetting-started-with-dropwizard%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9tjgjYTw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-VD1cjsVCa5A/YMbYjGfhRSI/AAAAAAAAoOM/urcm2nYRu8c5h059szff666bWqQMqMF1gCLcBGAsYHQ/w519-h206/b288c33266fd6ddf99b5f93f583c0664.png" alt="best online course to learn DropWizard for beginners" width="519" height="205"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-microprofile"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://microprofile.io/"&gt;MicroProfile&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Eclipse MicroProfile is an initiative to optimize Java EE for Microservice architecture. It aims to provide a vendor-neutral specification to create &lt;a href="https://javarevisited.blogspot.com/2019/03/5-courses-programmers-can-join-to-learn.html"&gt;Microservices architecture&lt;/a&gt; by leveraging Java EE. &lt;/p&gt;

&lt;p&gt;The specification has been created by experts and backed by organizations like IBM, RedHat, and Oracle, which makes it great to use for Microservice development and deployment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2018/01/how-to-learn-spring-core-spring-mvc-boot-security-framework.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fOadiomw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-XB6eirhf5HI/YMbYZE5zRoI/AAAAAAAAoOA/BJSMq348g-Q2nnFsaGn6nQRdjCRuvBgPQCLcBGAsYHQ/microprofile-logo.png" alt="" width="512" height="181"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-eclipse-vertx"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://vertx.io/"&gt;Eclipse Vert.x&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Vert.x from Eclipse is a lightweight framework to develop &lt;a href="https://javarevisited.blogspot.com/2021/04/best-reactive-spring-and-webflux-courses-for-java-developers.html"&gt;Reactive Microservices&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;It supports a non-blocking and asynchronous development model and allows you to run your distributed application runs on top of a &lt;a href="https://javarevisited.blogspot.com/2019/04/top-5-courses-to-learn-jvm-internals.html"&gt;Java Virtual Machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unlike Spring Boot which provides in one solution Vert.x doesn't provide an all-in-one solution instead it provides a toolkit and building block to build your own component. Since it's a toolkit, it provides flexibility to use it as a standalone or embed it inside Spring itself.&lt;/p&gt;

&lt;p&gt;In fact, many Microservice frameworks like QuarkusIO used Vert.x for their low-level need like TCP and HTTP. &lt;/p&gt;

&lt;p&gt;If you want to learn Vert.x in 2022 and looking for resources then I also suggest you check out this &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Freactive-web-applications-with-vertx-and-vuejs%2F"&gt;Learn Vert.x - Reactive microservices with Java&lt;/a&gt;&lt;/strong&gt; course by Daniel Prinz on Udemy.  This 9.5-hour long course is a great resource to start with Vert.x for Reactive Microservice development in 2022.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Freactive-web-applications-with-vertx-and-vuejs%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uOjb4tuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-wzdgPXqXgq0/YMbYnvJm2VI/AAAAAAAAoOU/BHxV6bWv6pACnR-xf0gjSkjbPuDCGksxQCLcBGAsYHQ/w432-h240/openapi_vertx.png" alt="best course to learn Vert.x for Reactive Microservices in Java" width="432" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all about some of the &lt;strong&gt;best Java Frameworks for Microservice development in 2022.&lt;/strong&gt; While most of the organizations use Spring Boot and Spring Cloud for creating their RESTful web services and Microservices but you can also learn more modern alternatives like QuarkusIO and Micronaut. &lt;/p&gt;

&lt;p&gt;I have also tried to suggest useful resources where you can learn these frameworks. If you have any other framework to add to this list feel free to comment.&lt;/p&gt;

&lt;p&gt;Other &lt;strong&gt;Java and Development Articles&lt;/strong&gt; you may like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/10/the-java-developer-roadmap.html"&gt;The 2022 Java Developer RoadMap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/03/top-20-skills-java-developers-can-learn.html#axzz6k4XBgTw4"&gt;21 Tech Skills Every Java Developer Should Learn &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/01/top-20-libraries-and-apis-for-java-programmers.html"&gt;20 Libraries Java developer should know&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-free-courses-to-learn-java-in-2019-22d1f33a3915"&gt;My favorite free courses to learn Java in depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/06/top-6-spring-framework-online-courses-Java-programmers.html"&gt;Top 5 courses to learn Spring Framework in Depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-free-courses-to-learn-maven-jenkins-and-docker-for-java-developers-51fa7a1e66f6"&gt;10 Free courses to learn Maven, Jenkins, and Docker&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2018/02/10-books-java-developers-should-read-in.html"&gt;10 Books Java Developers Should Read in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dev.to/javinpaul/11-essential-skills-software-developers-should-learn-in-2020-1bio"&gt;11 Essential Skills for Every Software Developer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/05/10-tips-to-become-better-java-developer.html"&gt;10 Tips to become a better Java Developer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2020/09/top-10-cloud-certification-you-can-aim.html"&gt;10 AWS and Cloud Certifications to Aim in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2018/04/10-tools-java-developers-should-learn.html"&gt;10 Tools Every Java Developer Learn in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2018/06/5-best-courses-to-learn-spring-boot-in.html"&gt;Top 5 Courses to learn Spring Boot in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/01/10-frameworks-java-and-web-developers-should-learn.html"&gt;10 Frameworks for Java and Web Developer in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2017/12/10-programming-languages-to-learn-in.html"&gt;10 Programming languages to Learn in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks, for reading this article so far. If you like these &lt;em&gt;best Java Microservice frameworks&lt;/em&gt; then please share them with your friends and colleagues. If you have any questions or feedback then please drop a note.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you are keen to jump into the world of Microservices and looking for free online courses to learn Microservice development then you may also like to explore &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fspring-microservices-with-spring-boot-spring-cloud-training%2F"&gt;Master Spring Microservices with Spring Boot &amp;amp; Spring Cloud!&lt;/a&gt;&lt;/strong&gt;  course by Karthikeya T on Udemy. This 1-hour long free hands-on course is a great way to start building Microservice in Java.&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>microservices</category>
      <category>softwaredevelopment</category>
    </item>
    <item>
      <title>Appwrite ❤ Appsmith: The perfect open-source duo for your business apps</title>
      <author>Aditya Oberai</author>
      <pubDate>Tue, 30 Nov 2021 12:35:08 +0000</pubDate>
      <link>https://dev.to/appwrite/appwrite-appsmith-the-perfect-open-source-duo-for-your-business-apps-4dae</link>
      <guid>https://dev.to/appwrite/appwrite-appsmith-the-perfect-open-source-duo-for-your-business-apps-4dae</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uENmCvSusMI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Last week, we at &lt;strong&gt;Appwrite&lt;/strong&gt; collaborated with the &lt;strong&gt;Appsmith&lt;/strong&gt; team to showcase how businesses can leverage both of these amazing open source solutions to build apps and dashboards faster and better 🥳. We had an amazing session where &lt;a href="https://github.com/Meldiron"&gt;&lt;strong&gt;Matej&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://github.com/cokoghenun"&gt;&lt;strong&gt;Confidence&lt;/strong&gt;&lt;/a&gt; showcased the capabilities of these platforms by building a demo application for our audience! LIVE!! 😍&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Meldiron"&gt;
        Meldiron
      &lt;/a&gt; / &lt;a href="https://github.com/Meldiron/appwrite-appsmith-demo"&gt;
        appwrite-appsmith-demo
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Demo application to showcase communication between Appwrite and Appsmith
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;If you have any further questions or simply want to hang out with some awesome open source geeks, you can &lt;strong&gt;join the Appwrite team and community&lt;/strong&gt; on &lt;a href="https://appwrite.io/discord"&gt;&lt;strong&gt;our Discord server&lt;/strong&gt;&lt;/a&gt;💝.&lt;/p&gt;

</description>
      <category>appwrite</category>
      <category>appsmith</category>
      <category>lowcode</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>WhatsApp API
</title>
      <author>jamal010101</author>
      <pubDate>Tue, 30 Nov 2021 12:16:27 +0000</pubDate>
      <link>https://dev.to/jamal010101/whatsapp-api-3ccj</link>
      <guid>https://dev.to/jamal010101/whatsapp-api-3ccj</guid>
      <description>&lt;p&gt;WhatsApp API gateway for sending messages&lt;br&gt;
Start working with Ultramsg and send messages via WhatsApp REST API, we will provide everything you need about infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/31cumZg"&gt;https://bit.ly/31cumZg&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Scrimba JavaScript course </title>
      <author>Khushi✨</author>
      <pubDate>Tue, 30 Nov 2021 11:59:31 +0000</pubDate>
      <link>https://dev.to/krimson/scrimba-javascript-course-4ejd</link>
      <guid>https://dev.to/krimson/scrimba-javascript-course-4ejd</guid>
      <description>&lt;p&gt;So I completed this free JavaScript course by Per Harald Borgen from Scrimba to brush up my JavaScript knowledge before I start with React (from Scrimba again 😌)&lt;/p&gt;

&lt;p&gt;This course was a breath of fresh air as I was drowning in tutorial hell, unable to gain practical knowledge and confidence, which the interactive 'scrims' provide; it's genuinely an awesome feature, keeps me attentive and interested.&lt;/p&gt;

&lt;p&gt;Per was very encouraging and explained everything very well, all the mini tasks were perfectly challenging and full of learning. I think this is the first ever course on the internet that I have completed 🤣, and I think we all can relate with this.&lt;/p&gt;

&lt;p&gt;Along the course, we developed 3 simple apps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Subway Passenger Counter&lt;/li&gt;
&lt;li&gt;Blackjack Casino Game&lt;/li&gt;
&lt;li&gt;Chrome Extension (to save leads/tab URL)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And covered the following concepts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;const &amp;amp; let&lt;/li&gt;
&lt;li&gt;strings&lt;/li&gt;
&lt;li&gt;numbers&lt;/li&gt;
&lt;li&gt;booleans&lt;/li&gt;
&lt;li&gt;objects&lt;/li&gt;
&lt;li&gt;arrays&lt;/li&gt;
&lt;li&gt;functions&lt;/li&gt;
&lt;li&gt;methods&lt;/li&gt;
&lt;li&gt;for loops&lt;/li&gt;
&lt;li&gt;logical operators&lt;/li&gt;
&lt;li&gt;mathematical operators&lt;/li&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;li&gt;Math object&lt;/li&gt;
&lt;li&gt;DOM manpulation&lt;/li&gt;
&lt;li&gt;getElementById()&lt;/li&gt;
&lt;li&gt;querySelector()&lt;/li&gt;
&lt;li&gt;addEventListener()&lt;/li&gt;
&lt;li&gt;innerText&lt;/li&gt;
&lt;li&gt;textContent&lt;/li&gt;
&lt;li&gt;innerHTML&lt;/li&gt;
&lt;li&gt;conditional statements&lt;/li&gt;
&lt;li&gt;truthy vs falsy values&lt;/li&gt;
&lt;li&gt;template strings&lt;/li&gt;
&lt;li&gt;localStorage&lt;/li&gt;
&lt;li&gt;debugging with Google&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;PS: Finally wrote my first ever blog, because Per told me to do so at the end of this course&lt;/strong&gt; 😎&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How run background python scripts in Linux</title>
      <author>Paulo Mota</author>
      <pubDate>Tue, 30 Nov 2021 11:54:20 +0000</pubDate>
      <link>https://dev.to/phmota/how-run-background-python-scripts-in-linux-13e5</link>
      <guid>https://dev.to/phmota/how-run-background-python-scripts-in-linux-13e5</guid>
      <description>&lt;p&gt;Let a python script running in linux server with no worries&lt;/p&gt;

&lt;p&gt;It's simple just open your terminal in Linux and use the command and close the terminal&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nohup python3 -u yourpythonfile.py &amp;gt; out.out&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;the argument "&amp;gt; out.out" will create the log file in the same folder that you run that command and when you open the terminal again to check how is the script you can use this command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nano out.out&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now if you are using Google Cloud or AWS virtual machines, and you would like to shut down the machine after the execution to &lt;strong&gt;avoid extra costs $$&lt;/strong&gt; you can use this command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nohup bash -c python3 -u yourpythonfile.py ; sudo shutdown -h now &amp;gt; out.out &amp;amp;﻿&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---zm2s-p1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kydhp22w2v7qgj2h6hyl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---zm2s-p1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kydhp22w2v7qgj2h6hyl.gif" alt="Image description" width="400" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>python</category>
      <category>aws</category>
      <category>googlecloud</category>
    </item>
    <item>
      <title>Parallex Effect in CSS!</title>
      <author>Ustariz Enzo</author>
      <pubDate>Tue, 30 Nov 2021 11:42:51 +0000</pubDate>
      <link>https://dev.to/ziratsu/parallex-effect-in-css-4235</link>
      <guid>https://dev.to/ziratsu/parallex-effect-in-css-4235</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;Learn how to do a &lt;em&gt;parallex effect in CSS&lt;/em&gt; in less than a minute! &lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TqF45C7mpZg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-html-structure"&gt;
  &lt;/a&gt;
  1. The HTML structure.
&lt;/h2&gt;

&lt;p&gt;Create three sections that contain a title each:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"s1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;SECTION 1&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"s2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;SECTION 2&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"s3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;SECTION 3&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-style-each-section"&gt;
  &lt;/a&gt;
  2. Style each section.
&lt;/h2&gt;

&lt;p&gt;Make sure each section takes up the full height of the viewport and that the background covers the whole space and is centered:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-style-the-titles"&gt;
  &lt;/a&gt;
  3. Style the titles.
&lt;/h2&gt;

&lt;p&gt;Style the titles however you want, here's how I did it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F1F1F1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;55px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-add-the-background-images"&gt;
  &lt;/a&gt;
  4. Add the background images.
&lt;/h2&gt;

&lt;p&gt;Add your assets to a folder and then add them as backgrounds to each section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.s1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(imgs/img1.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.s2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(imgs/img2.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.s3&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(imgs/img3.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-add-the-parallex-effect"&gt;
  &lt;/a&gt;
  5. Add the parallex effect.
&lt;/h2&gt;

&lt;p&gt;In the section styling, add a background-attachment: fixed so that each image are fixed to the background of the different sections.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-attachment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you scroll down your app, you'll see that each image wipes out the one above or below it!&lt;/p&gt;

&lt;p&gt;You can now create a simple &lt;em&gt;parallex effect in pure CSS&lt;/em&gt; in under a minute ;)&lt;/p&gt;

&lt;p&gt;Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo. &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>So you have an idea for a startup—here's how to build it</title>
      <author>Austin Shelby</author>
      <pubDate>Tue, 30 Nov 2021 11:36:33 +0000</pubDate>
      <link>https://dev.to/austinshelby/so-you-have-an-idea-for-a-startup-heres-how-to-build-it-5cpj</link>
      <guid>https://dev.to/austinshelby/so-you-have-an-idea-for-a-startup-heres-how-to-build-it-5cpj</guid>
      <description>&lt;p&gt;So you have an idea for the next unicorn startup and the only thing between you and success is actually building it.&lt;/p&gt;

&lt;p&gt;I have been there too and while my side projects never got to a billion dollar evaluation—I learned how to build them. Quickly and efficiently.&lt;/p&gt;

&lt;p&gt;After reading this article you will have the knowledge to choose the correct tech stack for your startup that the top 0.1% of companies are using.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-jamstack"&gt;
  &lt;/a&gt;
  What is Jamstack
&lt;/h2&gt;

&lt;p&gt;The most important factor for startups is to create websites quickly without compromising the development of features added in the future.&lt;/p&gt;

&lt;p&gt;There have been numerous website architectures emerging from this need but only one of them has really gotten mainstream attention.&lt;/p&gt;

&lt;p&gt;It’s called Jamstack.&lt;/p&gt;

&lt;p&gt;Some of the main benefits of Jamstack architecture are speed, security, developer experience, and the ease of scaling.&lt;/p&gt;

&lt;p&gt;Just like the technology director at Pac Macmillan—James Luscombe says about moving their tech stack to Jamstack:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The move to the Jamstack was about speed, accessibility, and taking the worry out of deployment&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article we will be building a Jamstack based architecture where most of your efforts can be put into actually programming the core business logic of your website instead of having to worry about the boring stuff.&lt;/p&gt;

&lt;p&gt;Instead of focusing on individual technologies, I want you to understand the general concepts behind choosing each piece.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-best-frontend"&gt;
  &lt;/a&gt;
  The best frontend
&lt;/h2&gt;

&lt;p&gt;The best tool to build a frontend for startups is Next.js. Even people not so familiar with frontend web development have heard about Next.js&lt;/p&gt;

&lt;p&gt;There are a few good reasons for it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It comes &lt;em&gt;batteries included&lt;/em&gt; greatly reducing the time to setup a project&lt;/li&gt;
&lt;li&gt;It has exceptionally low page load times which is great for Core Web Vitals and SEO&lt;/li&gt;
&lt;li&gt;It comes with kick ass features like i18n, routing, server-side rendering, and now middlewares.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are not sure if your website's performance is limiting your ranking on search engine results, take my &lt;a href="https://www.austinshelby.com/resources/core-web-vitals-test"&gt;core web vitals test&lt;/a&gt; (takes 3 seconds) to check your score.&lt;/p&gt;

&lt;p&gt;Instead of having to build a backend just to create a few API endpoints so you can get the data to your frontend, Next.js allows you to directly query data source of your choice from the frontend.&lt;/p&gt;

&lt;p&gt;Of course they ingeniously keep this secure by using either static site generation or server side rendering.&lt;/p&gt;

&lt;p&gt;Which, as I mentioned earlier greatly reduces development time as you don’t need a dedicated backend.&lt;/p&gt;

&lt;p&gt;Instead, you can put your efforts into building a more smart content management solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-best-backend"&gt;
  &lt;/a&gt;
  The best backend
&lt;/h2&gt;

&lt;p&gt;When choosing a backend you have to consider who is going to be using your website and for what purpose.&lt;/p&gt;

&lt;p&gt;Do they need a visual interface?&lt;/p&gt;

&lt;p&gt;Are they going to be manually entering data?&lt;/p&gt;

&lt;p&gt;Based on what we know so far about building minimum viable products we are going to be looking at two different solutions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GraphCMS&lt;/li&gt;
&lt;li&gt;Fauna&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again to remind you, the main thing we are looking for is a backend that allows us to focus on the business logic without having to worry about the boring stuff—&lt;strong&gt;greatly reducing the development time&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-easiest-solution"&gt;
  &lt;/a&gt;
  The easiest solution
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://graphcms.com/"&gt;GraphCMS&lt;/a&gt; comes with an easy to use and simple graphical UI that allows non-technical people to add, edit, delete, and publish content.&lt;/p&gt;

&lt;p&gt;Unlike most content management systems GraphCMS allows you to also create items programmatically, not only read.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HLSKob_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fv339guqgdruwfgbetgk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HLSKob_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fv339guqgdruwfgbetgk.png" alt="GraphCMS UI" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the name suggests, it comes out of the box with a GraphQL API. The documentation is excellent and the very generous free tier allows you to kick-start your business in record time.&lt;/p&gt;

&lt;p&gt;It comes with some pro features like localization and remote data fetching to federate content from external sources.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GraphCMS gives you instant GraphQL Content APIs to create, enrich, unify, and deliver your content across platforms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-best-solution-for-speed"&gt;
  &lt;/a&gt;
  The best solution for speed
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://fauna.com/"&gt;FaunaDB&lt;/a&gt; is the closest you can get to the database without compromising developer experience or productivity.&lt;/p&gt;

&lt;p&gt;Simply put, it is the best solution when you need high performance, scalability, ACID transactions and advanced features like streaming.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cMn-2Mh4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcmvfuu2nfxmp7eucgj4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cMn-2Mh4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcmvfuu2nfxmp7eucgj4.png" alt="Fauna UI" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fauna prides itself in &lt;em&gt;Get started in minutes, without the heavy lift&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Fauna comes with a graphical user interface but it’s most powerful when used through the API with its own query language FQL.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Focus on your application instead of managing database clusters, provisioning capacity, creating replicas, or sharding data. Fauna does all the work for you behind the API so that you don’t have to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#hosting"&gt;
  &lt;/a&gt;
  Hosting
&lt;/h2&gt;

&lt;p&gt;Hosting is traditionally considered a very difficult thing to do.&lt;/p&gt;

&lt;p&gt;For example—you have to take care of CI/CD pipelines. This includes automated build and test setups. Deployment scripts, rollbacks and all kings of other boring stuff.&lt;/p&gt;

&lt;p&gt;The problem of creating all of this from scratch by yourself is that the time spent doing all of that is time NOT spent on building your actual product.&lt;/p&gt;

&lt;p&gt;We want a solution that already comes with all of those features.&lt;/p&gt;

&lt;p&gt;The hosting solution that I recommend is &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ylWDAgyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/778yi5xvab3mockk1hwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ylWDAgyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/778yi5xvab3mockk1hwg.png" alt="Netlify UI" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Netlify brings tons of features that you love and even more features that you probably didn’t even know you want like A/B testing.&lt;/p&gt;

&lt;p&gt;First of all their CDN is globally available meaning people from all over the world can access your website lightning fast.&lt;/p&gt;

&lt;p&gt;They are fully supporting the git feature branch workflow that agile teams all over the world love.&lt;/p&gt;

&lt;p&gt;They have preview deployments for each branch or pull request you make, making it easy to test your website on every change.&lt;/p&gt;

&lt;p&gt;Netlify has a very generous free tier meaning that you can get started without paying a single cent.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#third-party-services"&gt;
  &lt;/a&gt;
  Third party services
&lt;/h2&gt;

&lt;p&gt;Another major thing you have to focus on when building your startups is not reinventing the wheel.&lt;/p&gt;

&lt;p&gt;Time is money. So don’t waste it by building something from scratch when an already made solution exists.&lt;/p&gt;

&lt;p&gt;Instead of adding an elastic search database to your stack to get full text search, just use Algolia.&lt;/p&gt;

&lt;p&gt;Instead of reinventing video streaming and automatic image optimizations and sharing, just use Bunny CDN.&lt;/p&gt;

&lt;p&gt;By using third party services you can take the stress out of building your product by not having to worry about coding every little thing by yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now that you know why Jamstack won't slow you down when coding your product, you can confidently start to build your startup.&lt;/p&gt;

&lt;p&gt;Just like we covered, Jamstack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allows you to focus on programming the core business logic of your application&lt;/li&gt;
&lt;li&gt;Makes your website fast and secure&lt;/li&gt;
&lt;li&gt;Is easy to extend with third party APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are interested in the actual technical side of building a startup, take a look at &lt;a href="https://www.youtube.com/c/AustinShelby"&gt;my YouTube channel&lt;/a&gt; where I teach exactly that—using modern web development techniques.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
