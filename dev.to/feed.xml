<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to get the size of a directory in Linux</title>
      <author>Boyan Iliev</author>
      <pubDate>Thu, 04 Nov 2021 09:17:37 +0000</pubDate>
      <link>https://dev.to/boiliev/how-to-get-the-size-of-a-directory-in-linux-3bhd</link>
      <guid>https://dev.to/boiliev/how-to-get-the-size-of-a-directory-in-linux-3bhd</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Linux is one of the most popular operating systems in the world. It is Unix-like, and it is also open-source. Quite a big percentage of developers use Linux because it can be customized in so many ways.&lt;/p&gt;

&lt;p&gt;What's cool about Linux is its command line. Every 'hackers' paradise. There are a ton of commands. If you aren't familiar with any Linux commands, be sure to check out this post on the &lt;a href="https://devdojo.com/bo-iliev/8-linux-commands-everyone-should-know"&gt;8 Linux Commands Everyone Should Know&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is probably a command for almost anything that you want to do. For example what if you wanted to get the size of a directory? Well luckily for you there is a command for that. In this post, we are going to talk about that command and see what it can offer.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-du-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;du&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;This command lets the user get a quick view of the &lt;strong&gt;disk usage&lt;/strong&gt;. The best way to use it is by giving it the directory you want to see the size of. It should look a little something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;du directory_name

// output
2314    directory_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will give you the size of all the files and at the very end, it will give you the size of the directory itself. You could point out the full path, or you could just give the name of the directory you want to see if you are already on the same path.&lt;/p&gt;

&lt;p&gt;But we could make this even easier just b adding 2 &lt;strong&gt;flags&lt;/strong&gt;. Flags help the command change its behavior. For the &lt;code&gt;du&lt;/code&gt; command we could add the flags &lt;code&gt;-s&lt;/code&gt; and &lt;code&gt;-h&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-s&lt;/code&gt; stands for &lt;strong&gt;summarize&lt;/strong&gt; and it will show you only the total size of the directory, without all those files popping up on your screen.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-h&lt;/code&gt; stands for &lt;strong&gt;human-readable&lt;/strong&gt; and it will convert the size so that you can read it easier. Just by running the command without the &lt;code&gt;-h&lt;/code&gt; flag doesn't specify you a unit of measurement.&lt;/p&gt;

&lt;p&gt;So now to get the best of this command, you should run it like this with the &lt;code&gt;-s&lt;/code&gt; and &lt;code&gt;-h&lt;/code&gt; flags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;du -sh directory_name

// output
44.5M   directory_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if you wanted to see all of the directories sizes, you could just run this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;du -sh ./*

// output
12.2M   dir1
 2.5M   dir2
  55M   dir3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another thing you can do is use pipe(&lt;code&gt;|&lt;/code&gt;) and sort them by size, which will make it even easier for you to see their sizes. What &lt;code&gt;|&lt;/code&gt; does is get the output from the command behind it and add it into the input of the command after it. So to sort the directories by size just run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;du -sh ./* | sort -h

// output
  55M   dir3
12.2M   dir1
 2.5M   dir2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This is a pretty useful command that I think everybody should know, just because of how short and easy it is. I hope that this post has helped you and I wish you happy coding.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>terminal</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>dApps / Web3 - Help me finally understand / ELI5! </title>
      <author>InHuOfficial</author>
      <pubDate>Thu, 04 Nov 2021 08:09:50 +0000</pubDate>
      <link>https://dev.to/inhuofficial/dapps-web3-help-me-finally-understand-eli5-4dc3</link>
      <guid>https://dev.to/inhuofficial/dapps-web3-help-me-finally-understand-eli5-4dc3</guid>
      <description>&lt;p&gt;OK so I have read a few things about blockchain and dApps, I have listened to a few Twitter spaces and tried to educate myself on this.&lt;/p&gt;

&lt;p&gt;But I am still not seeing the actual big picture, rather than a hype train and I want to understand it finally!&lt;/p&gt;

&lt;p&gt;Crypto currencies make sense, NFTs kind of make sense (although the current "NFT points at a URL to prove ownership" model is flimsy at best) but dApps...they make no sense to me!&lt;/p&gt;

&lt;p&gt;How do you get minimal latency lookups (like how does DNS work on such a complex network). &lt;/p&gt;

&lt;p&gt;Why is it beneficial to have a distributed network where you don't control when the core "operating system" software updates and may be running different versions on different nodes. &lt;/p&gt;

&lt;p&gt;How do you roll back a major mistake that exposes user data (for example) fast enough to avoid problems? And on the same track, if a node gets compromised in some way, who is responsible for the breach (my understanding is limited so this might be unlikely, I don't know!) &lt;/p&gt;

&lt;p&gt;How is it better when it will inevitably result in more jumps and hops to data nodes, which won't be as efficient as large data centres and therefore use &lt;strong&gt;more&lt;/strong&gt; energy. &lt;/p&gt;

&lt;p&gt;Updating 10,000+ different data nodes rather than 6/7 CDNs seems like it is going to exponentially multiply data transmission data costs and energy costs.&lt;/p&gt;

&lt;p&gt;All of these questions assume that "Gas prices" drop to next to nothing and it becomes commercially viable of course, which at the moment it certainly isn't.&lt;/p&gt;

&lt;p&gt;Please, I may sound cynical, I am not really, I just don't see the Web3 benefits as clearly as everyone else apparently does!&lt;/p&gt;

&lt;p&gt;Also if my terminology is crap, apologies, ask me if something doesn't make sense!&lt;/p&gt;

</description>
      <category>web3</category>
      <category>webdev</category>
      <category>explainlikeimfive</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Angular 13 ya esta disponible</title>
      <author>Antonio Cardenas </author>
      <pubDate>Thu, 04 Nov 2021 08:02:43 +0000</pubDate>
      <link>https://dev.to/macaoblog/angular-13-ya-esta-disponible-2oce</link>
      <guid>https://dev.to/macaoblog/angular-13-ya-esta-disponible-2oce</guid>
      <description>&lt;p&gt;Articulo original de &lt;a href="https://blog.angular.io/"&gt;Angular Blog&lt;/a&gt; por &lt;a href="https://blog.angular.io/@markathompson"&gt;Mark Thompson&lt;/a&gt;&lt;br&gt;
¡Estamos de regreso con la nueva versión de Angular v13 para compartir con todos ustedes! Esta última versión trae todo tipo de actualizaciones y funciones para ayudar a sus equipos a crear aplicaciones geniales.&lt;br&gt;
Obtenga Angular v13 ahora ejecutando &lt;code&gt;ng update&lt;/code&gt; en su proyecto. También tenemos una guía de actualización disponible en update.angular.io para ayudar a los equipos a obtener instrucciones sobre cómo actualizar sus proyectos.&lt;/p&gt;

&lt;p&gt;Con cada nuevo lanzamiento  nuestro objetivo es encontrar maneras de mejorar Angular. En esta versión, lo hemos logrado mediante la expansión de las funciones y optimizaciones basadas en Ivy, asociándonos con nuestra excelente comunidad Angular y continuando brindando un proceso de actualización estable y fluido para sus equipos y proyectos.&lt;br&gt;
Comencemos con un vistazo a cómo estamos moviendo Angular hacia adelante con el poder de Ivy.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#moviendo-el-renderizado-angular-hacia-el%C2%A0futuro"&gt;
  &lt;/a&gt;
  Moviendo el renderizado Angular hacia el futuro
&lt;/h2&gt;

&lt;p&gt;En la versión v12 de mayo de 2021 hablamos sobre "Ivy Everywhere" y mencionamos que habría algunos cambios importantes en Angular para respaldar esta iniciativa. Hemos sido diligentes en la búsqueda de esto y estamos muy contentos de haber logrado algunos cambios impactantes en la versión 13, ya que Ivy continúa abriendo puertas para optimizaciones y mejoras.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#motor-de-estado-de-vista-state-of-view%C2%A0engine"&gt;
  &lt;/a&gt;
  Motor de estado de vista( State of View Engine)
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;View Engine&lt;/strong&gt; ya no está disponible en Angular a partir de v13. Esta es una gran noticia porque Angular puede continuar creando funciones basadas en Ivy que refuerzan su productividad con la plataforma. Eliminar View Engine también significa que Angular puede reducir su dependencia de ngcc (compilador de compatibilidad Angular) en el futuro, y los equipos pueden esperar una compilación más rápida porque los metadatos y los archivos de resumen ya no están incluidos.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#cambios-en-el-formato-de-paquete-angular%C2%A0apf"&gt;
  &lt;/a&gt;
  Cambios en el formato de paquete angular (APF)
&lt;/h2&gt;

&lt;p&gt;El formato de paquete angular (APF) se ha simplificado y modernizado para brindar un mejor servicio a los desarrolladores. Para optimizar el APF en v13, hemos eliminado los formatos de salida más antiguos, incluidos los metadatos específicos de View Engine.&lt;/p&gt;

&lt;p&gt;Para modernizarlo, lo hemos estandarizado en formatos JS más modernos, como ES2020. Las bibliotecas creadas con la última versión de APF ya no requerirán el uso de ngcc. Como resultado de estos cambios, los desarrolladores de bibliotecas pueden esperar un resultado de paquete más reducido y una ejecución más rápida.&lt;/p&gt;

&lt;p&gt;También actualizamos el APF para admitir las exportaciones de paquetes de nodos. Esto ayudará a los desarrolladores a no depender inadvertidamente de las API internas que pueden cambiar.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#actualizaciones-de-la-api-de-componentes"&gt;
  &lt;/a&gt;
  Actualizaciones de la API de componentes
&lt;/h2&gt;

&lt;p&gt;Ivy también permite mejoras en la calidad de vida en la forma en que los desarrolladores pueden crear componentes dinámicamente. La API ahora se ha simplificado. Antes de los cambios en Angular v13, la creación dinámica de componentes requería mucho código repetitivo.&lt;br&gt;
La nueva API elimina la necesidad de inyectar  &lt;code&gt;ComponentFactoryResolver&lt;/code&gt; en el constructor. Ivy crea la oportunidad de crear una instancia del componente con &lt;code&gt;ViewContainerRef.createComponent&lt;/code&gt; sin crear una fábrica asociada.&lt;/p&gt;

&lt;p&gt;A continuación, se muestra un ejemplo de creación de componentes con versiones anteriores de Angular:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Con la nueva API, este código puede convertirse en:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Tenemos muchas más mejoras de API como esta en proceso que serán habilitadas por Ivy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fin-del-soporte-de%C2%A0ie11"&gt;
  &lt;/a&gt;
  Fin del soporte de IE11
&lt;/h2&gt;

&lt;p&gt;Escuchamos sus comentarios y trabajamos para allanar el camino adelante hacia eliminación del soporte de IE11 en Angular v13.&lt;/p&gt;

&lt;p&gt;La eliminación de la compatibilidad con IE11 permite a Angular aprovechar las funciones modernas del navegador, como las variables CSS y las animaciones web a través de las API web nativas. Además, las aplicaciones serán más pequeñas y se cargarán más rápido porque podemos eliminar polyfills y rutas de código específicos de IE. También elimina la necesidad de carga diferencial. Los desarrolladores se beneficiarán de las API mejoradas y la infraestructura de construcción, mientras que los usuarios de la aplicación se beneficiarán de una carga más rápida y una experiencia de usuario mejorada.&lt;/p&gt;

&lt;p&gt;La ejecución de &lt;code&gt;ng update&lt;/code&gt; eliminará automáticamente estos polyfills específicos de IE y reducirá el tamaño del paquete durante la migración del proyecto.&lt;/p&gt;

&lt;p&gt;Gracias a todos los que participaron en la solicitud de comentarios (RFC). Los desarrolladores que aún necesitan admitir a los usuarios de IE11 para proyectos existentes pueden continuar usando Angular v12 y será admitido hasta noviembre de 2022.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mejoras-en-el-cli-de%C2%A0angular"&gt;
  &lt;/a&gt;
  Mejoras en el CLI de Angular
&lt;/h2&gt;

&lt;p&gt;A las actualizaciones de las herramientas de Angular. Angular ahora admite el uso de caché de compilación persistente de forma predeterminada para nuevos proyectos v13. Los valiosos comentarios de [RFC] Caché de compilación persistente de forma predeterminada llevaron a esta actualización de herramientas que da como resultado una mejora de hasta un 68% en la velocidad de compilación y opciones más ergonómicas. Para que los proyectos existentes que se han actualizado a v13 habiliten estas características, los desarrolladores pueden agregar esta configuración a &lt;code&gt;angular.json&lt;/code&gt;:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Obtenga más detalles en la &lt;a href="https://next.angular.io/cli/cache"&gt;documentación&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;¡ESBuild también ve algunas mejoras de rendimiento en esta versión! Presentamos &lt;code&gt;esbuild&lt;/code&gt;, que ahora funciona con &lt;code&gt;terser&lt;/code&gt; para optimizar los scripts globales. Además, &lt;code&gt;esbuild&lt;/code&gt; admite mapas de origen CSS y puede optimizar CSS global, así como optimizar todas las hojas de estilo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cambios-en-el-framework-y-actualizaciones-de-dependencias"&gt;
  &lt;/a&gt;
  Cambios en el Framework y actualizaciones de dependencias
&lt;/h2&gt;

&lt;p&gt;Angular v13 también presenta algunas actualizaciones útiles y cambios importantes. Primero, RxJS 7.4 es ahora el predeterminado para las aplicaciones creadas con ng new. Las aplicaciones existentes que usen RxJS v6.x deberán actualizarse manualmente usando el comando npm install &lt;a href="mailto:rxjs@7.4"&gt;rxjs@7.4&lt;/a&gt;. Para obtener más información sobre los cambios de la versión 6 a la versión 7, consulte este resumen en rxjs.dev.&lt;/p&gt;

&lt;p&gt;Si eso no fuera suficiente, ahora hay soporte para TypeScript 4.4. Puede encontrar más información consultando el blog de versiones de TypeScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mejoras-en-las-pruebas-en%C2%A0angular"&gt;
  &lt;/a&gt;
  Mejoras en las pruebas en Angular
&lt;/h2&gt;

&lt;p&gt;Hemos realizado algunas mejoras importantes en TestBed que ahora hacen un mejor trabajo al derribar los módulos y entornos de prueba después de cada prueba. El DOM ahora se limpia después de cada prueba y los desarrolladores pueden esperar pruebas más rápidas, menos intensivas en memoria, menos interdependientes y más optimizadas.&lt;/p&gt;

&lt;p&gt;Esta función se ha habilitado desde la versión 12.1.0 y ahora será la predeterminada y seguirá siendo personalizable. He aquí cómo: se puede configurar para todo el conjunto de pruebas a través del método &lt;code&gt;TestBed.initTestEnvironment&lt;/code&gt;:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;O se puede configurar por módulo actualizando el método &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt;:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Esto proporciona la flexibilidad para aplicar estos cambios donde tengan más sentido para cada proyecto y sus pruebas. Consulte este &lt;a href="https://dev.to/this-is-angular/improving-angular-tests-by-enabling-angular-testing-module-teardown-38kh"&gt;blog&lt;/a&gt; de &lt;a href="https://twitter.com/LayZeeDK"&gt;Lars Gyrup Brink Nielsen&lt;/a&gt; para obtener más información.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todo-sobre-componentes"&gt;
  &lt;/a&gt;
  Todo sobre componentes
&lt;/h2&gt;

&lt;p&gt;La accesibilidad (a11y) tiene que ser la base de todo lo que construimos dentro y fuera de la comunidad Angular. Nos tomamos esta responsabilidad en serio y el &lt;a href=""&gt;trabajo que hemos realizado&lt;/a&gt; ha dado como resultado mejoras y cambios significativos en los componentes de &lt;a href=""&gt;Angular Material&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Todos los componentes basados en MDC han sido evaluados para cumplir con estándares elevados en áreas como contraste, objetivos táctiles, ARIA y más.&lt;/p&gt;

&lt;p&gt;Para tener una mejor idea de cómo estos cambios afectan a los componentes, eche un vistazo a los ajustes que hemos realizado en los tamaños de los objetivos táctiles para componentes como la casilla de verificación y el botón de radio.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dBBtKeH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2A_FqkArEGigX11xR-" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dBBtKeH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2A_FqkArEGigX11xR-" alt="Una comparación de los tamaños de los objetivos táctiles." width="700" height="396"&gt;&lt;/a&gt; Los tamaños de la derecha son los nuevos tamaños.&lt;br&gt;
También ha habido algunas mejoras en los modos de alto contraste para múltiples componentes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxsQ6d1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2AoCPIThGrOpBrudqA" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxsQ6d1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2AoCPIThGrOpBrudqA" alt="Componentes de material en modo de alto contraste" width="700" height="362"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obtenga más información sobre estos cambios en la publicación de nuestro blog sobre &lt;a href="http://goo.gle/v13-accessibility"&gt;cómo mejorar la accesibilidad de Componentes en Angular&lt;/a&gt;. Esperamos que esto ayude a todos a crear aplicaciones angulares más inclusivas.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#otras-actualizaciones-notables"&gt;
  &lt;/a&gt;
  Otras actualizaciones notables
&lt;/h2&gt;

&lt;p&gt;Con el lanzamiento de &lt;a href="https://medium.com/ngesyfirebase/angular-11-7a6f8284ecbf"&gt;Angular v11&lt;/a&gt; en 2020, presentamos soporte para insertar fuentes de Google. Ahora, estamos ampliando la compatibilidad con &lt;a href="https://fonts.adobe.com"&gt;Adobe Fonts&lt;/a&gt;. Recuerde, las fuentes insertadas pueden mejorar el rendimiento de su aplicación al acelerar el &lt;a href="https://web.dev/first-contentful-paint"&gt;First Contentful Paint (FCP)&lt;/a&gt;. ¡Este cambio ahora está habilitado para todos de forma predeterminada! Todo lo que necesita hacer es actualizar. Tenemos un video sobre la inserción de fuentes que puede ser útil, compruébalo aquí:&lt;/p&gt;

&lt;p&gt;YouTube: &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yOpy9UMQG-Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hicimos cambios importantes en los documentos de angular.io para brindarles a los desarrolladores más información sobre la API de localización. Las guías de localización se han actualizado para incluir secciones más pequeñas para que el viaje de aprendizaje sea más claro. También agregamos más documentación de API para &lt;code&gt;$localize.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contribuciones-de-la-comunidad"&gt;
  &lt;/a&gt;
  Contribuciones de la comunidad
&lt;/h2&gt;

&lt;p&gt;La comunidad Angular nunca deja de destacar de una manera enorme al agregar características al framework. El equipo de Angular está increíblemente agradecido por una comunidad tan vibrante y solidaria. Dediquemos un momento a destacar algunas de las contribuciones que se incluyeron en esta versión.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#activardesactivar-validadores-din%C3%A1micamente"&gt;
  &lt;/a&gt;
  Activar/desactivar validadores dinámicamente
&lt;/h2&gt;

&lt;p&gt;Enviado por &lt;a href="https://twitter.com/iReal_Nirmal"&gt;Nirmal Bhagwani&lt;/a&gt;, este &lt;a href="https://github.com/angular/angular/pull/42565"&gt;PR&lt;/a&gt; permite que los validadores integrados se deshabiliten estableciendo el valor en &lt;code&gt;null&lt;/code&gt;. Esto se vuelve cada vez más útil al construir formularios dinámicos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#restaurar-el-historial-despu%C3%A9s-cancelar-la-navegaci%C3%B3n"&gt;
  &lt;/a&gt;
  Restaurar el historial después cancelar la navegación
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/aahmedayed"&gt;Ahmed Ayed&lt;/a&gt; contribuyó con un &lt;a href="https://github.com/angular/angular/pull/38884"&gt;PR&lt;/a&gt; que permite que el indicador del enrutador &lt;code&gt;canceledNavigationResolution&lt;/code&gt; restaure el valor calculado del historial del navegador cuando se configura como &lt;code&gt;computed&lt;/code&gt;(calculado).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Estas son algunas de las actualizaciones que destacamos, pero aún más contribuciones vinieron de la comunidad:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/angular/angular/commit/59225f5586f1319a47768cef2e3325d7ab6940aff"&gt;Haciendo que la API de SwUpdate sea un poco más ergonómica&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/angular/vscode-ng-language-service/commit/4fcbdb74ab82f74a832f7dbbc36adbffe51cc411"&gt;Configuración de Language Service para habilitar la aplicación automática del encadenamiento opcional en el símbolo que acepta valores NULL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/angular/angular/commit/4f3beffdbfa974b380b2225f163d363dd17e10bd"&gt;El enrutador emite eventos de activación / desactivación cuando un oulet se conecta/desconecta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;¡Y más!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un enorme agradecimiento a todos los miembros de la comunidad que han hecho contribuciones al Framework. Avanzamos juntos con Angular.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pensamientos-finales"&gt;
  &lt;/a&gt;
  Pensamientos finales
&lt;/h2&gt;

&lt;p&gt;Angular continúa avanzando con la ayuda de la comunidad estelar de Angular. Gracias a todos por sus contribuciones al repositorio. Además, gracias por sus valiosos comentarios en las RFC. Su apoyo nos ayuda a dar forma al futuro de Angular avanzando con &lt;a href="https://github.com/angular/angular/discussions/43784"&gt;componentes independientes&lt;/a&gt; y compatibles con los estándares web modernos.&lt;/p&gt;

&lt;p&gt;Para obtener una descripción general más detallada, consulte nuestro &lt;a href="https://github.com/angular/angular/blob/master/CHANGELOG.md"&gt;registro de cambios completo&lt;/a&gt;. Obtenga la última versión de Angular y háganos saber lo que piensa; puede encontrar una guía de actualización detallada en &lt;a href="https://update.angular.io/?locale=es-CR&amp;amp;v=12.0-13.0"&gt;update.angular.io.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hasta la próxima, amigos, vayan a crear aplicaciones geniales.&lt;/p&gt;

&lt;p&gt;Gracias a Igor Minar.&lt;/p&gt;

&lt;p&gt;puedes leer el articulo original &lt;a href="https://blog.angular.io/angular-v13-is-now-available-cce66f7bc296"&gt;aquí&lt;/a&gt; , Muchas gracias a la comunidad de Angular al equipo de desarrollo y a todos los que leen y comparten el contenido&lt;/p&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>spanish</category>
    </item>
    <item>
      <title>Luos community is open!</title>
      <author>Emanuel Allely</author>
      <pubDate>Thu, 04 Nov 2021 07:54:23 +0000</pubDate>
      <link>https://dev.to/luos/luos-community-is-open-3bp5</link>
      <guid>https://dev.to/luos/luos-community-is-open-3bp5</guid>
      <description>&lt;p&gt;📢 Hey fellow developers, the Luos Community is now open! Join it and discuss with other embedded developers searching for new open-source tools and methodologies to unleash embedded systems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Join the &lt;a href="http://bit.ly/JoinLuosSlack"&gt;Luos Slack Community&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Join the &lt;a href="http://bit.ly/JoinLuosDiscord"&gt;Luos Discord Community&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Join the &lt;a href="http://bit.ly/JoinLuosReddit"&gt;Luos Reddit Community&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Join the &lt;a href="http://bit.ly/JoinLuosForum"&gt;Luos Forum&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's build the future of #embedded together 🤲&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sTUbXRiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqt9n26p2ap1ir1cvm9t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sTUbXRiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqt9n26p2ap1ir1cvm9t.png" alt="Image description" width="880" height="253"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>luos</category>
      <category>embedded</category>
      <category>community</category>
      <category>opensource</category>
    </item>
    <item>
      <title>File Upload in Next js </title>
      <author>es404020</author>
      <pubDate>Thu, 04 Nov 2021 07:49:33 +0000</pubDate>
      <link>https://dev.to/es404020/file-upload-in-next-js-12i6</link>
      <guid>https://dev.to/es404020/file-upload-in-next-js-12i6</guid>
      <description>&lt;p&gt;As easy as file upload my sound to mid level or senior developer, junior developer still struggle to implement file upload without having to use the default input tag for file upload .In this tutorial we would learn how to implement file upload on a button click with next.js and Chakara UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;input type="file"
                  ref={hiddenFileInput}
                  onChange={handleChange}

                  accept="image/*"
                  style={{ display: 'none' }} /&amp;gt;


&amp;lt;IconButton onClick={handleClick} size="xx-small" pos="absolute" zIndex="10" left="5px" bottom="5px"
 aria-label="file upload " icon={&amp;lt;BiCloudUpload /&amp;gt;} /&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2:
&lt;/h2&gt;

&lt;p&gt;We have to create an input filed with a style display to none. This helps us hide the input tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const hiddenFileInput = useRef(null);

  const handleChange = event =&amp;gt; {

    if (event.target.files &amp;amp;&amp;amp; event.target.files[0]) {
      const i = event.target.files[0];
      const body = new FormData();
      body.append("image", i);


    }
  };


  const handleClick = event =&amp;gt; {
    hiddenFileInput.current.click();
  };

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the react useRef hook  as a reference on the input tag we can  access the content of tag .&lt;/p&gt;

&lt;p&gt;Calling the handleClick helps call a click event on the invisible input tag giving us the chances to pick a file for upload.&lt;/p&gt;

&lt;p&gt;The handleChange help to listern to change on the input tag. When handling file upload it is important to use FormData() if you intend to store on a server.&lt;/p&gt;

&lt;p&gt;Thanks for reading .&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>HTML tags | select</title>
      <author>Carlos Espada</author>
      <pubDate>Thu, 04 Nov 2021 07:20:12 +0000</pubDate>
      <link>https://dev.to/carlosespada/html-tags-select-2ne5</link>
      <guid>https://dev.to/carlosespada/html-tags-select-2ne5</guid>
      <description>&lt;p&gt;It is used to &lt;strong&gt;represent a control that provides a menu of options&lt;/strong&gt;. Each menu option is defined by an &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; element nested inside the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; element should have a &lt;code&gt;value&lt;/code&gt; attribute containing the data value to submit to the server when that option is selected. If no &lt;code&gt;value&lt;/code&gt; attribute is included, the value defaults to the text contained inside the element. You can include a &lt;code&gt;selected&lt;/code&gt; attribute on an &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; element to make it selected by default when the page first loads.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element has some unique attributes you can use to control it, such as &lt;code&gt;multiple&lt;/code&gt; to specify whether multiple options can be selected, and &lt;code&gt;size&lt;/code&gt; to specify how many options should be shown at once. It also accepts most of the general form input attributes such as &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;disabled&lt;/code&gt;, &lt;code&gt;autofocus&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;You can further &lt;strong&gt;nest&lt;/strong&gt; &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; &lt;strong&gt;elements inside&lt;/strong&gt; &lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt; &lt;strong&gt;elements to create separate groups of options&lt;/strong&gt; inside the dropdown.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#autocomplete"&gt;
  &lt;/a&gt;
  autocomplete
&lt;/h3&gt;

&lt;p&gt;A &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMString"&gt;DOMString&lt;/a&gt; providing a hint for a user agent's autocomplete feature.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#autofocus"&gt;
  &lt;/a&gt;
  autofocus
&lt;/h3&gt;

&lt;p&gt;This Boolean attribute lets you specify that a form control should have input focus when the page loads. Only one form element in a document can have the &lt;code&gt;autofocus&lt;/code&gt; attribute.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disabled"&gt;
  &lt;/a&gt;
  disabled
&lt;/h3&gt;

&lt;p&gt;This Boolean attribute indicates that the user cannot interact with the control. If this attribute is not specified, the control inherits its setting from the containing element, for example&lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt;; if there is no containing element with the &lt;code&gt;disabled&lt;/code&gt; attribute set, then the control is enabled.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#form"&gt;
  &lt;/a&gt;
  form
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element to associate the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; with (its form owner). The value of this attribute must be the &lt;code&gt;id&lt;/code&gt; of a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; in the same document. (If this attribute is not set, the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; is associated with its ancestor &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element, if any.)&lt;/p&gt;

&lt;p&gt;This attribute lets you associate &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; elements to &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;s anywhere in the document, not just inside a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;. It can also override an ancestor &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple"&gt;
  &lt;/a&gt;
  multiple
&lt;/h3&gt;

&lt;p&gt;This Boolean attribute indicates that multiple options can be selected in the list. If it is not specified, then only one option can be selected at a time. When &lt;code&gt;multiple&lt;/code&gt; is specified, most browsers will show a scrolling list box instead of a single line dropdown.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#name"&gt;
  &lt;/a&gt;
  name
&lt;/h3&gt;

&lt;p&gt;This attribute is used to specify the name of the control.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#required"&gt;
  &lt;/a&gt;
  required
&lt;/h3&gt;

&lt;p&gt;A Boolean attribute indicating that an option with a non-empty string value must be selected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#size"&gt;
  &lt;/a&gt;
  size
&lt;/h3&gt;

&lt;p&gt;If the control is presented as a scrolling list box (e.g. when &lt;code&gt;multiple&lt;/code&gt; is specified), this attribute represents the number of rows in the list that should be visible at one time. Browsers are not required to present a select element as a scrolled list box. The default value is &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;According to the HTML5 specification, the default value for size should be &lt;code&gt;1&lt;/code&gt;; however, in practice, this has been found to break some web sites, and no other browser currently does that, so Mozilla has opted to continue to return &lt;code&gt;0&lt;/code&gt; for the time being with Firefox.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling"&gt;
  &lt;/a&gt;
  Styling
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element is notoriously difficult to style productively with CSS. You can affect certain aspects like any element — for example, manipulating the &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model"&gt;box model&lt;/a&gt;, the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts"&gt;displayed font&lt;/a&gt;, etc., and you can use the &lt;code&gt;appearance&lt;/code&gt; property to remove the default system appearance.&lt;/p&gt;

&lt;p&gt;However, &lt;strong&gt;these properties don't produce a consistent result across browsers&lt;/strong&gt;, and it is hard to do things like line different types of form element up with one another in a column. The &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element's internal structure is complex, and hard to control. If you want to get full control, &lt;strong&gt;you should consider using a library&lt;/strong&gt; with good facilities for styling form widgets, or try rolling your own dropdown menu using non-semantic elements, JavaScript, and &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Accessibility/WAI-ARIA_basics"&gt;WAI-ARIA&lt;/a&gt; to provide semantics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;em&gt;inline-block&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Self-closing: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Semantic value: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/tags/tag_select.asp"&gt;Definition&lt;/a&gt; | &lt;a href="https://www.w3schools.com/tags/tryit.asp?filename=tryhtml_select"&gt;Example&lt;/a&gt; | &lt;a href="https://caniuse.com/mdn-html_elements_select"&gt;Support&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>tags</category>
      <category>select</category>
    </item>
    <item>
      <title>⭐Angular 13 Features ⭐</title>
      <author>Sandeep Balachandran</author>
      <pubDate>Thu, 04 Nov 2021 07:18:50 +0000</pubDate>
      <link>https://dev.to/sandeepbalachandran/angular-13-features-5b1e</link>
      <guid>https://dev.to/sandeepbalachandran/angular-13-features-5b1e</guid>
      <description>&lt;p&gt;Hey there,&lt;/p&gt;

&lt;p&gt;Version 13.0.0 is here and it has some great updates for Angular developers everywhere. 🎉🎉&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR 🙌
&lt;/h1&gt;

&lt;p&gt;✅ &lt;strong&gt;View Engine is no longer available in Angular as of v13&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✅ Changes to the Angular Package Format (APF)&lt;/p&gt;

&lt;p&gt;✅ &lt;strong&gt;Component API updates&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✅ End of IE11 support&lt;/p&gt;

&lt;p&gt;✅ Improvements to the Angular CLI&lt;/p&gt;

&lt;p&gt;✅ Framework changes and dependency updates ( &lt;strong&gt;TypeScript 4.4&lt;/strong&gt;, &lt;strong&gt;Rxjs 7.4&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;✅ Improvements to Angular tests&lt;/p&gt;

&lt;p&gt;✅ Angular material component updates&lt;/p&gt;

&lt;p&gt;✅ PR merges from community&lt;/p&gt;

&lt;p&gt;✅ Docs Updated | Docs updating | Docs will be updated&lt;/p&gt;

&lt;h1&gt; How to update to version 12&lt;/h1&gt;

&lt;p&gt;Visit &lt;a href="https://update.angular.io"&gt;update.angular.io&lt;/a&gt; for detailed information and guidance. To have the best update experience,&lt;/p&gt;

&lt;p&gt;Update to 13&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng update @angular/cli @angular/core
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to update your global angular,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -g @angular/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#whats-in-this-release"&gt;
  &lt;/a&gt;
  What’s in this release?
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#ivy-is-the-default-engine-available-in-v13"&gt;
  &lt;/a&gt;
  ✅ Ivy is the default engine available in  v13 👌
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The Angular team already mentioned they will be removing View Engine from future major releases.&lt;/li&gt;
&lt;li&gt;Read about this from Minko Gechev right &lt;a href="https://blog.angular.io/upcoming-improvements-to-angular-library-distribution-76c02f782aa4"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;👉 Removing View Engine also means that Angular can reduce its reliance on ngcc &lt;a href="https://angular.io/guide/glossary#ngcc"&gt;(Angular compatibility compiler)&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#changes-to-the-angular-package-format-apf"&gt;
  &lt;/a&gt;
  ✅ Changes to the Angular Package Format (APF)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; 👉 Libraries built with the latest version of the APF ( &lt;a href="https://angular.io/guide/angular-package-format"&gt;Angular package format&lt;/a&gt;) will no longer require the use of ngcc because of standardization on more modern JS formats such as ES2020.&lt;/li&gt;
&lt;li&gt; As a result of these changes library developers can expect leaner package output and faster execution&lt;/li&gt;
&lt;li&gt; Removed older output formats, including View Engine specific metadata from APF in v13&lt;/li&gt;
&lt;li&gt; update in APF to support Node Package Exports which help developers from inadvertently relying on internal APIs that may change.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#component-api-update"&gt;
  &lt;/a&gt;
  ✅ Component API update
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Before the changes in Angular v13, dynamically creating components required a lot of boilerplate code.&lt;/li&gt;
&lt;li&gt;👉 The new API removes the need for &lt;a href="https://angular.io/api/core/ComponentFactoryResolver"&gt;ComponentFactoryResolver&lt;/a&gt; being injected into the constructor. &lt;/li&gt;
&lt;li&gt;👉 Ivy creates the opportunity to instantiate the component with &lt;a href="https://angular.io/api/core/ViewContainerRef#createComponent"&gt;ViewContainerRef.createComponent&lt;/a&gt; without creating an associated factory.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#creating-components-with-previous-versions-of-angular"&gt;
  &lt;/a&gt;
  Creating components with previous versions of Angular
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bEuADbxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xp6i32e757rdso7bpmam.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bEuADbxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xp6i32e757rdso7bpmam.png" alt="Image description" width="880" height="874"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-the-new-api-this-code-can-become"&gt;
  &lt;/a&gt;
  With the new API, this code can become:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_BWp1xbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3rx7um7er85r80mrsyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_BWp1xbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3rx7um7er85r80mrsyi.png" alt="Image description" width="880" height="701"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#end-of-ie11-support"&gt;
  &lt;/a&gt;
  ✅ End of IE11 support 🎉
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This allows Angular to leverage modern browser features such as &lt;strong&gt;CSS variables and web animations via native web APIs&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;👉 Apps will be smaller and load faster because we can remove &lt;strong&gt;IE specific polyfills and code paths&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;It also removes the need for &lt;a href="https://angular.io/guide/deployment#differential-loading"&gt;differential loading&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Running ng update will automatically drop these IE-specific polyfills and reduce bundle size during project migration&lt;/li&gt;
&lt;li&gt;👉 Developers who still need to support IE11 users for existing projects can continue to use Angular v12 and it will be supported until &lt;a href="https://angular.io/guide/releases#support-policy-and-schedule"&gt;November 2022&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#improvements-to-the-angular-cli"&gt;
  &lt;/a&gt;
  ✅ Improvements to the Angular CLI
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;👉 Angular now supports the use of persistent build cache by default for new v13 projects. Read it &lt;a href="https://github.com/angular/angular-cli/issues/21545"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;To enable this features developers can add this configuration to &lt;code&gt;angular.json&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zraeAC7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z92061lf28qwjremday6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zraeAC7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z92061lf28qwjremday6.png" alt="Image description" width="880" height="630"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read more about it &lt;a href="https://next.angular.io/cli/cache"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#framework-changes-and-dependency-update"&gt;
  &lt;/a&gt;
  ✅ Framework changes and dependency update
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;👉 Support for &lt;strong&gt;TypeScript 4.4&lt;/strong&gt; . Read it &lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-4/"&gt;here&lt;/a&gt; 🎉&lt;/li&gt;
&lt;li&gt;👉 &lt;strong&gt;RxJS 7.4&lt;/strong&gt; is now the default for v13&lt;/li&gt;
&lt;li&gt;Existing apps using RxJS v6.x will have to manually update using the &lt;code&gt;npm install rxjs@7.4&lt;/code&gt; command. Migration instructions can be read it &lt;a href="https://rxjs.dev/6-to-7-change-summary"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;From angular 11 support for inline google font was introduced
&lt;/li&gt;
&lt;li&gt;👉 Now in v13 support extended to Adobe Fonts&lt;/li&gt;
&lt;li&gt;Inlining fonts can improve your app performance by speeding up the First Contentful Paint &lt;a href="https://web.dev/first-contentful-paint/"&gt;(FCP)&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;This change is now enabled for everyone by default! All you need to do is &lt;code&gt;ng update&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#improvements-to-angular-test"&gt;
  &lt;/a&gt;
  ✅ Improvements to Angular test
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;👉 TestBed that now does a better job of tearing down test modules and environments after each test&lt;/li&gt;
&lt;li&gt;The DOM is now cleaned after every test and developers can expect faster, less memory-intensive, less interdependent, and more optimized tests
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#angular-material-component-updates"&gt;
  &lt;/a&gt;
  ✅ Angular material component updates
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;All the MDC-based components have been evaluated to meet elevated a11y standards on areas such as contrast, touch targets, ARIA, and more&lt;/li&gt;
&lt;li&gt;👉 Pull requests regarding Accessibility (a11y) standard can be read &lt;a href="https://github.com/angular/components/pulls?q=is%3Apr+is%3Aclosed+label%3Aa11y"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pr-merges-from-community"&gt;
  &lt;/a&gt;
  ✅ PR merges from community
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;👉 Dynamically enable/disable validators - &lt;a href="https://github.com/angular/angular/pull/42565"&gt;#42565&lt;/a&gt; 🎉&lt;/li&gt;
&lt;li&gt;👉 Making the SwUpdate API a little more ergonomic - &lt;a href="https://github.com/angular/angular/pull/43668"&gt;#43668&lt;/a&gt; 🎉&lt;/li&gt;
&lt;li&gt;👉 Language Service config to enable auto-apply optional chaining on nullable symbol - &lt;a href="https://github.com/angular/vscode-ng-language-service/pull/1469"&gt;#1469&lt;/a&gt; 🎉&lt;/li&gt;
&lt;li&gt;👉 Router emit activate/deactivate events when an outlet gets attached/detached - &lt;a href="https://github.com/angular/angular/pull/43333"&gt;#4333&lt;/a&gt; 🎉&lt;/li&gt;
&lt;li&gt;👉 Restore history after canceled navigation - &lt;a href="https://github.com/angular/angular/pull/38884"&gt;#38884&lt;/a&gt;     🎉

&lt;ul&gt;
&lt;li&gt;   Router flag to restore the computed value of the browser history when set to computed
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zw-ObCLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwcdfxy5fu3s2cbhkw5h.png" alt="Image description" width="880" height="369"&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more let us hear it from the creators&lt;/p&gt;

&lt;p&gt;Credits : &lt;a href="https://blog.angular.io/angular-v13-is-now-available-cce66f7bc296"&gt;Official Announcement 😄&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Changelog : &lt;a href="https://github.com/angular/angular/blob/master/CHANGELOG.md"&gt; Repository &lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>angular</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Display Current Git Branch on iTerm2</title>
      <author>Ahmet</author>
      <pubDate>Thu, 04 Nov 2021 07:10:32 +0000</pubDate>
      <link>https://dev.to/ahmettkartal/display-current-git-branch-on-iterm2-3ko8</link>
      <guid>https://dev.to/ahmettkartal/display-current-git-branch-on-iterm2-3ko8</guid>
      <description>&lt;p&gt;As a Windows user, I generally use &lt;a href="https://conemu.github.io"&gt;Conemu Console&lt;/a&gt; for my console and it has a sweet future in which you can see the current git branch on the terminal. After using Mac I wanted to see the same future on iTerm2. I found the way and I want to share it with you 🙂&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#zshrc-file"&gt;
  &lt;/a&gt;
  .zshrc file
&lt;/h4&gt;

&lt;p&gt;Firstly create and edit a .zshrc file that will use for terminal configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch ~/.zshrc; open ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#parsegitbranch"&gt;
  &lt;/a&gt;
  parse_git_branch
&lt;/h4&gt;

&lt;p&gt;Customize your terminal whatever you want with this file. You can use the following bash code to display the git branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;parse_git_branch() {
    git branch 2&amp;gt; /dev/null | sed -n -e 's/^\* \(.*\)/[\1]/p'
}
COLOR_DEF='%f'
COLOR_DIR='%F{197}'
COLOR_GIT='%F{39}'
NEWLINE=$'\n'
setopt PROMPT_SUBST
export PROMPT='${COLOR_DIR}%d ${COLOR_GIT}$(parse_git_branch)${COLOR_DEF}${NEWLINE}%% '
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that is it! Restart your terminal. You will see the current branch on your terminal 🙂&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j24R9jkf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj0nvp72sz3lam7yc3nv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j24R9jkf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj0nvp72sz3lam7yc3nv.png" alt="Image description" width="880" height="301"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#more-customization"&gt;
  &lt;/a&gt;
  More customization
&lt;/h4&gt;

&lt;p&gt;If you want more customization you can edit the &lt;strong&gt;PROMPT&lt;/strong&gt; variable in the .zshrc file. For example, you can add your current computer user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;parse_git_branch() {
    git branch 2&amp;gt; /dev/null | sed -n -e 's/^\* \(.*\)/[\1]/p'
}
COLOR_DEF='%f'
COLOR_USR='%F{243}'
COLOR_DIR='%F{197}'
COLOR_GIT='%F{39}'
NEWLINE=$'\n'
setopt PROMPT_SUBST
export PROMPT='${COLOR_USR}%n@%M ${COLOR_DIR}%d ${COLOR_GIT}$(parse_git_branch)${COLOR_DEF}${NEWLINE}%% '
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QHpJZv_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s50najp5xbias761rd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QHpJZv_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s50najp5xbias761rd9.png" alt="Image description" width="880" height="151"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#more-color"&gt;
  &lt;/a&gt;
  More color!
&lt;/h4&gt;

&lt;p&gt;If you want to change color, just edit the color code.&lt;br&gt;
Change &lt;strong&gt;COLOR_USR='%F{243}'&lt;/strong&gt; to &lt;strong&gt;COLOR_USR='%F{229}'&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can find the color code schema in the following image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RI5dlKlh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrdqzc6quy8fa2y3dq9d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RI5dlKlh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrdqzc6quy8fa2y3dq9d.png" alt="Image description" width="642" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://misc.flogisoft.com/bash/tip_colors_and_formatting"&gt;Image Source&lt;/a&gt;&lt;/p&gt;

</description>
      <category>iterm2</category>
      <category>mac</category>
      <category>terminal</category>
      <category>github</category>
    </item>
    <item>
      <title>Self Referential Structs in Rust</title>
      <author>Arunanshu Biswas</author>
      <pubDate>Thu, 04 Nov 2021 06:56:34 +0000</pubDate>
      <link>https://dev.to/arunanshub/self-referential-structs-in-rust-33cm</link>
      <guid>https://dev.to/arunanshub/self-referential-structs-in-rust-33cm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;Pin&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; for the held value (here, &lt;code&gt;Me&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mark &lt;code&gt;Me&lt;/code&gt; as unpinnable by setting a field as &lt;code&gt;std::marker::PhantomPinned&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Eg, &lt;code&gt;_pinned: std::marker::PhantomPinned&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;Rc&amp;lt;RefCell&amp;lt;H&amp;gt;&amp;gt;&lt;/code&gt; for holder, (here, &lt;code&gt;Holder&lt;/code&gt;) and store &lt;code&gt;Me&lt;/code&gt; as raw&lt;br&gt;
pointers.&lt;/p&gt;

&lt;p&gt;Eg, &lt;code&gt;me: BTreeSet&amp;lt;*const Me&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store &lt;code&gt;Holder&lt;/code&gt; within &lt;code&gt;Me&lt;/code&gt; using &lt;code&gt;Rc::clone(...)&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store &lt;code&gt;Me&lt;/code&gt; within &lt;code&gt;Holder&lt;/code&gt; by converting it into a raw pointer. It is completely upto you if you want to store a mutable raw pointer or a &lt;code&gt;const&lt;/code&gt; raw pointer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement &lt;code&gt;Drop&lt;/code&gt; trait such that it removes &lt;strong&gt;all references&lt;/strong&gt; to &lt;code&gt;Me&lt;/code&gt; from &lt;code&gt;Holder&lt;/code&gt; once it is dropped.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="#solution"&gt;Click here to jump to solution.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;There are mainly two ways to represent self-referential struct in Rust.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Reference within the struct:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;RefWithinMe&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="n"&gt;pointer_to_value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;These can easily be solved using &lt;a href="https://docs.rs/ouroboros"&gt;&lt;code&gt;ouroboros&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[macro_use]&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="n"&gt;crate&lt;/span&gt; &lt;span class="n"&gt;ouroboros&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[self_referential]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;RefWithinMe&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="nd"&gt;#[borrows(value)]&lt;/span&gt;
    &lt;span class="n"&gt;pointer_to_value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'this&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;We won't be discussing about these.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reference outside the struct (&lt;strong&gt;A referential cycle&lt;/strong&gt;):&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;collections&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;BTreeSet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(Ord,&lt;/span&gt; &lt;span class="nd"&gt;PartialEq,&lt;/span&gt; &lt;span class="nd"&gt;Eq,&lt;/span&gt; &lt;span class="nd"&gt;PartialOrd)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Me&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/// The my_holder that I hold.&lt;/span&gt;
    &lt;span class="n"&gt;my_holder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt; &lt;span class="n"&gt;Holder&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/// The my_holder that holds `Me`.&lt;/span&gt;
&lt;span class="nd"&gt;#[derive(Ord,&lt;/span&gt; &lt;span class="nd"&gt;PartialEq,&lt;/span&gt; &lt;span class="nd"&gt;Eq,&lt;/span&gt; &lt;span class="nd"&gt;PartialOrd)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Holder&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;set_of_me&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BTreeSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt; &lt;span class="n"&gt;Me&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Me&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_holder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;Holder&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Self&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Self&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;my_holder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="c"&gt;// Insert myself here.&lt;/span&gt;
        &lt;span class="n"&gt;my_holder&lt;/span&gt;&lt;span class="py"&gt;.set_of_me&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c"&gt;// but the value is being moved 🤔&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;We are going to discuss about this.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#problem-description"&gt;
  &lt;/a&gt;
  Problem Description
&lt;/h2&gt;

&lt;p&gt;Given that you have two structs, a holder (&lt;code&gt;Holder&lt;/code&gt;, say) and a struct to hold something (&lt;code&gt;Me&lt;/code&gt;, say), how will you establish a circular reference?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#experimentation"&gt;
  &lt;/a&gt;
  Experimentation
&lt;/h2&gt;

&lt;p&gt;Try to run the above code and see what happens.&lt;/p&gt;

&lt;p&gt;You get an error where Rust complaints about:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;error[E0502]: cannot borrow `my_holder.set_of_me` as mutable because it is also borrowed as immutable
   |
15 | impl&amp;lt;'a&amp;gt; Me&amp;lt;'a&amp;gt; {
   |      -- lifetime `'a` defined here
...
18 |            my_holder,
   |            ---------
   |            |
   |            immutable borrow occurs here
   |            requires that `*my_holder` is borrowed for `'a`
...
21 |        my_holder.set_of_me.insert(&amp;amp;this);
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here

error[E0597]: `this` does not live long enough
   |
15 | impl&amp;lt;'a&amp;gt; Me&amp;lt;'a&amp;gt; {
   |      -- lifetime `'a` defined here
...
21 |        my_holder.set_of_me.insert(&amp;amp;this);
   |        ---------------------------^^^^^-
   |        |                          |
   |        |                          borrowed value does not live long enough
   |        argument requires that `this` is borrowed for `'a`
...
25 |    }
   |    - `this` dropped here while still borrowed

error[E0505]: cannot move out of `this` because it is borrowed
   |
15 | impl&amp;lt;'a&amp;gt; Me&amp;lt;'a&amp;gt; {
   |      -- lifetime `'a` defined here
...
21 |        my_holder.set_of_me.insert(&amp;amp;this);
   |        ---------------------------------
   |        |                          |
   |        |                          borrow of `this` occurs here
   |        argument requires that `this` is borrowed for `'a`
...
24 |        this
   |        ^^^^ move out of `this` occurs here

error: aborting due to 3 previous errors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aaaand, we hit a lifetime error!&lt;/p&gt;

&lt;p&gt;I'll assume that you have a basic knowledge about Rust's lifetimes. If not, don't worry! I'll try to keep this article as simple as possible. But if you're interested, You can &lt;a href="https://dev.to/arunanshub/demystifying-mutability-and-references-in-rust-caf"&gt;read my post on Rust Lifetimes.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-the-error"&gt;
  &lt;/a&gt;
  Understanding the Error
&lt;/h2&gt;

&lt;p&gt;So, here we see that Rust complaints us about &lt;code&gt;this&lt;/code&gt; variable not "living long enough".&lt;/p&gt;

&lt;p&gt;Pay attention to the message, &lt;strong&gt;"borrowed value does not live long enough"&lt;/strong&gt;. Rust wants us to understand that if &lt;code&gt;this&lt;/code&gt; is &lt;strong&gt;moved&lt;/strong&gt;, then &lt;code&gt;my_holder.set_of_me&lt;/code&gt; will have a reference to a nonexistent object. And it's never a good idea to dereference a reference (or, a pointer) to something that does not exist. &lt;em&gt;*&lt;code&gt;SEGFAULT&lt;/code&gt; intensifies 😖*&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In short, Rust prevents the creation of dangling pointer.&lt;/p&gt;

&lt;p&gt;But, this prevents us from creating a self-referential struct. Worry not, because we can pull up some tricks to make the Rust compiler "think" that there are no lifetime violations. However, it requires you to go down to the &lt;code&gt;unsafe&lt;/code&gt; level.&lt;/p&gt;

&lt;p&gt;But first, let us talk about moves and why they are a big deal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-moves-in-rust"&gt;
  &lt;/a&gt;
  Understanding Moves in Rust
&lt;/h2&gt;

&lt;p&gt;A "move" in a function happens when you return a value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"ABC"&lt;/span&gt;&lt;span class="nf"&gt;.to_owned&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt;  &lt;span class="c"&gt;// move occurs&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, for ordinary objects, "moving" is fine. But since objects (and their references) created within the function have the lifetime of the function itself, Rust disallows it (thankfully!).&lt;/p&gt;

&lt;p&gt;That also means, we need to find a way to tell Rust that &lt;strong&gt;"our move will keep the reference so please don't drop it!"&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#raw-pointers-of-rust"&gt;
  &lt;/a&gt;
  Raw Pointers of Rust
&lt;/h2&gt;

&lt;p&gt;Let's jump right to the point. Raw pointers are your typical C-like pointers that are not bound to Rust's borrow checker.&lt;/p&gt;

&lt;p&gt;But Rust's pointer suffer from a fatal flaw. &lt;strong&gt;They are not safe to use when two variables are swapped.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let me demonstrate it. In fact, the following is adapted from The Rust Language Tutorial for Async. &lt;a href="https://rust-lang.github.io/async-book/04_pinning/01_chapter.html#pinning-in-detail"&gt;Follow this link&lt;/a&gt; to know more.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[derive(Debug)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;pointer_to_value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Self&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="c"&gt;// In `C`, you'd call this initialize to `NULL`.&lt;/span&gt;
            &lt;span class="n"&gt;pointer_to_value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;null&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="py"&gt;.pointer_to_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="py"&gt;.value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.value&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_pointer_to_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;unsafe&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.pointer_to_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have a simple struct called &lt;code&gt;Test&lt;/code&gt;. &lt;code&gt;pointer_to_value&lt;/code&gt; points to &lt;code&gt;value&lt;/code&gt;. Two methods (&lt;code&gt;get_value&lt;/code&gt; and &lt;code&gt;get_pointer_to_value&lt;/code&gt;) have been provided as getters.&lt;/p&gt;

&lt;p&gt;Now, let's say we create two instances of &lt;code&gt;Test&lt;/code&gt; and use our getters to inspect the contents.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;test1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test1"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;test2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test2"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"test1: value: {}, ptr to value: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="nf"&gt;.get_value&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="nf"&gt;.get_pointer_to_value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"test2: value: {}, ptr to value: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="nf"&gt;.get_value&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="nf"&gt;.get_pointer_to_value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Executing the code gives:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test1: value: test1, ptr to value: test1
test2: value: test2, ptr to value: test2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing out of the ordinary right? You get the contents of &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;pointer_to_value&lt;/code&gt; and print it. But the real danger happens when we swap the variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Swapping..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"test1: value: {}, ptr to value: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="nf"&gt;.get_value&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="nf"&gt;.get_pointer_to_value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"test2: value: {}, ptr to value: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="nf"&gt;.get_value&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="nf"&gt;.get_pointer_to_value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might expect this to print:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Swapping...
test1: value: test2, ptr to value: test2
test2: value: test1, ptr to value: test1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But to our surprise, this prints:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Swapping...
test1: value: test2, ptr to value: test1
test2: value: test1, ptr to value: test2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#unfolding-the-mystery-of-raw-pointers"&gt;
  &lt;/a&gt;
  Unfolding the Mystery of Raw Pointers
&lt;/h3&gt;

&lt;p&gt;So why did that happen? The answer is quite simple. "A pointer follows its pointee".&lt;/p&gt;

&lt;p&gt;When we swapped the variables, the contents got swapped too. But that does not mean the pointers will change their pointee. This image demonstrates the point:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SgnK7af3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rust-lang.github.io/async-book/assets/swap_problem.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SgnK7af3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rust-lang.github.io/async-book/assets/swap_problem.jpg" alt="Swapping Issues" width="880" height="474"&gt;&lt;/a&gt;&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;But, this is not good as this might potentially lead to situations like "double free" and "incorrect access".&lt;/p&gt;

&lt;p&gt;We need a way to tell Rust that our variables should not be moved. Or in other words, we need something that will encapsulate our objects and make them immovable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-pinlttgt-endraw-the-objects"&gt;
  &lt;/a&gt;
  &lt;code&gt;Pin&amp;lt;T&amp;gt;&lt;/code&gt; the objects
&lt;/h2&gt;

&lt;p&gt;Meet &lt;code&gt;Pin&amp;lt;T&amp;gt;&lt;/code&gt;! They "pin" objects to its location in memory&lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Now, you can either pin to the stack or pin to the heap. For this case, pinning to the heap is the simplest and most viable option.&lt;/p&gt;

&lt;p&gt;In Rust, we know that we can put a variable to the heap by using &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt;. For this case, &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; is sufficient.&lt;/p&gt;

&lt;p&gt;To our convenience, &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; provides a method called &lt;code&gt;Box::pin(...)&lt;/code&gt;. We can use this to pin our object to encapsulate and prevent it from incorrect moves.&lt;/p&gt;

&lt;p&gt;So how do we use &lt;code&gt;Pin&amp;lt;T&amp;gt;&lt;/code&gt;? Let's modify our code to find out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(Debug)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// same as before&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c"&gt;// return Pin&amp;lt;Box&amp;lt;Self&amp;gt;&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="c"&gt;// In `C`, you'd call this initialize to `NULL`.&lt;/span&gt;
            &lt;span class="n"&gt;pointer_to_value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;null&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="nf"&gt;.as_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.pointer_to_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="py"&gt;.value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c"&gt;// modify `self` parameter&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.get_ref&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.value&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// modify `self` parameter&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_pointer_to_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;unsafe&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.pointer_to_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note that whenever you use &lt;code&gt;Pin&amp;lt;T&amp;gt;&lt;/code&gt;, the &lt;code&gt;self&lt;/code&gt; argument is modified to accept a &lt;code&gt;Pin&amp;lt;T&amp;gt;&lt;/code&gt; type only.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Running the &lt;code&gt;main&lt;/code&gt; function as before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;test1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test1"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;test2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test2"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"test1: value: {}, ptr to value: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="nf"&gt;.as_ref&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.get_value&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="nf"&gt;.as_ref&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.get_pointer_to_value&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"test2: value: {}, ptr to value: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="nf"&gt;.as_ref&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.get_value&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="nf"&gt;.as_ref&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.get_pointer_to_value&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Swapping..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;mem&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"test1: value: {}, ptr to value: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="nf"&gt;.as_ref&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.get_value&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="nf"&gt;.as_ref&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.get_pointer_to_value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"test2: value: {}, ptr to value: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="nf"&gt;.as_ref&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.get_value&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="nf"&gt;.as_ref&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.get_pointer_to_value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This prints:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test1: value: test1, ptr to value: test1
test2: value: test2, ptr to value: test2
Swapping...
test1: value: test2, ptr to value: test2
test2: value: test1, ptr to value: test1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As expected!&lt;/p&gt;

&lt;p&gt;Note that we can still get a mutable reference to our enclosed &lt;code&gt;Test&lt;/code&gt; by using &lt;code&gt;as_mut().get_mut()&lt;/code&gt;. This cannot be good!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-phantompinned-endraw-to-the-rescue"&gt;
  &lt;/a&gt;
  &lt;code&gt;PhantomPinned&lt;/code&gt; to the Rescue
&lt;/h3&gt;

&lt;p&gt;By using &lt;code&gt;std::marker::PhantomPinned&lt;/code&gt;, we tell Rust that our object cannot be unpinned (Rust calls it &lt;code&gt;!Unpin&lt;/code&gt;. Read as "Not Unpinnable").&lt;/p&gt;

&lt;p&gt;Now, any calls to &lt;code&gt;get_mut()&lt;/code&gt; will fail.&lt;/p&gt;

&lt;p&gt;So, how do you use it?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;modify your struct to hold that extra field.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;use std::{
&lt;/span&gt;&lt;span class="gi"&gt;+   marker::PhantomPinned,
&lt;/span&gt;    pin::Pin,
&lt;span class="err"&gt;};&lt;/span&gt;

&lt;span class="err"&gt;#[derive(Debug)]&lt;/span&gt;
struct Test {
    value: String,
    pointer_to_value: *const String,
&lt;span class="gi"&gt;+   _pinned: PhantomPinned,
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initialize &lt;code&gt;PhantomPinned&lt;/code&gt; in &lt;code&gt;new()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;impl Test {
&lt;/span&gt;    fn new(txt: &amp;amp;str) -&amp;gt; Pin&amp;lt;Box&amp;lt;Self&amp;gt;&amp;gt; {
        let mut this = Box::pin(Test {
            value: String::from(txt),
            // In `C`, you'd call this initialize to `NULL`.
            pointer_to_value: std::ptr::null(),
&lt;span class="gi"&gt;+           _pinned: PhantomPinned,
&lt;/span&gt;        });
        this.as_mut().pointer_to_value = &amp;amp;this.value;
        this
    }

// ...
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Try to run it, and you'll face with yet another complaint from Rust! This time, it will say: &lt;strong&gt;"cannot assign to data in a dereference of &lt;code&gt;Pin&amp;lt;&amp;amp;mut Test&amp;gt;&lt;/code&gt;"&lt;/strong&gt;. So, what does that mean?&lt;/p&gt;

&lt;p&gt;It means: in the presence of &lt;code&gt;PhantomPinned&lt;/code&gt;, you cannot modify, or mutate through a dereference. This is a side effect of &lt;code&gt;PhantomPinned&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To overcome this problem, we have to "force our way" into the enclosed object. That means, we will use &lt;code&gt;unsafe&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;impl Test {
&lt;/span&gt;    fn new(txt: &amp;amp;str) -&amp;gt; Pin&amp;lt;Box&amp;lt;Self&amp;gt;&amp;gt; {
        let mut this = Box::pin(Test {
            value: String::from(txt),
            // In `C`, you'd call this initialize to `NULL`.
            pointer_to_value: std::ptr::null(),
            _pinned: PhantomPinned,
        });
&lt;span class="gi"&gt;+       unsafe {
+           this.as_mut().get_unchecked_mut().pointer_to_value = &amp;amp;this.value;
+       }
&lt;/span&gt;        this
    }
&lt;span class="err"&gt;//&lt;/span&gt; ...
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aaaand that's it! We have constructed a self-referential struct using &lt;code&gt;Pin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But why did we go through all this? This doesn't even solve our original problem?!&lt;/p&gt;

&lt;p&gt;We went through this in order to understand the mechanism of Rust's &lt;code&gt;Pin&lt;/code&gt; and its associated intricacies.&lt;/p&gt;

&lt;p&gt;Now that we have understood how pinning works, let us go back to our original problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solving-the-original-problem"&gt;
  &lt;/a&gt;
  Solving the Original Problem
&lt;/h2&gt;

&lt;p&gt;Let us wrap &lt;code&gt;Me&lt;/code&gt; with &lt;code&gt;Pin&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;
   &lt;span class="nn"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;PhantomPinned&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nn"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(Debug)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Me&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;my_holder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt; &lt;span class="n"&gt;Holder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;pinned&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PhantomPinned&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Me&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_holder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;Holder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;my_holder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;pinned&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PhantomPinned&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;this_ptr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;unsafe&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="nf"&gt;.as_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.get_unchecked_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;my_holder&lt;/span&gt;&lt;span class="py"&gt;.set_of_me&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_ptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;val&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we have a small problem with this scheme. But first, let us check what &lt;code&gt;Holder&lt;/code&gt; looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[derive(Debug)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Holder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;set_of_me&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BTreeSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;Me&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Holder&lt;/code&gt; holds several instances of &lt;code&gt;Me&lt;/code&gt;. Or in other words, &lt;code&gt;Me&lt;/code&gt; inserts itself in &lt;code&gt;Holder&lt;/code&gt;, and it can insert at any time at any place. But if we keep using references for &lt;code&gt;Holder&lt;/code&gt; (ie, &lt;code&gt;&amp;amp;'a mut Holder&lt;/code&gt;), we'll soon realize that Rust does not allow us to go beyond what Borrow Checker permits.&lt;/p&gt;

&lt;p&gt;We need to find a way to share references without letting Rust know that it is a reference. And it should be destroyed once its job is done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-rclttgt-endraw-and-raw-refcelllttgt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; is the reference counted version of &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, and &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; allows you to mutate a seemingly immutable object. It is useful mostly in these contexts. So how do we use it?&lt;/p&gt;

&lt;p&gt;First, we create a type alias for shorthand!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;RcCell&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Rc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RefCell&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we modify &lt;code&gt;Holder&lt;/code&gt; to return a &lt;code&gt;RcCell&amp;lt;Holder&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;
   &lt;span class="nn"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RefCell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nn"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(Debug)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Holder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;set_of_me&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BTreeSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;Me&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Holder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;RcCell&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;RefCell&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;set_of_me&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's discuss a bit about &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-raw-refcelllttgt-endraw-"&gt;
  &lt;/a&gt;
  Why &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;?
&lt;/h3&gt;

&lt;p&gt;Let's see what happens when we try to modify anything in an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"EEE"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last line will complain: &lt;strong&gt;"cannot borrow data in an &lt;code&gt;Rc&lt;/code&gt; as mutable"&lt;/strong&gt;. That means, &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; acts as an immutable enclosure around the object.&lt;/p&gt;

&lt;p&gt;Now let's see what happens when we use &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;RefCell&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"EEE"&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="nf"&gt;.borrow_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; adds a new method called &lt;code&gt;borrow_mut()&lt;/code&gt; that allows you to receive a mutable reference to the underlying object. And the added benefit of using &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; is that it strictly follows Rust's borrowing rules. This ensures nothing funny or obscure happens with the object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-the-pieces-together"&gt;
  &lt;/a&gt;
  Putting the Pieces Together
&lt;/h2&gt;

&lt;p&gt;Let us tell &lt;code&gt;Me&lt;/code&gt; to accept a &lt;code&gt;RcCell&amp;lt;Holder&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="err"&gt;#[derive(Debug)]&lt;/span&gt;
struct Me {
&lt;span class="gi"&gt;+   my_holder: RcCell&amp;lt;Holder&amp;gt;,
&lt;/span&gt;    _pinned: PhantomPinned,
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;impl Me {
&lt;/span&gt;    pub fn new(
&lt;span class="gi"&gt;+       my_holder: RcCell&amp;lt;Holder&amp;gt;,
&lt;/span&gt;    ) -&amp;gt; Pin&amp;lt;Box&amp;lt;Self&amp;gt;&amp;gt; {
        let mut this = Box::pin(Self {
            my_holder,
            _pinned: PhantomPinned,
        });

        let this_ptr: *mut _ = unsafe { this.as_mut().get_unchecked_mut() };
&lt;span class="gi"&gt;+       this.my_holder.borrow_mut().set_of_me.insert(this_ptr);
&lt;/span&gt;
        this
    }
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But before you jump and rejoice, think about what happens in the end? What happens to the references in &lt;code&gt;Holder&lt;/code&gt;'s &lt;code&gt;set_of_me&lt;/code&gt; after an instance of &lt;code&gt;Me&lt;/code&gt; has been destroyed?&lt;/p&gt;

&lt;p&gt;Right! They are still there as &lt;strong&gt;DANGLING POINTERS!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We need a way to remove &lt;code&gt;Me&lt;/code&gt; from &lt;code&gt;Holder&lt;/code&gt;'s &lt;code&gt;set_of_me&lt;/code&gt; when it will be destroyed. Fortunately, we have something called &lt;code&gt;Drop&lt;/code&gt; trait in Rust.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Drop&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Me&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="k"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.my_holder&lt;/span&gt;&lt;span class="nf"&gt;.borrow_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.set_of_me&lt;/span&gt;&lt;span class="nf"&gt;.remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-not-raw-weaklttgt-endraw-for-storing-raw-me-endraw-"&gt;
  &lt;/a&gt;
  Why not &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; for storing &lt;code&gt;Me&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;Now you could ask, why go through all the pain of raw pointers and Pins when I could've used &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Yes you could've, but &lt;code&gt;Weak&amp;lt;T&amp;gt;&lt;/code&gt; does not implement &lt;code&gt;Ord&lt;/code&gt;, &lt;code&gt;PartialOrd&lt;/code&gt;, &lt;code&gt;PartialEq&lt;/code&gt; etc. This will limit usability to a great degree.&lt;/p&gt;

&lt;p&gt;Similarly, you cannot use &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; for storing &lt;code&gt;Me&lt;/code&gt; because &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; will not help you in resolving the circular reference and will create a memory leak.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;Here is the entire solution. Run it and experiment with it to understand how it works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;
    &lt;span class="nn"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RefCell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;BTreeSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;PhantomPinned&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nn"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;RcCell&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Rc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RefCell&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(Debug)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Holder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;set_of_me&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BTreeSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;Me&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Holder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;RcCell&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;RefCell&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// this is initially empty&lt;/span&gt;
            &lt;span class="n"&gt;set_of_me&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;/// Mutate every value of `Me`.&lt;/span&gt;
    &lt;span class="c"&gt;/// Note how a pinned value is reconstructed.&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;mutate_value_of_me&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.set_of_me&lt;/span&gt;&lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.for_each&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;unsafe&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nn"&gt;Pin&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new_unchecked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.mutate_me&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(Debug)]&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Me&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;mutate_by_holder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;my_holder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RcCell&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Holder&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;pinned&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PhantomPinned&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Me&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/// Accept a name&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RcCell&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Holder&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Into&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="nf"&gt;.into&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;mutate_by_holder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;my_holder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;pinned&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PhantomPinned&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;this_ptr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;unsafe&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="nf"&gt;.as_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.get_unchecked_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="py"&gt;.my_holder&lt;/span&gt;&lt;span class="nf"&gt;.borrow_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.set_of_me&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_ptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;this&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;/// Allows you to mutate a value within me.&lt;/span&gt;
    &lt;span class="c"&gt;/// Run this from `Holder` to see what happens.&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;mutate_me&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pin&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;unsafe&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.get_unchecked_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="py"&gt;.mutate_by_holder&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Drop&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Me&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="k"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Dropping {:#?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.my_holder&lt;/span&gt;&lt;span class="nf"&gt;.borrow_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.set_of_me&lt;/span&gt;&lt;span class="nf"&gt;.remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/// A test function to play with `Holder`s.&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;make_ref_of_holder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RcCell&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Holder&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;holder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Making a ref of {:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No. of refs = {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;strong_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;holder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Holder&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c"&gt;// be explicit about `Rc`'s cloning&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Me&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Me&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="nf"&gt;.borrow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.mutate_value_of_me&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;455&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nf"&gt;make_ref_of_holder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this article helps you in understanding Rust's Self Referential Structs a bit better.&lt;/p&gt;

&lt;p&gt;Questions? Comments? Concerns? Please put them down below and I'd be happy to help you.&lt;/p&gt;

&lt;p&gt;Cover Image Source: Manjaro's &lt;code&gt;/usr/share/backgrounds&lt;/code&gt; folder 😃&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;Image taken from Rust Language's Async Tutorial Book &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;Taken from &lt;a href="https://doc.rust-lang.org/std/pin/index.html"&gt;https://doc.rust-lang.org/std/pin/index.html&lt;/a&gt; &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>rust</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Big Data Analytics Options on AWS | AWS White Paper Summary</title>
      <author>Adit Modi</author>
      <pubDate>Thu, 04 Nov 2021 06:36:03 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/big-data-analytics-options-on-aws-aws-white-paper-summary-59l2</link>
      <guid>https://dev.to/awsmenacommunity/big-data-analytics-options-on-aws-aws-white-paper-summary-59l2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As the world becomes more digital, the amount of data created and collected constantly grows and accelerates. Analysis of this ever-growing data becomes a challenge with traditional analytical tools.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Big data tools and technologies offer opportunities to analyze data efficiently so you can better understand customer preferences, gain a competitive advantage in the marketplace, and grow your business.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS provides a broad platform of managed services to help you build, secure, and seamlessly scale end-to-end big data applications quickly and with ease.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#the-aws-advantage-in-big-data-analytics"&gt;
  &lt;/a&gt;
  The AWS advantage in big data analytics
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Analyzing large datasets requires significant compute capacity that can vary in size, based on the amount of input data and the type of analysis. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For mission-critical applications on a more traditional infrastructure, system designers have no choice but to over-provision, because a surge in additional data due to an increase in business needs must be something the system can handle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;on AWS, you can provision more capacity and compute in a matter of minutes, meaning that your big data applications grow and shrink as demand dictates, and your system runs as close to optimal efficiency as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition, you get flexible computing on a global infrastructure with access to the many different geographic Regions that AWS offers, along with the ability to use other scalable services that augment to build sophisticated big data applications. These other services include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Simple Storage Service (Amazon S3) to store data&lt;/li&gt;
&lt;li&gt;AWS Glue to orchestrate jobs to move and transform the data easily&lt;/li&gt;
&lt;li&gt;AWS IoT, which lets connected devices interact with cloud applications and other connected devices&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As the amount of data being generated continues to grow, AWS has many options to get that data to the cloud, including secure devices like AWS Snow Family to accelerate petabyte-scale data transfers, delivery streams with Amazon Kinesis Data Firehose to load streaming data continuously, migrating databases using AWS Database Migration Service, and scalable private connections through AWS Direct Connect.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As mobile continues to rapidly grow in usage, you can use the suite of services within the AWS Mobile Hub to collect and measure app usage and data, or export that data to another service for further custom analysis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These capabilities of AWS make it an ideal fit for solving big data problems, and many customers have implemented successful big data analytics workloads on AWS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The following services for collecting, processing, storing, and analyzing big data are described in order:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-kinesis"&gt;
  &lt;/a&gt;
  Amazon Kinesis
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Kinesis is a platform for streaming data on AWS that makes it easy to load and analyze streaming data. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Kinesis also enables you to build custom streaming data applications for specialized needs. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Kinesis, you can ingest real-time data such as application logs, website clickstreams, Internet of Things (IoT) telemetry data, and more into your databases, data lakes, and data warehouses, or build your own real-time applications using this data. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Kinesis enables you to process and analyze data as it arrives and respond in real-time instead of having to wait until all your data is collected before the processing can begin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Currently there are four pieces of the Kinesis platform that can be utilized based on your use case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Kinesis Data Streams enables you to build custom applications that process or analyze streaming data.&lt;/li&gt;
&lt;li&gt;Amazon Kinesis Video Streams enables you to build custom applications that process or analyze streaming video.&lt;/li&gt;
&lt;li&gt;Amazon Kinesis Data Firehose enables you to deliver real-time streaming data to AWS destinations such as such as Amazon S3, Amazon Redshift, OpenSearch Service, and Splunk.&lt;/li&gt;
&lt;li&gt;Amazon Kinesis Data Analytics enables you to process and analyze streaming data with standard SQL or with Java (managed Apache Flink).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-managed-streaming-for-apache-kafka-amazon-msk"&gt;
  &lt;/a&gt;
  Amazon Managed Streaming for Apache Kafka (Amazon MSK)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon MSK is a fully managed service that makes it easy for you to build and run applications that use Apache Kafka to process streaming data. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apache Kafka is an open-source platform for building real-time streaming data pipelines and applications. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Amazon MSK, you can use native Apache Kafka APIs to populate data lakes, stream changes to and from databases, and power machine learning and analytics applications&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-lambda"&gt;
  &lt;/a&gt;
  AWS Lambda
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AWS Lambda enables you to run code without provisioning or managing servers. You pay only for the compute time you consume – there is no charge when your code is not running. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Lambda, you can run code for virtually any type of application or backend service – all with zero administration. Just upload your code and Lambda takes care of everything required to run and scale your code with high availability. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can set up your code to automatically trigger from other AWS services or call it directly from any web or mobile app.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-elastic-map-reduce-amazon-emr"&gt;
  &lt;/a&gt;
  Amazon Elastic Map Reduce (Amazon EMR)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon EMR is the industry-leading cloud big data platform for processing vast amounts of data using open source tools such as Apache Spark, Apache Hive, Apache HBase, Apache Flink, Apache Hudi, and Presto. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon EMR makes it easy to set up, operate, and scale your big data environments by automating time-consuming tasks like provisioning capacity and tuning clusters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With EMR you can run petabyte-scale analysis at less than half of the cost of traditional on-premises solutions and over 3x faster than standard Apache Spark.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon EMR does all the work involved with provisioning, managing, and maintaining the infrastructure and software of a Hadoop cluster.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-glue"&gt;
  &lt;/a&gt;
  AWS Glue
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AWS Glue is a serverless data integration service that makes it easy to discover, prepare, and combine data for analytics, machine learning, and application development. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS Glue provides all of the capabilities needed for data integration. It both visual and code-based interfaces to make data integration easier.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-lake-formation"&gt;
  &lt;/a&gt;
  AWS Lake Formation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AWS Lake Formation is an integrated data lake service that makes it easy for you to ingest, clean, catalog, transform, and secure your data and make it available for analysis and machine learning.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lake Formation gives you a central console where you can discover data sources, set up transformation jobs to move data to an S3 data lake, remove duplicates and match records, catalog data for access by analytic tools, configure data access and security policies, and audit and control access from AWS analytic and machine learning services.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-machine-learning"&gt;
  &lt;/a&gt;
  Amazon Machine Learning
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AWS offers the broadest and deepest set of machine learning services and supporting cloud infrastructure, putting machine learning in the hands of every developer, data scientist, and expert practitioner. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you build an ML-based workload in AWS, you can choose from three different levels of ML services to balance speed-to-market with level of customization and ML skill level:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Artificial Intelligence (AI) services&lt;/li&gt;
&lt;li&gt;ML services&lt;/li&gt;
&lt;li&gt;ML frameworks and infrastructure&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-dynamodb"&gt;
  &lt;/a&gt;
  Amazon DynamoDB
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon DynamoDB is a fast, fully-managed NoSQL database service that makes it simple and cost effective to store and retrieve any amount of data, and serve any level of request traffic. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DynamoDB helps offload the administrative burden of operating and scaling a highly-available distributed database cluster. This storage alternative meets the latency and throughput requirements of highly demanding applications by providing single-digit millisecond latency and predictable performance with seamless throughput and storage scalability.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-redshift"&gt;
  &lt;/a&gt;
  Amazon Redshift
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Redshift is a fast, fully-managed, petabyte-scale data warehouse service that makes it simple and cost-effective to analyze all your data efficiently using your existing business intelligence tools. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is optimized for data sets ranging from a few hundred gigabytes to a petabyte or more, and is designed to cost less than a tenth of the cost of most traditional data warehousing solutions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-opensearch-service-opensearch-service"&gt;
  &lt;/a&gt;
  Amazon OpenSearch Service (OpenSearch Service)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon OpenSearch Service (OpenSearch Service) makes it easy to deploy, operate, and scale OpenSearch Service for log analytics, full text search, application monitoring, and more. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OpenSearch Service is a fully managed service that delivers the OpenSearch Service easy-to-use APIs and real-time capabilities along with the availability, scalability, and security required by production workloads. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The service offers built-in integrations with OpenSearch Dashboards, Logstash, and AWS services including Amazon Kinesis Data Firehose, AWS Lambda, and Amazon CloudWatch so that you can go from raw data to actionable insights quickly.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-quicksight"&gt;
  &lt;/a&gt;
  Amazon QuickSight
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon QuickSight is a scalable, serverless, embeddable, machine learning-powered business intelligence (BI) service built for the cloud. It makes it easy for all employees within an organization to build visualizations, perform ad hoc analysis, and quickly get business insights fromtheir data, anytime, on any device.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon QuickSight enables organizations to scale their business analytics capabilities to hundreds of thousands of users, and delivers fast and responsive query performance by using a robust in-memory engine (SPICE).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-compute-services-amazon-elastic-compute-cloud-amazon-ec2-instances-amazon-elastic-container-service-amazon-ecs-and-amazon-elastic-kubernetes-service-amazon-eks-are-available-for-selfmanaged-big-data-applications"&gt;
  &lt;/a&gt;
  Amazon Compute Services (Amazon Elastic Compute Cloud (Amazon EC2) instances, Amazon Elastic Container Service (Amazon ECS), and Amazon Elastic Kubernetes Service (Amazon EKS) are available for self-managed big data applications.)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon EC2, with instances acting as AWS virtual machines, provides an ideal platform for operating your own self-managed big data analytics applications on AWS infrastructure. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Almost any software you can install on Linux or Windows virtualized environments can be run on Amazon EC2, and you can use the pay-as-you-go pricing model.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-athena"&gt;
  &lt;/a&gt;
  Amazon Athena
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Athena is an interactive query service that makes it easy to analyze data in Amazon S3 using standard SQL. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Athena is serverless, so there is no infrastructure to setup or manage, and you can start analyzing data immediately. You don’t need to load your data into Athena, as it works directly with data stored in S3. Just log into the Athena Console, define your table schema, and start querying. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Athena uses Presto with full ANSI SQL support and works with a variety of standard data formats, including CSV, JSON, ORC, Apache Parquet, and Apache Avro.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#solving-big-data-problems-on-aws"&gt;
  &lt;/a&gt;
  Solving big data problems on AWS
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#example-1-queries-against-an-amazon-s3-data-lake"&gt;
  &lt;/a&gt;
  Example 1: Queries against an Amazon S3 data lake
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YDqilq0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15bucjnqb49uqbb1ptng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YDqilq0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15bucjnqb49uqbb1ptng.png" alt="Image description" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data lakes are an increasingly popular way to store and analyze both structured and unstructured data. &lt;/li&gt;
&lt;li&gt;If you use an Amazon S3 data lake, AWS Glue can make all your data immediately available for analytics without moving the data. &lt;/li&gt;
&lt;li&gt;AWS Glue crawlers can scan your data lake and keep the AWS Glue Data Catalog in sync with the underlying data. &lt;/li&gt;
&lt;li&gt;You can then directly query your data lake with Amazon Athena and Amazon Redshift Spectrum. &lt;/li&gt;
&lt;li&gt;You can also use the AWS Glue Data Catalog as your external Apache Hive Metastore for big data applications running on Amazon EMR.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#example-2-capturing-and-analyzing-sensor-data"&gt;
  &lt;/a&gt;
  Example 2: Capturing and analyzing sensor data
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9UhGuF2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0d2gir7ovg4niiqexpym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9UhGuF2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0d2gir7ovg4niiqexpym.png" alt="Image description" width="880" height="419"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The process begins with each A/C unit providing a constant data stream to Amazon Kinesis Data Streams. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using the Amazon Kinesis Data Streams-provided tools such as the Kinesis Client Library or SDK, a simple application is built on Amazon EC2 to read data as it comes into Amazon Kinesis Data Streams, analyze it, and determine if the data warrants an update to the real-time dashboard. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This data flow needs to occur in near real time so that customers and maintenance teams can be alerted quickly if there is an issue with the unit. Additionally, there will be lots of potential access to this data from the following sources:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Customers checking on their system via a mobile device or browser&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maintenance teams checking the status of its fleet&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data and intelligence algorithms and analytics in the reporting platform spot trends that can be then sent out as alerts, such as if the A/C fan has been running unusually long with the building temperature not going down.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;DynamoDB was chosen to store this near real-time data set because it is both highly available and scalable; throughput to this data can be easily scaled up or down to meet the needs of its consumers as the platform is adopted and usage grows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The reporting dashboard is a custom web application that is built on top of this data set and run on Amazon EC2. It provides content based on the system status and trends as well as alerting customers and maintenance crews of any issues that may come up with the unit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The customer accesses the data from a mobile device or a web browser to get the current status of the system and visualize historical trends.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To read from the Amazon Kinesis stream, there is a separate Amazon Kinesis-enabled application that probably runs on a smaller EC2 instance that scales at a slower rate. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The data is transformed by the Amazon Kinesis-enabled application into a format that is suitable for long-term storage, for loading into its data warehouse, and storing on Amazon S3.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Redshift is again used as the data warehouse for the larger data set. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For visualizing the analytics, one of the many partner visualization platforms can be used via the OBDC/JDBC connection to Amazon Redshift. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#example-3-sentiment-analysis-of-social-media"&gt;
  &lt;/a&gt;
  Example 3: sentiment analysis of social media
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZoNZtl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzonoafjs85myfhms1ax.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZoNZtl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzonoafjs85myfhms1ax.png" alt="Image description" width="880" height="572"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, deploy an Amazon EC2 instance in an Amazon VPC that ingests tweets from Twitter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, create an Amazon Kinesis Data Firehose delivery stream that loads the streaming tweets into the raw prefix in the solution's S3 bucket.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;S3 invokes a Lambda function to analyze the raw tweets using Amazon Translate to translate non-English tweets into English, and Amazon Comprehend to use natural language-processing (NLP) to perform entity extraction and sentiment analysis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A second Kinesis Data Firehose delivery stream loads the translated tweets and sentiment values into the sentiment prefix in the S3 bucket. A third delivery stream loads entities in the entities prefix in the S3 bucket.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This architecture also deploys a data lake that includes AWS Glue for data transformation, Amazon Athena for data analysis, and Amazon QuickSight for data visualization. AWS Glue Data Catalog contains a logical database used to organize the tables for the data in S3. Athena uses these table definitions to query the data stored in S3 and return the information to an Amazon QuickSight dashboard. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As more and more data is generated and collected, organizations are facing a growing big data ecosystem where new tools emerge and become outdated very quickly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With a broad set of managed services to collect, process, and analyze big data, AWS makes it easier to build, deploy, and scale big data applications. This enables you to focus on business problems instead of updating and managing these tools.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS provides many solutions to address your big data analytic requirements. Most big data architecture solutions use multiple AWS tools to build a complete solution. The result is a flexible big data architecture that is able to scale along with your business.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/whitepapers/latest/big-data-analytics-options/welcome.html?did=wp_card&amp;amp;trk=wp_card"&gt;Original paper&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>bigdata</category>
      <category>analytics</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Writing your first Client-Server Program</title>
      <author>Abdul Samad</author>
      <pubDate>Thu, 04 Nov 2021 06:32:28 +0000</pubDate>
      <link>https://dev.to/iabdsam/writing-your-first-client-server-program-5a0b</link>
      <guid>https://dev.to/iabdsam/writing-your-first-client-server-program-5a0b</guid>
      <description>&lt;p&gt;Your Professor asked you to prepare a basic client-server program for the lab next week or maybe you are yourself starting Socket programming, what's better than writing the first program and learning along that.&lt;/p&gt;

&lt;p&gt;The source files are located on &lt;a href="https://github.com/iabdsam/basic-client-server"&gt;Github&lt;/a&gt; if you need them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-quick-theory"&gt;
  &lt;/a&gt;
  The quick theory
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-socket-"&gt;
  &lt;/a&gt;
  what is a socket ?
&lt;/h3&gt;

&lt;p&gt;well, its (an integer and) a file descriptor through which we do our desired communication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-does-communication-looks-like-important"&gt;
  &lt;/a&gt;
  what does communication looks like ? (important)
&lt;/h3&gt;

&lt;p&gt;Server - &lt;strong&gt;&lt;code&gt;Bind()s&lt;/code&gt;&lt;/strong&gt; socket to an address and port, this socket then &lt;strong&gt;&lt;code&gt;listen()s&lt;/code&gt;&lt;/strong&gt; for incoming, then &lt;strong&gt;&lt;code&gt;accept()s&lt;/code&gt;&lt;/strong&gt; the incoming request (from client).&lt;/p&gt;

&lt;p&gt;Client - &lt;strong&gt;&lt;code&gt;Connect()&lt;/code&gt;s&lt;/strong&gt; your socket via local address and port for a &lt;strong&gt;&lt;code&gt;listen()&lt;/code&gt;ing&lt;/strong&gt; socket to &lt;strong&gt;&lt;code&gt;accept()&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-happens-after-connect-and-accept-"&gt;
  &lt;/a&gt;
  what happens after connect() and accept() ?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;accept()&lt;/code&gt; returns a new socket to be used for communicating to that particular accepted client.&lt;br&gt;
In client side, the same socket used to &lt;code&gt;connect&lt;/code&gt; is used to communicate.&lt;br&gt;
now you can &lt;code&gt;send()&lt;/code&gt; and &lt;code&gt;recv()&lt;/code&gt; from both sides.&lt;/p&gt;

&lt;p&gt;What is the first thing that you need? &lt;strong&gt;Headers!&lt;/strong&gt;&lt;br&gt;
We will be using the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/socket.h&amp;gt;
#include &amp;lt;arpa/inet.h&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets build both sides one-by-one&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverc"&gt;
  &lt;/a&gt;
  Server.c
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sockID1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A stream socket has been created in PF_INET(internet) domain.&lt;/p&gt;

&lt;p&gt;Now, we have to bind our socket to an address and port. But, the &lt;code&gt;bind()&lt;/code&gt; function asks for one struct (of &lt;code&gt;sockaddr&lt;/code&gt; type) that has all that info. Instead we pass it &lt;code&gt;sockaddr_in&lt;/code&gt; casted to &lt;code&gt;sockaddr&lt;/code&gt; because it is more specific to our needs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// sets IPv4&lt;/span&gt;
&lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htonl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INADDR_ANY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//htonl - host to network long, htons - host to network short&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We filled the structure. Here, &lt;code&gt;INADDR_ANY&lt;/code&gt; automatically fills a default Ip address since we don't want to bind it to particular one.&lt;/p&gt;

&lt;p&gt;5200 is the port number that we will be using. You can use your own (make sure it is not reserved) (use the same in client).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;==-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Bind Failed to Port 5200&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Bind Success to Port 5200&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Binded the socket, returns -1 if fails.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Listen Failed&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Listening...&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are ready to accept an incoming request (&lt;code&gt;connect()&lt;/code&gt; from client).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;client_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;socklen_t&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_addr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sockID2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;client_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Accepted a connection&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is interesting. The only thing &lt;code&gt;accept()&lt;/code&gt; needs from our server is &lt;code&gt;sockID1&lt;/code&gt;. &lt;code&gt;client_addr&lt;/code&gt; will contain info about the client it accepts and will be filled on function call.&lt;/p&gt;

&lt;p&gt;This returns a new socket (&lt;code&gt;sockID2&lt;/code&gt;) for us which will be used for sending and recieving from the client.&lt;/p&gt;

&lt;p&gt;The last step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;countR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;countS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Close&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"To Client : "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;countS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Close&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"From Client : "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;countR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try to understand this yourself. &lt;code&gt;countR&lt;/code&gt; and &lt;code&gt;countS&lt;/code&gt; are there for error handling (&lt;code&gt;send&lt;/code&gt; and &lt;code&gt;recv&lt;/code&gt; give -1 on error). &lt;strong&gt;Sending or recieving the word "Close" is the exit condition.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What are we trying to do? First message to be sent by server. Client then recieves it  and sends something. Server then recieves it and sends ...........&lt;/p&gt;

&lt;p&gt;Finally&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;    &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Socket connection Closed&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Without scratching heads, lets move to client.c&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clientc"&gt;
  &lt;/a&gt;
  Client.c
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sockID1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//sets to IPv4&lt;/span&gt;
    &lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htonl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INADDR_ANY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//htonl - host to network long, htons - host to network short&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is same, because connection also requires the specifics of where and via-what to connect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addrPort1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Connect Failed&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Connected via Port 5200&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nearly identical to &lt;code&gt;bind()&lt;/code&gt;. Right. But remember, it complements the &lt;code&gt;accept()&lt;/code&gt; function in the server side.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;countR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;countS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Close&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"From Server : "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;countR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Close&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"To Server : "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;countS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope its easier to see the logic now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;    &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockID1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Socket connection Closed&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Done.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Move to the directory. Split your terminal. In one, run the server, then on other run the client. Happy connection !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/iabdsam/basic-client-server"&gt;Source code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have tried to keep it as short as possible and only explain the things relevant to a first program.&lt;br&gt;
Questions &amp;amp; Suggestions are welcome.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>cpp</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Angular 13 is released</title>
      <author>Tomasz Smykowski</author>
      <pubDate>Thu, 04 Nov 2021 06:31:24 +0000</pubDate>
      <link>https://dev.to/tomaszs2/angular-13-is-released-15n3</link>
      <guid>https://dev.to/tomaszs2/angular-13-is-released-15n3</guid>
      <description>&lt;p&gt;Angular 13 is released!&lt;/p&gt;

&lt;p&gt;What's  new:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;More Ivy = speed improvements&lt;/li&gt;
&lt;li&gt;Improved AFP - faster execution&lt;/li&gt;
&lt;li&gt;Easier dynamic component creation&lt;/li&gt;
&lt;li&gt;IE11 not supported&lt;/li&gt;
&lt;li&gt;build cache improves build time by almost 70%&lt;/li&gt;
&lt;li&gt;RxJS version update&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Faster and less memory intense unit tests&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improved a11y for Angular Material&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;support for inlining Adobe Fonts - faster apps&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improved localization API&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Easier directives disabling&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And more&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Release notes: &lt;a href="https://blog.angular.io/angular-v13-is-now-available-cce66f7bc296"&gt;https://blog.angular.io/angular-v13-is-now-available-cce66f7bc296&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#angular-javascript"&gt;
  &lt;/a&gt;
  angular #Javascript
&lt;/h1&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
