<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>🚀10 Trending projects on GitHub for web developers - 20th August 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 20 Aug 2021 14:00:12 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-20th-august-2021-2jal</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-20th-august-2021-2jal</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-shiki"&gt;
  &lt;/a&gt;
  1. Shiki
&lt;/h3&gt;

&lt;p&gt;A beautiful Syntax Highlighter.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/shikijs"&gt;
        shikijs
      &lt;/a&gt; / &lt;a href="https://github.com/shikijs/shiki"&gt;
        shiki
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A beautiful Syntax Highlighter.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
Shiki&lt;/h2&gt;
&lt;p&gt;
  Shiki is a beautiful Syntax Highlighter. &lt;a href="http://shiki.matsu.io" rel="nofollow"&gt;Demo&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Usage&lt;/h2&gt;

&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm i shiki
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; yarn add shiki&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;shiki&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'shiki'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;

&lt;span class="pl-s1"&gt;shiki&lt;/span&gt;
  &lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;getHighlighter&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-c1"&gt;theme&lt;/span&gt;: &lt;span class="pl-s"&gt;'nord'&lt;/span&gt;
  &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
  &lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;then&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;highlighter&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-smi"&gt;console&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;log&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;highlighter&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;codeToHtml&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;`console.log('shiki');`&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s"&gt;'js'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
  &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;

&lt;span class="pl-c"&gt;// &amp;lt;pre class="shiki" style="background-color: #2e3440"&amp;gt;&amp;lt;code&amp;gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;//   &amp;lt;!-- Highlighted Code --&amp;gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;// &amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;div class="highlight highlight-text-html-basic position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt; &lt;span class="pl-c1"&gt;src&lt;/span&gt;='&lt;span class="pl-s"&gt;https://unpkg.com/shiki&lt;/span&gt;'&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-s1"&gt;shiki&lt;/span&gt;
  &lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;getHighlighter&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-c1"&gt;theme&lt;/span&gt;: &lt;span class="pl-s"&gt;'nord'&lt;/span&gt;
  &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
  &lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;then&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;highlighter&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;code&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;highlighter&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;codeToHtml&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;`console.log('shiki');`&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s"&gt;'js'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
    &lt;span class="pl-smi"&gt;document&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;getElementById&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'output'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;innerHTML&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;code&lt;/span&gt;
  &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/shikijs/shiki./docs/themes.md"&gt;Themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/shikijs/shiki./docs/languages.md"&gt;Languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/shikijs/shiki./packages/renderer-svg/README.md"&gt;SVG Renderer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/shikijs/shiki./packages/vuepress-plugin/README.md"&gt;vuepress-plugin-shiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clone &lt;a href="https://github.com/shikijs/shiki-starter"&gt;shikijs/shiki-starter&lt;/a&gt; to play with Shiki, or try it out on &lt;a href="https://repl.it/@octref/shiki-starter" rel="nofollow"&gt;Repl.it&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Seen&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Shiki Docs: &lt;a href="https://shiki.matsu.io" rel="nofollow"&gt;https://shiki.matsu.io&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Interactive Demo on CodeSandbox (with Next.js)…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/shikijs/shiki"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#2-awesome-guidelines"&gt;
  &lt;/a&gt;
  2. Awesome Guidelines
&lt;/h3&gt;

&lt;p&gt;A curated list of high quality coding style conventions and standards.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kristories"&gt;
        Kristories
      &lt;/a&gt; / &lt;a href="https://github.com/Kristories/awesome-guidelines"&gt;
        awesome-guidelines
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A curated list of high quality coding style conventions and standards.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://github.com/Kristories/awesome-guidelinesassets/header.png"&gt;&lt;img alt="Awesome Guidelines" src="https://res.cloudinary.com/practicaldev/image/fetch/s--6jM1KEcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Kristories/awesome-guidelinesassets/header.png"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
Awesome Guidelines &lt;a href="https://awesome.re" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5d0405ddcbeac98b5806832e6254a0a102e09b47637c2ddec9a8094cb2257b31/68747470733a2f2f617765736f6d652e72652f62616467652d666c6174322e737667" alt="Awesome"&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;A set of guidelines for a specific programming language that recommend programming style, practices, and methods for each aspect of a program written in that language.&lt;/p&gt;

&lt;p&gt;Contributions welcome. Please read the &lt;a href="https://github.com/Kristories/awesome-guidelines#contribute"&gt;contribution guidelines&lt;/a&gt; before contributing. Add links through pull requests or create an issue to start a discussion.&lt;/p&gt;

&lt;h2&gt;
Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Kristories/awesome-guidelines#programming-languages"&gt;Programming Languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Kristories/awesome-guidelines#development-environment"&gt;Development Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Kristories/awesome-guidelines#platforms"&gt;Platforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Kristories/awesome-guidelines#frameworks"&gt;Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Kristories/awesome-guidelines#content-management-system"&gt;Content Management System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Kristories/awesome-guidelines#tools"&gt;Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Kristories/awesome-guidelines#contributors"&gt;Contributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Programming Languages&lt;/h2&gt;

&lt;h3&gt;
Brainfuck&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/renmans/full/JjdJPpW" rel="nofollow"&gt;BF Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
C&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/20080039927.pdf" rel="nofollow"&gt;NASA C++ Coding Standards and Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://users.ece.cmu.edu/~eno/coding/CCodingStandard.html" rel="nofollow"&gt;C Coding Standard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikibooks.org/wiki/C_Programming/Structure_and_style" rel="nofollow"&gt;C Programming/Structure and style&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
C#&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions" rel="nofollow"&gt;C# Coding Conventions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/raywenderlich/c-sharp-style-guide"&gt;C# Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dofactory.com/reference/csharp-coding-standards" rel="nofollow"&gt;C# Coding Standards and Naming Conventions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
C++&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://google.github.io/styleguide/cppguide.html" rel="nofollow"&gt;Google C++ Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines" rel="nofollow"&gt;C++ Core Guidelines&lt;/a&gt; - A set of tried-and-true guidelines, rules, and best practices about coding in C++.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Clojure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/bbatsov/clojure-style-guide"&gt;The Clojure Style Guide&lt;/a&gt; - A community coding style guide for the Clojure programming language.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Common Lisp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://lisp-lang.org/style-guide/" rel="nofollow"&gt;Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://google.github.io/styleguide/lispguide.xml" rel="nofollow"&gt;Google Common Lisp Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://labs.ariel-networks.com/cl-style-guide.html" rel="nofollow"&gt;Common Lisp Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
D&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dlang.org/dstyle.html" rel="nofollow"&gt;The D&lt;/a&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kristories/awesome-guidelines"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-absurdsql"&gt;
  &lt;/a&gt;
  3. absurd-sql
&lt;/h3&gt;

&lt;p&gt;Implements a backend for sql.js (sqlite3 compiled for the web) that treats IndexedDB like a disk and stores data in blocks there. That means your sqlite3 database is persisted. And not in the terrible way of reading and writing the whole image at once -- it reads and writes your db in small chunks.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jlongster"&gt;
        jlongster
      &lt;/a&gt; / &lt;a href="https://github.com/jlongster/absurd-sql"&gt;
        absurd-sql
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      sqlite3 in ur indexeddb (hopefully a better backend soon)
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;This is an absurd project.&lt;/p&gt;
&lt;p&gt;It implements a backend for &lt;a href="https://github.com/sql-js/sql.js/"&gt;sql.js&lt;/a&gt; (sqlite3 compiled for the web) that treats IndexedDB like a disk and stores data in blocks there. That means your sqlite3 database is persisted. And not in the terrible way of reading and writing the whole image at once -- it reads and writes your db in small chunks.&lt;/p&gt;
&lt;p&gt;It basically stores a whole database into another database. Which is absurd.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://priceless-keller-d097e5.netlify.app/" rel="nofollow"&gt;See the demo&lt;/a&gt;. You can also view an entire app using this &lt;a href="https://app-next.actualbudget.com/" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You should also read &lt;a href="https://jlongster.com/future-sql-web" rel="nofollow"&gt;this blog post&lt;/a&gt; which explains the project in great detail.&lt;/p&gt;
&lt;p&gt;If you like my work, feel free to &lt;a href="https://www.buymeacoffee.com/jlongster" rel="nofollow"&gt;buy me a coffee!&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
How do I use it?&lt;/h2&gt;
&lt;p&gt;You can check out the &lt;a href="https://github.com/jlongster/absurd-example-project"&gt;example project&lt;/a&gt; to get started. Or follow the steps below:&lt;/p&gt;
&lt;p&gt;First you install the packages:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;yarn add @jlongster/sql.js absurd-sql.js-backend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Right now you need to use my fork…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jlongster/absurd-sql"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-hyperformula"&gt;
  &lt;/a&gt;
  4. HyperFormula
&lt;/h3&gt;

&lt;p&gt;A complete, open-source Excel-like calculation engine written in TypeScript. Includes 380+ built-in functions. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/handsontable"&gt;
        handsontable
      &lt;/a&gt; / &lt;a href="https://github.com/handsontable/hyperformula"&gt;
        hyperformula
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A complete, open-source Excel-like calculation engine written in TypeScript. Includes 380+ built-in functions. Maintained by the Handsontable team⚡
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;a href="https://handsontable.github.io/hyperformula/" rel="nofollow"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lSl2mDgb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/handsontable/hyperformula./github-hf-logo-blue.svg" width="250" height="51" alt="HyperFormula"&gt;
&lt;/a&gt;
&lt;h3&gt;
HyperFormula is an open source, spreadsheet-like calculation engine ⚡
&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/handsontable/hyperformula/actions?query=workflow%3ATest+branch%3Amaster"&gt;&lt;img src="https://camo.githubusercontent.com/80aecd4d3c0a82908484a9ab450d2d44124474559f682a004104b089ff9addcd/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f68616e64736f6e7461626c652f6879706572666f726d756c612f54657374" alt="GitHub Workflow Status"&gt;&lt;/a&gt;
&lt;a href="https://app.fossa.io/projects/git%2Bgithub.com%2Fhandsontable%2Fhyperformula?ref=badge_shield" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3ce06ace9e22234405b1eb46f21bf97ea38658a45b26cce92475696af36d156b/68747470733a2f2f6170702e666f7373612e696f2f6170692f70726f6a656374732f6769742532426769746875622e636f6d25324668616e64736f6e7461626c652532466879706572666f726d756c612e7376673f747970653d736869656c64" alt="FOSSA Status"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/handsontable/hyperformula" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc15c15bce59ed38453438ff6de4d0f04dcb3641c26db77c3c5158c7f689933b/68747470733a2f2f636f6465636f762e696f2f67682f68616e64736f6e7461626c652f6879706572666f726d756c612f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d356b395a517638617a4f" alt="codecov"&gt;&lt;/a&gt;
&lt;a href="https://lgtm.com/projects/g/handsontable/hyperformula/context:javascript" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b65e677e136a80531de60efe8e437c5c793a84ee8ac3111d161ac0c96ea68732/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f6a6176617363726970742f672f68616e64736f6e7461626c652f6879706572666f726d756c612e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138" alt="Language grade: JavaScript"&gt;&lt;/a&gt;
&lt;a href="https://snyk.io/test/github/handsontable/hyperformula?targetFile=package.json" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f3aedba0254ffb6bf1f9c87b4637a768faf23b38cd7ccd798e7f62ab3400c049/68747470733a2f2f736e796b2e696f2f746573742f6769746875622f68616e64736f6e7461626c652f6879706572666f726d756c612f62616467652e7376673f74617267657446696c653d7061636b6167652e6a736f6e" alt="Known Vulnerabilities"&gt;&lt;/a&gt;
&lt;a href="https://github.com/handsontable/hyperformula/graphs/contributors"&gt;&lt;img src="https://camo.githubusercontent.com/12948c003dcb2e1534ef21cc8d9a9263f13b53462217fd5d74280176df24541d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f68616e64736f6e7461626c652f6879706572666f726d756c61" alt="GitHub contributors"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Description&lt;/h2&gt;
&lt;p&gt;HyperFormula allows you to perform spreadsheet-like calculations in your
web applications. It is written in TypeScript and supports all major
JavaScript frameworks. You can use it in a browser or as a service with
Node.js as your back-end technology.&lt;/p&gt;
&lt;p&gt;The engine comes with a built-in, localized
&lt;a href="https://handsontable.github.io/hyperformula/guide/built-in-functions.html" rel="nofollow"&gt;library of functions&lt;/a&gt;
grouped into different categories, and covers most user-triggered actions
such as &lt;a href="https://handsontable.github.io/hyperformula/guide/basic-operations.html" rel="nofollow"&gt;CRUD operations&lt;/a&gt;
&lt;a href="https://handsontable.github.io/hyperformula/guide/undo-redo.html" rel="nofollow"&gt;undo/redo&lt;/a&gt;
and &lt;a href="https://handsontable.github.io/hyperformula/guide/clipboard-operations.html" rel="nofollow"&gt;clipboard operations&lt;/a&gt;
It also supports the use of cross-sheet references,
&lt;a href="https://handsontable.github.io/hyperformula/guide/named-ranges.html" rel="nofollow"&gt;named expressions&lt;/a&gt;,
different &lt;a href="https://handsontable.github.io/hyperformula/guide/types-of-values.html" rel="nofollow"&gt;data types&lt;/a&gt;,
and &lt;a href="https://handsontable.github.io/hyperformula/guide/custom-functions.html" rel="nofollow"&gt;custom functions&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=JJXUmACTDdk" rel="nofollow"&gt;Explainer video&lt;/a&gt; /
&lt;a href="https://handsontable.com/blog/articles/2020/6/introducing-hyperformula-fast-javascript-calculation-engine" rel="nofollow"&gt;Blog post&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Demos
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://handsontable.github.io/hyperformula/guide/demo.html" rel="nofollow"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://handsontable.github.io/hyperformula/guide/integration-with-react.html" rel="nofollow"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://handsontable.github.io/hyperformula/guide/integration-with-vue.html" rel="nofollow"&gt;Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://handsontable.github.io/hyperformula/guide/integration-with-angular.html" rel="nofollow"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://handsontable.github.io/hyperformula/guide/client-side-installation.html" rel="nofollow"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://handsontable.github.io/hyperformula/guide/basic-usage.html" rel="nofollow"&gt;Basic usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://handsontable.github.io/hyperformula/api/" rel="nofollow"&gt;API Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://handsontable.github.io/hyperformula/guide/configuration-options.html" rel="nofollow"&gt;Configuration options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://handsontable.github.io/hyperformula/guide/built-in-functions.html" rel="nofollow"&gt;List of built-in functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://handsontable.github.io/hyperformula/guide/key-concepts.html" rel="nofollow"&gt;Key concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://handsontable.github.io/hyperformula/guide/contact.html" rel="nofollow"&gt;Contact&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Getting started&lt;/h2&gt;
&lt;p&gt;Install the library from &lt;a href="https://www.npmjs.com/package/hyperformula" rel="nofollow"&gt;npm&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s1"&gt;npm&lt;/span&gt; &lt;span class="pl-s1"&gt;install&lt;/span&gt; &lt;span class="pl-s1"&gt;hyperformula&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Once properly installed, you can use it like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-v"&gt;HyperFormula&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'hyperformula'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/handsontable/hyperformula"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#5-react-desktop"&gt;
  &lt;/a&gt;
  5. React Desktop
&lt;/h3&gt;

&lt;p&gt;React UI Components for macOS High Sierra and Windows 10&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gabrielbull"&gt;
        gabrielbull
      &lt;/a&gt; / &lt;a href="https://github.com/gabrielbull/react-desktop"&gt;
        react-desktop
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      React UI Components for macOS High Sierra and Windows 10
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a href="http://reactdesktop.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2a9e83579fd1e9515976422e15a054a029096dc5241eb2e0d6683aa319db3b43/68747470733a2f2f7261776769742e636f6d2f6761627269656c62756c6c2f72656163742d6465736b746f702f6d61737465722f646f63732f7265736f75726365732f72656163742d6465736b746f702e737667" alt="React Desktop" title="React Desktop"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/gabrielbull/react-desktop" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2943074ada2bb92828a794445554bb4ff242c2e85acf133623fc5bf984edb181/68747470733a2f2f7472617669732d63692e6f72672f6761627269656c62756c6c2f72656163742d6465736b746f702e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://codeclimate.com/github/gabrielbull/react-desktop" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6afeea150b445d5b69886e8a53552c4715e6b46461a3d7e8f54871996bb656bd/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f6761627269656c62756c6c2f72656163742d6465736b746f702f6261646765732f6770612e737667" alt="Code Climate"&gt;&lt;/a&gt;
&lt;a href="https://david-dm.org/gabrielbull/react-desktop" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b006f881874fdfc720310134acea7b4a4316dca49eaa2d13e4a47fcff738aa5a/68747470733a2f2f64617669642d646d2e6f72672f6761627269656c62756c6c2f72656163742d6465736b746f702e737667" alt="Dependency Status"&gt;&lt;/a&gt;
&lt;a href="https://david-dm.org/gabrielbull/react-desktop#info=peerDependencies" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9db7f2782b2c3733c29ef824308ff911c3297cbd5c84fdf5bfccec4787e5479c/68747470733a2f2f64617669642d646d2e6f72672f6761627269656c62756c6c2f72656163742d6465736b746f702f706565722d7374617475732e737667" alt="peerDependency Status"&gt;&lt;/a&gt;
&lt;a href="https://david-dm.org/gabrielbull/react-desktop#info=devDependencies" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5e22d39abf38f8f81b6c3be9f4e2a566b5c8026dd43d341fc0d86b006d669a72/68747470733a2f2f64617669642d646d2e6f72672f6761627269656c62756c6c2f72656163742d6465736b746f702f6465762d7374617475732e737667" alt="devDependency Status"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.org/package/react-desktop" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4ce7b558e5a16a15b7a613444b2864c7c947e444add5fe84d00e51dff734b7c1/687474703a2f2f696d672e736869656c64732e696f2f6e706d2f64742f72656163742d6465736b746f702e737667" alt="npm downloads"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.org/package/react-desktop" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/633d6e9ff2f4566bd232a01c254689cd62957c35eb64fcdbae080e90761da18b/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f72656163742d6465736b746f702e737667" alt="npm version"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/gabrielbull/react-desktop?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Gitter"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;React UI Components for macOS High Sierra and Windows 10.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install react-desktop --save&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://reactdesktop.js.org/demo/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9c766fb632fca7b8f42d163826fb8713d0507d34b7ad86f458cc8434c6d641c2/68747470733a2f2f7261776769742e636f6d2f6761627269656c62756c6c2f72656163742d6465736b746f702f6d61737465722f646f63732f7265736f75726365732f64656d6f2e737667" alt="Demo" title="Demo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Help wanted!&lt;/h2&gt;
&lt;p&gt;I am looking for developers to help me develop this project. Please submit some ideas in the issues section or some PRs to get this project going. If you are interested, you can become a collaborator on the project. Thanks.&lt;/p&gt;
&lt;h2&gt;
Contributing&lt;/h2&gt;
&lt;p&gt;This library has been created to bring a native desktop experience to the web. It works extremely well with tools such as &lt;a href="http://nwjs.io" rel="nofollow"&gt;node-webkit&lt;/a&gt; or &lt;a href="http://electron.atom.io" rel="nofollow"&gt;Electron.js&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Everyone is welcome to contribute and add more components/documentation whilst following the &lt;a href="https://github.com/gabrielbull/react-desktop/CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;p&gt;Guides on installation, components and advanced usage are found in the &lt;a href="http://reactdesktop.js.org" rel="nofollow"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/gabrielbull/react-desktop"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#6-release-changelog-builder-action"&gt;
  &lt;/a&gt;
  6. Release Changelog Builder Action
&lt;/h3&gt;

&lt;p&gt;A GitHub action that builds your release notes / changelog fast, easy and exactly the way you want.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mikepenz"&gt;
        mikepenz
      &lt;/a&gt; / &lt;a href="https://github.com/mikepenz/release-changelog-builder-action"&gt;
        release-changelog-builder-action
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A GitHub action that builds your release notes / changelog fast, easy and exactly the way you want.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
  &lt;img class="emoji" title=":octocat:" alt=":octocat:" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ABKpJP58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.githubassets.com/images/icons/emoji/octocat.png" height="20" width="20"&gt;📄🔖📦
&lt;/div&gt;
&lt;h1&gt;
  release-changelog-builder-action
&lt;/h1&gt;
&lt;p&gt;
    ... a GitHub action that builds your release notes / changelog fast, easy and exactly the way you want
&lt;/p&gt;

&lt;div&gt;
  &lt;a rel="noopener noreferrer" href="https://github.com/mikepenz/release-changelog-builder-action.github/images/release_changelog_builder_collapsed.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O-IXsygX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/mikepenz/release-changelog-builder-action.github/images/release_changelog_builder_collapsed.png"&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;a href="https://github.com/mikepenz/release-changelog-builder-action/actions"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CiWwVIWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/mikepenz/release-changelog-builder-action/workflows/CI/badge.svg"&gt;
    &lt;/a&gt;
&lt;/div&gt;




&lt;p&gt;
    &lt;a href="https://github.com/mikepenz/release-changelog-builder-action#whats-included-"&gt;What's included 🚀&lt;/a&gt; •
    &lt;a href="https://github.com/mikepenz/release-changelog-builder-action#setup"&gt;Setup 🛠️&lt;/a&gt; •
    &lt;a href="https://github.com/mikepenz/release-changelog-builder-action#full-sample-%EF%B8%8F"&gt;Sample 🖥️&lt;/a&gt; •
    &lt;a href="https://github.com/mikepenz/release-changelog-builder-action#customization-%EF%B8%8F"&gt;Customization 🖍️&lt;/a&gt; •
    &lt;a href="https://github.com/mikepenz/release-changelog-builder-action#contribute-"&gt;Contribute 🧬&lt;/a&gt; •
    &lt;a href="https://github.com/mikepenz/release-changelog-builder-action#license"&gt;License 📓&lt;/a&gt;
&lt;/p&gt;




&lt;h3&gt;
What's included 🚀
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Super simple integration
&lt;ul&gt;
&lt;li&gt;...even on huge repositories with hundreds of tags&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Parallel releases support&lt;/li&gt;
&lt;li&gt;Rich changelogs based on PRs

&lt;ul&gt;
&lt;li&gt;Alternative commit based mode&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Blazingly fast execution&lt;/li&gt;
&lt;li&gt;Supports any git project&lt;/li&gt;
&lt;li&gt;Highly flexible configuration&lt;/li&gt;
&lt;li&gt;Lightweight&lt;/li&gt;
&lt;li&gt;Supports any branch&lt;/li&gt;
&lt;li&gt;Rich build log output&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;


&lt;h2&gt;
Setup&lt;/h2&gt;

&lt;h3&gt;
Configure the workflow&lt;/h3&gt;
&lt;p&gt;Specify the action as part of your GitHub actions workflow:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml position-relative js-code-highlight"&gt;
&lt;pre&gt;- &lt;span class="pl-ent"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Build Changelog&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-ent"&gt;id&lt;/span&gt;: &lt;span class="pl-s"&gt;build_changelog&lt;/span&gt;
  &lt;span class="pl-ent"&gt;uses&lt;/span&gt;: &lt;span class="pl-s"&gt;mikepenz/release-changelog-builder-action@{latest-release}&lt;/span&gt;
  &lt;span class="pl-ent"&gt;env&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;GITHUB_TOKEN&lt;/span&gt;: &lt;span class="pl-s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Action outputs&lt;/h3&gt;
&lt;p&gt;After action execution it will return the &lt;code&gt;changelog&lt;/code&gt; and additional information as step output. You can use it in any follow-up step by referencing the output by referencing it…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mikepenz/release-changelog-builder-action"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-peeky"&gt;
  &lt;/a&gt;
  7. Peeky
&lt;/h3&gt;

&lt;p&gt;A testing framework for curious minds&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Akryum"&gt;
        Akryum
      &lt;/a&gt; / &lt;a href="https://github.com/Akryum/peeky"&gt;
        peeky
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A testing framework for curious minds 🐈️
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#8-web-components-examples"&gt;
  &lt;/a&gt;
  8. Web Components Examples
&lt;/h3&gt;

&lt;p&gt;A series of web components examples, related to the MDN web components documentation&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mdn"&gt;
        mdn
      &lt;/a&gt; / &lt;a href="https://github.com/mdn/web-components-examples"&gt;
        web-components-examples
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A series of web components examples, related to the MDN web components documentation at https://developer.mozilla.org/en-US/docs/Web/Web_Components.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
web-components-examples&lt;/h1&gt;
&lt;p&gt;A series of web components examples, related to the MDN web components documentation at &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components" rel="nofollow"&gt;https://developer.mozilla.org/en-US/docs/Web/Web_Components&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following examples are available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/mdn/web-components-examplescomposed-composed-path"&gt;composed-composed-path&lt;/a&gt;. A very simple example that shows the behavior of the &lt;code&gt;Event&lt;/code&gt; object &lt;code&gt;composed&lt;/code&gt; and &lt;code&gt;composedPath&lt;/code&gt; properties. &lt;a href="https://mdn.github.io/web-components-examples/composed-composed-path/" rel="nofollow"&gt;See composed-composed-path live&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mdn/web-components-examplesdefined-pseudo-class"&gt;defined-pseudo-class&lt;/a&gt;. A very simple example that shows how the &lt;code&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:defined" rel="nofollow"&gt;:defined pseudo-class&lt;/a&gt;&lt;/code&gt; works. &lt;a href="https://mdn.github.io/web-components-examples/defined-pseudo-class/" rel="nofollow"&gt;See defined-pseudo-class live&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mdn/web-components-exampleseditable-list"&gt;editable-list&lt;/a&gt; – &lt;code&gt;&amp;lt;editable-list&amp;gt;&lt;/code&gt;.  A simple example showing how elements can be consolidated to create a list with addable/removable items.  Items are added by using a &lt;code&gt;list-item&lt;/code&gt; attribute or by entering text and clicking the plus sign. &lt;a href="https://mdn.github.io/web-components-examples/editable-list/" rel="nofollow"&gt;See editable-list live&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mdn/web-components-examplesedit-word"&gt;edit-word&lt;/a&gt; — &lt;code&gt;&amp;lt;edit-word&amp;gt;&lt;/code&gt;. Wrapping one or more words in this element means that you can then click/focus the element to reveal a text input that can then be used to edit the word(s). &lt;a href="https://mdn.github.io/web-components-examples/edit-word/" rel="nofollow"&gt;See edit-word live&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mdn/web-components-exampleselement-details"&gt;element-details&lt;/a&gt; — &lt;code&gt;&amp;lt;element-details&amp;gt;&lt;/code&gt;. Displays a box containing an HTML…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mdn/web-components-examples"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#9-hackathon-starter"&gt;
  &lt;/a&gt;
  9. Hackathon Starter
&lt;/h3&gt;

&lt;p&gt;A boilerplate for Node.js web applications&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/sahat"&gt;
        sahat
      &lt;/a&gt; / &lt;a href="https://github.com/sahat/hackathon-starter"&gt;
        hackathon-starter
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A boilerplate for Node.js web applications
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/949ff8d7e24c03fd853970ad4552c28d9cfadbd0e1d962c3e30344751e0ab5fa/68747470733a2f2f6c68342e676f6f676c6575736572636f6e74656e742e636f6d2f2d5056772d5a554d397656382f557557654835316f7330492f414141414141414144364d2f30496b673776694a6674512f77313238362d683536362d6e6f2f6861636b6174686f6e2d737461727465722d6c6f676f2e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/949ff8d7e24c03fd853970ad4552c28d9cfadbd0e1d962c3e30344751e0ab5fa/68747470733a2f2f6c68342e676f6f676c6575736572636f6e74656e742e636f6d2f2d5056772d5a554d397656382f557557654835316f7330492f414141414141414144364d2f30496b673776694a6674512f77313238362d683536362d6e6f2f6861636b6174686f6e2d737461727465722d6c6f676f2e6a7067" alt=""&gt;&lt;/a&gt;
Hackathon Starter&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://david-dm.org/sahat/hackathon-starter" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e7631ce6bc2a67159cfe75109cb243a9bd4d71c399e27d6833531083de98063a/68747470733a2f2f64617669642d646d2e6f72672f73616861742f6861636b6174686f6e2d737461727465722f7374617475732e7376673f7374796c653d666c6174" alt="Dependency Status"&gt;&lt;/a&gt; &lt;a href="https://david-dm.org/sahat/hackathon-starter?type=dev" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/abd1f96acc2ef218a93a247a79e4c2574b1d2bd663d2006611236c053806b2ba/68747470733a2f2f64617669642d646d2e6f72672f73616861742f6861636b6174686f6e2d737461727465722f6465762d7374617475732e737667" alt="devDependencies Status"&gt;&lt;/a&gt; &lt;a href="https://travis-ci.org/sahat/hackathon-starter" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/aa666f6794da3db0038f60146655423d23f317b71330087089f10928906e8b93/68747470733a2f2f7472617669732d63692e6f72672f73616861742f6861636b6174686f6e2d737461727465722e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt; &lt;a href="https://gitter.im/sahat/hackathon-starter?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Join the chat at https://gitter.im/sahat/hackathon-starter"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Live Demo&lt;/strong&gt;: &lt;a href="https://hackathon-starter.walcony.com" rel="nofollow"&gt;https://hackathon-starter.walcony.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jump to &lt;a href="https://github.com/sahat/hackathon-starter/blob/master/CHANGELOG.md"&gt;What's new?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A boilerplate for &lt;strong&gt;Node.js&lt;/strong&gt; web applications.&lt;/p&gt;
&lt;p&gt;If you have attended any hackathons in the past, then you know how much time it takes to
get a project started: decide on what to build, pick a programming language, pick a web framework
pick a CSS framework. A while later, you might have an initial project up on GitHub and only then
can other team members start contributing. Or how about doing something as simple as &lt;em&gt;Sign in with Facebook&lt;/em&gt;
authentication? You can spend hours on it if you are not familiar with how OAuth 2.0 works.&lt;/p&gt;
&lt;p&gt;When I started this project, my primary focus was on &lt;strong&gt;simplicity&lt;/strong&gt; and &lt;strong&gt;ease of use&lt;/strong&gt;
I also tried to make it as &lt;strong&gt;generic&lt;/strong&gt; and &lt;strong&gt;reusable&lt;/strong&gt; as possible to cover most use cases of hackathon web apps
without being too specific. In the worst case,…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/sahat/hackathon-starter"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#10-mathjs"&gt;
  &lt;/a&gt;
  10. Math.js
&lt;/h3&gt;

&lt;p&gt;An extensive math library for JavaScript and Node.js&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/josdejong"&gt;
        josdejong
      &lt;/a&gt; / &lt;a href="https://github.com/josdejong/mathjs"&gt;
        mathjs
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An extensive math library for JavaScript and Node.js
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4b3d6cbabd32c985a0be85769804f5536e5ac6fae066338c35cbe01667b3e0d3/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f7364656a6f6e672f6d6174686a732f6d61737465722f6d6973632f696d672f6d6174686a732e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/4b3d6cbabd32c985a0be85769804f5536e5ac6fae066338c35cbe01667b3e0d3/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f7364656a6f6e672f6d6174686a732f6d61737465722f6d6973632f696d672f6d6174686a732e706e67" alt="math.js"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mathjs.org" rel="nofollow"&gt;https://mathjs.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Math.js is an extensive math library for JavaScript and Node.js. It features a flexible expression parser with support for symbolic computation, comes with a large set of built-in functions and constants, and offers an integrated solution to work with different data types like numbers, big numbers, complex numbers, fractions, units, and matrices. Powerful and easy to use.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/mathjs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/52734c6d86773614c7806eacd9ca578336e38b3dbfd1aaa4c00e5edd6388daa6/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6d6174686a732e737667" alt="Version"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/mathjs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2001380c05632048b04f3f7ac1addd12e0a305e08b33f3e88706c45c66ff1c23/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f6d6174686a732e737667" alt="Downloads"&gt;&lt;/a&gt;
&lt;a href="https://github.com/josdejong/mathjs/actions"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XLlIuyvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/josdejong/mathjs/workflows/Node.js%2520CI/badge.svg" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://github.com/josdejong/mathjs/graphs/commit-activity"&gt;&lt;img src="https://camo.githubusercontent.com/d8dfb6a495d89aa0647157f5fbe5fd6fe9a901335db5867a6df74b36e484063b/68747470733a2f2f696d672e736869656c64732e696f2f6d61696e74656e616e63652f7965732f323032312e737667" alt="Maintenance"&gt;&lt;/a&gt;
&lt;a href="https://github.com/josdejong/mathjs/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/a653370e0da6826d21da118d1aad4bc6dfacfeec3d68d91a914249f762a6d0d6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6a6f7364656a6f6e672f6d6174686a732e737667" alt="License"&gt;&lt;/a&gt;
&lt;a href="https://app.fossa.io/projects/git%2Bgithub.com%2Fjosdejong%2Fmathjs?ref=badge_shield" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/44faf3f901c60b886035ee21558885879f863a73578fe279328f1413099a6d39/68747470733a2f2f6170702e666f7373612e696f2f6170692f70726f6a656374732f6769742532426769746875622e636f6d2532466a6f7364656a6f6e672532466d6174686a732e7376673f747970653d736869656c64" alt="FOSSA Status"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/josdejong/mathjs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/11354cbda80e08cb0fa3461b290306b733e50c88f5c27e860b25b259ba62a8aa/68747470733a2f2f636f6465636f762e696f2f67682f6a6f7364656a6f6e672f6d6174686a732f6272616e63682f646576656c6f702f67726170682f62616467652e737667" alt="Codecov"&gt;&lt;/a&gt;
&lt;a href="https://github.com/sponsors/josdejong"&gt;&lt;img src="https://camo.githubusercontent.com/7d9333b097b2f54a8957d126ab82937811489c9b75c3850f609985cf94cd29fe/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2532302d53706f6e736f722532306d652532306f6e2532304769744875622d6f72616e6765" alt="Github Sponsor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Supports numbers, big numbers, complex numbers, fractions, units, strings, arrays, and matrices.&lt;/li&gt;
&lt;li&gt;Is compatible with JavaScript's built-in Math library.&lt;/li&gt;
&lt;li&gt;Contains a flexible expression parser.&lt;/li&gt;
&lt;li&gt;Does symbolic computation.&lt;/li&gt;
&lt;li&gt;Comes with a large set of built-in functions and constants.&lt;/li&gt;
&lt;li&gt;Can be used as a command line application as well.&lt;/li&gt;
&lt;li&gt;Runs on any JavaScript engine.&lt;/li&gt;
&lt;li&gt;Is easily extensible.&lt;/li&gt;
&lt;li&gt;Open source.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Math.js can be used in both node.js and in the browser.&lt;/p&gt;
&lt;p&gt;Install math.js using &lt;a href="https://www.npmjs.com/package/mathjs" rel="nofollow"&gt;npm&lt;/a&gt;:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;npm install mathjs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or download mathjs via one of the CDN's listed on the downloads page:&lt;/p&gt;
&lt;p&gt;    &lt;a href="https://mathjs.org/download.html#download" rel="nofollow"&gt;https://mathjs.org/download.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/josdejong/mathjs"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing 📈
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +2,635 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tauri-apps/tauri"&gt;Tauri&lt;/a&gt; +1,518 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/danistefanovic/build-your-own-x"&gt;Build your own X&lt;/a&gt; +1,203 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alan2207/bulletproof-react"&gt;Bulletproof React&lt;/a&gt; +984 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +892 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/laymonage/giscus"&gt;giscus&lt;/a&gt; +54%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alan2207/bulletproof-react"&gt;Bulletproof React&lt;/a&gt; +31%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/growthbook/growthbook"&gt;Growth Book&lt;/a&gt; +22%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/07akioni/xicons"&gt;xicons&lt;/a&gt; +18%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Saul-Mirone/milkdown"&gt;Milkdown&lt;/a&gt; +17%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +9,058 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; +5,249 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/ML-For-Beginners"&gt;Machine Learning for Beginners&lt;/a&gt; +3,733 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alan2207/bulletproof-react"&gt;Bulletproof React&lt;/a&gt; +3,305 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nocodb/nocodb"&gt;NocoDB&lt;/a&gt; +2,904 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/alan2207/bulletproof-react"&gt;Bulletproof React&lt;/a&gt; +408%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bubkoo/html-to-image"&gt;html-to-image&lt;/a&gt; +95%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bring-shrubbery/use-cookie-consent"&gt;useCookieConsent&lt;/a&gt; +89%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/saadeghi/daisyui"&gt;DaisyUI&lt;/a&gt; +75%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/BuilderIO/mitosis"&gt;Mitosis&lt;/a&gt; +66%&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For all for the latest rankings please checkout &lt;a href="https://stargazing.dev"&gt;Stargazing.dev&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/stargazing_dev"&gt;follow me&lt;/a&gt; on Twitter where I regularly post about HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to write a high quality post on DEV</title>
      <author>Ella Ang (she/her/elle)</author>
      <pubDate>Fri, 20 Aug 2021 13:56:54 +0000</pubDate>
      <link>https://dev.to/devteam/how-to-write-a-high-quality-post-on-dev-3me0</link>
      <guid>https://dev.to/devteam/how-to-write-a-high-quality-post-on-dev-3me0</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@dtbosse"&gt;Daniel Thomas&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://dev.to/chrisachard/how-to-write-your-first-post-on-dev-c3k"&gt;Writing your first post on DEV&lt;/a&gt; can be as unfussy as clicking on the &lt;strong&gt;Create Post&lt;/strong&gt; button at the top of the screen (which takes you to &lt;a href="https://dev.to/new"&gt;https://dev.to/new&lt;/a&gt;) and jotting down some thoughts before hitting the juicy &lt;strong&gt;Publish&lt;/strong&gt; button at the bottom of the screen.&lt;/p&gt;

&lt;p&gt;That will get you started and on your way to publishing regularly, which is the key to creating connections with readers who engage with your work.&lt;/p&gt;

&lt;p&gt;If you want to build your readership and engagement further, here are a few more tips and tricks to posting on DEV that you might want to know about:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-the-editor-works"&gt;
  &lt;/a&gt;
  How the editor works
&lt;/h2&gt;

&lt;p&gt;This heading is a little misleading, because there are 2 editors to choose from right now. They're both markdown-based, but look and function a little different from each other:&lt;/p&gt;

&lt;p&gt;There's &lt;strong&gt;Rich + Markdown&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a1UfxNh4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2mmrzm96msx96fd64yx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a1UfxNh4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2mmrzm96msx96fd64yx.png" alt="Rich plus Markdown editor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And &lt;strong&gt;Basic&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3vWHNKlr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5irv2g3z1i3njh879lda.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3vWHNKlr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5irv2g3z1i3njh879lda.png" alt="Basic editor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can switch between these in your &lt;strong&gt;User Settings&lt;/strong&gt; under &lt;a href="https://dev.to/settings/customization"&gt;Customization&lt;/a&gt; (where you can also try out the different colour schemes featured in those screenshots - but I digress...), just bear in mind that posts previously published in one editor will continue to use that editor for any edits in the future. &lt;/p&gt;

&lt;p&gt;While the Basic editor carries the post's meta-data in its header, the Rich version tucks it in around the edges. So, if you want a cover image in the Basic editor, you'll have to link to it in the header. Similarly, if you want to create a series or link to a canonical URL you'll need to add those in yourself.&lt;/p&gt;

&lt;p&gt;We recommend reviewing &lt;a href="https://dev.to/ziizium"&gt;Habdul&lt;/a&gt;'s excellent, &lt;a href="https://dev.to/ziizium/a-beginners-guide-to-the-dev-editor-202p"&gt;comprehensive guide to posting on DEV&lt;/a&gt;. Habdul builds on the &lt;a href="https://dev.to/p/editor_guide"&gt;Editor Guide&lt;/a&gt; in enough detail that you'll be a competent markdown writer and editor by the end of the post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-tag-and-why-you-should"&gt;
  &lt;/a&gt;
  How to tag (and why you should)
&lt;/h2&gt;

&lt;p&gt;Did you know that top posts under certain tags are eligible for &lt;a href="https://dev.to/badges"&gt;badges&lt;/a&gt; each week? Additionally, having your post tagged correctly helps your audience find you, and avoids getting your post reported for suspicious behaviour. &lt;/p&gt;

&lt;p&gt;Be sure to check out the tag descriptions for any tags you're planning to use and be sure you're following any posting guidelines. See &lt;a href="https://dev.to/t/mentalhealth"&gt;#mentalhealth&lt;/a&gt; or &lt;a href="https://dev.to/t/opensource"&gt;#opensource&lt;/a&gt; for examples of tags that have descriptions and guidelines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#considering-accessibility"&gt;
  &lt;/a&gt;
  Considering accessibility
&lt;/h2&gt;

&lt;p&gt;For clarity on what we mean when we talk about accessibility (or a11y for keyboard-short), &lt;a href="https://dev.to/eevajonnapanula"&gt;Eevis&lt;/a&gt;'s &lt;a href="https://dev.to/eevajonnapanula/let-s-talk-about-accessibility-c80"&gt;post on a11y is a good starting point for some general concepts&lt;/a&gt;, such as inclusive language. If you'd like to know a little more about why a11y is important, &lt;a href="https://www.upyoura11y.com/why-accessibility/"&gt;Up Your A11y has a great intro&lt;/a&gt; that we'd recommend you check out.&lt;/p&gt;

&lt;p&gt;For the endlessly-curious, &lt;a href="https://dev.to/moopet"&gt;Ben&lt;/a&gt; explains a bit more about &lt;a href="https://dev.to/moopet/embedding-code-in-posts-40i5"&gt;why some ways of sharing code in your post are more accessible than others&lt;/a&gt;, while &lt;a href="https://dev.to/alfiedarko"&gt;Alfie&lt;/a&gt; &lt;a href="https://dev.to/alfiedarko/frontendsessions-web-accessibility-4eed"&gt;shares some best practices that might help with writing more accessible posts&lt;/a&gt;, and &lt;a href="https://dev.to/finallynero"&gt;Nero&lt;/a&gt; starts an important conversation &lt;a href="https://dev.to/finallynero/accessible-emojis--1pjh"&gt;about how accessible emojis are&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-talk-about-images"&gt;
  &lt;/a&gt;
  Let's talk about images
&lt;/h2&gt;

&lt;p&gt;A picture speaks a thousand words, or something, right? Well, that depends on your alt text...&lt;/p&gt;

&lt;p&gt;Not only do pictures help break up the wall-of-text effect of an in-depth tutorial, but they can also help influence the energy of your post and impact on your audience. Just remember to include alt text, so that anyone unable to view the image still knows what it is. For example, the alt text for this image is &lt;code&gt;An audience in an atmospheric auditorium&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---8E8D91e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9izxenjddgw55i0n1df7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---8E8D91e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9izxenjddgw55i0n1df7.jpg" alt="An audience in an atmospheric auditorium"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://www.pexels.com/@jibarofoto"&gt;Luis Quintero&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While a fix is on the way, cover images currently don't have alt text, so while they're handy for positioning your post at or near the top of the feed, don't rely on the cover image itself to convey any information that's important to the message of your post. That means, even if you have a pretty graphic title for a cover image you still need to write that title out in full.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#speaking-of-titles"&gt;
  &lt;/a&gt;
  Speaking of titles
&lt;/h2&gt;

&lt;p&gt;We at DEV always recommend taking some extra time to choose a title that sets your post apart from the rest. There are only so many "The best 10 JavaScript tools" posts any dev has time for, so what about "How this one JS tool changed my workflow and freed up time to grow a herb garden"? The key here is to actually deliver on your title, rather than use it as click-bait to draw in views. Photos of your herb garden (with appropriate alt text) help:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PORtSdkO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwzyk8jc71v52fiwdyw2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PORtSdkO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwzyk8jc71v52fiwdyw2.jpg" alt="Not quite herbs but genuinely my garden"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-finally"&gt;
  &lt;/a&gt;
  And finally
&lt;/h2&gt;

&lt;p&gt;We are here to learn from each other. If you have any other hints, tips, or best practices for post authors please feel free to share them below! We'd love to learn about the things you've discovered here on DEV and how you connect with your readers.&lt;/p&gt;

&lt;p&gt;Remember that all posts should abide by the &lt;a href="https://dev.to/terms"&gt;Terms of Use&lt;/a&gt; and &lt;a href="https://dev.to/code-of-conduct"&gt;Code of Conduct&lt;/a&gt;. This includes inclusive language, original work that you have the right to share (with credit to anyone else whose original work you're citing or referencing), and not posting for the purpose of producing backlinks or driving traffic to an external site. &lt;/p&gt;

</description>
      <category>writing</category>
      <category>howtodevto</category>
    </item>
    <item>
      <title>An inspiration for web design: Where you can go and a career based on maisyleigh</title>
      <author>Caio Gomes Braga</author>
      <pubDate>Fri, 20 Aug 2021 13:35:26 +0000</pubDate>
      <link>https://dev.to/caiobraga/an-inspiration-for-web-design-where-you-can-go-and-a-career-based-on-maisyleigh-1bl4</link>
      <guid>https://dev.to/caiobraga/an-inspiration-for-web-design-where-you-can-go-and-a-career-based-on-maisyleigh-1bl4</guid>
      <description>&lt;p&gt;We use you tube a lot in our day-to-day life, many of us can use it to rest or look for answers and tutorials of all kinds. During my time on you tube, I came across a very special channel called maisyleigh, which deserves the attention of all those programmers looking to get inspired.&lt;/p&gt;

&lt;p&gt;Introduction:&lt;/p&gt;

&lt;p&gt;In any career it's good to have goals set. Knowing where we want to go helps us make plans and gives us a better sense of what we should learn and how to do it. However, in programming it is not always so easy to find a model to be inspired by, as there are few programmers who actually demonstrate their development process.&lt;/p&gt;

&lt;p&gt;Although there are many tutorials, in the most diverse fremeworks, there is still a lack of in-depth content on creative and development processes that transcend technology. Fortunately for English speakers and web designers, today I bring someone who inspires me and can inspire you too.&lt;/p&gt;

&lt;p&gt;moreyleigh:&lt;/p&gt;

&lt;p&gt;channel: &lt;a href="https://www.youtube.com/channel/UC_h-Jl4Zxb7p-sSBTxprs4Q"&gt;https://www.youtube.com/channel/UC_h-Jl4Zxb7p-sSBTxprs4Q&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;maisyleigh talks about various subjects in her videos and shows her development process, but in general, she discusses how to find inspiration to make unique sites. However the most important is in the way she conveys her ideas, at the end of a video, even if you are not a web designer, you will feel inspired to program.&lt;/p&gt;

&lt;p&gt;However if you are really looking to be a web designer maisyleigh's content is a great example of their profession on a spectacular level. If your goal is to change people's lives with your work, expect to receive a class with some videos from this channel.&lt;/p&gt;

&lt;p&gt;Career:&lt;/p&gt;

&lt;p&gt;In my experience, web design is highly valued in the job market, many front-end developers manage to make a website, code, but it is the web designers who make a website unique.&lt;/p&gt;

&lt;p&gt;I don't mean that the two professionals should compete, many web-designers, including maisyleigh, also program and do the work of the front-end developer. What I mean is that they are technically different services.&lt;/p&gt;

&lt;p&gt;In theory, it's as if the web-designer is an architect and the front-end developer is the engineer. Large companies understand that both are necessary for the effective and rapid development of a given technology.&lt;/p&gt;

&lt;p&gt;But the fact is that the market misses web-designers, especially those who also know about the technical part of development.&lt;/p&gt;

&lt;p&gt;see video reviews here (portuguese): &lt;a href="https://www.programador-de-quintal.com.br/l/uma-inspiracao-para-web-design-a-onde-voce-pode-chegar-e-carreira-com-base-na-maisyleigh/"&gt;https://www.programador-de-quintal.com.br/l/uma-inspiracao-para-web-design-a-onde-voce-pode-chegar-e-carreira-com-base-na-maisyleigh/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;see video reviews here (english): &lt;a href="https://www.programador-de-quintal.com.br/l/an-inspiration-for-web-design-where-you-can-go-and-a-career-based-on-maisyleigh/"&gt;https://www.programador-de-quintal.com.br/l/an-inspiration-for-web-design-where-you-can-go-and-a-career-based-on-maisyleigh/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>design</category>
      <category>career</category>
      <category>inspiration</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Takeaways from this year's Stack Overflow Survey</title>
      <author>Saji Wang</author>
      <pubDate>Fri, 20 Aug 2021 13:27:32 +0000</pubDate>
      <link>https://dev.to/codesphere/5-takeaways-from-this-year-s-stack-overflow-survey-7nf</link>
      <guid>https://dev.to/codesphere/5-takeaways-from-this-year-s-stack-overflow-survey-7nf</guid>
      <description>&lt;p&gt;Stack Overflow's annual developer survey has become a staple of the programming community. It is undeniably one of the most popular publicly available surveys of developers. Coders, Marketers, and Entrepreneurs direct their attention to it in order to see the trends in the software industry.&lt;/p&gt;

&lt;p&gt;While you can check out the full report for yourself &lt;a href="https://insights.stackoverflow.com/survey/2021"&gt;here&lt;/a&gt;, these are our five takeaways from this year's survey.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-software-engineering-is-becoming-increasingly-selftaught"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Software Engineering is becoming increasingly self-taught&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In this year's survey, StackOverflow asked how developers learned to code and broke down the data by age.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FCc5CxAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/molcsdvaoq8og4oc84vw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FCc5CxAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/molcsdvaoq8og4oc84vw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's a pretty linear relationship showing that younger engineers are becoming increasingly reliant on online resources. That being said, the amount of developers attributing their programming skills to school, at least among those who are old enough to have attended university, has remained pretty constant.&lt;/p&gt;

&lt;p&gt;We've talked about the benefits and drawbacks of different kinds of educational methods &lt;a href="https://dev.to/codesphere/is-there-a-right-way-to-learn-to-code-3fn4"&gt;before&lt;/a&gt;, but this isn't necessarily a bad thing. Online learning methods are generally more equitable and versatile, and the sheer volume of different online learning resources is something the dev community should be proud of.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-diversity-still-has-a-long-way-to-go"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Diversity still has a long way to go&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;On a less positive note, the Stack Overflow survey has put to numbers just how big of a gender diversity issue there is among developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RcZGr7Yz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t5iemlhfsim60tnf5t8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RcZGr7Yz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t5iemlhfsim60tnf5t8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;According to the survey, only 5% of respondents identified as women, which is obviously not even close to the proportion of women in any country. While such a low number may be more of a statement of Stack Overflow's audience rather than the entire developer community, there's no question that gender diversity has a long way to go.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-javascript-is-still-king%E2%80%8A%E2%80%8Abut-typescript-is-going-to-be"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Javascript is still king - But typescript is going to be&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;For the 9th year in a row, Javascript is still the most used programming language among developers, with HTML/CSS in a close second.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9isy1KSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbzksb03l9hnpxplmicb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9isy1KSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbzksb03l9hnpxplmicb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Javascript is without a doubt increasingly versatile, but as it has grown so too has Typescript. The survey reports Typescript being used by 36% of developers, &lt;strong&gt;which is a 10% increase from last year.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Additionally, Typescript is ranked third among languages that developers love working with, behind only Rust and Clojure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qvpi7SNy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9uehr7210c0fztqr3vb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qvpi7SNy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9uehr7210c0fztqr3vb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you haven't hopped on the Typescript train by now, it's probably only a matter of time.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-theres-still-a-gap-between-loved-and-used-databases"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. There's still a gap between loved and used databases&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;There is still a pretty large gap between the database technologies that developers love and the database technologies that developers use. While a lot of this is likely chalked up to not wanting to spend time migrating databases, you just can't help feel bad for all these back-end devs being forced to work with MySQL&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yr8-h0HT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbgia4b4ujc12tidutyr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yr8-h0HT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbgia4b4ujc12tidutyr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YwYTf8f7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us4zoyjjgzx1qsae3art.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YwYTf8f7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us4zoyjjgzx1qsae3art.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Despite the top 3 most loved databases being Redis, Postgresql, and MongoDB, MySQL is still reported to be the most used. On top of that nearly half of all developers report dreading using MySQL!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-sre-and-devops-continue-to-be-expensive"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. SRE and DevOps continue to be expensive&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Finally, for all the talk of cloud providers being easy to use and cost-effective, DevOps and Site Reliability Engineers continue to be the most expensive kind of developers to hire.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GXnw4-_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si6dwarclc51uwkd3iwf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GXnw4-_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si6dwarclc51uwkd3iwf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're not sure where in tech you want to work, that means learning infrastructure is probably the most lucrative choice.&lt;br&gt;
For founders, however, this means managing your infrastructure is going to be incredibly expensive.&lt;/p&gt;

&lt;p&gt;At &lt;a href="https://codesphere.com/?utm_source=medium&amp;amp;utm_medium=blog&amp;amp;utm_campaign=sosurvey&amp;amp;utm_term=stackoverflow%2Bwebdev%2Bcareer%2Bweb%2Blearning"&gt;Codesphere&lt;/a&gt;, we're changing this by creating a zero-config cloud platform, so that your team can spend less time configuring infrastructure, and more time coding.&lt;/p&gt;




&lt;p&gt;What were your biggest takeaways from the survey?&lt;br&gt;
Let us know down below!&lt;/p&gt;

</description>
      <category>stackoverflow</category>
      <category>webdev</category>
      <category>programming</category>
      <category>trends</category>
    </item>
    <item>
      <title>Minimal Time Management App</title>
      <author>Dhruv Anand</author>
      <pubDate>Fri, 20 Aug 2021 13:13:09 +0000</pubDate>
      <link>https://dev.to/ananddhruv295/minimal-time-management-app-40o0</link>
      <guid>https://dev.to/ananddhruv295/minimal-time-management-app-40o0</guid>
      <description>&lt;p&gt;Being a high-school student and having everything online, it gets quiet difficult to manage time and get tasks done. &lt;br&gt;
So, I did some research and got to know about a technique called &lt;a href="https://en.wikipedia.org/wiki/Pomodoro_Technique"&gt;Pomodoro&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And I started looking for a good Pomodoro Timer app but did not find any good app. Either they were paid or lacked a few features. &lt;/p&gt;

&lt;p&gt;So, I made myself my own Pomodoro Timer app. It is very minimal.&lt;br&gt;
It is built using &lt;strong&gt;ElectronJS&lt;/strong&gt; &amp;amp; &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I would love to share the app with you guys and  receive your feedback. &lt;/p&gt;

&lt;p&gt;Check out the &lt;a href="https://github.com/iDCoded/Pomodoro-App"&gt;App&lt;/a&gt; on GitHub and download it and even give it a Star. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>electron</category>
    </item>
    <item>
      <title>Pickling  and Unpickling in Python🥒</title>
      <author>Kathan Vakharia</author>
      <pubDate>Fri, 20 Aug 2021 12:38:58 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/pickling-and-unpickling-in-python-52kl</link>
      <guid>https://dev.to/kathanvakharia/pickling-and-unpickling-in-python-52kl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-pickling"&gt;
  &lt;/a&gt;
  What is pickling?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;In Layman's terms, Pickling is a process to convert your python objects into a file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Technically speaking, it is a way to convert your well-known python objects like lists, sets, tuples, dictionaries, strings, pandas dataframes,... to a character stream. And that character stream contains all the information required to reconstruct that python object in another script.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FMZ1tpWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/liyvl4mkpoigqpn2mwyr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FMZ1tpWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/liyvl4mkpoigqpn2mwyr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;❗Note Pickling ≠ Compression → They both are completely different!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For all those programming nerds 🤓 out there, The process of converting an object to a file is also known as &lt;em&gt;Serialization or Marshalling or Flattening.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Retrieving that object back from the file is known as &lt;em&gt;DeSerialization or Unmarshalling or Unflattening&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Python provides the &lt;a href="https://docs.python.org/3/library/pickle.html"&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; module for performing serialization/deserialization.&lt;/p&gt;

&lt;p&gt;Let's say you want to pickle a dictionary into a file,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all, we need to import &lt;code&gt;pickle&lt;/code&gt; ,
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;
&lt;span class="c1"&gt;#A Sacred Dictionary 😌
&lt;/span&gt;&lt;span class="n"&gt;sacred_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"Gaitonde"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"Chand 🌙"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s"&gt;"side-kick"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"Bunty"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see how to use it.&lt;br&gt;
Here are the simple steps,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open/Create the file in which you want to store this dictionary.&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;pickle.dump()&lt;/code&gt; by passing the &lt;em&gt;dictionary&lt;/em&gt; and &lt;em&gt;file object&lt;/em&gt;.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="s"&gt;"""
w  =&amp;gt; Write mode
b  =&amp;gt; Binary mode
wb =&amp;gt; Write in binary mode
"""&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sacred.pkl"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sacred_dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;On executing the last snippet &lt;em&gt;"sacred.pkl"&lt;/em&gt; file will be created if not present which then will be filled with  &lt;code&gt;sacred_dict&lt;/code&gt; in form of the character stream.&lt;/li&gt;
&lt;li&gt;It will be placed in the &lt;em&gt;current working directory&lt;/em&gt;. You can also pass the &lt;em&gt;exact file path&lt;/em&gt; if you want it to be stored somewhere else!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's it, You have stored your dictionary in a file! Easy Peasy 😁 &lt;/p&gt;



&lt;p&gt;Now Let's see how to &lt;em&gt;unpickle&lt;/em&gt; or retreive that dictionary back.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The .pkl extension is just a convention that helps us identify it as a pickle file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To retrieve the object back, we have to use the &lt;code&gt;pickle.load()&lt;/code&gt; method passing the file object of the &lt;em&gt;pickled file&lt;/em&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="s"&gt;"""
r  =&amp;gt; Read mode
b  =&amp;gt; Binary mode
rb =&amp;gt; Read in Binary mode
"""&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sacred.pkl"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"rb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;retreived_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Let's print retreived_dict to confirm 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;retreived_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Output
#{'name': 'Gaitonde', 'location': 'Chand 🌙', 'side-kick': 'Bunty'}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#important-points-about-while-pickling-and-unpickling"&gt;
  &lt;/a&gt;
  Important Points about while Pickling and Unpickling
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It is protocol specific to python, don't try to unpickle a file pickled in python in some other programming language. Thus, cross-language compatibility is not guaranteed.&lt;/li&gt;
&lt;li&gt;Moreover, Unpickling a file that was pickled in a different version of Python may not always work properly, so you have to make sure that you're using the same version and perform an update if necessary.&lt;/li&gt;
&lt;li&gt;The pickle module is not secure. Only unpickle data you trust.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;That doesn't mean, you should not use &lt;code&gt;pickle&lt;/code&gt; module. Just make sure you trust the source of that pickle file.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>7 Best Practices for Securing Your Remote Workforce with Identity Management</title>
      <author>Jack Forbes</author>
      <pubDate>Fri, 20 Aug 2021 12:36:51 +0000</pubDate>
      <link>https://dev.to/jackforbes234/7-best-practices-for-securing-your-remote-workforce-with-identity-management-j3c</link>
      <guid>https://dev.to/jackforbes234/7-best-practices-for-securing-your-remote-workforce-with-identity-management-j3c</guid>
      <description>&lt;p&gt;Leaving your employees defenceless when working remotely can expose your company to potential threats. For remote employees, the internet poses several threats. Hackers, scammers, and fraudsters can readily prey on them. You can keep them safe by incorporating remote work &lt;a href="https://www.loginradius.com/blog/start-with-identity/2019/10/cybersecurity-best-practices-for-enterprises/"&gt;cybersecurity best practices&lt;/a&gt; into your digital workspace, such as identity management.&lt;/p&gt;

&lt;p&gt;Here are some of the best practises for ensuring remote workers' cybersecurity utilising identity management.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;Select the right Software:&lt;/b&gt; There are a number of identity access control tools available today. All of them provide distinct features and functions to protect your company from potential threats. While there is no such thing as “perfect” software, make sure you select the best option for your company. Begin by identifying what your organization's specific security requirements are.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;Develop a zero-trust approach:&lt;/b&gt; A network of security models known as zero trust argue that neither users nor apps should be trusted. To access data and resources from your system, it requires mandatory verification both inside and outside your network. This protects data for remote workers who use a variety of devices and programs outside of your network.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Consider integrating this method into your remote work policies and protocols to ensure that your remote employees are properly guided. Implementing multi-factor authentication for each login is a perfect example. This will provide your users with an additional layer of security and verification.&lt;/p&gt;

&lt;p&gt;3.&lt;b&gt;Perform routine review of accounts:&lt;/b&gt; It stands to reason that you should evaluate all of the accounts you handle in your identity management system on a regular basis. This is where you constantly authenticate and confirm your users' identities while also keeping an eye on the database's security. To help cover all bases during the process, consider integrating user authentication in a Python application. When a user moves to another organisation, you must ensure that their accounts are correctly de-registered from your network. Hackers love orphaned accounts because they may gather credentials and identities to breach and attack your company. As a result, all orphaned accounts must be deleted from your system.&lt;/p&gt;

&lt;p&gt;4.&lt;b&gt;Centralize Data and Identities:&lt;/b&gt; A reliable programme or system to store the data in, as well as an expert or group of experts to maintain the database, are generally required for proper data management. As more firms focus on upgrading their IT infrastructures and security, Management Information Systems (MIS) has become one of the top paying majors. They ensure that your databases are secure and well-maintained thanks to their experience and competence.&lt;/p&gt;

&lt;p&gt;5.&lt;b&gt;Consider single sign-on authentication:&lt;/b&gt; Businesses that expect their remote employees to use multiple applications at the same time must be aware of all the risks. For begin, your remote employees must remember the details of all their accounts, including passwords, email addresses, and other information. Others may find this infuriating, and it may even result in some security difficulties in the future.&lt;/p&gt;

&lt;p&gt;Single sign-on (SSO) authentication allows your employees to use their own identity across several employee applications. Your remote employees can use SSO to enter into any of your web properties, mobile apps, and third-party systems with a single identity, reducing the number of logins they have to make each time they go to work.&lt;/p&gt;

&lt;p&gt;6.&lt;b&gt;Go Passwordless:&lt;/b&gt; Consider making your employees'logins to various business applications passwordless. Instead, use a magic link feature to make it easier and more safe for consumers to sign in to your mobile apps or email accounts. You'll simply send the link to your users' email addresses. They will be immediately signed into their accounts after clicking on it. This approach is similar to receiving a one-time password (OTP), only you won't need to enter any code or pin to access your account. This protects your remote employees' accounts against password-based attacks.&lt;/p&gt;

&lt;p&gt;7.&lt;b&gt;Integrate with other solutions:&lt;/b&gt; Integration is one of the most common &lt;a href="https://www.loginradius.com/blog/fuel/secure-your-remote-workforce-with-identity-management/"&gt;remote access security best practices&lt;/a&gt; among enterprises. You can quickly sync your data across all of your applications by linking your identity management system to your other business solutions. This includes information about your remote workers as well as their login credentials. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Final Thoughts:&lt;/b&gt; As your company evolves to a virtual workplace, you'll need to discover how to keep employees safe as they work from home. Leaving them defenceless makes your company vulnerable to potential threats. Identity management can help you protect your company. You can decrease password difficulties and improve security for your remote teams by using identity management. It makes logging in, authenticating, and allowing access to your company's data and resources much easier.&lt;/p&gt;

</description>
      <category>security</category>
      <category>workstations</category>
      <category>cybersecurity</category>
    </item>
    <item>
      <title>Today's Fun Joke For Developers - Daily Developer Jokes</title>
      <author>Daily Developer Jokes</author>
      <pubDate>Fri, 20 Aug 2021 12:28:38 +0000</pubDate>
      <link>https://dev.to/dailydeveloperjokes/today-s-fun-joke-for-developers-daily-developer-jokes-5ega</link>
      <guid>https://dev.to/dailydeveloperjokes/today-s-fun-joke-for-developers-daily-developer-jokes-5ega</guid>
      <description>&lt;p&gt;Hi there! Here's today's Daily Developer Joke. We hope you enjoy it; it's a good one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ryJ92dsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e1258d992c4e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ryJ92dsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e1258d992c4e.png" alt="Joke Image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;For more jokes, and to submit your own joke to get featured, check out the &lt;a href="https://dailydeveloperjokes.github.io/"&gt;Daily Developer Jokes Website&lt;/a&gt;. We're also open sourced, so feel free to view &lt;a href="https://github.com/dailydeveloperjokes"&gt;our GitHub Profile&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leave-this-post-a-if-you-liked-todays-joke-and-stay-tuned-for-tomorrows-joke-too"&gt;
  &lt;/a&gt;
  Leave this post a ❤️ if you liked today's joke, and stay tuned for tomorrow's joke too!
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This joke comes from &lt;a href="https://github.com/wesbos/dad-jokes"&gt;Dad-Jokes GitHub Repo by Wes Bos&lt;/a&gt; (thank you!), whose owner has given me permission to use this joke with credit.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>jokes</category>
      <category>dailydeveloperjokes</category>
    </item>
    <item>
      <title>How to encrypt your data with Ecto
</title>
      <author>Dung Nguyen</author>
      <pubDate>Fri, 20 Aug 2021 12:10:14 +0000</pubDate>
      <link>https://dev.to/bluzky/how-to-encrypt-your-data-in-ecto-587n</link>
      <guid>https://dev.to/bluzky/how-to-encrypt-your-data-in-ecto-587n</guid>
      <description>&lt;p&gt;If your data is encrypted, even if it's leaked, no one know what is the data. That's great.&lt;/p&gt;

&lt;p&gt;So in this post, I'm going to show you how to encrypt data in Ecto. &lt;code&gt;Ecto&lt;/code&gt; allows developer to define their own type. And we will define a type call &lt;code&gt;EncryptedText&lt;/code&gt; which encrypts data before persiting to database and decrypts data after loading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-define-encryptdecrypt-methods"&gt;
  &lt;/a&gt;
  1. Define encrypt/decrypt methods
&lt;/h2&gt;

&lt;p&gt;This is a simple version of crypto module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Crypto&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@block_size&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;generate_secret&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="ss"&gt;:crypto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strong_rand_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@block_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode64&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plaintext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;decode_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;iv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:crypto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strong_rand_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@block_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;plaintext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plaintext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@block_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;ciphertext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:crypto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crypto_one_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:aes_128_cbc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plaintext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;decode_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;iv&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;@block_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;plaintext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="ss"&gt;:crypto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crypto_one_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:aes_128_cbc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;unpad&lt;/span&gt;

      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plaintext&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
      &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Bad encrypted data"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;pad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;to_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block_size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;byte_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;block_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:binary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;to_add&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to_add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;unpad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;to_remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:binary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;:binary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;byte_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;to_remove&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let go throught the code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;generate_secret&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="ss"&gt;:crypto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strong_rand_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@block_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode64&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function generate a 16 bytes secret key and encode 64 so you can add it to config.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;encrypt/2&lt;/code&gt; function
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plaintext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# check the key size&lt;/span&gt;
    &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;decode_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

      &lt;span class="c1"&gt;# random initial vector&lt;/span&gt;
      &lt;span class="n"&gt;iv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:crypto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strong_rand_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@block_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;# if length of text is not multiple of @block_size&lt;/span&gt;
      &lt;span class="c1"&gt;# we add more data until it meets condition&lt;/span&gt;
      &lt;span class="n"&gt;plaintext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plaintext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@block_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;# encrypt here&lt;/span&gt;
      &lt;span class="n"&gt;ciphertext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:crypto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crypto_one_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:aes_128_cbc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plaintext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the most important line&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:crypto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crypto_one_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:aes_128_cbc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plaintext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;iv&lt;/code&gt; is initial vector. We are encrypt data by block of 16 bytes, so we need intial vector to make sure that the output of blocks with same data are different.&lt;/li&gt;
&lt;li&gt;The last parameter set to &lt;code&gt;true&lt;/code&gt; to encrypt, set to &lt;code&gt;false&lt;/code&gt; to decrypt data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then we encode 64 to return a string. Here we concat &lt;code&gt;iv&lt;/code&gt; and &lt;code&gt;ciphertext&lt;/code&gt; so that we can extract &lt;code&gt;iv&lt;/code&gt; to use for decryption&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;decrypt/2&lt;/code&gt; function
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# check the key&lt;/span&gt;
    &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;decode_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;iv&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;@block_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;plaintext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="ss"&gt;:crypto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crypto_one_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:aes_128_cbc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;unpad&lt;/span&gt;

      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plaintext&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
      &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Bad encrypted data"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We extract &lt;code&gt;iv&lt;/code&gt; and encrypted data from intput&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;iv&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;@block_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use pattern matching to extract first 16 byte and assign to &lt;code&gt;iv&lt;/code&gt; and remaining data to &lt;code&gt;ciphertext&lt;/code&gt;. Then decrypt data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;plaintext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="ss"&gt;:crypto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crypto_one_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:aes_128_cbc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;unpad&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar to encrypt data, here we replace &lt;code&gt;plaintext&lt;/code&gt; by &lt;code&gt;ciphertext&lt;/code&gt; and last parameter is set to &lt;code&gt;false&lt;/code&gt; instead. After data is decrypted, we need to remove padding data to get original data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-build-raw-encryptedtext-endraw-type"&gt;
  &lt;/a&gt;
  2. Build &lt;code&gt;EncryptedText&lt;/code&gt; type
&lt;/h2&gt;

&lt;p&gt;I define a type to store binary data, you can define a &lt;code&gt;EncryptedMap&lt;/code&gt; to store map data. The most importants function are &lt;code&gt;dump&lt;/code&gt; and &lt;code&gt;load&lt;/code&gt; where we encrypt before persiting and decrypt after loading.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;EncryptedText&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;Ecto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Type&lt;/span&gt;

  &lt;span class="c1"&gt;# we store data as string&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;is_binary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:error&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
  &lt;span class="c1"&gt;# encrypt data before persit to database&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;is_binary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;Application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch_env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:myapp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:ecto_secret_key&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;Crypto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:error&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:error&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
  &lt;span class="c1"&gt;# decrypt data after loaded from database&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;is_binary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;secret_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch_env!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:myapp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:ecto_secret_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;Crypto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:error&lt;/span&gt;
      &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:error&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;embed_as&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:dump&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-use-it-in-your-schema"&gt;
  &lt;/a&gt;
  3. Use it in your schema
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You must add secret key to your app config first.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="ss"&gt;:myapp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:ecto_secret_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"your key using Crypto.generate_secret"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Add to schema
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;schema&lt;/span&gt; &lt;span class="s2"&gt;"users"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;EncryptedText&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your data are safe now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-conclusion"&gt;
  &lt;/a&gt;
  4. Conclusion
&lt;/h2&gt;

&lt;p&gt;With Crypto data you can implement encrypted field for any type of data you want.&lt;/p&gt;

&lt;p&gt;There is an issue when you want to change your secret key, you have to load your data row by row, decrypt and then encrypt with new key and update to database.&lt;/p&gt;

&lt;p&gt;I found this article explain very well about crypto if you are interested &lt;a href="https://www.thegreatcodeadventure.com/elixir-encryption-with-erlang-crypto/"&gt;https://www.thegreatcodeadventure.com/elixir-encryption-with-erlang-crypto/&lt;/a&gt;&lt;br&gt;
Although she uses old crypto api so it will through some warning.&lt;/p&gt;

&lt;p&gt;I implemented encrypted type for text and map for my company project here if you want to use it: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/onpointvn/magik/tree/main/lib/ecto_type"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>phoenix</category>
      <category>ecto</category>
      <category>crypto</category>
    </item>
    <item>
      <title>What makes Feature Flags a path to faster and safer development</title>
      <author>Anton Vasin</author>
      <pubDate>Fri, 20 Aug 2021 12:07:22 +0000</pubDate>
      <link>https://dev.to/antonvasin/what-makes-feature-flags-a-path-to-faster-and-safer-development-obd</link>
      <guid>https://dev.to/antonvasin/what-makes-feature-flags-a-path-to-faster-and-safer-development-obd</guid>
      <description>&lt;p&gt;&lt;a href="https://martinfowler.com/articles/feature-toggles.html"&gt;Feature Flags&lt;/a&gt; (or Feature Toggles) is a way of working with code that allows teams to modify system behavior, without changing existing or deploying new code. It allows teams to handle deployments and new releases separately,  and iterate rapidly.&lt;/p&gt;

&lt;p&gt;Feature Flags vary by usage and context. Here we’ll look into three of the most powerful techniques that you can leverage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Trunk-based development&lt;/li&gt;
&lt;li&gt;Uncoupling deployments and releases&lt;/li&gt;
&lt;li&gt;Living on your product (aka &lt;a href="https://en.wikipedia.org/wiki/Eating_your_own_dog_food"&gt;dogfooding&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When getting started with this approach, your product doesn't necessarily have to be complex. Also the solution you choose doesn't have to cover every possible use case, at least not from day one. Teams can use popular SaaS solutions, open-source projects or just start with a simple JSON file in their repo, so don't be intimidated by how much is possible. The most important thing is to change your thinking when it comes to writing and releasing new code.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://trunkbaseddevelopment.com"&gt;Trunk-based development&lt;/a&gt; enables engineers to check unfinished features into the main branch and safely release them into production at any time. When working this way, teams develop code in short-lived branches that enable developers to merge and deploy safely. This technique helps cut the time it takes to merge new code by avoiding the big, complex conflicts usually associated with long-lived feature branches. Checking in code regularly guarantees that teams can move quickly, without obstacles. To do this, teams use feature flags to disable unfinished code until it's time for release. When the feature is ready, simply enable the flag and release the new feature into the world. This allows teams to separate releases from the act of merging code. It also means moving from long development cycles to a series of short ones. Instead of big changes being merged at once, there are now lots of small iterative changes that are merged and deployed often, preferably many times a day. This helps teams move faster and safer.&lt;/p&gt;

&lt;p&gt;Being able to tie a particular feature to a particular user, or a group of users, allows you to verify your ideas cheaply and safely. Аlmost every new feature in &lt;a href="https://readymag.com?utm_source=dev.to&amp;amp;utm_medium=pr&amp;amp;utm_campaign=feature_flags"&gt;Readymag&lt;/a&gt; is released for internal users first — so our design team can test them thoroughly. It is especially powerful if you use your own product in your daily work, because your beta testers are right there working alongside you. Get feedback fast and test your ideas before you release a feature for the general public.&lt;/p&gt;

&lt;p&gt;Feature Flags allow easy experimentation. Often there is some idea, maybe a concept for a new feature or a smart way of improving existing code, that needs to be tested. Using Feature Flags allows developers to explore these ideas in a real production environment without fear of breaking something. Try things out and see what's working, and what's not, then decide how to act on it later. Combine this way of working with monitoring and product analytics, and you'll get a really powerful combo!&lt;/p&gt;

&lt;p&gt;So let's illustrate all of this with a real world example. Recently we launched new subscription plans for Readymag. To implement them, we needed to adjust some parts of our application that control available features and what limits are set for each plan. This is where Feature Flags help immensely. First, we added a new Feature Flag to our system. From there we wrote new code and adjusted the existing behaviour behind the flag. We did this over the course of many iterations, continuously deploying new changes into production. For example, the front end looked like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Here, we conditionally render a new part of the UI. Existing code works as usual until the flag is enabled.&lt;br&gt;
Since we have two different components in this example, the team working on this can safely work on a new interface without disrupting the existing flow.&lt;br&gt;
Elsewhere in our system we would have code like this, implementing another part of this update:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Of course it is always a good idea to test your code, especially when using something as dynamic as Feature Flags. So we did just that:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;When we were ready to launch the update, we just enabled this flag and the feature was rolled out. Not only did this approach allow us to merge and deploy code continuously, it also made it possible to enable new code branches in several services at once without coordinated deployments. &lt;/p&gt;

&lt;p&gt;Here are some best practices around Feature Flags that we use in Readymag:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Feature Flags should have a short life cycle—they are used only before a feature is released, not to control long-term product behaviour.&lt;/li&gt;
&lt;li&gt;Always ask yourself if it would be easy to delete a particular flag later.&lt;/li&gt;
&lt;li&gt;Each Feature Flag is responsible for a single feature. It should have a name that is commonly understood.&lt;/li&gt;
&lt;li&gt;All flags should have similar semantics: all flags enable something, they don’t disable features.&lt;/li&gt;
&lt;li&gt;Sometimes it is better to duplicate code to ensure clean removal of the flag when the feature is released.&lt;/li&gt;
&lt;li&gt;Flags can and should be used for experimentation and to verify hypotheses.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, the next time you're battling with some exhausting merge conflict, or you find your team holding on to some code because it’s too early for it to be released, or you wish that your team could try out some idea but it’s too dangerous,  try using Feature Flags. Solve your problem at hand, and hopefully change your whole product development cycle for the better.&lt;/p&gt;

</description>
      <category>featureflags</category>
      <category>readymag</category>
      <category>experimentation</category>
      <category>trunkbaseddevelopment</category>
    </item>
    <item>
      <title>Best Path to Twitter API using JavaScript | 3 Clear Steps</title>
      <author>Sahil</author>
      <pubDate>Fri, 20 Aug 2021 11:50:16 +0000</pubDate>
      <link>https://dev.to/sahilfruitwala/best-path-to-twitter-api-using-javascript-3-clear-steps-dem</link>
      <guid>https://dev.to/sahilfruitwala/best-path-to-twitter-api-using-javascript-3-clear-steps-dem</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#Introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#Fetch"&gt;Extract Data using Fetch&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#ThenCatch"&gt;Using then() and catch()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#AsyncAwait"&gt;Using async/await&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  &lt;a id="Introduction"&gt;&lt;/a&gt;Introduction
&lt;/h2&gt;

&lt;p&gt;Twitter is a popular social media platform where users can share their views, ideas and read posts from other users on a variety of topics. Researchers, developers, bloggers and people from many fields use Twitter for data gathering. You can find a well-written &lt;a href="https://blog.learncodeonline.in/introduction-to-twitter-api"&gt;&lt;strong&gt;blog&lt;/strong&gt;&lt;/a&gt; on how to create a developer's account for the Twitter API.  In this blog, all the parameters and filters are mentioned that one can use with the Standard Search API. It is highly suggested to go through that blog and get a basic idea about &lt;a href="https://blog.learncodeonline.in/introduction-to-twitter-api"&gt;Twitter Search API&lt;/a&gt;. You can find the official documentation of API &lt;a href="https://developer.twitter.com/en/docs/twitter-api/v1/tweets/search/api-reference/get-search-tweets"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will look at how to use the Twitter API in conjunction with JavaScript in this blog post. Instead of using any package wrapped around Twitter API, we will use the core &lt;strong&gt;Fetch&lt;/strong&gt; library to get desire data from Twitter. We are not using any module that is wrapped around Twitter API, such as &lt;strong&gt;twitter-v2&lt;/strong&gt; and &lt;strong&gt;twitter-lite&lt;/strong&gt;. The purpose is to make you understand how to use core Twitter API using the Fetch library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  &lt;a id="Prerequisites"&gt;&lt;/a&gt;Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before we start using Fetch(), the following things need to be installed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Node&lt;br&gt;
To get and install the &lt;strong&gt;node&lt;/strong&gt; on your system, go to &lt;a href="https://nodejs.dev/"&gt;nodejs.dev&lt;/a&gt; and download the LTS(Long-term Support) version. After installation, open the terminal on your system and try the following commands and, you will see version numbers. Here, npm is a package manager for node applications. We need npm to install third-party libraries for our application.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Text Editor / IDE (Integrated development environment)&lt;br&gt;
You can use any text editor or IDE. However, I recommend using VSCode that is a free and open-source code editor from Microsoft.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Twitter API Keys&lt;br&gt;
To set up the developer’s account and get API keys, follow my previous &lt;a href="https://blog.learncodeonline.in/introduction-to-twitter-api"&gt;blog&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node &lt;span class="nt"&gt;-v&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#extract-data-using-fetch"&gt;
  &lt;/a&gt;
  &lt;a id="Fetch"&gt;&lt;/a&gt;Extract Data using Fetch
&lt;/h2&gt;

&lt;p&gt;In this section, we will see how to extract data from Twitter using the Fetch module. Fetch is a promise-based function used for sending and receiving data from the server. For this blog, we will focus only on getting data using Fetch.&lt;/p&gt;

&lt;p&gt;JavaScript that we use in the browsers (Vanilla JavaScript) has a Fetch module in it. Here, we are using &lt;strong&gt;node&lt;/strong&gt; that is a &lt;strong&gt;JavaScript Runtime Environment&lt;/strong&gt; through which we can run JavaScript on our local machine. This runtime environment does not have Fetch in its core modules. Therefore, we need to install it externally for our projects.&lt;/p&gt;

&lt;p&gt;Before installing &lt;strong&gt;node-fetch&lt;/strong&gt;, go to any directory/folder you desire to work in and create a folder with the name of your choice. Now, to install Fetch, open the terminal in the folder you created on your system and write as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;node-fetch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;There are two ways to handle the fetch() method:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Using then() and catch()&lt;/li&gt;
&lt;li&gt; Using async/await&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#using-then-and-catch"&gt;
  &lt;/a&gt;
  &lt;a id="ThenCatch"&gt;&lt;/a&gt;Using then() and catch()
&lt;/h2&gt;

&lt;p&gt;The fetch method returns a response object that contains a range of useful promise-based methods. Those methods are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;response.json()&lt;/strong&gt; returns a promise resolved to a JSON object.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;response.text()&lt;/strong&gt; returns a promise resolved to raw text.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;response.formData()&lt;/strong&gt; returns a promise resolved to FormData.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;response.blob()&lt;/strong&gt; returns a promise resolved to a Blob (a file-like object of raw data).&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;response.arrayBuffer()()&lt;/strong&gt; returns a promise resolved to an ArryBuffer (raw generic binary data).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the Twitter API returns JSON data, we will only use the &lt;strong&gt;response.json()&lt;/strong&gt; method. The following code is an example to fetch all tweets that contain the python keyword and does not contain any retweets:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bearer BEARER_TOKEN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Replace BEARER_TOKEN with your token&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;python -filter:retweets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`https://api.twitter.com/1.1/search/tweets.json?q=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Replace BEARER_TOKEN word with your Bearer Token that you got from the developers portal.&lt;/p&gt;

&lt;p&gt;We can assign any search string and filter to the query. As shown in the code block, we used &lt;strong&gt;response.json()&lt;/strong&gt; to get data in JSON format. Instead of a response, we can use any name that we pass as an argument in the first &lt;strong&gt;then()&lt;/strong&gt; block. As mentioned earlier that response.json() again returns a promise. So, to resolve this promise, we used one more then() block and got the final response as &lt;strong&gt;data&lt;/strong&gt;. In the process of resolving promises, if we get any error, then control will be passed to the &lt;strong&gt;catch()&lt;/strong&gt; block. This block is used for handling any kind of error.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-asyncawait"&gt;
  &lt;/a&gt;
  &lt;a id="AsyncAwait"&gt;&lt;/a&gt;Using async/await
&lt;/h2&gt;

&lt;p&gt;To use async/await, we need to create an async function and put our logic in that function. The following code shows how we can use the async/await with fetch() method.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bearer BEARER_TOKEN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// Replace BEARER_TOKEN with your token&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;python -filter:retweets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`https://api.twitter.com/1.1/search/tweets.json?q=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;options&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ERROR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As shown in the code, await will resolve promises and return the response. Here, we have used two awaits as fetch() method and response.json() both return promises.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I have used the arrow function which is the syntax of JavaScript version ES6.&lt;/p&gt;

&lt;p&gt;For the common data retrieval tasks, the above code is sufficient. You can use any query parameters and filters as per need and then assign them to the &lt;strong&gt;query.&lt;/strong&gt; If you have used any different methods or filters, please share your expertise/methodology in the comments below.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;a id="Conclusion"&gt;&lt;/a&gt;Conclusion
&lt;/h2&gt;

&lt;p&gt;We can use any of the methods suitable to them. There can be other ways to get data. I have only mentioned one of them here. Many people prefer to use &lt;a href="https://www.npmjs.com/package/axios"&gt;Axios&lt;/a&gt; that can be used in the same way as we used the fetch() method to get data using Twitter API.  If you want to know about API, you can understand it easily through the "&lt;strong&gt;What is API?&lt;/strong&gt;" blog. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/sahilfruitwala" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d2sSMDwn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HeZTdk-2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/419742/5e242d87-9327-4bc3-a899-ff30d06cefda.jpg" alt="sahilfruitwala"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sahilfruitwala/what-is-an-api-5clj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is an API?&lt;/h2&gt;
      &lt;h3&gt;Sahil ・ Aug 19 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Variables and Data Types in Dart</title>
      <author>Baransel</author>
      <pubDate>Fri, 20 Aug 2021 11:38:42 +0000</pubDate>
      <link>https://dev.to/baransel/variables-and-data-types-in-dart-n4e</link>
      <guid>https://dev.to/baransel/variables-and-data-types-in-dart-n4e</guid>
      <description>&lt;p&gt;In addition to general data types such as String, integer, we use different; We will talk about 2 important data types.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;var&lt;/li&gt;
&lt;li&gt;dynamic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; data type does not have a specific value. We can assign any variable we want, it doesn't matter. You can give a string or an integer value if you wish, to the variable defined by &lt;code&gt;var&lt;/code&gt;. You can see examples below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Baransel Arslan'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Welcome! &lt;/span&gt;&lt;span class="si"&gt;$name&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;message2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Welcome! &lt;/span&gt;&lt;span class="si"&gt;${name.toUpperCase()}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;dynamic&lt;/code&gt; data type has a mutable structure. We can define the variable we created with &lt;code&gt;dynamic&lt;/code&gt; in the first string data type and then assign an &lt;code&gt;integer&lt;/code&gt; value to the same variable. Of course, I use this &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;integer&lt;/code&gt; example all the time because they are the most common variable types. Variables such as &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt; can also be used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Baransel Arslan'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Follow my blog for more &lt;a href="https://baransel.dev/"&gt;baransel.dev&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
