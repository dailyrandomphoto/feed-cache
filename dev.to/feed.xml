<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 5 Anti-virus for install on your windows computer and it's system requirements</title>
      <author>kavinduneth</author>
      <pubDate>Mon, 11 Oct 2021 09:08:30 +0000</pubDate>
      <link>https://dev.to/kavinduneth/top-5-anti-virus-for-install-on-your-windows-computer-and-it-s-system-requirements-ame</link>
      <guid>https://dev.to/kavinduneth/top-5-anti-virus-for-install-on-your-windows-computer-and-it-s-system-requirements-ame</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1avg-antivirus"&gt;
  &lt;/a&gt;
  1.AVG anti-virus
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L9X7puhT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vpnoverview.com/wp-content/uploads/avg-review-featured.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L9X7puhT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vpnoverview.com/wp-content/uploads/avg-review-featured.png" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-avg-antivirus"&gt;
  &lt;/a&gt;
  What is AVG Anti-virus?
&lt;/h2&gt;

&lt;p&gt;Block Unsafe Links, Downloads, &amp;amp; Email Attachments with AVG Free Antivirus. Free Forever - Fast &amp;amp; Easy Antivirus Software. Download AVG Antivirus Now. Stops viruses. Unsafe web link warnings. Scans quickly &amp;amp; quietly. Protects forever. Blocks malware &amp;amp; spyware.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avg-antivirus-system-requirements"&gt;
  &lt;/a&gt;
  AVG anti-virus System requirements
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;h5&gt;
  &lt;a href="#os-windows-10-windows-81-windows-8-windows-7"&gt;
  &lt;/a&gt;
  OS:- Windows 10, Windows 8.1, Windows 8, Windows 7.
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#cpu-32bit-and-64bit"&gt;
  &lt;/a&gt;
  CPU:- 32-bit and 64-bit.
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#ram-1-gb"&gt;
  &lt;/a&gt;
  RAM:- 1 GB.
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#disk-space-2-gb-available-space"&gt;
  &lt;/a&gt;
  Disk space:- 2 GB available space.
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#additional-requirements-internet-connection-to-download-activate-and-maintain-program-updates-and-antivirus-database"&gt;
  &lt;/a&gt;
  Additional Requirements:- Internet connection to download, activate, and maintain program updates and antivirus database.
&lt;/h5&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="http://www.avg.com"&gt;www.avg.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2avast-antivirus"&gt;
  &lt;/a&gt;
  2.Avast anti-virus
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fJYnne9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pcmag.com/imagery/reviews/01cXIjy7dmtF4OfM1WUzCaC-16..1594234647.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fJYnne9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pcmag.com/imagery/reviews/01cXIjy7dmtF4OfM1WUzCaC-16..1594234647.png" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-avast-anti-virus"&gt;
  &lt;/a&gt;
  What is Avast anti virus?
&lt;/h2&gt;

&lt;p&gt;Download Avast Free Antivirus and protect your PC against viruses and malware. Our best antivirus to keep your PC secure and private. Download for free. Easy Installation. Stop Ransomware. Wi-Fi Inspector. Wi-Fi Security Alerts. Free Download.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avast-antivirus-system-requirements"&gt;
  &lt;/a&gt;
  Avast anti-virus System requirements
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;h5&gt;
  &lt;a href="#os-windows-10-windows-81-windows-8-windows-7"&gt;
  &lt;/a&gt;
  OS:- Windows 10, Windows 8.1, Windows 8, Windows 7.
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#ram-1-gb"&gt;
  &lt;/a&gt;
  RAM:- 1 GB.
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#disk-space-2-gb-available-space"&gt;
  &lt;/a&gt;
  Disk space:- 2 GB available space.
&lt;/h5&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="http://www.avast.com"&gt;www.avast.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3kaspersky-antivirus"&gt;
  &lt;/a&gt;
  3.Kaspersky Anti-virus
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AC-rDCrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.kasperskydaily.com/wp-content/uploads/sites/92/2019/07/18042131/kaspersky-rebranding-in-details-featured.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AC-rDCrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.kasperskydaily.com/wp-content/uploads/sites/92/2019/07/18042131/kaspersky-rebranding-in-details-featured.jpg" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-kaspersky-antivirus"&gt;
  &lt;/a&gt;
  What is Kaspersky Anti-virus?
&lt;/h2&gt;

&lt;p&gt;Kaspersky Anti-Virus is a proprietary antivirus program developed by Kaspersky Lab. It is designed to protect users from malware and is primarily designed for computers running Microsoft Windows and macOS, although a version for Linux is available for business consumers&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#kaspersky-system-requirements"&gt;
  &lt;/a&gt;
  Kaspersky system requirements
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h5&gt;
  &lt;a href="#os-windows-10-windows-81-windows-8-windows-7"&gt;
  &lt;/a&gt;
  OS:- Windows 10, Windows 8.1, Windows 8, Windows 7.
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#cpu1-ghz-processor-or-faster"&gt;
  &lt;/a&gt;
  CPU:-1 GHz processor or faster.
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#ram-1-gb-of-free-ram-for-32bit-operating-systems-and-2-gb-of-free-ram-for-64bit-operating-systems"&gt;
  &lt;/a&gt;
  RAM:- 1 GB of free RAM for 32-bit operating systems and 2 GB of free RAM for 64-bit operating systems.
&lt;/h5&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="http://www.kaspersky.com/antivirus"&gt;www.kaspersky.com/antivirus&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4mcafee-antivirus"&gt;
  &lt;/a&gt;
  4.McAfee Anti-virus
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4bJJXM2w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pcmag.com/imagery/reviews/03ukCMGudzLvpPEiBrWPQHB-42.1632850745.fit_scale.size_760x427.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4bJJXM2w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pcmag.com/imagery/reviews/03ukCMGudzLvpPEiBrWPQHB-42.1632850745.fit_scale.size_760x427.jpg" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-macafee-antivirus"&gt;
  &lt;/a&gt;
  What is MacAfee Anti-virus?
&lt;/h2&gt;

&lt;p&gt;McAfee is a reliable antivirus that you can use to scan your PC for viruses and protect it in real-time. McAfee performed consistently well in my tests, detecting all kinds of malware, such as ransomware, spyware, cryptojackers, adware, etc. Also, this antivirus is backed by McAfee Virus Pledge&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mcafee-system-requirements"&gt;
  &lt;/a&gt;
  McAfee system requirements
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h5&gt;
  &lt;a href="#os-windows-10-windows-81-windows-8-windows-7"&gt;
  &lt;/a&gt;
  OS:- Windows 10, Windows 8.1, Windows 8, Windows 7.
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#cpu1-ghz-processor-or-higher"&gt;
  &lt;/a&gt;
  CPU:-1 GHZ processor or higher
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#ram1-gb-ram-or-higher-for-vista-windows-7-windows-8-4-gb-ram-or-higher-for-windows-10-minimum-500-mb"&gt;
  &lt;/a&gt;
  RAM:-1 GB RAM or higher for Vista , Windows 7 , Windows 8. 4 GB RAM or higher for Windows 10. Minimum 500 MB
&lt;/h5&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="http://www.mcafee.com"&gt;www.mcafee.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5panda-antivirus"&gt;
  &lt;/a&gt;
  5.Panda Anti-virus
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BmAPdDGG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://mersennewiki.org/wp-content/uploads/maxresdefault-2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BmAPdDGG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://mersennewiki.org/wp-content/uploads/maxresdefault-2.jpg" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-panda-antivirus"&gt;
  &lt;/a&gt;
  What is Panda Anti-virus?
&lt;/h2&gt;

&lt;p&gt;Panda Cloud Antivirus is an antivirus software developed by Panda Security, a free and a paid version are available. It is cloud-based in the sense that files are scanned on a remote server without using processing power of the user's machine. The cloud technology is based on Panda's Collective Intelligence&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#panda-system-requirements"&gt;
  &lt;/a&gt;
  Panda system requirements
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h5&gt;
  &lt;a href="#os-windows-81-windows-8-windows-7-32-and-64bit-windows-vista-32-and-64bit-windows-xp-32-and-64bit-and-windows-2000-professional-sp4"&gt;
  &lt;/a&gt;
  OS:-  Windows 8.1 , Windows 8 , Windows 7 (32 and 64-bit) , Windows Vista (32 and 64-bit) , Windows XP (32 and 64-bit) and Windows 2000 Professional SP4
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#cpu-pentium-300-mhz-or-higher"&gt;
  &lt;/a&gt;
  CPU:- Pentium 300 MHz or higher
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#ram1-gb-ram-or-higher"&gt;
  &lt;/a&gt;
  RAM:-1 GB RAM or higher
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#disk-space200-mb-free-space"&gt;
  &lt;/a&gt;
  Disk Space:-200 MB free space.
&lt;/h5&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="http://www.pandasecurity.com"&gt;www.pandasecurity.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-read-this-article-follow-me-for-get-more-informations-like-this"&gt;
  &lt;/a&gt;
  Thanks for read this article. follow me for get more information's like this🙂😀😀😀.
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#please-write-a-comment-which-antivirus-you-like"&gt;
  &lt;/a&gt;
  please write a comment which Anti-virus you like.
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#if-you-have-any-problem-of-antiviruses-please-write-a-comment"&gt;
  &lt;/a&gt;
  if you have any problem of Anti-viruses please write a comment.
&lt;/h2&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>15 Must-Have Browser Extensions for Web Developers</title>
      <author>Code</author>
      <pubDate>Mon, 11 Oct 2021 08:57:50 +0000</pubDate>
      <link>https://dev.to/coderzs/15-must-have-browser-extensions-for-web-developers-4f28</link>
      <guid>https://dev.to/coderzs/15-must-have-browser-extensions-for-web-developers-4f28</guid>
      <description>&lt;h2&gt;Browsers are increasingly incorporating more &lt;span&gt;&lt;a href="#"&gt;extensions, plugins and add-ons&lt;/a&gt;&lt;/span&gt;, which are often developed by their users, making the browser more powerful, and helping us increase our productivity. Here at Awwwards, our mission is to share with you the best resources and tools on the web, so we're writing a series of blog articles on &lt;span&gt;the best extensions and plugins for major browsers&lt;/span&gt;. To kick-off, we're focusing on extensions that are offered in the Chrome Web Store, available for free and easy to install.&lt;/h2&gt;
&lt;p&gt;Among the tools, we'll highlight those that are&lt;span&gt; most useful for web designers and developers&lt;/span&gt;. We hope you find them useful and get you better results. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/chrome-extensions-for-web-developers/&amp;amp;ved=2ahUKEwjNobWsr-fyAhX_yzgGHYoACLUQFnoECAMQBQ&amp;amp;usg=AOvVaw3LrSRSp_yMsQU7StlCW8qG"&gt;15 Must-Have Browser Extensions for Web Developers&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Blog site API with Authentication in Node, Express and MongoDB</title>
      <author>Collins Mbathi</author>
      <pubDate>Mon, 11 Oct 2021 08:56:11 +0000</pubDate>
      <link>https://dev.to/collins87mbathi/blog-site-api-with-authentication-in-node-express-and-mongodb-59h4</link>
      <guid>https://dev.to/collins87mbathi/blog-site-api-with-authentication-in-node-express-and-mongodb-59h4</guid>
      <description>&lt;p&gt;we are going to build a Blog site Api which has User Authentication using express, node and MongoDb, the Api  has a simple functionality a since we are using express the framework of Node.js, all the data comes from a MongoDB database, the Api endpoints are coming from Node.js&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h4&gt;

&lt;p&gt;Let’s kick off by starting with the Node.js code. Create a folder and name it Blog site api.&lt;/p&gt;

&lt;p&gt;Next, create a package.json file by entering the &lt;code&gt;npm init-y&lt;/code&gt;command in the terminal.&lt;/p&gt;

&lt;p&gt;After that, You need to install some packages before starting. &lt;br&gt;
This packages we are going to use them through out the project &lt;br&gt;
Open the terminal and install&lt;br&gt;
Express,Mongoose,dotenv,bcryptjs in the api folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i express mongoose dotenv bcryptjs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;when the packages are installing create a file and name it &lt;strong&gt;.env&lt;/strong&gt;  after this open the mongoDb and copy the link to link to our project. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IXuefnHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ih0n1wihl9xjvkark5n.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IXuefnHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ih0n1wihl9xjvkark5n.PNG" alt="env"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;the url of the mongodb we are going to connect it to the main folder using the dotenv package. the package helps us to separate secrets from the source code .this is useful when you are going to upload your project in github.where you may not want to share your database login credentials with other people.Instead you share the source code.as you can see i have hide my password in the project.&lt;/p&gt;

&lt;p&gt;Also i have installed &lt;code&gt;bcryptjs&lt;/code&gt; as seen above. this package allows us to build a password security platform that scales with computation power and always hashes every password with a salt.&lt;/p&gt;

&lt;p&gt;lets now create our main file and name it &lt;code&gt;index.js&lt;/code&gt; . this is where we will accemble all routes and middleware.Before moving on further lets import nodemon in the api folder ,Whenever&lt;br&gt;
you make any changes to the code in the index.js file, the Node server restarts&lt;br&gt;
instantaneously.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#initial-route-setup"&gt;
  &lt;/a&gt;
  Initial Route Setup
&lt;/h4&gt;

&lt;p&gt;Let’s create the initial route, which generally checks whether everything is set up&lt;br&gt;
correctly. The Express package in Node.js allows you to create routes, which is how most&lt;br&gt;
of the Internet works. Most back-end languages like Node.js, Java offer capabilities to&lt;br&gt;
create these routes, which interact with the databases. The initial route doesn’t interact&lt;br&gt;
with the database and simply returns a text when you go to it, using a GET request.&lt;/p&gt;

&lt;p&gt;Create a index.js file in the api folder. Here, you import the Express&lt;br&gt;
and the Mongoose packages first. Next, use Express to create a port variable to run on&lt;br&gt;
the port you will be given or if their are no port then give it port 5000.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const mongoose = require('express');
//App Config
const app = express()
const port = process.env.PORT || 5000
//Middleware
//DB Config
//API Endpoints

//Listener
app.listen(port, () =&amp;gt; console.log(`Listening on localhost: ${port}`))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#database-user-and-network-access"&gt;
  &lt;/a&gt;
  Database User and Network Access
&lt;/h4&gt;

&lt;p&gt;In MongoDB, you need to create a database user and provide network access.and connect it to the initial routes  using dotenv since we have stored our link in the .env file&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-bEPkk9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at3bxxcddmwdlck2vf2s.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-bEPkk9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at3bxxcddmwdlck2vf2s.PNG" alt="dotenv"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#database-schema-and-routes"&gt;
  &lt;/a&gt;
  Database Schema and Routes
&lt;/h4&gt;

&lt;p&gt;The database we are using MongoDB stores data in a JSON format instead of the regular table structure found in a&lt;br&gt;
traditional database like Oracle. You create the schema file required by MongoDB. It tells&lt;br&gt;
you how fields are stored in MongoDB.&lt;/p&gt;

&lt;p&gt;First create a folder and name it models .Inside the folder create and file and name it &lt;code&gt;User.js&lt;/code&gt; this is where we are going to write our Authentication schema&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#auth-schema"&gt;
  &lt;/a&gt;
  Auth Schema
&lt;/h5&gt;

&lt;p&gt;We are going to start by creating the authentication Schema for users where when one registers into the site. The user details are stored in the data base. So that when the user comes later they will jus login since the server will recognize them through their details that were saved.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
     username:{
         type:String,
         required:true,
         unique:true,
         min:3,
         max:20
     },
     email:{
        type:String,
         required:true,
         unique:true

     },
     password:{
        type:String,
        required:true,
        min:3,
        max:10
     },

},

{timestamps: true}

);

module.exports = mongoose.model("User", UserSchema);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;also as seen in the code above in the last line we have exported our code so as to import it in the routes.&lt;/p&gt;

&lt;p&gt;as you can see the schema contains details such as username,email and password they are going to be stored in the database..so when the user tries to login, The server will check if the user exist in the database and  allows the user, if user details are in the database.&lt;/p&gt;

&lt;p&gt;lets know create the Post Schema where we are going to store what we want to be in our post &lt;/p&gt;

&lt;p&gt;In the models folder create a file and name it &lt;code&gt;Post.js&lt;/code&gt; this is where we are going to write our Post Schema.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require('mongoose');

const PostSchema = new mongoose.Schema({
 desc : {
     type:String,
     required:true,

 },
 title : {
     type:String,
     required:true,

 }


},
{timestamps: true}
);

module.exports = mongoose.model('Post', PostSchema);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our post schema contains title and  description which are going to be stored in the database &lt;/p&gt;

&lt;p&gt;You now use the schema to create the endpoint that adds data to the database. The&lt;br&gt;
MVC pattern is followed here; it is the traditional flow of a web application.&lt;/p&gt;

&lt;p&gt;Next, use a POST request that takes any data from the user and sends it to the&lt;br&gt;
database. You can use any endpoint. For example, if you write an article on Dev.to&lt;br&gt;
and hit the POST button, your article is saved in the Dev.to database once the POST&lt;br&gt;
request is made.&lt;br&gt;
The GET endpoints fetch all the data from the database. Again, you can give any&lt;br&gt;
endpoint. For example, when you browse through the posts in Dev.to, a GET request is&lt;br&gt;
sent to the endpoint, which in turn fetches all posts from the Dev.to database.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#routes"&gt;
  &lt;/a&gt;
  routes
&lt;/h5&gt;

&lt;p&gt;create a folder and name it routes. First we are going to start with the Authentication route. In the routes folder create a file and name it &lt;code&gt;Auth.js&lt;/code&gt; this are the codes of the authentication below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const router = require('express').Router();

const User = require('../models/User');

const bcrypt = require('bcryptjs')


//register end point
router.post('/register', async (req,res)=&amp;gt; {


   // const confirm = await User.find({Username : req.body.username ,email : req.body.email})
    //confirm &amp;amp;&amp;amp; res.status(400).json('this user or email exist');
    try {
    const salt = await bcrypt.genSalt(10);
    const hashedPass = await bcrypt.hash(req.body.password, salt);

const savedPost = await new User({
        username: req.body.username,
        email: req.body.email,
        password : hashedPass       

})

     const resultPost = await savedPost.save()

     res.status(200).json(resultPost);
  } catch (error) {
     res.status(500).json(error); 
  }

})


//login endpoint
router.post('/login', async (req,res)=&amp;gt;{

    try {
        const user = await User.findOne({username : req.body.username});
        !user &amp;amp;&amp;amp; res.status(400).json('wrong user');

        const validate = await bcrypt.compare(req.body.password,user.password);
        !validate &amp;amp;&amp;amp; res.status(400).json('wrong password');

        const {password, ...others} = user._doc;

        res.status(200).json(others);


    } catch (error) {
       res.status(500).json(error); 
    }




})







module.exports = router;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the code above we have imported the schema and we are going to use it to insert the details and save it.&lt;/p&gt;

&lt;p&gt;create a POST request to the /register endpoint. The load is&lt;br&gt;
in req.body.username,password,email to MongoDB. Then you use &lt;code&gt;New&lt;/code&gt; method to send the User details. If it’s a success, you&lt;br&gt;
receive status 200; otherwise, you receive status 500. &lt;/p&gt;

&lt;p&gt;Next, create the post endpoint to /login to get the data from the database.&lt;br&gt;
You are using findOne() here and receive a status 200 on success (otherwise, status 500).&lt;br&gt;
Also in the code we have used the bcryptjs to protect our passwords as indicated above .&lt;/p&gt;

&lt;p&gt;Lets go to the Post routes ,In the routes folder create a file and name it &lt;code&gt;Post.js&lt;/code&gt; the codes of the Post file are indicated below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const router = require('express').Router();
const Post = require('../models/Post');

//create post 
router.post('/', async (req,res)=&amp;gt; {
try {
    const savePost = await new Post(req.body);
    const savedPost = await savePost.save()
    res.status(200).json(savedPost);

} catch (error) {
    res.status(500).json(error);
}

})
//update post
router.put('/:id', async (req,res)=&amp;gt; {
 try {
    const post = await Post.findById(req.params.id);
    if(post.userId === req.body.userId) {
      await Post.updateOne({$set:req.body});
      res.status(200).json('it has been updated');

    } else {
        res.status(403).json('you can only update your post');
    }
 } catch (error) {
     res.status(500).json(error)
 }

})


//delete post 
router.delete('/:id', async (req, res)=&amp;gt; {
  try {
   const post =  await Post.findById(req.params.id);
   if (post.userId === req.body.userId) {
      await Post.deleteOne()
      res.status(200).json('the post is deleted')
   } else {
       res.status(403).json("you can only delete your post")
   }
  } catch (error) {
    res.status(500).json(error)  
  }

})

//get All posts 
router.get('/', async (req,res) =&amp;gt; {
  try {
   const posts = await Post.find();
  res.status(200).json(posts);

  } catch (error) {
   res.status(500).json(error); 
  }


})

//get one post 
router.get('/:id',async(req,res)=&amp;gt; {

  try {
    const post = await Post.findById(req.params.id);
    res.status(200).json(post);
  } catch (error) {
    res.status(500).json(error);
  }


})



module.exports = router;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our code above we have created our post, saved it ,able to edit it ,able to delete it and able to get all the post or one post&lt;/p&gt;

&lt;p&gt;first we use the &lt;code&gt;post&lt;/code&gt; method to create the post and save it as indicated. we used the &lt;code&gt;put&lt;/code&gt; method to be able to edit the post where we find the post using its &lt;code&gt;id&lt;/code&gt; by using &lt;code&gt;findById&lt;/code&gt;method provide by the mongoose package after finding it we use &lt;code&gt;updateOne&lt;/code&gt; method to update the post. &lt;br&gt;
in the third method we use the &lt;code&gt;delete&lt;/code&gt;. where we find the post we want to delete using the findById method and use the deleteOne() to delete the post &lt;br&gt;
..&lt;br&gt;
also the &lt;code&gt;get&lt;/code&gt; method is done the similar way use the first get to find only one post and the second to get all the post &lt;br&gt;
in the last line of our code we have exported our code using router. this helps us to be able to track our handle request easily and send it to the main file index.js let me show you in the screenshot below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NpGVzr3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdj7np1huo8r7e8x9wry.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NpGVzr3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdj7np1huo8r7e8x9wry.PNG" alt="index"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;as you can see in the above screenshot we can now access out routes as middleware using &lt;code&gt;use()&lt;/code&gt; function  we import our codes the router function helps us to import easily.&lt;br&gt;
example &lt;code&gt;import authroute = require('./routes/Auth');&lt;/code&gt;. we have imported our route&lt;br&gt;
 as shown we create the end point &lt;code&gt;/api/blog&lt;/code&gt; and the router in the end.&lt;br&gt;
Before i forget we add the express.json() middleware since our data are in json  so is a method inbuilt in express to recognize the incoming Request Object as a JSON Object. &lt;/p&gt;

&lt;p&gt;Thanks for reading the article hope you learn alot from it in the next article we are going to learn how to test it in Postman Software.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React JS, Instagram NFT app prototype</title>
      <author>Benjamin.C</author>
      <pubDate>Mon, 11 Oct 2021 08:52:25 +0000</pubDate>
      <link>https://dev.to/benjc/react-js-instagram-nft-app-prototype-1c3o</link>
      <guid>https://dev.to/benjc/react-js-instagram-nft-app-prototype-1c3o</guid>
      <description>&lt;p&gt;NFT instagram app prototype based on React JS. Images may load slowly since they are quite big. Random images that i could find online, are used. Did not check for copyrights :).&lt;/p&gt;

&lt;p&gt;Link to app,&lt;br&gt;
&lt;a href="https://instagram-nft-app-c1yfmg5x1-benjamin-c.vercel.app/"&gt;https://instagram-nft-app-c1yfmg5x1-benjamin-c.vercel.app/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>ux</category>
      <category>javascript</category>
    </item>
    <item>
      <title>[Part 2] A proactive approach to handling application errors</title>
      <author>Mohammed Ali Chherawalla (MAC)</author>
      <pubDate>Mon, 11 Oct 2021 08:30:43 +0000</pubDate>
      <link>https://dev.to/alichherawalla/part-2-a-proactive-approach-to-handling-application-errors-34bo</link>
      <guid>https://dev.to/alichherawalla/part-2-a-proactive-approach-to-handling-application-errors-34bo</guid>
      <description>&lt;p&gt;&lt;b&gt;NOTE: You will need to create a sentry account for this tutorial.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;This is the second part in a 3 part series on how to proactively handle errors in your applications across the stack.&lt;/p&gt;

&lt;p&gt;Issues on the front-end are more easily noticeable. In a lot of applications this is beautifully handled by having an error boundary. I have seen people create Error Boundaries that react differently to different kind of errors and provide a really good experience even in the face of an error.&lt;/p&gt;

&lt;p&gt;While this certainly helps calm the user down in the spur of the moment, having the ability to proactively be informed about these issues would be a blessing. This allows us to root cause and fix issues before they escalate into a PR problem.&lt;/p&gt;

&lt;p&gt;Sentry is an Error Monitoring and reporting solution that integrates well with frontend applications.&lt;/p&gt;

&lt;p&gt;This tutorial assumes that you are familiar with&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/error-boundaries.html"&gt;Error Boundaries in React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this tutorial we will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create an account with Sentry&lt;/li&gt;
&lt;li&gt;Integrate sentry into the application&lt;/li&gt;
&lt;li&gt;Add support for source-maps&lt;/li&gt;
&lt;li&gt;Test your integration and source maps&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-an-account-with-sentry"&gt;
  &lt;/a&gt;
  Create an account with Sentry
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h3&gt;

&lt;p&gt;Go to &lt;a href="https://sentry.io/"&gt;https://sentry.io/&lt;/a&gt; and click on &lt;b&gt;GET STARTED&lt;/b&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oK-AFeC6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtffbv8nhgaodimpbdxq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oK-AFeC6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtffbv8nhgaodimpbdxq.png" alt="615d7ad09c9ba70eb9614511_Screen Shot 2021-08-24 at 3.59.09 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h3&gt;

&lt;p&gt;Add in your details and click &lt;b&gt;CREATE YOUR ACCOUNT&lt;/b&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-YACRG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tknng7w7xvqn1xbcxmz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-YACRG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tknng7w7xvqn1xbcxmz.png" alt="615d7ae9fbb2462c0fdffdd0_Screen Shot 2021-08-24 at 3.59.37 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h3&gt;

&lt;p&gt;You will be redirected to the onboarding screen as shown below. Click on &lt;b&gt;I'm Ready&lt;/b&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MwolZGwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/snri2cydr178z5zk7bfc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MwolZGwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/snri2cydr178z5zk7bfc.png" alt="615d7b03fbb24685aae0002d_Screen Shot 2021-08-24 at 4.00.48 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h3&gt;

&lt;p&gt;Select &lt;b&gt;React&lt;/b&gt;, choose a suitable project name and click &lt;b&gt;Create Project&lt;/b&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nxwjtgU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88atvohngz3npewitwqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nxwjtgU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88atvohngz3npewitwqg.png" alt="615d7b1b9fac621964c9fa88_Screen Shot 2021-08-24 at 4.21.02 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5
&lt;/h3&gt;

&lt;p&gt;You will be redirected to the &lt;b&gt;"Configure React"&lt;/b&gt; page. Copy the dsn value.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vWlcQJcQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17bjl0wts8visgr03vgb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vWlcQJcQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17bjl0wts8visgr03vgb.png" alt="615d7b2e7d1e6496fab8e961_Screen Shot 2021-08-24 at 4.48.45 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#integrate-sentry-into-the-application"&gt;
  &lt;/a&gt;
  Integrate sentry into the application
&lt;/h2&gt;

&lt;p&gt;We will now send sentry errors from the ErrorBoundary component&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h3&gt;

&lt;p&gt;Clone this repo: &lt;a href="https://github.com/wednesday-solutions/react-template"&gt;https://github.com/wednesday-solutions/react-template&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h3&gt;

&lt;p&gt;Install the dependencies&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @sentry/react @sentry/tracing
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h3&gt;

&lt;p&gt;Copy the dsn from the 1st project and add it in the .env.development and in the .env file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SENTRY_DSN=XYZ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h3&gt;

&lt;p&gt;Create a sentry service.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vi app/services/sentry.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy the snippet below in the &lt;code&gt;sentry.js&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as Sentry from '@sentry/react';
import { Integrations } from "@sentry/tracing";
import { isLocal } from '@utils';

export function initSentry () {
    if (!isLocal()) {
      Sentry.init({
      environment: process.env.ENVIRONMENT_NAME,
        dsn: process.env.SENTRY_DSN,
        integrations: [new Integrations.BrowserTracing()],
        tracesSampleRate: 1.0
      });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5
&lt;/h3&gt;

&lt;p&gt;Add the snippet below in the &lt;code&gt;app/app.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
import { initSentry } from '@services/sentry';
...
initSentry();
// Chunked polyfill for browsers without Intl support
if (!window.Intl) {
  ...
} else {
  ...
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to test your integration locally, temporarily make a small change in the if condition of the initSentry function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
if (true || !isLocal() {
  ...
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-6"&gt;
  &lt;/a&gt;
  Step 6
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go to &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; and you open the developer tools. Go to the network tab.&lt;/p&gt;

&lt;p&gt;You should see an outgoing request to the sentry servers.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bm4q2sZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8r7gqggvzzqkjo5pnppd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bm4q2sZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8r7gqggvzzqkjo5pnppd.png" alt="615d7b53bb23c23d2a1e9cfb_Screen Shot 2021-08-24 at 6.26.50 PM"&gt;&lt;/a&gt;&lt;br&gt;
&lt;b&gt;Congratulations! Sentry has been setup.&lt;/b&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-7"&gt;
  &lt;/a&gt;
  Step 7
&lt;/h3&gt;

&lt;p&gt;Now let's integrate sentry in the ErrorBoundary so that we can report back to sentry whenever there is an error.&lt;/p&gt;

&lt;p&gt;Copy this snippet into the &lt;code&gt;app/services/sentry.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
export function reportError(error, errorInfo) {
  Sentry.captureException(error, { extra: errorInfo }, );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy this snippet into the &lt;code&gt;app/components/ErrorBoundary/index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { reportError } from '@services/sentry';
...
  componentDidCatch(error, errorInfo) {
    console.error(error, errorInfo);
    reportError(error, errorInfo);
  }
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-8"&gt;
  &lt;/a&gt;
  Step 8
&lt;/h3&gt;

&lt;p&gt;Test your integration by adding this snippet in the &lt;code&gt;app/app.js&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
} else {
  render(translationMessages);
}
const a = null;
console.log(a.abc);
// Install ServiceWorker and AppCache in the end since
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate to your project on sentry and you should see something like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---K0QfxnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u2di1u8t6711bn7g1gv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---K0QfxnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u2di1u8t6711bn7g1gv.png" alt="615d7b6a5cb29b2c8500c77f_Screen Shot 2021-08-24 at 6.42.07 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should also be able to filter by environment&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WowcvASJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jsxkv8tswoy2hqifq4o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WowcvASJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jsxkv8tswoy2hqifq4o.png" alt="615d7bb371e7cb8452e44f96_Screen Shot 2021-08-24 at 6.42.19 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#add-support-for-sourcemaps"&gt;
  &lt;/a&gt;
  Add support for source-maps
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h3&gt;

&lt;p&gt;Click on the event to get some more details about it&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U93UiOUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xg2smol5rm7pg608aio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U93UiOUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xg2smol5rm7pg608aio.png" alt="615d7bc6cc65f1810bb1d65b_Screen Shot 2021-08-24 at 6.44.06 PM"&gt;&lt;/a&gt;&lt;br&gt;
You will notice that it is not very easy to track where the exact issue is. We will now integrate source-maps so that we get the complete stack trace.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h3&gt;

&lt;p&gt;In sentry go to Settings → Developer Settings → New Internal Integration&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i-IAjj58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ahhbf9tjnq20nmqz8gy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-IAjj58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ahhbf9tjnq20nmqz8gy.png" alt="615d7bdecc65f1569fb1d66b_Screen Shot 2021-08-24 at 6.53.07 PM (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add the name of the integration like &lt;b&gt;Github Action Release&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Setup permissions. We will need &lt;b&gt;Admin&lt;/b&gt; for Release and &lt;b&gt;Read&lt;/b&gt; for Organization&lt;/p&gt;

&lt;p&gt;Click &lt;b&gt;Save&lt;/b&gt; and &lt;b&gt;copy the token&lt;/b&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h3&gt;

&lt;p&gt;Go to your repository on Github → Settings → Secrets → New Repository Secret&lt;/p&gt;

&lt;p&gt;name it &lt;b&gt;SENTRY_AUTH_TOKEN&lt;/b&gt; and paste the token in the value field.&lt;/p&gt;

&lt;p&gt;Similarly add &lt;b&gt;SENTRY_ORG&lt;/b&gt; and &lt;b&gt;SENTRY_PROJECT&lt;/b&gt; to the secrets. Those these are not really secrets it will allow you to reuse this workflow as is in all your projects.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h3&gt;

&lt;p&gt;Now we will write the sentry workflow that will handle deployment to &lt;b&gt;AWS S3&lt;/b&gt; and upload the source-maps. Create an S3 bucket and enable static website hosting&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KnM8HRHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6lkqos15cr0ko7z8l2pz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnM8HRHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6lkqos15cr0ko7z8l2pz.png" alt="615d7c03235c81be34c308b8_Screen Shot 2021-08-25 at 4.04.13 PM"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0CJy9Hd1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3ntjmfmo8cw57z5j0a3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0CJy9Hd1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3ntjmfmo8cw57z5j0a3.png" alt="615d7c0ed33fbad3f94e9307_Screen Shot 2021-08-25 at 4.03.59 PM"&gt;&lt;/a&gt;&lt;br&gt;
Create a new workflow for uploading the source-maps&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rm .github/workflows/cd.yml
vi .github/workflows/sentry.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy the following snippet. in the &lt;code&gt;sentry.yml&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Upload Source Maps
on:
  push:
    branches:
      - master
jobs:
  upload-source-maps:
    runs-on: ubuntu-latest
    env:
      SENTRY_RELEASE: ${{ github.sha }}
      SOURCE_DIR: './build/'
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      PATHS: '/*'
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: yarn
      - name: Build
        run: export SENTRY_RELEASE=${{ github.sha }} &amp;amp;&amp;amp; yarn build
      - name: AWS Deploy #5
        uses: jakejarvis/s3-sync-action@v0.5.0
        with:
          args: --acl public-read --follow-symlink
      - name: Set env BRANCH
        run: echo "BRANCH=$(echo $GITHUB_REF | cut -d'/' -f 3)" &amp;gt;&amp;gt; $GITHUB_ENV
      - name: Get environment_name
        id: vars
        run: |
          if [[ $BRANCH == 'master' ]]; then
              echo ::set-output name=environment_name::production
          else
              echo ::set-output name=environment_name::development
          fi
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: ${{steps.vars.outputs.environment_name}}
          sourcemaps: './build'
          set_commits: 'auto'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Add environment variables for &lt;b&gt;AWS_REGION&lt;/b&gt;, &lt;b&gt;AWS_ACCESS_KEY_ID&lt;/b&gt;, &lt;b&gt;AWS_SECRET_ACCESS_KEY&lt;/b&gt;, &lt;b&gt;AWS_S3_BUCKET&lt;/b&gt;
&lt;/li&gt;
&lt;li&gt;Set the &lt;b&gt;environment_name&lt;/b&gt; to either &lt;b&gt;production&lt;/b&gt; or &lt;b&gt;development&lt;/b&gt; based on the branch.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Update the &lt;code&gt;initSentry&lt;/code&gt; function &lt;code&gt;services/sentry.js&lt;/code&gt; as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export function initSentry() {
  ...
    Sentry.init({
      release: process.env.SENTRY_RELEASE,
      environment: process.env.ENVIRONMENT_NAME,
      dsn: process.env.SENTRY_DSN,
      integrations: [new Integrations.BrowserTracing()],
      tracesSampleRate: 1.0
    });
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-your-integration-and-sourcemaps"&gt;
  &lt;/a&gt;
  Testing your integration and source-maps
&lt;/h2&gt;

&lt;p&gt;Paste this snippet in your &lt;code&gt;app/containers/App/index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useEffect } from 'react';
...

export function App({location}) {
    useEffect(() =&amp;gt; {
    if (process.env.NODE_ENV !== 'test') {
      const a = null;
      // eslint-disable-next-line
      console.log(a.a300);
    }
  }, []);
  ...
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Commit your code and push it.&lt;/p&gt;

&lt;p&gt;Wait for the sentry action to complete.&lt;/p&gt;

&lt;p&gt;Navigate to the URL where the website is hosted.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lpN9BQ__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/es6tryrnciurcbprszyu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lpN9BQ__--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/es6tryrnciurcbprszyu.png" alt="615d7c4ed33fba334c4e9327_Screen Shot 2021-08-25 at 4.46.17 PM"&gt;&lt;/a&gt;&lt;br&gt;
You'll be greeted with a &lt;b&gt;Sorry. Something went wrong!&lt;/b&gt; screen. Don't worry, this means your &lt;b&gt;ErrorBoundary&lt;/b&gt; has been invoked. Go to sentry and take a look at the issue. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gd2C6XMQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xx5vi98o5ly2082if28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gd2C6XMQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xx5vi98o5ly2082if28.png" alt="615d7c5dd80aaa80e5106e4d_Screen Shot 2021-08-25 at 5.55.45 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;We now have support for release mapping!&lt;/b&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-support-for-suspected-commits"&gt;
  &lt;/a&gt;
  Adding support for suspected commits
&lt;/h2&gt;

&lt;p&gt;Add a &lt;b&gt;Github Integration&lt;/b&gt;&lt;br&gt;
Go to Settings → Integrations → Github&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OszpctbN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2l79b90dzg8ry4t2dqd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OszpctbN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2l79b90dzg8ry4t2dqd.png" alt="615d7c72bb23c2de9e1eb0b3_Screen Shot 2021-08-27 at 6.43.39 PM"&gt;&lt;/a&gt;&lt;br&gt;
Choose the right organisation → Only select repositories → Install&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7m1i71Ug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kkkg9fffu3x6tudenibm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7m1i71Ug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kkkg9fffu3x6tudenibm.png" alt="615d7c8466fdd1b0d641f99f_Screen Shot 2021-08-27 at 6.45.15 PM"&gt;&lt;/a&gt;&lt;br&gt;
Reload the react application to fire a new event.&lt;/p&gt;

&lt;p&gt;You should now start seeing &lt;b&gt;Suspect commits&lt;/b&gt; which help attribute the issue to the commit that introduced it.&lt;/p&gt;

&lt;p&gt;Filter all issues by releases, and assign issues to the right team member!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Fv31_l9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izi77dlqmk6jazhxbr97.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Fv31_l9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izi77dlqmk6jazhxbr97.png" alt="615d7c9309607e213f8970fb_Screen Shot 2021-08-25 at 5.55.36 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-go-from-here"&gt;
  &lt;/a&gt;
  Where to go from here
&lt;/h2&gt;

&lt;p&gt;You now have the ability to proactively handle errors on the backend. Use the sendMessage function to capture and report errors to slack. Pull only the relevant logs using the request-id as a filter.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed reading this article as much as I enjoyed writing it. If this peaked your interest stay tuned for the next article in the series where I will take you through how to proactively report frontend errors using Sentry.&lt;/p&gt;

&lt;p&gt;If you have any questions or comments, please join the forum discussion below.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Laravel Api authentication(Sanctum) with NuxtJs-Part1</title>
      <author>Tanzim Ibthesam</author>
      <pubDate>Mon, 11 Oct 2021 07:52:53 +0000</pubDate>
      <link>https://dev.to/tanzimibthesam/laravel-api-authentication-sanctum-with-nuxtjs-part1-3h68</link>
      <guid>https://dev.to/tanzimibthesam/laravel-api-authentication-sanctum-with-nuxtjs-part1-3h68</guid>
      <description>&lt;p&gt;As of Laravel 8 there has been introduction of Sanctum which has made APi authentication very easy. Here first I will explain about making Api authentication with Laravel and then I will inetgrate it with NuxtJs on frontend for the second part.&lt;/p&gt;

&lt;p&gt;At first lets install a fresh copy of Laravel &lt;br&gt;
&lt;strong&gt;Laravel Installation&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;laravel new nuxtapi&lt;/code&gt;&lt;br&gt;
I guess you already know how to run a migration. For api lets directly go to api.php. As of the latest version Sanctum is already installed from the start.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Database Migration for Users&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;public function up()&lt;br&gt;
    {&lt;br&gt;
        Schema::create('users', function (Blueprint $table) {&lt;br&gt;
            $table-&amp;gt;id();&lt;br&gt;
            $table-&amp;gt;string('username')-&amp;gt;unique();&lt;br&gt;
            $table-&amp;gt;string('email')-&amp;gt;unique();&lt;br&gt;
            $table-&amp;gt;timestamp('email_verified_at')-&amp;gt;nullable();&lt;br&gt;
            $table-&amp;gt;string('password');&lt;br&gt;
            $table-&amp;gt;rememberToken();&lt;br&gt;
            $table-&amp;gt;timestamps();&lt;br&gt;
        });&lt;br&gt;
    }&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Make an AuthController&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;php artisan make:controller AuthController&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Auth Routes&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;api.php&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Route::middleware(['prefix', 'auth'])-&amp;gt;group(function () {&lt;br&gt;
    //User Registration&lt;br&gt;
   Route::post('register',AuthController::class,'register');&lt;br&gt;
});&lt;/code&gt;&lt;br&gt;
Here we will register username,email and password both username and email are unique.&lt;br&gt;
Then run &lt;br&gt;
&lt;em&gt;Create a request for validation registration fields&lt;/em&gt;&lt;br&gt;
&lt;code&gt;php artisan make:request RegisterRequest&lt;/code&gt;&lt;br&gt;
&lt;code&gt;In app/HTTP/Requests/RegisterRequest.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;public function authorize()&lt;br&gt;
    {return true;}&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
&lt;code&gt;public function rules()&lt;br&gt;
{ &lt;br&gt;
 return [&lt;br&gt;
   'username' =&amp;gt; ['required', 'max:255', 'unique:users'],&lt;br&gt;
   'email' =&amp;gt; ['required', 'email', 'max:255', 'unique:users'],&lt;br&gt;
   'password' =&amp;gt; ['required', 'max:255', 'unique:users', 'confirmed']&lt;br&gt;
        ];&lt;br&gt;
    }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;User Model User.php&lt;/em&gt;&lt;br&gt;
In User Model you need to do mass assignment &lt;br&gt;
&lt;code&gt;protected $fillable = [&lt;br&gt;
        'username',&lt;br&gt;
        'email',&lt;br&gt;
        'password',&lt;br&gt;
    ];&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;AuthController&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function register(RegisterRequest $request)

    {

        User::create($request-&amp;gt;validated());
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Testing Registration in Postman&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GL3Q5EaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sjjz5u9yt3ktel8rma9x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GL3Q5EaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sjjz5u9yt3ktel8rma9x.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We see we get all validation errors &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mhwsjoxq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8s893u5xq52t79u7jh7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mhwsjoxq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8s893u5xq52t79u7jh7.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
When everything inserted correctly we get this confirmation &lt;br&gt;
message.&lt;br&gt;
&lt;strong&gt;Login&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AuthController.php&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;In api.php&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Route for login in api.php&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Route::post('login', [AuthController::class, 'login']);&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F6DavgxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkmfma8d4cem8rtvi9vl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F6DavgxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkmfma8d4cem8rtvi9vl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will create a LoginRequest &lt;code&gt;php artisan make:request LoginRequest&lt;/code&gt;&lt;br&gt;
&lt;code&gt;In app/HTTP/Requests/LoginRequest.php&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;LoginRequest.php&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;public function authorize()&lt;br&gt;
    {return true;}&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
&lt;code&gt;public function rules()&lt;br&gt;
{ &lt;br&gt;
 return [&lt;br&gt;
                'email' =&amp;gt; ['required', 'email', 'max:255'],&lt;br&gt;
                'password' =&amp;gt; ['required', 'max:255']&lt;br&gt;
            ];&lt;br&gt;
    }&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function login(LoginRequest $request)
    {
        if(!auth()-&amp;gt;attempt($request-&amp;gt;only('email', 'password'))){
            throw new AuthenticationException("Email or password is not valid");
        }


        $token = auth()-&amp;gt;user()-&amp;gt;createToken('user-token');

        return [
            'message' =&amp;gt; ['successfully logged in'],
            'token' =&amp;gt; $token-&amp;gt;plainTextToken
        ];
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;For getting authenticated user&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function user()
    {
        return auth()-&amp;gt;user();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Login testing in PostMan&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLe0lpqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bejpskh8ixw39ntxyy7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLe0lpqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bejpskh8ixw39ntxyy7c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We see when we enter nothing it gives us validation errors&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cj6dAMFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm951cmabrfbatksvs2f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cj6dAMFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm951cmabrfbatksvs2f.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 When email and password generated successfully we get a token. This token is used for authorization &lt;br&gt;
&lt;strong&gt;Logout&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;Route for logout&lt;/code&gt;&lt;br&gt;
&lt;code&gt;api.php&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Route::post('logout', [AuthController::class, 'logout'])-&amp;gt;middleware('auth:sanctum');&lt;/code&gt;&lt;br&gt;
It will be inisde group auth&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mSozEAOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i2vb4mjemd554wdpo8y8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mSozEAOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i2vb4mjemd554wdpo8y8.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function logout()
    {

        auth()-&amp;gt;user()-&amp;gt;currentAccessToken()-&amp;gt;delete();
        return [
            'message'=&amp;gt;'Successfully Logged out'
        ];
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Testing Logout in PostMan&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sc-xKXTm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2vayijk7tt3b4x3rma1y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sc-xKXTm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2vayijk7tt3b4x3rma1y.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
It shows unauthenticated without token &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aE-Vgear--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au3ijjtzzsd1y3wgi3bm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aE-Vgear--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au3ijjtzzsd1y3wgi3bm.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
With Token you can successfully logout&lt;br&gt;
 &lt;strong&gt;After you logout your token will expire&lt;/strong&gt;&lt;br&gt;
 &lt;strong&gt;Test authorization with token&lt;/strong&gt;&lt;br&gt;
If you want that your customers cant enter specific route without token that is they are not authorizaed to neter that route.&lt;br&gt;
That specific route&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G7rLQgC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h81jc16khmkcjmeo7xvp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G7rLQgC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h81jc16khmkcjmeo7xvp.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Postman Testing&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZW4BFBNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/492mgn3qc12ojy52asjz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZW4BFBNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/492mgn3qc12ojy52asjz.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
If you try to access this route without token it will say give you a message of unauthenticated.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ySvXJPOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy3aincnybewldz35k8e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ySvXJPOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy3aincnybewldz35k8e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are very much done with Laravel api authentication registration,login and logout.In the next blog we will mention about how to intergrate it on frontend with Nuxt.js&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
    </item>
    <item>
      <title>Node JS React Soft Dashboard - Free Version</title>
      <author>Sm0ke</author>
      <pubDate>Mon, 11 Oct 2021 07:52:50 +0000</pubDate>
      <link>https://dev.to/sm0ke/node-js-react-soft-dashboard-free-version-1k5g</link>
      <guid>https://dev.to/sm0ke/node-js-react-soft-dashboard-free-version-1k5g</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents an open-source full-stack seed project crafted on top of &lt;a href="https://appseed.us/product/node-js-react-soft-dashboard"&gt;Soft UI Dashboard&lt;/a&gt; (free version) using &lt;strong&gt;React&lt;/strong&gt; and &lt;strong&gt;Node JS&lt;/strong&gt; for the backend logic. The product comes with a modern UI, a production-ready Node JS API backend and JWT Authentication flow for &lt;code&gt;login&lt;/code&gt;, &lt;code&gt;logout&lt;/code&gt;, &lt;code&gt;register&lt;/code&gt; actions. For newcomers, &lt;strong&gt;React&lt;/strong&gt; is a popular JavaScript library for coding user interfaces backed by Facebook, and &lt;strong&gt;Node JS&lt;/strong&gt; is an open-source, cross-platform, back-end JavaScript runtime environment. Thanks for reading!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/product/node-js-react-soft-dashboard"&gt;Node JS React Soft Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://node-js-react-soft-dashboard.appseed-srv1.com/authentication/sign-in"&gt;Node JS React Soft Dashboard&lt;/a&gt; - LIVE demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a1yVyTtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgf5bhh83xivmvht9rgf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a1yVyTtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgf5bhh83xivmvht9rgf.gif" alt="Node JS React Soft Dashboard - open-source full-stack seed project."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This open-source full-stack product can be downloaded directly from Github and compiled locally with a few commands typed in the terminal. In order to successfully build the product, make sure the workstation environment has a &lt;a href="https://docs.appseed.us/content/tutorials/minimal-programming-kit"&gt;minimal programming kit&lt;/a&gt; already installed and accessible in the terminal: &lt;code&gt;Node JS&lt;/code&gt;, &lt;code&gt;GIT&lt;/code&gt;, and a modern editor like &lt;code&gt;Atom&lt;/code&gt; or &lt;code&gt;VsCode&lt;/code&gt;.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;How to build from &lt;a href="https://github.com/app-generator/react-soft-ui-dashboard"&gt;sources&lt;/a&gt; (published on Github, MIT License)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Clone and download the &lt;a href="https://github.com/app-generator/api-server-nodejs"&gt;Node JS API&lt;/a&gt; backend&lt;/li&gt;
&lt;li&gt;Start the API server on port &lt;code&gt;5005&lt;/code&gt; (default port)&lt;/li&gt;
&lt;li&gt;Clone and compile the &lt;a href="https://github.com/app-generator/react-soft-ui-dashboard"&gt;React Soft Dashboard UI&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Configure the frontend&lt;/code&gt; to communicate with the API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The frontend comes already configured to communicate with the API server using port 5000. For more information please access the product page that provides the link to the official documentation.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#soft-dashboard-ui-presentation"&gt;
  &lt;/a&gt;
  Soft Dashboard - UI Presentation
&lt;/h2&gt;

&lt;p&gt;This innovative design is crafted by Creative-Tim on top of Material-UI, the most popular components library for React. Soft UI Dashboard React is built with over 70 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard-react"&gt;Soft UI Dashboard React&lt;/a&gt; - product page (template version)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to get inspiration or just show something directly to your clients, you can jump-start your development with our pre-built example pages. Every page is spaced well, with attractive layouts and pleasing shapes. Soft UI Dashboard React has everything you need to quickly set up an amazing project.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hKr8WIv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3w92j9uynib5kvas9rd4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hKr8WIv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3w92j9uynib5kvas9rd4.png" alt="Node JS React Soft Dashboard - Login Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zHoJimiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvijwrmbn9obhzcosqg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zHoJimiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvijwrmbn9obhzcosqg1.png" alt="Node JS React Soft Dashboard - Billing Page"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3mEtbuT1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1jkigxvpmfvx5l4a4qr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3mEtbuT1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1jkigxvpmfvx5l4a4qr.png" alt="Node JS React Soft Dashboard - RTL Sample Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for Reading!&lt;/strong&gt; For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/"&gt;AppSeed&lt;/a&gt; for more &lt;a href="https://appseed.us/apps/react"&gt;React Apps&lt;/a&gt; or support&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a curated list published here on &lt;strong&gt;Dev.to&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>fullstack</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Project management using Jira by Mad Devs
</title>
      <author>Mad Devs</author>
      <pubDate>Mon, 11 Oct 2021 07:51:52 +0000</pubDate>
      <link>https://dev.to/maddevs/project-management-using-jira-by-mad-devs-30ao</link>
      <guid>https://dev.to/maddevs/project-management-using-jira-by-mad-devs-30ao</guid>
      <description>&lt;p&gt;Gone are the days when we used spreadsheets to make project plans and manage projects. Now there are plenty of project management tools. At Mad Devs, we have chosen Atlassian’s Jira for efficient and transparent project management. However, not many project managers know that Jira is not just an efficient project management tool. It can be integrated with many other tools and services. It makes Jira unbeatable, indeed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/insights/blog/how-to-automate-jira-mad-devs-experience/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W8IXEO25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq4bk5lr3r5jksg7mit8.png" alt="How to automate Jira: Mad Devs experience"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the main reasons our team relies on Jira is the extensive functionality of the tool. Every project is unique and requires a special approach and a specific toolset for effective software project management with Jira. Jira provides us with an opportunity to choose the needed stack to plan, track, and release even the most complex projects. While there is not a single right way to organize a project in Jira (everything depends on a project), there are some best practices, and we want to share them with you. &lt;/p&gt;

&lt;p&gt;Here, we will check not only some common features (you might already know them anyway) but we will share with you some practices that we at Mad Devs use internally. They help our project management processes be clear, transparent, and efficient.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/insights/blog/the-five-rules-when-we-work-with-jira/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3vb5iko--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3a35w4oyasn8w42x0q0.png" alt="5 Rules: How to work with Jira to drive results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scrum-or-kanban-choose-depending-on-a-project"&gt;
  &lt;/a&gt;
  Scrum or Kanban? Choose depending on a project
&lt;/h2&gt;

&lt;p&gt;Jira offers the smooth utilization of the extensive functionality of Scrum and Kanban boards. Scrum and Kanban can be used separately or we combine them if we see that it is better for the project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kanban-is-used-to-visualize-the-workflow"&gt;
  &lt;/a&gt;
  Kanban is used to visualize the workflow
&lt;/h3&gt;

&lt;p&gt;Kanban boards are used when a team prefers to start working on a project without a detailed plan or when we need to visualize the workflow.&lt;/p&gt;

&lt;p&gt;A Kanban board is basically a To-Do, Doing, and Done board. A Kanban workflow organizes tasks in a way to ensure the work moves on. Team members just move the tasks from one status into another while working on them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rYYpx-6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/988b7828-9c98-4694-a6ac-bea3e121b8ec_Kanban.jpeg%3Fauto%3Dcompress%2Cformat" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rYYpx-6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/988b7828-9c98-4694-a6ac-bea3e121b8ec_Kanban.jpeg%3Fauto%3Dcompress%2Cformat" alt="Kanban board"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Jira, you can add layers for specific clients, deliverables, and products. In other words, you can customize it and make it as detailed as you need.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scrum-is-used-to-plan-the-work-in-detail"&gt;
  &lt;/a&gt;
  Scrum is used to plan the work in detail
&lt;/h3&gt;

&lt;p&gt;We use Scrum boards for projects where we need to plan everything in detail. A scrum takes place over a specific time period. This time period is called a sprint. One sprint might take 1 or 2 weeks, depending on the project.&lt;/p&gt;

&lt;p&gt;The team checks daily the progress to ensure the tasks within the sprint are completed and identify possible bottlenecks and issues. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RkqkMAHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/7352fffe-2904-4325-961c-91b490c05c5a_Scrum.jpeg%3Fauto%3Dcompress%2Cformat" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RkqkMAHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/7352fffe-2904-4325-961c-91b490c05c5a_Scrum.jpeg%3Fauto%3Dcompress%2Cformat" alt="Scrum board"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-use-scrum"&gt;
  &lt;/a&gt;
  How do we use scrum?
&lt;/h2&gt;

&lt;p&gt;When a project in Scrum is created, we need to arrange some things there. At this stage, your backlog is empty. There, we create user stories, or tasks, or bug issues. Just to make sure: user stories are used to describe tasks or work items. You do it in non-technical language, from a user’s perspective. For example, it can sound like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I want to be able to create an account.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If we observe patterns in user stories or there are too many of them, we create epics. In epics, we show all the dependencies between the tasks, or user stories. Without creating epics, a project manager would arrange all the tasks into a roadmap manually. Guess how much time it might take? Well, a lot… That’s why we use epics. It allows to display all the tasks in a beautiful roadmap, just like this one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N68pRImq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/88b00664-a68e-4341-888f-fae1c95ef705_roadmap-2.jpeg%3Fauto%3Dcompress%2Cformat" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N68pRImq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/88b00664-a68e-4341-888f-fae1c95ef705_roadmap-2.jpeg%3Fauto%3Dcompress%2Cformat" alt="Roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on Epic to expand it and see all tasks and stories related to it. And also, if your manager knows how to handle connections, real magic will happen, and you will see relationships between tasks and possible blockers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3MmhNdCr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/e80807d9-d1b8-4cb4-ad9e-08f4f61676d4_roadmap.jpeg%3Fauto%3Dcompress%2Cformat" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3MmhNdCr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/e80807d9-d1b8-4cb4-ad9e-08f4f61676d4_roadmap.jpeg%3Fauto%3Dcompress%2Cformat" alt="Blockers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can connect tasks in the same epic or within several epics. It allows us to find faster tasks related to their field, tasks assigned to a specific person, priority, and whatever else you want to highlight. With it, we provide the team with the needed information right away by saving their time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sprint-planning"&gt;
  &lt;/a&gt;
  Sprint planning
&lt;/h3&gt;

&lt;p&gt;A sprint is a period of time within which we need to complete a predetermined set of tasks. A sprint can be one, two, three, or even four weeks long. We prefer two-week sprints because they aren’t too short and allow us to manage a good part of the work. They also allow us to regularly control the processes and check whether we are moving in the right direction. Though we don’t exclude the other periods for sprints, too, depending on the project specifics. &lt;/p&gt;

&lt;p&gt;When a sprint starts, we organize sprint planning meetings with our team. During the meeting, we discuss the sprint goals and stories that are prioritized in the backlog. The &lt;a href="https://maddevs.io/customer-university/differences-between-software-engineers-seniority-levels/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;development team&lt;/a&gt; creates the tasks they need to complete. Then, we commit to complete a specific number of tasks within the sprint.&lt;/p&gt;

&lt;p&gt;Here, we would mention one important thing to focus on:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;We use the estimate of tasks for all the above purposes, but we never use them to judge people or measure a team's productivity. We use them to understand how big the work volume is and how to prioritize it correctly.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once everything is prepared, a sprint starts. We have our own practices of organizing standups, retrospective meetings, and following all other stages needed to handle the tasks within a sprint. &lt;a href="https://maddevs.io/insights/blog/effective-virtual-meetings/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;You can read about them in our article here&lt;/a&gt;. And here, we move to other important aspects of Jira project management with Mad Devs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/insights/blog/how-to-automate-tasks-estimation-in-jira/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUsSxJQx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpyijy82xdiiy758lvzo.png" alt="How to automate tasks estimation in JIRA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backlog-grooming-is-easy-with-jira"&gt;
  &lt;/a&gt;
  Backlog grooming is easy with Jira
&lt;/h2&gt;

&lt;p&gt;We make sure to review, prioritize, and update the backlog regularly, and remove the tasks that are outdated. This process is called backlog grooming, and with it, we ensure that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We keep the backlog clean to make it easier for team members to navigate through the backlog items and contribute efficiently. &lt;/li&gt;
&lt;li&gt;We keep the backlog relevant, well-documented, and prioritized in accordance with the project requirements and team needs.&lt;/li&gt;
&lt;li&gt;The backlog provides the team an opportunity to be aligned when we are working on new features, fixing bugs, or performing some other product-related activities.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Only if the backlog grooming is performed constantly and appropriately, we can prioritize our tasks properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-best-practices-from-mad-devs-on-workflow-management"&gt;
  &lt;/a&gt;
  The best practices from Mad Devs on workflow management
&lt;/h2&gt;

&lt;p&gt;A standard workflow in Jira looks like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To Do (work that hasn’t started yet)&lt;/li&gt;
&lt;li&gt;In Progress (work that is being looked at by the team)&lt;/li&gt;
&lt;li&gt;Code Review (work that is done and waiting for review)&lt;/li&gt;
&lt;li&gt;Done (work that is done).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jira is a highly customizable tool. Workflows can be customized depending on a project, the stack used by a team, or the way the team is used to work. &lt;/p&gt;

&lt;p&gt;We can change the names of the processes or add additional processes such as Awaiting for QA, Tested, or just whatever we need. Our aim here is to make the workflows easy to use for every team member, transparent, and clear. Working processes are different from project to project. We describe all our working processes in &lt;a href="https://maddevs.io/clients/case-studies/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;case studies&lt;/a&gt; which are published on our website. &lt;/p&gt;

&lt;p&gt;We also consider such factors as metrics to be reported in the worklog. We have developed some practices to make our working processes smooth, improve the productivity of each team member, and make the processes transparent and traceable. Wanna learn more about how we do it? Read on!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/insights/blog/reasons-to-log-time/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-Te7i3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvif9b68w2226hu2f7x4.png" alt="Top reasons to log time"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We break down big tasks into smaller subtasks&lt;/p&gt;

&lt;p&gt;Here, I would start with an example.&lt;/p&gt;

&lt;p&gt;Imagine you are a developer. A project manager is asking you how much time you need to develop a website page. You, after thinking for a while, give an estimate of approximately two days.&lt;/p&gt;

&lt;p&gt;Do you think it is the right approach? And if not, who is not right here?&lt;/p&gt;

&lt;p&gt;Well, the approach is not correct. Without subdividing the task and checking its components, it is impossible to assess what time it might take. Also, if it appears later that there were some blockers, some details that cannot be done without the help or participation of other team members, the time needed to complete the task will be much higher than the initial estimate. So, a developer is making a mistake by giving an assessment without subdividing the task into subtasks and checking details.&lt;/p&gt;

&lt;p&gt;The project manager also shouldn't have trusted such an assessment. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What do we do to avoid incorrect assessments and mistakes or at least eliminate them?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From the example, you could have guessed it already: we divide big tasks into smaller subtasks. With it, we pursue two goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can assess more accurately how much time we need for a small task and thus, provide a more exact estimate for the entire task.&lt;/li&gt;
&lt;li&gt;We can discover all black boxes and check whether somebody else’s participation is needed to complete the task.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Along with these purely practical reasons, dividing a big task into smaller chunks has one more purpose. When we see a huge task, we might become worried. It leads to the loss of focus, and in worst cases, to a complete confusion and even to a depression (yes, in the very direct sense). However, when we divide this huge task into small chunks, we see how we can handle those small chunks one by one. So, the task doesn’t look so scary anymore. Along with huge psychological relief, we get one more benefit: a detailed plan on how to work on the task.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/insights/blog/time-tracking-in-software-development/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VoBK8pUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01kxhojlrjjbnjm38fsx.png" alt="Time tracking in software development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#worklogs-are-the-proof-of-what-you-have-done"&gt;
  &lt;/a&gt;
  Worklogs are the proof of what you have done
&lt;/h3&gt;

&lt;p&gt;Another must-to-be process is writing worklogs. In worklogs, we write the result of a piece of work. We note the time we spent and describe what we have been during the time. Our task is to write a worklog as clear as possible for a reader who may not be a technical expert. In clearly formulated, understandable sentences, we describe what we managed to do in the time spent. At the same time, writing a worklog that is too large in the form of an essay is also not worth it. It is worth remembering that links to documents, code, and whatever is confidential, in worklogs are NOT mentioned. Yeah, security is above all, as long as we work with confidential information.&lt;/p&gt;

&lt;p&gt;How often do we write worklogs? Optimally, they shall be written as frequently as possible. We recommend writing them at least every 2 hours. We understand that sometimes, people are busy with a task and any interruption causes delays. That’s why we log time every 2 hours and not every 30 minutes, for example. After 2 hours of hard work, people tend to start procrastinating or switch to activities not connected to work. So, this frequency of time logging allows them not to get distracted. &lt;/p&gt;

&lt;p&gt;You might be wondering how one can log time every two hours if there is a meeting with a client, for example. We have it in writing. Yes, this principle: &lt;strong&gt;what is not written down - never happened&lt;/strong&gt;, we apply it to everything. So, we have a clear explanation in what cases we may not write worklogs as frequently as indicated. But after the meeting is over, a worklog is needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#we-write-comments"&gt;
  &lt;/a&gt;
  We write comments
&lt;/h3&gt;

&lt;p&gt;You might be thinking now: why shall I write comments if I write worklogs??!! However, comments are needed, and we write them constantly. &lt;/p&gt;

&lt;p&gt;Comments are one of the main communication tools in a team. Every team member who is working on the same task or whose task is connected with yours, can open your task, and find all the needed information from your comments. So, instead of contacting you and asking for one or another detail, they can just open the task and see everything there. It saves time both yours and theirs. &lt;/p&gt;

&lt;p&gt;What do we comment on? We comment on everything we are doing. What does it give us? It allows us to benefit in many different ways: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We get a lot of information that can be used for feature documentation. &lt;/li&gt;
&lt;li&gt;We liberate our brains from excessive information by writing it down. It also helps us to keep track of our activities and focus on the needed direction.&lt;/li&gt;
&lt;li&gt;We document all that we discuss with somebody when we ask for something or during a meeting. If we have tried to solve an issue in several ways and haven’t found a solution, we also note it in a respective ticket. &lt;/li&gt;
&lt;li&gt;Imagine that you have made a feature, and after some years of use, it broke down. You do not remember what you have been doing there. But when you open the comments, you can check the entire process step by step. &lt;/li&gt;
&lt;li&gt;Properly written comments are your safety. If you write down everything you are doing and later, a conflict arises, you can show the ticket with your comments to prove that you have been doing something. &lt;strong&gt;What is not written down - never happened&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Finally, by writing comments, you make the process clearer not only to the team but also to yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#we-use-the-extensive-range-of-jira-integrations"&gt;
  &lt;/a&gt;
  We use the extensive range of Jira integrations
&lt;/h2&gt;

&lt;p&gt;Have you ever thought that it would be so cool to have a tool that turns your ideas that you share in a team’s messenger into tasks? &lt;/p&gt;

&lt;p&gt;We communicate with the team in Slack. And we have an opportunity to turn messages into trackable tasks in Jira. Yes, I am talking now about Jira integration with Slack. Messages in the chat create responses in Jira tickets, and comments in Jira tickets are displayed in Slack in a special thread. You can check all the processes without opening Jira, everything is available in Slack and is updated in real-time mode.&lt;/p&gt;

&lt;p&gt;We are also alerted if somebody has a worklog that is bigger or smaller than needed, and if the tasks aren’t updated for too long (several days). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jira-integrations-with-gitlab-and-github-are-precious"&gt;
  &lt;/a&gt;
  Jira integrations with GitLab and GitHub are precious
&lt;/h3&gt;

&lt;p&gt;Jira integration with GitHub makes project management with Jira much simpler. It is not surprising that we use this option. It allows us to get updates and links about what is going on with our repositories in Jira tasks for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pull requests&lt;/li&gt;
&lt;li&gt;Builds&lt;/li&gt;
&lt;li&gt;Commits&lt;/li&gt;
&lt;li&gt;Deployments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we can take actions in Jira directly, without leaving our development workflow. Integration with GitLab enables the synchronization of projects, workflows, issues, comments, and streamlining the collaboration across teams.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jira-webhooks"&gt;
  &lt;/a&gt;
  Jira webhooks
&lt;/h2&gt;

&lt;p&gt;When a certain event on Jira occurs, a webhook delivers data as soon as it happens. It means that we get the data immediately. So, Jira webhooks provide us with a mechanism to let remote applications receive push notifications from Jira.&lt;/p&gt;

&lt;p&gt;How do we use webhooks? &lt;/p&gt;

&lt;p&gt;We can either give them access to activity across all the projects in Jira or customize them to give them access, say, to issue types or to issues of a specific project only. In the second case, we will get data about events in an indicated project only while ignoring those that occur in not-predetermined instances. &lt;/p&gt;

&lt;p&gt;So, webhooks can be used for a range of purposes such as data parsing or creating custom Jira-oriented bots. We use them for your projects and we develop them for our clients, too. &lt;/p&gt;

&lt;p&gt;Jira offers a toolset too extensive to describe all the features and integrations. We have described here just some of them, the tip of the iceberg, so to say. For every project, even the most unique and complex one, Jira can be configured in a way to help your specialists handle the project efficiently and without excessive stress. Does it sound too good to be true? At Mad Devs, our project managers can do it. So, if you are looking for a project manager who can handle any project in a perfect way, here is the right place to do so.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/services/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3T-lr6Qe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqft8qdd71sxl5cd5g6p.png" alt="software engineering and mobile app development services"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-use-the-extensive-jira-features-set"&gt;
  &lt;/a&gt;
  We use the extensive Jira features set
&lt;/h2&gt;

&lt;p&gt;You know already that the toolset that Jira offers is immense. It is one of the reasons why we work with Jira. We can choose just any tools that we need to comply with project requirements and make project management as effortless and smooth as possible. While many of Jira’s integrations and features are free, there are also paid ones. Telling about every feature would take too much time, moreover, some of them are rarely used - only in specific projects. That’s why we have chosen one of them - our favourite.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bigpicture"&gt;
  &lt;/a&gt;
  BigPicture
&lt;/h3&gt;

&lt;p&gt;BigPicture project management is not used extensively in our company. Why do we want to tell more about it? &lt;/p&gt;

&lt;p&gt;While smaller projects can be easily managed with the most common functionality, things complicate when you have to manage complex projects with a lot of tasks and dependencies. Here is when BigPicture comes in handy. Even though we don’t use BigPicture on a daily basis, we use it for the most demanding projects - banking systems, security systems and other. &lt;/p&gt;

&lt;p&gt;This feature allows us to create a global plan for some projects by creating a detailed plan of their realization regarding timelines and specialists. In detail, it allows us to:&lt;/p&gt;

&lt;p&gt;Structurize tasks depending on their deadlines, assessments, and dependencies. &lt;br&gt;
It provides us with a clear and precise portfolio view and allows us to monitor the processes of our undertakings at all levels.&lt;br&gt;
Builds a powerful Gantt diagram that allows us to plan and manage all our tasks in a single workspace (it displays Jira tasks on a timeline as coloured bars of different lengths. It also adds dependencies on the chart). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AYrmqnG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/c473dd3f-d6c6-45e6-8008-8b121b1db59e_bigpic2.png%3Fauto%3Dcompress%2Cformat" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AYrmqnG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.prismic.io/superpupertest/c473dd3f-d6c6-45e6-8008-8b121b1db59e_bigpic2.png%3Fauto%3Dcompress%2Cformat" alt="Example of BigPicture from Atlassian Marketplace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-a-project-without-project-management-software"&gt;
  &lt;/a&gt;
  Managing a project without project management software
&lt;/h2&gt;

&lt;p&gt;What if there were no Jira or other project management software? There were times when we used to do many things manually anyway. Would it be possible nowadays? &lt;/p&gt;

&lt;p&gt;If you don’t have active project management software, the business will end up with:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Failing to meet the expectations and requirements of shareholders even with the best team&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Without project management software, it is impossible to prioritize tasks, manage the available resources wisely, and change the business environment when required. It leads to failures to meet deadlines, the loss of trust in your team, and the loss of business in the long term.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/customer-university/why-it-projects-are-late-and-exceed-budgets/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CgGSYJ84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7l2o76jarm0xxmgvvh04.png" alt="Here is why IT projects are late and exceed budgets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-lack-of-visibility"&gt;
  &lt;/a&gt;
  The lack of visibility
&lt;/h3&gt;

&lt;p&gt;How can you manage multiple tasks by using spreadsheets only? Without proper project management software, you cannot see the real-time schedule, and use a lot of time and energy to follow the workflow. The absence of a project management software means the absence of a proper tool to anticipate risks and plan measures to prevent them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-credibility"&gt;
  &lt;/a&gt;
  No credibility
&lt;/h3&gt;

&lt;p&gt;If you don’t have a tool to upload tasks, allocate resources, produce reports, and complete other tasks, the business stops being credible. In turn, it means loss of clients and financial losses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bottom-line"&gt;
  &lt;/a&gt;
  Bottom Line
&lt;/h2&gt;

&lt;p&gt;Jira is an efficient project management tool for Agile teams. With an efficient working area, enhanced visibility into the project status, configurable workflows, and multiple integrations and additional features, it offers everything that is needed for efficient project management.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/services/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ukhBRTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18nhohca9kvbmbeyz42e.png" alt="Software Development"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Previously published at &lt;a href="https://maddevs.io/insights/blog/project-management-using-jira/?utm_source=devto&amp;amp;utm_medium=pm-using-jira"&gt;maddevs.io/blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>management</category>
    </item>
    <item>
      <title>7 Formats for Great Team Retrospectives</title>
      <author>Lars Grammel</author>
      <pubDate>Mon, 11 Oct 2021 07:47:06 +0000</pubDate>
      <link>https://dev.to/lgrammel/7-formats-for-great-team-retrospectives-ogo</link>
      <guid>https://dev.to/lgrammel/7-formats-for-great-team-retrospectives-ogo</guid>
      <description>&lt;p&gt;A team retrospective is a meeting at the end of a sprint, project, or milestone where the &lt;strong&gt;team reflects on the past work cycle and identifies improvements&lt;/strong&gt;. It involves celebrating achievements to raise the team spirit, gathering feedback on challenges, and planning how to execute better in upcoming sprints or projects. Retrospectives are essential for continuous improvement and team growth.&lt;/p&gt;

&lt;p&gt;Retrospective meetings are &lt;strong&gt;structured to facilitate team discussions and beneficial outcomes&lt;/strong&gt;. They usually start with an introduction, then input from each team member is gathered, presented, and discussed, and finally, the next steps are determined. Gathering input usually happens in parallel. Guided by the questions of a retrospective format, each team member writes up their thoughts on sticky notes and puts them on a whiteboard (or the digital equivalent in remote meetings).&lt;/p&gt;

&lt;p&gt;I've had the opportunity to participate in, facilitate and experiment with several retrospective formats. Some formats are better for &lt;strong&gt;regular occurrences&lt;/strong&gt;, e.g., at the end of sprints, and others can be great to &lt;strong&gt;mix things up&lt;/strong&gt;, e.g., after finishing a large project. Here are my thoughts on and experiences with seven retrospective formats that you can use regularly:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-standard"&gt;
  &lt;/a&gt;
  The Standard
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What went well? &lt;/li&gt;
&lt;li&gt;What did not go well? &lt;/li&gt;
&lt;li&gt;What can we improve? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The standard format covers the main areas (positives, negatives, and improvements) with &lt;strong&gt;solid questions&lt;/strong&gt; and is &lt;strong&gt;easy to understand&lt;/strong&gt;. However, it &lt;strong&gt;can get boring&lt;/strong&gt; over time, and a tendency to focus on negative experiences and improvements can cause &lt;strong&gt;celebrations&lt;/strong&gt; to &lt;strong&gt;fall short&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-standard-with-token-of-appreciation"&gt;
  &lt;/a&gt;
  The Standard with Token of Appreciation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What went well? &lt;/li&gt;
&lt;li&gt;What did not go well? &lt;/li&gt;
&lt;li&gt;What can we improve?&lt;/li&gt;
&lt;li&gt;Who do you appreciate for their contributions?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A variant of the Standard retrospective that helps &lt;strong&gt;appreciate the team and its achievements&lt;/strong&gt; is the token of appreciation. In addition to the three questions, every team member can call out others for their contributions. They would then receive a token of appreciation (e.g., a flower or chocolate) and positive feedback from the team. This variant can help &lt;strong&gt;make the standard retrospective more positive and strengthen the team spirit&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#startstopcontinue"&gt;
  &lt;/a&gt;
  Start-Stop-Continue
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What should we start?&lt;/li&gt;
&lt;li&gt;What should we stop?&lt;/li&gt;
&lt;li&gt;What should we continue?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start-Stop-Continue is another widespread retrospective format. It is very &lt;strong&gt;solution-oriented&lt;/strong&gt; and &lt;strong&gt;focuses on changes&lt;/strong&gt; in the form of starting and stopping activities. Positives and negatives are discussed for that purpose when needed.&lt;/p&gt;

&lt;p&gt;The strength of Start-Stop-Continue is that it aims in on changes and leaves room for bringing in new ideas. However, this retrospective format &lt;strong&gt;might not go deeply into causes and problems&lt;/strong&gt;, which may or may not be desired. Another drawback is that celebration and appreciation are not a direct part of this format.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starfish"&gt;
  &lt;/a&gt;
  Starfish
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What should we start?&lt;/li&gt;
&lt;li&gt;What should we do more?&lt;/li&gt;
&lt;li&gt;What should we continue?&lt;/li&gt;
&lt;li&gt;What should we do less?&lt;/li&gt;
&lt;li&gt;What should we stop?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href="https://www.funretrospectives.com/starfish/"&gt;Starfish retrospective&lt;/a&gt; is an &lt;strong&gt;extension of Start-Stop-Continue&lt;/strong&gt;. It adds the "What should we do more?" and "What should we do less?" questions that often come up. Typically it is represented by splitting the whiteboard into five areas (the starfish), and the team members put up their sticky notes in the corresponding regions.&lt;/p&gt;

&lt;p&gt;While the Starfish retrospective improves on Start-Stop-Continue, it still &lt;strong&gt;lacks in the problem and appreciation areas&lt;/strong&gt;. In addition, having to categorize ideas into do less vs. stop upfront is often not helpful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4l"&gt;
  &lt;/a&gt;
  4L
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What did you like? &lt;/li&gt;
&lt;li&gt;What have you learned? &lt;/li&gt;
&lt;li&gt;What was lacking? &lt;/li&gt;
&lt;li&gt;What did you long for? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href="https://conceptboard.com/blog/4l-retrospective-technique/"&gt;4L retrospective&lt;/a&gt; is &lt;strong&gt;more positive&lt;/strong&gt; than the Standard retrospective, and it &lt;strong&gt;encourages knowledge sharing&lt;/strong&gt; through the "What have you learned?" question.&lt;/p&gt;

&lt;p&gt;In practice, the difference between "lacking" and "long for" is relatively small and unclear, and there is a &lt;a href="https://www.funretrospectives.com/the-3-ls-liked-learned-lacked/"&gt;3L retrospective&lt;/a&gt; that leaves out the "What did you long for?" question.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#madsadglad"&gt;
  &lt;/a&gt;
  Mad-Sad-Glad
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What made you mad?&lt;/li&gt;
&lt;li&gt;What made you sad?&lt;/li&gt;
&lt;li&gt;What made you happy?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Mad-Sad-Glad retrospective format uses the &lt;strong&gt;team members' emotions&lt;/strong&gt; to draw out problems, identify positives, and build team cohesion that way. Mad-Sad-Glad can work well when used on occasion.&lt;/p&gt;

&lt;p&gt;However, when used every cycle, it &lt;strong&gt;can lead to repeated venting and frustrations&lt;/strong&gt;, especially when some of the issues that make team members unhappy are outside the team's control and not easily changeable. In this case, the team might focus on their negative emotions more than on improving things under their control.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#happydiscussimprove"&gt;
  &lt;/a&gt;
  Happy-Discuss-Improve
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What was I happy with?&lt;/li&gt;
&lt;li&gt;What ideas and topics would I like to discuss?&lt;/li&gt;
&lt;li&gt;What do I think needs to be improved?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Happy-Discuss-Improve retrospective is a format that my team and I came up with after experiences with the above formats. It creates a &lt;strong&gt;positive atmosphere of appreciation, improvement, and openness&lt;/strong&gt; needed to bring in new ideas and discuss problems. Wording the questions from the "I" perspective emphasizes that everyone has their own viewpoints and supports a balanced discussion. &lt;/p&gt;

&lt;p&gt;Overall we were very happy with this format. It worked well for remote retrospectives. One possible enhancement to Happy-Discuss-Improve could be to add a token of appreciation.&lt;/p&gt;

&lt;p&gt;There are many different retrospective formats and I have only described a small subset. &lt;strong&gt;Which team retrospectives work best for you and what do you like about them?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>My Pain with AWS Amplify</title>
      <author>JoLo</author>
      <pubDate>Mon, 11 Oct 2021 07:30:19 +0000</pubDate>
      <link>https://dev.to/jolo/my-pain-with-aws-amplify-4jno</link>
      <guid>https://dev.to/jolo/my-pain-with-aws-amplify-4jno</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/amplify/"&gt;AWS Amplify&lt;/a&gt; is a set of tools and services to build full stack applications based on AWS.&lt;br&gt;
Its &lt;a href="https://docs.amplify.aws/cli/"&gt;CLI&lt;/a&gt; helps to integrate and manage different AWS services with your frontend or mobile techstack such as React or Flutter.&lt;br&gt;
This is key when integrating &lt;a href="https://docs.aws.amazon.com/appsync/latest/devguide/what-is-appsync.html"&gt;AppSync&lt;/a&gt; for GraphQL or &lt;a href="https://aws.amazon.com/cognito/"&gt;Cognito&lt;/a&gt; for authentication.&lt;/p&gt;

&lt;p&gt;I've been working with AWS Amplify for quite some time and must say that in the beginning I was more cursing than loving it.&lt;br&gt;
Here are my pains and learnings I had with Amplify.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8aDFzAZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghgtfd1qdgk6gbo73bvs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8aDFzAZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghgtfd1qdgk6gbo73bvs.png" alt="Amplify Bash"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#monorepo-but-not"&gt;
  &lt;/a&gt;
  Monorepo but not
&lt;/h2&gt;

&lt;p&gt;Let's say you create a React app by following this &lt;a href="https://docs.amplify.aws/start/getting-started/setup/q/integration/react/"&gt;tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You have setup the Amplify CLI, had run &lt;code&gt;npx create-react-app react-amplified&lt;/code&gt; and &lt;code&gt;amplify init&lt;/code&gt; to integrate your React app with AWS Services.&lt;/p&gt;

&lt;p&gt;Now, you would be able to run &lt;code&gt;amplify add api&lt;/code&gt; to create a REST or GraphQL API. REST is possible with API Gateway and a Lambda or Fargate (since v6.0.0) whereas GraphQL could be set up with AppSync or Fargate.&lt;/p&gt;

&lt;p&gt;This gives you a lot of flexibility and in theory you could create a different tech stack for each endpoint.&lt;/p&gt;

&lt;p&gt;You could argue that this is sort of a Monorepo as you have your React app and your APIs wrapped in its own packages.&lt;br&gt;
However, sharing models or libs without manual tweaks is not possible (check out the next part of my series 😉).&lt;br&gt;
That could lead to different versions when using libs like &lt;a href="https://lodash.com/"&gt;_lodash&lt;/a&gt; and harm your local storage as you always have an individual &lt;code&gt;node_modules&lt;/code&gt; for each function.&lt;/p&gt;

&lt;p&gt;Fortunately, the CLI synthesizes and orchestrates your project 👌&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Personal Recommendation:&lt;/em&gt;&lt;/strong&gt; Use &lt;a href="https://pnpm.io/"&gt;PNPM&lt;/a&gt;  for all your JS-projects. That is not just faster but more efficient. Your machine will be thankful 😜&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#folder-bash"&gt;
  &lt;/a&gt;
  Folder Bash
&lt;/h2&gt;

&lt;p&gt;As above mentioned, you could create for each endpoint its own tech stack.&lt;/p&gt;

&lt;p&gt;However, when doing so, you end up with &lt;strong&gt;a lot of&lt;/strong&gt; folders and files. That could bloat your setup and your IDE when clicking through files.&lt;/p&gt;

&lt;p&gt;And if you create a REST endpoint with API Gateway and Lambda, Amplify will create folders within &lt;code&gt;api&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;functions&lt;/code&gt;. The weird part is that you could name them differently... 🤪&lt;/p&gt;

&lt;p&gt;Fortunately, Amplify knows that the function is tightly coupled with an API but you as a developer may not 🤔&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Personal Recommendation:&lt;/em&gt;&lt;/strong&gt; A good structure is key and you should name your backend services appropriate so that others may understand what's inside. Also name your function like your endpoint or at least mark them with something you may identify later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#adding-other-aws-services"&gt;
  &lt;/a&gt;
  Adding other AWS Services
&lt;/h2&gt;

&lt;p&gt;For our use case, we needed to setup an SQS-queue.&lt;br&gt;
Unfortunately, the CLI does not support creating queues (yet) without modifying the Cloudformation- files.&lt;/p&gt;

&lt;p&gt;This is how I bootstraped an SQS-queue to our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;amplify/backend/backend-config.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;many&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Resources&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"queues"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"my-queue-name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"service"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SQS"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"providerPlugin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"awscloudformation"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;many&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Resources&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then creating a new folder structure&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify
  &lt;span class="se"&gt;\b&lt;/span&gt;ackend
    &lt;span class="se"&gt;\q&lt;/span&gt;ueues
      &lt;span class="se"&gt;\m&lt;/span&gt;y-queue-name
        parameters.json
        template.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;template.json&lt;/code&gt; is a CloudFormation template, and &lt;code&gt;parameters.json&lt;/code&gt; is parameters file that will be passed to the cloudformation template.&lt;/p&gt;

&lt;p&gt;I got heavily inspired by &lt;a href="https://medium.com/@navvabian/how-to-add-an-sqs-queue-to-your-amplify-cli-bootstrapped-project-cb7781c636ed"&gt;Bardia's article&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-json"&gt;
  &lt;/a&gt;
  Hello Json
&lt;/h2&gt;

&lt;p&gt;In addition to the above mentioned point, you probably noticed the &lt;code&gt;.json&lt;/code&gt;- files which each folder will have. Those are the configuration files for Amplify. You can also put in your own Cloudformation template (CFN) in order to spin up the service.&lt;/p&gt;

&lt;p&gt;However, it can only use &lt;code&gt;json&lt;/code&gt;- Format, which is (in my opinion) more error-prone. Or if you want to integrate your own &lt;code&gt;yaml&lt;/code&gt;- CFN that wouldn't work and you need to convert it to &lt;code&gt;json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Luckily, there are tools for that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Personal Recommendation:&lt;/em&gt;&lt;/strong&gt; Put a diagram and a &lt;code&gt;README.md&lt;/code&gt; in each folder. That would document your code and other developer would understand the purpose faster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#removing-is-super-dangerous"&gt;
  &lt;/a&gt;
  Removing is super dangerous
&lt;/h2&gt;

&lt;p&gt;I had a situation where I created a function and then realised I misconfigured it. So I did &lt;code&gt;amplify remove function&lt;/code&gt;.&lt;br&gt;
That deleted the whole folder and me as an idiot did not save the code😱&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Personal Recommendation:&lt;/em&gt;&lt;/strong&gt; So pay attention when removing functions or APIs❗️❗️ Commit your code if you think it might be useful later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Amplify is a great tool and it is nice to integrate your Frontend or Mobile tech with AWS Services and turn it to a fullstack application. &lt;/p&gt;

&lt;p&gt;However, I think you could easily bloat up your application and it can get messy real quickly. &lt;br&gt;
The key is to organise and structure your code base. Plus, you should make that aware for other developers by proper documentation.&lt;/p&gt;

&lt;p&gt;Still, Amplify does many things good and I can see the value of it. &lt;/p&gt;

&lt;p&gt;In my next part of this series, I will add Typescript- functions and turn the &lt;code&gt;function&lt;/code&gt;- folder to a Monorepo.&lt;/p&gt;

&lt;p&gt;Hope to see you there!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>amplify</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The Wink Programming Language-Make Enterprise Application fast and secure.</title>
      <author>Ansh Gupta</author>
      <pubDate>Mon, 11 Oct 2021 07:26:19 +0000</pubDate>
      <link>https://dev.to/thisisanshgupta/the-wink-programming-language-make-enterprise-application-fast-and-secure-5aoj</link>
      <guid>https://dev.to/thisisanshgupta/the-wink-programming-language-make-enterprise-application-fast-and-secure-5aoj</guid>
      <description>&lt;p&gt;Hey guys,&lt;br&gt;
I'm Ansh.A student from India and I'm one of the developers of Wink 😉. Actually we have one developer only and that is me.And this post is gonna be about the Wink Programming Language which is a Java like programming language that can be used to make Enterprise Applications more faster and more secure.&lt;/p&gt;

&lt;p&gt;𝗔𝗯𝗼𝘂𝘁&lt;br&gt;
If you know Java then you know that it's one of the oldest programming language created by Sun Microsystems and it has been used a lot for developing enterprise applications and today still developers consider Java if they want to develop enterprise applications.&lt;br&gt;
But having hundreds of pros Java has some cons also like:&lt;br&gt;
•It has a complex application development environment.&lt;br&gt;
•Tools can be difficult to use.&lt;br&gt;
•Java Swing environment's ability to build graphical user interfaces has limitations.&lt;br&gt;
•May cost more to build, deploy and manage applications.&lt;br&gt;
•Lacks built-in support for Web services standards.&lt;br&gt;
•Hard to learn for new developers.&lt;/p&gt;

&lt;p&gt;𝗕𝗮𝗰𝗸𝗴𝗿𝗼𝘂𝗻𝗱&lt;br&gt;
I started developing Wink as a hobby project in August 2021 and currently it's written in Golang but in future it's going to be in C or self-hosted.&lt;/p&gt;

&lt;p&gt;𝗣𝗹𝗮𝗻𝗻𝗲𝗱 𝗳𝗲𝗮𝘁𝘂𝗿𝗲𝘀&lt;br&gt;
•OOPS&lt;br&gt;
•Structs&lt;br&gt;
•Java ecosystem in Wink&lt;br&gt;
     •That means you would be able to use any Java module in Wink.&lt;/p&gt;

&lt;p&gt;𝗖𝗼𝗻𝗰𝗹𝘂𝘀𝗶𝗼𝗻&lt;br&gt;
Presently Wink is closed source but in future I'm going to make it open source.&lt;br&gt;
If reading this makes you excited about Wink and you think you can contribute with code then you can contact me here at: &lt;a href="mailto:hig6063@gmail.com"&gt;hig6063@gmail.com&lt;/a&gt;. &lt;br&gt;
Thanks so much for reading! 😊&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>java</category>
      <category>go</category>
      <category>programming</category>
    </item>
    <item>
      <title>2 Modules in Nebula Graph: Scheduler &amp; Executor</title>
      <author>lisahui</author>
      <pubDate>Mon, 11 Oct 2021 07:26:16 +0000</pubDate>
      <link>https://dev.to/lisahui/2-modules-in-nebula-graph-scheduler-executor-41g</link>
      <guid>https://dev.to/lisahui/2-modules-in-nebula-graph-scheduler-executor-41g</guid>
      <description>&lt;p&gt;You may have learned the optimizer of Nebula Graph’s query engine in the last article. In this article, we will introduce how the Scheduler and the Executor, the last two modules of the query engine, are implemented.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;In the execution phase, the execution engine uses the Scheduler to transform a physical execution plan, generated by the Planner, into a series of Executors to drive their execution. Each PlanNode in a physical execution plan has a corresponding Executor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structure-of-source-files"&gt;
  &lt;/a&gt;
  Structure of Source Files
&lt;/h2&gt;

&lt;p&gt;The source code of the Scheduler is under the src/scheduler directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/scheduler
├── AsyncMsgNotifyBasedScheduler.cpp
├── AsyncMsgNotifyBasedScheduler.h
├── CMakeLists.txt
├── Scheduler.cpp
└── Scheduler.h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Scheduler abstract class defines the common interfaces of the schedulers, which can inherit the features from the class to implement various types of schedulers. The AsyncMsgNotifyBasedScheduler scheduler has been implemented. By using the asynchronous message communication and breadth-first search algorithm, it can be prevented from stack overflow errors. The source code of the Executor is under the src/executor directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src/executor
├── admin
├── algo
├── CMakeLists.txt
├── ExecutionError.h
├── Executor.cpp
├── Executor.h
├── logic
├── maintain
├── mutate
├── query
├── StorageAccessExecutor.cpp
├── StorageAccessExecutor.h
└── test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#process"&gt;
  &lt;/a&gt;
  Process
&lt;/h2&gt;

&lt;p&gt;First, the Scheduler starts the traversal of the entire execution plan from its root node by using the breadth-first search algorithm and builds their notification mechanism according to the dependencies between nodes. During the execution phase, each node will be scheduled to be executed after being notified that all the nodes it depends on have been executed successfully. For a node, once executed, it will notify its dependent nodes until the entire plan is executed successfully.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void AsyncMsgNotifyBasedScheduler::runExecutor(
    std::vector&amp;lt;folly::Future&amp;lt;Status&amp;gt;&amp;gt;&amp;amp;&amp;amp; futures,
    Executor* exe,
    folly::Executor* runner,
    std::vector&amp;lt;folly::Promise&amp;lt;Status&amp;gt;&amp;gt;&amp;amp;&amp;amp; promises) const {
    folly::collect(futures).via(runner).thenTry(
        [exe, pros = std::move(promises), this](auto&amp;amp;&amp;amp; t) mutable {
            if (t.hasException()) {
                return notifyError(pros, Status::Error(t.exception().what()));
            }
            auto status = std::move(t).value();
            auto depStatus = checkStatus(std::move(status));
            if (!depStatus.ok()) {
                return notifyError(pros, depStatus);
            }
            // Execute in current thread.
            std::move(execute(exe)).thenTry(
                [pros = std::move(pros), this](auto&amp;amp;&amp;amp; exeTry) mutable {
                    if (exeTry.hasException()) {
                        return notifyError(pros, Status::Error(exeTry.exception().what()));
                    }
                    auto exeStatus = std::move(exeTry).value();
                    if (!exeStatus.ok()) {
                        return notifyError(pros, exeStatus);
                    }
                    return notifyOK(pros);
                });
        });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each Executor goes through four phases: “create”, “open”, “execute”, and then “close”.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create"&gt;
  &lt;/a&gt;
  create
&lt;/h3&gt;

&lt;p&gt;In the “create” phase, an appropriate Executor will be generated according to the node type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open"&gt;
  &lt;/a&gt;
  open
&lt;/h3&gt;

&lt;p&gt;In the “open” phase, before the execution starts, the Executor is initialized, the slow queries are terminated, and the memory watermark is checked. When using Nebula Graph, you can use kill to terminate a query, so the status of the current execution plan must be checked before the execution of each Executor. If the plan is in the killed status, the execution will be terminated. Before the execution of each query Executor, it is necessary to check whether the amount of free memory has fallen below the watermark. If the watermark is reached, the execution will be terminated, which may avoid OOM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Status Executor::open() {
    if (qctx_-&amp;gt;isKilled()) {
        VLOG(1) &amp;lt;&amp;lt; "Execution is being killed. session: " &amp;lt;&amp;lt; qctx()-&amp;gt;rctx()-&amp;gt;session()-&amp;gt;id()
            &amp;lt;&amp;lt; "ep: " &amp;lt;&amp;lt; qctx()-&amp;gt;plan()-&amp;gt;id()
            &amp;lt;&amp;lt; "query: " &amp;lt;&amp;lt; qctx()-&amp;gt;rctx()-&amp;gt;query();
        return Status::Error("Execution had been killed");
    }
    auto status = MemInfo::make();
    NG_RETURN_IF_ERROR(status);
    auto mem = std::move(status).value();
    if (node_-&amp;gt;isQueryNode() &amp;amp;&amp;amp; mem-&amp;gt;hitsHighWatermark(FLAGS_system_memory_high_watermark_ratio)) {
        return Status::Error(
            "Used memory(%ldKB) hits the high watermark(%lf) of total system memory(%ldKB).",
            mem-&amp;gt;usedInKB(),
            FLAGS_system_memory_high_watermark_ratio,
            mem-&amp;gt;totalInKB());
    }
    numRows_ = 0;
    execTime_ = 0;
    totalDuration_.reset();
    return Status::OK();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#execute"&gt;
  &lt;/a&gt;
  execute
&lt;/h3&gt;

&lt;p&gt;The input and output of a query Executor are in the form of tables (DataSet). The execution of an Executor is based on the iterator model, which means that for each calculation, the next() method of the iterator of the input table is called to retrieve a row of data and then the calculation is performed. Such a process is repeated until the traversal of the entire input table is done. The results of the calculations are constructed into a new table and output to the next Executor as its input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;folly::Future&amp;lt;Status&amp;gt; ProjectExecutor::execute() {
    SCOPED_TIMER(&amp;amp;execTime_);
    auto* project = asNode&amp;lt;Project&amp;gt;(node());
    auto columns = project-&amp;gt;columns()-&amp;gt;columns();
    auto iter = ectx_-&amp;gt;getResult(project-&amp;gt;inputVar()).iter();
    DCHECK(!!iter);
    QueryExpressionContext ctx(ectx_);

    VLOG(1) &amp;lt;&amp;lt; "input: " &amp;lt;&amp;lt; project-&amp;gt;inputVar();
    DataSet ds;
    ds.colNames = project-&amp;gt;colNames();
    ds.rows.reserve(iter-&amp;gt;size());
    for (; iter-&amp;gt;valid(); iter-&amp;gt;next()) {
        Row row;
        for (auto&amp;amp; col : columns) {
            Value val = col-&amp;gt;expr()-&amp;gt;eval(ctx(iter.get()));
            row.values.emplace_back(std::move(val));
        }
        ds.rows.emplace_back(std::move(row));
    }
    VLOG(1) &amp;lt;&amp;lt; node()-&amp;gt;outputVar() &amp;lt;&amp;lt; ":" &amp;lt;&amp;lt; ds;
    return finish(ResultBuilder().value(Value(std::move(ds))).finish());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the input table of the current Executor cannot be used by the other Executors as their input, the memory occupied by the table will be dropped in the execution phase to reduce memory usage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void Executor::drop() {
    for (const auto &amp;amp;inputVar : node()-&amp;gt;inputVars()) {
        if (inputVar != nullptr) {
            // Make sure use the variable happened-before decrement count
            if (inputVar-&amp;gt;userCount.fetch_sub(1, std::memory_order_release) == 1) {
                // Make sure drop happened-after count decrement
                CHECK_EQ(inputVar-&amp;gt;userCount.load(std::memory_order_acquire), 0);
                ectx_-&amp;gt;dropResult(inputVar-&amp;gt;name);
                VLOG(1) &amp;lt;&amp;lt; "Drop variable " &amp;lt;&amp;lt; node()-&amp;gt;outputVar();
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#close"&gt;
  &lt;/a&gt;
  close
&lt;/h3&gt;

&lt;p&gt;After the execution of an Executor is done, some collected execution information, such as execution time and the number of rows in the output table, is added to the profiling statistics. You can run a PROFILE statement and then view the statistics in the returned result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Execution Plan (optimize time 141 us)

-----+------------------+--------------+-----------------------------------------------------+--------------------------------------
| id | name             | dependencies | profiling data                                      | operator info                       |
-----+------------------+--------------+-----------------------------------------------------+--------------------------------------
|  2 | Project          | 3            | ver: 0, rows: 56, execTime: 147us, totalTime: 160us | outputVar: [                        |
|    |                  |              |                                                     |   {                                 |
|    |                  |              |                                                     |     "colNames": [                   |
|    |                  |              |                                                     |       "VertexID",                   |
|    |                  |              |                                                     |       "player.age"                  |
|    |                  |              |                                                     |     ],                              |
|    |                  |              |                                                     |     "name": "__Project_2",          |
|    |                  |              |                                                     |     "type": "DATASET"               |
|    |                  |              |                                                     |   }                                 |
|    |                  |              |                                                     | ]                                   |
|    |                  |              |                                                     | inputVar: __TagIndexFullScan_1      |
|    |                  |              |                                                     | columns: [                          |
|    |                  |              |                                                     |   "$-.VertexID AS VertexID",        |
|    |                  |              |                                                     |   "player.age"                      |
|    |                  |              |                                                     | ]                                   |
----------+------------------+--------------+-----------------------------------------------------+--------------------------------------
|  3 | TagIndexFullScan | 0            | ver: 0, rows: 56, execTime: 0us, totalTime: 6863us  | outputVar: [                        |
|    |                  |              |                                                     |   {                                 |
|    |                  |              |                                                     |     "colNames": [                   |
|    |                  |              |                                                     |       "VertexID",                   |
|    |                  |              |                                                     |       "player.age"                  |
|    |                  |              |                                                     |     ],                              |
|    |                  |              |                                                     |     "name": "__TagIndexFullScan_1", |
|    |                  |              |                                                     |     "type": "DATASET"               |
|    |                  |              |                                                     |   }                                 |
|    |                  |              |                                                     | ]                                   |
|    |                  |              |                                                     | inputVar:                           |
|    |                  |              |                                                     | space: 318                          |
|    |                  |              |                                                     | dedup: false                        |
|    |                  |              |                                                     | limit: 9223372036854775807          |
|    |                  |              |                                                     | filter:                             |
|    |                  |              |                                                     | orderBy: []                         |
|    |                  |              |                                                     | schemaId: 319                       |
|    |                  |              |                                                     | isEdge: false                       |
|    |                  |              |                                                     | returnCols: [                       |
|    |                  |              |                                                     |   "_vid",                           |
|    |                  |              |                                                     |   "age"                             |
|    |                  |              |                                                     | ]                                   |
|    |                  |              |                                                     | indexCtx: [                         |
|    |                  |              |                                                     |   {                                 |
|    |                  |              |                                                     |     "columnHints": [],              |
|    |                  |              |                                                     |     "index_id": 325,                |
|    |                  |              |                                                     |     "filter": ""                    |
|    |                  |              |                                                     |   }                                 |
|    |                  |              |                                                     | ]                                   |
----------+------------------+--------------+-----------------------------------------------------+--------------------------------------
|  0 | Start            |              | ver: 0, rows: 0, execTime: 1us, totalTime: 19us     | outputVar: [                        |
|    |                  |              |                                                     |   {                                 |
|    |                  |              |                                                     |     "colNames": [],                 |
|    |                  |              |                                                     |     "type": "DATASET",              |
|    |                  |              |                                                     |     "name": "__Start_0"             |
|    |                  |              |                                                     |   }                                 |
|    |                  |              |                                                     | ]                                   |
----------+------------------+--------------+-----------------------------------------------------+--------------------------------------  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, the explanation of the query engine source code has been completed. Next time we will explain the implementation of some features of Nebula Graph.&lt;/p&gt;

&lt;p&gt;If you encounter any problems in the process of using Nebula Graph, please refer to &lt;a href="https://docs.nebula-graph.io/2.5.0/pdf/NebulaGraph-EN.pdf"&gt;Nebula Graph Database Manual&lt;/a&gt; to troubleshoot the problem. It records in detail the knowledge points and specific usage of the graph database and the graph database Nebula Graph.&lt;/p&gt;

</description>
      <category>database</category>
      <category>devops</category>
      <category>opensource</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
