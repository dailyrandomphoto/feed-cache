<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to send web push notifications in Java</title>
      <author>Marcus Hellberg</author>
      <pubDate>Thu, 27 May 2021 23:42:24 +0000</pubDate>
      <link>https://dev.to/marcushellberg/how-to-send-web-push-notifications-in-java-21lo</link>
      <guid>https://dev.to/marcushellberg/how-to-send-web-push-notifications-in-java-21lo</guid>
      <description>&lt;p&gt;&lt;a href="https://developers.google.com/web/fundamentals/push-notifications"&gt;Web push notifications&lt;/a&gt; are a way of informing your app users when something important has happened. &lt;/p&gt;

&lt;p&gt;Users can receive web push notifications even when they are not actively using your application, for instance, if the app is open in a background tab or even if it's not open. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JJkKfnMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1vxfxy2bt5nsgbhhyuc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JJkKfnMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1vxfxy2bt5nsgbhhyuc.jpg" alt="A notification message above an open browser window."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Push notifications are &lt;a href="https://caniuse.com/push-api"&gt;widely supported&lt;/a&gt; by all browsers except for Safari: 78% of web users use a browser that supports them.&lt;/p&gt;

&lt;p&gt;In this tutorial, I'll show you &lt;strong&gt;how to subscribe to notifications in the browser&lt;/strong&gt; and &lt;strong&gt;how to send notifications from a Java server&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-version"&gt;
  &lt;/a&gt;
  Video version
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/M5sbGvW3S4I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-bit-of-background-how-web-push-notifications-work"&gt;
  &lt;/a&gt;
  A bit of background: how web push notifications work
&lt;/h2&gt;

&lt;p&gt;Web push notifications rely on two web standards: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/notification"&gt;Notification API&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Push_API"&gt;Push API&lt;/a&gt; (which in turn uses &lt;a href="https://github.com/marcushellberg/fusion-push-notifications"&gt;ServiceWorker&lt;/a&gt;). They require HTTPS to work. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#subscribing-to-push-notifications"&gt;
  &lt;/a&gt;
  Subscribing to push notifications
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The server shares its public key with the browser&lt;/li&gt;
&lt;li&gt;The browser uses the public key to subscribe to a push service (each browser have their own)&lt;/li&gt;
&lt;li&gt;The push service returns a subscription with a unique endpoint URL that can be used to send push messages&lt;/li&gt;
&lt;li&gt;The subscription is saved to the server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ifrH-JSb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb3m32j83bxsnshbiv27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ifrH-JSb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb3m32j83bxsnshbiv27.png" alt="A diagram showing a server, browser, and endpoint. The server has a public and private key. The browser uses the public key to subscribe to the endpoint."&gt;&lt;/a&gt;&lt;/p&gt;
Image courtesy of &lt;a href="https://developers.google.com/web/fundamentals/push-notifications/subscribing-a-user"&gt;Google Web Fundamentals&lt;/a&gt;



&lt;h3&gt;
  &lt;a href="#sending-push-notifications"&gt;
  &lt;/a&gt;
  Sending push notifications
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The server signs an authorization header with its private key&lt;/li&gt;
&lt;li&gt;The server sends the message to the unique endpoint URL &lt;/li&gt;
&lt;li&gt;The push server decrypts the auth header &lt;/li&gt;
&lt;li&gt;The push server sends the message to the device/browser&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GWPNxOgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vju1r9czxzdx1zijvya.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GWPNxOgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vju1r9czxzdx1zijvya.png" alt="A diagram showing a server signing a message with the private key, sending it to the endpoint, which decrypts the header and sends the message to the device"&gt;&lt;/a&gt;&lt;/p&gt;
Image courtesy of &lt;a href="https://developers.google.com/web/fundamentals/push-notifications/subscribing-a-user"&gt;Google Web Fundamentals&lt;/a&gt;



&lt;h2&gt;
  &lt;a href="#setup-project-and-generate-vapid-keys"&gt;
  &lt;/a&gt;
  Setup project and generate VAPID keys
&lt;/h2&gt;

&lt;p&gt;I'm using &lt;a href="https://vaadin.com/fusion"&gt;Vaadin Fusion&lt;/a&gt; for this example. Fusion uses &lt;a href="https://spring.io/projects/spring-boot"&gt;Spring Boot&lt;/a&gt; on the backend and &lt;a href="https://lit.dev"&gt;Lit&lt;/a&gt; on the frontend. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I will only cover the key steps here. You can find the complete source code on &lt;a href="https://github.com/marcushellberg/fusion-push-notifications"&gt;GitHub&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can create a new Fusion project with the Vaadin CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx @vaadin/cli init --fusion push-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a set of VAPID keys with the &lt;code&gt;web-push&lt;/code&gt; npm package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx web-push generate-vapid-keys
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new file &lt;code&gt;.env&lt;/code&gt; in the project directory and use it to store the keys. Add it to your &lt;code&gt;.gitignore&lt;/code&gt; so you don't accidentally publish it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export VAPID_PUBLIC_KEY=BAwZxXp0K....
export VAPID_PRIVATE_KEY=1HLNMKEE....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the &lt;a href="https://github.com/web-push-libs/webpush-java"&gt;Java WebPush&lt;/a&gt; library dependency to &lt;code&gt;pom.xml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;nl.martijndwars&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;web-push&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;5.1.1&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Load the environment file and start the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source .env
mvn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-java-service-for-handling-subscriptions-and-sending-notifications"&gt;
  &lt;/a&gt;
  Create a Java service for handling subscriptions and sending notifications
&lt;/h2&gt;

&lt;p&gt;Create a new Spring Boot service, &lt;code&gt;MessageService.java&lt;/code&gt;. This service will read in the keys and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.example.application&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.security.GeneralSecurityException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.security.Security&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.time.LocalTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.ArrayList&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.List&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.concurrent.ExecutionException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.stream.Collectors&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.annotation.PostConstruct&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.bouncycastle.jce.provider.BouncyCastleProvider&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jose4j.lang.JoseException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.beans.factory.annotation.Value&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.scheduling.annotation.Scheduled&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.stereotype.Service&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;nl.martijndwars.webpush.Notification&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;nl.martijndwars.webpush.PushService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;nl.martijndwars.webpush.Subscription&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@Service&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MessageService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="nd"&gt;@Value&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"${vapid.public.key}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;publicKey&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nd"&gt;@Value&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"${vapid.private.key}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;privateKey&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;PushService&lt;/span&gt; &lt;span class="n"&gt;pushService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Subscription&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;subscriptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

  &lt;span class="nd"&gt;@PostConstruct&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;GeneralSecurityException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Security&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addProvider&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;BouncyCastleProvider&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;pushService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PushService&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;publicKey&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;privateKey&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getPublicKey&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;publicKey&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;subscribe&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Subscription&lt;/span&gt; &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Subscribed to "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subscriptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;unsubscribe&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unsubscribing from "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;subscriptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subscriptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Collectors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sendNotification&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Subscription&lt;/span&gt; &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;messageJson&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;pushService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;send&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Notification&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;messageJson&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;GeneralSecurityException&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;JoseException&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;ExecutionException&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;InterruptedException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@Scheduled&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fixedRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sendNotifications&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sending notifications to all subscribers"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""
        {
          "&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="s"&gt;": "&lt;/span&gt;&lt;span class="nc"&gt;Server&lt;/span&gt; &lt;span class="n"&gt;says&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="s"&gt;",
          "&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="s"&gt;": "&lt;/span&gt;&lt;span class="nc"&gt;It&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="nl"&gt;now:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="s"&gt;"
        }
        """&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;subscriptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;sendNotification&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;LocalTime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
    &lt;span class="o"&gt;});&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some key things to note: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;@Value("${vapid.public.key}")&lt;/code&gt; annotation reads the environment variables into the fields.&lt;/li&gt;
&lt;li&gt;The service stores the subscriptions in a &lt;code&gt;List&lt;/code&gt;. In a more practical application, you would keep them in a database along with the user.&lt;/li&gt;
&lt;li&gt;You send push notifications with &lt;code&gt;pushService.send(new Notification(subscription, messageJson))&lt;/code&gt;. The payload can also be plain text, but JSON is more flexible.&lt;/li&gt;
&lt;li&gt;The service sends out a notification to all subscribers every 15 seconds, containing the current time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-an-endpoint-for-accessing-the-server"&gt;
  &lt;/a&gt;
  Create an Endpoint for accessing the server
&lt;/h2&gt;

&lt;p&gt;Next, you need a way to access the server from the browser. In Vaadin Fusion, you do this by defining an &lt;a href="https://vaadin.com/docs/latest/fusion/application/accessing-backend"&gt;Endpoint&lt;/a&gt;. The endpoint will generate TypeScript types and TS accessor methods you can use in the client code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.example.application&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.vaadin.flow.server.connect.Endpoint&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.vaadin.flow.server.connect.auth.AnonymousAllowed&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;nl.martijndwars.webpush.Subscription&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@Endpoint&lt;/span&gt;
&lt;span class="nd"&gt;@AnonymousAllowed&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MessageEndpoint&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;MessageService&lt;/span&gt; &lt;span class="n"&gt;messageService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MessageEndpoint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MessageService&lt;/span&gt; &lt;span class="n"&gt;messageService&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;messageService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;messageService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getPublicKey&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;messageService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPublicKey&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;subscribe&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Subscription&lt;/span&gt; &lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;messageService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subscribe&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subscription&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;unsubscribe&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;messageService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;unsubscribe&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some things to note: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Endpoints are secured by default. You can allow anonymous access with &lt;code&gt;@AnonymousAllowed&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The endpoint injects the message service and delegates subscribing and unsubscribing to it. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#subscribe-to-notifications-in-the-browser"&gt;
  &lt;/a&gt;
  Subscribe to notifications in the browser
&lt;/h2&gt;

&lt;p&gt;Create a view for subscribing to notifications. The &lt;a href="https://lit.dev"&gt;LitElement&lt;/a&gt; component keeps track of two pieces of state: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;whether the user has allowed notifications&lt;/li&gt;
&lt;li&gt;whether the user has an existing push subscription
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;customElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lit-element&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@vaadin/vaadin-button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../view&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Frontend/generated/MessageEndpoint&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;customElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notifications-view&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NotificationsView&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;state&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;denied&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permission&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;denied&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;state&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;subscribed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
      &amp;lt;h1&amp;gt;Web Push Notifications 📣&amp;lt;/h1&amp;gt;

      &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;denied&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
            &amp;lt;b&amp;gt;
              You have blocked notifications. You need to manually enable them
              in your browser.
            &amp;lt;/b&amp;gt;
          `&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribed&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
            &amp;lt;p&amp;gt;Hooray! You are subscribed to receive notifications 🙌&amp;lt;/p&amp;gt;
            &amp;lt;vaadin-button theme="error" @click=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
              &amp;gt;Unsubscribe&amp;lt;/vaadin-button
            &amp;gt;
          `&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
            &amp;lt;p&amp;gt;You are not yet subscribed to receive notifications.&amp;lt;/p&amp;gt;

            &amp;lt;vaadin-button theme="primary" @click=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
              &amp;gt;Subscribe&amp;lt;/vaadin-button
            &amp;gt;
          `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;firstUpdated&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;registration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRegistration&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;pushManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSubscription&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notificationPermission&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestPermission&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notificationPermission&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;granted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;publicKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPublicKey&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;registration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRegistration&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;pushManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;userVisibleOnly&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;applicationServerKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlB64ToUint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;publicKey&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// Serialize keys uint8array -&amp;gt; base64&lt;/span&gt;
        &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;denied&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;registration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRegistration&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;pushManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSubscription&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;urlB64ToUint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base64String&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;padding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base64String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;base64&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base64String&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\-&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/_/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rawData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;atob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outputArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rawData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;rawData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;outputArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rawData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;outputArray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The important part here is the &lt;code&gt;subscribe()&lt;/code&gt;-method. Here is what it does:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Asks the user for permission to show notifications with &lt;code&gt;Notification.requestPermission()&lt;/code&gt;. The answer will be "granted" or "denied". &lt;strong&gt;NOTE: If the user declines, you cannot ask them again. Be sure to only prompt the user when they expect and want notifications.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;If the user grants permission, fetch the public key from the server and use the ServiceWorker PushManager to subscribe to notifications. The &lt;code&gt;applicationServerKey&lt;/code&gt; is a Uint8Array containing the public key. You need to convert it with the included method. (Not the most convenient API 🤷‍♂️)&lt;/li&gt;
&lt;li&gt;If the subscription succeeds, send it to the server.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#handle-incoming-push-messages-in-the-serviceworker"&gt;
  &lt;/a&gt;
  Handle incoming push messages in the ServiceWorker
&lt;/h2&gt;

&lt;p&gt;Once you are subscribed to notifications, the server will send out a notification every 15 seconds. &lt;/p&gt;

&lt;p&gt;Override the Vaadin generated ServiceWorker by copying &lt;code&gt;target/sw.ts&lt;/code&gt; -&amp;gt; &lt;code&gt;frontend/sw.ts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add the following two listeners to &lt;code&gt;sw.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;push&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showNotification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notificationclick&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;focusOrOpenWindow&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;focusOrOpenWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allWindows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchAll&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;window&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appWindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allWindows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appWindow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;appWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;openWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;fetch&lt;/code&gt; listener gets called when a new message comes in. Read the event &lt;code&gt;data&lt;/code&gt; property as JSON to access the message payload.

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;self.registration.showNotification()&lt;/code&gt; to show a notification using the message data. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;notificationclick&lt;/code&gt; listener gets called when you click on the notification.

&lt;ul&gt;
&lt;li&gt;Close the notification. &lt;/li&gt;
&lt;li&gt;See if the user has an open tab application tab. If they do, focus it. If they don't, open a new window.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source code
&lt;/h2&gt;

&lt;p&gt;You can find the complete source code on my GitHub: &lt;a href="https://github.com/marcushellberg/fusion-push-notifications"&gt;https://github.com/marcushellberg/fusion-push-notifications&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>webdev</category>
      <category>springboot</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Upload videos on GitHub (now GA!)</title>
      <author>Davide Benvegnù</author>
      <pubDate>Thu, 27 May 2021 23:08:49 +0000</pubDate>
      <link>https://dev.to/n3wt0n/upload-videos-on-github-now-ga-2en0</link>
      <guid>https://dev.to/n3wt0n/upload-videos-on-github-now-ga-2en0</guid>
      <description>&lt;p&gt;Today we talk about uploading and using videos in GitHub.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;As developers, the ability to &lt;strong&gt;collaborate through videos&lt;/strong&gt; (for example, pair programming, demos, etc.) is an extremely important part of a software workflow, especially for communities and teams that are distributed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub video support is now finally GA&lt;/strong&gt;, so let's see how it works&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;Let's quickly see how to upload a video in GitHub, and then let's explore few scenarios where this can be very helpful:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/h6fOErvWIGI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/h6fOErvWIGI"&gt;Link to the video: https://youtu.be/h6fOErvWIGI&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scenarios"&gt;
  &lt;/a&gt;
  Scenarios
&lt;/h3&gt;

&lt;p&gt;As you have seen, uploading a video in GitHub Issues, Pull Requests and Discussions is super straight forward. I wanna share &lt;strong&gt;3 scenarios&lt;/strong&gt; in which uploading a video can be helpful.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#help-maintainers-reproduce-bugs"&gt;
  &lt;/a&gt;
  Help Maintainers Reproduce Bugs
&lt;/h4&gt;

&lt;p&gt;Bugs are something that every developer deals with, but sometimes words aren’t enough to help someone else reproduce the problem quickly. And bug reports very often require significant back and forth with the user to get to the root of the issue.&lt;/p&gt;

&lt;p&gt;By enabling users to upload videos we have the ability to visually reproduce the way a bug is identified and significantly decrease the time spent to try and reproduce it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#provide-context-on-pull-requests"&gt;
  &lt;/a&gt;
  Provide Context on Pull Requests
&lt;/h4&gt;

&lt;p&gt;There’s a lot of context about requirements, architecture decisions, and more captured on GitHub in issues and pull requests.&lt;/p&gt;

&lt;p&gt;Developers can utilize video to share more details about complex code changes with colleagues by providing walkthroughs, demos of functionality, and other important context to maximize their review feedback.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#feature-showcase"&gt;
  &lt;/a&gt;
  Feature Showcase
&lt;/h4&gt;

&lt;p&gt;Last scenario in which using a video can be useful is sharing how a feature might take shape.&lt;/p&gt;

&lt;p&gt;When it comes to developing a new feature or product, a written proposal or static design are great, but often lack the ability to really show the end-to-end user workflows and interactions.&lt;/p&gt;

&lt;p&gt;Sharing videos of prototype walkthroughs or providing talk tracks for a static design have also helped development teams get to the heart of what they are setting out to build and why so they can get others excited about their work and ultimately build a better product for their own users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mobile-app-support"&gt;
  &lt;/a&gt;
  Mobile App Support
&lt;/h3&gt;

&lt;p&gt;Almost done, but first the proverbial cherry on the cake: uploading videos is also &lt;strong&gt;available from both the iOS and Android GitHub mobile apps&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is especially useful for mobile developers who can now record a video of a mobile bug and upload it straight to an issue all from the same device.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;What do you think? Is this a feature that is important or valuable to you? let me know in the comment section below.&lt;/p&gt;

&lt;p&gt;Also, check out &lt;a href="https://youtu.be/lSnbOtw4izI"&gt;this video in which I talk about how to manage the Pull Requests&lt;/a&gt; properly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/h6fOErvWIGI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>news</category>
      <category>devops</category>
      <category>video</category>
    </item>
    <item>
      <title>Welcome to the Golden Age of Developer Advocacy</title>
      <author>Chris Traganos</author>
      <pubDate>Thu, 27 May 2021 22:45:01 +0000</pubDate>
      <link>https://dev.to/stripe/welcome-to-the-golden-age-of-developer-advocacy-51fe</link>
      <guid>https://dev.to/stripe/welcome-to-the-golden-age-of-developer-advocacy-51fe</guid>
      <description>&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;: The displacement of in-person developer events has vaulted Developer Advocacy forward by years. The momentum of self-forming communities, better streaming capabilities, and the rise of scaled developer experiences are a peek into the direction of our field of work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advocate-is-an-action-verb"&gt;
  &lt;/a&gt;
  Advocate is an action verb
&lt;/h2&gt;

&lt;p&gt;A quick google search for &lt;code&gt;Developer Advocate&lt;/code&gt; will present over 42 million results with the top results clearly showing a trend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/what-the-heck-is-a-developer-advocate-87ab4faccfc4/"&gt;"What the heck is a Developer Advocate?"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@ashleymcnamara/what-is-developer-advocacy-3a92442b627c"&gt;"What is Developer Advocacy?"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/What-exactly-is-the-job-of-a-developer-advocate"&gt;"What exactly is the job of a developer advocate?"&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the end of this search, you will discover there's no singular answer. The shape of work depends on the organization's goals, the product offering, and existing expectations the community. For many Advocates, the answer comes into focus through the context of an individual role.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-tools-of-the-trade"&gt;
  &lt;/a&gt;
  New tools of the trade
&lt;/h3&gt;

&lt;p&gt;Consider for a moment every available resource for developers, then map the value for  developer advocacy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.imgur.com/RYqs6VI.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Od6cCCD5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nr95kgf6f49ekdppqd7l.png" alt="Dev Advocacy tools and channels"&gt;&lt;/a&gt;&lt;a href="https://i.imgur.com/RYqs6VI.png"&gt;📸 View in high resolution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From this mental model, the common characteristics of a developer advocate are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dev Advocates interact with developers as they are building applications&lt;/li&gt;
&lt;li&gt;Dev Advocates champion developer products through speaking, writing, and code&lt;/li&gt;
&lt;li&gt;Dev Advocates gather insights from the community to improve the product/platform&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After a decade in developer relations roles, I find these qualities worth contemplating:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dev Advocates are the first line of defense in protecting the developer experience&lt;/li&gt;
&lt;li&gt;Dev Advocates answer to the community as the true arbiter of their performance&lt;/li&gt;
&lt;li&gt;Dev Advocates must fully support the top-line business goals through action&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Dev Advocacy is a perfect role for lifelong learners who remain adaptable to change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#known-challenges-for-inperson-dev-advocacy"&gt;
  &lt;/a&gt;
  Known challenges for in-person dev advocacy
&lt;/h2&gt;

&lt;p&gt;In a vulnerable moment, fellow Developer Advocates will commiserate in the shifting nature of measuring the effectiveness of our craft. When public speaking on developer advocacy topics, there are common hurdles to overcome. &lt;/p&gt;

&lt;p&gt;For example, say you have the opportunity to present a technical topic to ~1k attendees at top-tier conference. You hope at least ~300 attendees connect with your topic in the first 5 minutes and possibly tweet about the talk if they are engaged. Throughout the talk, you provide shortened URLs for the audience to remember and ~150 folks follow through to the site. Afterwards, potentially ~50 attendees remember the link and check out your sample code. From evaluating the sample, almost 20 developers end up running the sample end-to-end. &lt;/p&gt;

&lt;p&gt;Practically, you're lucky to have a 2% to 5% activation rate from the stage presentation. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#global-access-to-developer-education"&gt;
  &lt;/a&gt;
  Global access to developer education
&lt;/h3&gt;

&lt;p&gt;On top of challenges when measuring a presentation's ROI, there's another factor which deserves acknowledgement: The need for equitable access to developer advocacy.&lt;/p&gt;

&lt;p&gt;Specifically, if you're presenting a developer keynote to a paid Bay Area conference, there are inherent gate-keeping factors at play:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Attendees work/live in the San Francisco OR they are flown by their business with travel expenses covered ($$$)&lt;/li&gt;
&lt;li&gt;Conference tickets are on average over $800 and this cost is also expensed or the fee is waived by friends of the conference organizers (both $$ and privileged access)&lt;/li&gt;
&lt;li&gt;The talk content is either exclusive to the paid attendees or is uploaded at some later point&lt;/li&gt;
&lt;li&gt;Attendees are able to spend days away from home without the caretaking duties other developers may have in the moment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since Developer Advocates tend to enjoy the perks that come with a travel-heavy lifestyle, the structural downsides of exclusive events are rarely discussed. It's time to rethink how we approach our jobs to better serve the primary consumers of our work: the developer community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#videofirst-approach-developer-engagement-is-now-measurable-at-scale"&gt;
  &lt;/a&gt;
  🍿 'Video-first' approach: Developer engagement is now measurable at scale
&lt;/h2&gt;

&lt;p&gt;During the pandemic, our team at Stripe launched a &lt;a href="https://youtube.com/stripedevelopers"&gt;developer-focused video channel&lt;/a&gt; (distinct from our company's main brand account) and began posting weekly how-to topics covering the fundamentals of our API, SDKs, and sample code. We put an emphasis on presenting as if we were directly talking with developers in person at a local meetup. Our team avoids the "Webinar"-style presentation and strives to maintain a Q&amp;amp;A dialog when teaching concepts through live streaming and &lt;a href="https://support.google.com/youtube/answer/9080341?hl=en"&gt;YouTube Premiere&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.imgur.com/bG7emC1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wxt5iwgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxattmguzus0biu8t85z.png" alt="Scaled dev advocacy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;

&lt;p&gt;Since last year, our community engagement now vastly exceeds our measurable goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Developers now ask hundreds of questions live and click through to our docs on a weekly basis&lt;/li&gt;
&lt;li&gt;We are reaching millions of developers annually with over 25% of the traffic coming from YouTube recommending our content&lt;/li&gt;
&lt;li&gt;Each month, we have tens of thousands of unique views accounting for thousands of hours watched&lt;/li&gt;
&lt;li&gt;Our audience is now spread across the world and evenly distributed between ages 18 to 64&lt;/li&gt;
&lt;li&gt;Analytics reveal which developer topics are the most captivating and where viewers drop off&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#so-what"&gt;
  &lt;/a&gt;
  So what?
&lt;/h3&gt;

&lt;p&gt;You may ask "&lt;em&gt;Why are you spouting these viewership stats?"&lt;/em&gt; and that &lt;em&gt;is&lt;/em&gt; the central point: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a developer advocate, the level of insights for who is consuming your technical content through video is a metrics goldmine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;More pointedly, these insights and feedback were previously impossible to fully gather from conference post-talk surveys. Beyond improved metrics, the increase in developer activity leads to an attributable rise in new product adoption. The more product launches we can support through developer livestreams and office hours, the more central our work is to the core business.&lt;/p&gt;

&lt;p&gt;In addition, we're now connecting at scale directly with our subscribers: Developers with laptops following along as we step through code line-by-line. This new connection is lightyears beyond what we could ever expect at in-person conferences with multiple tracks. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hybrid-approach-present-anywhere-then-edit-amp-repurpose-for-subscribers"&gt;
  &lt;/a&gt;
  Hybrid approach: Present anywhere then edit &amp;amp; re-purpose for subscribers
&lt;/h3&gt;

&lt;p&gt;Unless your product is exclusively geo-fenced to the Bay Area (😑), as a Developer Advocate you should fight to have your content made available to the widest addressable target audience of builders to benefit from the topics. &lt;/p&gt;

&lt;p&gt;Some basic suggestions for repurposing technical talks include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ask event organizers for permission to repost the talk for your developer audience channels&lt;/li&gt;
&lt;li&gt;Re-present the content in a livestream format and field questions as a team&lt;/li&gt;
&lt;li&gt;Edit the content for your long tail developer audience. Example: The "June developer meetup" with 3 speakers could get edited down to 3 compelling specific topics uploaded to YouTube&lt;/li&gt;
&lt;li&gt;Combine video and written content to support both styles of learning&lt;/li&gt;
&lt;li&gt;Participate in global online developer events where anyone can access&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Main point:&lt;/strong&gt; If you're making great developer content, don't limit who gets to consume and utilize your work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#developer-advocates-are-the-new-onscreen-talent"&gt;
  &lt;/a&gt;
  Developer Advocates are the new "On-screen talent"
&lt;/h2&gt;

&lt;p&gt;What do YouTube influencers, Peloton fitness instructors, political commentators, and developer advocates have in common?&lt;/p&gt;

&lt;p&gt;Our effectiveness correlates to our video fidelity. When we break down barriers to communicate clearly through broadcasting, we deliver the best version of ourselves and our work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.imgur.com/HsXpZn7.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MIJ-cbvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8l5g7wfu9ax1a9agg7mc.png" alt="Dev Advocacy Video Setup"&gt;&lt;/a&gt;&lt;a href="https://i.imgur.com/HsXpZn7.png"&gt;📸 View in high resolution&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-up-your-dev-advocacy-game"&gt;
  &lt;/a&gt;
  Step up your Dev Advocacy game:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;For bootstrapped startups and indie hackers:&lt;/strong&gt; My colleague &lt;a href="https://twitter.com/noopkat"&gt;Suz&lt;/a&gt; and I wrote a guide to up-leveling your remote work setup on a budget. &lt;a href="https://dev.to/stripe/remote-work-a-guide-to-ensuring-quality-video-conferencing-55fi"&gt;Read on dev.to&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;To all global developer platforms:&lt;/strong&gt; Professional-grade video gear for public-facing engineers is the new standard. If your team or role is presenting technical topics on behalf of a profitable developer offering, a single business trip's worth of expenses will cover a decent setup. High quality content deserves a high quality presentation layer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#join-the-party-industry-growth-and-the-sheer-volume-of-new-developer-advocacy-job-openings"&gt;
  &lt;/a&gt;
  🥂 Join the party: Industry growth and the sheer volume of new developer advocacy job openings
&lt;/h2&gt;

&lt;p&gt;Developer Advocates are no longer disadvantaged when outside of US coastal cities. Prior requirements for an advocate's physical location are rapidly fading away. If you are an engineer looking to help thousands of developers at scale, it's time to join our field of work. As mentioned earlier, global developer programs have seen the reach that comes with scaling beyond the traditional keynotes and straight into developers computers.&lt;/p&gt;

&lt;p&gt;Here are several globally-distributed Developer Advocacy programs hiring this year:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/martinwoodward"&gt;Martin Woodward&lt;/a&gt; (based in N. Ireland) is leading GitHub's efforts to &lt;a href="https://github.com/martinwoodward/devrel"&gt;hire new developer advocates&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/ASpittel"&gt;Ali Spittel&lt;/a&gt; (based in the Midwest) is hiring developer advocates &lt;a href="https://twitter.com/ASpittel/status/1362126098063056901"&gt;to join the AWS amplify team&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/leeerob"&gt;Lee Robinson&lt;/a&gt; (based in Iowa) is &lt;a href="https://twitter.com/leeerob/status/1395048045453119490"&gt;building a new dev relations team at Vercel&lt;/a&gt; working on Next.js&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/aoberoi"&gt;Ankur Oberoi&lt;/a&gt; and team just &lt;a href="https://twitter.com/ProductHunt/status/1393385899346518016"&gt;launched the new Notion API&lt;/a&gt; and are &lt;a href="https://www.notion.so/careers"&gt;hiring rapidly&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/tessak22"&gt;Tessa Kriesel&lt;/a&gt; (based in Texas) is tracking new advocacy roles over in the &lt;a href="https://www.devocate.com/devocate-for-developers/#jobs-in-developer-relations"&gt;Devocate Slack community&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;not to mention the countless developer advocate openings at &lt;a href="https://www.linkedin.com/jobs/view/marketplace-specialist-developer-advocate-at-zoom-2517744071?utm_campaign=google_jobs_apply&amp;amp;utm_source=google_jobs_apply&amp;amp;utm_medium=organic"&gt;Zoom&lt;/a&gt;, &lt;a href="https://www.linkedin.com/jobs/view/developer-advocate-at-cloudflare-2540024759"&gt;Cloudflare&lt;/a&gt;, &lt;a href="https://angel.co/company/plaid/jobs/1340210-developer-relations?utm_campaign=google_jobs_apply&amp;amp;utm_source=google_jobs_apply&amp;amp;utm_medium=organic"&gt;Plaid&lt;/a&gt;, &lt;a href="https://www.glassdoor.com/job-listing/developer-advocate-wix-JV_IC1132348_KO0,18_KE19,22.htm?jl=4043014229&amp;amp;utm_campaign=google_jobs_apply&amp;amp;utm_source=google_jobs_apply&amp;amp;utm_medium=organic"&gt;Wix&lt;/a&gt;, &lt;a href="https://boards.greenhouse.io/rasa/jobs/5117982002?utm_campaign=google_jobs_apply&amp;amp;utm_source=google_jobs_apply&amp;amp;utm_medium=organic"&gt;Rasa&lt;/a&gt;, &lt;a href="https://www.glassdoor.com/job-listing/developer-advocate-launchdarkly-JV_KO0,18_KE19,31.htm?jl=4036891028&amp;amp;utm_campaign=google_jobs_apply&amp;amp;utm_source=google_jobs_apply&amp;amp;utm_medium=organic"&gt;LaunchDarkly&lt;/a&gt;, &lt;a href="https://boards.greenhouse.io/airtable/jobs/4652024002?utm_campaign=google_jobs_apply&amp;amp;utm_source=google_jobs_apply&amp;amp;utm_medium=organic"&gt;Airtable&lt;/a&gt;, and many &lt;a href="https://www.google.com/search?q=developer+advocate+jobs"&gt;additional new roles&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;New ways to reach developers at scale, a growing audience of builders around the world, and a mission to measurably support builders makes this a perfect time to join our field of work. We are in the Golden Age of Developer Advocacy and it's just getting started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-plug-join-our-team-at-stripe"&gt;
  &lt;/a&gt;
  🔌 Quick plug: Join our team at Stripe!
&lt;/h3&gt;

&lt;p&gt;If this vision for scaled Developer Advocacy is appealing and you're comfortable with integrating APIs in web and/or mobile applications, please choose our Dev Advocacy team!&lt;/p&gt;

&lt;p&gt;In the next few months, our team is &lt;em&gt;tripling&lt;/em&gt; in size across Latin America, Europe, Asia, and North America. We're excited to support the community and meet developers wherever they are based.&lt;/p&gt;

&lt;p&gt;👉 For more details, check out our jobs site: &lt;a href="https://stripe.com/jobs/search?q=developer+advocate"&gt;Dev Advocacy roles at Stripe&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What makes for great Developer Advocacy? &lt;br&gt;
You'll know when you see it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.imgur.com/M5q2Xvn.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--138CSRo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emrhfefd2lb29jv177j6.png" alt="Developer Advocacy DA"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devrel</category>
      <category>writing</category>
      <category>devjournal</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>Conociendo Sass</title>
      <author>Francisco</author>
      <pubDate>Thu, 27 May 2021 21:00:36 +0000</pubDate>
      <link>https://dev.to/franciscode/conociendo-sass-444k</link>
      <guid>https://dev.to/franciscode/conociendo-sass-444k</guid>
      <description>&lt;h1&gt;
  &lt;a href="#aprendiendo-sass"&gt;
  &lt;/a&gt;
  &lt;center&gt;Aprendiendo Sass&lt;/center&gt;
&lt;/h1&gt;




&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--naI1QO07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.worldvectorlogo.com/logos/sass-1.svg"&gt;&lt;/center&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;
&lt;h2&gt;
  &lt;a href="#conociendo-sass"&gt;
  &lt;/a&gt;
  &lt;center&gt; Conociendo Sass &lt;/center&gt;
&lt;/h2&gt;

&lt;p&gt;Sass es un preprocesador de CSS inicialmente diseñado por Hampton Catlin y desarrollado por Natalie Weizenbaum.​​&lt;br&gt;
El cual nos permite usar caracteristicas presentes en lenguajes de programación, como Variables, Funciones, etc.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#instalaci%C3%B3n"&gt;
  &lt;/a&gt;
  &lt;center&gt;Instalación &lt;/center&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Hace un tiempo la instalación de Sass era bastante complicada...&lt;/p&gt;

&lt;p&gt;...¡Pero ya no! Sass se ha vuelto muy sencillo de instalar.&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;Nota: En esta guía obviamente utilizaremos un editor de código para llevar a la practica todo lo aprendido, en mi lugar utilizare &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; , pero eres libre de usar el que prefieras, ya sea &lt;a href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; , &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; , etc.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#paso-1"&gt;
  &lt;/a&gt;
  &lt;center&gt;Paso 1&lt;/center&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
El primer paso será ir a nuestro editor de código, como ya mencioné anteriormente, usaré visual studio code, este paso es muy intuitivo, simplemente abrimos el editor y listo.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SQKpS_YZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jd2ysckb0f1red8wu9v8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SQKpS_YZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jd2ysckb0f1red8wu9v8.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;


&lt;h3&gt;
  &lt;a href="#paso-2"&gt;
  &lt;/a&gt;
  &lt;center&gt;Paso 2&lt;/center&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
El segundo paso constará en abrir crear una carpeta y abrirla en visual studio code.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---b0EqvPm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8n8fzb2kfd0gaj7dqky0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---b0EqvPm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8n8fzb2kfd0gaj7dqky0.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Y una vez hecho eso simplemente arrastraremos la carpeta a nuestro editor de código.&lt;/p&gt;



&lt;p&gt;Tendremos lo siguiente:&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yMvNhEdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1p9gay4rzepyasdgavbj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yMvNhEdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1p9gay4rzepyasdgavbj.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;



&lt;p&gt;Daremos un click al icono de crear un archivo&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JMJDboQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qn1ogvdtdlmqybfgoz5q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JMJDboQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qn1ogvdtdlmqybfgoz5q.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;y lo llamaremos &lt;code&gt;main.sass&lt;/code&gt;&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--swh7xq7U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srrx7iuz6lpynu9ddhtu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--swh7xq7U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srrx7iuz6lpynu9ddhtu.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
 Ahora simplemente daremos click al archivo y ya podremos editarlo.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#paso-3"&gt;
  &lt;/a&gt;
  &lt;center&gt;Paso 3&lt;/center&gt;
&lt;/h3&gt;

&lt;p&gt;Luego de esto haremos la combinación de teclas &lt;code&gt;Ctrl + Ñ&lt;/code&gt;&lt;br&gt;
Con esto se abrira una terminal integrada en nuestro editor&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nota IMPORTANTISIMA: Tenemos que tener si o si instalado NodeJS para poder instalar sass, si no sabes donde instalarlo te lo dejo aqui &lt;a href="https://nodejs.org/es/download/"&gt;https://nodejs.org/es/download/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;Ahora simplemente (TENIENDO NODEJS INTALADO) pegamos el siguiente comando en la consola&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install -g sass&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;Enhorabuena!! Ya tenemos Sass instalado&lt;/p&gt;

&lt;p&gt;Muchas gracias por llegar hasta aqui!&lt;br&gt;
Estos articulos me toman bastante tiempo para escribirlos y redactarlos, muchas gracias por leer!&lt;br&gt;
Recuerda Seguirme!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://linktr.ee/franciscode"&gt;https://linktr.ee/franciscode&lt;/a&gt;&lt;/p&gt;




&lt;center&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7osOJy5j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://franciscode.netlify.app/img/logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7osOJy5j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://franciscode.netlify.app/img/logo.png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;/center&gt;

</description>
      <category>sass</category>
      <category>devweb</category>
      <category>frontend</category>
      <category>styles</category>
    </item>
    <item>
      <title>Why Lambda School is worth it</title>
      <author>Tara Timmerman</author>
      <pubDate>Thu, 27 May 2021 20:55:15 +0000</pubDate>
      <link>https://dev.to/taratimmerman/why-lambda-school-is-worth-it-3ddc</link>
      <guid>https://dev.to/taratimmerman/why-lambda-school-is-worth-it-3ddc</guid>
      <description>&lt;p&gt;Eight months ago, I worked as a customer service consultant and had nearly zero programming experience. This month, I had the opportunity to work remotely with a team of nine developers to build a full-stack web application for a real-world client: Family Promise. Yeah, my mind is blown too.&lt;/p&gt;

&lt;p&gt;Family Promise is a charitable organization that helps families experiencing homelessness and low-income families achieve lasting independence through community response. My team was part of the second Lambda School cohort that helped develop a Family Promise Service Tracking app. The project aims to offer our stakeholders a way to monitor and evaluate their impact and track their services on the go. As a new developer, this was a daunting task; I didn't want to let down my first client!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-bumpiest-bump-in-the-road"&gt;
  &lt;/a&gt;
  &lt;em&gt;The bumpiest bump in the road&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;I decided to work server-side and pair programmed with two teammates to implement new database and API features. The project was smooth until the front-end development team found a blocker in our service logs. At the time, the React application had to submit separate GET requests to three different database tables to display the necessary information.&lt;/p&gt;

&lt;p&gt;I realized the need for a new database model to export customized functions that integrate data from service entries, recipients, service types and status tables. The most difficult part of the implementation of the new service entry model was to find the correct SQL query to successfully join the tables and then convert the query into Knex. After some pair programming and help from our team lead, here is how we solved this problem:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// OLD CODE&lt;/span&gt;
&lt;span class="c1"&gt;// This old knex query is too simple now&lt;/span&gt;
&lt;span class="c1"&gt;// and has to be used for each individual table&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findAll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;knex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// NEW CODE&lt;/span&gt;
&lt;span class="c1"&gt;// This new knex query joins all needed tables in one call&lt;/span&gt;
&lt;span class="c1"&gt;// Efficiency at last!&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findAll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;knex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;service_entries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftJoin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;recipients&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;service_entries.recipient_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;recipients.id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightJoin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;service_types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;service_entries.service_type_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;service_types.id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightJoin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;statuses&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;service_entries.status_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;statuses.id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;knex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;service_entries.*, to_json(recipients.*) as recipient, to_json(service_types.*) as service_type, to_json(statuses.*) as status&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;service_entries.id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;recipients.id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;service_types.id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;statuses.id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#i-ship-it"&gt;
  &lt;/a&gt;
  &lt;em&gt;I ship it&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;It is safe to say that the team successfully met the MVP roadmap in four weeks.&lt;br&gt;
Here's a complete list of what we've shipped:&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#1-tabletfirst"&gt;
  &lt;/a&gt;
  1. Tablet-First:
&lt;/h6&gt;

&lt;p&gt;The application supports tablet screens for data entry and general application use and users can easily use the application on a computer.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#2-service-management"&gt;
  &lt;/a&gt;
  2. Service Management:
&lt;/h6&gt;

&lt;p&gt;Users can log a service into the system, check service logs, and edit or delete a service log.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#3-recipients"&gt;
  &lt;/a&gt;
  3. Recipients:
&lt;/h6&gt;

&lt;p&gt;Users can add a service recipient to the system, search for recipients, and edit or delete a recipient.&lt;br&gt;
Users can also track recipients on an individual and household basis.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#4-metrics"&gt;
  &lt;/a&gt;
  4. Metrics:
&lt;/h6&gt;

&lt;p&gt;I built four simple endpoints and queries that fetch the following metrics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amount of unique service recipients&lt;/li&gt;
&lt;li&gt;Amount of logged services&lt;/li&gt;
&lt;li&gt;New recipients created in the last 7 days&lt;/li&gt;
&lt;li&gt;New services completed in the last 7 days&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#it-was-an-excellent-ride-chaps"&gt;
  &lt;/a&gt;
  &lt;em&gt;It was an excellent ride, chaps&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;I am thrilled about where this app will go. The stakeholder’s main vision is to have a full-screen, interactive map for a Family Promise employee or volunteer to monitor and evaluate their service analytics. My team spent significant time laying down the foundations and designing future possible implementations for the next step in metrics, and I am pleased with our work.&lt;/p&gt;

&lt;p&gt;Sadly, our time to work together on this project has come to a close. I am so grateful for the opportunity to offer the 950 hours of coding experience I gained during my time at Lambda School to Family Promise, and I hope my contribution brings them closer to their goal of changing the lives of one million children by 2030. I know that developing a service tracking application teaches relevant skills for professional web development, and I look forward to applying this knowledge to future projects.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>lambdaschool</category>
    </item>
    <item>
      <title>Top 5 DEV Comments of the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 27 May 2021 20:25:08 +0000</pubDate>
      <link>https://dev.to/devteam/top-5-dev-comments-of-the-past-week-9o6</link>
      <guid>https://dev.to/devteam/top-5-dev-comments-of-the-past-week-9o6</guid>
      <description>&lt;p&gt;&lt;em&gt;This is a weekly roundup of awesome DEV comments that you may have missed.  You are welcome and encouraged to boost posts and comments yourself using the &lt;strong&gt;&lt;a href="https://dev.to/t/bestofdev"&gt;#bestofdev&lt;/a&gt;&lt;/strong&gt; tag.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sometimes it just takes encouragement from a friend and some low-pressure fun to remind us why we love coding. Keep us posted on your journey, &lt;a class="mentioned-user" href="https://dev.to/biffbaff64"&gt;@biffbaff64&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/biffbaff64"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zmVVZlGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XiGKCIWA--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/163894/94a4c450-7046-4457-a4b0-c81b7a875d35.jpg" alt="biffbaff64 profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/biffbaff64"&gt;
        &lt;span class="comment-username"&gt;Richard Ikin&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/biffbaff64/comment/1eknn" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    May 21
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I rediscovered my love of coding again!&lt;br&gt;
I've been struggling with burn-out for a couple of years now, ever since I was forced to give up coding professionally for health reasons. I started developing a few java games for android but, after a succession of failed projects, I came very close to giving up completely. &lt;br&gt;
Two weeks ago, a friend suggested a do some messing around with C++, a language I haven't used since the early 1990s! I'll admit it's a challenge as I haven't used pointers etc for a very long time, but I am officially hooked! &lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;No &lt;a href="https://dev.to/afif/another-100-css-loaders-for-your-next-project-352l"&gt;thread&lt;/a&gt; on DEV would be complete without a mention of cats, &lt;a class="mentioned-user" href="https://dev.to/manuthecoder"&gt;@manuthecoder&lt;/a&gt;
 😉 &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/manuthecoder"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--AR0aXKva--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hVo3iwwI--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/567979/429330f0-1160-4257-9afa-12a6a9901c75.png" alt="manuthecoder profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/manuthecoder"&gt;
        &lt;span class="comment-username"&gt;𝙼𝚊𝚗𝚞𝚃𝚑𝚎𝙲𝚘𝚍𝚎𝚛&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/manuthecoder/comment/1en99" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    May 25
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;You. Are. So. Good. At. CSS!&lt;/p&gt;

&lt;p&gt;But you didn't include this loader: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--217nouXX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/8f7a28e62f8242b264c8a39ba8bea261/tenor.gif%3Fitemid%3D15922897" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3k6N-Wj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--217nouXX--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://media1.tenor.com/images/8f7a28e62f8242b264c8a39ba8bea261/tenor.gif%253Fitemid%253D15922897" alt="Loading Cat GIF - Loading Cat Thinking - Discover &amp;amp; Share GIFs"&gt;&lt;/a&gt;&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Nice &lt;a href="https://dev.to/devteam/what-was-your-win-this-week-3lce"&gt;win&lt;/a&gt;, &lt;a class="mentioned-user" href="https://dev.to/annaspies"&gt;@annaspies&lt;/a&gt;
! Sounds like the team could use a long weekend!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/annaspies"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ugjin9WL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3ELQKrRg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/114867/b741231c-1c7f-4139-9cbc-d6223fd9675b.jpg" alt="annaspies profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/annaspies"&gt;
        &lt;span class="comment-username"&gt;Anna&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/annaspies/comment/1ekof" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    May 21
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;This week our entire build process went down because of a dependency of a dependency of a dependency, and I learned just how much of a house of cards npm is. Luckily, I can count that experience as a win because I was able to get in touch with that dependency's maintainer, send him as much info as I could about the error I (and by now some other people) were seeing, and he got a fix out within a couple of hours. It felt great to contribute to someone else's OSS project and help fix a bug that could have potentially derailed a ton of other apps like mine.&lt;/p&gt;

&lt;p&gt;...there's probably a blog post about that I could write :)&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I learned a ton from &lt;a href="https://dev.to/codemouse92/six-things-you-thought-senior-devs-did-but-we-don-t-3k6e"&gt;this post&lt;/a&gt; and your comment, &lt;a class="mentioned-user" href="https://dev.to/aeiche"&gt;@aeiche&lt;/a&gt;
! Thanks for sharing your perspective on being a team lead!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/aeiche"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--XPKz7CUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9_2bmba4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/3156/262515.jpeg" alt="aeiche profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/aeiche"&gt;
        &lt;span class="comment-username"&gt;Aaron Eiche&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/aeiche/comment/1enf5" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    May 25
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;My current title is the lofty "Lead Software Engineer" and I can say that these items all apply to me as well, especially that last one. To me, the difference between the Junior and Senior engineers is almost exclusively non-technical in nature. There are a few practices that make a difference  in terms of performance, and reducing errors, but for the most part Senior-developership is matter of leading, encouraging, and supporting. It's all the meta-work around software development. &lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;
 

&lt;p&gt;This tip feels applicable to both &lt;a href="https://dev.to/hellonehha/aws-services-must-for-front-end-developers-part-1-5g0d"&gt;AWS&lt;/a&gt; and personal finance, &lt;a class="mentioned-user" href="https://dev.to/ponikar"&gt;@ponikar&lt;/a&gt;
. 😁 &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/ponikar"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--B6yYx1EF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--X3JA2hUo--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/602686/ccd3d87e-b207-4ff7-8846-ceb1cc965348.jpeg" alt="ponikar profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/ponikar"&gt;
        &lt;span class="comment-username"&gt;Ponikar&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/ponikar/comment/1ek8g" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    May 21
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Here is a tip for avoiding unexpected bills from AWS. Always make a budget and take action according to it. i.e You can make a budget of 5$ per month and after the threshold reach, you can easily trigger some actions like stopping services or receive notiifications.&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;See you next week for more great comments ✌&lt;/p&gt;

</description>
      <category>bestofdev</category>
    </item>
    <item>
      <title>Best Practices for REST API interface design</title>
      <author>Ricardo Borges</author>
      <pubDate>Thu, 27 May 2021 20:23:02 +0000</pubDate>
      <link>https://dev.to/ricardo93borges/some-practices-to-design-restful-apis-interfaces-5a5i</link>
      <guid>https://dev.to/ricardo93borges/some-practices-to-design-restful-apis-interfaces-5a5i</guid>
      <description>&lt;p&gt;This post contains some notes about REST and best practices that I follow to design RESTful APIs, it will focus mainly on Uniform interface constraint.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rest"&gt;
  &lt;/a&gt;
  REST
&lt;/h2&gt;

&lt;p&gt;REST (REpresentational State Transfer) is an architectural approach to design web services presented by Roy Fielding in 2000 in his &lt;a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf"&gt;dissertation&lt;/a&gt;. A RESTful API is an API that satisfies the REST constraints.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  Constraints
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Client-server -&lt;/strong&gt; Separate client application and server application, It’s about separation of concerns, by doing this we improve portability and scalability because it allows those components to evolve independently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stateless -&lt;/strong&gt; Each request from a client to server must contain all necessary information, including authentication details, the server cannot store anything about requests, sessions, history, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cache -&lt;/strong&gt; When possible responses data have to be cacheable, clients have the right to reuse responses data later. This will improve efficiency and scalability, the trade-off, however, is that it can decrease reliability if the cached data differs significantly from the data in the server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Uniform interface -&lt;/strong&gt; Define the standards of the API interface and follow it, for example, identification of resources and response messages. If it was decided to pluralize resources name on URI, follow this standard in all URIs, it will improve the readability and maintainability.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Layered system -&lt;/strong&gt; The system has to be composed of components in hierarchical layers, each component is only aware of the immediate layer with which they are interacting. For example, a system can have a data layer, cache layer, security layer, etc. And all those layers should not affect the communication between the server and client.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Code-on-demand -&lt;/strong&gt; This is the only optional constraint, the server will provide static representations of resources, but when requested it can send executable code.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this post, I will show some best practices to achieve a uniform interface, the constraints 1 and 2 are pretty straightforward, while the other constraints have many ways to satisfy and cover them is out of the scope of this post. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-practices-to-design-an-api-uniform-interface"&gt;
  &lt;/a&gt;
  Best practices to design an API uniform interface
&lt;/h2&gt;

&lt;p&gt;REST is not limited to but is frequently applied on web applications and leverages HTTP protocol. A RESTful API will expose your system’s resources via a collection of Uniform Resource Identifiers (URIs). Responses will be in JSON or XML, you can provide both formats if you want, in that case, the client will choose using the content-type header. Once defined the system resources, it's time to choose a resource naming strategy and combine it with HTTP Methods to represent operations on those resources. &lt;/p&gt;

&lt;p&gt;Moreover is wise to define standards for responses: what will be the response body in case of failure? Will it have a message describing the error, only a code for reference, or both? And in case of success, what data of resources will be presented? What HTTP Response Codes will be used in each response? These questions have to be addressed in the API design phase.&lt;/p&gt;

&lt;p&gt;Let’s use a music streaming service as an example, among other resources it has Artists, Albums, and tracks, let’s see some practices to define the URIs:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-nouns-to-represent-resource-not-actions"&gt;
  &lt;/a&gt;
  Use nouns to represent resource, not actions
&lt;/h3&gt;

&lt;p&gt;HTTP Methods will indicate the action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/** Do **/&lt;/span&gt;
&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;artists&lt;/span&gt;

&lt;span class="cm"&gt;/** Don't **/&lt;/span&gt;
&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;artists&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pluralize-resources"&gt;
  &lt;/a&gt;
  Pluralize resources
&lt;/h3&gt;

&lt;p&gt;The rationale here is that we are dealing with collections of resources.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/** Do **/&lt;/span&gt;
&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;albums&lt;/span&gt;

&lt;span class="cm"&gt;/** Don't **/&lt;/span&gt;
&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;album&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#demonstrate-the-hierarchical-relationship-between-resources"&gt;
  &lt;/a&gt;
  Demonstrate the hierarchical relationship between resources
&lt;/h3&gt;

&lt;p&gt;This strategy improves comprehension.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;artists&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/album&lt;/span&gt;&lt;span class="err"&gt;s
&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;artists&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/albums/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/track&lt;/span&gt;&lt;span class="err"&gt;s
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Those URIs indicate that artists have a collection of albums that in turn have a collection of tracks. This is not required, often you will find APIs that don’t use this format, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;albums&lt;/span&gt;
&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;albums&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/track&lt;/span&gt;&lt;span class="err"&gt;s
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may find APIs that provide both formats. Also note that we are not using trailing forward slash, because it doesn’t add semantic value, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;artists&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/albums/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#other-tips-to-improve-readability"&gt;
  &lt;/a&gt;
  Other tips to improve readability
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use hyphens ( - ) instead of underscores ( _ )&lt;/li&gt;
&lt;li&gt;Use only lowercase letters&lt;/li&gt;
&lt;li&gt;Don’t use file extensions&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#use-http-methods-to-indicate-operations-on-resources"&gt;
  &lt;/a&gt;
  Use HTTP methods to indicate operations on resources
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Most common HTTP Methods&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;POST -&lt;/strong&gt; Create resources&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GET -&lt;/strong&gt; Read resources&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PUT -&lt;/strong&gt; Update or replace resources&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PATCH -&lt;/strong&gt; Modify resources&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DELETE -&lt;/strong&gt; Delete resource&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/** Get artists **/&lt;/span&gt;
&lt;span class="nx"&gt;GET&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;artists&lt;/span&gt;

&lt;span class="cm"&gt;/** Get a particular artist **/&lt;/span&gt;
&lt;span class="nx"&gt;GET&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;artists&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/** Create a track **/&lt;/span&gt;
&lt;span class="nx"&gt;POST&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;artists&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/albums/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/track&lt;/span&gt;&lt;span class="err"&gt;s
&lt;/span&gt;
&lt;span class="cm"&gt;/** Update an album **/&lt;/span&gt;
&lt;span class="nx"&gt;PUT&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;artists&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/albums/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/** Delete a track **/&lt;/span&gt;
&lt;span class="nx"&gt;DELETE&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;artists&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/albums/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/tracks/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#use-appropriate-http-response-codes-on-responses"&gt;
  &lt;/a&gt;
  Use appropriate HTTP Response Codes on responses
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Most common HTTP Response Codes&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;200 OK -&lt;/strong&gt; Indicate success&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;201 Created -&lt;/strong&gt; Successful creation occurred (via POST or PUT)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;204 No Content -&lt;/strong&gt; Indicate success without a response but, commonly used for DELETE and PUT requests&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;400 Bad Request -&lt;/strong&gt; Indicate something is not right with the request, for example, missing information or invalid data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;401 Unauthorized -&lt;/strong&gt; Indicates invalid authentication credentials.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;403 Forbidden -&lt;/strong&gt; User not authorized to perform the operation&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;404 Not found -&lt;/strong&gt; Resource not found&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;405 Method not allowed -&lt;/strong&gt; Indicates URL exists, but HTTP method is not applicable&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;500 Internal error -&lt;/strong&gt; Indicates the server encountered an error and don’t know how to handle&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Many of those practices described here came from reading about, developing, integrating with, and reading APIs documentations. I think that following them is a good way to create a concise and coherent API interface.&lt;/p&gt;

&lt;p&gt;This post just scratched the surface, there other related topics worth taking a look at, such as caching, compression, security, versioning, and a lot more. For a more in-depth study I recommend reading the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf"&gt;Architectural Styles and the Design of Network-based Software Architectures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.restapitutorial.com/index.html"&gt;Learn REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design"&gt;RESTful web API design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://restfulapi.net/"&gt;REST API Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also is useful to look at how other APIs was designed, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/rest/reference"&gt;GitHub API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.spotify.com/documentation/web-api/reference/"&gt;Spotfy API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.forem.com/api/"&gt;DEV API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rest</category>
      <category>restful</category>
      <category>api</category>
      <category>tips</category>
    </item>
    <item>
      <title>How CSS is parsed on the browser?</title>
      <author>Swastik Yadav</author>
      <pubDate>Thu, 27 May 2021 20:12:34 +0000</pubDate>
      <link>https://dev.to/swastikyadav/how-css-is-parsed-on-the-browser-5h7n</link>
      <guid>https://dev.to/swastikyadav/how-css-is-parsed-on-the-browser-5h7n</guid>
      <description>&lt;p&gt;We all have used CSS to build beautiful and responsive webpages. But do you know:&lt;/p&gt;

&lt;p&gt;How browser parses the CSS?&lt;br&gt;
How CSS renders the style?&lt;br&gt;
How layout of the page is decided?&lt;/p&gt;

&lt;p&gt;In this post I will try to answer the above questions in a simple manner.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-is-parsed-on-the-browser-in-3-steps"&gt;
  &lt;/a&gt;
  CSS is parsed on the browser in 3 steps.
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Resolve conflicting CSS declarations.&lt;/li&gt;
&lt;li&gt;Process final computed CSS values.&lt;/li&gt;
&lt;li&gt;Visual Formatting Model.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is a complete flow of these 3 steps.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IA88MxJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E2PI8oKWYAAk44B%3Fformat%3Dpng%26name%3Dsmall" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IA88MxJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E2PI8oKWYAAk44B%3Fformat%3Dpng%26name%3Dsmall" alt="how css is parsed on the v=browser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's understand each step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-resolve-conflicting-css-declarations"&gt;
  &lt;/a&gt;
  1 Resolve Conflicting CSS declarations.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Different stylesheets are combined together.&lt;/li&gt;
&lt;li&gt;Resolving conflicts when more than one rule is applied to a certain element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For ex: Which color to apply when defined twice for the same element.&lt;/p&gt;

&lt;p&gt;Here Cascade &amp;amp; Specificity is at play.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ILRFMdo9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E2PLPGFXsAoeTT7%3Fformat%3Djpg%26name%3Dsmall" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ILRFMdo9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E2PLPGFXsAoeTT7%3Fformat%3Djpg%26name%3Dsmall" alt="css-specificity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-processing-values"&gt;
  &lt;/a&gt;
  2 Processing Values
&lt;/h2&gt;

&lt;p&gt;All relative units (%, em, rem, vh, vw) are finally converted to absolute unit, pixels (px).&lt;/p&gt;

&lt;p&gt;At this phase, all CSS values become computed values not the specified values.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nzqWLdqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E2PRkJzXsAUzHnR%3Fformat%3Djpg%26name%3Dmedium" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nzqWLdqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E2PRkJzXsAUzHnR%3Fformat%3Djpg%26name%3Dmedium" alt="CSS relative value conversion to px"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-the-visual-formatting-model"&gt;
  &lt;/a&gt;
  3 The visual formatting model.
&lt;/h2&gt;

&lt;p&gt;This is the algorithm that calculates boxes &amp;amp; determines the layout of these boxes, for each element in the render tree, to determine the page's final layout.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j8y1IEV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E2PTmXoWEA0n-5k%3Fformat%3Dpng%26name%3D900x900" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j8y1IEV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E2PTmXoWEA0n-5k%3Fformat%3Dpng%26name%3D900x900" alt="visual-formatting-model-css"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;So, that's how CSS is parsed on the browser. If you enjoyed this post then consider engagin with the originall post on &lt;a href="https://twitter.com/swastikJsDev/status/1397195835365023749?s=20"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, &lt;a href="https://twitter.com/swastikjsdev"&gt;follow me there&lt;/a&gt;, I keep sharing stuff on full-stack web development and design.&lt;/p&gt;

&lt;p&gt;Thank You!&lt;/p&gt;

</description>
      <category>css</category>
      <category>browser</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>An alternative way to integrate with Slack using Node-RED</title>
      <author>Ignacio Mattos</author>
      <pubDate>Thu, 27 May 2021 20:04:38 +0000</pubDate>
      <link>https://dev.to/cloudx/an-alternative-way-to-integrate-with-slack-using-node-red-4m7k</link>
      <guid>https://dev.to/cloudx/an-alternative-way-to-integrate-with-slack-using-node-red-4m7k</guid>
      <description>&lt;p&gt;Do you want to make an integration with &lt;em&gt;Slack&lt;/em&gt;?&lt;br&gt;
Do you already know &lt;a href="https://nodered.org/"&gt;&lt;em&gt;Node-RED&lt;/em&gt;&lt;/a&gt; but the solutions that appear in the documentation and the tutorials are not working?&lt;/p&gt;

&lt;p&gt;I’ve been there and I passed through that.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#context"&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#p&amp;amp;c"&gt;Pros and cons using &lt;em&gt;Node-RED&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#simplerNode"&gt;Using a simpler node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="context"&gt;Context&lt;/h2&gt;

&lt;p&gt;A few weeks ago I started working in a &lt;em&gt;Slack&lt;/em&gt; chatbot which should answer some questions. The idea was good and the tool that was suggested to me to solve this - we talk about &lt;em&gt;Node-RED&lt;/em&gt; - has a lot of examples on the web where it actually works.&lt;br&gt;
But for some reason they didn’t work for me. I don’t know if the solutions proposed on the web are outdated or if I’ve been missing something important (of course this is something probable). The thing here is that, as developers, we are supposed to either reuse or to create new solutions.&lt;/p&gt;

&lt;p&gt;And after a while, I finally managed to connect with the Slack API, but not in the way it was supposed to according to the doc.&lt;/p&gt;

&lt;p&gt;In this post I’m going to show you how I solved this out hoping this might be reusable for other similar scenarios.&lt;/p&gt;

&lt;h2 id="p&amp;amp;c"&gt;Pros and cons using &lt;em&gt;Node-RED&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Something really helpful about &lt;em&gt;Node-RED&lt;/em&gt; is that it’s really worth it as it saves a lot of time that you would spend writing down every function you need. There’s a pile of useful nodes that facilitate the integration with external APIs.&lt;/p&gt;

&lt;p&gt;The problem is that once you let the app manage your code, you’ll start wondering what is actually occurring and how things happen.&lt;br&gt;
Leaving aside the annoying or not this could be, the big problem will show as the bugs appear and you don’t know what the node function is doing, so it is double tedious to fix them.&lt;br&gt;
I mean, it is a problem to don’t know if you are missing a semicolon or if the auth token is wrong.&lt;/p&gt;

&lt;p&gt;That is exactly what happened and what pushed me to find an alternative solution to &lt;a href="https://flows.nodered.org/node/node-red-contrib-slack"&gt;&lt;em&gt;slack-rm&lt;/em&gt; node&lt;/a&gt; or the &lt;a href="https://flows.nodered.org/node/node-red-contrib-slackbot"&gt;&lt;em&gt;slackbot listen&lt;/em&gt;&lt;/a&gt;, which were the ones proposed everywhere I searched for.&lt;/p&gt;

&lt;h2 id="simplerNode"&gt;Using a simpler node&lt;/h2&gt;

&lt;p&gt;There’s a node called &lt;em&gt;http in&lt;/em&gt; which listens to API calls. The advantage of using this one is that we can directly test the endpoint services using either &lt;strong&gt;curl&lt;/strong&gt; or &lt;strong&gt;postman&lt;/strong&gt;. This lets you know if you have an error in the request, I mean, before adding some logic.&lt;/p&gt;

&lt;p&gt;Let me show you how to set it up:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D9dDsH1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypeif5lb6gpy8w9m9yuo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D9dDsH1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypeif5lb6gpy8w9m9yuo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can test this from outside the app with the &lt;strong&gt;debug&lt;/strong&gt; node, using &lt;code&gt;curl -X POST http://localhost:1880/postmessage&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The next step here is using a &lt;em&gt;function&lt;/em&gt; node, in which we’ll set the headers and body of the request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BOT_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;xoxb-...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CHANNEL_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your_channel_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Authorization&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;BOT_TOKEN&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json; charset=utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;channel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CHANNEL_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is finally working&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You’ll find the &lt;strong&gt;BOT_TOKEN&lt;/strong&gt; in &lt;a href="https://api.slack.com/apps"&gt;Slack apps settings&lt;/a&gt;. But the &lt;strong&gt;CHANNEL_ID&lt;/strong&gt; is something that you’ll be able to obtain after reading this post ;)&lt;/p&gt;

&lt;p&gt;After setting this up, we can send a request to the &lt;a href="https://api.slack.com/methods"&gt;&lt;em&gt;Slack&lt;/em&gt; API&lt;/a&gt;. If you didn’t do this yet, remember that you must set your bot’s permissions to let it use the API methods. Otherwise, no method will work.&lt;/p&gt;

&lt;p&gt;For this use the &lt;em&gt;http request node&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cquseSi0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0zu628h5v12z4avq31n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cquseSi0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0zu628h5v12z4avq31n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we add the &lt;em&gt;http response&lt;/em&gt; node so we can have the response in the console.&lt;br&gt;
The complete flow should seem like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xr1hC98m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc6gpzz3aexxatpqnint.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xr1hC98m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc6gpzz3aexxatpqnint.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After calling the endpoint we should receive the response in the bot chat as a formatted &lt;strong&gt;“This is finally working”&lt;/strong&gt; message. To change that, you only need to modify the &lt;strong&gt;text&lt;/strong&gt; at the request body, either in the app or in the call.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is just a very first step in the general task, but I wanted to share it because I think that &lt;em&gt;Node-RED&lt;/em&gt; is a good tool to make integrations with external APIs, but also it can get confusing when tuning it in at first.&lt;/p&gt;

&lt;p&gt;I think that something useful after this example is that, most of the time, I guess I’d rather have smaller functions that make it clear to see what I am doing instead of using those in which we can’t see the code in the back but should solve the problems at once.&lt;/p&gt;




&lt;p&gt;I'd like to thank to &lt;a class="mentioned-user" href="https://dev.to/lucasota"&gt;@lucasota&lt;/a&gt;
 and &lt;a class="mentioned-user" href="https://dev.to/navarroaxel"&gt;@navarroaxel&lt;/a&gt;
 for the tips and the reviews which have been helping me to improve my posts.&lt;/p&gt;

</description>
      <category>nodered</category>
      <category>javascript</category>
      <category>slack</category>
      <category>chatbot</category>
    </item>
    <item>
      <title>X-headers, what and why?</title>
      <author>Jordan Finneran</author>
      <pubDate>Thu, 27 May 2021 19:59:42 +0000</pubDate>
      <link>https://dev.to/jordanfinners/x-headers-what-and-why-jd</link>
      <guid>https://dev.to/jordanfinners/x-headers-what-and-why-jd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="#intro"&gt;Intro&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#x-content-type-options"&gt;X-Content-Type-Options&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#x-xss-protection"&gt;X-XSS-Protection&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#x-frame-options"&gt;X-Frame-Options&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#summary"&gt;Summary&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Continuing on from my previous blog about &lt;a href="https://jordanfinners.dev/blogs/website-security-week"&gt;website security week&lt;/a&gt;, we're going to talk about a series of &lt;code&gt;X-&lt;/code&gt; security headers.&lt;/p&gt;

&lt;p&gt;These are set as headers on your site when it is served up, let's dive in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#xcontenttypeoptions"&gt;
  &lt;/a&gt;
  X-Content-Type-Options &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This header indicates that the browser should not try and sniff the type of the file served up. Sniffing of the file type would mean the browser modifying the &lt;code&gt;Content-Type&lt;/code&gt; header that is returned from the server.&lt;/p&gt;

&lt;p&gt;Sniffing the file content type could lead to non executable files being made executable, this could lead to bad actors injecting executable code into normal files and could lead to vulnerabilities.&lt;/p&gt;

&lt;p&gt;It's best not to let the browser sniff the code.&lt;/p&gt;

&lt;p&gt;Recommended setting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;X-Content-Type-Options: nosniff
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read about it more on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options"&gt;Modzilla&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#xxssprotection"&gt;
  &lt;/a&gt;
  X-XSS-Protection &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This header has mostly been superseeded by the Content Security Policy, however its still useful for old browsers.&lt;br&gt;
This header can be set so browsers detect XSS (Cross Site Scripting) and block loading of resources once a Cross Site Scripting attack has been detected.&lt;/p&gt;

&lt;p&gt;Recommended setting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;X-XSS-Protection: 1; mode=block
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read about it more on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection"&gt;Modzilla&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#xframeoptions"&gt;
  &lt;/a&gt;
  X-Frame-Options &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This header has mostly been superseeded by the Content Security Policy, however its still useful for old browsers.&lt;/p&gt;

&lt;p&gt;This indicates if the site can be loaded in a &lt;code&gt;&amp;lt;frame&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;.&lt;br&gt;
Use this header to ensure you site and content cannot be embedded in someone elses site, this is commonly referred to click jacking attack.&lt;/p&gt;

&lt;p&gt;Recommended setting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;X-Frame-Options: DENY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read about it more on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options"&gt;Modzilla&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In summary, setting a few additional headers when serving up your site can really improve the security of your site. It reduces the amount of attack surface there is for attackers and prevent common attacks on websites.&lt;/p&gt;

&lt;p&gt;Set those headers now!&lt;/p&gt;

&lt;p&gt;Happy Building!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>security</category>
    </item>
    <item>
      <title>How to use GitHub actions and Contentful webhooks to show your latest blog posts on your GitHub profile README</title>
      <author>Salma Alam-Naylor</author>
      <pubDate>Thu, 27 May 2021 19:55:16 +0000</pubDate>
      <link>https://dev.to/whitep4nth3r/how-to-use-github-actions-and-contentful-webhooks-to-show-your-latest-blog-posts-on-your-github-profile-readme-5adc</link>
      <guid>https://dev.to/whitep4nth3r/how-to-use-github-actions-and-contentful-webhooks-to-show-your-latest-blog-posts-on-your-github-profile-readme-5adc</guid>
      <description>&lt;p&gt;If you push code to GitHub and share it with the public, chances are that someone will stumble across your GitHub profile. Since the launch of the &lt;a href="https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme"&gt;GitHub profile README&lt;/a&gt; in 2020, more and more people are finding creative ways to showcase their personal brand through this developer-centric medium.&lt;/p&gt;

&lt;p&gt;My own GitHub profile README is constantly evolving and I always like to find new ways to showcase what I'm doing on other channels. In this post, I'll show you how I generate a list of recent posts from &lt;a href="https://whitep4nth3r.com/blog/whitep4nth3r.com"&gt;whitep4nth3r.com&lt;/a&gt; on my GitHub profile README with &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;, and how I keep it up to date each time I publish a new post with a &lt;a href="https://www.contentful.com/developers/docs/concepts/webhooks/"&gt;webhook in Contentful&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to jump straight to the code, &lt;a href="https://github.com/whitep4nth3r/whitep4nth3r/blob/main/.github/workflows/build-readme.yml"&gt;view my GitHub actions workflow on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post assumes you've already added a GitHub profile README to your GitHub account — &lt;strong&gt;and your blog has a public RSS feed&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-github-action"&gt;
  &lt;/a&gt;
  Setting up the GitHub Action
&lt;/h2&gt;

&lt;p&gt;If you're new to GitHub Actions, the good news is that the GitHub UI offers you a handy way to set up your first workflow right from your browser.&lt;/p&gt;

&lt;p&gt;Navigate to your README profile repository and click on the 'Actions' button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MRbFafph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dk6d4rt9tol58h0tofcz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MRbFafph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dk6d4rt9tol58h0tofcz.png" alt="A screenshot of the GitHub repository UI highlighting the position of the Actions button."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub will offer you some template options for workflows, but we're going to start afresh.&lt;/p&gt;

&lt;p&gt;If this is your first GitHub action, click on 'set up a workflow yourself'.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8skxMPRe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/381ylfkdj9tknc16o366.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8skxMPRe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/381ylfkdj9tknc16o366.png" alt="A screenshot of the GitHub UI showing a link to set up a workflow yourself after clicking on the Actions tab in the UI."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will prepare a commit to add the necessary directories (.github/workflows) and the action &lt;code&gt;.yml&lt;/code&gt; file to your README repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yo_oZZp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3heta4l0ajk99jbj3yzf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yo_oZZp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3heta4l0ajk99jbj3yzf.png" alt="A screenshot of the GitHub action UI, showing the directories and file added for the action."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Name your &lt;code&gt;.yml&lt;/code&gt; file anything you like. I chose &lt;strong&gt;build-readme&lt;/strong&gt;. The next step is to replace the boilerplate code you see in the editor below with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Latest blog post workflow&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;repository_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;contentful.deploy&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;update-readme-with-blog&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update this repo's README with latest blog posts&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;jakejarvis/wait-action@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;5m"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gautamkrishnar/blog-post-workflow@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;feed_list&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;https://whitep4nth3r.com/feed.xml"&lt;/span&gt;
          &lt;span class="na"&gt;commit_message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Updated&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;README&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;with&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;latest&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;blog&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;posts"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's take a look at what's happening here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;name:&lt;/code&gt; this is the name of the action which will appear in the GitHub Actions UI&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;on:&lt;/code&gt; this is the parameter that specifies the list of conditions under which the action will be triggered&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;repository_dispatch:&lt;/code&gt; this is a way to send named events to your GitHub repository with a data payload — we'll configure this in the Contentful webhook&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;types:&lt;/code&gt; this array contains the names of the webhooks that the GitHub action will listen for (you can add more than one!)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;jobs:&lt;/code&gt; this contains a list of jobs that the action will perform&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;update-readme-with-blog:&lt;/code&gt; this is the action we're building&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;runs-on:&lt;/code&gt; this specifies which Docker image is needed for the action to run in the container on GitHub&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;steps:&lt;/code&gt; a list of instructions to perform the job&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;uses:&lt;/code&gt; the action code repository required for the following steps&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;with:&lt;/code&gt; the parameters required for the code pulled in via the uses: parameter above&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#waiting-for-5-minutes"&gt;
  &lt;/a&gt;
  Waiting for 5 minutes?
&lt;/h3&gt;

&lt;p&gt;I host my blog on Vercel, which is pre-rendered into static HTML via a webhook in Contentful — each time I publish a new post. To ensure that the blog and RSS feed finish building before the blog post list is generated, I am using &lt;a href="https://github.com/jakejarvis/wait-action"&gt;jakejarvis/wait-action&lt;/a&gt; to wait for an arbitrary length of five minutes. This is a completely optional step for you. It might seem a bit hacky — but if it works, it works!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-the-feed-list"&gt;
  &lt;/a&gt;
  Building the feed list
&lt;/h3&gt;

&lt;p&gt;The action code repository used to generate the recent blog post feed is by &lt;a href="https://github.com/gautamkrishnar"&gt;gautamkrishnar&lt;/a&gt; (&lt;code&gt;uses: gautamkrishnar/blog-post-workflow@master&lt;/code&gt;). If you're curious, you can &lt;a href="https://github.com/gautamkrishnar/blog-post-workflow"&gt;view the code and full setup instructions here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Make sure to replace the &lt;code&gt;feed_list&lt;/code&gt; parameter with the full URL to your own RSS feed.&lt;/p&gt;

&lt;p&gt;Commit your new &lt;code&gt;.yml&lt;/code&gt; file in the UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0hhX9lhh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g68is1qoltg2ohdj7cc8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0hhX9lhh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g68is1qoltg2ohdj7cc8.png" alt="A screenshot showing the commit name and message for the new .yml file in the GitHub UI."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, add the following comment lines into your README.md file. This is what the &lt;strong&gt;blog-post-workflow&lt;/strong&gt; action will look for in your README in order to insert the list generated from the RSS feed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- BLOG-POST-LIST:START --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- BLOG-POST-LIST:END --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Commit this change to the repository. The GitHub action is ready to go!&lt;/p&gt;

&lt;p&gt;Now, let's take a look at how we trigger the webhook in Contentful each time we publish a new blog post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-contentful-webhook"&gt;
  &lt;/a&gt;
  Creating the Contentful webhook
&lt;/h2&gt;

&lt;p&gt;In your Contentful space, navigate to &lt;strong&gt;Settings &amp;gt; Webhooks&lt;/strong&gt; and click on &lt;strong&gt;Add Webhook&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Input the following settings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose a name for the webhook (I chose &lt;strong&gt;GH Action&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Set the URL to &lt;strong&gt;POST&lt;/strong&gt; and enter the following URL, replacing &lt;code&gt;{your_user_name}/{repository_name}&lt;/code&gt; with the correct values:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;https://api.github.com/repos/&lt;span class="o"&gt;{&lt;/span&gt;your_user_name&lt;span class="o"&gt;}&lt;/span&gt;/&lt;span class="o"&gt;{&lt;/span&gt;repository_name&lt;span class="o"&gt;}&lt;/span&gt;/dispatches
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Choose when you'd like to trigger the webhook and GitHub action. I selected to trigger the webhook each time I &lt;strong&gt;publish, unpublish and delete&lt;/strong&gt; an entry in Contentful.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NamVr-C9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7g9tkishnme448g7pvf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NamVr-C9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7g9tkishnme448g7pvf.png" alt="A screenshot of the new webhook settings showing the name, POST URL, and triggers."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the following &lt;strong&gt;Custom Headers&lt;/strong&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;Accept: application/vnd.github.v3+json
User-Agent: Contentful Webhook
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Generate a &lt;a href="https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token"&gt;GitHub personal access token&lt;/a&gt; and add the following &lt;strong&gt;Secret Header&lt;/strong&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;Authorization: Bearer {your_github_personal_access_token}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jHbhX-q6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vaknxo8r3pod5onzs8gt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jHbhX-q6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vaknxo8r3pod5onzs8gt.png" alt="A screenshot showing the custom and secret headers for the webhook settings."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select the &lt;strong&gt;'Customize the webhook payload'&lt;/strong&gt; option below and enter the following into the code editor:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"event_type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"contentful.deploy"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qEWRaKhG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rg2387gs1te56dxwrovg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qEWRaKhG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rg2387gs1te56dxwrovg.png" alt="A screenshot showing the custom payload to send in the webhook."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note how the &lt;code&gt;"event_type"&lt;/code&gt; is named the same as the &lt;code&gt;repository_dispatch &amp;gt; types&lt;/code&gt; value in the build-readme.yml file.&lt;/p&gt;

&lt;p&gt;Click save!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Huge thanks to &lt;a href="https://nharox.com/blog/trigger-github-actions-with-contentful-webhook/"&gt;nharox&lt;/a&gt; for writing about triggering a GitHub action via Contentful webhooks before I did!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-it-out"&gt;
  &lt;/a&gt;
  Test it out!
&lt;/h2&gt;

&lt;p&gt;Publish, unpublish or delete an entry in your Contentful space and watch your GitHub Action trigger automagically via the webhook. To check if your webhook fired, click on the &lt;strong&gt;Activity log&lt;/strong&gt; tab via the webhook settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9FKMMx9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9fkoohp366guoyjvqpn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9FKMMx9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9fkoohp366guoyjvqpn.png" alt="A screenshot of the webhook activity log showing it being triggered a number of times, with the timestamp, HTTP status codes and links to view details."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll now see an automatically generated list of your last five blog posts in your GitHub profile README. 🎉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WSRgTHIc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/229zjuvjb00xkgodfpy9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WSRgTHIc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/229zjuvjb00xkgodfpy9.png" alt="A screenshot from my GitHub profile README, showing the last five blog posts in a list."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Are you using GitHub actions to generate content on your GitHub profile README? I'm always looking for new ideas! &lt;a href="https://twitter.com/whitep4nth3r"&gt;Come and let me know on Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>github</category>
    </item>
    <item>
      <title>Creating Linked Blog Post Headers using MDX on GatsbyJS.</title>
      <author>Coner Murphy</author>
      <pubDate>Thu, 27 May 2021 19:53:46 +0000</pubDate>
      <link>https://dev.to/conermurphy/creating-linked-blog-post-headers-using-mdx-on-gatsbyjs-3kg9</link>
      <guid>https://dev.to/conermurphy/creating-linked-blog-post-headers-using-mdx-on-gatsbyjs-3kg9</guid>
      <description>&lt;p&gt;MDX is a great way to blog if you're a developer. I've been using it on my &lt;a href="//conermurphy.com/"&gt;personal website&lt;/a&gt; for a few years now and have had very little reason to switch from it.&lt;/p&gt;

&lt;p&gt;One of it's biggest pros is how flexible it is. If you want to add some new fields or change the way it displays, you can easily do it from your codebase.&lt;/p&gt;

&lt;p&gt;Today, we're going to be looking at how to create linkable headers for every blog post on a GatsbyJS website using MDX.![&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before starting this you need to have a blog already set up on GatsbyJS using MDX. If you have a GatsbyJS blog already but haven't converted it over to MDX, you can check out the &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-plugin-mdx/"&gt;MDX plugin page here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you already have all your blog posts generated using MDX then you're ready to get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-setup"&gt;
  &lt;/a&gt;
  Basic Setup
&lt;/h2&gt;

&lt;p&gt;One of the reasons I love using GatsbyJS is because after defining one template file, all our blog posts are generated using it. This makes adding in linked headers a breeze because we only need to amend the template.&lt;/p&gt;

&lt;p&gt;For this to work, we need to ensure our MDX is being generated using a list of custom components. To do this create a separate file with all the components that you need to use. Below is an excerpt from mine. If you want to view the whole file, you can on &lt;a href="https://github.com/conermurphy/conermurphy.com/blob/master/src/components/mdx/Components.js"&gt;my GitHub repo here.&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;H1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
  font-size: 2.75rem;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Components&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;H1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/H1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For brevity, I've only included the &lt;code&gt;H1&lt;/code&gt; tag as an example. You will need to expand this out to all the header tags you want this to work for.&lt;/p&gt;

&lt;p&gt;Once, we have this basic file laid out, we need to integrate it into our blog post template file like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MDXRenderer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gatsby-plugin-mdx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MDXProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mdx-js/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Components&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/mdx/Components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MDXProvider&lt;/span&gt; &lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Components&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MDXRenderer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MDXRenderer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MDXProvider&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By passing the components file to the &lt;code&gt;MDXProvider&lt;/code&gt; it will use these components when rendering out the body of the post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-linked-headers"&gt;
  &lt;/a&gt;
  Adding the linked headers
&lt;/h2&gt;

&lt;p&gt;Adding the functionality of the linked headers is as simple as amending the components file.&lt;/p&gt;

&lt;p&gt;Here is an updated version with the functionality added.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;H1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
  font-size: 2.75rem;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyToClip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Components&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;H1&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;
        &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`#&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;copyToClip&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/H1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's cover what's happening here.&lt;/p&gt;

&lt;p&gt;When MDX renders the body, it passes each instance of each tag to the corresponding custom component. This allows us to retrieve the text by using &lt;code&gt;props.children&lt;/code&gt;. We use this to create our URLs and IDs to link to.&lt;/p&gt;

&lt;p&gt;For example, let's look at this section title:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Original header text: Adding the linked headers
URL/ID version: adding-the-linked-headers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By adding this text to the ID of the element we can link to it with an &lt;code&gt;a&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Let's look at creating the link. First, we wrap the text of the element in an &lt;code&gt;a&lt;/code&gt; tag with a href equal to the link we created earlier. Make sure to precede it with a # so we link to an id on the page and not an actual page.&lt;/p&gt;

&lt;p&gt;So, with all the above sorted we have a &lt;code&gt;H1&lt;/code&gt; element on the page containing an &lt;code&gt;a&lt;/code&gt; tag linking to the parent &lt;code&gt;H1&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;As it stands this works. But, we're missing out on the best part. When someone clicks on the link we want it to copy to their clipboard so they can share it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clipboard-functionality"&gt;
  &lt;/a&gt;
  Clipboard Functionality
&lt;/h3&gt;

&lt;p&gt;To add the clipboard functionality we need a &lt;code&gt;onClick&lt;/code&gt; handler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyToClip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;
  &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`#&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;copyToClip&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when someone clicks on a header they have the URL copied to their clipboard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling"&gt;
  &lt;/a&gt;
  Styling
&lt;/h2&gt;

&lt;p&gt;All the functionality is now complete. The final thing we need to look at is the styling.&lt;/p&gt;

&lt;p&gt;To show the user, that a link is clickable when they hover on it we want to underline the link and add a 🔗 emoji next to the link.&lt;/p&gt;

&lt;p&gt;To achieve this, create a separate component like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostBodyContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  &amp;amp; &amp;gt; h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    position: relative;

    &amp;amp; &amp;gt; a {
      text-decoration: none;
      width: 100%;

      :hover {
        text-decoration: underline;

        &amp;amp; ::before {
          content: "🔗";
          transform: translateX(-2rem);
          position: absolute;
          font-size: 1.5rem;
          bottom: 12.5px;

          @media (max-width: 600px) {
            display: none;
          }
        }
      }
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then wrap the MDX componets in this new component, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostBodyContainer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MDXProvider&lt;/span&gt; &lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Components&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MDXRenderer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MDXRenderer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MDXProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/PostBodyContainer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to the &lt;code&gt;::before&lt;/code&gt; psuedo element we used, when someone hovers over the link they get the emoji appearing to the left of it and the link underlined.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summing-up"&gt;
  &lt;/a&gt;
  Summing up
&lt;/h2&gt;

&lt;p&gt;Following this tutorial, you should now have custom linkable headers set-up on a GatsbyJS blog using MDX. If you have any questions or any issues I would be happy to help. Just reach out to me over on &lt;a href="https://twitter.com/MrConerMurphy"&gt;Twitter&lt;/a&gt; and I'll get back to you as soon as possible.&lt;/p&gt;

&lt;p&gt;If you found this post helpful, please consider sharing it so others can find it helpful to. If you want to see more content like this, please consider following me on &lt;a href="https://twitter.com/MrConerMurphy"&gt;Twitter&lt;/a&gt; where I regularly post threads and other posts.&lt;/p&gt;

&lt;p&gt;Thanks for reading. 😃&lt;/p&gt;

</description>
      <category>gatsby</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
