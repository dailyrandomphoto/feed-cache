<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Solving Interview Problems with Deep Learning</title>
      <author>Mage</author>
      <pubDate>Tue, 30 Nov 2021 17:19:45 +0000</pubDate>
      <link>https://dev.to/mage_ai/solving-interview-problems-with-deep-learning-5cdg</link>
      <guid>https://dev.to/mage_ai/solving-interview-problems-with-deep-learning-5cdg</guid>
      <description>&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j7mLA0BZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qksna9yv4dtg1hw0dzz9.jpg" alt="Image description"&gt;&lt;em&gt;Photo credit: Godzilla vs. Kong&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;It’s been a while since I’ve practiced programming interview questions, and I worry that my skills are lacking. It’s always important to work through some every now and then to stay sharp so here we go:&lt;/p&gt;

&lt;p&gt;Let’s start with Fizz Buzz:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a program that prints the numbers from 1 to 100. But for multiples of 3print “Fizz” instead of the number and for the multiples of 5 print “Buzz”. For numbers which are multiples of both 3 and 5 print “FizzBuzz”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This solution was actually inspired by &lt;a href="http://joelgrus.com/2016/05/23/fizz-buzz-in-tensorflow/"&gt;Joel Grus&lt;/a&gt;. We can represent numbers with binary encoding:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import tensorflow as tf
import numpy as np
INPUT_SIZE = 10 # We can encode up to 2^15 numbers with binary encoding.
HIDDEN_SIZE = 100 # Hidden layer of size 100
OUTPUT_SIZE = 4 # One hot encoding for the 4 possible outputs: "Fizz" "Buzz" "FizzBuzz", ""
NUM_EPOCHS = 10000
def binary_encode(number):
    data = np.zeros(INPUT_SIZE)
    for bitshift in range(INPUT_SIZE):
        data[bitshift] = number &amp;gt;&amp;gt; bitshift &amp;amp; 1 # Get the bit at position bitshift
    return data
def fizz_buzz_encode(i):
    if   i % 15 == 0: return np.array([0, 0, 0, 1])
    elif i % 5  == 0: return np.array([0, 0, 1, 0])
    elif i % 3  == 0: return np.array([0, 1, 0, 0])
    else:             return np.array([1, 0, 0, 0])
def fizz_buzz_decode(encoding):
    max_idx = np.argmax(encoding)
    if max_idx == 0:
        return ""
    if max_idx == 1:
        return "fizz"
    if max_idx == 2:
        return "buzz"
    if max_idx == 3:
        return "fizzbuzz"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can generate some training data (we will generate training data from 101 to 1024) since our actual problem will solve fizzbuzz for 1–100.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;X_train = np.array([binary_encode(i) for i in range(101, 2 ** INPUT_SIZE)])
y_train = np.array([fizz_buzz_encode(i) for i in range(101, 2 ** INPUT_SIZE)])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, let’s define our multilayer perceptron model that will actually perform the bulk of the work. First, we define the inputs to the model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;X = tf.placeholder('float', [None, INPUT_SIZE])
Y = tf.placeholder('float', [None, OUTPUT_SIZE])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let’s define the weights and biases that we will learn via backpropagation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;w1 = tf.get_variable("w1", [INPUT_SIZE, HIDDEN_SIZE], initializer=tf.random_normal_initializer())
b1 = tf.get_variable("b1", [HIDDEN_SIZE])
w2 = tf.get_variable("w2", [HIDDEN_SIZE, OUTPUT_SIZE], initializer=tf.random_normal_initializer())
b2 = tf.get_variable("b2", [OUTPUT_SIZE])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, let’s feed our input through the model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;z1 = tf.add(tf.matmul(X, w1), b1)
a1 = tf.nn.relu(z1)
z2 = tf.add(tf.matmul(a1, w2), b2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, let’s compute the loss and tell tensorflow to minimize that loss:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cost = tf.nn.softmax_cross_entropy_with_logits(logits=z2, labels=Y)
optimizer = tf.train.GradientDescentOptimizer(0.001).minimize(cost)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let’s actually feed our real training data into that model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;init = tf.global_variables_initializer()
with tf.Session() as sess:
    sess.run(init)
    for i in range(NUM_EPOCHS):
        c, o = sess.run([cost, optimizer], feed_dict={X: X_train, Y: y_train})
        print(np.sum(c))
    X_test = np.array([binary_encode(i) for i in range(1, 100)])
    y_test = np.array([fizz_buzz_encode(i) for i in range(1, 100)])
    pred = sess.run(z2, feed_dict={X:X_test, Y:y_test})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And print out the results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def real_fizz_buzz(i):
    txt = ""
    if i % 3 == 0:
        txt += "fizz"
    if i % 5 == 0:
        txt += "buzz"
    return txt

for i in range(len(X_test)):
    text = fizz_buzz_decode(pred[i])
    true_text = real_fizz_buzz(i + 1)
    print("{}: {} ({})".format(i + 1, text, "✔" if text == true_text else "x"))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1:  (✔)
2:  (✔)
3:  (x)
...
97:  (✔)
98:  (✔)
99: fizz (✔)
Total Accuracy: 89.89%
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For all that work, we achieved an embarrassingly low 90% accuracy. I was going to try to fix this but then quickly lost interest. Let’s move onto something a bit more interesting:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write a program that counts the number of unique characters in a string.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This sounds like a problem that can be solved with an LSTM. Let’s generate some data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import tensorflow as tf
import random
import numpy as np
CHARS = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
STRING_LENGTH = 12
num_examples = 10000
# Args:
#   n: Number of examples to generate.
# Returns:
#   strings_v: numpy array of the form (n, STRING_LENGTH, len(CHARS)). One hot encoding of sequences of text
#   strings: Array of actual generated random text:
#   uniques_v: numpy array of the form (n, len(CHARS)). One hot encoding of number of unique characters
#   uniques: numpy array of length n, number of unique characters for each sequence.
def generate_data(n=num_examples):
    chars_to_idx = { c: i for i, c in enumerate(CHARS)}

    strings_v = np.zeros([n, STRING_LENGTH, len(CHARS)])
    strings = [''] * n
    uniques = np.zeros(n)
    uniques_v = np.zeros([n, len(CHARS)])
    for x in range(n):
        for y in range(STRING_LENGTH):
            random.shuffle(CHARS)
            char = CHARS[0]

            strings_v[x][y][chars_to_idx[char]] = 1
            strings[x] += char

        uniques[x] = len(set(strings[x]))
        uniques_v[x][len(set(strings[x])) - 1] = 1

    return strings_v, strings, uniques_v, uniques
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next let’s create our LSTM model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HIDDEN_LAYERS = 64
X = tf.placeholder("float", [None, STRING_LENGTH, len(CHARS)])
y = tf.placeholder("float", [None, len(CHARS)])
X_seq = tf.unstack(X, STRING_LENGTH, 1)
lstm_cell = tf.contrib.rnn.BasicLSTMCell(HIDDEN_LAYERS)
#sequence of 12 chars to output of 7
outputs, states = tf.contrib.rnn.static_rnn(lstm_cell, X_seq, dtype=tf.float32)
final_output = outputs[-1]
weights = tf.get_variable("weights", [HIDDEN_LAYERS, len(CHARS)], initializer=tf.random_normal_initializer())
biases = tf.get_variable("biases", [len(CHARS)], initializer=tf.random_normal_initializer())
prediction = tf.add(tf.matmul(final_output, weights), biases)
cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=prediction, labels=y))
optimizer = tf.train.AdamOptimizer(1e-2)
train_op = optimizer.minimize(cost)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let’s go ahead and run our model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;init = tf.global_variables_initializer()
costs = []
EPOCHS = 300
with tf.Session() as sess:
    sess.run(init)
    for i in range(EPOCHS):
        _, c, _ = sess.run([train_op, cost, prediction], feed_dict={X:X_train, y: y_train})
        costs.append(c)
        if i % 10 == 0:
            print('cost: {}, epoch: {}'.format(c, i))

            X_test, X_test_strings, y_test, y_test_strings = generate_data(100)
            p = sess.run(prediction, feed_dict={X: X_test, y: y_test})
            prediction_idxs = np.argmax(p, axis=1)
            prediction_vals = prediction_idxs + 1
correct = 0.0
            for i in range(len(y_test_strings)):
                string = X_test_strings[i]
                actual_val = y_test_strings[i]
                predicted_val = prediction_vals[i]
                # Print the first 5 examples
                if i &amp;lt; 5:
                    print('string: {}, pred: {}, actual: {}'.format(string, predicted_val, actual_val))

                if predicted_val == actual_val:
                    correct += 1
            print("{}% accuracy\n\n".format(correct * 100 / len(y_test_strings)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cost: 0.0496655665338, epoch: 280
string: eeaccbdeagac, pred: 6, actual: 6.0
string: gefaddbbcfac, pred: 7, actual: 7.0
string: acedcbgdcagf, pred: 7, actual: 7.0
string: aadebcdacefg, pred: 7, actual: 7.0
string: abeeaebcbbag, pred: 5, actual: 5.0
100% accuracycost: 0.0413268692791, epoch: 290
string: ebbfbfaebede, pred: 5, actual: 5.0
string: fgaccdbabedg, pred: 7, actual: 7.0
string: dgdcbaefcdad, pred: 7, actual: 7.0
string: ffagdfedccad, pred: 6, actual: 6.0
string: gfggfgbebcdb, pred: 6, actual: 6.0
99% accuracy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hopefully the interviewer won’t be disappointed that we cannot solve this problem for any string that’s greater than MAX_LENGTH, but overall, it achieved a 99% accuracy. I didn’t deal with variable length inputs in this case, we could’ve easily done that by adding padding.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now, instead of just printing out the &lt;strong&gt;number&lt;/strong&gt; of unique characters, print out the actual unique characters in the order they appear.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Ex: “acabdb” =&amp;gt; “acbd”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Oof. Thats a much tougher problem. In this case, the value we need to return is a sequence of characters instead of a single character or number so we will need some form of sequence to sequence model in order to learn this relationship.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import numpy as np
import tensorflow as tf
from tensorflow.contrib import rnn
import random
#"abc" =&amp;gt; "abc"
#"aabbac" =&amp;gt; "abc"
#"abacd" =&amp;gt; "abcd"
MAX_LENGTH = 6 # Max length of 6 
chars = ["a", "b", "c", "d", "e", "f"]
all_chars = chars + [' '] # Space for padding
NUM_EXAMPLES = 50000
# Args:
#   n: number of examples to generate
# Returns:
#   strings: list of strings that may contain duplicates
#   solutions: strings without duplicates
#   strings_v: One hot encoding of strings with duplicates (without padding)
#   solutions_v: One hot encoding of solutions (with padding)
def generate_data(n=NUM_EXAMPLES):
    all_chars_to_idx = { c:i for i, c in enumerate(all_chars) }
    strings_v = np.zeros((NUM_EXAMPLES, MAX_LENGTH, len(all_chars)))
    solutions_v = np.zeros((NUM_EXAMPLES, MAX_LENGTH, len(all_chars)))

    strings = [''] * NUM_EXAMPLES
    solutions = [''] * NUM_EXAMPLES

    for i in range(NUM_EXAMPLES):
        for l in range(MAX_LENGTH):
            char = random.choice(chars) # only sample from valid characters
            strings[i] += char
            if char not in solutions[i]:
                solutions[i] += char

        # Pad solutions strings
        num_missing = MAX_LENGTH - len(solutions[i])
        solutions[i] += ' ' * num_missing

    for x in range(len(strings)):
        for y in range(MAX_LENGTH):
            string_char = strings[x][y]
            strings_v[x][y][all_chars_to_idx[string_char]] = 1

            solution_char = solutions[x][y]
            solutions_v[x][y][all_chars_to_idx[solution_char]] = 1

    return strings, solutions, strings_v, solutions_v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, we can one hot encode the sequences, but this time, we will add some padding since the length of the output string is variable. Instead of trying to return a variable length sequence, we will just return a sequence that is equal to the length of the input, and pad the output with spaces.&lt;/p&gt;

&lt;p&gt;For example, “abdab” would map to a string of the same length, but with spaces as padding: “abd “.&lt;/p&gt;

&lt;p&gt;Let’s create a test and training split.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;strings, solutions, strings_v, solutions_v = generate_data()
split_at = len(strings) - (len(strings) // 10)
strings_train = strings[:split_at]
solutions_train = solutions[:split_at]
X_train = strings_v[:split_at]
y_train = solutions_v[:split_at]
strings_test = strings[split_at:]
solutions_test = solutions[split_at:]
X_test = strings_v[split_at:]
y_test = solutions_v[split_at:]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can set up our model. Let’s start with the encoder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;encoded_input = tf.placeholder(tf.float32, shape=(None, MAX_LENGTH, len(all_chars)))
decoded_input = tf.placeholder(tf.float32, shape=(None, MAX_LENGTH, len(all_chars)))
with tf.name_scope("basic_rnn_seq2seq") as scope:
    encoded_sequence = tf.unstack(encoded_input, MAX_LENGTH, 1)
    encoder_cell = rnn.BasicLSTMCell(128, forget_bias=1.0)
    encoded_outputs, states = rnn.static_rnn(encoder_cell, encoded_sequence, dtype=tf.float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, the decoder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;with tf.name_scope("lstm_decoder") as scope:
    decoded_sequence = tf.unstack(decoded_input, MAX_LENGTH, 1)
    decoder_cell = rnn.BasicLSTMCell(128, reuse=True)
    decoded_outputs, _ = rnn.static_rnn(decoder_cell, decoded_sequence, initial_state=states, dtype=tf.float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can compute the predictions by multiplying the decoder’s hidden layer output with a fully connected layer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;with tf.name_scope("fully_connected") as scope:
    weights = tf.get_variable('weights', (128, len(all_chars)), initializer=tf.random_normal_initializer())
    biases = tf.get_variable('biases', (len(all_chars)), initializer=tf.random_normal_initializer())

    predictions = []
    encoded_sequence = tf.unstack(decoded_input, MAX_LENGTH, 1)
for output in decoded_outputs:
        prediction = tf.add(tf.matmul(output, weights), biases)
        predictions.append(prediction)
concatenated_outputs = tf.stack(predictions, 0)
    concatenated_outputs = tf.transpose(concatenated_outputs, perm=[1, 0, 2])
    concatenated_inputs = tf.concat(decoded_input, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can compute the loss:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=concatenated_outputs, labels=concatenated_inputs))
# FC Layer
optimizer = tf.train.AdamOptimizer(1e-2)
train_op = optimizer.minimize(cost)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now let’s run our model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def decode_guess(one_hot):
    return ''.join([all_chars[m] for m in np.argmax(one_hot, axis=1)])
init = tf.global_variables_initializer()
costs = []
with tf.Session() as sess:
    sess.run(init)
    for i in range(30):
        e, r, c, t, c_out, c_in = sess.run([encoded_outputs, predictions, cost, train_op, concatenated_outputs, concatenated_inputs], feed_dict={encoded_input: X_train, decoded_input: y_train})
        costs.append(c)
        if i % 5 == 0:
            print('training cost: {}, epoch: {}'.format(c, i))

            results = sess.run(predictions, feed_dict={encoded_input: X_test, decoded_input: y_test})
            guesses = np.array(results).transpose(1, 0, 2)
            for i in range(5):
                string = strings_test[i]
                solution = solutions_test[i]
                guess_decoded = decode_guess(guesses[i])
                print("{}: {} - {}".format(string, solution, guess_decoded))

            correct = 0.0
            for i in range(len(strings_test)):
                string = strings_test[i]
                solution = solutions_test[i]
                guess_decoded = decode_guess(guesses[i])
                if i &amp;lt; 5:
                    print("input: {}, solution: {}, prediction: {}".format(string, solution, guess_decoded))
if solution == guess_decoded:
                    correct += 1

            print("{} % accuracy".format(correct / len(strings_test) * 100))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here are the results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;training cost: 2.07600975037, epoch: 0
cebbdf: cebdf  -       
dffcbc: dfcb   -       
aadeab: adeb   -       
faceec: face   -       
bfaeec: bfaec  -       
0.0 % accuracy...training cost: 0.219934388995, epoch: 25
cebbdf: cebdf  - cebdf 
dffcbc: dfcb   - dfcb  
aadeab: adeb   - adeb  
faceec: face   - face  
bfaeec: bfaec  - bfaec 
100.0 % accuracy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks like by 25 epochs, our model has a fairly good understanding of how to solve this problem.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LkpqC2lT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnqjwvxeagw0iq4qut6n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LkpqC2lT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnqjwvxeagw0iq4qut6n.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please do not solve real interview problems in this way.&lt;/p&gt;

</description>
      <category>tensorflow</category>
      <category>machinelearning</category>
      <category>programminginterviews</category>
      <category>technicalinterview</category>
    </item>
    <item>
      <title>KAFKA + KSQLDB + .NET #1</title>
      <author>Ricardo Medeiros</author>
      <pubDate>Tue, 30 Nov 2021 17:19:05 +0000</pubDate>
      <link>https://dev.to/vaivoa/kafka-ksqldb-net-1-40g4</link>
      <guid>https://dev.to/vaivoa/kafka-ksqldb-net-1-40g4</guid>
      <description>&lt;p&gt;Hi, I'm &lt;a href="https://github.com/jjackbauer"&gt;Ricardo Medeiros&lt;/a&gt;, .NET back end developer @vaivoa, and today I'm going to walk you through using ksqlDB to query messages produced in kafka by a .NET/C# producer. For this example, I will be deploying my enviroment as containers, described in a docker compose file, to ensure easy reproducibility of my results.&lt;/p&gt;

&lt;p&gt;The source code used in this example is avaliable &lt;a href="https://github.com/jjackbauer/ksqlDBDemo"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#services"&gt;
  &lt;/a&gt;
  Services
&lt;/h2&gt;

&lt;p&gt;First, let's talk about the docker compose environment services. the file is avaliable &lt;a href="https://github.com/jjackbauer/ksqlDBDemo/blob/main/docker-compose.yml"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#net-api-producer"&gt;
  &lt;/a&gt;
  .NET API Producer
&lt;/h3&gt;

&lt;p&gt;Automaticaly generated .NET api with docker compose service&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ksqldbdemo:
    container_name: ksqldbdemo
    image: ${DOCKER_REGISTRY-}ksqldbdemo
    build:
      context: .
      dockerfile: Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This producer service needs the .NET generated dockerfile shown below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base
WORKDIR /app
EXPOSE 80
EXPOSE 443

FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build
WORKDIR /src
COPY ["ksqlDBDemo.csproj", "."]
RUN dotnet restore "ksqlDBDemo.csproj"
COPY . .
WORKDIR "/src/"
RUN dotnet build "ksqlDBDemo.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "ksqlDBDemo.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "ksqlDBDemo.dll"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#zookeeper"&gt;
  &lt;/a&gt;
  ZooKeeper
&lt;/h3&gt;

&lt;p&gt;Despite not been necessary since Kafka 2.8, ZooKeeper coordinates kafka tasks, defining controllers, cluster membership, topic configuration and more. In this tutorial, it's used the confluent inc. ZooKeeper image, due to it's use in the reference material. It makes Kafka more reliable, but adds complexity into the system.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#kafka"&gt;
  &lt;/a&gt;
  Kafka
&lt;/h3&gt;

&lt;p&gt;Kafka is an event streaming plataform capable of handling trillions of events a day. Kafka is based on the abstraction of an distributed commit log. Initialiy developed at LinkedIn in 2011 to work as a message queue, but it has evolved into a full-fledge event streanming platfmorm. Listed as broker in the services, is the core of this tutorial. It's configuration is tricky, but using it as follows worked well in this scenario.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; broker:
    image: confluentinc/cp-kafka:7.0.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#ksqldb"&gt;
  &lt;/a&gt;
  ksqlDB
&lt;/h3&gt;

&lt;p&gt;ksqlDB is a database built to allow distributed stream process applications. Made to work seamsly with kafka, it has a server that runs outside of kafka, with a REST API and a CLI application that can be run separatly and it's used in this tutorial.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#ksqldb-server"&gt;
  &lt;/a&gt;
  ksqlDB Server
&lt;/h4&gt;

&lt;p&gt;In this example, it's used the confluent inc image of the ksqlDB server, once more, due to it's widespread usage.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ksqldb-server:
    image: confluentinc/ksqldb-server:0.22.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: broker:29092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#ksqldb-cli"&gt;
  &lt;/a&gt;
  ksqlDB CLI
&lt;/h4&gt;

&lt;p&gt;The same goes for the ksqlDB CLI service, that also use the confluent inc image.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.22.0
    container_name: ksqldb-cli
    depends_on:
      - broker
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#kafdrop"&gt;
  &lt;/a&gt;
  Kafdrop
&lt;/h3&gt;

&lt;p&gt;Kafdrop is a Web UI for viewing kafka topics and browsing consumer groups. It makes kafka more accessible.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop:latest
    depends_on:
      - broker
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: broker:29092
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#tutorial"&gt;
  &lt;/a&gt;
  Tutorial
&lt;/h2&gt;

&lt;p&gt;Now it's the time that you have been waiting, let's make it work!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#enviroment"&gt;
  &lt;/a&gt;
  Enviroment
&lt;/h3&gt;

&lt;p&gt;For this tutorial, you'll need a &lt;a href="https://docs.docker.com/get-docker/"&gt;docker desktop&lt;/a&gt; installation, either it's on a Linux distribution or on Windows with WSL and &lt;a href="https://git-scm.com/downloads"&gt;git&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cloning-the-project"&gt;
  &lt;/a&gt;
  Cloning the project
&lt;/h3&gt;

&lt;p&gt;A Visual Studio project is avaliable &lt;a href="https://github.com/jjackbauer/ksqlDBDemo"&gt;here&lt;/a&gt;, it has docker support and already deploys all the services needed for this demo in the IDE. However, you will be fine if you don't want or can't use Visual Studio. Just  clone it, running the following comand on the terminal and directory of your preference:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ git clone https://github.com/jjackbauer/ksqlDBDemo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Use the following command to move to the project folder:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ cd /ksqlDBDemo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And, in the project folder, that contains the docker-compose.yml run the following command to deploy the services:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;after this command, make sure that all services are running. Sometimes services fall, but it is okay. In order to see if everything is running ok, it's possible to see the services running in docker desktop, as shown bellow:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JiTdQPag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uakexrf3p7atec8q7k9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JiTdQPag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uakexrf3p7atec8q7k9.PNG" alt="Docker Desktop" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or you can execute the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Which should output something like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CONTAINER ID   IMAGE                               COMMAND                  CREATED       STATUS       PORTS
  NAMES
b42ce9954fd9   ksqldbdemo_ksqldbdemo               "dotnet ksqlDBDemo.d…"   2 hours ago   Up 2 hours   0.0.0.0:9009-&amp;gt;80/tcp, 0.0.0.0:52351-&amp;gt;443/tcp   ksqldbdemo
0a0186712553   confluentinc/ksqldb-cli:0.22.0      "/bin/sh"                2 hours ago   Up 2 hours
  ksqldb-cli
76519de6946e   obsidiandynamics/kafdrop:latest     "/kafdrop.sh"            2 hours ago   Up 2 hours   0.0.0.0:19000-&amp;gt;9000/tcp
  kafdrop
11c3a306ee01   confluentinc/ksqldb-server:0.22.0   "/usr/bin/docker/run"    2 hours ago   Up 2 hours   0.0.0.0:8088-&amp;gt;8088/tcp
  ksqldb-server
07cef9d69267   confluentinc/cp-kafka:7.0.0         "/etc/confluent/dock…"   2 hours ago   Up 2 hours   9092/tcp, 0.0.0.0:29092-&amp;gt;29092/tcp
  broker
3fa1b9a60954   confluentinc/cp-zookeeper:7.0.0     "/etc/confluent/dock…"   2 hours ago   Up 2 hours   2888/tcp, 0.0.0.0:2181-&amp;gt;2181/tcp, 3888/tcp     zookeeper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#web-api"&gt;
  &lt;/a&gt;
  WEB API
&lt;/h3&gt;

&lt;p&gt;Now, with all services up and running, we can access the WEB API Swagger to populate our Kafka topics. The code is very simple and it's avaliable in the &lt;a href="https://github.com/jjackbauer/ksqlDBDemo"&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The WEB API swagger is deployed at &lt;a href="http://localhost:9009/swagger/index.html"&gt;http://localhost:9009/swagger/index.html&lt;/a&gt;. As shown in the image bellow, it has two endpoints and they create events that could be created by indepent microservices. One for creating an event that creates a userName in the system and another that takes an Id and generates a three digit code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U51OPyz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99l7s38ffu0tx1gon62r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U51OPyz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99l7s38ffu0tx1gon62r.PNG" alt="Swagger Geral" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you can create an User with the user name of your choise, as shown:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--blE9WVGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxlhjsmfeei7wnym834g.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--blE9WVGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxlhjsmfeei7wnym834g.PNG" alt="Request Create user" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And it will have an assigned unique Id, as demonstrated:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6xjmEq31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g06gff8025nxw6gze9v.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6xjmEq31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g06gff8025nxw6gze9v.PNG" alt="Response create user" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you can get a three digit code for your user Id as displayed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ajd5iYUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yoezrw53wibte9baiaj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ajd5iYUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yoezrw53wibte9baiaj.PNG" alt="Get Code Request" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And a random code is generated for the selectd, as we can observe in the image that follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WeP6DlVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azp6yri8cy4x4day7vyu.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WeP6DlVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azp6yri8cy4x4day7vyu.PNG" alt="Get Code Response" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#kafdrop"&gt;
  &lt;/a&gt;
  Kafdrop
&lt;/h3&gt;

&lt;p&gt;We can use the kafdrop UI the check if everything is okay. Kafdrop is deployed at &lt;a href="http://localhost:19000/"&gt;http://localhost:19000/&lt;/a&gt;.&lt;br&gt;
There, you will find all the brokers and topics avaliable. It should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WE--gqAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9v29cx12cqw5cnp19sr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WE--gqAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9v29cx12cqw5cnp19sr.PNG" alt="Kafdrop" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ksql-cli"&gt;
  &lt;/a&gt;
  KSQL CLI
&lt;/h3&gt;

&lt;p&gt;After all that, you'll be able to create your streams of data and query it using ksqlDB. On your preferential terminal, use the command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker exec -it ksqldb-cli ksql http://ksqldb-server:8088
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#creating-streams"&gt;
  &lt;/a&gt;
  Creating streams
&lt;/h4&gt;

&lt;p&gt;And then you are in the ksql CLI and are free to create your streams and queries. First, let's create a stream for each one of our topics:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE STREAM stream_user (Name VARCHAR, Id VARCHAR)
  WITH (kafka_topic='demo-user', value_format='json', partitions=1);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE STREAM stream_code (Id VARCHAR, code INT)
  WITH (kafka_topic='demo-code', value_format='json', partitions=1);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#create-a-materialized-view"&gt;
  &lt;/a&gt;
  Create a materialized view
&lt;/h4&gt;

&lt;p&gt;You can join the client data with the most recent randomized code. to achieve this, you must create a materialized view table, that joins both streams as seen in the ksqldb script that follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE currentCodeView AS
&amp;gt;   SELECT user.Name,
&amp;gt;   LATEST_BY_OFFSET(code.code) AS CurrentCode
&amp;gt;   FROM stream_code code INNER JOIN stream_user user
&amp;gt;   WITHIN 7 DAYS ON code.Id = user.Id
&amp;gt;   GROUP BY user.Name
&amp;gt;EMIT CHANGES;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#making-a-push-query"&gt;
  &lt;/a&gt;
  Making a push query
&lt;/h4&gt;

&lt;p&gt;After that, we can query this materialized view:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM currentCodeView 
  EMIT CHANGES;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This push query keep on running until you hit cntrl+c to cancel it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;In this tutorial it's demonstrated that in a kafka + ksqlDB enviroment, you can make SQL queries and also join on data that comes from different events, which is one of most complexities envolved with microsservices systems. And it is what ksqlDB solves by enabling SQL operations over Kafka topics.&lt;br&gt;
It's my goal to explore the possibilites allowed by this ecosystem and I hope to bring more knowledge on this topic in another articles here. Any sugestions, comments or corrections, fell free to reach me out at &lt;a href="https://www.linkedin.com/in/rmedio/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__757631"&gt;
  
    .ltag__user__id__757631 .follow-action-button {
      background-color: #000000 !important;
      color: #ffffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/jjackbauer" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t2mOG5e4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xkp_wTaq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/757631/76940fdf-9f04-4bd8-9217-d577d788ffef.jpeg" alt="jjackbauer image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/jjackbauer"&gt;Ricardo Medeiros&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/jjackbauer"&gt;Mensaging, microservices, kafka, ksqldb and dotnet explorer.  Middle Back End developper @vaivoa&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ksqldb.io/quickstart.html?_ga=2.218008467.482211024.1638022122-847939024.1633623088&amp;amp;_gac=1.142412294.1634140787.EAIaIQobChMIjOL6pt_H8wIVmcWaCh1KbwgwEAEYASAAEgLBFvD_BwE"&gt;ksqlDB Quickstart&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.confluent.io/platform/current/ksqldb/index.html#ksql-home"&gt;ksqlDB Overview&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.confluent.io/clients-confluent-kafka-dotnet/current/overview.html"&gt;Kafka .NET Client&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.ksqldb.io/en/latest/reference/sql/data-types/"&gt;ksqlDB Documentation - Data Types Overview&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.ksqldb.io/en/latest/operate-and-deploy/ksql-vs-ksqldb/"&gt;KSQL and ksqlDB&lt;/a&gt;&lt;br&gt;
&lt;a href="https://zookeeper.apache.org/"&gt;Welcome to Apache ZooKeeper&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dattell.com/data-architecture-blog/what-is-zookeeper-how-does-it-support-kafka/"&gt;What is ZooKeeper &amp;amp; How Does it Support Kafka?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.confluent.io/what-is-apache-kafka/?utm_medium=sem&amp;amp;utm_source=google&amp;amp;utm_campaign=ch.sem_br.nonbrand_tp.prs_tgt.kafka_mt.xct_rgn.latam_lng.eng_dv.all_con.kafka-general&amp;amp;utm_term=apache%20kafka&amp;amp;creative=&amp;amp;device=c&amp;amp;placement=&amp;amp;gcli&amp;lt;br&amp;gt;%0Ad=Cj0KCQiA7oyNBhDiARIsADtGRZYDVaYjkPkoJQHNrz_xBodIq2P8ztwb8g3OTiRG_wMHXyzof1nqKEMaAoT_EALw_wcB"&gt;What is Apache Kafka®?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://ksqldb.io/"&gt;ksqlDB - The database purpose-built for stream processing applications&lt;/a&gt;&lt;br&gt;
&lt;a href="https://ksqldb.io/overview.html"&gt;An overview of ksqlDB&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.ksqldb.io/en/latest/developer-guide/ksqldb-reference/create-table-as-select/"&gt;CREATE TABLE AS SELECT&lt;/a&gt;&lt;br&gt;
&lt;a href="https://kafka-tutorials.confluent.io/join-a-stream-to-a-stream/ksql.html"&gt;How to join a stream and a stream&lt;/a&gt;&lt;br&gt;
[Time and Windows in ksqlDB Queries]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KAgiXlrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8bndcx2jkn1jz1dy98v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KAgiXlrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8bndcx2jkn1jz1dy98v.png" alt="linha horizontal" width="880" height="3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h1&gt;

&lt;p&gt;A VaiVoa incentiva seus Desenvolvedores em seu processo de crescimento e aceleração técnica. Os artigos publicados não traduzem a opinião da VaiVoa. A publicação obedece ao propósito de estimular o debate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QJQcNDAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wmziqv74ghhgyi9p0om.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QJQcNDAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wmziqv74ghhgyi9p0om.png" alt="logo vaivoa" width="548" height="122"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kafka</category>
      <category>ksqldb</category>
      <category>microservices</category>
      <category>docker</category>
    </item>
    <item>
      <title>TypeScript: Any vs Unknown</title>
      <author>Luís Von Muller</author>
      <pubDate>Tue, 30 Nov 2021 17:08:00 +0000</pubDate>
      <link>https://dev.to/luisvonmuller/typescript-any-vs-unknown-4gk9</link>
      <guid>https://dev.to/luisvonmuller/typescript-any-vs-unknown-4gk9</guid>
      <description>&lt;p&gt;Se você acabou de chegar no mundão do &lt;strong&gt;TypeScript&lt;/strong&gt;, aqui está um conteúdo essencial, onde diferencia a ideia de 2 tipos primitivos. E também o porquê de que se você sair usando arbitrariamente &lt;strong&gt;&lt;em&gt;any&lt;/em&gt;&lt;/strong&gt; você não está &lt;em&gt;realmente&lt;/em&gt; usando o &lt;strong&gt;TypeScript&lt;/strong&gt; e deveria fazer apenas fazer em &lt;strong&gt;JavaScript&lt;/strong&gt;...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vamos-pegar-um-exemplo-bem-simples-e-a-partir-dele-debater-a-ideia"&gt;
  &lt;/a&gt;
  Vamos pegar um exemplo bem simples e a partir dele debater a ideia.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fulano&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;João&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ciclado&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Augusto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ao tipar a variável "Fulano" com any, nós literalmentes dizemos para o Transpilador/Compilador do Typescript que ela é literalmente: Qualquer coisa. &lt;/p&gt;

&lt;p&gt;Por exemplo, para ele, o seguinte código seria &lt;strong&gt;totalmente válido.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fulano&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;funcao&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Todavia, não existe essa função em fulano. Logo, em tempo de execução, isto é: em runtime, nos retornaria um erro (ou seja, ia dar merda). &lt;br&gt;
(ノಠ益ಠ)ノ彡┻━┻&lt;/p&gt;

&lt;p&gt;Já com o "Unknown" o negócio é diferente, a gente usa o propósito mor do TypeScript: Type Safety (Segurança de Tipos ante execução).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ciclado&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;funcao&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nh_PE35v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lg593zeiqkk0odo3aanj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nh_PE35v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lg593zeiqkk0odo3aanj.png" alt="Typescript error because of a calling on a unkown" width="880" height="113"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ou seja, o Transpilador/Compilador do Typescript não vai deixar esse código realmente deixar ser executado, porque, o sistemas de tipo não é capaz de garantir que realmente haja essa função dentro de ciclano.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simples-n%C3%A9-%C2%AF%E3%83%84%C2%AF"&gt;
  &lt;/a&gt;
  Simples né? ¯_(ツ)_/¯
&lt;/h3&gt;

&lt;p&gt;Vem pro meu twitter &amp;amp; muito mais: &lt;a href="https://allmylinks.com/luisvonmuller"&gt;https://allmylinks.com/luisvonmuller&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aqui tem mais conteúdo sobre TypeScript em PT-BR: &lt;a href="https://luisvonmuller.gitbook.io/typescript-para-brasileiros/"&gt;https://luisvonmuller.gitbook.io/typescript-para-brasileiros/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt; Beijão (っ˘з(˘⌣˘ ) &lt;/small&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Triggers en Oracle (campos autoincrementables)</title>
      <author>Adriana Gómez</author>
      <pubDate>Tue, 30 Nov 2021 16:51:02 +0000</pubDate>
      <link>https://dev.to/adrigomez95/triggers-en-oracle-campos-autoincrementables-1gbd</link>
      <guid>https://dev.to/adrigomez95/triggers-en-oracle-campos-autoincrementables-1gbd</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creación de una tabla&lt;/strong&gt;
Primero, debemos tener la tabla con los campos para poder crear su trigger más adelante. Para crear la tabla, lo hacemos desde la interfaz o bien, de la siguiente manera con comandos:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;CREATE TABLE Animales&lt;br&gt;
(id_animal number primary key,&lt;br&gt;
nombre VARCHAR2(25) NOT NULL,&lt;br&gt;
color VARCHAR2(25) NOT NULL);&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creación de una secuencia&lt;/strong&gt; 
Una vez la tabla esté lista, le indicamos con una secuencia, que inicie en 1 y se incremente en 1 cada vez que se vaya a insertar un dato:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;CREATE SEQUENCE canimales&lt;br&gt;
START WITH 1&lt;br&gt;
INCREMENT BY 1;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creación del trigger&lt;/strong&gt; 
Para que el campo 'id_animal' se autoincremente de una manera elegante, utilizaremos el trigger para que se encargue de obtener e insertar el valor de la secuencia automáticamente. La manera correcta de crear uno, es la siguiente:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;CREATE TRIGGER TRIG_ANIMALES&lt;br&gt;
BEFORE INSERT ON Animales&lt;br&gt;
FOR EACH ROW&lt;br&gt;
BEGIN&lt;br&gt;
SELECT canimales.NEXTVAL INTO :NEW.id_animal FROM DUAL;&lt;br&gt;
END;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hH-e37La--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvmysh6kv615ezmsaol4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hH-e37La--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvmysh6kv615ezmsaol4.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Este trigger lo podemos encontrar en la carpeta 'Disparadores' de las propiedades de la tabla:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDnvcI59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tsox5h73gljgscveocw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDnvcI59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tsox5h73gljgscveocw.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Inserción de datos&lt;/strong&gt; 
Listo, ahora podemos insertar datos y cada uno tendrá un id único gracias al trigger:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;INSERT INTO Animales (nombre, color)&lt;br&gt;
VALUES ('Caballo', 'Blanco');&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qud5S5qS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oemj8q2d5d54cvmhjc9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qud5S5qS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oemj8q2d5d54cvmhjc9z.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i_uugZz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m61gdudg5j57jmx2cs86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i_uugZz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m61gdudg5j57jmx2cs86.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>oracle</category>
      <category>programming</category>
      <category>productivity</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Fylamynt and Squadcast Team Up To Handle Cloud Incident Response, Management, and Remediation</title>
      <author>Scott Lasica</author>
      <pubDate>Tue, 30 Nov 2021 16:47:24 +0000</pubDate>
      <link>https://dev.to/youngshatner/fylamynt-and-squadcast-team-up-to-handle-cloud-incident-response-management-and-remediation-2dcg</link>
      <guid>https://dev.to/youngshatner/fylamynt-and-squadcast-team-up-to-handle-cloud-incident-response-management-and-remediation-2dcg</guid>
      <description>&lt;p&gt;As much as every company dreams of cloud operations running perfectly all the time, as even junior operations people know the reality is there are issues, things break, and they have to be dealt with constantly. Savvy operations teams prepare for this eventuality and together with industry leading incident management, incident response and incident remediation tools are able to minimize user facing issues and especially dreaded downtime.&lt;/p&gt;

&lt;p&gt;This is where a modern incident management &amp;amp; response platform like &lt;a href="https://squadcast.com"&gt;Squadcast&lt;/a&gt; comes to the rescue, helping organizations in their journey to deliver super-reliable services. Organizations can quickly and easily adopt Site Reliability Engineering (SRE) practices to improve their incident resolution metrics and ultimately, the reliability of their systems.&lt;/p&gt;

&lt;p&gt;The first step towards doing better incident management is adding enough context to incidents while they get detected. With Squadcast, teams can discover everything they need, to take action and achieve best-in-class MTTD (Mean Time To Detect) with highly configurable features like [alert deduplication and tagging(&lt;a href="https://www.squadcast.com/effective-on-call-and-incident-response"&gt;https://www.squadcast.com/effective-on-call-and-incident-response&lt;/a&gt;), thus facilitating on-call teams to streamline high-priority alerts and stay productive. Teams can also collaborate in real-time with virtual &lt;a href="https://support.squadcast.com/docs/incident-notes"&gt;incident war rooms&lt;/a&gt; on Squadcast to get the right responders virtually in one place making operations transparent.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--giVUGOae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AciUQI_KkjyYa-JQW" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--giVUGOae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AciUQI_KkjyYa-JQW" alt="Squadcast" width="800" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obviously the story doesn’t end once an incident has been created, routed and enriched. The incident still needs to be remediated. This is where Fylamynt steps in as the perfect compliment to Squadcast. Fylamynt provides a no-code, drag and drop interface for building workflows &lt;a href="https://www.fylamynt.com/post/whats-a-runbook"&gt;(runbooks)&lt;/a&gt; that can be triggered by a number of ways, including a Squadcast incident.&lt;/p&gt;

&lt;p&gt;Fylamynt integrates with over 40 commonly used tools for dealing with cloud operation incidents, handling all the API calls and the end result is a fully or partially automated workflow that will run in a consistent manner every time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workflow-as-code"&gt;
  &lt;/a&gt;
  Workflow as Code
&lt;/h2&gt;

&lt;p&gt;We call this “&lt;a href="https://www.fylamynt.com/post/from-ad-hoc-scripting-to-workflow-as-code-the-evolution-of-runbooks"&gt;workflow as code&lt;/a&gt;” because our user interface gets out of your way and lets you switch seamlessly between drag-and-drop and coding scripts in Python and JSON, without loss of information.&lt;br&gt;
You can select from a comprehensive library of connectors and automated actions to connect any part of your cloud. You can select from a list of actions to create a workflow to solve a specific business task such as fixing an incident that caused the website to be down.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fbFb8UJ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AE2RCkh_uSID6HEc6" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fbFb8UJ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AE2RCkh_uSID6HEc6" alt="Fylamynt" width="880" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By automating the parts of the workflow that are the most tedious and time consuming, SRE teams can focus their expertise where it’s needed to make those critical decisions. We call this “&lt;a href="https://www.fylamynt.com/post/human-in-the-loop"&gt;human in the loop&lt;/a&gt;” and this causes the workflow to pause and can send a message through slack or otherwise. The &lt;a href="https://www.fylamynt.com/post/who-are-sres-and-what-do-they-do"&gt;SRE&lt;/a&gt; can then click a link and have all the needed information at their fingertips, allowing them to quickly make the decision on what to do next (could be transferring traffic to a new instance or destroying an instance that was spiking CPU).&lt;/p&gt;

&lt;p&gt;Another added benefit of defining and automating your workflows is that less experienced support engineers can handle more issues, freeing time for the more senior staff as well as repairing issues more quickly.&lt;/p&gt;

&lt;p&gt;Fylamynt also provides a dashboard that shows all executed and currently executing workflows, with tons of detail about every step that ran, what the inputs and outputs were and what branches and actions were taken.&lt;/p&gt;

&lt;p&gt;At this point you can pop back into Squadcast to handle your &lt;a href="https://www.squadcast.com/post-incident-review"&gt;incident postmortem&lt;/a&gt; — the next logical step after any incident is to dissect and analyze the why, how and the what of the incident.  ​Squadcast’s incident postmortem feature helps build an insightful timeline in a matter of minutes. This is especially useful as automation ensures that you can quickly have a system-generated postmortem for pretty much any incident.&lt;/p&gt;

&lt;p&gt;One of the core principles of SRE is Transparency and Squadcast’s &lt;a href="https://www.squadcast.com/statuspage"&gt;Status Page&lt;/a&gt; helps you communicate to customers and stakeholders with real-time updates. By configuring your public-facing services and their dependent components, you can show their status in real-time directly within Squadcast.&lt;/p&gt;

&lt;p&gt;Squadcast’s native &lt;a href="https://www.squadcast.com/mobile-incident-management"&gt;mobile application&lt;/a&gt; also helps in triggering remediations from anywhere. Teams can also connect via APIs to enhance incident response by bringing their entire toolchain into one platform.&lt;/p&gt;

&lt;p&gt;Together Squadcast and Fylamynt provide the end-to-end solution for handling cloud operations incidents, helping your end users to experience a consistently delightful application experience. Teams can practice site reliability engineering through better Incident Management to proactively respond, resolve, and learn from every incident.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.squadcast.com/register"&gt;Try Squadcast Free →&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.fylamynt.com/sign-up"&gt;Try Fylamynt Free →&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://www.squadcast.com/"&gt;Squadcast&lt;/a&gt; is an incident management tool that’s purpose-built for SRE. Your team can get rid of unwanted alerts, receive relevant notifications, work in collaboration using virtual incident war rooms, and automate repetitive tasks to eliminate toil. Organisations can quickly and easily adopt Site Reliability Engineering practices to improve their incident resolution metrics and ultimately, the reliability of their systems.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://fylamynt.com"&gt;Fylamynt&lt;/a&gt; has created the world’s first low code incident response and remediation platform for building, running and analyzing SRE cloud workflows. With Fylamynt an SRE can automate the parts of the runbook that are the most time consuming, allowing them to make decisions where their expertise is needed.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>sre</category>
      <category>devops</category>
      <category>cloudskills</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>30 Common React Interview Questions 🎆</title>
      <author>Abdullah Al Moin</author>
      <pubDate>Tue, 30 Nov 2021 16:45:04 +0000</pubDate>
      <link>https://dev.to/abdullahalmoin/30-common-react-interview-questions-i5k</link>
      <guid>https://dev.to/abdullahalmoin/30-common-react-interview-questions-i5k</guid>
      <description>&lt;p&gt;Do you want to make a career change to something more lucrative? Or have you been putting in a lot of time and effort in preparation for an interview the following weekend? Do you know how many people are rejected in interviews because they only prepare for concepts rather than focusing on the real questions that will be asked? This time, avoid being that person. This is the most comprehensive collection of React JS interview questions you'll ever find. It includes a large number of often requested and crucial React JS interview questions and answers. Freshers, seasoned professionals, senior developers, and testers will benefit from a wide range of questions that cover not only the fundamentals of React JS but also the most advanced and challenging problems. This blog post will guide thoroughly for those who want to practice and enhance their react.js skills. I recommend that you read everything thoroughly beforehand and practice and sharpen your react knowledge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-basics"&gt;
  &lt;/a&gt;
  React Basics
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#1-what-is-the-difference-between-element-and-component"&gt;
  &lt;/a&gt;
  1. What is the difference between Element and Component?
&lt;/h2&gt;

&lt;p&gt;An Element is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. Elements can contain other Elements in their props. Creating a React element is cheap. Once an element is created, it is never mutated. The object representation of React Element would be as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const element = React.createElement(
  'div',
  {id: 'login-btn'},
  'Login'
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above React.createElement() function returns an object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  type: 'div',
  props: {
    children: 'Login',
    id: 'login-btn'
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, it renders to the DOM using ReactDOM.render():&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id='login-btn'&amp;gt;Login&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whereas a component can be declared in several different ways. It can be a class with a render() method or it can be defined as a function. In either case, it takes props as an input, and returns a JSX tree as the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Button = ({ onLogin }) =&amp;gt;
  &amp;lt;div id={'login-btn'} onClick={onLogin}&amp;gt;Login&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then JSX gets transpiled to a React.createElement() function tree:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Button = ({ onLogin }) =&amp;gt; React.createElement(
  'div',
  { id: 'login-btn', onClick: onLogin },
  'Login'
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-how-to-create-components-in-react"&gt;
  &lt;/a&gt;
  2. How to create components in React?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--auks1IYE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gb9okukgww62xa53dsww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--auks1IYE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gb9okukgww62xa53dsww.png" alt="Image description" width="509" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are two possible ways to create a component.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Function Components: This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as first parameter and return React elements:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Greeting({ message }) {
  return &amp;lt;h1&amp;gt;{`Hello, ${message}`}&amp;lt;/h1&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Class Components: You can also use ES6 class to define a component. The above function component can be written as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Greeting extends React.Component {
render() {
  return &amp;lt;h1&amp;gt;{`Hello, ${this.props.message}`}&amp;lt;/h1&amp;gt;
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-what-are-pure-components"&gt;
  &lt;/a&gt;
  3. What are Pure Components?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rsa7dioR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnwscihjpt5ahjn7sxbe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rsa7dioR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnwscihjpt5ahjn7sxbe.png" alt="Image description" width="507" height="197"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React.PureComponent is exactly the same as React.Component except that it handles the shouldComponentUpdate() method for you. When props or state changes, PureComponent will do a shallow comparison on both props and state. Components on the other hand won't compare current props and state to next out of the box. Thus, the component will re-render by default whenever shouldComponentUpdate is invoked.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-what-is-the-state-in-react"&gt;
  &lt;/a&gt;
  4. What is the state in React?
&lt;/h2&gt;

&lt;p&gt;The stateof a component is an object that holds some information that may change over the lifetime of the component. We should always try to make our state as simple as possible and minimize the number of stateful components.Let's create a user component with a message state,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class User extends React.Component {
  constructor(props) {
    super(props)

    this.state = {
      message: 'Welcome to React world'
    }
  }
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;{this.state.message}&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;State is similar to props, but it is private and fully controlled by the component. i.e, It is not accessible to any other component until the owner component decides to pass it.&lt;/p&gt;

&lt;p&gt;What are props in React?&lt;br&gt;
Propsare inputs to components. They are single values or objects containing a set of values that are passed to components on creation using a naming convention similar to HTML-tag attributes. They are data passed down from a parent component to a child component.The primary purpose of props in React is to provide the following component functionality:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pass custom data to your component.&lt;/li&gt;
&lt;li&gt;Trigger state changes.&lt;/li&gt;
&lt;li&gt;Use via this.props.reactProp inside component render() method&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, let us create an element with reactProp property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Element reactProp={'1'} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This react pro (or whatever you came up with) name then becomes a property attached to React's native props object which originally already exists on all components created using React library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;props.reactProp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-what-is-the-difference-between-state-and-props"&gt;
  &lt;/a&gt;
  6. What is the difference between state and props?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UMzAFi4u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du6sajyirs835mlj88wj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UMzAFi4u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du6sajyirs835mlj88wj.png" alt="Image description" width="364" height="116"&gt;&lt;/a&gt;&lt;br&gt;
Both props and state are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to components. Props get passed to the component similar to function parameters whereas the state is managed within the component similar to variables declared within a function.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#7-why-should-we-not-update-the-state-directly"&gt;
  &lt;/a&gt;
  7. Why should we not update the state directly?
&lt;/h2&gt;

&lt;p&gt;If you try to update the state directly then it won't re-render the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Wrong
this.state.message = 'Hello world'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead, usesetState() method. It schedules an update to a component's state object. When the state changes, the component responds by re-rendering.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Correct
this.setState({ message: 'Hello World' })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: You can directly assign to the state object either in theconstructor or using the latest javascript's class field declaration syntax.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-what-is-the-purpose-of-the-callback-function-as-an-argument-of-setstate"&gt;
  &lt;/a&gt;
  8. What is the purpose of the callback function as an argument of setState()?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--72-gwJyH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrru1jpm25garn5e1roc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--72-gwJyH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrru1jpm25garn5e1roc.png" alt="Image description" width="199" height="198"&gt;&lt;/a&gt;&lt;br&gt;
The callback function is invoked when setState finishes and the component gets rendered. Since setState()is asynchronous the callback function is used for any post action.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; It is recommended to use the lifecycle method rather than this callback function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setState({ name: 'John' }, () =&amp;gt; console.log('The name has updated and component re-rendered'))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-what-is-the-difference-between-html-and-react-event-handling"&gt;
  &lt;/a&gt;
  9. What is the difference between HTML and React event handling?
&lt;/h2&gt;

&lt;p&gt;Below are some of the main differences between HTML and React event handling:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In HTML, the event name usually represented in lowercase as a convention:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button onClick={activateLasers}&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whereas in React it follows camelCase&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button onClick={activateLasers}&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;In HTML, you can return false to prevent the default behavior.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href='#' onclick='console.log("The link was clicked."); return false;' /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whereas in React you must call preventDefault() explicitly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleClick(event) {
  event.preventDefault()
  console.log('The link was clicked.')}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;In HTML, you need to invoke the function by appending () Whereas in react you should not append () with the function name. (refer to "activateLasers" function in the first point for example)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#10-how-to-bind-methods-or-event-handlers-in-jsx-callbacks"&gt;
  &lt;/a&gt;
  10. How to bind methods or event handlers in JSX callbacks?
&lt;/h2&gt;

&lt;p&gt;There are 3 possible ways to achieve this:&lt;/p&gt;

&lt;p&gt;Binding in Constructor: In JavaScript classes, the methods are not bound by default. The same thing applies to React event handlers defined as class methods. Normally we bind them in the constructor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Foo extends Component {
  constructor(props) {
    super(props);
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick() {
    console.log('Click happened');
  }
  render() {
    return &amp;lt;button onClick={this.handleClick}&amp;gt;Click Me&amp;lt;/button&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Public class fields syntax: If you don't like to use the bind approach then public class fields syntax can be used to correctly bind callbacks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;handleClick = () =&amp;gt; {
  console.log('this is:', this)
}

&amp;lt;button onClick={this.handleClick}&amp;gt;
  {'Click me'}
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Arrow functions in callbacks: You can use arrow functions directly in the callbacks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;handleClick() {
    console.log('Click happened');
}
render() {
    return &amp;lt;button onClick={() =&amp;gt; this.handleClick()}&amp;gt;Click Me&amp;lt;/button&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; If the callback is passed as a prop to child components, those components might do an extra re-rendering. In those cases, it is preferred to go with the .bind() or public class fields syntax approach considering performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-what-are-synthetic-events-in-react"&gt;
  &lt;/a&gt;
  11. What are synthetic events in React?
&lt;/h2&gt;

&lt;p&gt;SyntheticEvent is a cross-browser wrapper around the browser's native event. Its API is the same as the browser's native event, including stopPropagation() and preventDefault(), except the events work identically across all browsers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---dYurW42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/es4jojvc247fk567clw4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---dYurW42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/es4jojvc247fk567clw4.png" alt="Image description" width="393" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-what-is-the-key-prop-and-what-is-the-benefit-of-using-it-in-arrays-of-elements"&gt;
  &lt;/a&gt;
  12. What is the "key" prop and what is the benefit of using it in arrays of elements?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QmeRKldj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dd7au5qmhllqpqidqzs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QmeRKldj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dd7au5qmhllqpqidqzs.jpg" alt="Image description" width="327" height="202"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A key is a special string attribute you should include when creating arrays of elements.Keyprop helps React identify which items have changed, are added, or are removed.Most often we use the ID from our data askey:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const todoItems = todos.map((todo) =&amp;gt;
  &amp;lt;li key={todo.id}&amp;gt;
    {todo.text}
  &amp;lt;/li&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you don't have stable IDs for rendered items, you may use the itemindex as a key as a last resort:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-what-is-lifting-state-up-in-react"&gt;
  &lt;/a&gt;
  13. What is Lifting State Up in React?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WKtgTiYQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qt372xow00sx7pk6axs4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WKtgTiYQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qt372xow00sx7pk6axs4.png" alt="Image description" width="378" height="348"&gt;&lt;/a&gt;&lt;br&gt;
When several components need to share the same changing data then it is recommended to lift the shared state up to their closest common ancestor. That means if two child components share the same data from its parent, then move the state to parent instead of maintaining local state in both of the child components.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#14-what-are-the-different-phases-of-the-component-lifecycle"&gt;
  &lt;/a&gt;
  14. What are the different phases of the component lifecycle?
&lt;/h2&gt;

&lt;p&gt;The component lifecycle has three distinct lifecycle phases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mounting: The component is ready to mount in the browser DOM. This phase covers initialization from constructor(), getDerivedStateFromProps(), render(), and componentDidMount() lifecycle methods.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updating: In this phase, the component gets updated in two ways, sending the new props and updating the state either from setState() or forceUpdate(). This phase covers getDerivedStateFromProps(), shouldComponentUpdate(), render(), getSnapshotBeforeUpdate() and componentDidUpdate() lifecycle methods.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unmounting: In this last phase, the component is not needed and gets unmounted from the browser DOM. This phase includes the componentWillUnmount() lifecycle method.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's worth mentioning that React internally has a concept of phases when applying changes to the DOM. They are separated as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Render The component will render without any side effects. This applies for Pure components and in this phase, React can pause, abort, or restart the render.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pre-commit Before the component actually applies the changes to the DOM, there is a moment that allows React to read from the DOM through the getSnapshotBeforeUpdate().&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Commit React works with the DOM and executes the final lifecycles respectively componentDidMount() for mounting, componentDidUpdate() for updating, and componentWillUnmount() for unmounting.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#15-what-are-portals-in-react"&gt;
  &lt;/a&gt;
  15. What are portals in React?
&lt;/h2&gt;

&lt;p&gt;Portal is a recommended way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ReactDOM.createPortal(child, container)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first argument is any render-able React child, such as an element, string, or fragment. The second argument is a DOM element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XPFvz2Aq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f5p7qp6yyk4kjk7oitq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XPFvz2Aq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f5p7qp6yyk4kjk7oitq.jpg" alt="Image description" width="408" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#16-what-are-stateless-components"&gt;
  &lt;/a&gt;
  16. What are stateless components?
&lt;/h2&gt;

&lt;p&gt;If the behaviour is independent of its state then it can be a stateless component. You can use either a function or a class for creating stateless components. But unless you need to use a lifecycle hook in your components, you should go for function components. There are a lot of benefits if you decide to use function components here; they are easy to write, understand, and test, a little faster, and you can avoid this keyword altogether.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#17-what-will-happen-if-you-use-props-in-the-initial-state"&gt;
  &lt;/a&gt;
  17. What will happen if you use props in the initial state?
&lt;/h2&gt;

&lt;p&gt;If the props on the component are changed without the component being refreshed, the new prop value will never be displayed because the constructor function will never update the current state of the component. The initialization of state from props only runs when the component is first created.The below component won't display the updated input value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      records: [],
      inputValue: this.props.inputValue
    };
  }
  render() {
    return &amp;lt;div&amp;gt;{this.state.inputValue}&amp;lt;/div&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using props inside the render method will update the value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)

    this.state = {
      record: []
    }
  }

  render() {
    return &amp;lt;div&amp;gt;{this.props.inputValue}&amp;lt;/div&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#react-router"&gt;
  &lt;/a&gt;
  React Router
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#18-what-is-the-purpose-of-push-and-replace-methods-of-history"&gt;
  &lt;/a&gt;
  18. What is the purpose of push() and replace() methods of history?
&lt;/h2&gt;

&lt;p&gt;A history instance has two methods for navigation purposes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VNygEKiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mifmm42l2mbopib7hv83.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VNygEKiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mifmm42l2mbopib7hv83.png" alt="Image description" width="278" height="151"&gt;&lt;/a&gt;&lt;br&gt;
If you think of the history as an array of visited locations, push() will add a new location to the array and replace() will replace the current location in the array with the new one.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#19-how-do-you-programmatically-navigate-using-react-router-"&gt;
  &lt;/a&gt;
  19. How do you programmatically navigate using React Router ?
&lt;/h2&gt;

&lt;p&gt;There are three different ways to achieve programmatic routing/navigation within components.&lt;/p&gt;

&lt;p&gt;Using the withRouter() higher-order function:The withRouter() higher-order function will inject the history object as a prop of the component. This object provides push() and replace() methods to avoid the usage of context.&lt;br&gt;
import { withRouter } from 'react-router-dom' // this also works with 'react-router-native'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Button = withRouter(({ history }) =&amp;gt; (
  &amp;lt;button
    type='button'
    onClick={() =&amp;gt; { history.push('/new-location') }}
  &amp;gt;
    {'Click Me!'}
  &amp;lt;/button&amp;gt;
))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using component and render props pattern:The component passes the same props as withRouter(), so you will be able to access the history methods through the history prop.&lt;br&gt;
import { Route } from 'react-router-dom'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Button = () =&amp;gt; (
  &amp;lt;Route render={({ history }) =&amp;gt; (
    &amp;lt;button
      type='button'
      onClick={() =&amp;gt; { history.push('/new-location') }}
    &amp;gt;
      {'Click Me!'}
    &amp;lt;/button&amp;gt;
  )} /&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using context:This option is not recommended and is treated as an unstable API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Button = (props, context) =&amp;gt; (
  &amp;lt;button
    type='button'
    onClick={() =&amp;gt; {
      context.history.push('/new-location')
    }} &amp;gt;
    {'Click Me!'}
  &amp;lt;/button&amp;gt;
)
Button.contextTypes = {
  history: React.PropTypes.shape({
    push: React.PropTypes.func.isRequired
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#20-how-to-get-query-parameters-in-react-router-v4"&gt;
  &lt;/a&gt;
  20. How to get query parameters in React Router v4?
&lt;/h2&gt;

&lt;p&gt;The ability to parse query strings was taken out of React Router v4 because there have been user requests over the years to support different implementations. So the decision has been given to users to choose the implementation they like. The recommended approach is to use the query strings library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const queryString = require('query-string');
const parsed = queryString.parse(props.location.search);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also use URLSearchParams if you want something native:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const params = new URLSearchParams(props.location.search)
const foo = params.get('name')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should use apply fill for IE11.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-redux"&gt;
  &lt;/a&gt;
  React Redux
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#21-what-are-redux-selectors-and-why-use-them"&gt;
  &lt;/a&gt;
  21. What are Redux selectors and why use them?
&lt;/h2&gt;

&lt;p&gt;Selectorsare functions that take the Redux state as an argument and return some data to pass to the component. For example, to get user details from the state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserData = state =&amp;gt; state.user.data
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These selectors have two main benefits,&lt;/p&gt;

&lt;p&gt;The selector can compute derived data, allowing Redux to store the minimal possible state&lt;/p&gt;

&lt;p&gt;The selector is not recomputed unless one of its arguments changes&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#22-what-are-the-different-ways-to-write-mapdispatchtoprops"&gt;
  &lt;/a&gt;
  22. What are the different ways to write mapDispatchToProps()?
&lt;/h2&gt;

&lt;p&gt;There are a few ways of binding action creatorsto dispatch() in mapDispatchToProps().Below are the possible options:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mapDispatchToProps = (dispatch) =&amp;gt; ({
 action: () =&amp;gt; dispatch(action())
})
const mapDispatchToProps = (dispatch) =&amp;gt; ({
 action: bindActionCreators(actioimport { ADD_TODO } from './actionTypes'
export default (state = [], action) =&amp;gt; {
  switch (action.type) {
    case ADD_TODO:
      return [
        ...state,
        {
          text: action.text,
          completed: false
        }
      ];
    default:
      return state
  }
}
n, dispatch)
})

const mapDispatchToProps = { action }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The third option is just a shorthand for the first one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#23-what-is-the-difference-between-component-and-container-in-react-redux"&gt;
  &lt;/a&gt;
  23. What is the difference between component and container in React Redux?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PO4zXD6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdhubgkw82fkmtsano62.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PO4zXD6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdhubgkw82fkmtsano62.jpg" alt="Image description" width="362" height="157"&gt;&lt;/a&gt;&lt;br&gt;
The component is a class or function component that describes the presentational part of your application.The container is an informal term for a component that is connected to a Redux store. Containerssubscribe to Redux state updates and dispatch actions, and they usually don't render DOM elements; they delegate rendering to presentational child components.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#24-what-is-the-mental-model-of-reduxsaga"&gt;
  &lt;/a&gt;
  24. What is the mental model of redux-saga?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BnS2dQyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e52653kw4p0dyg44cp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BnS2dQyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e52653kw4p0dyg44cp9.png" alt="Image description" width="365" height="330"&gt;&lt;/a&gt;&lt;br&gt;
Saga is like a separate thread in your application, that's solely responsible for side effects. redux-saga is a redux middleware, which means this thread can be started, paused and cancelled from the main application with normal Redux actions, it has access to the full Redux application state and it can dispatch Redux actions as well.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#25-what-are-the-differences-between-call-and-put-in-reduxsaga"&gt;
  &lt;/a&gt;
  25. What are the differences between call() and put() in redux-saga?
&lt;/h2&gt;

&lt;p&gt;Both call() and put() are effect creator functions. call() function is used to create effect description, which instructs middleware to call the promise. put() function creates an effect, which instructs middleware to dispatch an action to the store.Let's take the example of how these effects work for fetching particular user data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function* fetchUserSaga(action) {
  // `call` function accepts rest arguments, which will be passed to `api.fetchUser` function.
  // Instructing middleware to call promise, it resolved value will be assigned to `userData` variable
  const userData = yield call(api.fetchUser, action.userId)

  // Instructing middleware to dispatch corresponding action.
  yield put({
    type: 'FETCH_USER_SUCCESS',
    userData
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#26-what-is-redux-thunk"&gt;
  &lt;/a&gt;
  26. What is Redux Thunk?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oGdTKZtC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n4la8upexml7c1yxk6e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oGdTKZtC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n4la8upexml7c1yxk6e.png" alt="Image description" width="279" height="260"&gt;&lt;/a&gt;&lt;br&gt;
Redux Thunk middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of action or to dispatch only if a certain condition is met. The inner function receives the store methods dispatch() and getState() as parameters.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#27-what-are-redux-selectors-and-why-use-them"&gt;
  &lt;/a&gt;
  27. What are Redux selectors and why use them?
&lt;/h2&gt;

&lt;p&gt;Selectors are functions that take the Redux state as an argument and return some data to pass to the component.For example, to get user details from the state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserData = state =&amp;gt; state.user.data
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These selectors have two main benefits,&lt;/p&gt;

&lt;p&gt;The selector can compute derived data, allowing Redux to store the minimal possible state&lt;/p&gt;

&lt;p&gt;The selector is not recomputed unless one of its arguments changes&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#28-what-is-a-diffing-algorithm"&gt;
  &lt;/a&gt;
  28. What is a diffing algorithm?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G3SsFgXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w99p2elrgvvl271c4der.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G3SsFgXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w99p2elrgvvl271c4der.jpg" alt="Image description" width="298" height="179"&gt;&lt;/a&gt;&lt;br&gt;
React needs to use algorithms to find out how to efficiently update the UI to match the most recent tree. The diffing algorithm is generating the minimum number of operations to transform one tree into another. However, the algorithms have a complexity in the order of O(n3) where n is the number of elements in the tree.In this case, for displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:&lt;/p&gt;

&lt;p&gt;Two elements of different types will produce different trees.&lt;br&gt;
The developer can hint at which child elements may be stable across different renders with a key prop.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#29-is-it-prop-must-be-named-as-render-for-render-props"&gt;
  &lt;/a&gt;
  29. Is it prop must be named as render for render props?
&lt;/h2&gt;

&lt;p&gt;Even though the pattern named render props, you don’t have to use a prop named render to use this pattern. i.e, Any prop that is a function that a component uses to know what to render is technically a “render prop”. Lets take an example with the children prop for render props,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Mouse&amp;gt;  
{mouse =&amp;gt; (
    &amp;lt;p&amp;gt;The mouse position is {mouse.x}, {mouse.y}&amp;lt;/p&amp;gt;
  )}&amp;lt;/Mouse&amp;gt;children={mouse =&amp;gt; (
  &amp;lt;p&amp;gt;The mouse position is {mouse.x}, {mouse.y}&amp;lt;/p&amp;gt;
)}/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Actually children prop doesn’t need to be named in the list of “attributes” in JSX element. Instead, you can keep it directly inside element,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;&amp;lt;Mouse&amp;gt;  
{mouse =&amp;gt; (
    &amp;lt;p&amp;gt;The mouse position is {mouse.x}, {mouse.y}&amp;lt;/p&amp;gt;
  )}&amp;lt;/Mouse&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While using this above technique(without any name), explicitly state that children should be a function in your propTypes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mouse.propTypes = {
  children: PropTypes.func.isRequired
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#30-what-are-the-problems-of-using-render-props-with-pure-components"&gt;
  &lt;/a&gt;
  30. What are the problems of using render props with pure components?
&lt;/h2&gt;

&lt;p&gt;If you create a function inside a render method, it negates the purpose of the pure component. Because the shallow prop comparison will always return false for new props, and each render in this case will generate a new value for the render prop. You can solve this issue by defining the render function as an instance method.&lt;/p&gt;

&lt;p&gt;_Thank You&lt;br&gt;
_&lt;/p&gt;




&lt;p&gt;Credit: Pramit Marattha&lt;br&gt;
&lt;a href="https://dev.to/aviyel/300-react-interview-questions-4dag?utm_source=reactdigest&amp;amp;utm_medium=email&amp;amp;utm_campaign=331"&gt;React Interview Questions&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>"grep" Command In Linux/Unix</title>
      <author>Enes Karataş</author>
      <pubDate>Tue, 30 Nov 2021 16:42:11 +0000</pubDate>
      <link>https://dev.to/bl4ckst0n3/grep-command-in-linuxunix-16nn</link>
      <guid>https://dev.to/bl4ckst0n3/grep-command-in-linuxunix-16nn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#getting-started-with-grep"&gt;
  &lt;/a&gt;
  Getting Started With &lt;em&gt;"grep"&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;➔ This tutorial is written to inform about &lt;em&gt;grep&lt;/em&gt; command and its usage in Linux/UNIX system. In the next tutorials I am planning to share all the commands that I have used before. &lt;/p&gt;

&lt;p&gt;Anyways, let's look at how to use the command. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-grep-command-"&gt;
  &lt;/a&gt;
  How to use &lt;strong&gt;grep&lt;/strong&gt; command ?
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;grep&lt;/em&gt; command is one of the most useful linux command for linux users. It used to search given string or world in a file or process. It takes given string or word and returns including correct match. &lt;/p&gt;

&lt;p&gt;The command is also stands for "&lt;strong&gt;G&lt;/strong&gt;lobally search for a &lt;strong&gt;R&lt;/strong&gt;egular &lt;strong&gt;E&lt;/strong&gt;xpression and &lt;strong&gt;P&lt;/strong&gt;rint it out". There are some useful parameters that &lt;em&gt;grep&lt;/em&gt; takes. We are going to use each other with grep in examples.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;Firstly I've created &lt;em&gt;test.txt&lt;/em&gt; to use as file. The content of this file like following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   linuxuser@ubuntu:~/Desktop$ cat test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Username: User
Password: UserPassword
Name: John
Lastname: Doe
Adress: FakeStreet FakeCountry no: 24 postal: 00000

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To be able to find something in the file the simple usage of command can be used without parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   linuxuser@ubuntu:~/Desktop$ grep Street test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output will be like following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Adress: FakeStreet FakeCountry no: 24 postal: 00000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the terminal command above we searched for the word &lt;em&gt;Street&lt;/em&gt; and get the line including &lt;em&gt;Street&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;We can also use &lt;strong&gt;-i&lt;/strong&gt; parameter to search as &lt;em&gt;case-insensitive&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   linuxuser@ubuntu:~/Desktop$ grep -i stReEt test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output will be the same with first example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Adress: FakeStreet FakeCountry no: 24 postal: 00000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‼️ Note that the &lt;em&gt;grep&lt;/em&gt; function returns us a line where the given string is part of the word such as 'Street' and 'FakeStreet' so that if you want to search the line of the whole word matches you should use &lt;em&gt;-w&lt;/em&gt; parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   linuxuser@ubuntu:~/Desktop$ grep -w Username test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the output below we could see given string in terminal command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Username: User
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To find line number with search result you can use &lt;em&gt;-n&lt;/em&gt; parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   linuxuser@ubuntu:~/Desktop$ grep -n Address test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   5:Address: FakeStreet FakeCountry no: 24 postal: 00000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the output there is line number like "5".&lt;/p&gt;

&lt;p&gt;What if you want to know how many match line after running command ?&lt;br&gt;
Sure there is a parameter to do that. &lt;em&gt;-c&lt;/em&gt; parameter is used to count matches and also stands for &lt;strong&gt;count&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   linuxuser@ubuntu:~/Desktop$ grep -c "User" test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We got output "2" and if you go to content of test.txt you are going to see 2 line matches probably.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;-v&lt;/em&gt; option returns the all lines that don't contain a matches corresponding to the given string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   linuxuser@ubuntu:~/Desktop$ grep -v User test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Name: John
   Lastname: Doe
   Address: FakeStreet FakeCountry no: 24 postal: 00000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are some options like &lt;em&gt;-B&lt;/em&gt; and &lt;em&gt;-A&lt;/em&gt; that mean "BEFORE" and "AFTER" or at least you can think about it like that to make permanent in your mind 😉. So those options are used to get to the previous or next lines of matching lines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   linuxuser@ubuntu:~/Desktop$ grep -A 1 User test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Username: User
   Password: UserPassword
   Name: John
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the output above there is one more line apart of the &lt;em&gt;User&lt;/em&gt; matching lines that is &lt;em&gt;Name: John&lt;/em&gt;. If you put 2 instead of 1 in the command above you probably are going to get two more lines. For instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Username: User
   Password: UserPassword
   Name: John
   Lastname: Doe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try the other one with the same logic. This time we are going to use &lt;em&gt;-B&lt;/em&gt; parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   linuxuser@ubuntu:~/Desktop$ grep -B 2 User test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run out the command above we see the output like below. There are two more line before the matching lines as you can see in the output below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Name: John
   Lastname: Doe
   Address: FakeStreet FakeCountry no: 24 postal: 00000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the examples have been done using file so far. Let's use &lt;em&gt;grep&lt;/em&gt; on different ways. For instance sometimes you use &lt;em&gt;ping&lt;/em&gt; command in the both linux and windows. So you can also use grep with ping command. Let me show an instance here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ping 8.8.8.8 | grep -i ttl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You probably get the same result so each of the successful response lines has ttl value. We need to search something that doesn't exist on each line. Suppose you want to check internet connection via &lt;em&gt;ping&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   linuxuser@ubuntu:~$ping 8.8.8.8 | grep -i "Request timed out"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   linuxuser@ubuntu:~$ ping 8.8.8.8 | grep -i 'request timed out\ | host unreachable'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The both &lt;em&gt;request timed out&lt;/em&gt; and &lt;em&gt;host unreachable&lt;/em&gt; will be searched on this way. You can increase the samples yourself. &lt;/p&gt;

&lt;p&gt;Let's do some searching in the files under the directories.&lt;br&gt;
To make searching under directory you need to use grep as recursively. To be able to do that &lt;em&gt;-r&lt;/em&gt; or &lt;em&gt;-R&lt;/em&gt; options can be used. Let's make a searching for the default router IPs using &lt;em&gt;192.168.1.5&lt;/em&gt; address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   linuxuser@ubuntu:~$ sudo grep -R "192.168.1.5" /etc/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   /etc/ppp/options:# ms-wins 192.168.1.50
   /etc/ppp/options:# ms-wins 192.168.1.51
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The other example would be about your system information. Under the &lt;em&gt;/proc&lt;/em&gt; directory there is a file named &lt;em&gt;cpuinfo&lt;/em&gt; that contains information about your system. It is time to manipulate this file !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   linuxuser@ubuntu:~$ ls /proc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first we've listed the files and directories. Now we are going to write the content of &lt;em&gt;cpuinfo&lt;/em&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   linuxuser@ubuntu:~$ cat /proc/cpuinfo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   processor    : 0
   vendor_id    : GenuineIntel
   cpu family   : 6
   model    : 140
   model name   : 11th Gen Intel(R) Core(TM) i5-1135G7 @ 2.40GHz
   stepping : 1
   microcode    : 0x86
   .
   .
   .
   .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is mine and you will get the result like this. Alright let's search something in this file using &lt;em&gt;grep&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   linuxuser@ubuntu:~$ cat /proc/cpuinfo | grep -i cpu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   cpu family   : 6
   cpu MHz  : 2419.199
   cpu cores    : 1
   cpuid level  : 27
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above we've searched "cpu" word in &lt;em&gt;cpuinfo&lt;/em&gt; file. So the same process also can be done using the command below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   linuxuser@ubuntu:~$ grep -r cpu /proc/cpuinfo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us take a look at what else we can do. We are going to create a bash script file and write something in this file. For instance the informations in the cpuinfo file can be written to another .txt file.&lt;/p&gt;

&lt;p&gt;Creating a bash script file named &lt;em&gt;file_script.sh&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   &lt;span class="nb"&gt;touch &lt;/span&gt;file_script.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Editing on &lt;strong&gt;nano&lt;/strong&gt; editor. That is my choice, you can also use another one else.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   nano file_script.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   &lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

   &lt;span class="k"&gt;function &lt;/span&gt;write_to_file&lt;span class="o"&gt;()&lt;/span&gt;
   &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="s2"&gt;"Enter file name(ex: filename.txt): "&lt;/span&gt; FILENAME
        &lt;span class="nv"&gt;SYSTEMINFO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /proc/cpuinfo | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; name&lt;span class="si"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$SYSTEMINFO&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$FILENAME&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;

   write_to_file
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The content of script file is above and it can be improved more. Once you run out the code file you will need enter the file name where the searching is stored. When you see the inside of the file that you named on script you are going to see the searching result. If you don't want to show the file name while you write then you can use &lt;em&gt;-s&lt;/em&gt; option before &lt;em&gt;-p&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;It is time to the last example now. Consider you have a file containing public domain list and you want to search for domains only containing &lt;em&gt;.com&lt;/em&gt; on this file and extract to the other one.  &lt;/p&gt;

&lt;p&gt;Let's write this script !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="k"&gt;function &lt;/span&gt;extract_domains&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;TARGETFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'extracted.txt'&lt;/span&gt;
        &lt;span class="nv"&gt;FILENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'domains.txt'&lt;/span&gt;
        &lt;span class="nv"&gt;_DOMAINS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="nv"&gt;$FILENAME&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; .com&lt;span class="si"&gt;)&lt;/span&gt;

        &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$_DOMAINS&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$TARGETFILE&lt;/span&gt;

        &lt;span class="nv"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$TARGETFILE&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$FILE&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
                &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$FILE&lt;/span&gt;&lt;span class="s2"&gt; exists. All the domains end with '.com' are extracted !"&lt;/span&gt;
        &lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
extract_domains
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   extracted.txt exists. All the domains end with '.com' are extracted !

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us explain the code above. There is a file named &lt;em&gt;domains.txt&lt;/em&gt; on your current directory. So the file stores public domain list and we've searched all the domains end with &lt;em&gt;.com&lt;/em&gt; on the &lt;em&gt;domains.txt&lt;/em&gt;. All searched domains are written to &lt;em&gt;extracted.txt&lt;/em&gt; and checked if the file exists. If so then the output returned otherwise you would get the output like "file doesn't exists !". &lt;/p&gt;

&lt;p&gt;Thank you so much for reading.&lt;br&gt;
Have a good day !  &lt;/p&gt;

</description>
      <category>linux</category>
      <category>systems</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Why I Love Remix</title>
      <author>Chris Benjamin</author>
      <pubDate>Tue, 30 Nov 2021 16:41:49 +0000</pubDate>
      <link>https://dev.to/chrisbenjamin/why-i-love-remix-1a0i</link>
      <guid>https://dev.to/chrisbenjamin/why-i-love-remix-1a0i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#remix-is-a-react-framework"&gt;
  &lt;/a&gt;
  Remix is a React Framework
&lt;/h2&gt;

&lt;p&gt;Remix launched just last week on Monday, November 22nd. It is taking the React community by storm, but why? Continue reading to find out and even take it for a spin in your browser. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-remix"&gt;
  &lt;/a&gt;
  What is Remix?
&lt;/h2&gt;

&lt;p&gt;Remix is a React Framework that is created by the team at Remix.Run and founded by &lt;a href="https://twitter.com/ryanflorence"&gt;Ryan Florence&lt;/a&gt; and &lt;a href="https://twitter.com/mjackson"&gt;Michael Jackson &lt;/a&gt;. You know, the guys who gave us &lt;a href="https://github.com/remix-run/react-router"&gt;React Router&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-makes-remix-so-special"&gt;
  &lt;/a&gt;
  What makes Remix so special?
&lt;/h2&gt;

&lt;p&gt;Remix is taking us back to the glorious 90s 💿 when web development was still a young child learning how to walk. Those original creators who designed the web framework of retrieving data and manipulating data with methods such as GET, PUSH, PUT were quite genius. Remix is built on the Web Fetch API, which means it can run anywhere, but also means that you are using the fundamentals of web development from the 90s and losing the janky concepts you've come to know such as &lt;code&gt;e.preventdefault()&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-can-you-use-remix"&gt;
  &lt;/a&gt;
  Where can you use Remix?
&lt;/h2&gt;

&lt;p&gt;Remix ran run literally everywhere. You can run it serverless, you can run it in Node.js, you can put it on a Cloudflare Worker, or you can publish directly to Vercel, Netlify, and a variety of other hosting platforms within minutes. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-remix"&gt;
  &lt;/a&gt;
  Why use Remix?
&lt;/h2&gt;

&lt;p&gt;You should use Remix if you are into creating amazing websites with top notch user experience and blazing fast content delivery. It is not a framework for those who love adding transitional spinners on all of their components while they are fetching data because it's just too fast. Remix fetches everything in parallel ‖ instead of the typical Waterfall 💧 approach. Remix also takes care of your State!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remix-nested-routes"&gt;
  &lt;/a&gt;
  Remix Nested Routes
&lt;/h2&gt;

&lt;p&gt;Remix also gives you a super power called nested routes. Why is this so incredible? Remix only loads the nested route that changed, can update just the single nested component that was updated by user interaction, or if a nested route experiences an error you can catch that with an error boundary and provide a helpful message to your use without crashing your whole app. &lt;/p&gt;

&lt;p&gt;Nested Routes also gives you nested CSS styling. You can load CSS only for the page that you are on, and as soon as the user navigates away from that page, the stylesheet is removed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#network-tab"&gt;
  &lt;/a&gt;
  Network tab
&lt;/h2&gt;

&lt;p&gt;If you take a look at the network tab of a Remix project, compared to the project on any other framework you will notice a lot of things are missing! Why is this? Because those geniuses at Remix only bundle and send your user what they actually need for the content on the screen and nothing else, and they remove excess content as soon as it's no longer needed. Remix has it's own cache that makes page reloads faster than Raptor engine on the Starship Rocket 🚀. It reloads anything that hasn't changed from the cache and only fetches new data, it's like magic! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--73nzsG-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erh5pxwv2r8e1va24jxj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--73nzsG-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erh5pxwv2r8e1va24jxj.png" alt="Image description" width="880" height="316"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#turn-off-javascript"&gt;
  &lt;/a&gt;
  Turn off Javascript?!?
&lt;/h2&gt;

&lt;p&gt;Did you know, in most instances of Remix you can actually turn off JavaScript on the browser and the page still works?! This is because Remix renders everything server-side and is built on HTML fundamentals. This isn't to say you shouldn't push client-side JavaScript in your code for user experiences, but the core functions of your app will still work without it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#go-try-remix-and-let-me-know-what-you-think"&gt;
  &lt;/a&gt;
  Go try Remix and let me know what you think!
&lt;/h2&gt;

&lt;p&gt;The amazing folks at CodeSandbox created a platform for trying Remix right from your browser, give it a go &lt;a href="https://codesandbox.io/s/github/remix-run/remix/tree/main/examples/jokes?utm_source=dotnew"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>React Developers Visualize Audio Files With ✨ Tarang </title>
      <author>sudarshan</author>
      <pubDate>Tue, 30 Nov 2021 16:37:44 +0000</pubDate>
      <link>https://dev.to/sudarshansb143/react-developers-visualize-audio-files-with-tarang-3550</link>
      <guid>https://dev.to/sudarshansb143/react-developers-visualize-audio-files-with-tarang-3550</guid>
      <description>&lt;p&gt;Hi Folks,&lt;/p&gt;

&lt;p&gt;Have you ever wondered, how to visualize an 🎧 audio 🎧 in your react app ? or how to snow an animated, beat synced UI for currently playing music ?&lt;/p&gt;

&lt;p&gt;Will explore it in this article &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tarang"&gt;
  &lt;/a&gt;
  🎇 Tarang 🎇
&lt;/h2&gt;

&lt;p&gt;Tarang is a NPM package, which enables the visualization of audio files. It uses D3 based chart and line animations in order to create svg-based visualization.&lt;/p&gt;

&lt;p&gt;By using Tarang, any one can visualize audio files with ease. By enabling beat catch-up and some smooth, glorifying animations Tarang allows us to create superbb... USER experience.&lt;/p&gt;

&lt;p&gt;by using cool animation it does fantastic animation's without adding much overhead in front end apps.&lt;/p&gt;

&lt;p&gt;There are several options currently exposed by Tarang enlisted as  :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Separate Thumbnail image &lt;/li&gt;
&lt;li&gt;Height and width of Thumbnail image &lt;/li&gt;
&lt;li&gt;Control based of representation of audio&lt;/li&gt;
&lt;li&gt;Mute or unmute audio&lt;/li&gt;
&lt;li&gt;Play on focus and stop on unfocus&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#1-bar-visualizations"&gt;
  &lt;/a&gt;
  1. 📊 Bar Visualizations
&lt;/h3&gt;

&lt;p&gt;Bar visualization enables bar-chart like animations. Which can be used as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Tarang&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tarang&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tarang/dist/index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Tarang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bar&lt;/span&gt;
        &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;muted&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;volume&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;audioUrl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url-of-mp3-file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;coverArtUrl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url-of-cover-art-image-file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-line-graph-"&gt;
  &lt;/a&gt;
  2. 📈 Line Graph :
&lt;/h3&gt;

&lt;p&gt;Line visualization enables typical graph-line like animations. Which are created as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Tarang&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tarang&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tarang/dist/index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Tarang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Line&lt;/span&gt;
        &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;muted&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;volume&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;audioUrl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url-of-mp3-file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;coverArtUrl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url-of-cover-art-image-file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Tarang, we can directly use the S3 file urls or any other subsequent urls of asset (i.e. both for music files and thumbnails). &lt;/p&gt;

&lt;p&gt;It is easy to use and compatible with many frontend frameworks like &lt;/p&gt;

&lt;p&gt;Next.js, Gatsby etc.&lt;/p&gt;

&lt;p&gt;Currently, it is still in development, but we can some more interesting stuff in upcoming duration &lt;/p&gt;

&lt;p&gt;Github Link : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/kamalyesh/tarang"&gt;https://github.com/kamalyesh/tarang&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;😇 Thanks for reading... &lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>1 line of code: How to sort an array by descending order</title>
      <author>martin krause</author>
      <pubDate>Tue, 30 Nov 2021 16:30:05 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-sort-an-array-by-descending-order-32nh</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-sort-an-array-by-descending-order-32nh</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sortDesc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Returns a new array sorted by ascending (Numbers). &lt;br&gt;
Beware of JavaScript's Automatic Type Conversion if your &lt;code&gt;Array&lt;/code&gt; contains something else than &lt;code&gt;Numbers&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-repository-amp-npm-package"&gt;
  &lt;/a&gt;
  The repository &amp;amp; npm package
&lt;/h2&gt;

&lt;p&gt;You can find the all the utility functions from this series at &lt;a href="https://github.com/martinkr/onelinecode"&gt;github.com/martinkr/onelinecode&lt;/a&gt;&lt;br&gt;
The library is also published to &lt;a href="https://www.npmjs.com/package/@onelinecode/onelinecode"&gt;npm as @onelinecode&lt;/a&gt; for your convenience.&lt;/p&gt;

&lt;p&gt;The code and the npm package will be updated every time I publish a new article.&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt; and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>performance</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Microservices architecture: The Static Contract Pitfall</title>
      <author>Allan B/H</author>
      <pubDate>Tue, 30 Nov 2021 16:16:16 +0000</pubDate>
      <link>https://dev.to/abarran03/microservices-architecture-the-static-contract-pitfall-2hnn</link>
      <guid>https://dev.to/abarran03/microservices-architecture-the-static-contract-pitfall-2hnn</guid>
      <description>&lt;p&gt;Hi everyone! I would like to show you how &lt;em&gt;&lt;em&gt;The Static Contract pitfall&lt;/em&gt;&lt;/em&gt; could drive APIs to unexpected issues, and how versioning helps to avoid them. For that purpose I will be using &lt;em&gt;&lt;em&gt;O'Reilly's Microservices Antipatterns and Pitfalls&lt;/em&gt;&lt;/em&gt; and Microsoft site related to &lt;em&gt;&lt;em&gt;RESTful web API design&lt;/em&gt;&lt;/em&gt;. References were added at bottom.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-what-is-a-pitfall"&gt;
  &lt;/a&gt;
  But what is a pitfall?
&lt;/h2&gt;

&lt;p&gt;According to Richards (2016) a pitfall is &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;something that was never a good idea, even from the start.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that is the case for &lt;em&gt;&lt;em&gt;The Static Contract pitfall&lt;/em&gt;&lt;/em&gt;. This assumption leads APIs to be not flexible enough for contract changes in front of client applications. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-static-contract-pitfall"&gt;
  &lt;/a&gt;
  The Static Contract Pitfall
&lt;/h2&gt;

&lt;p&gt;Imagine having a REST API endpoint consumed by three different client applications, but one of them needs an extension of a service published. So, the API provider in order to deploy the new changes, requires to check compatibility with the others consumers. Ups! Something goes wrong, the changes imply modifying a JSON contract, then consumers will be impacted and none of them would adapt to those modifications at the same time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f0MtDXG1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gltyq1c4uqlkg5ren0io.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f0MtDXG1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gltyq1c4uqlkg5ren0io.PNG" alt="Many clients consume an API endpoint, and changing this service could be complicated" width="444" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It happens all the time, contracts between providers and consumers are not static. They change very often by adding new features to microservices. However, there are some strategies to keep those issues away and implement backward compatibility without breaking all clients.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#versioning-strategies"&gt;
  &lt;/a&gt;
  Versioning strategies
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#header-versioning"&gt;
  &lt;/a&gt;
  Header versioning
&lt;/h3&gt;

&lt;p&gt;This type of versioning allows to manage the API version by adding the version number in a custom HTTP Header. It requires that client applications use this header to specify which service version will be consumed.&lt;br&gt;
Besides, it is important to consider server-side cache in case every request was stored, here using a proxy could help to reduce duplicated cache data.&lt;br&gt;
In the next example is showed the creation of a new order using an &lt;em&gt;&lt;em&gt;api-version&lt;/em&gt;&lt;/em&gt; specified in the &lt;em&gt;&lt;em&gt;Custom-Header&lt;/em&gt;&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;POST https://enterprise.domain.com/orders/123  
Custom-Header: api-version=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#uri-versioning"&gt;
  &lt;/a&gt;
  URI versioning
&lt;/h3&gt;

&lt;p&gt;This technique consist in defining the version of an API in the uniform resource identifier (URI). It makes very clear to know which version will be consumed for client applications. &lt;br&gt;
For instance, choosing a version of a service used to retrieve an order could be done by &lt;em&gt;&lt;em&gt;v1&lt;/em&gt;&lt;/em&gt; or any custom standard. &lt;br&gt;
It is relevant to mention that this implementation makes harder to follow &lt;a href="https://en.wikipedia.org/wiki/HATEOAS"&gt;HATEOS&lt;/a&gt; constraint because all links associated to resources should have defined their correct version number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET https://enterprise.domain.com/v1/orders/123  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#query-string-versioning"&gt;
  &lt;/a&gt;
  Query string versioning
&lt;/h3&gt;

&lt;p&gt;Regarding to this versioning strategy, the version goes in the query string parameter. In that case, it is recommended to establish a default version number when a client misses sending this parameter. The following example uses &lt;em&gt;&lt;em&gt;?version=3&lt;/em&gt;&lt;/em&gt; as query string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET https://enterprise.domain.com/orders/123?version=3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As URI strategy, the previous approach has the same issue related to implementation of HATEOS. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mediatype-versioning"&gt;
  &lt;/a&gt;
  MediaType versioning
&lt;/h3&gt;

&lt;p&gt;Finally, very closed to header versioning practice, MediaType needs to be sent in the &lt;em&gt;&lt;em&gt;Accept Content Type Header&lt;/em&gt;&lt;/em&gt;. Provider is responsible for handling all possible format responses with their defined versions. For example, deleting an order could be performed if version were specified in &lt;em&gt;&lt;em&gt;Accept header&lt;/em&gt;&lt;/em&gt; along format response required.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DELETE https://enterprise.domain.com/orders/123 
Accept: application/vnd.enterprise.domain.com.v2+json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  tl;dr
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Versioning strategy&lt;/th&gt;
&lt;th&gt;Location&lt;/th&gt;
&lt;th&gt;Some Considerations&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Header&lt;/td&gt;
&lt;td&gt;Custom HTTP header&lt;/td&gt;
&lt;td&gt;Server-side cache issues&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;URI&lt;/td&gt;
&lt;td&gt;Properly as part of URI&lt;/td&gt;
&lt;td&gt;Very simple and clear which version is used&lt;br&gt;Makes harder to implement HATEOAS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Query String&lt;/td&gt;
&lt;td&gt;Query string param of URI&lt;/td&gt;
&lt;td&gt;Should be defined a default version value &lt;br&gt; Makes harder to implement HATEOAS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mediatype&lt;/td&gt;
&lt;td&gt;Accept Http header&lt;/td&gt;
&lt;td&gt;Handle all possible format responses with their defined versions &lt;br&gt; Server-side cache issues&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Microservices have became an extended practice in software architecture, from those implementations have emerged many lesson to learn and for this reason there are several antipatterns and pitfalls to take in consideration. Learning from the experience of the others and having in mind those best practices is crucial to build a strong architecture. Here is important to evaluate the options and choose the best one according to context.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;Richards, M. (2016). Microservices Antipatterns and Pitfalls. CA: O’Reilly Media.&lt;/p&gt;

&lt;p&gt;Microsoft (2021). RESTful web API design. Retrieve from &lt;a href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design"&gt;https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design&lt;/a&gt; &lt;/p&gt;

</description>
      <category>microservices</category>
      <category>beginners</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Phishing Campaigns And YouTube Creators</title>
      <author>Meera Mathews</author>
      <pubDate>Tue, 30 Nov 2021 16:11:18 +0000</pubDate>
      <link>https://dev.to/meeramathews/phishing-campaigns-and-youtube-creators-2cg4</link>
      <guid>https://dev.to/meeramathews/phishing-campaigns-and-youtube-creators-2cg4</guid>
      <description>&lt;p&gt;Phishing attacks are one of the most common forms of cyberattacks leveraged by cybercriminals.&lt;/p&gt;

&lt;p&gt;The latest disclosing of Google’s Threat Analysis Group (TAG) has disrupted financially motivated phishing campaigns targeting YouTubers with Cookie Theft malware. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cookie-theft"&gt;
  &lt;/a&gt;
  Cookie theft
&lt;/h2&gt;

&lt;p&gt;Cookie theft occurs when a third party copies unencrypted session data and uses it to impersonate the real user. Cookie theft most often occurs when a user accesses trusted sites over an unprotected or public Wi-Fi network. It occurs when a person mimicks a person’s cookie over the same network, thus a hacker can access sites and perform malicious actions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phishing-campaigns-and-youtube-creators"&gt;
  &lt;/a&gt;
  Phishing campaigns and YouTube creators
&lt;/h2&gt;

&lt;p&gt;The phishing campaigns targets many YouTube creators by sending forged business emails to their email which they have provided in their channel. They impersonate as an existing company requesting a video advertisement collaboration. When the link is clicked, it would infect their computer using a variety of malware programs, usually designed to steal cookies and passwords. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;More detailed version of how you can be safe from cookie thefts&lt;br&gt;
 published at: &lt;a href="https://beaglesecurity.com/blog/article/cookie-theft-youtube-phishing-campaign.html"&gt;https://beaglesecurity.com/blog/article/cookie-theft-youtube-phishing-campaign.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>security</category>
    </item>
  </channel>
</rss>
