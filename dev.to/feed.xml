<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Javascript: Les opérateurs ...spread et ...REST </title>
      <author> Eric Le Codeur</author>
      <pubDate>Thu, 24 Jun 2021 14:04:04 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/javascript-les-operateurs-spread-et-rest-1a3a</link>
      <guid>https://dev.to/ericlecodeur/javascript-les-operateurs-spread-et-rest-1a3a</guid>
      <description>&lt;p&gt;Si vous désirez plus de contenu francophone comme celui-ci, cliquer &lt;strong&gt;Follow ou &lt;a href="https://twitter.com/EricLeCodeur"&gt;suivez-moi sur Twitter&lt;/a&gt;&lt;br&gt;
&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Définition&lt;/h2&gt;

&lt;p&gt;Opérateur &lt;em&gt;Spread&lt;/em&gt; : Permet de déconstruire les itérables (tableaux/objets/chaînes) en éléments uniques.&lt;/p&gt;

&lt;p&gt;Opérateur &lt;em&gt;Rest&lt;/em&gt;: Rassemble tous les éléments restants dans un tableau.&lt;/p&gt;

&lt;h2&gt;Exemples Spread Operator&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Paul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour déconstruire un tableau&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ['Mike', 'Paul', 'John']&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Mike Paul John&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour modifier/ajouter à un tableau&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;David&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;// ['Jack', 'Mike', 'Paul', 'John', 'David']&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour copier un tableau&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copyNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour joindre 2 tableaux&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;numbers1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;numbers2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour les strings également&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// ['M', 'i', 'k', 'e']&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator comme paramêtres d'une fonction&lt;/span&gt;
&lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num4&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// sans spread operator&lt;/span&gt;
&lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// avec spread operator&lt;/span&gt;
&lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le spread operator pour déconstruire les objects&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Taylor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Utiliser le spread operator pour copier les valeurs d'un object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// // Utiliser le spread operator pour étendre un object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;creditLimit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;h2&gt;Exemples REST operator&lt;/h2&gt;

&lt;p&gt;Le REST operator fonctionne selon le même principe que le spread operator mais du côté gauche du '=' &lt;/p&gt;

&lt;p&gt;Le REST operator permet de déconstuire l'assignation&lt;/p&gt;

&lt;p&gt;Le REST operator doit être utiliser comme dernière assignation&lt;/p&gt;

&lt;p&gt;Toutes les valeurs non assigné (avant l'ajout du REST) seront envoyé dans le REST&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;others&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;others&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1, 2, [3, 4, 5]&lt;/span&gt;

&lt;span class="c1"&gt;// Même principe avec les objects&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Taylor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;
&lt;span class="c1"&gt;// personName va assigner le "rest" des properties non utilisées&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 25, { firstName: 'Mike', lastName: 'Taylor' }&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le REST operator pour capter tous les paramètres&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Le REST operator va rassembler tous les paramètre dans un tableau&lt;/span&gt;
&lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2]&lt;/span&gt;
&lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2, 3]&lt;/span&gt;
&lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2, 3, 4]&lt;/span&gt;

&lt;span class="c1"&gt;// Utiliser le REST operator pour capter tous les autres paramètres:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mainText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mainText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;option3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Exemple, tous les autres paramètres après mainText se retrouverons dans options&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mainText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mainText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Homework Hacks: 10 Tips To Get SAS Tasks Done Faster </title>
      <author>allanweb</author>
      <pubDate>Thu, 24 Jun 2021 13:56:06 +0000</pubDate>
      <link>https://dev.to/allanweb/homework-hacks-10-tips-to-get-sas-tasks-done-faster-2pbj</link>
      <guid>https://dev.to/allanweb/homework-hacks-10-tips-to-get-sas-tasks-done-faster-2pbj</guid>
      <description>&lt;p&gt;Studying coding assumes overworking and facing continuous tension. Students are not always ready for such an enormous schedule and strict deadlines they have to face after enrolling in a programming course. Some students choose to get support from coding services requesting, "Please, &lt;a href="https://mycodinghomework.com/do-my-sas-homework/"&gt;do my SAS programming homework&lt;/a&gt;." However, proactive students who already have enough experience coping with a vast amount of coding tasks have many working hacks. We collected these tips to share with you to help you to get your tasks done faster. Read on to get more helpful information below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understand-the-task"&gt;
  &lt;/a&gt;
  Understand the task
&lt;/h2&gt;

&lt;p&gt;You would require reading the details of your future SAS program first. Usually, professors provide students with detailed instructions that contain information on the goals and requirements. Do not begin working if some points of the task are left unclear for you. If you would start working without understanding the assignment, you could be forced to remake it. That is why we recommend always asking your professor for any minor points regarding the task.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plan-your-time"&gt;
  &lt;/a&gt;
  Plan your time
&lt;/h2&gt;

&lt;p&gt;There is a lot of effectiveness in the quality pre-planning of your working time. Your life would become much easier with a habit of exact scheduling periods for your working activities. The best way to develop such a habit is to begin planning small actions such as working on your SAS homework. If you want to be effective and fast when coping with your programming assignments, take time to resolve all your time management issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apply-for-the-help-of-a-programming-service"&gt;
  &lt;/a&gt;
  Apply for the help of a programming service
&lt;/h2&gt;

&lt;p&gt;Some students are as much overloaded with their SAS tasks that they do not have enough time to complete them all. We recommend using a working and effective solution for such pity situations and apply to a coding support service. By writing a request, you would speedily receive a reply from a skilled expert. Prominent experts in coding can resolve any SAS task efficiently and effectively. You would be surprised by finding out how many students reach out to support such services and save their GPA regularly. It is a working and confidential way to get your tasks done faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-breaks"&gt;
  &lt;/a&gt;
  Take breaks
&lt;/h2&gt;

&lt;p&gt;Your effectiveness would be boosted if you would take breaks each hour. This advice may sound unobvious as when you are running out of time and want to finish your task faster, you treasure every minute. To be motivated and feel comfortable while working, we recommend you take breaks each hour. Small 10-15 minute breaks would be better to spend fresh breathing air, walking in the park, drinking clean water, etc. The process of SAS programming would become plain if you took rest regularly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comment-codes"&gt;
  &lt;/a&gt;
  Comment codes
&lt;/h2&gt;

&lt;p&gt;When you are completing SAS homework and need to cope with the assignment fast, commenting is not the main thing you are thinking about. However, we do not recommend you skip this vital step of coding. Your teacher would get your points much easier thanks to comments, and it would sufficiently influence your grade points. In addition, by developing skills and a habit to comment on your codes. Even in half a year, you would easily recall the core points of the code thanks to comments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simplify-the-processes"&gt;
  &lt;/a&gt;
  Simplify the processes
&lt;/h2&gt;

&lt;p&gt;To become faster at completing your SAS tasks, you would require to keep it as simple as possible when it comes to process. The approach of skilled SAS coders is in continuous revising of their programs to simplify them. Take a critical look at your task when it would be done. Some steps might be unnecessary or doubled. By reducing them, you would keep it plain. Another working hack from skilled coders is to define which of the code elements you can combine to make a function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-pseudocodes"&gt;
  &lt;/a&gt;
  Use pseudocodes
&lt;/h2&gt;

&lt;p&gt;When it comes to SAS programming assignments, you can sufficiently economize time and boost effectiveness by using pseudocodes and algorithms. Before you create the final version of a programming solution, you can write it in the form of pseudocode previously. It would help you to avoid errors, and the work would be done much more accessible. In other words, pseudocode is an algorithm that describes each step you have to complete while finishing your coding task. It can be compared to a draft of a paper that you write in text form. You do not need to pay a lot of attention to syntax at the stage of creating pseudocode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-care-of-your-surrounding"&gt;
  &lt;/a&gt;
  Take care of your surrounding
&lt;/h2&gt;

&lt;p&gt;Your working place must be clean, quiet, and comfortable. Look for a room where you could sit and work alone without loud voices and sounds from the street. If you cannot work quietly in your room, go to the library with your laptop and find a table that would guarantee you privacy for at least 3-4 hours. A peaceful and calm atmosphere would make you very productive, and you would be able to finish tasks faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drink-enough-water-and-eat-healthily"&gt;
  &lt;/a&gt;
  Drink enough water and eat healthily
&lt;/h2&gt;

&lt;p&gt;Your motivation correlates with your physical condition more than you could imagine. Keep your body well hydrated by drinking enough water and regularly eating when working on your tasks. When the human brain does not get enough energy that comes with quality nutrition, your cognitive functions become worse. So take care of your body to stay in the working mood and cope with your tasks faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-well-motivated"&gt;
  &lt;/a&gt;
  Be well motivated
&lt;/h2&gt;

&lt;p&gt;Understand your goals and keep in mind the path that would lead to their achievement. Your motivation is crucial when it comes to complex SAS assignments. If you are willing to become a proficient coder, you must understand why you are learning this course and how your life would change for to better if you finish your work successfully. For example, you can think about your future career in an IT company of your dream.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;We believe these homework hacks and tips to get your tasks done faster were helpful for you. To make the process efficient and speedy, you would require planning your steps before. In addition, simplifying steps and combining some of the program elements to function would make the program better. By using pseudocodes, you would sufficiently ease the process as well. Do not forget to take care of your working place and take breaks regularly. Note that motivation is the key to success and understand your goals.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>programming</category>
      <category>codequality</category>
    </item>
    <item>
      <title>How to wrap a Preact component into a Stimulus controller</title>
      <author>rhymes</author>
      <pubDate>Thu, 24 Jun 2021 13:51:54 +0000</pubDate>
      <link>https://dev.to/devteam/how-to-wrap-a-preact-component-into-a-stimulus-controller-1bd0</link>
      <guid>https://dev.to/devteam/how-to-wrap-a-preact-component-into-a-stimulus-controller-1bd0</guid>
      <description>&lt;p&gt;In this post I'm going to illustrate the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wrapping a Preact component inside a Stimulus controller&lt;/li&gt;
&lt;li&gt;loading Preact and the component asynchronously on demand&lt;/li&gt;
&lt;li&gt;communicating with the wrapped component via JavaScript &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent"&gt;custom events&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is partly based on work &lt;a class="mentioned-user" href="https://dev.to/s_aitchison"&gt;@s_aitchison&lt;/a&gt;
 did &lt;a href="https://github.com/forem/forem/pull/12511"&gt;last February on Forem&lt;/a&gt;. Forem's public website uses Preact and vanilla JavaScript. Some of Forem's Admin views are using Stimulus. This is an example of how to recycle frontend components from one framework to another.&lt;/p&gt;

&lt;p&gt;I'm also assuming the reader has some familiarity with both Preact and Stimulus.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-the-component"&gt;
  &lt;/a&gt;
  Wrapping the component
&lt;/h2&gt;

&lt;p&gt;Yesterday I was working on some Admin interactions and I wanted to reuse &lt;a href="https://storybook.dev.to/?path=/story/app-components-snackbar-snackbar--simulate-adding-snackbar-items"&gt;Forem's &lt;code&gt;Snackbar&lt;/code&gt; component&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nh7pDfx---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3oipmo4hf7jv0zo0ype.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nh7pDfx---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3oipmo4hf7jv0zo0ype.png" alt="Example of Snackbar component in action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How it is implemented inside Preact is not important for our purposes and I haven't checked either, I just know its module exports &lt;code&gt;Snackbar&lt;/code&gt; and a function &lt;code&gt;addSnackbarItem&lt;/code&gt; to operate it.&lt;/p&gt;

&lt;p&gt;As the screenshot shows, it is similar to &lt;a href="https://material.io/components/snackbars"&gt;Material's &lt;code&gt;Snackbar&lt;/code&gt; component&lt;/a&gt;, as it provides &lt;em&gt;brief messages about app processes at the bottom of the screen&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With that in mind and with the groundwork laid by Suzanne Aitchison on &lt;a href="https://github.com/forem/forem/blob/main/app/javascript/admin/controllers/modal_controller.js"&gt;a different component&lt;/a&gt;, I wrote the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stimulus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Wraps the Preact Snackbar component into a Stimulus controller&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SnackbarController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snackZone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Snackbar&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
      &lt;span class="c1"&gt;// eslint-disable-next-line import/no-unresolved&lt;/span&gt;
      &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Snackbar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Snackbar&lt;/span&gt; &lt;span class="nx"&gt;lifespan&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;snackZoneTarget&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;snackZoneTarget&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Any controller (or vanilla JS) can add an item to the Snackbar by dispatching a custom event.&lt;/span&gt;
  &lt;span class="c1"&gt;// Stimulus needs to listen via this HTML's attribute: data-action="snackbar:add@document-&amp;gt;snackbar#addItem"&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addCloseButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;addSnackbarItem&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Snackbar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;addSnackbarItem&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addCloseButton&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's go over it piece by piece.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defining-a-container"&gt;
  &lt;/a&gt;
  Defining a container
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snackZone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most Preact components need a container to render in. In Stimulus lingo we need to define a "target", which is how the framework calls important HTML elements referenced inside its controller (the main class to organize code in).&lt;/p&gt;

&lt;p&gt;This is defined as a regular HTML &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in the page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-snackbar-target=&lt;/span&gt;&lt;span class="s"&gt;"snackZone"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the controller, this element can be accessed as &lt;code&gt;this.snackZoneTarget&lt;/code&gt;. &lt;a href="https://stimulus.hotwire.dev/reference/targets"&gt;Stimulus documentation has more information on targets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;snackZone&lt;/em&gt; is just how the &lt;code&gt;Snackbar&lt;/code&gt;'s container is called inside Forem's frontend code, I kept the name :D)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mounting-and-unmounting-the-component"&gt;
  &lt;/a&gt;
  Mounting and unmounting the component
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Snackbar&lt;/code&gt; component, when initialized, doesn't render anything visible to the user. It waits for a message to be added to the stack of disappearing messages that are shown to the user after an action is performed. For this reason, we can use Stimulus lifecycle callbacks to mount it and unmount it.&lt;/p&gt;

&lt;p&gt;Stimulus &lt;a href="https://stimulus.hotwire.dev/reference/lifecycle-callbacks"&gt;provides two aptly named callbacks&lt;/a&gt;, &lt;code&gt;connect()&lt;/code&gt; and &lt;code&gt;disconnect()&lt;/code&gt;, that we can use to initialize and cleanup our Preact component.&lt;/p&gt;

&lt;p&gt;When the Stimulus controller is attached to the page, it will call the &lt;code&gt;connect()&lt;/code&gt; method, in our case we take advantage of this by loading Preact and the Snackbar component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Snackbar&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Snackbar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Snackbar&lt;/span&gt; &lt;span class="nx"&gt;lifespan&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;snackZoneTarget&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we accomplish the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;asynchronously load Preact, importing &lt;a href="https://preactjs.com/guide/v10/api-reference#render"&gt;its renderer function&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;asynchronously load &lt;a href="https://storybook.dev.to/?path=/story/app-components-snackbar-snackbar--simulate-adding-snackbar-items"&gt;Forem's &lt;code&gt;Snackbar&lt;/code&gt; component&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;rendering the component inside the container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To be "good citizens" we also want to clean up when the controller is disconnected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;snackZoneTarget&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This destroys Preact's component whenever Stimulus unloads its controller from the page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communicating-with-the-component"&gt;
  &lt;/a&gt;
  Communicating with the component
&lt;/h3&gt;

&lt;p&gt;Now that we know how to embed Preact into Stimulus, how do we send messages? This is where the JavaScript magic lies :-)&lt;/p&gt;

&lt;p&gt;Generally, good software design teaches us to avoid coupling components of any type, regardless if we're talking about JavaScript modules, Ruby classes, entire software subsystems and so on.&lt;/p&gt;

&lt;p&gt;JavaScript's &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events#adding_custom_data_%E2%80%93_customevent"&gt;CustomEvent Web API&lt;/a&gt; comes to the rescue.&lt;/p&gt;

&lt;p&gt;With it it's possible to lean in the standard pub/sub architecture that JavaScript developers are familiar with: an element listens to an event, handles it with a handler and an action on another element triggers an event. The first element is the subscriber, the element triggering the event is the publisher.&lt;/p&gt;

&lt;p&gt;With this is mind: what are Stimulus controllers if not also global event subscribers, reacting to changes?&lt;/p&gt;

&lt;p&gt;First we need to tell Stimulus to listen to a custom event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt;
  &lt;span class="na"&gt;data-controller=&lt;/span&gt;&lt;span class="s"&gt;"snackbar"&lt;/span&gt;
  &lt;span class="na"&gt;data-action=&lt;/span&gt;&lt;span class="s"&gt;"snackbar:add@document-&amp;gt;snackbar#addItem"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;data-controller="snackbar"&lt;/code&gt; attaches Stimulus &lt;code&gt;SnackbarController&lt;/code&gt;, defined in the first section of this post, to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; of the page.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;data-action="snackbar:add@document-&amp;gt;snackbar#addItem"&lt;/code&gt; instructs the framework to listen to the custom event &lt;code&gt;snackbar:add&lt;/code&gt; on &lt;code&gt;window.document&lt;/code&gt; and when received to send it to the &lt;code&gt;SnackbarController&lt;/code&gt; by invoking its &lt;code&gt;addItem&lt;/code&gt; method acting as en event handler.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;addItem&lt;/code&gt; is defined as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addCloseButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;addSnackbarItem&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Snackbar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;addSnackbarItem&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addCloseButton&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The handler extracts, from the event custom payload, the message and a boolean that, if true, will display a button to dismiss the message. It then imports the method &lt;code&gt;addSnackbarItem&lt;/code&gt; and invokes it with the correct arguments, to display a message to the user.&lt;/p&gt;

&lt;p&gt;The missing piece in our "pub/sub" architecture is the published, that is given us for free via the Web API &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent"&gt;&lt;code&gt;EventTarget.dispatchEvent&lt;/code&gt;&lt;/a&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snackbar:add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MESSAGE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snackbar:add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MESSAGE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;addCloseButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snackbar:add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MESSAGE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;addCloseButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The great advantage is that the publisher doesn't need to inside Stimulus at all, it can be any JavaScript function reacting to an action: the network, the user or any DOM event.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;CustomEvent&lt;/code&gt; interface is straightforward and flexible enough that can be used to create more advanced patterns like the, now defunct, &lt;a href="https://v3.vuejs.org/guide/migration/events-api.html#events-api"&gt;Vue Events API&lt;/a&gt; which provided a global event bus in the page, out of scope for this post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bEpy1gKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qerjfpqnqg5ekushl114.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bEpy1gKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qerjfpqnqg5ekushl114.gif" alt="Video demo of Snackbar wrapped in Stimulus and invoked via dispatchEvent"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this showed you a strategy of reuse when you're presented with multiple frameworks that have to interact with each other on a page.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>preact</category>
      <category>stimulus</category>
    </item>
    <item>
      <title>How To make your css text look impressive</title>
      <author>Orange_Abstrakt</author>
      <pubDate>Thu, 24 Jun 2021 13:45:43 +0000</pubDate>
      <link>https://dev.to/orange_abstrakt/how-to-make-your-css-text-look-impressive-1p3l</link>
      <guid>https://dev.to/orange_abstrakt/how-to-make-your-css-text-look-impressive-1p3l</guid>
      <description>&lt;p&gt;Headings, titles, subheadings etc tell the user about your website. They also take up a lot of the space. So naturally to attract more people and to make your website much more aesthetically beautiful and impressive you can style your text.&lt;/p&gt;

&lt;p&gt;Now which style should you choose?&lt;br&gt;
This totally depends on your likes and dislikes. Try a few and see which one goes best with your site. Now without any further ado lets see some simple yet amazing ways of styling your html text.&lt;/p&gt;

&lt;p&gt;1) Gradient Text&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SKbN0vJe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9e1ovi4ou7dyjg51lcn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SKbN0vJe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9e1ovi4ou7dyjg51lcn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gradients add a certain feel to your website that really makes your site stand out. Now changing the background to a gradient is fairly simple and common knowledge. Text Gradients can be slightly trickier but they are totally worth it.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Orange_abstrakt/embed/XWMLoOG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Once you have picked the font and set the size you can start coding your gradient text.&lt;br&gt;
~The background property can be set to linear-gradient(color1, color2).&lt;br&gt;
~Then we clip the gradient to the text. The “background-clip: text” is supported in all main browsers with the Webkit prefix, it allows a background image to be clipped by a text element.&lt;br&gt;
~Finally you remove the text fill color by setting it to transparent.&lt;/p&gt;

&lt;p&gt;2) LED-text&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LzMeQTJM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7dnjajdrslsrk7fg90j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LzMeQTJM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7dnjajdrslsrk7fg90j.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This gives the element an Led-like feel and really helps bring your site to life.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Orange_abstrakt/embed/NWpZoPY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Set the size for your text and select a font. I usually use Brush Script mt for this style as it really adds to the LED theme. Once done set the color(white looks the best). &lt;br&gt;
Now comes the interesting part. Using the text-shadow property we can very easily Make our LED text.&lt;br&gt;
Now the text shadow takes in maximum 4 values. the first is the x-offset, second is the y-offset, 3rd is the blur radius and finally the color. &lt;br&gt;
For this effect we want the shadow to be at the same position as the text therefore the first 2 values are 0px. Then we add a blur radius of 7px, 10px and 21px and set the color to white. This makes the center bright. Now we add a shadow of a color of our choice with larger blur radii.&lt;/p&gt;

&lt;p&gt;That is all for today. Let me know if you want more text designs. This is my first post on this website so I wanted to keep it short and see the feedback. &lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>html</category>
      <category>design</category>
    </item>
    <item>
      <title>React vs Angular vs Vue (briefly)</title>
      <author>Rudolf Cicko</author>
      <pubDate>Thu, 24 Jun 2021 13:28:31 +0000</pubDate>
      <link>https://dev.to/cicko/react-vs-angular-vs-vue-briefly-52jn</link>
      <guid>https://dev.to/cicko/react-vs-angular-vs-vue-briefly-52jn</guid>
      <description>&lt;p&gt;Angular is a framework, while React and Vue are libraries, therefore angular is heavier than the other two, due to its big codebase. The Angular’s core contains most of the functionalities you might need in your application, while with React and Vue, you have to find external libraries, maintained by independent contributors. Therefore, when working with React and Vue, you have to be more careful when choosing libraries, being aware that libraries with a poor maintenance might be deprecated in future.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#coding-style"&gt;
  &lt;/a&gt;
  Coding style
&lt;/h1&gt;

&lt;p&gt;To build an app with Angular you have to learn Typescript, which is a superset of JavaScript, while with Vue and React you can use pure JS. Regarding the view, with Angular and Vue you write it with HTML, where in React you have to write JSX, which is a syntax that allows coexistence between HTML and JS. Thus, Angular and Vue are ideal if you want to reuse HTML from a huge codebase.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#model"&gt;
  &lt;/a&gt;
  Model
&lt;/h1&gt;

&lt;p&gt;Vue and React use a Virtual DOM (VDOM), which is a node tree listing content, and elements and their attribute as objects and properties. The browser DOM is not updated directly but instead, they use the VDOM as abstraction layer. On the other hand, Angular is based on the MVC pattern and manipulates the DOM directly. Changes in your application will update it without any middleware.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#state"&gt;
  &lt;/a&gt;
  State
&lt;/h1&gt;

&lt;p&gt;As common, when creating our apps, the components will have their scoped state, and Angular, and Vue works in a way that the data is mutable. User inputs and code can modify the state directly. In React, the state is immutable. To update it, you have to use a specific function that will do it asynchronously.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#community"&gt;
  &lt;/a&gt;
  Community
&lt;/h1&gt;

&lt;p&gt;Angular and React have a powerful community behind. Angular was created by Google, and React by Facebook. Therefore, both have longer life expectancy. Whereas Vue, is an open source project, created by Evan You. Nevertheless, Vue gained a huge fame, because the creator’s idea was to take the best of the other two. From Angular, it took similar templates with good syntax, and from React, it got many features, specially the component-based approach. Vue is actively maintained, with almost 300 contributors and supported by many big companies.&lt;/p&gt;

</description>
      <category>react</category>
      <category>angular</category>
      <category>vue</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Databunker - a new vault project</title>
      <author>Yuli</author>
      <pubDate>Thu, 24 Jun 2021 13:19:42 +0000</pubDate>
      <link>https://dev.to/stremovsky/databunker-a-new-vault-project-30pc</link>
      <guid>https://dev.to/stremovsky/databunker-a-new-vault-project-30pc</guid>
      <description>&lt;p&gt;Today, I'm really excited to share the #opensource project we've been working on at &lt;a href="https://privacybunker.io/"&gt;Privacybunker.io&lt;/a&gt; for a while – &lt;a href="https://github.com/securitybunker/databunker"&gt;Databunker&lt;/a&gt;🚀🚀🚀!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Databunker&lt;/strong&gt; is a special secure vault for customer records. It is easy to integrate with the existing code. And it matches the needs of &lt;strong&gt;privacy by design compliance&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It can be easily integrated with existing #CRMs, #email marketing services, #e-commerce web-sites, #HR systems and #Node.js applications.&lt;/p&gt;

&lt;p&gt;It allows following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Seamless encryption of customer data. You can easily lookup user records by the field: email, phone, token, custom index without exposing customer PII/data in clear text.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automatic privacy compliance in accordance with GDPR / CPRA requirements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To provide secure storage for personal data.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Developing a new project? Want to target European customers? Look no further! Our product solves compliance in the most cost-effective way: &lt;a href="https://databunker.org/"&gt;https://databunker.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We would really appreciate your reviews and will be happy to assist with any questions by mail: &lt;a href="mailto:office@privacybunker.io"&gt;office@privacybunker.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>datasecurity</category>
      <category>privacy</category>
      <category>cybersecurity</category>
      <category>gdpr</category>
    </item>
    <item>
      <title>3 Most Important Metrics For Engineering Team Performance</title>
      <author>Alex Omeyer</author>
      <pubDate>Thu, 24 Jun 2021 13:04:14 +0000</pubDate>
      <link>https://dev.to/alexomeyer/3-most-important-metrics-for-engineering-team-performance-3743</link>
      <guid>https://dev.to/alexomeyer/3-most-important-metrics-for-engineering-team-performance-3743</guid>
      <description>&lt;p&gt;Capturing different metrics will help you to measure and visualise your engineering team’s performance. This article discusses three different metrics you can measure to detect problems like lack of ownership during code reviews, &lt;a href="https://www.stepsize.com/blog/complete-guide-to-technical-debt"&gt;technical debt&lt;/a&gt;, or choking points with key team members. Therefore, let’s look at how we can improve your team’s performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#three-important-metrics-to-measure-engineering-team-performance"&gt;
  &lt;/a&gt;
  Three Important Metrics to Measure Engineering Team Performance
&lt;/h2&gt;

&lt;p&gt;Here are three important metrics you can measure to understand your engineering team’s current performance. On top of that, these metrics form an excellent basis for further improving your engineering team’s performance by continuously measuring their performance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-lead-time"&gt;
  &lt;/a&gt;
  1. Lead Time
&lt;/h3&gt;

&lt;p&gt;Lead time refers to the time needed from feature description to feature implementation in the production environment. It’s a great metric to evaluate the smoothness of your engineering processes.&lt;/p&gt;

&lt;p&gt;For instance, processes that cause a lot of friction, lack ownership, or don’t have a clear description will negatively affect the lead time. The level of automation is another crucial element that determines your engineering team’s lead time. For that reason, it’s a must-have metric to track your overall performance.&lt;/p&gt;

&lt;p&gt;On top of that, your lead time can help your product team plan new features and their capacity. It helps them to make realistic feature roadmaps and allows for clear communication to your clients. Also, a realistic roadmap puts less pressure on your developers, which is good for the overall mood and retention. &lt;a href="https://www.bizjournals.com/bizwomen/news/latest-news/2017/07/tech-turnover-high-and-so-is-the-stress.html?page=all"&gt;High developer stress&lt;/a&gt; is one of the primary reasons why developers decide to look for an alternative job.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-number-of-pull-requests-prs-vs-story-points"&gt;
  &lt;/a&gt;
  2. Number of Pull Requests (PRs) vs. Story Points
&lt;/h3&gt;

&lt;p&gt;Some teams prefer to count the number of PRs developers complete per sprint. However, it’s not a great metric to measure because it doesn’t represent your team’s actual velocity. On top of that, it’s not a fair metric as some developers prefer to create smaller PRs, and senior developers will often complete more PRs. The same is valid for counting the number of commits per sprint. It’s not a metric that you can easily compare week by week.&lt;/p&gt;

&lt;p&gt;Therefore, it’s better to assign story points to each issue so you can measure the total number of story points you complete per sprint. You can then map this number week by week to get a graph.&lt;/p&gt;

&lt;p&gt;Story points provide an effective way to detect &lt;a href="https://www.stepsize.com/blog/tools-to-track-and-manage-technical-debt"&gt;technical debt&lt;/a&gt;. In other words, measuring sprint velocity is a great strategy to make technical debt more visible. It’s important to quickly detect the on-ramp of technical debt as it has a significant impact on your team’s performance in the long run.&lt;/p&gt;

&lt;p&gt;To make technical debt visible, add bookmarks and TODOs to your code, and collaborate with your team on maintenance work, try out &lt;a href="https://bit.ly/3vVZsis"&gt;Stepsize VS Code&lt;/a&gt; and &lt;a href="https://bit.ly/3gZ6OeF"&gt;JetBrains extensions&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-time-to-complete-a-code-review"&gt;
  &lt;/a&gt;
  3. Time to Complete a Code Review
&lt;/h3&gt;

&lt;p&gt;You may have many automated processes to deploy your code to a test environment and run tests against it. However, code reviews can still slow you down. Therefore, you should measure the time needed to complete a code review.&lt;/p&gt;

&lt;p&gt;Often, &lt;a href="https://www.codementor.io/blog/linkedin-code-reviews-6i3q5anpvp"&gt;pull requests lack clear ownership&lt;/a&gt;, or the process lacks clear acceptance criteria. In these situations, teams don’t know when a pull request is ready to be accepted or not. This uncertainty will slow down the review process.&lt;/p&gt;

&lt;p&gt;Also, many teams have more experienced developers who take care of most code reviews. They can easily get overwhelmed by all the pull requests they have to review besides their work. It’s a major blocker for development teams who put too much stress on their senior developers. For that reason, it’s important to diversify the knowledge across multiple developers so not only your senior developers are responsible for accepting pull requests.&lt;/p&gt;

&lt;p&gt;In short, track who’s doing code reviews and how long it takes to accept pull requests into your codebase. It will help you to understand choking points that slow down your team’s code review completion time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-improve-your-engineering-teams-productivity"&gt;
  &lt;/a&gt;
  How to Improve Your Engineering Team’s Productivity?
&lt;/h2&gt;

&lt;p&gt;Here is a list of items to take note of to improve your engineering team’s productivity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clear-ownership"&gt;
  &lt;/a&gt;
  Clear Ownership
&lt;/h3&gt;

&lt;p&gt;When doing a code review, it’s essential to tag the right people to review your code. As a best practice, you want to tag at least one person that has a good understanding of the part of the codebase you’re working on. Moreover, you should tag at least one other developer who knows less about this specific code so they can review if the code meets the style guide and acceptance criteria. &lt;/p&gt;

&lt;p&gt;This approach makes sure that at least one other developer learns about a specific part of the code to avoid technical debt. Many teams lack clear ownership for code reviews because they don’t know who to tag for their review. Avoid this at all costs!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#internal-documentation"&gt;
  &lt;/a&gt;
  Internal Documentation
&lt;/h3&gt;

&lt;p&gt;Internal documentation explains key concepts like your &lt;a href="https://medium.com/@nvashanin/documentation-in-software-architecture-4f2e4159c4fc"&gt;project’s architecture&lt;/a&gt;, tools, and technologies. On top of that, it should be a living document that reflects the current state of your codebase.&lt;/p&gt;

&lt;p&gt;Documentation helps your team to make better strategic decisions about your code and &lt;a href="https://www.stepsize.com/blog/the-engineers-complete-guide-to-code-quality"&gt;improve your code quality&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6gzUxnth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o66821vq1vf726247xh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6gzUxnth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o66821vq1vf726247xh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#retrospective-meetings-to-boost-knowledge-sharing"&gt;
  &lt;/a&gt;
  Retrospective Meetings to Boost Knowledge Sharing
&lt;/h3&gt;

&lt;p&gt;Weekly or bi-weekly &lt;a href="https://www.visual-paradigm.com/scrum/what-is-sprint-retrospective-meeting/#:~:text=The%20retrospective%20session%20is%20basically,and%20optionally%20with%20the%20stakeholders."&gt;retrospective meetings&lt;/a&gt; allow your team to share progress updates and technical knowledge. Often, teams will pick one or multiple developers to showcase important code snippets or architectural design decisions that affect all developers in your team. It’s a great moment to actively share knowledge in an informal setting.&lt;/p&gt;

&lt;p&gt;Often, junior developers perceive a barrier in regards to asking for additional explanations from senior developers. Therefore, a retrospective meeting can remove this barrier and boost knowledge sharing across your team.&lt;/p&gt;

&lt;p&gt;Lastly, retrospective meetings help teams to discuss problems and propose solutions. For instance, a particular pull request took seven days to merge instead of the maximum three-day rule. You try to reason what went wrong and draw conclusions from the mistake. Each meeting should have a couple of working points for the team to review during the next meeting to see if the problem has been resolved and the team improved its performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started"&gt;
  &lt;/a&gt;
  How to Get Started?
&lt;/h2&gt;

&lt;p&gt;Don’t expect immediate results from measuring several metrics related to your team’s performance. It’s important to consistently measure these metrics and plot them on a graph to get better insights. You’ll only be able to draw conclusions after a couple of weeks of collecting data. It’s a big mistake to give up early on measuring team performance data because you don’t see immediate results or can’t conclude.&lt;/p&gt;

&lt;p&gt;If you want to improve your personal productivity, I highly recommend checking out these &lt;a href="https://dev.to/alexomeyer/10-must-have-vs-code-extensions-to-improve-your-productivity-4goe"&gt;10 VS Code extensions&lt;/a&gt; that my engineering team is using.&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>codenewbie</category>
      <category>management</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Software Engineers Need to Know DevOps Too, and That Starts with CI/CD</title>
      <author>Tyler Hawkins</author>
      <pubDate>Thu, 24 Jun 2021 13:00:55 +0000</pubDate>
      <link>https://dev.to/thawkin3/software-engineers-need-to-know-devops-too-and-that-starts-with-ci-cd-47n8</link>
      <guid>https://dev.to/thawkin3/software-engineers-need-to-know-devops-too-and-that-starts-with-ci-cd-47n8</guid>
      <description>&lt;p&gt;DevOps is hot right now. It seems like every software engineering job posting requires DevOps experience and expertise regardless of the actual job title.&lt;/p&gt;

&lt;p&gt;When a tech company breaks up its monolith into microservices, each of its engineering teams now owns their portion of the application from start to finish. Software engineers no longer just build the application; they also own repo maintenance, set up continuous integration, configure build pipelines, and deploy their application.&lt;/p&gt;

&lt;p&gt;In this world of cross-functional teams and microservice architecture, DevOps skills become increasingly important, and that starts with understanding CI/CD (continuous integration, continuous delivery, and continuous deployment).&lt;/p&gt;

&lt;p&gt;In this article we’ll talk about best practices for CI/CD and how platforms like&lt;a href="https://www.armory.io/"&gt; Armory&lt;/a&gt; can help manage some of the complexity involved.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#continuous-integration-ci"&gt;
  &lt;/a&gt;
  Continuous Integration (CI)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.atlassian.com/continuous-delivery/continuous-integration"&gt;Continuous integration (CI)&lt;/a&gt; is the “practice of automating the integration of code changes from multiple contributors into a single software project.”&lt;/p&gt;

&lt;p&gt;As multiple developers are merging code into the master branch daily, it’s important to have automated checks in place to ensure that the code is always in a good working state. This means that code formatters, code linters, and unit tests should be run prior to merging new code. Rather than relying on developers to remember to use these tools locally, CI pipelines help automate running each required job, preventing bad code from being merged into the master branch.&lt;/p&gt;

&lt;p&gt;Good CI pipelines should be fast. That means running pipeline jobs in parallel when possible and having a fast test suite.&lt;/p&gt;

&lt;p&gt;Good CI pipelines should also be reliable. If the build is broken, engineers should work to fix it immediately, as a build failure would block all open merge requests from being merged. If a test is flaky, it should be temporarily disabled and fixed as soon as possible.&lt;/p&gt;

&lt;p&gt;The app should be built once near the beginning of the CI pipeline, after any formatters, linters, and unit tests are run. This way, the build artifact is ready to be used anywhere in subsequent stages of the pipeline. The build artifact can then be deployed in a containerized environment and used as a review app for code reviewers to quickly validate changes when needed.&lt;/p&gt;

&lt;p&gt;When CI pipelines are successfully set up for a code repo, developers can commit to the master branch daily (or even several times per day). No more long-running feature branches that live for months waiting for the day that they can finally be merged!&lt;/p&gt;

&lt;p&gt;Following these CI practices helps keep everything in the master branch clean and in a deployable state at all times, which leads us to the second half of the CI/CD acronym.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#continuous-delivery-and-continuous-deployment-cd"&gt;
  &lt;/a&gt;
  Continuous Delivery and Continuous Deployment (CD)
&lt;/h2&gt;

&lt;p&gt;As a brief aside, let’s talk about the &lt;a href="https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment"&gt;differences between “continuous delivery” and “continuous deployment.”&lt;/a&gt; Continuous delivery is a natural result of generating a build artifact as part of continuous integration. This build artifact is a working copy of the app that can be deployed to an environment. That means, you’re ready to deploy to production anytime! As an engineering organization, you can decide whether to deploy daily, weekly, every two weeks, and so on. In continuous delivery, while you’re prepared to deploy your app at any moment, a human still needs to kick off the process to start the deployment.&lt;/p&gt;

&lt;p&gt;Continuous &lt;em&gt;deployment&lt;/em&gt;, however, goes a step further than continuous delivery in that every change that gets merged into the master branch will immediately begin the deployment process without any further human interaction. This is exciting because developers can see their code in production just minutes after they’ve merged it! (Assuming, of course, that the deployment isn’t blocked by any failing automated checks which would prevent the new build from being released into the production environment.)&lt;/p&gt;

&lt;p&gt;Whether your organization chooses continuous delivery or continuous deployment, the intent of both practices is the same: deliver value to your customers as quickly and as frequently as possible. No more big quarterly releases! This is what being agile is all about.&lt;/p&gt;

&lt;p&gt;One of the most important things to get right with continuous delivery is that the app should be able to be deployed with the click of a single button. In other words, the deployment process should be automated. If this practice isn’t followed, and there are multiple complicated steps in the deployment process that must be carried out by a human, the deployment process becomes more prone to error. After all, we are human, and humans make mistakes.&lt;/p&gt;

&lt;p&gt;Another key principle of both continuous delivery and continuous deployment is that you should use multiple levels of environments in which the app can run. For instance, you might have a development environment, a staging environment, and a production environment. The build artifact can then be promoted from one environment to the next during the deployment process. The infrastructure in these various environments should be as similar as possible so that you don’t run into major surprises once the app gets into production.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#deployment-strategies"&gt;
  &lt;/a&gt;
  Deployment Strategies
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://cloud.google.com/architecture/application-deployment-and-testing-strategies"&gt;Deployment strategies&lt;/a&gt; can vary, but some commonly used techniques are canary deployments, blue/green deployments, and rolling blue/green deployments.&lt;/p&gt;

&lt;p&gt;In a &lt;strong&gt;canary deployment&lt;/strong&gt;, you first release the new version of your app to a small subset of users. Once you are comfortable that the changes work properly for those users, you release the changes to the rest of your users as well. This is considered a cautious way to release code as you don’t initially apply the changes for everyone all at once.&lt;/p&gt;

&lt;p&gt;In a &lt;strong&gt;blue/green deployment&lt;/strong&gt;, you use two production-grade environments. One environment is actively used in production and contains the current version of the app. The second environment is on standby and has no traffic routed to it. You deploy the new version of your app to the standby environment and then route all traffic to this environment, which makes it the new production environment. The old production environment then no longer receives traffic and becomes the standby environment. This makes it very easy both to deploy a new release and also to rollback a release when needed, because both processes are as simple as redirecting where the user traffic goes.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;rolling blue/green deployment&lt;/strong&gt; can be used when you have multiple instances of your application all running in the same environment. For example, if you have six nodes used in production, swap out the first node with another node that is running the new version of the application. So, now you have five nodes running the old version of the app and one node running the new version of the app. Then you do it again so that the ratio becomes four old and two new. After four more node replacements, now all six of your nodes are running the new version of the application.&lt;/p&gt;

&lt;p&gt;The rolling nature of the deployment is both a pro and a con. The deployment is less risky as you don’t deploy everything at once, but it also takes more time to complete the full release since it’s done one node at a time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8m33FnTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82l5mfdbi5pxv8gemo00.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8m33FnTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82l5mfdbi5pxv8gemo00.png" alt="Various deployment strategies"&gt;&lt;/a&gt;&lt;/p&gt;
Various deployment strategies (Source: &lt;a href="https://spinnaker.io/concepts/"&gt;https://spinnaker.io/concepts/&lt;/a&gt;)






&lt;h2&gt;
  &lt;a href="#how-tools-can-help-with-cicd"&gt;
  &lt;/a&gt;
  How Tools Can Help with CI/CD
&lt;/h2&gt;

&lt;p&gt;Now that we understand best practices for CI/CD, what tools can we use to help us? For CI, there are many good open source options like &lt;a href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt; or&lt;a href="https://circleci.com/"&gt; CircleCI&lt;/a&gt;. You can even use the built-in features of GitHub (with &lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt;) or GitLab (with &lt;a href="https://docs.gitlab.com/ee/ci/"&gt;GitLab CI&lt;/a&gt;). Most of these tools specialize in the CI part of CI/CD but also include some features for CD. With these CI tools, you can create pipelines that take care of running your linters and tests on every new merge request.&lt;/p&gt;

&lt;p&gt;When it comes to CD, one of the most popular open source tools that helps automate deployments is &lt;a href="https://spinnaker.io/"&gt;Spinnaker&lt;/a&gt;. Spinnaker was originally developed internally by Netflix before it was released to the broader developer community. One of the best things about Spinnaker is its flexibility in supporting just about every cloud provider from AWS to Azure to GCP. Spinnaker can be integrated with your CI tool of choice and can deploy your app using your chosen deployment strategy. (I already mentioned that it’s flexible, right?)&lt;/p&gt;

&lt;p&gt;An example pipeline for a canary deployment using Spinnaker might look a little something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C4N3ofUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ganiqvqiblwno7scyl9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C4N3ofUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ganiqvqiblwno7scyl9v.png" alt="Canary deployment strategy pipeline"&gt;&lt;/a&gt;&lt;/p&gt;
Canary deployment strategy pipeline (Source: &lt;a href="https://spinnaker.io/concepts/"&gt;https://spinnaker.io/concepts/&lt;/a&gt;)



&lt;p&gt;In this workflow, we see the build artifact deployed to a small cluster of server groups for the initial canary deployment. After the functionality changes in the canary deployment have been manually reviewed and approved, a blue/green deployment is done (or red/black deployment as Netflix calls it) by deploying a new prod cluster and using the load balancer to direct traffic to this new group. The canary cluster is then torn down, and — after everyone is comfortable that the new prod cluster is working well — the old prod cluster is destroyed, too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.armory.io/armory-spinnaker/"&gt;Armory&lt;/a&gt; is a platform that takes this idea one step further by providing an enterprise-grade offering of Spinnaker for better &lt;a href="https://www.armory.io/armory-enterprise-spinnaker/"&gt;visibility, developer empowerment, and resilience&lt;/a&gt;. Armory’s dashboards, logging, and live metrics help give developers more visibility into their app deployments. With much of the complexity abstracted away into a nice GUI, deployments and rollbacks can be executed with the click of a button. This enables even those developers without much DevOps experience to own their app from start to finish. And just to give you an added measure of confidence, &lt;a href="https://www.armory.io/armory-enterprise-spinnaker/policy-engine/"&gt;Armory’s Policy Engine&lt;/a&gt; allows you to configure guardrails to ensure that every deployment follows your company’s best practices and agreed-upon rules.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So, what have we learned? First, developers need to be acquainted with CI/CD best practices. Second, engineering organizations need to provide their developers with the right tools to help increase productivity and reduce errors. As we’ve seen, one of the best tools used for CD is Spinnaker, now enhanced by Armory. By working together to implement these DevOps principles, engineering teams will have greater confidence in their code and will be enabled to deliver value to their customers faster.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>webdev</category>
      <category>programming</category>
      <category>armory</category>
    </item>
    <item>
      <title>How we made the chat widget accessible for people with visual impairments</title>
      <author>Oliwia Połeć</author>
      <pubDate>Thu, 24 Jun 2021 12:48:58 +0000</pubDate>
      <link>https://dev.to/livechat/how-we-made-the-chat-widget-accessible-for-people-with-visual-impairments-41d0</link>
      <guid>https://dev.to/livechat/how-we-made-the-chat-widget-accessible-for-people-with-visual-impairments-41d0</guid>
      <description>&lt;p&gt;Matching colors to achieve the minimum WCAG contrast score might be perceived as a simple task. After all, there are plenty of free tools available — from websites like &lt;a href="https://colourcontrast.cc/" rel="nofollow"&gt;colourcontrast&lt;/a&gt; to design tool plugins for &lt;a href="https://www.figma.com/community/plugin/748533339900865323/Contrast" rel="nofollow"&gt;Figma&lt;/a&gt; or &lt;a href="https://cluse.cc/" rel="nofollow"&gt;Sketch&lt;/a&gt; — that can help you calculate the proper color contrast for your designs. In our case the challenge was to solve contrast problems when colors can be customized by the users. In this article we want to share what we have learned and how we build accessible color palettes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-start"&gt;
  &lt;/a&gt;
  Where to start?
&lt;/h2&gt;

&lt;p&gt;Start by doing an audit using Google Lighthouse, or you can find a tool that will fit your needs in this article. Gathering together issues related to low color contrast and grouping them into those which can be fixed quickly and those which will require special solutions was very helpful and speeded up the whole process. The low-hanging fruit was fixing the contrast between elements that don't inherit a primary color and also fixing the contrast between surfaces. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R_JfnNcY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7zp12yfg1v6ukkrm7d6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R_JfnNcY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7zp12yfg1v6ukkrm7d6.png" alt="LiveChat accessibility color issues"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They were easy to resolve because we decided that some components will always have a set of fixed color values, and thanks to that we can easily predict the contrast in relation to the different surfaces. By doing an audit and refining each element individually, we recreated our new grayscale palette.&lt;/p&gt;

&lt;p&gt;Do an audit using specialized tools, and group issues based on their level of difficulty.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance-over-preference"&gt;
  &lt;/a&gt;
  Performance over Preference
&lt;/h2&gt;

&lt;p&gt;Take a look at these two buttons:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GzeduQG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf9zahxml9xm2w8fd3cy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GzeduQG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf9zahxml9xm2w8fd3cy.png" alt="LiveChat accessibility buttons comparison"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which one is more appealing to you?&lt;/p&gt;

&lt;p&gt;I assume that the button on the left might look more appealing to most respondents; however, working with accessibility in mind is not a matter of preferences — it’s simply down to performance. If I want to measure the button's performance, my question should be: Do you have a problem reading any of those buttons? Then filter out everyone who can read both and focus only on people who have a hard time reading any of the buttons. There is a thin line in matching colors for the button such that they fulfill WCAG guidelines and the button still looks the way most people expect to see it. Those expectations of specific color combinations might exist because people just get used to them, but changing the combinations to have a contrast score of at least 4:5:1 won't bother anyone that much, and it might help others to better perceive the interface. Our eyes and vision change over time, just like the rest of our bodies. Some people experience age-related vision changes that interfere with their ability to see clearly for reading and other close vision tasks. We don't know what the exact demographic of chat widget end-users is. However, the chats' scale is approximately 1.5 million per day; so there was a risk that a significant number of users might have problems when interacting with the LiveChat Widget.&lt;/p&gt;

&lt;p&gt;It's important not to rely solely on the WCAG math for calculating contrast. You can strive for the best score and readability by tweaking colors, but at the end of the day, testing it with real users or doing the accredited accessibility audit is a must.&lt;/p&gt;

&lt;p&gt;Eliminate your personal bias on preferred color combinations and remember that you are designing it for ALL users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRizmjJ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/544h5q01ey0ya331mown.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRizmjJ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/544h5q01ey0ya331mown.png" alt="LiveChat accessibility improved buttons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#framer-polishedjs-to-the-rescue"&gt;
  &lt;/a&gt;
  Framer + polished.js to the rescue
&lt;/h2&gt;

&lt;p&gt;Nowadays, design tools offer several ways to solve inaccessible color problems. You can install a plugin to your favorite design tool and test many color combinations one by one. However, it might be a time-consuming task, especially if you provide color customization in your app, so why not automate this process? Framer, a tool that combines both code and design, was a lifesaver when designing elements that inherit primary colors. The tool allows you to use mechanisms that function in the actual code environment. We've used one of those available mechanisms, from the polished.js package. Thanks to this package, we could test for accessible colors on many components simultaneously.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eMXhXIfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgc3gz28jedp52p66umm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eMXhXIfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgc3gz28jedp52p66umm.gif" alt="LiveChat accessibility framer colors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see how the components and the contrast score changes when tweaking the primary color. It speeds up the whole process dramatically. The cool thing is that we have also implemented this package inside the Chat Widget code, so the design and production are based on the same environment. The important thing is that when the user customizes the primary color of the widget, the system relies on the polished.js mechanism. This matches whichever text or icon color (black or white) scores the highest. Because of this, users might even get black text on a blue button if white text would only achieve a minimum 4:5:1 contrast ratio for that particular blue background. The way we measure combination contrast is not perfect, because the WCAG guidelines, as the name suggests, are just recommendations, and I believe that the proper math for color calculation that mirrors human perception is yet to be invented. Still, we think it’s better to have this automation than always having white be the foreground to a primary color.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5RBmIwxP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p6kix9alsuf6cgbavol.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5RBmIwxP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p6kix9alsuf6cgbavol.gif" alt="LiveChat color changing in Agent App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-accessible-colors-have-to-be-ugly"&gt;
  &lt;/a&gt;
  Do accessible colors have to be ugly?
&lt;/h2&gt;

&lt;p&gt;Statements about ugly accessible colors might be a consequence of the high contrast modes you may have seen over time on various websites.&lt;/p&gt;

&lt;p&gt;It's easy to make a false assumption about accessible colors if you're just starting with the topic and you've seen too many of those websites. Another thing is that perceiving color is a subjective matter. When we think about the color being beautiful, it only exists in our heads as a pleasant feeling. However, a fairly useful method would be to observe the most popular colors on the web. I think that for the sake of argument, we can call popular colors appealing. After all, they are popular for a reason. Gather and refine those colors by increasing or decreasing their lightness so they will have a minimum 4:5:1 foreground to background contrast ratio. For example, if you want to fix an inaccessible color, decide whether you want to darken the background and lighten the foreground or do the opposite — lighten the background and darken the foreground. Both ways are good; use whatever works for your design to achieve a good contrast score.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uveQiy_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbx2aks9y0nq9rxagtci.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uveQiy_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbx2aks9y0nq9rxagtci.png" alt="LiveChat accessibility high contrast mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have decided to make the theme colors slightly darker so that all our predefined theme colors work well as a background to a white foreground. We didn't want to include colors with high luminance, like yellow or orange, in a predefined set of colors because combining them with white surfaces results in low contrast. Users still have a choice if none of those five colors meet their expectations. They can pick whatever color they want as a primary color, and we will adjust the text color on the messages and buttons. Achieving the proper text color is done automatically by the polished.js library. In short, whatever color you pick, polished will match the text color, white or black, depending on which combination contrast score is the highest.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZptCyyCQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/re5s7teko8v6xzznegr2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZptCyyCQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/re5s7teko8v6xzznegr2.png" alt="LiveChat accessibility predefined colors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#two-problems-at-once"&gt;
  &lt;/a&gt;
  Two problems at once
&lt;/h2&gt;

&lt;p&gt;Working on accessible colors in LiveChat Widget was an excellent opportunity to tidy up the code and create a single source of truth for design tokens. The term “design tokens” refers to properties like colors, font sizes, spacings, and even transitions. The main premise of having organized design tokens, especially colors, is to maintain consistency within the application. Synchronizing colors between design and code will also help you keep the product palette accessible (automated checks) and predictable; so if you have the opportunity to do that, go for it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pay-attention-to-focus"&gt;
  &lt;/a&gt;
  Pay attention to :focus
&lt;/h2&gt;

&lt;p&gt;You are probably familiar with that blue border that appears from time to time when you scroll through websites. Those elements are called focus indicators. Some people don't like that browsers add them by default to components like inputs or buttons because it interferes with their website/app design, so they remove them in the CSS. If you want to build an inclusive product, you should not use &lt;code&gt;{ outline: none; }&lt;/code&gt; on focusable elements globally for the whole website or app. Instead of deleting the outline completely, you can show a focus indicator that originates from keyboard interaction but that is not present with pointer device interaction. Also, make sure that the color you use for the focus indicator properly contrasts with the backgrounds. It is also good to add a small gap between the focused element and the component using the &lt;code&gt;{ outline-offset }&lt;/code&gt; property for better visibility.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ry--42iH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ybaxksawk9c9pw3urir.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ry--42iH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ybaxksawk9c9pw3urir.png" alt="LiveChat accessibility buttons focus"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapup"&gt;
  &lt;/a&gt;
  Wrap-up
&lt;/h2&gt;

&lt;p&gt;You may be overwhelmed by the number of color issues the audit can reveal; but don’t worry, very often the same color relations are repeated across the app. Like in any other case, planning is very important. Break down all issues into groups and categorize them based on similarity and difficulty. Choose your tools when it comes to design, development, and testing. There are plenty of tools and libraries which can speed up the whole process.&lt;/p&gt;

&lt;p&gt;Key takeaways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Start with an audit&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Eliminate personal bias toward preferred colors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t rely solely on the WCAG math for contrast calculations. Test the combinations with real users&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Accessible color palettes can be appealing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Working on accessible colors is an opportunity to tidy up your design system&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a proper focus indicator and show it when needed&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>a11y</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>List of Best GitHub Repos for Web Developers</title>
      <author>Stacksjar</author>
      <pubDate>Thu, 24 Jun 2021 12:44:10 +0000</pubDate>
      <link>https://dev.to/stacksjar/list-of-best-github-repos-for-web-developers-2jip</link>
      <guid>https://dev.to/stacksjar/list-of-best-github-repos-for-web-developers-2jip</guid>
      <description>&lt;p&gt;In this post we are going to check best GitHub Repositories for Web Developers to learn fundamentals of Coding and Boost Productivity. List of the most Useful GitHub Repos are as below&lt;/p&gt;

&lt;p&gt;Read Complete Article Here:- &lt;a href="https://stacksjar.com/post/best-github-repos-for-web-developers"&gt;https://stacksjar.com/post/best-github-repos-for-web-developers&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Pseudo-classes and pseudo-elements </title>
      <author>Garima</author>
      <pubDate>Thu, 24 Jun 2021 12:27:32 +0000</pubDate>
      <link>https://dev.to/garimasharma/pseudo-classes-and-pseudo-elements-npp</link>
      <guid>https://dev.to/garimasharma/pseudo-classes-and-pseudo-elements-npp</guid>
      <description>&lt;p&gt;CSS provide useful selector types that focus on specific platform state, like when the element is hovered, active etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pseudoclasses"&gt;
  &lt;/a&gt;
  Pseudo-Classes
&lt;/h2&gt;

&lt;p&gt;HTML here find themselves in various stages either because they are interacted with user or one of their child element is in a certain state. &lt;/p&gt;

&lt;p&gt;For example, an HTML element could be hovered with the mouse pointer by a user or a child element could also be hovered by the user. For those situations, use the &lt;code&gt;:hover&lt;/code&gt; pseudo-class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/*When the link is hovered with a mouse pointer this code is fired*/&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Pseudo-classes let you apply CSS based on state changes. This means that your design can react to user input and changes accordingly.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example &lt;br&gt;
you have an email signup form, you can change the border color of the field to red, if it contains invalid email address and green when it contains correct email address.&lt;/p&gt;

&lt;p&gt;As stated above pseudo-class let us apply CSS based on user input. Entering an email address is the input of the user. (whether right or wrong)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you do that?&lt;/strong&gt;&lt;br&gt;
Well, we have a pseudo-class &lt;code&gt;:invalid&lt;/code&gt;, this is one of many browser-provided &lt;strong&gt;pseudo-class&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/garima-sharma814/embed/MWpNWqJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;A pseudo-class lets you apply styles based on state changes and external factors. This means that your design can react to user input such as an invalid email address. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interactive-states"&gt;
  &lt;/a&gt;
  Interactive States
&lt;/h3&gt;

&lt;p&gt;We can apply the following pseudo-classes on the interaction of a user with our page.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;:hover&lt;/strong&gt;
If the user is pointing to an element with a pointing device (can be a mouse), an they place it over an element, we can trigger the action of the user with &lt;code&gt;:hover&lt;/code&gt; class to apply different style when user &lt;em&gt;hovers&lt;/em&gt; on it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/garima-sharma814/embed/mdWNdZZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We can achieve this effect with little effort&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; This is link &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Try hovering me! &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/*This line is to remove the default behavior of anchor tag we want underline effect one hover */&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/*When the user hover on a tag this code will be fired*/&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#8e44ad&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;:active&lt;/strong&gt;
This state is triggered when an element is actively being interacted with— such as a click—before click is released. If a pointing device like a mouse is used, this state is when the click starts and hasn't yet been released.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/garima-sharma814/embed/QWpewNd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We can achieve this effect with little effort&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click and hold to see the active state&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.99&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are tons of pseudo-classes for us to explore on. If you want to know more go to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"&gt;Pseudo-classes&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pseudoelements"&gt;
  &lt;/a&gt;
  Pseudo-Elements
&lt;/h2&gt;

&lt;p&gt;Pseudo-elements differ from pseudo-classes because instead of responding to the platform state, they act as if they are inserting a new element with CSS. Pseudo-elements are also syntactically different from pseudo-classes, because instead of using a single colon (:), we use a double colon (::).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A pseudo-element is like adding or targeting an extra element without having to add more HTML. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example&lt;br&gt;
If you've got an article of content and you want the first letter to be a much bigger drop cap— how do you achieve that?&lt;/p&gt;

&lt;p&gt;In CSS, you can use the &lt;code&gt;::first-letter&lt;/code&gt; pseudo-element to achieve this sort of design detail.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::first-letter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.6em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/garima-sharma814/embed/yLMmyjK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;::before and ::after&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Both the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudo-elements create a child element inside an element only if you define a content property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.my-element&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.my-element&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;::before&lt;/code&gt; pseudo-element to insert content at the start of an element, or the &lt;code&gt;::after&lt;/code&gt; pseudo-element to insert content at the end of an element.&lt;/p&gt;

&lt;p&gt;Pseudo-elements aren't limited to inserting content, though. We can also use them to target specific parts of an element.&lt;/p&gt;

&lt;p&gt;The content can be any string even an empty one but be mindful that anything other than an empty string will likely be announced by a screen reader. We can add an image &lt;code&gt;url&lt;/code&gt;, which will insert an image at its original dimensions, so we won't be able to resize it.&lt;/p&gt;

&lt;p&gt;There are tons of pseudo-classes for us to explore on. If you want to know more go to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements"&gt;Pseudo-Elements&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Written and Edited by &lt;a href="https://twitter.com/garimavatss"&gt;me&lt;/a&gt;❤.&lt;/p&gt;

</description>
      <category>css</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>Top 10 Useful GitHub Browser Extensions</title>
      <author>Abanoub Asaad</author>
      <pubDate>Thu, 24 Jun 2021 12:05:59 +0000</pubDate>
      <link>https://dev.to/abanoubasaad/top-10-useful-github-browser-extensions-2k2d</link>
      <guid>https://dev.to/abanoubasaad/top-10-useful-github-browser-extensions-2k2d</guid>
      <description>&lt;p&gt;There are many types of addiction, but addiction to GitHub is a unique and interesting one. Although GitHub is a great tool for developers, using extensions to increase your productivity is greater. Let's get started with the extensions that I'm using.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-octotree"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://github.com/buunguyen/octotree"&gt;Octotree&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It shows a side panel to enhance code review and exploration. Here, it is easy to navigate between the files and folders of the repository. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vMn0sVO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghqz5xcy6x8mjtnnfgc8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vMn0sVO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghqz5xcy6x8mjtnnfgc8.png" alt="Octotree extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-enhanced-github"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://github.com/softvar/enhanced-github"&gt;Enhanced GitHub&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It displays : 

&lt;ul&gt;
&lt;li&gt;The whole repository size and each file size&lt;/li&gt;
&lt;li&gt;Download link&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ri4gQWJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18s5fy33pnoyte4az807.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ri4gQWJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18s5fy33pnoyte4az807.png" alt="Enhanced GitHub screenshot0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can copy file content directly to the clipboard.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8z0wfvd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ocjsjbccv0eqzdqdjpds.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8z0wfvd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ocjsjbccv0eqzdqdjpds.png" alt="Enhanced GitHub screenshot1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-github-code-folding"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://github.com/noam3127/github-code-folding"&gt;GitHub Code Folding&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It enables code folding in GitHub.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qunnBTfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfllo0o7imcppg8ib6m8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qunnBTfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfllo0o7imcppg8ib6m8.png" alt="Code Folding extension screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-sourcegraph"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://github.com/sourcegraph/sourcegraph/tree/main/client/browser"&gt;Sourcegraph&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It makes you go to definition &amp;amp; find references (currently for Go, Java, TypeScript, JavaScript, and Python).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MnNqCvAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stxqsw1tmc26kyic8523.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MnNqCvAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stxqsw1tmc26kyic8523.png" alt="Sourcegraph extension screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-notifications-preview-for-github"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://github.com/tanmayrajani/notifications-preview-github"&gt;Notifications Preview for GitHub&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This extension makes you : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Show the count of notifications on the bell icon &lt;/li&gt;
&lt;li&gt;Preview the unread notifications using pop-overs on hover&lt;/li&gt;
&lt;li&gt;Allow to perform actions like marking as read and unsubscribing on the notifications.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CKfIlhb0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9czthe3mpijhy74249zt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CKfIlhb0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9czthe3mpijhy74249zt.png" alt="Notification extension screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-file-icons-for-github-and-gitlab"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://github.com/homerchen19/github-file-icons"&gt;File Icons for GitHub and GitLab&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It gives you different file icons in GitHub or GitLab.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UrL6Z6DY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7r3d7lrb14ipt7maikk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UrL6Z6DY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7r3d7lrb14ipt7maikk.jpg" alt="File Icons screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-octolinker"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://github.com/OctoLinker/OctoLinker"&gt;OctoLinker&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It makes navigating through the code more efficient by turning language-specific statements like &lt;code&gt;include&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt; into clickable links.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cGYxm73T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdqcz54vfkezo7vp11rw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cGYxm73T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdqcz54vfkezo7vp11rw.png" alt="OctoLinker extension screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-github-isometric-contributions"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://github.com/jasonlong/isometric-contributions"&gt;GitHub Isometric Contributions&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It allows you to toggle between the normal GitHub contribution chart and an isometric pixel art version.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2D Chart&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CeMzUoUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fv8hmghwl2ehui57ce4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CeMzUoUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fv8hmghwl2ehui57ce4k.png" alt="normal chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;3D Chart&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AqvtU3-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdg4f7dcmbn5dewlibbx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AqvtU3-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdg4f7dcmbn5dewlibbx.png" alt="3D chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-gifs-for-github"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://github.com/N1ck/gifs-for-github"&gt;GIFs for GitHub&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It makes it easier to search GIPHY and add a GIF into any GitHub comment box.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TOxesm0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfpjwt9c3s7re5fra0im.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TOxesm0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfpjwt9c3s7re5fra0im.png" alt="GIFs extension screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-refined-github"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://github.com/sindresorhus/refined-github"&gt;Refined GitHub&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This extension has a lot of features like :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Making whitespace characters visible
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w7_WfX1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4d0eu4g5i4ainzmy9li.png" alt="white space"&gt;
&lt;/li&gt;
&lt;li&gt;Adding one-click merge conflict fixers
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--js-Sx7Qm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lym459mhu4w8nwmtbcmj.png" alt="one-click merge conflict"&gt;
&lt;/li&gt;
&lt;li&gt;Adding reaction avatars showing who reacted to a comment
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bmwnyBJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yg7c8g553ebzs88qh4tw.png" alt="reaction avatars"&gt;
&lt;/li&gt;
&lt;li&gt;Letting you hide every event except comments or unresolved comments in issues and PRs
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LNQ8qlyA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/di2zrcat9ll1jyk5515i.png" alt="hide every event"&gt;
&lt;/li&gt;
&lt;li&gt;Linking issue/PR references and URLs in code and conversation titles
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BGFu9dfm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iu3xal1ov47yxv3e7f11.png" alt="Linkifing issue/PR references and URLs"&gt;
&lt;/li&gt;
&lt;li&gt;Adding the option to wait for checks when merging a PR&lt;/li&gt;
&lt;li&gt;Adding a button to revert all the changes to a file in a PR.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I tried to show some useful GitHub extensions that I know. There are a lot of other extensions you can use to enhance your experience.  If you want to explore other awesome GitHub extensions, you can check this &lt;a href="https://project-awesome.org/stefanbuck/awesome-browser-extensions-for-github"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Which GitHub extension do you like more? Let me know!&lt;/p&gt;

</description>
      <category>github</category>
      <category>productivity</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
