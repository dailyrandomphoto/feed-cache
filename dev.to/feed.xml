<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Day 26 of 100 Days of Code &amp; Scrum: A Life Full of Hardships</title>
      <author>Rammina</author>
      <pubDate>Wed, 03 Nov 2021 13:07:41 +0000</pubDate>
      <link>https://dev.to/rammina/day-26-of-100-days-of-code-scrum-a-life-full-of-hardships-a83</link>
      <guid>https://dev.to/rammina/day-26-of-100-days-of-code-scrum-a-life-full-of-hardships-a83</guid>
      <description>&lt;p&gt;&lt;strong&gt;TRIGGER WARNING:&lt;/strong&gt; The content of this post can be &lt;em&gt;emotionally disturbing&lt;/em&gt;. I politely ask you to &lt;em&gt;turn back if you don't want to suffer from negative emotional reactions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Hello there.&lt;/p&gt;

&lt;p&gt;Today was an extremely rough day. I'm even having trouble writing this down. However, I still managed to do what was required for the challenge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suicidal-tendencies"&gt;
  &lt;/a&gt;
  Suicidal Tendencies
&lt;/h3&gt;

&lt;p&gt;My wife has been suffering from severe anxiety, depression, and suicidal tendencies for how many years by now. And I'm no different either. I have severe RSI on both hands; I've always fought an uphill battle in trying to become a developer. Our lives are definitely ones full of hardships.&lt;/p&gt;

&lt;p&gt;To summarize, today was pretty bad in terms of emotional distress. My wife and I were already going through so much the past month, and we're not exactly in the best state mentally.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm sorry you had to meet me.&lt;br&gt;
It's something that should have probably not happened.&lt;br&gt;
I wanted you to be happy, but instead, it's like this.&lt;br&gt;
So many others could have been good for you.&lt;br&gt;
I really wish life could have been different.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Earlier, we've had a really bad interaction which pushed both of us downwards. Instead of providing emotional support and respecting her boundaries, I just made her (and myself) feel a lot worse and she was seriously talking about suicide. &lt;/p&gt;

&lt;p&gt;Is she fine? I don't know, and only tomorrow will tell. All I can do is continue doing what I'm supposed to and be there by her side at all times.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#all-journeys-have-hardships"&gt;
  &lt;/a&gt;
  All Journeys have Hardships
&lt;/h3&gt;

&lt;p&gt;I know this isn't really the place to be talking about this, and I'm not asking for help or advice either.&lt;/p&gt;

&lt;p&gt;I just see myself writing down my story for these 100 days of coding. These are all the things I've done and went through. And no one's journey is going to be always happy. I'm sure most people go through multiple tough times in their careers, whether be it personal or professional hardships.&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I learned about Next.js web crawling, indexing, and rendering strategies. I wrote Agile user stories for my company website. I read about team arrangements for multiple Scrum teams.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here are the things I learned and worked on today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;finished the official Next.js tutorial.&lt;/li&gt;
&lt;li&gt;learned about performance and core web vitals.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Largest Contentful Paint&lt;/code&gt; - measures the time it takes for the largest element to load in a page (loading performance).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;First Input Delay&lt;/code&gt; - perception of an end-user's experience while interacting with the page. (interactivity and responsiveness).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Cumulative Layout Shift&lt;/code&gt; - measure of a site's overall layout stability.&lt;/li&gt;
&lt;li&gt;learned about using &lt;strong&gt;Google Lighthouse&lt;/strong&gt; to monitor the quality of a webpage.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;wrote user stories and tasks for my company website.&lt;/li&gt;
&lt;li&gt;finished reading &lt;a href="https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2/"&gt;Scrum and XP from the Trenches&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I read about scrum of scrums&lt;/li&gt;
&lt;li&gt;dealing with distributed teams is a lot more difficult than in-person because of communication issues, lack of proximity, different cultures, and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wish everyone the best, and that you overcome the difficulties you face. Thank you for reading!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oY5HgysN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2iktqj4jgextiziqpts.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oY5HgysN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2iktqj4jgextiziqpts.jpg" alt="sea" width="880" height="589"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;amp;utm_medium=nav-cta&amp;amp;utm_campaign=next-website"&gt;Official Next.js tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2/"&gt;Scrum and XP from the Trenches&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Weather.io is the first app in google play store  created by HTMLgApp for free in a few minutes with Html , Css , Javascript</title>
      <author>AmrElDessouki22</author>
      <pubDate>Wed, 03 Nov 2021 12:45:54 +0000</pubDate>
      <link>https://dev.to/amreldessouki/weatherio-is-the-first-app-in-google-play-store-created-by-htmlgapp-for-free-in-a-few-minutes-with-html-css-javascript-5eno</link>
      <guid>https://dev.to/amreldessouki/weatherio-is-the-first-app-in-google-play-store-created-by-htmlgapp-for-free-in-a-few-minutes-with-html-css-javascript-5eno</guid>
      <description>&lt;p&gt;Hello everyone I am Amr Eldessouki founder of HTMLgApp &amp;amp; URLgapp&lt;br&gt;
I am happy to present weather.io &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vC0O-RCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjia1npn9dnuwgcfzzsh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vC0O-RCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjia1npn9dnuwgcfzzsh.png" alt="Image description" width="880" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZVNDHr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9v62z32jwwkn55384sif.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZVNDHr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9v62z32jwwkn55384sif.png" alt="Image description" width="880" height="688"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;weather.io created by &lt;br&gt;
A talented developer Yash Waghmare &lt;br&gt;
Just with his Html , CSS and Javascript files, He used our service to convert this web app code to an android app . &lt;/p&gt;

&lt;p&gt;HTMLgApp check it : &lt;br&gt;
&lt;a href="https://urlgapp.com/home/htmlgapp"&gt;https://urlgapp.com/home/htmlgapp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;he uploaded the project files , app logo , email and last thing is app name , and waited for 5 minutes to get his apk , app bundle and google play key for free &lt;/p&gt;

&lt;p&gt;We decided to take a random group of generated apps every day and publish it for free in a shared account on google play store. &lt;/p&gt;

&lt;p&gt;Yash Waghmare's weather.io app is now live on google play store &lt;br&gt;
&lt;a href="https://play.google.com/store/apps/details?id=com.urlgapp.app1635785018853"&gt;https://play.google.com/store/apps/details?id=com.urlgapp.app1635785018853&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also do this easily &lt;br&gt;
converting your Html , Css and Js code to an android app &lt;br&gt;
Get started now its for free !! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://urlgapp.com/home/htmlgapp"&gt;https://urlgapp.com/home/htmlgapp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We believe That Your Skills Will Change The World &lt;/p&gt;

&lt;p&gt;Thank you .  &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Select Right Aurora DB Instance 😎</title>
      <author>Gaurav</author>
      <pubDate>Wed, 03 Nov 2021 12:39:04 +0000</pubDate>
      <link>https://dev.to/gauravratnawat/select-right-aurora-db-instance-56l1</link>
      <guid>https://dev.to/gauravratnawat/select-right-aurora-db-instance-56l1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-factors"&gt;
  &lt;/a&gt;
  The Factors
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Back of envelope calculation for storage required (based on inputs from product requirements) . Aurora scales automatically so less of an issue.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Read scaling -  Back of envelope no calculation for # of reads per sec -  can be handled by adding read replicas.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write scaling -  In single-primary mode - there is a single writer DB . This can be the main factor for choosing the db instance. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Estimate the number of write connections needed per second . and pick the db instance based on the connection limits (keeping a factor for connection pooling) -&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also a guesstimate for the working set of data needed to be pulled into the memory for things like sorting/filtering etc will be a factor. The limits are mentioned in the above page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This can only be a starting point . You should prioritise perf testing at a time your app is relatively stable to benchmark semi-realworld load.  More often than not perf is constraint than storage.&lt;br&gt;
(also benchmark reports in aws are highly optimistic, you mostly will not be able to achieve these results in your environment)&lt;br&gt;
&lt;a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Managing.html#AuroraPostgreSQL.Managing.MaxConnections"&gt;AWS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#an-example-of-how-we-approached-simplified"&gt;
  &lt;/a&gt;
  &lt;em&gt;An example of how we approached (Simplified)&lt;/em&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#back-of-the-envelope-calculation-for-storage"&gt;
  &lt;/a&gt;
  Back of the envelope calculation for storage
&lt;/h4&gt;

&lt;p&gt;Assuming we will have total 10,00,000 users .&lt;br&gt;
Each user record in DB will have - at max 10 fields.&lt;br&gt;
Each field = max 1 kb (1000char) =&amp;gt; Each User record = 10kb&lt;br&gt;
So Total storage needed = 10,00,000 kb = 10 GB&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#readwrite-ratioconcurrency"&gt;
  &lt;/a&gt;
  Read/Write Ratio/concurrency
&lt;/h4&gt;

&lt;p&gt;The DB will be read heavy database. A customer will change password may be once a month but login multiple times.&lt;/p&gt;

&lt;p&gt;DocumentDB tops out at a maximum database size of 64TB and 4,500 concurrent connections per instance. DocumentDB supports a single primary node for writes and up to 15 replicas within a single Amazon region.That means with 15 replicas DocumentDB can handle 15 * 4500(max) = 67500 concurrent connection.That means some connections will be waiting in the connection pool.However , these limits may be adjusted - we need to check with AWS.&lt;/p&gt;




</description>
      <category>aws</category>
      <category>devops</category>
      <category>database</category>
      <category>architecture</category>
    </item>
    <item>
      <title>👷‍♂️ | Decode Prototype Pattern | 👀 </title>
      <author>Gaurav</author>
      <pubDate>Wed, 03 Nov 2021 12:24:59 +0000</pubDate>
      <link>https://dev.to/gauravratnawat/decode-prototype-pattern-589</link>
      <guid>https://dev.to/gauravratnawat/decode-prototype-pattern-589</guid>
      <description>&lt;h3&gt;
  &lt;a href="#when-to-use"&gt;
  &lt;/a&gt;
  When to use
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To improve the performance when object creation is costly and time consuming.&lt;/li&gt;
&lt;li&gt;To simplify and optimize multiple objects creation that will have mostly the same data&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#intent"&gt;
  &lt;/a&gt;
  Intent
&lt;/h3&gt;

&lt;p&gt;Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h3&gt;

&lt;p&gt;A class that implements Cloneable interface (public)&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8mw_jDp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bkkklvavqnbfx50x9ba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8mw_jDp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bkkklvavqnbfx50x9ba.png" alt="Prototype" width="197" height="309"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;Most of the cloud platforms behave like Prototype pattern to create instances quickly upon requests. This is achieved with the help of pre-installed Machine Images. When a customer wants a Windows or Linux instance, the cloud software just loads the already created machine image on to a server hardware (rather than going through the complete installation process). This saves a lot of time.&lt;/p&gt;

&lt;p&gt;1 Create a base machine image by installing the specified OS and antivirus software. Provide a 'clone' method so that client can create an object without using a time consuming 'new' operator every time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.prototype;

public class MachineImage implements Cloneable {

  StringBuilder image;

  public MachineImage(String os, String antivirusSW) {
    image = new StringBuilder();
    image.append(os)
         .append(" + " + antivirusSW);
  }

  private MachineImage(String sw) {
    image = new StringBuilder(sw);
  }

  public void install(String sw) {
    image.append(sw);
  }

  public void printSw() {
    System.out.println(image);
  }

  @Override
  public MachineImage clone()
      throws CloneNotSupportedException {
    return new MachineImage(this.image.toString());
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2 The client code. The client creates a base image and clones it to create other images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.client;

import com.gaurav.prototype.MachineImage;

public class PrototypeClient {
  public static void main(String [] args)
      throws CloneNotSupportedException {

    /* Create base Machine Images */
    MachineImage linuxVM= new MachineImage("Linux", "Symantec");
    MachineImage windowsVM = new MachineImage("Windows", "MaAfee");

    /* Clone Linux VM and Install Web Server */
    MachineImage webServer= linuxVM.clone();
    webServer.install(" + Web Server S/W");

    /* Create a copy of the Web Server and
     * install Application server on top of it */
    MachineImage webAppServer = webServer.clone();
    webAppServer.install(" + App Server S/W");

    /* Clone Linux VM and Install DB Server */
    MachineImage dbServer= linuxVM.clone();
    dbServer.install(" + Database Server S/W");

    /* Create a test machine from Windows Image */
    MachineImage testMachine= windowsVM.clone();

    System.out.print("Web Server Configuration: ");
    webServer.printSw();
    System.out.print("App Server Configuration: ");
    webAppServer.printSw();
    System.out.print("DB Server Configuration: ");
    dbServer.printSw();
    System.out.print("Test Machine Configuration: ");
    testMachine.printSw();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[output]
Web Server Configuration: Linux OS + Antivirus S/W + Web Server S/W
App Server Configuration: Linux OS + Antivirus S/W + Web Server S/W + App Server S/W
DB Server Configuration: Linux OS + Antivirus S/W + Database Server S/W
Test Machine Configuration: Linux OS + Antivirus S/W
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Performance: Cloning (using MemberwiseClone) is considerably less expensive than creating a new object afresh (with new operator).&lt;/li&gt;
&lt;li&gt;Objects can be cloned very dynamically, without any insistence on up-front instantiation. The first created object can be created at any time in the application execution, and further duplication can take place at any time ahead.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#drawbacks"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Deep copy has to be handled carefully.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#real-world-examples"&gt;
  &lt;/a&gt;
  Real World Examples
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Biological Cell splitting&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#software-examples"&gt;
  &lt;/a&gt;
  Software Examples
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Virtual Machine Images - Have one image per OS which has all the required s/w installed.&lt;/li&gt;
&lt;li&gt;DVD duplication - Duplication of the master dvd to create several copies.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#java-sdk-examples"&gt;
  &lt;/a&gt;
  Java SDK Examples
&lt;/h4&gt;

&lt;p&gt;java.lang.Object clone()&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#hope-you-like-it-would-love-to-hear-your-thoughts-on-this-design-pattern"&gt;
  &lt;/a&gt;
  Hope you like it. Would love to hear your thoughts on this design pattern.
&lt;/h4&gt;

&lt;p&gt;Want to discuss more &lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/gauravratnawat"&gt;Lets have a Coffee&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>design</category>
      <category>architecture</category>
      <category>designpattern</category>
    </item>
    <item>
      <title>Infrastructure-as-Code vs Configuration Management</title>
      <author>Mike Levan</author>
      <pubDate>Wed, 03 Nov 2021 11:37:05 +0000</pubDate>
      <link>https://dev.to/thenjdevopsguy/infrastructure-as-code-vs-configuration-management-2b66</link>
      <guid>https://dev.to/thenjdevopsguy/infrastructure-as-code-vs-configuration-management-2b66</guid>
      <description>&lt;p&gt;As times change, tools change. As tools change, the purpose of the tools change. &lt;/p&gt;

&lt;p&gt;There's a constant question that comes up about when to incorporate Infrastructure-as-Code (IaC) and when to utilize Configuration Management (ConfigMgmt). Not only is that question coming up for engineers, but it's also coming up for the companies that have created the Infrastructure-as-Code and Configuration Management platforms. &lt;/p&gt;

&lt;p&gt;What's the right decision and which direction should you go in? In this blog post, you'll learn the differences between IaC and ConfigMgmt, along with what platform and tool you should use in your environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-infrastructureascode"&gt;
  &lt;/a&gt;
  What is Infrastructure-as-Code
&lt;/h2&gt;

&lt;p&gt;When you think about IaC, think about it like this - IaC creates the &lt;em&gt;thing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When you need to create a service in the cloud, a virtualized server, or even a scalable orchestration solution like Kubernetes, you need to think about how to automate it. No one wants to create anything manually anymore and for good reason. There's no way to make manual efforts repeatable and clicking around a UI isn't an efficient way to spend an engineer's time. Because of that, everyone is thinking about how to automate the creation of services, platforms, and systems.&lt;/p&gt;

&lt;p&gt;Infrastructure-as-Code is used to automatically create any service or system in the cloud or on-prem with code. The code is typically a provisioning language, like JSON or YAML. However, that's changing rapidly with HashiCorp Configuration Language (HCL), which is a much easier and human-readable language compared to JSON and YAML to write infrastructure code. Another huge concept becoming popular is Infrastructure-as-Software, which is defining your infrastructure with a general-purpose programming language like Python or Go.&lt;/p&gt;

&lt;p&gt;The key differentiator with Infrastructure-as-Code and the manual way of creating systems and services is that it's done by writing code. If you're not a developer, that's perfectly fine. A lot of the IaC tools are geared towards non-developers to help them get up to speed. That's why HCL is so human-readable compared to standard programming languages.&lt;/p&gt;

&lt;p&gt;You may also hear IaC called Provisioning, as in a provisioning tool. The two phrases are both valid and you'll hear one or the other used depending on who you're talking to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-configuration-management"&gt;
  &lt;/a&gt;
  What is Configuration Management
&lt;/h2&gt;

&lt;p&gt;When you think about ConfigMgmt, think about it like this - ConfigMgmt configures the &lt;em&gt;thing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Several years back, virtualization hit the world. A lot of folks didn't think it would end up being as big as it was, but it ended up sweeping the tech nation. Everyone was trying to get on board with VMWare and Hyper-V to get a bigger bang for their buck when it came to servers. Even though creating servers and systems was easier with virtualization, there was still one problem; everything was manual. You had to click around a GUI to provision servers and then you had to RDP or SSH into the servers to configure them. Configuration could consist of starting services, installing dependencies, installing applications, running updates, and much more, so it was a lot of manual effort. &lt;/p&gt;

&lt;p&gt;A few companies saw this problem and decided to make a type of tool to automate these tasks. The tool was Configuration Management.&lt;/p&gt;

&lt;p&gt;Configuration Management is a way to configure servers. The configuration could be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installing applications&lt;/li&gt;
&lt;li&gt;Ensuring services are stopped or started&lt;/li&gt;
&lt;li&gt;Installing updates&lt;/li&gt;
&lt;li&gt;Opening up ports&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And much, much more.&lt;/p&gt;

&lt;p&gt;You may be thinking to yourself &lt;em&gt;well why can't ConfigMgmt be used for IaC?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The answer is - it can. Realistically and technically, you can use ConfigMgmt for IaC. The biggest problem is configuration drift.&lt;/p&gt;

&lt;p&gt;Configuration drift is when someone automates a deployment with say, ConfigMgmt, and a person goes into the server and changes the config. No one will know and there isn't an actual blocker to stop the person from doing that.&lt;/p&gt;

&lt;p&gt;With IaC tools like Terraform, it's different because Terraform has State files that essentially tell the server &lt;em&gt;this is how you're supposed to look. Don't change for anyone.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-most-used-today"&gt;
  &lt;/a&gt;
  What's Most Used Today?
&lt;/h2&gt;

&lt;p&gt;There is definitely debate around if Infrastructure-as-Code or Configuration Management is most used in today's world. The answer boils down to what your current environment looks like.&lt;/p&gt;

&lt;p&gt;Let's say you're a startup and you're primarily using Serverless and Container technologies to deploy apps. Realistically, you don't need Configuration Management. You just need an automated way to create the Serverless service or the containers. Maybe you use an IaC tool to create a Lambda Function, for example.&lt;/p&gt;

&lt;p&gt;On the flip side, maybe you're an organization like AWS that has a pretty important job; provisioning and configuring servers. Behind the AWS UI is a server running on a virtualized platform, and that server needs to be configured with the dependencies that are needed to run AWS. If you're at a company where bare metal or virtualized servers are still very much the way business is done, ConfigMgmt makes sense.&lt;/p&gt;

&lt;p&gt;As for which is most used today, it all depends on your environment. There is no clear-cut answer.&lt;/p&gt;

</description>
      <category>configurationmanagement</category>
      <category>iac</category>
      <category>terraform</category>
      <category>devops</category>
    </item>
    <item>
      <title>New to web dev, I want advice and recommendations</title>
      <author>Great Brittain</author>
      <pubDate>Wed, 03 Nov 2021 11:11:27 +0000</pubDate>
      <link>https://dev.to/greatbrittain/new-to-web-dev-i-want-advice-and-recommendations-1kg0</link>
      <guid>https://dev.to/greatbrittain/new-to-web-dev-i-want-advice-and-recommendations-1kg0</guid>
      <description>&lt;p&gt;&lt;b&gt;Post From My Colleague&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Hi, sorry for bad english(I'm french), I will try to be more comprehensive as possible.&lt;/p&gt;

&lt;p&gt;I just finish my computer science bachelor degree and going to do my Master degree.&lt;/p&gt;

&lt;p&gt;I usually program in C C++ Java C# for software development and now, I want to try web dev for lobby projects for now and maybe I will like it more since I'm not even a junior dev. I try to do some research and web dev is a lot more complicated than I thought.&lt;/p&gt;

&lt;p&gt;I did some basic web dev for uni project : I know basic of HTML/CSS, I mainly use bootstrap since CSS isn't for me(I really try). JS : I mostly use Jquery for dom interaction and also I know (a lot of) PHP : can interact with a server and a DB, can generate dynamic page, POST, GET&lt;a href="https://www.linkedin.com/in/nightmarketing/"&gt;,&lt;/a&gt; session... things like that. Nothing that high level.&lt;/p&gt;

&lt;p&gt;I also know MySQL for DB.&lt;/p&gt;

&lt;p&gt;Now I want to go next level and want some advice and recommendations. I saw that web dev usually use framework. I try to do some research and their are so much framework PHP and JS that I don't know what to choose. I'm also confuse to what a Web app is. I'm more familiar with normal app build with C and C family language.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>laravel</category>
      <category>mysql</category>
    </item>
    <item>
      <title>Top Ultimate B2B Video Marketing Ideas to Use for 2021</title>
      <author>Explain Ninja</author>
      <pubDate>Wed, 03 Nov 2021 10:49:31 +0000</pubDate>
      <link>https://dev.to/explain_ninja/top-ultimate-b2b-video-marketing-ideas-to-use-for-2021-2fb2</link>
      <guid>https://dev.to/explain_ninja/top-ultimate-b2b-video-marketing-ideas-to-use-for-2021-2fb2</guid>
      <description>&lt;p id="c0c9"&gt;We’ve studied expert video marketing prognosis and are ready to share the ideas for attracting leads in B2B with videos that will be relevant this year and how you may apply them in your video marketing. Let’s go!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QGVAKW_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/560/1%2AMJPMmmKrAAyLNvPpAQsy0A.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QGVAKW_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/560/1%2AMJPMmmKrAAyLNvPpAQsy0A.gif" alt="" width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;
Created by &lt;a href="https://explain.ninja/works/" rel="noopener ugc nofollow"&gt;Explain Ninja&lt;/a&gt;



&lt;h1 id="c6f9"&gt;5 Ideas for B2B to Look for Your Marketing Success&lt;/h1&gt;

&lt;p id="4bd9"&gt;At least five ideas will be helpful for your strategy since vi&lt;span id="rmm"&gt;&lt;span id="rmm"&gt;&lt;span id="rmm"&gt;&lt;span id="rmm"&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;eos or animations may solve many performance problems in increasingly popular formats. Namely, from live broadcasts, explainer videos, short ads, leaving subscribers, for example, with a promotional code for the company’s products and so much more, the market is now full of ideas that may transform your marketing into live-commerce. Check them out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MFRZn057--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/24/1%2AjHRxvHbICEI8DiNdLnFOPA.png%3Fq%3D20" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MFRZn057--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/24/1%2AjHRxvHbICEI8DiNdLnFOPA.png%3Fq%3D20" alt="" width="24" height="18"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W7Dte_Af--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/560/1%2AjHRxvHbICEI8DiNdLnFOPA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W7Dte_Af--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/560/1%2AjHRxvHbICEI8DiNdLnFOPA.png" alt="" width="560" height="420"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;a href="https://explain.ninja/about/" rel="noopener ugc nofollow"&gt;Video Designing&lt;/a&gt; Process



&lt;h1 id="b8c4"&gt;Idea # 1 Explainer Video marketing&lt;/h1&gt;

&lt;p id="2dfe"&gt;Videos help generate leads for 83% of marketers. Data visualization rules. That’s why it is recommended to add a call to action at the end of the video. Make it easier for them to reach what you offer them which means to improve your business UX. If you don’t, your potential customers will have to look for additional information about the service you promote via your explainer videos.&lt;/p&gt;

&lt;p id="df22"&gt;So do not forget that there are at least two ways to get leads via your videos: request contacts before watching it and offer to fill in a form after watching the video with a clear, powerful CTA.&lt;/p&gt;

&lt;h1 id="aee6"&gt;Idea # 2 Content marketing&lt;/h1&gt;

&lt;p id="27fc"&gt;Customers trust brands that provide them with valuable and exciting information, &lt;a href="https://explain.ninja/blog/6-amazing-types-of-animation-styles/" rel="noopener ugc nofollow"&gt;styled content&lt;/a&gt;. Plus, 80% of business decision-makers prefer to learn about a company from articles rather than advertisements. This makes content marketing one of the most effective B2B or even B2P lead generation tools out there. Video or text, make sure you apply to content in your ads, do not release videos without incredibly well-thought scripts and high-quality sounds.&lt;/p&gt;

&lt;h1 id="3ea0"&gt;Idea # 3 Influence marketing&lt;/h1&gt;

&lt;p id="7c14"&gt;One of the critical trends in lead generation is marketing based on the recommendations of the so-called influencers. The audience trusts native integrations in influencer blogs more than the usual formats of advertising on the Internet. The influencer becomes an intermediary between the audience and the brand and influences audience loyalty. So you may integrate influencer content into your videos or allow the chosen influencers to use your video content for mutual benefits. The business owners themselves tend to give more preference to native blogger content. And this sets the trend.&lt;/p&gt;

&lt;h1 id="4a41"&gt;Idea # 4 Omnichannel marketing&lt;/h1&gt;

&lt;p id="2d43"&gt;The Omnichannel strategy is a complex use of communication channels, each of which supports the others. This means that you use your videos on the video streaming channels, connect to your business website, distribute your video content on social media or your influencers’ markets or even through email or messenger tools directly to your most loyal customers.&lt;/p&gt;

&lt;p id="ff81"&gt;Multichannel seeks to achieve different goals depending on the channel. There is one set of goals in the omnichannel approach, but other media are used to achieve them.&lt;/p&gt;

&lt;h1 id="d82a"&gt;Idea # 5 Video production services&lt;/h1&gt;

&lt;p id="4ea5"&gt;To make it easier to generate leads from their great video ads, the top marketers tend to automate routine tasks like sending emails, segmenting leads, finding contacts, etc via. Many services appear on the market that may automate their lead generation processes. This is one thing, and it’s common.&lt;/p&gt;

&lt;p id="2319"&gt;Another thing is that they use professional &lt;a href="https://explain.ninja/about/" rel="noopener ugc nofollow"&gt;animated video production&lt;/a&gt; to create video content which is a high standard and has greater odds to bring incredible results from the start while distributed via any chosen communication channel or all at once.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L9PpS0gF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/24/1%2AtcgE9QxbgsSmwcg5ruQQFA.png%3Fq%3D20" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L9PpS0gF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/24/1%2AtcgE9QxbgsSmwcg5ruQQFA.png%3Fq%3D20" alt="" width="24" height="17"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KkCKHp6o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/560/1%2AtcgE9QxbgsSmwcg5ruQQFA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KkCKHp6o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/560/1%2AtcgE9QxbgsSmwcg5ruQQFA.png" alt="" width="560" height="417"&gt;&lt;/a&gt;&lt;/p&gt;
Business Design, Source: &lt;a href="https://dribbble.com/Fireart-d" rel="noopener ugc nofollow"&gt;Dribbble&lt;/a&gt;



&lt;h1 id="f9a6"&gt;Wrapping up&lt;/h1&gt;

&lt;p id="aa7b"&gt;How to integrate the above-mentioned ideas into your strategy and benefit all in one? Here is the checklist:&lt;/p&gt;

&lt;p id="3dca"&gt;1. Create both video and text lead magnets by offering useful checklists, explainers &amp;amp; guides, or instructions in exchange for contacts.&lt;/p&gt;

&lt;p id="cf8b"&gt;2. Create and run blogs with video content.&lt;/p&gt;

&lt;p id="4e7c"&gt;3. Make both videos with helpful tips and reviews, as well as ads. For example, if you sell real estate, you may start a video blog showing rooms, etc.&lt;/p&gt;

&lt;p id="9471"&gt;4. Organize webinars &amp;amp; speak at video conferences. There you may show your ads for good.&lt;/p&gt;

&lt;p id="8c75"&gt;5. Use a professional &lt;a href="https://explain.ninja/blog/the-software-for-explainer-video-explainer-video-toolkit/" rel="noopener ugc nofollow"&gt;video marketing toolkit&lt;/a&gt;.&lt;/p&gt;

&lt;p id="399f"&gt;Through your video content marketing:&lt;/p&gt;

&lt;p id="1082"&gt;· you demonstrate the expertise of the company;&lt;/p&gt;

&lt;p id="caee"&gt;· increase loyalty, as potential customers receive new knowledge from you;&lt;/p&gt;

&lt;p id="be48"&gt;· collect their contacts: 80% of users are ready to share them in exchange for receiving useful content via your videos.&lt;/p&gt;

&lt;p id="2c35"&gt;Also, welcome to read on 6 more &lt;a href="https://explain.ninja/blog/top-6-video-marketing-trends-expected-in-2021/" rel="noopener ugc nofollow"&gt;video marketing trends&lt;/a&gt; on our blog a bit in detail.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--blrC9_Uw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/24/1%2A5sqhyKq0kP3XonompmtpGg.png%3Fq%3D20" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--blrC9_Uw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/24/1%2A5sqhyKq0kP3XonompmtpGg.png%3Fq%3D20" alt="" width="24" height="16"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Rk4Qcn6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/560/1%2A5sqhyKq0kP3XonompmtpGg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Rk4Qcn6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/560/1%2A5sqhyKq0kP3XonompmtpGg.png" alt="" width="560" height="385"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;a href="https://explain.ninja/video-for-b2b/" rel="noopener ugc nofollow"&gt;B2B Video Marketing&lt;/a&gt;



&lt;p id="827f"&gt;Sky’s the limit! Make sure you set the goals and pick the best suitable communication channel to distribute your video for marketing campaigns. Create high-quality content with the help of &lt;a href="https://explain.ninja/contact-us/" rel="noopener ugc nofollow"&gt;professional video makers&lt;/a&gt; and use top-notch technologies to back up. Good luck!&lt;/p&gt;

</description>
      <category>design</category>
      <category>wordpress</category>
      <category>writing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>10 VS Code Extensions to Fight Technical Debt</title>
      <author>Alex Omeyer</author>
      <pubDate>Wed, 03 Nov 2021 10:48:42 +0000</pubDate>
      <link>https://dev.to/alexomeyer/10-vs-code-extensions-to-fight-technical-debt-508f</link>
      <guid>https://dev.to/alexomeyer/10-vs-code-extensions-to-fight-technical-debt-508f</guid>
      <description>&lt;p&gt;Many engineering teams get stuck and cannot ship quality software fast because of technical debt.&lt;/p&gt;

&lt;p&gt;The best engineering teams I've talked to use the right tools to continuously refactor code, improve their codebase communication, and address technical debt🚀&lt;/p&gt;

&lt;p&gt;Here are VS Code extensions that'll help you do that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Refactoring &amp;amp; tech debt tools&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-glean"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://marketplace.visualstudio.com/items?itemName=wix.glean"&gt;Glean&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Glean provides refactoring tools for your React codebase: extract JSX into a new component, convert Class Components to Functional Components, wrapping with Hooks. It allows extracting JSX into new component, converting Class Components to Functional Components and vice-verse, wrapping JSX with conditional, renaming state variables and their setters simultaneously, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w7_DQC1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iik8e0rzwddnnx186mqv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w7_DQC1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iik8e0rzwddnnx186mqv.gif" alt="Alt Text" width="880" height="602"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-stepsize"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.stepsize.com/r/vscode?utm_medium=dev.to&amp;amp;utm_source=referral&amp;amp;utm_campaign=technical%20debt"&gt;Stepsize&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Our team has built Stepsize specifically for Engineering teams to track and prioritise technical debt directly in the VS Code editor.&lt;/p&gt;

&lt;p&gt;Stepsize is an editor-first issue tracker for healthy codebase. It allows Engineering teams to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create &amp;amp; view code issues directly from your editor&lt;/li&gt;
&lt;li&gt;Track &amp;amp; prioritise code improvements like technical debt&lt;/li&gt;
&lt;li&gt;Add key issues to your sprints with our Jira integration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0L0sNd3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07bq86an4k62k7upo1b3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0L0sNd3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07bq86an4k62k7upo1b3.gif" alt="Image description" width="880" height="598"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-javascript-assistant"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://marketplace.visualstudio.com/items?itemName=p42ai.refactor"&gt;JavaScript Assistant&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;JavaScript assistant will help you write modern, clear, and concise code. It offers 48 automated refactorings, cleanups and actions for JavaScript and TypeScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1d8VANO5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3vs17xcp446ycvcoib6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1d8VANO5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3vs17xcp446ycvcoib6.gif" alt="Image description" width="520" height="258"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-abracadabra-refactor-this"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://marketplace.visualstudio.com/items?itemName=nicoespeon.abracadabra&amp;amp;ssr=false#overview"&gt;Abracadabra, refactor this!&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;With Abracadabra, you can quickly and safely refactor existing code in VS Code.&lt;/p&gt;

&lt;p&gt;VS Code ships with a few basic refactorings. Abracadabra supercharges your editor with shortcuts to trigger the most useful ones in no-time, quick fixes to suggest refactorings when appropriate, options to customize the UX to your needs, refactorings that work with .js, .jsx, .ts, .tsx and .vue files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VQRIHmlA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvywnjvywv3fx1tv37t4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQRIHmlA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvywnjvywv3fx1tv37t4.gif" alt="Alt Text" width="856" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TODOs and comments&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-todo-highlight"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight"&gt;TODO Highlight&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you like to mark sections of code with TODO and FIXME tags but keep forgetting about them then this plugin will solve your problem. It highlights TODO or FIXME phrases in the code so that you don’t forget what you wanted to fix or improve.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a1WE7tM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ccn37vzyqjxbbgn1u8x4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a1WE7tM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ccn37vzyqjxbbgn1u8x4.png" alt="Alt Text" width="880" height="559"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-todo-tree"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree"&gt;Todo Tree&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The Todo Tree extension collects all your tasks scattered throughout the application at your command into one tree on the left side of the editor workspace. You can quickly search your workspace for comment tags like TODO and FIXME, and see them in a tree view.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--36BD26kJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zrx08qysap69zz2in73.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--36BD26kJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zrx08qysap69zz2in73.png" alt="Alt Text" width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-comment-anchors"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://marketplace.visualstudio.com/items?itemName=ExodiusStudios.comment-anchors"&gt;Comment Anchors&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Comment Anchors allows you to place anchors within comments or strings to place bookmarks within the context of your code. Anchors can be used to track TODOs, write notes, create foldable sections, or to build a simple navigation making it easier to navigate your files.&lt;/p&gt;

&lt;p&gt;Anchors can be viewed for the current file, or throughout the entire workspace, using an easy to use sidebar.&lt;/p&gt;

&lt;p&gt;Comment Anchors provides many configuration options, allowing you to tailor this extension to your personal workflow, and increase productivity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wzw17tfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5eu0133wvnrw40l4eco7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wzw17tfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5eu0133wvnrw40l4eco7.gif" alt="Image description" width="880" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-new-relic-codestream"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://marketplace.visualstudio.com/items?itemName=CodeStream.codestream"&gt;New Relic CodeStream&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;New Relic CodeStream is a developer collaboration platform that integrates essential dev tools into VS Code. Eliminate context-switching and simplify code discussion and code review by putting collaboration tools in your IDE.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create and review GitHub and GitLab pull requests&lt;/li&gt;
&lt;li&gt;Get feedback on work-in-progress with pre-PR code reviews&lt;/li&gt;
&lt;li&gt;Code discussions &amp;amp; comments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Av-crf5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp59ham0d2obdyjrnl78.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Av-crf5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp59ham0d2obdyjrnl78.gif" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automation&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-sonarlint"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarlint-vscode"&gt;SonarLint&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;SonarLint lets you fix coding issues before they exist: like a spell checker, SonarLint highlights Bugs and Security Vulnerabilities as you write code, with clear remediation guidance so you can fix them before the code is even committed. SonarLint in VS Code supports analysis of JavaScript, TypeScript, Python, Java, HTML &amp;amp; PHP code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WqBD7eX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkudc5zri6jj601rcch9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WqBD7eX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkudc5zri6jj601rcch9.gif" alt="Alt Text" width="860" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-code-runner"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner"&gt;Code Runner&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Run code snippet or code file for multiple languages, such as C, C++, Java, JavaScript, PHP, Python, Perl, Perl 6, Ruby, Go, and many more.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run code file of current active Text Editor&lt;/li&gt;
&lt;li&gt;Run code file through context menu of file explorer&lt;/li&gt;
&lt;li&gt;Run selected code snippet in Text Editor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jf1JSLAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqmetfqnwmq5dg8u1cy8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jf1JSLAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqmetfqnwmq5dg8u1cy8.gif" alt="Image description" width="880" height="577"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>vscode</category>
      <category>tooling</category>
      <category>refactorit</category>
    </item>
    <item>
      <title>Introduction to Angular CLI Builders</title>
      <author>Tarun Gurang</author>
      <pubDate>Wed, 03 Nov 2021 10:24:00 +0000</pubDate>
      <link>https://dev.to/tarungurang/introduction-to-angular-cli-builders-33p2</link>
      <guid>https://dev.to/tarungurang/introduction-to-angular-cli-builders-33p2</guid>
      <description>&lt;p&gt;In this blog, we'll look at a new API in Angular CLI that allows us to add new CLI features and enhance existing ones. We'll go over how to interact with this API and what extension points we can use to extend the CLI's features.&lt;/p&gt;

&lt;p&gt;With Angular 8, the Builders API was released, and it includes the ability to override commands such as ng build, ng test, and ng lint. Not to be confused with Angular Schematics, which can be used to add custom commands to ng generate or provide support for ng add.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h2&gt;

&lt;p&gt;We introduced the workspace file (angular.json) in the Angular CLI about a year ago, and we reworked several key principles of how its commands were implemented as a result. We ended up placing the following commands in boxes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Commands on the schematic diagram. We've probably heard of Schematics, the CLI's code generation, and modification library. It launched in version 5 and is now used in most commands that interact with our code, including new, generate, add, and update.&lt;/li&gt;
&lt;li&gt;Miscellaneous commands. help, version, config, doc, our newly added analytics, and our Easter eggs are all commands that are specially coded and are not unique to a project.&lt;/li&gt;
&lt;li&gt;Task commands. This category translates to "running a process on other people's code." The build is a good example, but linting and testing are also good examples.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This was originally designed to allow people to replace their webpack configuration or migrate to a different underlying build implementation; we started designing it a long time ago. We eventually came up with a basic task-running method that we could use as an experiment for the time being. This API was given the name "Architect" by us.&lt;/p&gt;

&lt;p&gt;The architect was a success with people who wanted to use a custom build or third-party libraries who wanted to customize their workflow, even though it wasn't officially sponsored. Nx used it to run Bazel commands, Ionic used it to run Jest unit tests, and users could use tools like ngx-build-plus to extend their webpack setup. And this was just the beginning.&lt;/p&gt;

&lt;p&gt;An enhanced version of this API is now stable and officially supported in Angular CLI version 8.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conceptual-overview"&gt;
  &lt;/a&gt;
  Conceptual Overview
&lt;/h3&gt;

&lt;p&gt;The CLI uses the Architect API for command implementations since it has tools for scheduling and coordinating tasks. It uses the workspace's angular.json to resolve tasks and goals to their builder implementation, and builders as the implementation of a task (which can schedule other builders).&lt;/p&gt;

&lt;p&gt;It's a generic framework that's designed to be adaptable and forward-thinking. It includes APIs for progress reporting, logging, and testing, as well as the ability to add new features.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.ifourtechnolab.com/blog/how-to-implement-file-upload-in-angular"&gt;How To Implement File Upload In Angular?&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#builders"&gt;
  &lt;/a&gt;
  Builders
&lt;/h3&gt;

&lt;p&gt;Builders are functions that enforce the logic and behavior for a process that can be used instead of a command, such as running a linter.&lt;/p&gt;

&lt;p&gt;A builder is given two arguments: an input (or options) and a context that allows the CLI and the builder to communicate. The separation of concerns is the same as with Schematics: the CLI user provides options, the API provides context, and we provide the behavior. It can be synchronous, asynchronous, or watch several values and output them. BuilderOutput is the only output form that includes a success boolean field and an optional error field that can contain an error message.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#workspace-file-and-targets"&gt;
  &lt;/a&gt;
  Workspace File and Targets
&lt;/h4&gt;

&lt;p&gt;The angular.json workspace file is used by Architect to resolve targets and their options.&lt;/p&gt;

&lt;p&gt;The workspace is divided into projects by angular.json, and each project has a set of targets. Our default application, which is generated when we run ng new, is an example of a project. Create, which is run automatically while using ng build, is one of the project objectives. That target has three keys (by default):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;builder. When running this target, the name of the builder to use is of the form packageName:builderName.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;options. While running this target, a default set of options is used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;configurations. When running this target with a particular configuration, a map of name to options has been used.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When executing a target, the options are resolved by first using the default options object, then overwriting values from the configuration used (if any), and finally overwriting values from the overrides object passed to scheduleTarget (). The overrides object in the Angular CLI is created using command line arguments. This is then applied to the builder's schema, and only if it satisfies, seems to be the context created and the builder itself executed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-an-api-builders-project"&gt;
  &lt;/a&gt;
  Creating an API Builders Project
&lt;/h4&gt;

&lt;p&gt;Let's take a look at the API before we start writing our builder.&lt;/p&gt;

&lt;p&gt;1.BuilderContext&lt;/p&gt;

&lt;p&gt;2.BuilderOutput&lt;/p&gt;

&lt;p&gt;3.createBuilder&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking for Genuine &lt;a href="https://www.ifourtechnolab.com/angular-js-development-company"&gt;AngularJS Development Company&lt;/a&gt;? Enquire Today.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#buildercontext"&gt;
  &lt;/a&gt;
  BuilderContext
&lt;/h5&gt;

&lt;p&gt;Let's take a look at some of the useful methods and properties that are available:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;reportStatus:&lt;/strong&gt; To report the status of a running task to the command prompt, use the reportStatus method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;logger:&lt;/strong&gt; For logging purposes, logger offers methods such as log, debug, info, warn, error, and fatal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;scheduleTarget:&lt;/strong&gt; This approach allows us to schedule other tasks using the given config; for example, running the build task as part of our task.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#createbuilder"&gt;
  &lt;/a&gt;
  createBuilder
&lt;/h5&gt;

&lt;p&gt;This is the builder's entry point; it may return a promise or an observable of type BuilderOutput.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#builderoutput"&gt;
  &lt;/a&gt;
  BuilderOutput
&lt;/h5&gt;

&lt;p&gt;The following values can be returned by BuilderOutput:&lt;/p&gt;

&lt;p&gt;error: It is an error message to send to the application. it is an optional value&lt;/p&gt;

&lt;p&gt;info: this function returns a [key, value] pair and it is optional.&lt;/p&gt;

&lt;p&gt;success: It is required and can return a true/false value.&lt;/p&gt;

&lt;p&gt;target: It can return a configuration project and target this is optional.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Index.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default createBuilder&amp;lt;options&amp;gt;(
  async (options: Options, context: BuilderContext): Promise&amp;lt;builderoutput&amp;gt; =&amp;gt; {
context.reportStatus(`Executing "${options.command}"...`);
const configuration = options.configuration ? options.configuration : 'production';
    const build = await context.scheduleTarget({
      target: 'build',
      project: context.target !== undefined ? context.target.project : '',
      configuration
});
    const test = await context.scheduleTarget({
      target: 'test',
      project: context.target !== undefined ? context.target.project : ''
});
let buildResult = await build.result &amp;amp;&amp;amp; await test.result;
return { success: buildResult.success };
  });
&amp;lt;/builderoutput&amp;gt;&amp;lt;/options&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.To test the builder locally, use the npm run build command.&lt;/p&gt;

&lt;p&gt;3.To link the package locally, use the npm link command.&lt;/p&gt;

&lt;p&gt;4.Using the CLI, create a new Angular application.&lt;/p&gt;

&lt;p&gt;5.Run npm link @example/command-runner we may modify the package name to fit the one mentioned in the builder's package. JSON is a type of data.&lt;/p&gt;

&lt;p&gt;6.In angular.json, add the following configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"[our-command]": {
  "builder": "@example/command-runner:command",
  "options": {
    "command": "[our-command]",
    "args": [
      "src/main.ts"
    ]
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;7.To test the builder, type ng run [project-name]: [our-command] or ng deploy if our command is for deploying. This will be available after the release of Angular CLI 8.3.0.&lt;/p&gt;

&lt;p&gt;We can also use it across multiple applications by publishing it on npm.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h6&gt;

&lt;p&gt;The use case for the builder’s API is even broader, and there are already many custom builders available. The CLI team decided to make ng deploy the command available after the custom builder to deploy became so popular.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>programming</category>
    </item>
    <item>
      <title>Day 47-49/100 Data Structures: Objects and Arrays</title>
      <author>Rio Cantre</author>
      <pubDate>Wed, 03 Nov 2021 10:18:04 +0000</pubDate>
      <link>https://dev.to/riocantre/day-47-49-data-structures-objects-and-arrays-eh8</link>
      <guid>https://dev.to/riocantre/day-47-49-data-structures-objects-and-arrays-eh8</guid>
      <description>&lt;p&gt;"On two occasions I have been asked, ‘Pray, Mr. Babbage, if you put into the machine wrong figures, will the right answers come out?’ [...] I am not able rightly to apprehend the kind of confusion of ideas that could provoke such a question."&lt;/p&gt;

&lt;p&gt;–– Charles Babbage, Passages from the Life of a Philosopher (1864)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jeLog1bO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/va26xeh01pnxrnpo9ump.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jeLog1bO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/va26xeh01pnxrnpo9ump.png" alt="data" width="880" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>programming</category>
      <category>challenge</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Can you find the bug in this piece of code? - RegExp edition 🌍</title>
      <author>Keff</author>
      <pubDate>Wed, 03 Nov 2021 10:01:30 +0000</pubDate>
      <link>https://dev.to/nombrekeff/can-you-find-the-bug-in-this-piece-of-code-regexp-edition-27ac</link>
      <guid>https://dev.to/nombrekeff/can-you-find-the-bug-in-this-piece-of-code-regexp-edition-27ac</guid>
      <description>&lt;p&gt;Hey there! 👋&lt;/p&gt;

&lt;p&gt;I'm back with another installment of &lt;strong&gt;Find the bug&lt;/strong&gt;, this time with Typescript/Javascript. Regular expressions are useful, but can behave in some unexpected ways. Can you tell me what the code below will output and what the cause for it is? &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-dont-look-at-the-comments-to-prevent-spoilers-if-you-want-to-solve-it-by-yourself-"&gt;
  &lt;/a&gt;
  !! Don't look at the comments to prevent spoilers if you want to solve it by yourself !!
&lt;/h4&gt;




&lt;p&gt;&lt;strong&gt;Buggy code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TEST_REGEXP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-z0-9&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+_&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-z0-9&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+/gi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isValidName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;TEST_REGEXP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test_1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test_1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test_2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;other_test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;some_file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;filenames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isValidName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#%C2%A0now-then-can-you-find-the-bug"&gt;
  &lt;/a&gt;
   Now then, can you find the bug?
&lt;/h3&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>bugs</category>
      <category>regexp</category>
    </item>
    <item>
      <title>Improve our code with the property-based testing and fast-check</title>
      <author>Cédric Teyton</author>
      <pubDate>Wed, 03 Nov 2021 09:59:25 +0000</pubDate>
      <link>https://dev.to/promyze/improve-our-code-with-the-property-based-testing-and-fast-check-10p1</link>
      <guid>https://dev.to/promyze/improve-our-code-with-the-property-based-testing-and-fast-check-10p1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-propertybased-testing"&gt;
  &lt;/a&gt;
  🧪 Why property-based testing?
&lt;/h2&gt;

&lt;p&gt;At &lt;a href="https://promyze.com?utm_source=DevTo"&gt;Promyze&lt;/a&gt;, we're convinced that methodologies such as &lt;strong&gt;Test-Driven Development&lt;/strong&gt; (TDD) can really improve the quality of our code. But developers need relevant inputs to ensure our code answers a business requirement. Behavior-Driven Development or Example Mapping sessions help to generate concrete examples of the behavior of a feature. This clearly brings value for developers and allows them to start writing tests and business code. &lt;/p&gt;

&lt;p&gt;However, our tests usually cover a &lt;strong&gt;restricted range of inputs&lt;/strong&gt; that come from our examples. We assume they are representative enough for our tests. But what if we want to test edge cases? Or if we're not sure that our test is representative? &lt;/p&gt;

&lt;p&gt;This is where &lt;strong&gt;property-based testing&lt;/strong&gt; comes in. This post is a short intro to this concept. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-pbt"&gt;
  &lt;/a&gt;
  ❓ What is PBT?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Property-based testing&lt;/strong&gt; aims to identify and test &lt;strong&gt;invariants&lt;/strong&gt;: predicates that should be true, whatever the input data are. An invariant ****is a business rule that can be written as a predicate. &lt;/p&gt;

&lt;p&gt;A PBT framework will generate random input data and check if the invariant is valid. If one single execution fails, this means the code under test may have some defects in its implementation. But the PBT framework will give you the &lt;strong&gt;input data,&lt;/strong&gt; meaning you can reproduce the problem. &lt;/p&gt;

&lt;p&gt;PBT is not something new, the first research studies on that topic are from 1994, from &lt;a href="https://ieeexplore.ieee.org/document/367311"&gt;Fink &amp;amp; Levitt&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#illustration-with-a-test-case"&gt;
  &lt;/a&gt;
  🎓 Illustration with a test case
&lt;/h2&gt;

&lt;p&gt;Our platform &lt;a href="https://promyze.com?utm_source=DevTo"&gt;Promyze&lt;/a&gt; is designed for best coding practices sharing. Users can &lt;strong&gt;merge&lt;/strong&gt; two practices if they have the same intention. Each practice can have zero, one, or multiple &lt;strong&gt;categories&lt;/strong&gt;. During a merge, categories of both practices should be merged into the &lt;strong&gt;target&lt;/strong&gt; practice. &lt;/p&gt;

&lt;p&gt;Here is a simple implementation of this business rule (the &lt;em&gt;mergePractice&lt;/em&gt; method) and a unit test written in JS with Mocha and Chai. For simplicity, the code is written in the same file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;chai&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chai&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chai&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mergePractice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;practice1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;practice2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;practice1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;practice2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Merge two practices&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should merge categories of the source practices into the target practice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;practice1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;categories&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;practice2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;categories&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;targetPractice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mergePractice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;practice1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;practice2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetPractice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eql&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this code does not handle any edge case. The implementation is clearly straightforward with a &lt;em&gt;concat&lt;/em&gt; operation. We consider only a typical case with two practices having a single category. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-implementation-of-pbt-with-fastcheck"&gt;
  &lt;/a&gt;
  🚀 An implementation of PBT with fast-check
&lt;/h2&gt;

&lt;p&gt;Now comes the PBT with &lt;a href="https://github.com/dubzzz/fast-check"&gt;fast-check&lt;/a&gt;, an open-source framework developed by &lt;a href="https://twitter.com/ndubien"&gt;Nicolas Dubien&lt;/a&gt; for Javascript and Typescript.  &lt;/p&gt;

&lt;p&gt;From our example, we can identify &lt;strong&gt;two invariants&lt;/strong&gt; during the merge of two practices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There can't be any duplications in the &lt;strong&gt;categories&lt;/strong&gt; of the target practice.&lt;/li&gt;
&lt;li&gt;The categories of the target practice should not contain elements that do not appear in the source practices' categories.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the implementation of the two predicates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noDuplicationsPredicate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetPractice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;targetPractice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;categories&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;targetPractice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;uniqueCategories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetPractice&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;uniqueCategories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;targetPractice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;targetCategoriesShouldNotContainCategoriesNotInSourcePractices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sourcePractice1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sourcePractice2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;targetPractice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetPractice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;targetPractice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
            &lt;span class="nx"&gt;sourcePractice1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;sourcePractice2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is the test with fast-check :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Merge two practices&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should merge categories of the source practices into the target practice based on random data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                &lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cat2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;practice1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;categories&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cat1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
                    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;practice2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;categories&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cat2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
                    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;targetPractice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mergePractice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;practice1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;practice2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;noDuplicationsPredicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetPractice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
                            &lt;span class="nx"&gt;targetCategoriesShouldNotContainCategoriesNotInSourcePractices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;practice1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;practice2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;targetPractice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}),&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;numRuns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In short: &lt;em&gt;fc.assert&lt;/em&gt; runs the property, &lt;em&gt;fc.property&lt;/em&gt; defines it, and &lt;em&gt;fc.array(fc.string())&lt;/em&gt; generates a random array of string values, possible empty. We ask here to run 10,000 iterations of the test. Of course the documentation of the framework will give your more information!&lt;/p&gt;

&lt;p&gt;After execution of our test (running with Mocha), we got the following error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Merge&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt; &lt;span class="nx"&gt;practices&lt;/span&gt;
       &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="nx"&gt;merge&lt;/span&gt; &lt;span class="nx"&gt;categories&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="nx"&gt;practices&lt;/span&gt; &lt;span class="nx"&gt;into&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="nx"&gt;practice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Property&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;tests&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1361468347&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0:0:3:2:3:2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;endOnFailure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;Counterexample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[],[&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the counterexample? You could argue that such a case should not normally happen, as categories should never be null or empty, but this is not the point here, it's just an illustration of PBT :). We've got which inputs raise the error.&lt;/p&gt;

&lt;p&gt;Thanks to that, we can slightly edit our business function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mergePractice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;practice1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;practice2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;practice1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;practice2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next run, we realized that our business case did not cover duplicated categories :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Property&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="mi"&gt;161&lt;/span&gt; &lt;span class="nx"&gt;tests&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;759575891&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;160:1:0:4:6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;endOnFailure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;Counterexample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;mergePractice&lt;/em&gt; method should now be updated to avoid duplications. &lt;/p&gt;

&lt;p&gt;I think you've got it, right? PBT can complement your existing tests, and we showed an example of how this can help improve our codebase quality and the robustness of our tests. &lt;/p&gt;

&lt;p&gt;There are many more exciting features, such as &lt;strong&gt;Shrinking&lt;/strong&gt;, which tries to simplify the understanding of a failing test by reducing the problem at its lowest level. &lt;/p&gt;

&lt;p&gt;In a future post, we'll discuss how mutation testing can also be relevant to improve our codebase.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
