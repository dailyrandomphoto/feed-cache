<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Adapter Pattern vs. Bridge Pattern</title>
      <author>Doeke Norg</author>
      <pubDate>Mon, 04 Oct 2021 07:05:29 +0000</pubDate>
      <link>https://dev.to/doekenorg/adapter-pattern-vs-bridge-pattern-11nd</link>
      <guid>https://dev.to/doekenorg/adapter-pattern-vs-bridge-pattern-11nd</guid>
      <description>&lt;p&gt;The Adapter pattern and the Bridge Pattern have brought along a lot of confusion. In this post we're going to look at what they are, what their differences are &amp;amp; where they might be similar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adapter-pattern"&gt;
  &lt;/a&gt;
  🔌 Adapter Pattern
&lt;/h2&gt;

&lt;p&gt;The Adapter Pattern tries to solve the problem of making two (or more) &lt;em&gt;incompatible&lt;/em&gt; classes &lt;strong&gt;compatible&lt;/strong&gt;, by using an intermediate class that implements a predefined interface.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- Wait what? Let's try this again!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h3&gt;

&lt;p&gt;Imagine a single &lt;code&gt;Feed&lt;/code&gt; that wants to display the latest topics from multiple sources, like: Reddit &amp;amp; Hacker News. For these sources we have two API clients: &lt;code&gt;RedditApi&lt;/code&gt; and &lt;code&gt;HackerNewsApi&lt;/code&gt;. Both return a list of topics, but their APIs are not the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RedditApi&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fetchTopicItems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;RedditFeedIterator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Returns a `RedditFeedIterator` that provides `Topic` objects, that hold a `title`, `date` and `url`.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HackerNewsApi&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getTopics&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// returns an array of ['topic_title' =&amp;gt; '...', 'topic_date' =&amp;gt; '...', 'topic_url' =&amp;gt; '...']&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don't want to make our feed know about the different implementations, because we might want to add another source in the future and that would mean adding even more code to the feed. Instead, we'll apply the Adapter Pattern. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h3&gt;

&lt;p&gt;The Adapter Pattern consists of these 4 elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🙋 &lt;strong&gt;Client:&lt;/strong&gt; This is the class that want's to connect to multiple sources. This would be &lt;code&gt;Feed&lt;/code&gt; in our example.&lt;/li&gt;
&lt;li&gt;📚 &lt;strong&gt;Adaptee:&lt;/strong&gt; A source the &lt;em&gt;Client&lt;/em&gt; wants to connect to. In our example we have two: &lt;code&gt;RedditApi&lt;/code&gt; &amp;amp; &lt;code&gt;HackerNewsApi&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;🎯 &lt;strong&gt;Target:&lt;/strong&gt; An interface or contract that defines a single API the &lt;em&gt;Client&lt;/em&gt; will connect to.&lt;/li&gt;
&lt;li&gt;🔌 &lt;strong&gt;Adapter:&lt;/strong&gt; A class that implements the &lt;em&gt;Target&lt;/em&gt; interface and delegates to an &lt;em&gt;Adaptee&lt;/em&gt; source and formats its output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First let's settle on a &lt;em&gt;Target&lt;/em&gt; interface; we'll call it &lt;code&gt;TopicAdapterInterface&lt;/code&gt; and it will have a &lt;code&gt;getTopics()&lt;/code&gt; method that returns an &lt;code&gt;iterable&lt;/code&gt; of topics, where every topic is an array with &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt;. So it can be an array of arrays, or a Generator/Iterator of arrays.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you aren't familiar with Generators or Iterators, then please check out my &lt;a href="https://doeken.org/blog/generators-over-arrays"&gt;Generators over arrays&lt;/a&gt; post.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;TopicAdapterInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * @return iterable Iterable of topic array ['title' =&amp;gt; '...', 'date' =&amp;gt; '...', 'url' =&amp;gt; '...']
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getTopics&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can create a &lt;code&gt;Feed&lt;/code&gt; class that uses these adapters. We'll loop over every adapter, and &lt;code&gt;yield&lt;/code&gt; their results, so we get a single continuous stream of topics as a &lt;code&gt;Generator&lt;/code&gt;. This of course doesn't take a date into consideration, but it's enough for this example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Feed&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * @param TopicAdapterInterface[] $adapters The adapters.
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$adapters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getAllTopics&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;iterable&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;adapters&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$adapter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;$adapter&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getTopics&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we have a &lt;em&gt;Client&lt;/em&gt; &lt;code&gt;Feed&lt;/code&gt;, a &lt;em&gt;Target&lt;/em&gt; &lt;code&gt;TopicAdapterInterface&lt;/code&gt; and two &lt;em&gt;Adaptees&lt;/em&gt; &lt;code&gt;RedditApi&lt;/code&gt; &amp;amp; &lt;code&gt;HackerNewsApi&lt;/code&gt;. That means that we are only missing two &lt;em&gt;Adapters&lt;/em&gt;. We'll create these first, and then we'll look at what makes them tick.&lt;/p&gt;

&lt;p&gt;To make it a bit easier working with the Iterators, I'll be using the &lt;code&gt;iterator_map()&lt;/code&gt; function from my &lt;a href="https://github.com/doekenorg/iterator-functions"&gt;&lt;code&gt;doekenorg/iterator-functions&lt;/code&gt;&lt;/a&gt; package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RedditTopicAdapter&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;TopicAdapterInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;RedditApi&lt;/span&gt; &lt;span class="nv"&gt;$reddit_api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getTopics&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;iterable&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;iterator_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Topic&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getTitle&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="s1"&gt;'date'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d H:i:s'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="s1"&gt;'url'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getUrl&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;reddit_api&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fetchTopicItems&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HackerNewsTopicAdapter&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;TopicAdapterInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;HackerNewsApi&lt;/span&gt; &lt;span class="nv"&gt;$hacker_news_api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getTopics&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;iterable&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;iterator_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'topic_title'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s1"&gt;'date'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;createFromFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'H:i:s Y-m-d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'topic_date'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d H:i:s'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="s1"&gt;'url'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'topic_url'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;hacker_news_api&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getTopics&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can see our two adapters: &lt;code&gt;RedditTopicAdapter&lt;/code&gt; and &lt;code&gt;HackerNewsTopicAdapter&lt;/code&gt;. Both of these classes implement the &lt;code&gt;TopicAdapterInterface&lt;/code&gt; and provide the required &lt;code&gt;getTopics()&lt;/code&gt; method. They each get their own &lt;em&gt;Adaptee&lt;/em&gt; injected as a dependency, and use this to retrieve topics and format it to the required array.&lt;/p&gt;

&lt;p&gt;This means that our &lt;code&gt;Feed&lt;/code&gt; can now use these adapters by injecting them in its constructor. To connect this all together it could look a little something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$hacker_news_adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HackerNewsAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HackerNewsApi&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nv"&gt;$reddit_adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;RedditTopicAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;RedditApi&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nv"&gt;$feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Feed&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nv"&gt;$hacker_news_adapter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$reddit_adapter&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$feed&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getAllTopics&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// arrays of [`title`, `date` and `url`]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#benefits-of-the-adapter-pattern"&gt;
  &lt;/a&gt;
  Benefits of the Adapter Pattern
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;🔄 You can plug in an extra &lt;em&gt;Adapter&lt;/em&gt; at a later time, without having to change he &lt;em&gt;Client&lt;/em&gt; implementation.&lt;/li&gt;
&lt;li&gt;🖖 Only the &lt;em&gt;Adapter&lt;/em&gt; needs to know about the &lt;em&gt;Adaptee&lt;/em&gt; which enforces separation of concerns.&lt;/li&gt;
&lt;li&gt;🔬 The &lt;em&gt;Client&lt;/em&gt; code is easily testable, because it only relies on a &lt;em&gt;Target&lt;/em&gt; interface.&lt;/li&gt;
&lt;li&gt;📦 When working with an IoC container you can usually get / tag all services with a specific interface, making it very easy to find and inject or auto-wire all &lt;em&gt;Adapters&lt;/em&gt; into the &lt;em&gt;Client&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#real-world-examples"&gt;
  &lt;/a&gt;
  Real world examples
&lt;/h3&gt;

&lt;p&gt;The Adapter Pattern is one of the most used patterns, because of its extendability. It can even be extended by other packages without the original packages having to change. Here are some real world examples of this.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cache-adapters"&gt;
  &lt;/a&gt;
  Cache adapters
&lt;/h4&gt;

&lt;p&gt;Most frameworks have a caching system that has a single API for working with it, while providing adapters for different implementations, like: redis, memcache or a filesystem cache. Laravel calls these adapters a &lt;code&gt;Store&lt;/code&gt; and you can find these stores in &lt;a href="https://github.com/illuminate/cache"&gt;&lt;code&gt;illuminate/cache&lt;/code&gt;&lt;/a&gt;. They provide the &lt;em&gt;Target&lt;/em&gt; interface for such a store in the &lt;a href="https://github.com/illuminate/contracts/blob/master/Cache/Store.php"&gt;&lt;code&gt;illuminate/contracts&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
repository.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#filesystem-adapters"&gt;
  &lt;/a&gt;
  Filesystem adapters
&lt;/h4&gt;

&lt;p&gt;Another common thing is to write data to files. Files that may be located somewhere else, like: an FTP server, a Dropbox folder or Google Drive. One of the most used packages for writing data to files is &lt;a href="https://github.com/thephpleague/flysystem"&gt;&lt;code&gt;thephpleague/flysystem&lt;/code&gt;&lt;/a&gt;. This packages provides a &lt;a href="https://github.com/thephpleague/flysystem/blob/2.x/src/FilesystemAdapter.php"&gt;FilesystemAdapter&lt;/a&gt; interface that can have specific implementations. And because of this &lt;em&gt;Target&lt;/em&gt; interface, others can build 3rd-party packages that provide another Filesystem; like: &lt;a href="https://github.com/spatie/flysystem-dropbox"&gt;&lt;code&gt;spatie/flysystem-dropbox&lt;/code&gt;&lt;/a&gt; by Spatie.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bridge-pattern"&gt;
  &lt;/a&gt;
  🔀 Bridge Pattern
&lt;/h2&gt;

&lt;p&gt;The Bridge Pattern is often confused with the Adapter Pattern, and with good reasons. Let's look at what problem this pattern tries to solve and how it is different from the Adapter Pattern.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h3&gt;

&lt;p&gt;Let's say we have two editors: a &lt;code&gt;MarkdownEditor&lt;/code&gt; and a &lt;code&gt;WysiwygEditor&lt;/code&gt;. Both editors can read and format some file and update the source on that file. The &lt;code&gt;MarkdownEditor&lt;/code&gt; obviously returns Markdown text, while the &lt;code&gt;WysiwygEditor&lt;/code&gt; returns HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WysiwygEditor&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;h1&amp;gt;Source&amp;lt;/h1&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// The formatted source.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MarkdownEditor&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'# Source'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// The formatted source.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At some point in time, we need a Markdown editor and a WYSIWYG editor that can read &amp;amp; store files on an FTP server. We could create a new editor that extends the &lt;code&gt;MarkdownEditor&lt;/code&gt; or &lt;code&gt;WysiwygEditor&lt;/code&gt; and overwrites the &lt;code&gt;read()&lt;/code&gt; and &lt;code&gt;store()&lt;/code&gt; method. However, this will likely introduce a lot of duplicate code between the two. Instead, we'll use the Bridge Pattern.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h3&gt;

&lt;p&gt;The Bridge Pattern also consist of 4 elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🎨 &lt;strong&gt;Abstraction:&lt;/strong&gt; An abstract base class that delegates some predefined functions to a &lt;em&gt;Implementor&lt;/em&gt;. In our example this will be an &lt;code&gt;AbstractEditor&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;🧑‍🎨 &lt;strong&gt;Refined Abstraction:&lt;/strong&gt; A specific implementation of the &lt;em&gt;Abstraction&lt;/em&gt;. In our example this will be &lt;code&gt;MarkdownEditor&lt;/code&gt; and &lt;code&gt;WysiwygEditor&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;🖌️ &lt;strong&gt;Implementor:&lt;/strong&gt; An interface that the &lt;em&gt;Abstraction&lt;/em&gt; uses for delegation. In our example this will be a &lt;code&gt;FileSystemInterface&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;🖼️ &lt;strong&gt;Concrete Implementor:&lt;/strong&gt; A specific implementation of the &lt;em&gt;Implementor&lt;/em&gt; that actually does the work. In our example this will be &lt;code&gt;LocalFileSystem&lt;/code&gt; and a &lt;code&gt;FtpFileSystem&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is at this point, I think one of the things that makes this pattern hard to grasp is this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--doYuSvbh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://doeken.org/assets/img/there-is-no-bridge.jpg" class="article-body-image-wrapper"&gt;&lt;img alt="There is no bridge" src="https://res.cloudinary.com/practicaldev/image/fetch/s--doYuSvbh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://doeken.org/assets/img/there-is-no-bridge.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unlike the Adapter Pattern, where there is an actual &lt;em&gt;Adapter&lt;/em&gt;; the Bridge Pattern does &lt;em&gt;not&lt;/em&gt; have a &lt;em&gt;Bridge&lt;/em&gt;. But no worries, we'll see the thing that makes this the &lt;em&gt;Bridge&lt;/em&gt; soon enough!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#refactoring-the-code"&gt;
  &lt;/a&gt;
  Refactoring the code
&lt;/h4&gt;

&lt;p&gt;Let's refactor our example code by implementing the Bridge Pattern. We'll start by extracting the &lt;em&gt;Abstraction&lt;/em&gt; from our two Editors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AbstractEditor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WysiwygEditor&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;AbstractEditor&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;h1&amp;gt;Source&amp;lt;/h1&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// The formatted source.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MarkdownEditor&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;AbstractEditor&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'# Source'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// The formatted source.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this refactoring we've created an &lt;code&gt;AbstractEditor&lt;/code&gt; that now contains all the duplicate code there was between the editors, and made the editors extend this abstraction. This way the editors, or &lt;em&gt;Refined Abstractions&lt;/em&gt;, are only focussing on what they do best: formatting the source of the file.&lt;/p&gt;

&lt;p&gt;But remember, we still don't have a &lt;em&gt;Implementor&lt;/em&gt; or a &lt;em&gt;Refined Implementor&lt;/em&gt; and we really want to use multiple file systems. So let's create the &lt;em&gt;Implementor&lt;/em&gt; and a &lt;code&gt;LocalFileSystem&lt;/code&gt; as the first &lt;em&gt;Refined Implementor&lt;/em&gt;. Then we'll update the &lt;code&gt;AbstractEditor&lt;/code&gt; to use the &lt;em&gt;Implementor&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;FilesystemInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_contents&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LocalFileSystem&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;FilesystemInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_contents&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$file_contents&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AbstractEditor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;FilesystemInterface&lt;/span&gt; &lt;span class="nv"&gt;$filesystem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;private&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;filesystem&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;filesystem&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here is the &lt;em&gt;"Bridge"&lt;/em&gt;. It's the connection between the &lt;em&gt;Abstraction&lt;/em&gt; and the &lt;em&gt;Implementor&lt;/em&gt;. It connects one editor to one filesystem. But now the two can vary independently. We can add multiple editors that all have their own formatting, like &lt;code&gt;yaml&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt; or &lt;code&gt;csv&lt;/code&gt;. And all these editors can use any filesystem to read and store those files.&lt;/p&gt;

&lt;p&gt;So now we can create a &lt;code&gt;FtpFileSystem&lt;/code&gt; that reads and stores the formatted content on an FTP server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FtpFileSystem&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;FilesystemInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Imagine the ultimate FTP file reading code here.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_contents&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Imagine the ultimate FTP file writing code here.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using the Bridge Pattern we've made it possible to make 4 different implementation combinations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 1. A local markdown file editor&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;MardownEditor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;LocalFileSystem&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;'local-file.md'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 2. An FTP markdown file editor&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;MardownEditor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;FtpFileSystem&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;'ftp-file.md'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 3. A local WYSIWYG file editor&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;WysiwygEditor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;LocalFileSystem&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;'local-file.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 4. An FTP WYSIWYG file editor&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;WysiwygEditor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;FtpFileSystem&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;'ftp-file.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if we were to add another &lt;code&gt;AbstractEditor&lt;/code&gt; and another &lt;code&gt;FileSystem&lt;/code&gt; we'd have 9 possible combination, while only adding 2 classes 🤯!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-the-bridge-pattern"&gt;
  &lt;/a&gt;
  Benefits of the Bridge Pattern
&lt;/h3&gt;

&lt;p&gt;As we've seen there are some benefits to using the Bridge Pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;💧 The code is more DRY (Don't Repeat Yourself) by extracting the &lt;em&gt;Abstraction&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;🧱 It is more extendable by creating two separate abstractions that can vary independently.&lt;/li&gt;
&lt;li&gt;🔬 The individual classes are smaller and therefore easier to test and understand.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#similarities-with-adapter-pattern"&gt;
  &lt;/a&gt;
  Similarities with Adapter Pattern
&lt;/h3&gt;

&lt;p&gt;Another reason why some have trouble understanding the difference between the Bridge Pattern and the Adapter Pattern is that the connecting part of the "bridge" actually looks like an &lt;em&gt;Adapter&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;Client&lt;/strong&gt; could be seen as the &lt;strong&gt;Abstraction&lt;/strong&gt; as that also delegates to an interface.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;Target&lt;/strong&gt; could be seen as the &lt;strong&gt;Implementor&lt;/strong&gt; as this also defines an interface to adhere to.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;Adapter&lt;/strong&gt; could be seen as the &lt;strong&gt;Refined Implementor&lt;/strong&gt; because this implements the interface and fulfills the requirements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That last one is probably the most confusing; as a &lt;em&gt;Refined Implementor&lt;/em&gt; can actually &lt;em&gt;be&lt;/em&gt; an &lt;em&gt;Adapter&lt;/em&gt; to a dependency or &lt;em&gt;Adaptee&lt;/em&gt;, but this is not required. The &lt;em&gt;Refined Implementor&lt;/em&gt; will often be a class on its own, while an &lt;em&gt;Adapter&lt;/em&gt; will always delegate. But the two are indeed not mutually exclusive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;I hope you enjoyed reading this article! If so, please leave a ❤️ or a 🦄 and consider subscribing! I write posts on PHP almost every week. You can also follow me on &lt;a href="https://twitter.com/intent/follow?screen_name=doekenorg"&gt;twitter&lt;/a&gt; for more content and the occasional tip.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>php</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>AWS open source news and updates 84</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 04 Oct 2021 06:45:46 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-84-4c4e</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-84-4c4e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#october-4th-2021-instalment-84"&gt;
  &lt;/a&gt;
  October 4th, 2021 - Instalment #84
&lt;/h2&gt;

&lt;p&gt;Newsletter #84.&lt;/p&gt;

&lt;p&gt;Welcome to issue #84 of this newsletter, and we have more great new open source projects for you this week. We have a couple of great security/compliance/governance tools that will help you with security in &lt;strong&gt;cloudgraphdev&lt;/strong&gt; and (the amazingly named) &lt;strong&gt;wonk&lt;/strong&gt;, &lt;strong&gt;placebo&lt;/strong&gt;, a tool to help you mock tests, a new cli from AWS to help you simplify those of you working with genomics workloads, and more. &lt;/p&gt;

&lt;p&gt;With the GA last week of OpenTelemetry and Prometheus managed services on AWS, we have a plethora of posts covering a number of different topics as well as Apache Tinkerpop, Bottlerocket, Apache Kafka, OpenSearch and Terraform. make sure you check out the events section too, and as always, if you use, or are creating/ working on an open source project you would like me to include in this newsletter, then please get in touch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Danilo Poccia, Mitch Garnaat, jaitl, AutoCloud, Amino Inc, Kyle Davis, Jegan Sundarapandian, Chloe Goldstein, Imaya Kumar Jagannathan, Marc Chene, Vikram Venkataraman, Arun Chandapillai, Abhi Khanna, Mike George, Abhi Khanna, Channy Yun, Jeremy Cowan, Sai Charan Teja Gopaluni, and Vijay K Sikha, Alolita Sharma, Nizar Tyrewalla, Brad Bebee, Kelvin Lawrence, Stephen Mallette, Huy Vo, Iris Song, Michael Hausenblas and Garry Stafford.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-open-source-projects"&gt;
  &lt;/a&gt;
  Latest open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;amazon-genomics-cli&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/yk"&gt;amazon-genomics-cli&lt;/a&gt; this open source project is a tool to simplify the processes of deploying the AWS infrastructure required to run genomics workflows in the cloud, to submit those workflows to run, and to monitor the logs and outputs of those workflows. You can find out more and get hands on by reading and working through Danilo Poccia's blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/yq"&gt;New – Amazon Genomics CLI Is Now Open Source and Generally Available&lt;/a&gt;. You can also check out &lt;a href="https://www.youtube.com/watch?v=mMeBeFbFzq0"&gt;this YT session&lt;/a&gt; that provides some additional background before showing you this in action.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cloudgraphdev&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/yp"&gt;cloudgraphdev&lt;/a&gt; another interesting tool to help you manage security on AWS, CloudGraph is an open-source search engine for your public cloud infrastructure, powered by DGraph and GraphQL. You can quickly query assets, configurations, and more across accounts and providers. CloudGraph also enables you to solve a host of security, compliance, governance, and FinOps challenges in the time it takes to write a single GraphQL query. Very nice project from the folks at AutoCloud&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hsc04t2u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/cloudgraphdev/cli/master/docs/images/init.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hsc04t2u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/cloudgraphdev/cli/master/docs/images/init.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;wonk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/yl"&gt;wonk&lt;/a&gt; this project from Amino Inc is a tool for combining a set of AWS policy files into smaller compiled policy sets. Good documentation covering the typical use cases and why you might find this useful. Definitely a tool for your armoury as you look to put security first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;placebo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/yn"&gt;placebo&lt;/a&gt; Mitch Garnaat has put together this open source tool Placebo, that allows you to mock boto3 calls that look just like normal calls but actually have no effect at all. It does this by allowing you to record a set of calls and save them to a data file and then replay those calls later (e.g. in a unit test) without ever hitting the AWS endpoints. Provide examples on how to get up and running&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kDynamoMapper&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/yo"&gt;kDynamoMapper&lt;/a&gt; if you are a Kotlin developer, this project from jaitl will be of interest. It provides a lightweight AWS DynamoDB mapper for Kotlin written in pure Kotlin. Check out the full README.md for more details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-community-blog-posts"&gt;
  &lt;/a&gt;
  AWS and Community blog posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When it comes to the topic of Data Analytics, you can always count on Gary Stafford to come up with the goods, and last week he published another great post, &lt;a href="https://aws-oss.beachgeek.co.uk/z1"&gt;Stream Processing with Apache Spark, Kafka, Avro, and Apicurio Registry on Amazon EMR and Amazon MSK&lt;/a&gt;. This is the second part of previous post I shared a few weeks ago, and in this post he shows you how you can read and write messages to and from Amazon MSK in Apache Avro format. The post also shows how you can store the Avro-format Kafka message’s key and value schemas in Apicurio Registry and retrieve the schemas instead of hard-coding the schemas in the PySpark scripts. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RS0m3T12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/4800/1%2AXGnUIP5Xj3w1ODheHBEl-A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RS0m3T12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/4800/1%2AXGnUIP5Xj3w1ODheHBEl-A.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bottlerocket&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bottlerocket is an open source Linux-based operating system from Amazon that was purpose built for running containers with a strong emphasis on security. The result is an operating system that comes with a variety of built-in controls for creating a secure environment for running containerised workloads. If you want to dive deep and find out more, then Jeremy Cowan, Sai Charan Teja Gopaluni, and Vijay K Sikha have collaborated together on this post, &lt;a href="https://aws-oss.beachgeek.co.uk/yx"&gt;Security features of Bottlerocket, an open source Linux-based operating system&lt;/a&gt; where they explore several of the security features available in Bottlerocket and how they protect your environment. [deep dive]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache TinkerPop&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apache TinkerPop is an open source computing framework for graph databases and graph analytic systems. Designed to appeal to software developers, TinkerPop lets developers add graph computing capabilities to their applications without worrying about developing APIs, graph processing engines, or graph algorithms. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/z0"&gt;Why developers like Apache TinkerPop, an open source framework for graph computing&lt;/a&gt; Brad Bebee, Kelvin Lawrence, and Stephen Mallette provide an introduction to the Apache TinkerPop open source project and explain how it helps developers create and explore directed property graphs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clsnl97u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/21/lakelvin_tinkerpop_f3_sm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clsnl97u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/21/lakelvin_tinkerpop_f3_sm.png" alt="graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prometheus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week AWS announced the general availability (GA) of Amazon Managed Service for Prometheus, a fully managed Prometheus-compatible service. To celebreate, we saw a number of posts covering this open source project.&lt;/p&gt;

&lt;p&gt;First up we had &lt;a href="https://aws-oss.beachgeek.co.uk/ys"&gt;Amazon Managed Service for Prometheus is now Generally Available&lt;/a&gt; Imaya Kumar Jagannathan, Marc Chene, and Vikram Venkataraman walk you through everything new since the announcement at re:Invent and walk you through how to get started. [hands on] My colleague Channy Yun also wrote about this launch in &lt;a href="https://aws-oss.beachgeek.co.uk/yv"&gt;Amazon Managed Service for Prometheus Is Now Generally Available with Alert Manager and Ruler&lt;/a&gt; and covers how we contributed the high-availability alert manager to the open source Cortex project, a project providing horizontally scalable, highly available, multi-tenant, long-term store for Prometheus.&lt;/p&gt;

&lt;p&gt;If you like to receive alerts in Slack, then the next post, &lt;a href="https://aws-oss.beachgeek.co.uk/yt"&gt;How to integrate Amazon Managed Service for Prometheus with Slack&lt;/a&gt; is perfect for you. Arun Chandapillai and Abhi Khanna walk you through a solution on how to set up the Alert manager in Amazon Managed Service for Prometheus to publish alerts to a Slack channel via Amazon Simple Notification Service (SNS) and AWS Lambda. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UDWAkk3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/09/30/11-2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UDWAkk3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/09/30/11-2.jpg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you prefer to receive your alerts in PagerDuty, that is cool too and Mike George and Abhi Khanna have you covered in the post, &lt;a href="https://aws-oss.beachgeek.co.uk/yu"&gt;Using Amazon Managed Service for Prometheus Alert Manager to receive alerts with PagerDuty&lt;/a&gt; [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tQJ_Ykte--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/09/27/Figure1-1-1024x520.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tQJ_Ykte--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/09/27/Figure1-1-1024x520.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last post is &lt;a href="https://aws-oss.beachgeek.co.uk/yw"&gt;Using Prometheus Adapter to autoscale applications running on Amazon EKS&lt;/a&gt; from Vikram Venkataraman and it is a good one. He walks you through how to utilise Prometheus Adapter to autoscale Amazon EKS Pods running an Amazon App Mesh workload. AWS App Mesh is a service mesh that makes it easy to monitor and control services. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GAjpP9oN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/09/28/custom-metric-blog.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GAjpP9oN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/09/28/custom-metric-blog.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open Telemetry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week saw the announcement from Alolita Sharma and Nizar Tyrewalla thatAWS Distro for OpenTelemetry (ADOT) is now generally available with production-ready tracing support, in the post &lt;a href="https://aws-oss.beachgeek.co.uk/yy"&gt;AWS Distro for OpenTelemetry is now GA for tracing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Following that we had AWS interns, software engineers Huy Vo and Iris Song, share their experience with adding StatefulSet support in the OpenTelemetry Operator in the post &lt;a href="https://aws-oss.beachgeek.co.uk/yz"&gt;Adding StatefulSet support in the OpenTelemetry Operator&lt;/a&gt;. They talk about how they added StatefulSet support to the OpenTelemetry Operator, and describe our design choices and lessons learned.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XEakkBWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/02/vo-song_stateful-support-opentelemetry-operator_f3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XEakkBWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/02/vo-song_stateful-support-opentelemetry-operator_f3.png" alt="design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One final thing to share, is the always excellent, weekly roundup of Observability news from Michael Hausenblas. &lt;a href="https://aws-oss.beachgeek.co.uk/yi"&gt;This was last weeks newsletter&lt;/a&gt;, and I urge you to sign up as they always contain excellent material. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A few weeks back I shared news about new clients for OpenSearch. Kyle Davis has now put together a nice blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/ym"&gt;OpenSearch clients in Python, Go, and Node.js&lt;/a&gt; which shows you how to get up and running with these. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terraform&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you use Terraform as your preferred infrastructure as code (IaC) tool, then check out this post, &lt;a href="https://aws-oss.beachgeek.co.uk/yr"&gt;How to Deploy AWS Config Conformance Packs Using Terraform&lt;/a&gt; from Jegan Sundarapandian and Chloe Goldstein. They walk you through creating a Terraform template file that you can use to deploy and configure an AWS service (AWS Config) to help you with checking for conformance/compliance against Amazon S3 bucket best practices. [hands on]&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Managed Streaming for Apache Kafka (Amazon MSK) now supports Apache Kafka version 2.8.1 for new and existing clusters. &lt;a href="https://aws-oss.beachgeek.co.uk/yj"&gt;Apache Kafka 2.8.1 includes several bug fixes&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;Coming up later this week we have...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GraphQL API security best practices with AWS AppSync and AWS Amplify&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;14th October, 11am AEST&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a developer, the most important parts of managing your applications should always include enhancing performance while strengthening security. In this webinar, we take you through security best practices for your GraphQL API’s with AWS AppSync and AWS Amplify, providing you with an understanding of how these can be applied to your applications. In this session, you will learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GraphQL Protocol and how to configure a schema&lt;/li&gt;
&lt;li&gt;Possible ways to authenticate and authorise access to GraphQL APIs&lt;/li&gt;
&lt;li&gt;How to configure network security for your API&lt;/li&gt;
&lt;li&gt;How to enable observability for your API with logging, tracing or auditing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To &lt;a href="https://aws-oss.beachgeek.co.uk/ue"&gt;register for this event, use this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon SageMaker and Open-Source Tools for ML: Better Together&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;October 7 | 11 AM PT | 2 PM ET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many organisations rely on open-source tools to support the Machine Learning lifecycle. Amazon SageMaker has been rapidly evolving by introducing support and compatibility for various open-source frameworks. In this session, you will learn how to build a customisable ML Infrastructure based on Amazon SageMaker and open-source components. We will discuss pros and cons, the limitations of different tools that support specific stages of the ML workflow, and best practices for MLOps, to automate these stages into repeatable pipelines.&lt;/p&gt;

&lt;p&gt;To read more and &lt;a href="https://aws-oss.beachgeek.co.uk/wz"&gt;register for this event, click here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flink Forwards Global 2021&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;October 26th/27th&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Flink Forward Global 2021 is a 2-day virtual conference for the Apache Flink and stream processing communities. Apache Flink is an open-source distributed engine for processing data streams that can support both streaming and batch workloads. Flink Forward has keynote presentations and talks on production Flink use cases, technical deep dive sessions, and the growth of the Flink ecosystem. You can meet core Flink committers, new and experienced users, and thought leaders who share experiences and best practices in stream processing, real-time analytics, and the management of mission-critical Flink deployments in production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/wh"&gt;Read more and sign up here.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>RxJS - Custom Operators</title>
      <author>Luca Del Puppo</author>
      <pubDate>Mon, 04 Oct 2021 06:14:29 +0000</pubDate>
      <link>https://dev.to/this-is-learning/rxjs-custom-operators-5gah</link>
      <guid>https://dev.to/this-is-learning/rxjs-custom-operators-5gah</guid>
      <description>&lt;p&gt;Hi Folks 👋&lt;br&gt;
after many articles in which I have illustrated the different types of operators already included in the RxJS library, today I show you how to create your own operators.&lt;br&gt;
You can create a new operator in two ways: mixing the different operators illustrated in the previous articles or from scratch.&lt;br&gt;
In common cases, when we need to create a new operator, all the behaviours that we need already exist in the operators exposed by the RxJS library. In these cases, we can use the "pipe" function to combine together the operators. With the "pipe" function you can create a new function that will be the new operator, and inside this function you can create the logic of your operator.&lt;br&gt;
Here's an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UnaryFunction&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;takeLogAndDelay&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;UnaryFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeNumber&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;takeLogAndDelay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Source&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;Source 0
Source 1
Source 2
Source 3
Source 4
Source 5
Source 6
Source 7
Source 8
Source 9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, in the last example I created a new operator called "takeLogAndDelay". This operator combines together three operators: tap, take and delay.&lt;br&gt;
As you can see, it's easy to create a new operator of this type and you just need to flow these rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a new function with the name of the new operator&lt;/li&gt;
&lt;li&gt;return the pipe function&lt;/li&gt;
&lt;li&gt;combine the operators in the pipe function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In 95% of your cases, you can resolve your problem and create a new operator using this method, while in the 5% of the cases not managed by this method you can create a new operator from scratch.&lt;br&gt;
Below an example of the delay operator created from scratch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delayInMs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allTimerIDs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NodeJS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Timeout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hasCompleted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timerID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;allTimerIDs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timerID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasCompleted&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;allTimerIDs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;delayInMs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

          &lt;span class="nx"&gt;allTimerIDs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timerID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;hasCompleted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allTimerIDs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;allTimerIDs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;timerID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timerID&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleTimeString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;before&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleTimeString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;after&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;22:11:01 before 1
22:11:01 before 2
22:11:01 before 3
22:11:04 after 1
22:11:04 after 2
22:11:04 after 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we can create a new operator and manage all the behaviours needed for our logic using the Observable constructor. It's rare to use this approach but if you find yourself in front of a case not yet solved by the existing operators, you can rely on it.&lt;/p&gt;

&lt;p&gt;Ok guys, that's all for today.&lt;/p&gt;

&lt;p&gt;See you soon&lt;br&gt;
Bye bye 👋 &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>rxjs</category>
    </item>
    <item>
      <title>How I maintain large-scale dataset in react</title>
      <author>menomanabdulla</author>
      <pubDate>Mon, 04 Oct 2021 06:08:12 +0000</pubDate>
      <link>https://dev.to/menomanabdulla/how-i-maintain-large-scale-dataset-in-react-23la</link>
      <guid>https://dev.to/menomanabdulla/how-i-maintain-large-scale-dataset-in-react-23la</guid>
      <description>&lt;p&gt;Frontend technology turns in robust at current decades. Modern web technology now more dynamic, more interactive seems like more realistic then earlier. Business owners want more engaging of user and there is a cold-war among companies to, how provides more realistic feel, more efficient user-experience for potential customers. And here data plays a big game. If we are on frontend side then terms going like how efficiently maintain data at frontend. Today we are going to explore, how productively we could maintain large-scale data-set at frontend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://large-dataset-with-react.netlify.app/"&gt;Live Preview&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/menomanabdulla/large-dataset-with-react"&gt;Source Code&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pagination"&gt;
  &lt;/a&gt;
  Pagination:
&lt;/h2&gt;

&lt;p&gt;Pagination is one of conventional and proven way of handling large-scale of dataset. We can reduce pressure from DOM tree by using pagination in large data context. As well as it’s also favorable for makes   frontend UI organized and clean. For paginate I use react-paginate npm package. It’ s really highly customizable and super simple to use. For customization it has a large list of props,  personally  I found it handy for dealing with large-scale data-set. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#infinitescroll"&gt;
  &lt;/a&gt;
  Infinite-scroll:
&lt;/h2&gt;

&lt;p&gt;Infinite-scroll is more trendy approach of maintain large-scale of data-set at frontend. I love infinite-scroll for its smoothness. Infinite-scroll is a bunch handy for news-feed component for this a large amount if popular platform are using infinite-scroll like facebook, twitter, linkedin most of the social-media platform are using infinite-scroll concept. In react we can use infinite-scroll by a popular package called ‘react-infinite-scroll’. Most interesting things about ‘react-infinite-scroll’ are its size and usability. Super simple to use, with super handy use-case. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtualized-and-window"&gt;
  &lt;/a&gt;
  Virtualized and Window:
&lt;/h2&gt;

&lt;p&gt;According to react-windows doc: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;React-window reduce the amount of work required to render the initial view and to process updates.&lt;/li&gt;
&lt;li&gt;It reduces the memory footprint by avoiding over allocation of DOM nodes. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;React-window is new form of react-virtualized. React-window is smaller and faster than react-virtualized. I would suggest go for react-window instead of react-virtualized for those size, customizability and speed issues.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lastwords"&gt;
  &lt;/a&gt;
  Last-words:
&lt;/h3&gt;

&lt;p&gt;Thanks for staying till now; I highly appreciate your effort. If you have any suggestion about maintaining large-scale data-set at frontend especially in react please share in comment box so that it will resourceful for others too. If you love this article let me know by your activity. Happy coding.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>API Testing - Database State Validation in vREST NG</title>
      <author>Dheeraj Aggarwal</author>
      <pubDate>Mon, 04 Oct 2021 05:50:27 +0000</pubDate>
      <link>https://dev.to/dheerajaggarwal/api-testing-database-state-validation-in-vrest-ng-gj5</link>
      <guid>https://dev.to/dheerajaggarwal/api-testing-database-state-validation-in-vrest-ng-gj5</guid>
      <description>&lt;p&gt;Watch our video #tutorial on how you may validate the database state during the execution of API Test cases in the #vREST NG Application.&lt;/p&gt;

&lt;p&gt;Video Link: &lt;a href="https://youtu.be/dVdc8e0keiE"&gt;https://youtu.be/dVdc8e0keiE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Playlist: &lt;a href="https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0"&gt;https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;vREST NG is an enterprise-ready application for Automated API Testing. You can download and install the vREST NG application directly on Windows, OSX, and Linux via our website.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important Links:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://vrest.io/?utm_source=devto&amp;amp;utm_medium=devto-desc&amp;amp;utm_campaign=video"&gt;vREST NG Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//support@vrest.io"&gt;Contact Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/NtRa7kw"&gt;Community Chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://meetings.hubspot.com/dheeraj-aggarwal"&gt;Book a Live Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please do like and share if you found this video helpful and let the voice heard by the testing community. Also, let us know your feedback by commenting on this post.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>vrestng</category>
      <category>apitesting</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Web 3.0: Fusion of semantic web and Web 2.0</title>
      <author>pramit_marattha</author>
      <pubDate>Mon, 04 Oct 2021 05:48:44 +0000</pubDate>
      <link>https://dev.to/aviyel/web-3-0-fusion-of-semantic-web-and-web-2-0-26ai</link>
      <guid>https://dev.to/aviyel/web-3-0-fusion-of-semantic-web-and-web-2-0-26ai</guid>
      <description>&lt;p&gt;World Wide Web has greatly facilitated access to digitally stored data. Content on the World Wide Web, on the other hand, has only been machine-readable, not fully machine-understandable. Because most information on the World Wide Web is given in natural language, the available documents can only be comprehended entirely by humans. The Semantic Web is built on the content-oriented description of digital documents using defined vocabularies to give machine-readable semantics. As a result, the Web of Links is transformed into a Web of Semantic Web. The classic Web 1.0 experienced an angular shift into Web 2.0, concentrating on categorization, intellectual capacity, and collective wisdom. Only the combined strength of semantic web technologies and widespread user participation will be leading to Web 3.0.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h73NQlns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oifyhemog4nsrxnkdkq2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h73NQlns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oifyhemog4nsrxnkdkq2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The evolving semantic web cannot be grown and broadened to the degree required for a complete transformation of the current web without Web 2.0 technologies. On the other hand, without the addition of machine-understandable content descriptions based on semantic web technologies, current Web 2.0 technologies cannot be leveraged for automatic service composition as well. The ultimate global knowledge infrastructure cannot be fully automated; instead, it requires collective and widespread human participation based on open semantic platforms as well as standards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NRGkXyux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lt3mccsmrfgn7f9aic2u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NRGkXyux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lt3mccsmrfgn7f9aic2u.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beginning-of-the-web-20-era"&gt;
  &lt;/a&gt;
  Beginning of the Web 2.0 era.
&lt;/h2&gt;

&lt;p&gt;Web 2.0 denotes a fundamental change in the advancement of the internet: Web 1.0, also known as the Web of business and Companies, has given way to Web 2.0, known as the Web of individuals and People. This shift has not resulted in the introduction of new technologies, but it has significantly altered the user's role and value. Tim O'Reilly and Dale Dougherty of O'Reilly Media coined the term Web 2.0 to describe new emerging web applications and trends. Web 2.0, according to O'Reilly, is comprised of the following concepts:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Web as a platform&lt;/em&gt;: The web and all of its connected devices are regarded as a single global platform of reusable services and data on which to build using open standards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nd2BRWPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/na51r6sc7q5yfl80rzyo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nd2BRWPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/na51r6sc7q5yfl80rzyo.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Collective wisdom&lt;/em&gt;: A Tradition of Involvement emerges from the establishment of open systems that support and enable collaborative content production based on the notion of "having faith rather than having control". The observation is that a large number of users provides a great amount of knowledge, but that same large number of users also prevents misuse of services and removes incorrect content. Wikipedia is an excellent example of harnessing people's collective intelligence. It is a free Internet-based encyclopedia that was founded in 2001 and operates under an open-source management model. Wikipedia's open-source production model exemplifies Web 2.0, a socially progressive environment in which the web of social software entangles users in both their physical and virtual workplaces. The Wikipedia community is founded on a set of standard principles. Neutrality is an important principle. Another factor is the belief that contributors are acting in a sincere and deliberate manner. Readers can correct perceived errors, and disagreements over facts and possible bias are resolved through contributor discussions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0VXJmdYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5knbiri2wihoncqpkmn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0VXJmdYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5knbiri2wihoncqpkmn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Open source and service operations&lt;/em&gt;: In the Web 2.0 era, the software is delivered as a service rather than a product. The core competency of the companies involved in the daily operation of their services, not the algorithms used. The dynamic nature of the services necessitates continual, cost-effective transformation through the use of an open source development style. Many of the services have been in the “continual beta” phase for many years, with new features being introduced on a regular basis. Successful Web 2.0 businesses/companies are experts and experienced at tracking user activity in real-time to determine which new features are being currently used, how they are being used, and how they should be adjusted and adapted accordingly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vQvTNfvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeqrwn7g1tc50l8z8lzj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vQvTNfvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeqrwn7g1tc50l8z8lzj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fully data-driven: Databases are at the core of Web 2.0 processes, where the data itself is far more essential than the application or interface that utilizes it. The race to own certain classes of core data, such as location, identity, product identifying information, and namespaces, is on in the market. Moreover, a critical mass of data can be attained through user aggregation, and the gathered information is then turned into a system service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8n_NrDfX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0jqf5xmn8ghi0govh9m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8n_NrDfX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0jqf5xmn8ghi0govh9m.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beyond Personal Computers: Web 2.0 systems are distinguished by the fact that they are no longer restricted to the Desktop / PC platform. This is not new in terms of web applications, but Web 2.0 apps provide a more complete achievement of the web's full potential as a platform, embracing not only the world of interconnected PCs but also mobile phones and various portable / wearables gadgets as well as devices.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K0buXvQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rl5ewcvgzxsrt5dmrer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K0buXvQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rl5ewcvgzxsrt5dmrer.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aviyel.com/post/1018/web-3-0-fusion-of-semantic-web-and-web-2-0"&gt;Click Here for full article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow &lt;a href="https://twitter.com/AviyelHq"&gt;@aviyelHQ&lt;/a&gt; or &lt;a href="https://aviyel.com/discussions"&gt;sign-up&lt;/a&gt; on Aviyel for early access if you are a project maintainer, contributor, or just an Open Source enthusiast.&lt;/p&gt;

&lt;p&gt;Twitter =&amp;gt;&lt;a href="https://twitter.com/AviyelHq"&gt;https://twitter.com/AviyelHq&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Official Site =&amp;gt; &lt;a href="https://aviyel.com/discussions"&gt;https://aviyel.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>web3</category>
      <category>semanticweb</category>
      <category>security</category>
      <category>opensource</category>
    </item>
    <item>
      <title>The Swallow programming language - A Python-like language that's as fast as C.</title>
      <author>Ethan Olchik</author>
      <pubDate>Mon, 04 Oct 2021 05:45:39 +0000</pubDate>
      <link>https://dev.to/ethanolchik/the-swallow-programming-language-a-python-like-language-that-s-as-fast-as-c-43j7</link>
      <guid>https://dev.to/ethanolchik/the-swallow-programming-language-a-python-like-language-that-s-as-fast-as-c-43j7</guid>
      <description>&lt;p&gt;Hey guys!&lt;/p&gt;

&lt;p&gt;I'm Ethan, I'm one of 8 swallow developers. This post is gonna be about some updates we've added into swallow lately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h2&gt;

&lt;p&gt;If you know Python, you know how easy it is. However, it also comes with a big downgrade. Python is slow, and I'm pretty sure every python developer knows this by now. This is kind of annoying. That's where Swallow comes in. Me and 8 other friends have been working on Swallow for the past few months. Swallows syntax is very similar to Python's, and it gets trans-compiled to C, thus making it as fast as C. Below I've written 2 programs, one in Swallow and one in Python.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#swallow"&gt;
  &lt;/a&gt;
  Swallow
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;# Swallow has type inference!
&lt;/span&gt;    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;function return types can be omitted.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These two programs are almost the same, which makes it so easy for Python users to switch to. Now, you might be asking: "How much faster is Swallow?" Well, to answer your question, here are the results:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#swallow"&gt;
  &lt;/a&gt;
  Swallow:
&lt;/h4&gt;

&lt;p&gt;Executed in: 1.06 secs&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python:
&lt;/h4&gt;

&lt;p&gt;Executed in: 32.30 secs&lt;/p&gt;

&lt;p&gt;As you can see, Swallow is significantly faster than Python. It is around 30x faster than python when running this program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new"&gt;
  &lt;/a&gt;
  What's new?
&lt;/h2&gt;

&lt;p&gt;Here are some of Swallow's newest features:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-inference"&gt;
  &lt;/a&gt;
  Type Inference
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Type_inference"&gt;Type Inference&lt;/a&gt; is one of Swallow's newest features. This allows Swallow code to be written with simplicity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ifelsematch"&gt;
  &lt;/a&gt;
  if/else/match
&lt;/h3&gt;

&lt;p&gt;Although this may seem like a standard feature in any programming language, it does take time to add these features which is why I'm acknowledging it. Not much to say about it since it's in every programming language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#newish-features"&gt;
  &lt;/a&gt;
  New-ish Features
&lt;/h2&gt;

&lt;p&gt;Let's talk more about the features that are currently available in Swallow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ccode"&gt;
  &lt;/a&gt;
  Ccode
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ccode&lt;/code&gt; allows C code to be ran in Swallow. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;Ccode&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;Ccode&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{x}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# prints 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, any variables declared outside the &lt;code&gt;Ccode&lt;/code&gt; block can be used within &lt;code&gt;Ccode&lt;/code&gt; and vice versa. This also means you can import any C library through &lt;code&gt;Ccode&lt;/code&gt; and use it in Swallow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inline-assembly"&gt;
  &lt;/a&gt;
  Inline Assembly
&lt;/h3&gt;

&lt;p&gt;You can also have inline assembly in Swallow. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"It should add 45 and 50 using asm and print it&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"addl %%ebx, %%eax;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"=a"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%lld"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This prints &lt;code&gt;90&lt;/code&gt;, as expected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more"&gt;
  &lt;/a&gt;
  More
&lt;/h3&gt;

&lt;p&gt;You can find some more examples in the &lt;a href="https://github.com/Swallow-lang/swallow/tree/main/swallow/tests"&gt;Swallow test folder&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#planned-features"&gt;
  &lt;/a&gt;
  Planned Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Structs&lt;/li&gt;
&lt;li&gt;More decorators for different purposes&lt;/li&gt;
&lt;li&gt;Python ecosystem in Swallow

&lt;ul&gt;
&lt;li&gt;You will be able to use any python module in Swallow&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Swallow is planned to release version 0.0.1 sometime in March, so make so to show some support by starring the &lt;a href="https://github.com/swallow-lang/swallow"&gt;repo&lt;/a&gt; and make sure to press on the "Watch" button so you don't miss any updates.&lt;/p&gt;

&lt;p&gt;We would greatly appreciate any contributions, so if you find something that you can improve, open a pull-request! You can also check out our &lt;a href="https://github.com/swallow-lang/swallow/issues"&gt;open issues&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks so much for reading!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>python</category>
      <category>programming</category>
      <category>c</category>
    </item>
    <item>
      <title>Best practices for AWS Athena</title>
      <author>Christopher Thompson H.</author>
      <pubDate>Mon, 04 Oct 2021 05:44:01 +0000</pubDate>
      <link>https://dev.to/aws-builders/best-practices-for-aws-athena-12gb</link>
      <guid>https://dev.to/aws-builders/best-practices-for-aws-athena-12gb</guid>
      <description>&lt;p&gt;In this blog I will mention some of the best practices recommended by AWS for building queries in Athena based on my experience and the following resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://aws.amazon.com/blogs/big-data/top-10-performance-tuning-tips-for-amazon-athena/"&gt;https://aws.amazon.com/blogs/big-data/top-10-performance-tuning-tips-for-amazon-athena/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Joins"&gt;https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Joins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#general-recommendations"&gt;
  &lt;/a&gt;
  General Recommendations
&lt;/h1&gt;




&lt;h2&gt;
  &lt;a href="#always-use-where-on-partition-field"&gt;
  &lt;/a&gt;
  Always use WHERE on partition field
&lt;/h2&gt;

&lt;p&gt;This mainly in order to speed up time and cost.&lt;br&gt;
For example:&lt;br&gt;
Avoid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="k"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col_1&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'201912'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and prefer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;col_particion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'201911'&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;speedup&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;savings&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#avoid-using-order-by-without-limit"&gt;
  &lt;/a&gt;
  Avoid using ORDER BY without LIMIT
&lt;/h2&gt;

&lt;p&gt;It is extremely important to understand that the ORDER BY function must be done in a single node, since it is a slow and time-consuming function. Ideally it should be avoided, however, if within the use case you are implementing you must use it, I always recommend placing a LIMIT.&lt;br&gt;
For example:&lt;br&gt;
Avoid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and prefer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt; &lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;speedup&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;avoid&lt;/span&gt; &lt;span class="s1"&gt;'Query exhausted resources at this scale factor'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#select-only-the-columns-to-retrieve-the-final-result"&gt;
  &lt;/a&gt;
  Select only the columns to retrieve the final result
&lt;/h2&gt;

&lt;p&gt;This recommendation is very simple. In practical effect it is to avoid the SELECT * FROM.&lt;br&gt;
For example:&lt;br&gt;
Avoid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;tmp_table&lt;/span&gt;
&lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_1&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_2&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_3&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table_1&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="k"&gt;left&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;tmp_table&lt;/span&gt;
&lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_1&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_2&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_3&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;col_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;col_2&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table_1&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="k"&gt;left&lt;/span&gt; &lt;span class="k"&gt;join&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;col_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;col_3&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#schedule-data-aggregation-for-small-files"&gt;
  &lt;/a&gt;
  Schedule data aggregation for small files
&lt;/h2&gt;

&lt;p&gt;The numbers speak for themselves:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Query&lt;/th&gt;
&lt;th&gt;Number of files&lt;/th&gt;
&lt;th&gt;Run time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SELECT COUNT(*) FROM lineitem&lt;/td&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;8.4 seg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SELECT COUNT(*) FROM lineitem&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2.31 seg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Speedup&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;72% faster&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#prefer-the-use-of-regular-expressions-over-like"&gt;
  &lt;/a&gt;
  Prefer the use of regular expressions over 'LIKE'
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Query&lt;/th&gt;
&lt;th&gt;Run time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SELECT COUNT(*) FROM lineitem WHERE text_column LIKE '%wake%' OR text_column LIKE '%some%' OR text_column LIKE '%express%' OR text_column LIKE '%hello%'&lt;/td&gt;
&lt;td&gt;20.56 seg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SELECT COUNT(*) FROM lineitem WHERE regexp_like(text_column,'...')&lt;/td&gt;
&lt;td&gt;15.87 seg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Speedup&lt;/td&gt;
&lt;td&gt;17% faster&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Note: The expression would be&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;regexp_like(text_column, 'wake|some|express|hello')&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#when-using-group-by-for-multiple-fields-order-them-from-highest-to-lowest-cardinality"&gt;
  &lt;/a&gt;
  When using group by for multiple fields. order them from highest to lowest cardinality
&lt;/h2&gt;

&lt;p&gt;This will avoid memory errors and reduce the time to deliver results.&lt;br&gt;
For instance:&lt;br&gt;
Avoid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;column_genre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;department&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;department&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;column_genre&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;In case of using Crawlers to automatically obtain the structure of the data stored in S3, respect the data types supported for the source engine. Likewise, do not forget to run the crawler after a data update that may generate changes in the structure, this in order to update the structure in the glue catalog.&lt;/p&gt;

&lt;p&gt;Use &lt;em&gt;MSCK REPAIR&lt;/em&gt; TABLE only if the folders are created with the structure 'field1 =  / field2 =  /.../ fieldN = ' and only after creating the table, since it is' msck repair table 'is expensive operation and it is preferable to use' alter table add partition 'or glue api to add partitions.&lt;/p&gt;

&lt;p&gt;and do you have any good practice that you recommend? Comment it in the comment box.&lt;/p&gt;

&lt;p&gt;I hope this blog is useful for you. Greetings!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Introducing the First Set of Syncfusion .NET MAUI Controls</title>
      <author>Techguy</author>
      <pubDate>Mon, 04 Oct 2021 05:35:58 +0000</pubDate>
      <link>https://dev.to/techguy/introducing-the-first-set-of-syncfusion-net-maui-controls-15m0</link>
      <guid>https://dev.to/techguy/introducing-the-first-set-of-syncfusion-net-maui-controls-15m0</guid>
      <description>&lt;p&gt;The wait is over! &lt;a href="https://www.syncfusion.com/"&gt;Syncfusion&lt;/a&gt; has rolled out its first set of .NET MAUI controls in its &lt;a href="https://www.syncfusion.com/forums/169291/essential-studio-2021-volume-3-main-release-v19-3-0-43-is-available-for-download"&gt;Essential Studio 2021 Volume 3 release&lt;/a&gt;. As you know, the &lt;a href="https://docs.microsoft.com/en-us/dotnet/maui/what-is-maui"&gt;.NET multi-platform app UI (MAUI)&lt;/a&gt; is an evolution of Xamarin.Forms. It mainly focuses on single-project development for different platforms such as &lt;a href="https://en.wikipedia.org/wiki/Android_(operating_system)"&gt;Android&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/IOS"&gt;iOS&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/MacOS"&gt;macOS&lt;/a&gt;, and &lt;a href="https://en.wikipedia.org/wiki/Microsoft_Windows"&gt;Windows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To fulfill your custom control requirements in the .NET MAUI platform, we are working hard to provide brand new controls that are fast, feature-rich, and flexible to use in your apps.&lt;/p&gt;

&lt;p&gt;To begin our journey in .NET MAUI, in this 2021 Volume 3 release, we came out with three new preview controls:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.syncfusion.com/blogs/post/introducing-the-first-set-of-syncfusion-net-maui-controls.aspx#charts"&gt;Charts (Cartesian and circular charts)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.syncfusion.com/blogs/post/introducing-the-first-set-of-syncfusion-net-maui-controls.aspx#radial-gauge"&gt;Radial Gauge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.syncfusion.com/blogs/post/introducing-the-first-set-of-syncfusion-net-maui-controls.aspx#tab-view"&gt;Tab View&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This blog post will be a quick introduction to these new controls.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#charts"&gt;
  &lt;/a&gt;
  Charts
&lt;/h2&gt;

&lt;p&gt;The .&lt;a href="https://syncfusion.com/maui-controls/maui-charts"&gt;NET MAUI Charts&lt;/a&gt; control is the perfect tool to visualize data. It has a high level of user interactivity that focuses on the development, productivity, and ease of use. Its rich feature set includes data binding, multiple axes, animations, data labels, tooltip, selection, and zooming.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y875Asj7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.syncfusion.com/blogs/wp-content/uploads/2021/09/NET-MAUI-Charts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y875Asj7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.syncfusion.com/blogs/wp-content/uploads/2021/09/NET-MAUI-Charts.png" alt="Charts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#key-features"&gt;
  &lt;/a&gt;
  Key features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Chart types&lt;/strong&gt;: Cartesian and circular charts represent data in a unique style with crisp UI visualization in a user-friendly manner.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Interaction&lt;/strong&gt;: You can easily interact with the .NET MAUI Charts with features such as tooltip, selection, zooming, and panning.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Data binding&lt;/strong&gt;: The .NET MAUI Charts control map data from a specified path using the data-binding concept.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multiple series&lt;/strong&gt;: Simultaneously render multiple series with options to compare and visualize two different series.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Customization&lt;/strong&gt; – You can easily customize the chart features like title, axes, legends, and data labels.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#radial-gauge"&gt;
  &lt;/a&gt;
  Radial Gauge
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://syncfusion.com/maui-controls/maui-radial-gauge"&gt;.NET MAUI Radial Gauge&lt;/a&gt; is a multi-purpose data visualization control. It displays numerical values on a circular scale. Its rich feature set includes axes, ranges, pointers, and annotations that are fully customizable and extendable.&lt;/p&gt;

&lt;p&gt;You can use this control to create speedometers, temperature monitors, dashboards, multi-axis clocks, watches, compasses, and more.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dlnBLpH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.syncfusion.com/blogs/wp-content/uploads/2021/09/NET-MAUI-Radial-Gauge-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dlnBLpH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.syncfusion.com/blogs/wp-content/uploads/2021/09/NET-MAUI-Radial-Gauge-2.png" alt="RadialGauge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Axes&lt;/strong&gt;: The .NET MAUI Radial Gauge’s axis is a circular arc in which a set of values are displayed along a linear or custom scale. You can easily customize the axis elements, such as labels, ticks, and axis lines with built-in properties.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ranges&lt;/strong&gt;: Visual elements that quickly visualize where a value falls on the axis.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pointers&lt;/strong&gt;: Indicate values on an axis. The Radial Gauge has three customizable types of pointers: needle, marker, and range pointers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pointer animation&lt;/strong&gt;: Animate the pointer in a visually appealing way when the pointer moves from one value to another.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pointer interaction&lt;/strong&gt;: You can drag a pointer from one value to another to change a value at runtime.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Annotations&lt;/strong&gt;: Add multiple controls, such as text and images, as an annotation to a specific point of interest in the Radial Gauge.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tab-view"&gt;
  &lt;/a&gt;
  Tab View
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://syncfusion.com/maui-controls/maui-tab-view"&gt;.NET MAUI Tab View&lt;/a&gt; is a simple, intuitive interface for tab navigation in mobile applications, allowing users to switch between different tabs.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SvbukTgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.syncfusion.com/blogs/wp-content/uploads/2021/09/NET-MAUI-Tab-View-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SvbukTgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.syncfusion.com/blogs/wp-content/uploads/2021/09/NET-MAUI-Tab-View-2.png" alt="Tabview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nested tab support with different header placements.&lt;/li&gt;
&lt;li&gt;Fixed and scrollable tab headers.&lt;/li&gt;
&lt;li&gt;Image and text support for headers.&lt;/li&gt;
&lt;li&gt;Customizable headers with different fonts and colors.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>xamarin</category>
      <category>xamarinforms</category>
      <category>dotnet</category>
      <category>csharp</category>
    </item>
    <item>
      <title>3 JS code snippets sites to use daily!</title>
      <author>Rupak Dey</author>
      <pubDate>Mon, 04 Oct 2021 05:25:50 +0000</pubDate>
      <link>https://dev.to/deyrupak/3-js-code-snippets-sites-to-use-daily-5642</link>
      <guid>https://dev.to/deyrupak/3-js-code-snippets-sites-to-use-daily-5642</guid>
      <description>&lt;p&gt;&lt;em&gt;Save for later.&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1locdev"&gt;
  &lt;/a&gt;
  &lt;a href="https://1loc.dev/"&gt;1loc.dev&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;JS utilities in single line of code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gdzikopj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95r8jrbfr6h056eu5cwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gdzikopj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95r8jrbfr6h056eu5cwg.png" alt="1loc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#htmldomdev"&gt;
  &lt;/a&gt;
  &lt;br&gt;&lt;a href="https://htmldom.dev/"&gt;htmldom.dev&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Managing DOM with JS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GV1hWRll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g93ggu74vuftvavxnus9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GV1hWRll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g93ggu74vuftvavxnus9.png" alt="htmlDOM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#30secondsofcodeorg"&gt;
  &lt;/a&gt;
  &lt;br&gt;&lt;a href="https://www.30secondsofcode.org/"&gt;30secondsofcode.org&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Snippets for all development needs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B_XAdFpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ult6v1sod6666hxuap2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B_XAdFpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ult6v1sod6666hxuap2l.png" alt="30secCode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;P.S. Want the next post to be something specific? Do let me know in the comments.&lt;/p&gt;

&lt;p&gt;🤘🏻&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Connect with me : &lt;a href="https://github.com/deyRupak"&gt;Github&lt;/a&gt;&lt;br&gt;
Support me : &lt;a href="https://paypal.me/deyrdx?locale.x=en_GB"&gt;Buy me a coffee!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Rock, Paper, Scissors game in Python</title>
      <author>JRRyan606</author>
      <pubDate>Mon, 04 Oct 2021 05:18:21 +0000</pubDate>
      <link>https://dev.to/ryan_jr/rock-paper-scissors-game-in-python-3n2</link>
      <guid>https://dev.to/ryan_jr/rock-paper-scissors-game-in-python-3n2</guid>
      <description>&lt;p&gt;Hey there,  this is a simple GUI-Based Rock Paper Scissors game in python.&lt;/p&gt;

&lt;p&gt;Link to the github repo: &lt;a href="https://github.com/JRRyan606/Rock-Paper-Scissors-Tk-Gui"&gt;https://github.com/JRRyan606/Rock-Paper-Scissors-Tk-Gui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IMPORTANT, PLEASE READ THIS:&lt;/p&gt;

&lt;p&gt;The credit for this project MUST go to Bro code, He made a video in his Youtube channel called Python rock, paper, scissors game where he created a CLI-Based rock, paper, scissors game in python. I have created the GUI version of it. There are some features that Bro code created in his rock, paper, scissors game that is NOT YET coded in my gui version of the game. I will be coding it soon...&lt;/p&gt;

&lt;p&gt;Link to Bro code's Youtube channel: &lt;a href="https://www.youtube.com/channel/UC4SVo0Ue36XCfOyb5Lh1viQ"&gt;https://www.youtube.com/channel/UC4SVo0Ue36XCfOyb5Lh1viQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to the Python rock, paper, scissors game Youtube video: &lt;a href="https://youtu.be/GhPZHvhvlsk"&gt;https://youtu.be/GhPZHvhvlsk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to address any bugs on this project or some improvements that can be made on this project, feel free to email me about it at: &lt;a href="mailto:ryanjustin25706@gmail.com"&gt;ryanjustin25706@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is my first Tkinter project using Python, any improvements or suggestions is highly appreciated!!. Thanks.&lt;/p&gt;

&lt;p&gt;For those of you who have some problems seeing the code from the above github link, here's is the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from tkinter import *
import random

win = Tk()
win.title("Rock, Paper, Scissors")
win.geometry("801x300")


options = ["rock", "paper", "scissors"]
computer = random.choice(options)




def show():
    info = "Computer choose: " + computer
    info2 = "You choose: " + str(e.get()).lower()
    if str(e.get()).lower() == computer:
        text3 = Label(win, text="ITS A TIE!!", font=('Arial', 18))
        text3.pack()

    elif str(e.get()).lower() == "rock":
        if computer == "paper":
            text4 = Label(win, text="The computer wins!, you lose", font=('Arial', 18))
            text4.pack()

        if computer == "scissors":
            text5 = Label(win, text="You win!, the computer lose", font=('Arial', 18))
            text5.pack()

    elif str(e.get()).lower() == "scissors":
        if computer == "rock":
            text6 = Label(win, text="The computer wins!, you lose", font=('Arial', 18))
            text6.pack()

        if computer == "paper":
            text7 = Label(win, text="You win!, the computer lose", font=('Arial', 18))
            text7.pack()

    elif str(e.get()).lower() == "paper":
        if computer == "scissors":
            text8 = Label(win, text="The computer wins!, you lose", font=('Arial', 18))
            text8.pack()

        if computer == "rock":
            text9 = Label(win, text="You win!, the computer lose", font=('Arial', 18))
            text9.pack()

    elif str(e.get()).lower() is not options:
        text10 = Label(win, text="There is no such thing as " + str(e.get()).lower() + " in this game. " + "Please enter the correct word", fg="red", font=('Arial', 18))
        text10.pack()

    text1 = Label(win, text=info, font=('Arial', 18))
    text1.pack()
    text2 = Label(win, text=info2, font=('Arial', 18))
    text2.pack()





lab = Label(win, text="Rock, Paper or Scissors?", font=('Arial', 18))
lab.pack()


e = Entry(win, borderwidth=10, bg="powderblue")
e.pack()


b = Button(win, text="Submit", font=('Arial', 18), bg="lightgreen", command=show)
b.pack()
win.mainloop()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>github</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Next.js toggle between grid and list view</title>
      <author>Chris Bongers</author>
      <pubDate>Mon, 04 Oct 2021 05:16:35 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/next-js-toggle-between-grid-and-list-view-3c70</link>
      <guid>https://dev.to/dailydevtips1/next-js-toggle-between-grid-and-list-view-3c70</guid>
      <description>&lt;p&gt;Today we'll be building a simple yet super effective toggle function.&lt;br&gt;
It will give us the option to toggle between the list and grid view.&lt;/p&gt;

&lt;p&gt;The result will work like the video below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TAqDGKEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632638811731/wTlld_S4d.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TAqDGKEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632638811731/wTlld_S4d.gif" alt="Next.js toggle between grid and list view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to follow along, please use the &lt;a href="https://github.com/rebelchris/next-tailwind/tree/active-link"&gt;following branch&lt;/a&gt; as your starting point.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#managing-the-state-in-nextjs"&gt;
  &lt;/a&gt;
  Managing the state in Next.js
&lt;/h2&gt;

&lt;p&gt;Since Next.js is React, we can use all the fantastic React state management tools, such as the useState, which we'll use for this purpose.&lt;/p&gt;

&lt;p&gt;Open up your &lt;code&gt;pages/index.js&lt;/code&gt; file and import the &lt;code&gt;useState&lt;/code&gt; from React.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then inside our page, we can define the state and its default value.&lt;br&gt;
In our case, we'll use a boolean, where the default value (false) means it's in grid view, and if it's true, it will be in list view.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggleViewMode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggleViewMode&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;toggleViewMode&lt;/code&gt; will become the variable that we can read and use, and at the end of the line, you see &lt;code&gt;false&lt;/code&gt;, which sets its default value.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;setToggleViewMode&lt;/code&gt; is the function we can call to change the value of this variable.&lt;/p&gt;

&lt;p&gt;Let's go ahead and add a button that, on click, can change our variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex justify-end p-5"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
    &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"px-4 py-2 font-bold text-white bg-blue-500 rounded-full hover:bg-blue-700"&lt;/span&gt;
    &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setToggleViewMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;toggleViewMode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleViewMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;grid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Add this code above the current wrapping div&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The main things to watch for here are the &lt;code&gt;onClick&lt;/code&gt; function, which will invoke every time we click this button. This button then calls the &lt;code&gt;setToggleViewMode&lt;/code&gt; and passes the negative value it currently has.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember using &lt;code&gt;!&lt;/code&gt; in JavaScript is the logical "not" operator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the next part is based on what the current value is.&lt;br&gt;
So if the value is true, we show the grid. Else we show the list.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#nextjs-toggle-between-list-and-grid-view"&gt;
  &lt;/a&gt;
  Next.js toggle between list and grid view
&lt;/h2&gt;

&lt;p&gt;Now that we have this state and button working, we need to change our main wrapping div.&lt;/p&gt;

&lt;p&gt;Currently it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'grid grid-cols-3 gap-4 p-5'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the &lt;code&gt;grid-cols-3&lt;/code&gt; as this states the content should be split into three columns.&lt;/p&gt;

&lt;p&gt;We want to show three columns if we are in grid mode. Else only one column, which will resemble list mode.&lt;/p&gt;

&lt;p&gt;Change your class to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`grid grid-cols-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;toggleViewMode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; gap-4 p-5`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will use the number we need based on the view mode variable.&lt;br&gt;
And voila, we now have a grid/list mode toggle in Next.js.&lt;/p&gt;

&lt;p&gt;You can find this complete code example on &lt;a href="https://github.com/rebelchris/next-tailwind/tree/grid-list-mode"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>css</category>
    </item>
  </channel>
</rss>
