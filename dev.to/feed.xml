<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Programmer VS. Developer</title>
      <author>.Onion</author>
      <pubDate>Sun, 11 Jul 2021 11:44:29 +0000</pubDate>
      <link>https://dev.to/dotonion/programmer-vs-developer-24m3</link>
      <guid>https://dev.to/dotonion/programmer-vs-developer-24m3</guid>
      <description>&lt;p&gt;Software developers need a strong programming background, but they also need to find solutions to design and functionality problems. You need to understand that the software development cycle is not just about implementation, and that not every event requires both programming and programming. Software developers must be creative and develop differently from programmers in order to produce the software systems they design.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"Software developer needs to understand all the cycles of software development not just implementation (which sometimes will not event need any programming or coding)."&lt;/code&gt; &lt;sup&gt;5&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"Software developers must be creative, developing different ways that programmers can manufacture the software or system that they have designed."&lt;/code&gt; &lt;sup&gt;9&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"However, software developers still need to have a strong background in coding since they will need to find solutions to problems in design and functionality."&lt;/code&gt; &lt;sup&gt;7&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;If a computer programmer is working on writing a piece of code, he or she may need the help of other programmers or work with a software developer if problems arise.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"Even when a computer programmer is working independently on writing a piece of code, they need to seek out the help of other programmers or work with the software developer when problems arise."&lt;/code&gt; &lt;sup&gt;13&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most software developers must have at least a bachelor's degree in which they learn not only how to program a computer, but also the basics of computer architecture and data structures. Software engineers need programming experience to become software engineers, as programming is one of the many skills needed to develop software.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"Most software developers need to complete at least a bachelors degree, during which time they learn not only programming code, but also computer fundamentals, computer architecture, and data structure."&lt;/code&gt; &lt;sup&gt;8&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"They need coding experience to become software engineers, and programming is one of the many skills required to develop software."&lt;/code&gt; &lt;sup&gt;11&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;A person in a software development job must have excellent programming skills as he or she is responsible for determining the function of the application or program and is responsible for front-end and backend design. With knowledge of advanced mathematics and scientific methods, a software engineer is responsible for the overall picture when, together with the user, he evaluates what the customer or the company needs and designs a systematic solution. Compared to a developer, a programmer or software developer must be able to program, since his main task is to find a way to solve problems. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"A person in a software development job must have excellent coding skills because they are in charge of determining the functions of an application or program as well as being responsible for the front-end and back-end designs."&lt;/code&gt; &lt;sup&gt;13&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"With knowledge of advanced mathematics and the scientific method, software engineers are responsible for the big picture; they evaluate client or company needs in conjunction with those of the user and methodically conceptualize a systematic solution."&lt;/code&gt; &lt;sup&gt;10&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"When comparing a developer vs programmer, a software developer should be able to code as well as a programmer does but their main job is finding ways to solve problems."&lt;/code&gt; &lt;sup&gt;15&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Programmers are more competent, but have a more limited ability to work compared to developers. Programmers are involved in deeper work that requires more technical specialization than developers, while developers must handle a broader range of work, including monitoring the whole project and leading a development team.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"Programmers, while being competent at what they do, have a more limited capacity of work in comparison to a developer."&lt;/code&gt; &lt;sup&gt;15&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"While programmers are involved with more in-depth work and require more technical specialization than developers, developers need to handle a broader range of work that includes overseeing the whole project, or even managing a team of developers."&lt;/code&gt; &lt;sup&gt;6&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the two careers overlap, you will find that a computer programer is expected to know how to design products, while a software developer knows how to program. Although most tasks for programmers and developers are closely linked, their job profiles and career choices vary considerably. Although there are differences in salary between the two career paths, the work of a programmer is more specialized than that of a developer and requires a wider range of skills.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"Even though most of the tasks of a programmer and a developer are closely related, their job profiles and career choices are different."&lt;/code&gt; &lt;sup&gt;6&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"This difference exists because the work of a programmer is more specialized, while developers require a broader range of skills."&lt;/code&gt; &lt;sup&gt;6&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"These two careers have some overlap, and you may find that a computer programmer is expected to know how to design products and that a software developer must know how to code."&lt;/code&gt; &lt;sup&gt;13&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can imagine, both computer programmers and software developers need to be proficient in several programming languages. As demand for software engineers has grown, they have been mixed with programming and developer positions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"As you might imagine, both computer programmers and software developers need to be well-versed in several coding languages."&lt;/code&gt; &lt;sup&gt;7&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"The demand for software engineers is on the rise, but the role is often conflated with programmer and developer positions."&lt;/code&gt; &lt;sup&gt;10&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you look at the lineup of the software team, you may come across a job title and wonder whether the developer on your team is good enough for your business development, or whether the software engineer is the key to the success of your project, even if it contains a lot of technical data that only an engineer can handle. Now that you know which role each of them plays in the development process, let's take a look at six key differences between software engineers and programmers we will highlight below. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"Now that you know what each role serves within the development process, let us take a look at six of the key differences between software engineers and programmers, which we have highlighted below."&lt;/code&gt; &lt;sup&gt;10&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"If you have ever looked through a software team line up, you have come across these job titles and perhaps wondered if a developer on your team is indeed good for your business development, or a software engineer is a key to success of your project as it contains a bunch of technical data that only an Engineer can handle."&lt;/code&gt; &lt;sup&gt;12&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because people in the computer industry have their own expertise, these positions are often interchangeable, and there are confusing job descriptions for both computer developers and computer programmers. If one compares the role of a computer programmer with that of a software developer, one discovers that there are many overlaps between the two. Both deal with computer software, but unlike computer developers or computer programmers, neither is expected to write, test, or debug code. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"When comparing the roles of computer programmers versus the roles of software developers, you will find there is a lot of overlap between the two."&lt;/code&gt; &lt;sup&gt;7&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"The people in the computer industry have their own expertise and positions, but the most interchangeable and most confusing job position and description exists between the computer developer and the computer programmer."&lt;/code&gt; &lt;sup&gt;2&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"Both people engage in computer software, and both people in these two positions are expected to write, test, and debug codes."&lt;/code&gt; &lt;sup&gt;2&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most of the people mentioned above use the words "programmer" and "developer" interchangeably. However, programmers do not have the same algorithmic knowledge as programmers and developers, and they are usually beginners in the field and less competent than those who program in a different language. Programmers and software engineers have a background in the scientific method and understanding of technical principles, and play a critical role in good communication skills to pass on information to teams and customers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"However, unlike programmers, these professionals also bring a background in scientific method and have an understanding of engineering principles crucial to the role, along with good communication skills to relay information between teams and clients."&lt;/code&gt; &lt;sup&gt;14&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"These individuals do not have the same algorithmic knowledge as a programmer or developer, as they are often a beginner in the field, skilled in just one coding language."&lt;/code&gt; &lt;sup&gt;4&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"Most people mention and use the words "programmer" and "developer" interchangeably."&lt;/code&gt; &lt;sup&gt;2&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are still unclear, here are some key differences between programmers and developers: programmers and developers have a range of work. Programmers focus during the development cycle on one part of a project while software engineers look at a project at a larger scale, while programmers look at the overall picture and break it into parts. A programmer focuses on a single phase of a development cycle, while a software engineer monitors the development process from start to finish.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"If you are still unclear, the key difference between a programmer vs developer is their scope of work."&lt;/code&gt; &lt;sup&gt;15&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"Programmers typically focus on one part of a projects development cycle, while software engineers look at the project on a wider scale than programmers, considering the whole picture and dividing it into parts."&lt;/code&gt; &lt;sup&gt;14&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"Whereas a programmer would focus on a single stage in the development cycle, a software engineer oversees the development process from start to finish."&lt;/code&gt; &lt;sup&gt;14&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;As it stands, the job title is programmer, but you should understand how flexible a programmer's title can be. A programmer is responsible for interpreting and encoding policies and frameworks of a software engineer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"Ultimately, a programmer is responsible for interpreting a software engineers guidelines for a framework and coding it into existence."&lt;/code&gt; &lt;sup&gt;10&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"As it stands now, this job title is still poorly understood, and often just as flexible as the title programmer."&lt;/code&gt; &lt;sup&gt;11&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Computer experts responsible for the development and creation of fantasy sports systems and other computer programs and systems include both software developers and programmers. A software developer or programmer is someone who is familiar with programming and understands how software and programming languages work. They usually develop a background in computer science and a pronounced understanding of programming languages during their bachelor studies and refine their work at master level.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"The computer professionals responsible for designing and creating fantasy sports systems -- as well as every other computer program and system out there -- include software developers and programmers."&lt;/code&gt; &lt;sup&gt;9&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"They are proficient in programming and understand how software and programming languages function."&lt;/code&gt; &lt;sup&gt;9&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"They often first develop these skills during undergraduate study and then hone them through work at the masters level."&lt;/code&gt; &lt;sup&gt;9&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;They modularize the end product, develop a clean interface and work with programmers and developers to implement the most detailed aspects of design. Programmers receive instructions from software engineers and developers, and the developers are the designers who turn programmers into code. Their designs are passed on to programmers, and software developers translate the instructions of software engineers into instructions that computers can read and understand.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"They usually receive instructions from a software engineer, developer, or designer, which they turn into code."&lt;/code&gt; &lt;sup&gt;11&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"Their designs are then passed on to programmers and software developers who translate the engineers directions into instructions the computer can read and understand, i.e."&lt;/code&gt; &lt;sup&gt;10&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"They modularize the final product to develop a clean interface and then work with the programmers and developers to implement the more detailed aspects of the design."&lt;/code&gt; &lt;sup&gt;4&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you put the same tasks to a programmer, engineer or developer, you will want to see how he tackles the problem and what steps he takes to achieve the solution. You will find subtle differences between programmers, developers and engineers in their approach to solving technical tasks. For the casual speaker, web development or software development is just an imaginative way of saying "programmer" or "programmer," but since it seems to refer to the web as a term, it doesn't really work.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"You can provide them with the same set of tasks, but what you actually want to see is how they approach the problem and the steps they take to reach the solution."&lt;/code&gt; &lt;sup&gt;1&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"However, you can find very subtle differences in their approaches to solving technical tasks."&lt;/code&gt; &lt;sup&gt;1&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"To them, both terms are basically just fancy ways of saying "coding" or "programmer," and even if one of the terms seems to refer specifically to the web, it is not really something to get worked up about."&lt;/code&gt; &lt;sup&gt;8&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#cited-sources"&gt;
  &lt;/a&gt;
  Cited Sources
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.adaface.com/guides/programmer-vs-developer-vs-engineer-tell-them-apart/"&gt;https://www.adaface.com/guides/programmer-vs-developer-vs-engineer-tell-them-apart/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.differencebetween.net/technology/software-technology/difference-between-developer-and-programmer/"&gt;http://www.differencebetween.net/technology/software-technology/difference-between-developer-and-programmer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educba.com/programmers-vs-software-engineering/"&gt;https://www.educba.com/programmers-vs-software-engineering/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/pulse/whats-difference-between-programmer-coder-developer-software-hasan"&gt;https://www.linkedin.com/pulse/whats-difference-between-programmer-coder-developer-software-hasan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webapplog.com/programmer-vs-software-engineer-vs-software-developer-vs-coder/"&gt;https://webapplog.com/programmer-vs-software-engineer-vs-software-developer-vs-coder/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thinkful.com/blog/programmer-vs-developer/"&gt;https://www.thinkful.com/blog/programmer-vs-developer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rasmussen.edu/degrees/technology/blog/computer-programmer-vs-software-developer/"&gt;https://www.rasmussen.edu/degrees/technology/blog/computer-programmer-vs-software-developer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.devmountain.com/web-development-vs-software-development-which-is-the-better-career-choice/"&gt;https://blog.devmountain.com/web-development-vs-software-development-which-is-the-better-career-choice/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://online.maryville.edu/blog/software-developer-vs-programmer/"&gt;https://online.maryville.edu/blog/software-developer-vs-programmer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://builtin.com/recruiting/software-engineer-vs-programmer"&gt;https://builtin.com/recruiting/software-engineer-vs-programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://careerkarma.com/blog/software-engineer-vs-programmer/"&gt;https://careerkarma.com/blog/software-engineer-vs-programmer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/shakuro/programmer-vs-developer-vs-engineer-91ef374e5033"&gt;https://medium.com/shakuro/programmer-vs-developer-vs-engineer-91ef374e5033&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bootcamp.ce.arizona.edu/blog/programmer-vs-software-engineer-whats-the-difference/"&gt;https://bootcamp.ce.arizona.edu/blog/programmer-vs-software-engineer-whats-the-difference/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devskiller.com/programmer-vs-developer/"&gt;https://devskiller.com/programmer-vs-developer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.guru99.com/difference-software-engineer-developer.html"&gt;https://www.guru99.com/difference-software-engineer-developer.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;THIS ARTICLE WAS WRITTEN ME USING &lt;a href="https://d0t0n10n.github.io/"&gt;MY&lt;/a&gt; ARTIFICIAL INTELLIGENCE&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>developer</category>
      <category>programmer</category>
      <category>programming</category>
      <category>code</category>
    </item>
    <item>
      <title>8 challenges from 💪beginner to pro 💪 to test your JavaScript / problem solving skills all using "FizzBuzz"!</title>
      <author>InHuOfficial</author>
      <pubDate>Sun, 11 Jul 2021 11:30:00 +0000</pubDate>
      <link>https://dev.to/inhuofficial/taking-fizzbuzz-to-the-next-level-8-challenges-from-beginner-to-pro-to-test-your-javascript-skills-2dih</link>
      <guid>https://dev.to/inhuofficial/taking-fizzbuzz-to-the-next-level-8-challenges-from-beginner-to-pro-to-test-your-javascript-skills-2dih</guid>
      <description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Fizz_buzz#:~:text=Fizz%20buzz%20is%20a%20group,with%20the%20word%20%22buzz%22."&gt;FizzBuzz&lt;/a&gt; is a mental arithmetic game that got turned into a popular interview question. But what if we took the principle and created 8 different coding challenges from it that people may not have encountered before to really test someone's problem solving and development skills?&lt;/p&gt;

&lt;p&gt;Well that is what I have done!&lt;/p&gt;

&lt;p&gt;I think the below should be easy enough for beginners but also challenging with the extra stipulations for pros and having to combine solutions!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final thing:&lt;/strong&gt; I hope the below instructions are clear. However if any of the instructions are not clear please let me know in the comments so I can improve the questions!&lt;/p&gt;




&lt;p&gt;&lt;a href="#instructions"&gt;Skip to the instructions if you know what FizzBuzz is&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-fizzbuzz"&gt;
  &lt;/a&gt;
  What is FizzBuzz?
&lt;/h2&gt;

&lt;p&gt;It is a simple game. &lt;/p&gt;

&lt;p&gt;You start counting 1, 2 etc.&lt;/p&gt;

&lt;p&gt;Every time you reach a multiple of 3 (3,6,9 etc) you replace the number with the word "Fizz".&lt;/p&gt;

&lt;p&gt;Every time you reach a multiple of 5 (5, 10, 15 etc.) you replace the number with the word "Buzz". &lt;/p&gt;

&lt;p&gt;Oh and if you reach a multiple of 3 AND 5 (15, 30, 45 etc.) you replace the word with "FizzBuzz".&lt;/p&gt;

&lt;p&gt;Those are the rules. &lt;/p&gt;

&lt;p&gt;In an interview question you are normally asked to output the numbers 1 to 100 and the relevant "fizz", "buzz" and "FizzBuzz" replacements.&lt;/p&gt;

&lt;p&gt;A simple example of this that should make sense even if you are a beginner is&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/vrxqo3u9/1//embedded/js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you check the console it outputs the numbers and words as expected. You can use this as an example to work from / learn from if you like.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#instructions"&gt;
  &lt;/a&gt;
  Instructions
&lt;/h2&gt;

&lt;p&gt;You will be completing the same tasks whether you are a beginner or a pro. &lt;/p&gt;

&lt;p&gt;However the pro version of this challenge has extra stipulations / requirements:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-beginners"&gt;
  &lt;/a&gt;
  For beginners
&lt;/h3&gt;

&lt;p&gt;Try and tackle each problem individually. You can develop different code for each solution if you want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-pros"&gt;
  &lt;/a&gt;
  For Pros
&lt;/h3&gt;

&lt;p&gt;Each requirement continues onto the next question. &lt;/p&gt;

&lt;p&gt;So by the end your &lt;strong&gt;one answer should work for all 8 requirements&lt;/strong&gt; (if any conflicts in instructions occur you should always use the latest requirement - i.e. logging to console should be replaced with returning an array etc.)!&lt;/p&gt;

&lt;p&gt;Oh and you also have a few extra requirements to deal with to make it even more interesting!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-fizzbuzz-without-using-raw-endraw-"&gt;
  &lt;/a&gt;
  1. FizzBuzz without using &lt;code&gt;%&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Nearly every FizzBuzz answer you see uses the remainder (&lt;code&gt;%&lt;/code&gt;) operator.&lt;/p&gt;

&lt;p&gt;For this challenge we have removed the remainder (&lt;code&gt;%&lt;/code&gt;) operator so you have to find an alternative way to check if a number should have Fizz, Buzz and or FizzBuzz logged to the console instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginners"&gt;
  &lt;/a&gt;
  Beginners
&lt;/h3&gt;

&lt;p&gt;Log each number / Fizz / Buzz / FizzBuzz to the console without using &lt;code&gt;%&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;This one is a nice easy one to ease you in, just do the same as the beginners here! It gets tougher I promise!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-fizzbuzz-but-it-requires-a-button-press"&gt;
  &lt;/a&gt;
  2. FizzBuzz but it requires a button press!
&lt;/h2&gt;

&lt;p&gt;In this challenge you have to attach your function to a button press somehow. This button should say "increase".&lt;/p&gt;

&lt;p&gt;Each time the button is pressed the next number / word should be logged to the console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginners"&gt;
  &lt;/a&gt;
  Beginners
&lt;/h3&gt;

&lt;p&gt;Just add an "increase" button and log the next number to the console each time it is pressed. It should start at 1 and increase each time the button is pressed (following FizzBuzz rules of course!).&lt;/p&gt;

&lt;p&gt;It can keep going past 100 if you want or you can disable the button once 100 is reached for a bonus point!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h2&gt;

&lt;p&gt;You must include two extra buttons!&lt;/p&gt;

&lt;p&gt;The first button should complete the rest of the numbers from the current state (so if your last number / word was "22" you should be able to press this button and it prints 23 - 100). This button should have the text "complete the run".&lt;/p&gt;

&lt;p&gt;You should also include a reset button (with the text "reset") that returns the state to the beginning so the next button press logs "1" to the console etc.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-fizzbuzz-but-it-stores-state"&gt;
  &lt;/a&gt;
  3. FizzBuzz but it stores state!
&lt;/h2&gt;

&lt;p&gt;Using your answer to the previous question you should now use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"&gt;&lt;code&gt;Window.localStorage&lt;/code&gt;&lt;/a&gt; to store the current number.&lt;/p&gt;

&lt;p&gt;It must not store anything to &lt;code&gt;localStorage&lt;/code&gt; until the "increase" button is pressed for the first time.&lt;/p&gt;

&lt;p&gt;You should be able to reload the page, press the button and the next number should be logged to the console. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginners"&gt;
  &lt;/a&gt;
  Beginners
&lt;/h3&gt;

&lt;p&gt;You just have to be able to reload the page and the next value be returned on pressing the "increase" button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;Don't forget that you need to be able to reset the state still and complete the run. &lt;/p&gt;

&lt;p&gt;One stipulation here is that if you press the "reset" button &lt;strong&gt;you must remove your &lt;code&gt;localStorage&lt;/code&gt; entry entirely&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-fizzbuzz-without-loops"&gt;
  &lt;/a&gt;
  4. FizzBuzz without loops
&lt;/h2&gt;

&lt;p&gt;In this exercise your FizzBuzz generator should use &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Recursion"&gt;&lt;strong&gt;recursion&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No loops of any kind. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginners"&gt;
  &lt;/a&gt;
  Beginners
&lt;/h3&gt;

&lt;p&gt;You can just log the numbers / words for the numbers 1 to 100 to the console but your function must use recursion instead of loops.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;As an extra stipulation when the 100 numbers / words have been logged to the console this should also log "done" after the 100th entry! &lt;/p&gt;

&lt;p&gt;Oh and don't forget your other buttons still need to work!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-stop-logging-to-the-console"&gt;
  &lt;/a&gt;
  5. Stop logging to the console!
&lt;/h2&gt;

&lt;p&gt;Now your FizzBuzz generator should return the values it creates rather than logging to the console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginners"&gt;
  &lt;/a&gt;
  Beginners
&lt;/h3&gt;

&lt;p&gt;Just return the next value and use a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; to display the number &lt;strong&gt;using a different function that calls your fizz buzz function&lt;/strong&gt;. You can overwrite the number or keep a record and display each new number on a new line.&lt;/p&gt;

&lt;p&gt;For clarity you should create a function "outputResult" or similar and this should call your "FizzBuzzGenerator" function, receive the value back from it and then output this to a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; on the page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;To make this more interesting it should return the current value (after pressing the "increase" button), the previous value and the next value &lt;strong&gt;in that order&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;It is up to you to account for errors caused by being at the start or the end of the list of numbers - you should return &lt;code&gt;null&lt;/code&gt; when this happens (e.g. the first output will be (&lt;code&gt;null&lt;/code&gt;, 1, 2) and the last will be (99, 100, &lt;code&gt;null&lt;/code&gt;...see next point though). &lt;/p&gt;

&lt;p&gt;Don't forget that once you have reached 100 the next entry should state "done" and it should not increment any more (so effectively 101 is "done").&lt;/p&gt;

&lt;p&gt;Also you should output each entry as a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; with the following format:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;number&lt;/th&gt;
&lt;th&gt;direction&lt;/th&gt;
&lt;th&gt;previous value&lt;/th&gt;
&lt;th&gt;current value&lt;/th&gt;
&lt;th&gt;next value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;! 26&lt;/td&gt;
&lt;td&gt;forward (or false)&lt;/td&gt;
&lt;td&gt;Buzz&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;Fizz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;forward (or false)&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;Fizz&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;forward (or false)&lt;/td&gt;
&lt;td&gt;Fizz&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;forward (or false)&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;FizzBuzz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;backwards (or true)&lt;/td&gt;
&lt;td&gt;Fizz&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;etc. etc. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-fizzbuzz-where-you-can-pass-in-the-start-and-end-numbers"&gt;
  &lt;/a&gt;
  6. FizzBuzz where you can pass in the start and end numbers
&lt;/h2&gt;

&lt;p&gt;A nice easy upgrade, your function should now accept any start number and any final number as integers. &lt;/p&gt;

&lt;p&gt;To make your answer complete you should add two &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;s to your example that take the minimum value and the maximum value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginners"&gt;
  &lt;/a&gt;
  Beginners
&lt;/h3&gt;

&lt;p&gt;The numbers will always be positive integers and the start number will always be smaller than the end number.&lt;/p&gt;

&lt;p&gt;The numbers can be between 1 and 10,000.&lt;/p&gt;

&lt;p&gt;You need to add a button that calls your function next to or below your two inputs to be able to test this.&lt;/p&gt;

&lt;p&gt;You can output to the console or put all the numbers in a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;If the start number is bigger than or the same as the end number then you must log this exact phrase "error, the start number must be smaller than the end number". It should be logged as an error.&lt;/p&gt;

&lt;p&gt;You also need to account for &lt;strong&gt;negative integers&lt;/strong&gt; so you can receive any numbers between - 10,000 and 10,000. &lt;/p&gt;

&lt;p&gt;Zero should output &lt;strong&gt;"0" not FizzBuzz!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If any other errors occur (such as non numerical or null values being passed) you should log a generic error "input values are incorrect".&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#7-now-do-it-in-reverse"&gt;
  &lt;/a&gt;
  7. Now do it in reverse!
&lt;/h2&gt;

&lt;p&gt;Yes this is a mean one!&lt;/p&gt;

&lt;p&gt;Now your function should also accept a 3rd parameter. This time if that parameter is set to &lt;code&gt;true&lt;/code&gt; the numbers should start at the maximum and count backwards to the minimum, if set to &lt;code&gt;false&lt;/code&gt; they should return in ascending order the same as before.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginners"&gt;
  &lt;/a&gt;
  Beginners
&lt;/h3&gt;

&lt;p&gt;You can just use the numbers 1 to 100 and work out how to reverse the numbers if this parameter is passed. &lt;/p&gt;

&lt;p&gt;So you could have - &lt;code&gt;myFizzBuzzFunction(false)&lt;/code&gt; (which will still write 1 - 100). However &lt;code&gt;myFizzBuzzFunction(true)&lt;/code&gt; will return 100 - 1 (reversed).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;Bear in mind that "done" now needs to appear after the lowest number if the order is reversed. &lt;/p&gt;

&lt;p&gt;You also need to make the third parameter &lt;strong&gt;optional&lt;/strong&gt; so that we can call your function with &lt;code&gt;myFizzBuzzGenerator(smallNo, largeNo)&lt;/code&gt; or with &lt;code&gt;myFizzBuzzGenerator(smallNo, largeNo, false)&lt;/code&gt;, &lt;code&gt;myFizzBuzzGenerator(smallNo, largeNo, true)&lt;/code&gt; etc. &lt;code&gt;myFizzBuzzGenerator(smallNo, largeNo, true)&lt;/code&gt; should be the one that reverse the order.   &lt;/p&gt;

&lt;p&gt;You also have the fun task of working out how to account for all of the previous stipulations (what if the number is currently 26 and we change the order) etc.&lt;/p&gt;

&lt;p&gt;Finally you should add a checkbox next to your inputs you added previously that when checked reverses the order!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#8-fizzbuzz-where-you-can-pass-in-any-words-and-numbers-you-want"&gt;
  &lt;/a&gt;
  8. FizzBuzz where you can pass in any words and numbers you want.
&lt;/h2&gt;

&lt;p&gt;This time the function must accept an unlimited number of divisor / word pairs.&lt;/p&gt;

&lt;p&gt;So for example:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;wordsAndDivisors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fluff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;////your function should log&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fluff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fluff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;[...]&lt;/span&gt;
&lt;span class="mi"&gt;92&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;94&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;97&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fluff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#beginners"&gt;
  &lt;/a&gt;
  Beginners
&lt;/h3&gt;

&lt;p&gt;You will receive between 2 and 10 different word &amp;amp; divisor pairs.&lt;/p&gt;

&lt;p&gt;A couple of examples to test against are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;wordsAndDivisors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fluff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wordsAndDivisors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 3 = Fizz, 5 = Buzz, 11 = Fluff, 33 = FizzFluff, 55 = BuzzFluff.&lt;/span&gt;


&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;wordsAndDivisorsTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fluff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Biff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buffer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wordsAndDivisorsTwo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 17 = Buffer, 46 = Tink, 77 = FluffBiff, 85 = BuzzBuffer.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;You have to account for 0 - n entries in the format described.&lt;/p&gt;

&lt;p&gt;This is also an optional parameter. If no entries are passed just return the relevant numbers between min and max in the relevant direction.&lt;/p&gt;

&lt;p&gt;Your function should now be &lt;code&gt;myGeneratorFunction(min, max, directionOptional, wordsAndDivisorsOptional)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For clarity if you stop here then:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;myGeneratorFunction(1,100)&lt;/code&gt; would just return the numbers 1 to 100&lt;/li&gt;
&lt;li&gt; &lt;code&gt;myGeneratorFunction(1,100, true)&lt;/code&gt; would return the numbers 100 to 1&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;myGeneratorFunction(1,100, false, wordsAndDivisors)&lt;/code&gt; would return 1 to 100 with fizz, buzz and fluff replacements!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now go tidy your code up and submit it in the comments!&lt;/p&gt;

&lt;p&gt;Or if you want one last minor challenge to make it even more useful:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#go-for-extra-credit"&gt;
  &lt;/a&gt;
  Go for Extra credit
&lt;/h4&gt;

&lt;p&gt;Create a way of accepting the parameters as an object (settings / config) to allow for different scenarios. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can dictate the settings object structure&lt;/strong&gt; to make this easier.&lt;/p&gt;

&lt;p&gt;If you decide to pass an object in then you can also have bonus points for making min and max numbers have defaults / optional parameters of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 for min&lt;/li&gt;
&lt;li&gt;100 for max&lt;/li&gt;
&lt;li&gt;default direction should be forward &lt;/li&gt;
&lt;li&gt;default word:divisor pair should now be normal FizzBuzz instead of nothing! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For clarity we should be able to call your function as &lt;code&gt;myFizzBuzzGenerator()&lt;/code&gt; and it &lt;strong&gt;do normal FizzBuzz in a forward direction for the numbers 1 to 100&lt;/strong&gt;. (Note that this is different behaviour to the non extra credit version). &lt;/p&gt;

&lt;p&gt;But we could also call it with &lt;code&gt;myFizzBuzzGenerator(myGeneratorSettings)&lt;/code&gt; and the min number, the max number, direction etc. all override the defaults if they are passed in!&lt;/p&gt;

&lt;p&gt;Oh and everything previous still counts!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-end-what-should-you-be-looking-for"&gt;
  &lt;/a&gt;
  The end - what should you be looking for?
&lt;/h2&gt;

&lt;p&gt;So depending on whether you went for the beginner or the pro version you should either have 8 different FizzBuzz variations or one mega variation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-beginners"&gt;
  &lt;/a&gt;
  For beginners
&lt;/h3&gt;

&lt;p&gt;You just have to ensure that each one functions as expected and outputs the information as requested.&lt;/p&gt;

&lt;p&gt;One thing I would suggest is that you comment any particularly confusing parts for the next person who has to work on your code.&lt;/p&gt;

&lt;p&gt;If you have managed to create all 8 versions why not move up to the semi-pro tier and see if you can combine two, three or even four examples together, but using the beginner instructions!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;High standards here. &lt;/p&gt;

&lt;p&gt;You should ensure your code is:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy to understand and uses logical variable names etc.&lt;/li&gt;
&lt;li&gt;Is efficient, nested loops are a no no (but if you have nested loops for this I am not sure what you are doing anyway! 😋🤣).&lt;/li&gt;
&lt;li&gt;Bonus points if you have made it easily extensible and split parts off into different functions where applicable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And to recap to see if you complete the challenge at this point you should have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a function that does not use the remainder (&lt;code&gt;%&lt;/code&gt;) operator!&lt;/li&gt;
&lt;li&gt;a function that accepts a small number, a large number, a flag to reverse and the word divisor pairs.&lt;/li&gt;
&lt;li&gt;two inputs and a checkbox for small, large and whether to reverse.&lt;/li&gt;
&lt;li&gt;three buttons "increase" to add (or remove) 1, "complete the run" which continues to the max or min number and then outputs "done" and a "reset" button which returns to the max or minimum number depending on direction. &lt;/li&gt;
&lt;li&gt;reset button should clear all local storage!&lt;/li&gt;
&lt;li&gt;Error checking for every passed variable etc.&lt;/li&gt;
&lt;li&gt;Recursion rather than a loop.&lt;/li&gt;
&lt;li&gt;"0" should output "0" not FizzBuzz or any other word combination!&lt;/li&gt;
&lt;li&gt;Should work with an unlimited (or zero) "word:divisor" pairs.&lt;/li&gt;
&lt;li&gt;Oh and I shouldn't have to say it but &lt;strong&gt;you inputs should be properly labelled&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;You should have a settings object that you can pass in with defaults for extra credit!&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#submit-your-entries"&gt;
  &lt;/a&gt;
  Submit your entries!
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;All answers submitted should be in JavaScript&lt;/strong&gt;, however you can obviously complete these challenges in any language you want!&lt;/p&gt;

&lt;p&gt;There are no prizes but an opportunity for others to critique your work and offer tips and or learn from your code. &lt;/p&gt;

&lt;p&gt;Leave a comment with your example(s)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jsfiddle"&gt;
  &lt;/a&gt;
  jsFiddle
&lt;/h3&gt;

&lt;p&gt;You can include a jsFiddle in your comment with liquid tags in the following format:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{% jsfiddle &amp;lt;url of fiddle&amp;gt; result js html %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#codepen"&gt;
  &lt;/a&gt;
  CodePen
&lt;/h3&gt;

&lt;p&gt;You can include a CodePen in your comment with the following liquid tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{% codepen &amp;lt;url of pen&amp;gt; default-tab=result, js, html %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#any-other-way-you-want"&gt;
  &lt;/a&gt;
  Any other way you want!
&lt;/h3&gt;

&lt;p&gt;If you don't want to use jsfiddle or CodePen then any other code sandbox will do! Just provide a link to it or &lt;a href="https://dev.to/p/editor_guide"&gt;see if there is a liquid tag for your chosen sandbox&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#answers-next-week"&gt;
  &lt;/a&gt;
  Answers next week!
&lt;/h2&gt;

&lt;p&gt;Make sure you follow me as I will release my solution and or the best solution for the beginner versions as well as my "kitchen sink" solution for the pro version!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#special-instructions-for-afif"&gt;
  &lt;/a&gt;
  Special instructions for &lt;a class="mentioned-user" href="https://dev.to/afif"&gt;@afif&lt;/a&gt;

&lt;/h2&gt;

&lt;p&gt;You can try and complete the beginner challenges without JavaScript...just because I know how much JS hurts you! Oh and it can just work in one browser too! &lt;/p&gt;

&lt;p&gt;You can use css vars as inputs etc. Output the information however you want! It doesn't have to be accessible either 😋🤣&lt;/p&gt;

&lt;p&gt;(and for anyone confused by this, Temani and I have a running joke where he is hurt by anything not using CSS as he is a CSS ninja!)&lt;/p&gt;

&lt;p&gt;Anyone else who fancies the challenge can do this also as I can imagine there are some really interesting solutions that are beyond my meagre brain!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>lil-http-terminator, a tiny JS module to gracefully shutdown your HTTP server</title>
      <author>Vasyl Boroviak</author>
      <pubDate>Sun, 11 Jul 2021 10:49:42 +0000</pubDate>
      <link>https://dev.to/koresar/lil-http-terminator-a-tiny-js-module-to-gracefully-shutdown-your-http-server-l0b</link>
      <guid>https://dev.to/koresar/lil-http-terminator-a-tiny-js-module-to-gracefully-shutdown-your-http-server-l0b</guid>
      <description>&lt;p&gt;Increase your &lt;code&gt;node_modules&lt;/code&gt; by 11 KB to get tranquility that your node.js HTTP server is shutting down without data loss risk.&lt;/p&gt;

&lt;p&gt;Or how I shrunk a 2.2 MB module to 11 KB.&lt;/p&gt;

&lt;p&gt;TL;DR: &lt;a href="https://www.npmjs.com/package/lil-http-terminator"&gt;&lt;code&gt;npm i lil-http-terminator&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;I've been coding node.js microservices for almost a decade now. Graceful HTTP server shutdown was always a problem I didn't wanna deal with because it's hard to get right.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-httpterminator-endraw-npm-module"&gt;
  &lt;/a&gt;
  &lt;code&gt;http-terminator&lt;/code&gt; npm module
&lt;/h3&gt;

&lt;p&gt;Recently I discovered that there is a perfect implementation of graceful shutdown. It's called &lt;a href="https://www.npmjs.com/package/http-terminator"&gt;http-terminator&lt;/a&gt;. Here is &lt;strong&gt;why&lt;/strong&gt; I decided to use it (quoting the author):&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;it does not monkey-patch Node.js API&lt;/li&gt;
&lt;li&gt;it immediately destroys all sockets without an attached HTTP request&lt;/li&gt;
&lt;li&gt;it allows graceful timeout to sockets with ongoing HTTP requests&lt;/li&gt;
&lt;li&gt;it properly handles HTTPS connections&lt;/li&gt;
&lt;li&gt;it informs connections using keep-alive that server is shutting down by setting a &lt;code&gt;connection: close&lt;/code&gt; header&lt;/li&gt;
&lt;li&gt;it does not terminate the Node.js process&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createHttpTerminator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http-terminator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;httpTerminator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createHttpTerminator&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;httpTerminator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Works with any node.js HTTP server out there (Express.js, Nest.js, Polka.js, Koa.js, Meteor.js, Sails.js, Hapi.js, etc).&lt;/p&gt;

&lt;p&gt;Wow! Brilliant engineering! Well done author(s)! &lt;/p&gt;

&lt;p&gt;But there is a catch.&lt;/p&gt;

&lt;p&gt;Being a mere 4 KB codebase it adds 22 dependencies (2.2 MB, 464 files) to your &lt;code&gt;node_modules&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;See for yourself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npx howfat &lt;span class="nt"&gt;-r&lt;/span&gt; tree http-terminator
npx: installed 18 &lt;span class="k"&gt;in &lt;/span&gt;1.695s

http-terminator@3.0.0 &lt;span class="o"&gt;(&lt;/span&gt;22 deps, 2.16mb, 464 files&lt;span class="o"&gt;)&lt;/span&gt;
├── delay@5.0.0 &lt;span class="o"&gt;(&lt;/span&gt;10.91kb, 5 files&lt;span class="o"&gt;)&lt;/span&gt;
├─┬ roarr@4.2.5 &lt;span class="o"&gt;(&lt;/span&gt;19 deps, 2.02mb, 398 files&lt;span class="o"&gt;)&lt;/span&gt;
│ ├── boolean@3.1.2 &lt;span class="o"&gt;(&lt;/span&gt;7.9kb, 10 files&lt;span class="o"&gt;)&lt;/span&gt;
│ ├── detect-node@2.1.0 &lt;span class="o"&gt;(&lt;/span&gt;2.7kb, 6 files&lt;span class="o"&gt;)&lt;/span&gt;
│ ├─┬ fast-json-stringify@2.7.7 &lt;span class="o"&gt;(&lt;/span&gt;9 deps, 1.79mb, 268 files&lt;span class="o"&gt;)&lt;/span&gt;
│ │ ├─┬ ajv@6.12.6 &lt;span class="o"&gt;(&lt;/span&gt;5 deps, 1.41mb, 181 files&lt;span class="o"&gt;)&lt;/span&gt;
│ │ │ ├── fast-deep-equal@3.1.3 &lt;span class="o"&gt;(&lt;/span&gt;12.66kb, 11 files&lt;span class="o"&gt;)&lt;/span&gt;
│ │ │ ├── fast-json-stable-stringify@2.1.0 &lt;span class="o"&gt;(&lt;/span&gt;16.56kb, 18 files&lt;span class="o"&gt;)&lt;/span&gt;
│ │ │ ├── json-schema-traverse@0.4.1 &lt;span class="o"&gt;(&lt;/span&gt;19.11kb, 9 files&lt;span class="o"&gt;)&lt;/span&gt;
│ │ │ ╰─┬ uri-js@4.4.1 &lt;span class="o"&gt;(&lt;/span&gt;1 dep, 490.54kb, 51 files&lt;span class="o"&gt;)&lt;/span&gt;
│ │ │   ╰── punycode@2.1.1 &lt;span class="o"&gt;(&lt;/span&gt;31.67kb, 5 files&lt;span class="o"&gt;)&lt;/span&gt;
│ │ ├── deepmerge@4.2.2 &lt;span class="o"&gt;(&lt;/span&gt;29.39kb, 9 files&lt;span class="o"&gt;)&lt;/span&gt;
│ │ ├── rfdc@1.3.0 &lt;span class="o"&gt;(&lt;/span&gt;23.48kb, 9 files&lt;span class="o"&gt;)&lt;/span&gt;
│ │ ╰── string-similarity@4.0.4 &lt;span class="o"&gt;(&lt;/span&gt;10.73kb, 5 files&lt;span class="o"&gt;)&lt;/span&gt;
│ ├─┬ fast-printf@1.6.6 &lt;span class="o"&gt;(&lt;/span&gt;1 dep, 34.32kb, 26 files&lt;span class="o"&gt;)&lt;/span&gt;
│ │ ╰── boolean@3.1.2 &lt;span class="o"&gt;(&lt;/span&gt;🔗, 7.9kb, 10 files&lt;span class="o"&gt;)&lt;/span&gt;
│ ├─┬ globalthis@1.0.2 &lt;span class="o"&gt;(&lt;/span&gt;2 deps, 114.41kb, 41 files&lt;span class="o"&gt;)&lt;/span&gt;
│ │ ╰─┬ define-properties@1.1.3 &lt;span class="o"&gt;(&lt;/span&gt;1 dep, 48.41kb, 21 files&lt;span class="o"&gt;)&lt;/span&gt;
│ │   ╰── object-keys@1.1.1 &lt;span class="o"&gt;(&lt;/span&gt;25.92kb, 11 files&lt;span class="o"&gt;)&lt;/span&gt;
│ ├── is-circular@1.0.2 &lt;span class="o"&gt;(&lt;/span&gt;5.89kb, 8 files&lt;span class="o"&gt;)&lt;/span&gt;
│ ├── json-stringify-safe@5.0.1 &lt;span class="o"&gt;(&lt;/span&gt;12.42kb, 9 files&lt;span class="o"&gt;)&lt;/span&gt;
│ ╰── semver-compare@1.0.0 &lt;span class="o"&gt;(&lt;/span&gt;3.96kb, 8 files&lt;span class="o"&gt;)&lt;/span&gt;
╰── type-fest@0.20.2 &lt;span class="o"&gt;(&lt;/span&gt;108kb, 42 files&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I got curious. What's that &lt;code&gt;roarr&lt;/code&gt; package and if it can be removed from the package? The answer got me by surprise.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#removing-the-unnecessary-dependencies"&gt;
  &lt;/a&gt;
  Removing the unnecessary dependencies
&lt;/h3&gt;

&lt;p&gt;The three top level dependencies can be easily removed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-typefest-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;type-fest&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;type-fest&lt;/code&gt; can be removed by rewriting the package from TS to JS. Hold saying your "boo" yet.&lt;/p&gt;

&lt;p&gt;It's a single function module. You don't need the code completion for just one function. So, rewriting to JS shouldn't be a downside for TypeScript proponents.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-delay-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;delay&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;delay&lt;/code&gt; module can be rewritten as a single-line function. Here it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-roarr-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;roarr&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;roarr&lt;/code&gt; module, the largest of the tree, takes 2 MB of your hard drive. But it is used literally in the single line!!!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;terminating&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;already terminating HTTP server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;terminating&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The module will print that warning in case you decide to terminate your HTTP server twice. That's all. There is no more usage of the &lt;code&gt;roarr&lt;/code&gt; logger within the whole &lt;code&gt;http-terminator&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;I find it nearly impossible to accidentally call &lt;code&gt;.termiate()&lt;/code&gt; twice. It's hard to imagine this ever happens. So I decided to put the &lt;code&gt;log&lt;/code&gt; variable to &lt;code&gt;options&lt;/code&gt; and assign it to &lt;code&gt;console&lt;/code&gt; by default.&lt;/p&gt;

&lt;p&gt;We get rid of 20 dependencies and simultaneously allow you, my fellow developers, to customise the termination with the logger of your choice (&lt;code&gt;winston&lt;/code&gt;, &lt;code&gt;bunyan&lt;/code&gt;, &lt;code&gt;pino&lt;/code&gt;, &lt;code&gt;morgan&lt;/code&gt;, etc; or even the &lt;code&gt;roarr&lt;/code&gt; itself).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meet-raw-lilhttpterminator-endraw-"&gt;
  &lt;/a&gt;
  Meet &lt;code&gt;lil-http-terminator&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;I forked the &lt;code&gt;http-terminator&lt;/code&gt; to &lt;a href="https://www.npmjs.com/package/lil-http-terminator"&gt;&lt;code&gt;lil-http-terminator&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HttpTerminator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lil-http-terminator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;httpTerminator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;HttpTerminator&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;httpTerminator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Being as awesome as the origin, the &lt;code&gt;lil-&lt;/code&gt; version is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;0 dependencies (original had 3 direct and 18 indirect sub-dependencies);&lt;/li&gt;
&lt;li&gt;only 5 files (original was 464 files total);&lt;/li&gt;
&lt;li&gt;only 11 KB (original was 2180 KB);&lt;/li&gt;
&lt;li&gt;packaged by NPM as 3.9 KB .tar.gz file (original downloads about 522 KB).&lt;/li&gt;
&lt;li&gt;takes much less memory (I didn't measure it though);&lt;/li&gt;
&lt;li&gt;has 8 devDependencies (original has 17);&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#afterword"&gt;
  &lt;/a&gt;
  Afterword
&lt;/h3&gt;

&lt;p&gt;I'm writing code for money for about 20 years. I'm using node.js and npm for almost a decade. I learnt to develop good and robust node.js services, scripts, serverless functions, apps. I discovered (re-invented) the best practices we better follow. I know how to make code maintainable years after it was written. The hardest bit was always the third party dependencies. I learnt the hard way that each additional sub-dependency can cost a company some thousands of dollars.&lt;/p&gt;

&lt;p&gt;I forked and wrote &lt;a href="https://www.npmjs.com/package/lil-http-terminator"&gt;&lt;code&gt;lil-http-terminator&lt;/code&gt;&lt;/a&gt; in two hours. I foresee saving myself from 8 to 80 hours this way. You can save the same.&lt;/p&gt;

</description>
      <category>node</category>
      <category>npm</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Using react hooks</title>
      <author>Bassel Kanso</author>
      <pubDate>Sun, 11 Jul 2021 09:57:31 +0000</pubDate>
      <link>https://dev.to/bassel17/using-react-hooks-4ejl</link>
      <guid>https://dev.to/bassel17/using-react-hooks-4ejl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-react-hooks-"&gt;
  &lt;/a&gt;
  What are react hooks ?
&lt;/h2&gt;

&lt;p&gt;Hooks were added to React 16.8, they allow us to use state and &lt;br&gt;
the other lifecycle methods without writing a class,&lt;br&gt;
they make it possible to only use functional components.&lt;/p&gt;

&lt;p&gt;You might ask, "why use hooks in the first place if they are just replacements to functionalities&lt;br&gt;
that we already had while using class components !", but that is not the case, Hooks come with lot's of &lt;br&gt;
improvements over the lifecycle methods used in class components.&lt;/p&gt;

&lt;p&gt;React Hooks allow us to address cross-cutting concerns in a much more elegant way than the previous patterns &lt;br&gt;
such as &lt;a href="https://reactjs.org/docs/higher-order-components.html"&gt;higher-order components&lt;/a&gt; &lt;br&gt;
and &lt;a href="https://reactjs.org/docs/render-props.html"&gt;render props&lt;/a&gt;. &lt;br&gt;
Functionalities such as logging and authentication are not component-specific and React Hooks allow us to attach this type of reusable behavior to components.&lt;/p&gt;

&lt;p&gt;In this blog post I will show you how to use the two most important hooks (&lt;strong&gt;&lt;em&gt;useState&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;useEffect&lt;/em&gt;&lt;/strong&gt;) &lt;br&gt;
that you will need to build your classless react app, I will demonstrate by building a random joke generator using&lt;br&gt;
this public api&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;api:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;https://v&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;.jokeapi.dev/joke/Any&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#usestate"&gt;
  &lt;/a&gt;
  useState
&lt;/h2&gt;

&lt;p&gt;This method allows us to use state in our functional components, &lt;br&gt;
it return an array with a state and a method to change that state&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;span class="c1"&gt;// state will have the initial state in this case undefined&lt;/span&gt;
&lt;span class="c1"&gt;// setState is the function that we can use to update the state&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To update the state&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;words&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;// you would use it as such, &lt;/span&gt;
&lt;span class="c1"&gt;//the parameter takes in the value you want to update the state with&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our app we'll use the basic setup that comes with &lt;strong&gt;create-react-app&lt;/strong&gt;&lt;br&gt;
and update it as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//we created a state joke that is intialized with a string value for now&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setJoke&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;There are only 10 kinds of people in this world: those who know binary and those who don't.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;joke&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#now-our-app-looks-like-this-"&gt;
  &lt;/a&gt;
  Now our app looks like this !🤘
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h8zqnvJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cflltxwor8wworb6gmsf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h8zqnvJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cflltxwor8wworb6gmsf.png" alt="Alt example 1"&gt;&lt;/a&gt;(I have to say that's a funny joke)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useeffect"&gt;
  &lt;/a&gt;
  useEffect
&lt;/h2&gt;

&lt;p&gt;React Hooks introduces the &lt;code&gt;useEffect()&lt;/code&gt; method to replace &lt;br&gt;
a class component’s lifecycle methods &lt;code&gt;componentDidMount&lt;/code&gt;, &lt;code&gt;componentDidUpdate&lt;/code&gt;, and &lt;code&gt;componentWillUnmount&lt;/code&gt;. &lt;br&gt;
The method also allows side effects in your functional component, &lt;br&gt;
such as changing content in the document object model and fetching data. &lt;br&gt;
&lt;code&gt;useEffect()&lt;/code&gt; will run after every component render.&lt;/p&gt;

&lt;p&gt;From Reacts documentation&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;useEffect Accepts a function that contains imperative, possibly effectful code.&lt;/p&gt;

&lt;p&gt;Mutations, subscriptions, timers, logging, and other side effects are not allowed &lt;br&gt;
inside the main body of a function component (referred to as React’s render phase). &lt;br&gt;
Doing so will lead to confusing bugs and inconsistencies in the UI.&lt;/p&gt;

&lt;p&gt;Instead, use useEffect. The function passed to useEffect will run after the render &lt;br&gt;
is committed to the screen. Think of effects as an escape hatch from React’s purely &lt;br&gt;
functional world into the imperative world.&lt;/p&gt;

&lt;p&gt;By default, effects run after every completed render, &lt;br&gt;
but you can choose to fire them only when certain values have changed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That is a lot to take in !&lt;/p&gt;

&lt;p&gt;I'll start by explaining what is effectful code ? !&lt;/p&gt;

&lt;p&gt;effectful code is code that affects something outside of the scope of the function&lt;br&gt;
that is being excuted, also known as &lt;strong&gt;&lt;em&gt;side effects&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Side effects can be observed in such events:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modifying a global variable&lt;/li&gt;
&lt;li&gt;Modifying local scope, such as assigning to a variable&lt;/li&gt;
&lt;li&gt;Modifying memory in-place, such as assigning to an object property or pushing to an array&lt;/li&gt;
&lt;li&gt;Making network requests&lt;/li&gt;
&lt;li&gt;Printing to the terminal&lt;/li&gt;
&lt;li&gt;Modifying the DOM tree
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Example&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// making a network request&lt;/span&gt;
    &lt;span class="c1"&gt;//eveythig inside this function will be called on every render&lt;/span&gt;
    &lt;span class="c1"&gt;//fetchData() will be called everytime the component re-renders&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;useEffect&lt;/code&gt; takes a dependencies array as a second parameter, &lt;br&gt;
this will allow us to make it run only when we want it to.&lt;/p&gt;

&lt;p&gt;In our Jokes app we want to use the random jokes api to update the state on every render.&lt;br&gt;
To do that we'll use the &lt;code&gt;useEffect()&lt;/code&gt; method and the &lt;code&gt;setJoke()&lt;/code&gt; method that we got from &lt;code&gt;useState()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setJoke&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;getRandomJoke&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;//fetching the data and setting and updating state&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getRandomJoke&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://v2.jokeapi.dev/joke/Any?type=single&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;setJoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;joke&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Spulpv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lv5ets3dpll6q6d1tuz1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Spulpv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lv5ets3dpll6q6d1tuz1.gif" alt="Alt webapp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interesting it looks like the joke is changing ! But it doesn't stop !&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useEffect()&lt;/code&gt; method is running every single time the &lt;code&gt;joke&lt;/code&gt; state is changing, this makes it run &lt;br&gt;
in an infinite loop !&lt;/p&gt;

&lt;p&gt;To fix that we will use the dependencies array, we want it to run only on the first render&lt;br&gt;
so we will pass an empty array like such&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getRandomJoke&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;},[])&lt;/span&gt; &lt;span class="c1"&gt;//passed an empty array []&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m0gRrFnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmtbd1cp0hmzo9k0nolq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m0gRrFnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmtbd1cp0hmzo9k0nolq.png" alt="Alt webapp"&gt;&lt;/a&gt;(Enjoy the joke !)&lt;/p&gt;

&lt;p&gt;This fixes it, now it runs only on the first render !&lt;/p&gt;




&lt;p&gt;Kudos for reaching till the end 👍 !&lt;/p&gt;

&lt;p&gt;There are a lot more information to be covered, but I'll keep them for another time (another blog post)&lt;/p&gt;

&lt;p&gt;Check out the offical &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the github repo of for the random joke generator &lt;a href="https://github.com/Bassel17/random-jokes"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>reacthooks</category>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Enjoy the classic Snake arcade game in your terminal</title>
      <author>Donald Sebastian Leung</author>
      <pubDate>Sun, 11 Jul 2021 09:50:33 +0000</pubDate>
      <link>https://dev.to/donaldsebleung/enjoy-the-classic-snake-arcade-game-in-your-terminal-3i5k</link>
      <guid>https://dev.to/donaldsebleung/enjoy-the-classic-snake-arcade-game-in-your-terminal-3i5k</guid>
      <description>&lt;p&gt;If you were born before the rise of smartphones like me, you might vaguely recall the small yet sturdy Nokia flip phones during your childhood or early years, loaded with simple - almost primitive - yet addictive games such as &lt;a href="https://en.wikipedia.org/wiki/Snake_%28video_game_genre%29"&gt;Snake&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Space_Invaders"&gt;Space Invaders&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Early this year, in order to exercise the Node.js skills I acquired through taking the &lt;a href="https://training.linuxfoundation.org/training/nodejs-application-development-lfw211/"&gt;LFW211&lt;/a&gt; course offered by the &lt;a href="https://linuxfoundation.org"&gt;Linux Foundation&lt;/a&gt;, I implemented a variant of the Snake arcade game that directly runs in the terminal. It's very simple and only depends on a Node.js runtime of version no less than 10 so you can even play it on a headless server, yet it can keep you occupied with the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3 game maps: Unconfined (with wrapping behavior), Walled, Labyrinth&lt;/li&gt;
&lt;li&gt;4 difficulty levels per game map (the difference is speed): Easy, Medium, Hard, Insane&lt;/li&gt;
&lt;li&gt;High scores for each game map + difficulty level combination that persist between game runs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Previously, the game was only packaged for Linux which comprise but a tiny fraction of the desktop / laptop user base, while the larger macOS user base could only obtain it from source or through development tools such as npm and Docker. But no more! I have recently decided to package the game for &lt;a href="https://brew.sh"&gt;Homebrew&lt;/a&gt; which should be more familiar to end users, and also make it easier for users of mainstream Linux distributions to obtain the game as well by publishing packages to &lt;a href="https://launchpad.net/ubuntu/+ppas"&gt;Ubuntu PPA&lt;/a&gt; and &lt;a href="https://copr.fedorainfracloud.org/"&gt;Fedora COPR&lt;/a&gt;, as opposed to offering the packages directly on GitHub. So let's get started!&lt;/p&gt;

&lt;p&gt;If installing on macOS (or Linux) using Homebrew, simply enter the following two commands which add the tap &lt;code&gt;DonaldKellett/games&lt;/code&gt; and install the formula &lt;code&gt;csnaketerm&lt;/code&gt; from the tap:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew tap DonaldKellett/games
&lt;span class="nv"&gt;$ &lt;/span&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;csnaketerm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then invoke the game as &lt;code&gt;csnaketerm&lt;/code&gt;. A corresponding man page is also available:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;man 6 csnaketerm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;macOS users: this is your chance to &lt;a href="https://github.com/DonaldKellett/homebrew-games/issues/1"&gt;test the formula and contribute to ensuring its quality on macOS&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;For Linux users, the game is available &lt;a href="https://snapcraft.io/csnaketerm"&gt;in the Snap store&lt;/a&gt;. This is the only packaged version that does not come with a man page, but you get a desktop launcher with icon in a GUI environment. &lt;a href="https://snapcraft.io"&gt;Snaps&lt;/a&gt; are native to Ubuntu but come preinstalled in a number of other distributions, and can be manually installed in many more.&lt;/p&gt;

&lt;p&gt;While Snaps are cool and all, I understand the various concerns surrounding them: bloat, vendor lock-in, lack of software freedom and such. So for those reluctant (or unable) to install Snaps, I've got you covered. On Ubuntu 20.04 LTS and later (including non-LTS releases), you can install csnaketerm from &lt;code&gt;ppa:donaldsebleung/games&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;add-apt-repository ppa:donaldsebleung/games
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;csnaketerm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the other hand, on RPM distributions such as Fedora, CentOS and openSUSE, you can obtain csnaketerm from Fedora COPR through the &lt;code&gt;donaldsebleung/games&lt;/code&gt; repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dnf copr &lt;span class="nb"&gt;enable &lt;/span&gt;donaldsebleung/games
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dnf update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;dnf &lt;span class="nb"&gt;install &lt;/span&gt;csnaketerm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;openSUSE users may need to first install &lt;code&gt;dnf&lt;/code&gt; / &lt;code&gt;yum&lt;/code&gt; and &lt;code&gt;dnf-plugins-core&lt;/code&gt; / &lt;code&gt;yum-plugin-copr&lt;/code&gt; accordingly.&lt;/p&gt;

&lt;p&gt;If none of the options above (including Homebrew) worked for you as a Linux user or you are using another Unix OS such as one of the *BSD's, fetching from source is also an option. Ensure Git and Node.js 10 or above is installed, then run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/DonaldKellett/csnaketerm.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The executable and man page are both located at the top-level directory of the repo as &lt;code&gt;csnaketerm&lt;/code&gt; and &lt;code&gt;csnaketerm.6&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;As for Windows users, the game unfortunately does not play well with cmd, PowerShell or even Cygwin, so it should be run in a Linux environment such as &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/about"&gt;WSL2&lt;/a&gt;. If in doubt, get &lt;a href="https://www.microsoft.com/en-us/p/ubuntu-2004-lts/9n6svws3rx71#activetab=pivot:overviewtab"&gt;Ubuntu 20.04 LTS from the Microsoft store&lt;/a&gt; and follow the installation instructions for Ubuntu.&lt;/p&gt;

&lt;p&gt;Last but not least, the source code for the game is licensed under the GNU GPL and hosted &lt;a href="https://github.com/DonaldKellett/csnaketerm"&gt;on GitHub&lt;/a&gt; so feel free to study the source code, fork it, and hack on the fork to your heart's desire. Happy coding, and don't forget to hit that Star button if you enjoyed the game 🌟 &lt;/p&gt;

&lt;p&gt;See also: &lt;a href="https://donaldkellett.github.io/csnaketerm"&gt;https://donaldkellett.github.io/csnaketerm&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>linux</category>
      <category>bash</category>
    </item>
    <item>
      <title>Java Nested Classes and Lambda Expressions</title>
      <author>Patricia Nicole</author>
      <pubDate>Sun, 11 Jul 2021 09:35:48 +0000</pubDate>
      <link>https://dev.to/pat_the99/java-nested-classes-and-lambda-expressions-18o6</link>
      <guid>https://dev.to/pat_the99/java-nested-classes-and-lambda-expressions-18o6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#java-wilthinking-post-2"&gt;
  &lt;/a&gt;
  [Java WIL🤔 Post #2]
&lt;/h2&gt;

&lt;p&gt;Java has a very rich set of features that gives developers a lot of options to choose their implementation from, two of them, &lt;strong&gt;nested classes&lt;/strong&gt; and &lt;strong&gt;lambda expressions&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;I was reading a certain part of a code base and realized that I have not really fully understood the differences between the types of nested classes. The section below is heavily based from the Java Documentation for Nested Classes, so in-depth explanations can be checked &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#nested-classes"&gt;Nested Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-use-nested-classes"&gt;Why Use Nested Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#inner-classes"&gt;Inner Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#static-nested-classes"&gt;Static Nested Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#shadowing-in-nested-classes"&gt;Shadowing in Nested Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serialization-of-nested-classes"&gt;Serialization of Nested Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#local-and-anon-classes"&gt;Local and Anonymous Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lambda-expressions"&gt;Lambda Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functional-interface"&gt;Functional Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#target-typing-in-lambdas"&gt;Target Typing In Lambdas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#method-references"&gt;Method References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#when-to-use-each"&gt;When to Use Nested Classes, Local Classes, Anonymous Classes and Lambda Expressions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#nested-classes"&gt;
  &lt;/a&gt;
  📌 Nested Classes  &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A nested class is a class within another class, i.e. a member of its enclosing class. It is divided into two categories: &lt;strong&gt;non-static&lt;/strong&gt; and &lt;strong&gt;static&lt;/strong&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Non-static nested classes are called &lt;strong&gt;&lt;em&gt;inner classes&lt;/em&gt;&lt;/strong&gt;. They have access to other members of the enclosing class, even if they are declared private. &lt;/li&gt;
&lt;li&gt;Nested classes that are declared static are called &lt;strong&gt;&lt;em&gt;static nested classes&lt;/em&gt;&lt;/strong&gt;. They DO NOT have access to other members of the enclosing class. &lt;/li&gt;
&lt;li&gt;As a member of the outer class, a nested class can be declared &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt; or &lt;code&gt;package-private&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Note that outer classes can only be declared &lt;code&gt;public&lt;/code&gt; or &lt;code&gt;package-private&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#why-use-nested-classes"&gt;
  &lt;/a&gt;
  📌 Why Use Nested Classes &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;It is a way of logically grouping classes that are only used in one place.&lt;/li&gt;
&lt;li&gt;It increases encapsulation.&lt;/li&gt;
&lt;li&gt;It can lead to more readable and maintainable code. &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#inner-classes"&gt;
  &lt;/a&gt;
  📌 Inner Classes &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;An inner class is associated with an instance of its enclosing class and has direct access to that object's methods and fields. &lt;/li&gt;
&lt;li&gt;As an inner class is associated with an instance, &lt;strong&gt;IT CANNOT DEFINE ANY STATIC MEMBERS ITSELF.&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Objects that are instances of an inner class exist within an instance of the outer class. Thus an instance of an inner class can only exist within an instance of the outer class and has direct access to the methods and fields of the enclosing instance.&lt;/li&gt;
&lt;li&gt;To instantiate an inner class, the outer class must first be instantiated. &lt;/li&gt;
&lt;li&gt;There are two special kinds of inner classes: &lt;strong&gt;local classes&lt;/strong&gt; and &lt;strong&gt;anonymous classes&lt;/strong&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OuterClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InnerClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// class content here&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#static-nested-classes"&gt;
  &lt;/a&gt;
  📌 Static Nested Classes &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;As with class methods, a static nested class is associated with its outer class. &lt;/li&gt;
&lt;li&gt;A static nested class cannot refer directly to instance variables or methods defined in its enclosing class. It can use them only through an object reference.&lt;/li&gt;
&lt;li&gt;A static nested class interacts with the instance members of its outer class and other classes just like any other top level class. &lt;strong&gt;Thus a static nested class is behaviorally a top-level class that has been nested in another top-level class for packaging convenience.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OuterClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StaticNestedClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// class contents here&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shadowing-in-nested-classes"&gt;
  &lt;/a&gt;
  📌 Shadowing in Nested Classes &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;If a declaration of a type in a particular scope has the same name as another declaration in the enclosing scope, then the declaration shadows the declaration of the enclosing scope.&lt;/li&gt;
&lt;li&gt;The shadowed declaration cannot be referenced by its name alone. Note, you can actually do this : &lt;code&gt;ShadowTest.this.x&lt;/code&gt;.  &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"&gt;Go to shadowing section of this link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Refer to member variables that enclose larger scopes by the class name to which they belong. For example, the ff. statement accesses the member variable of the class &lt;code&gt;ShadowTest&lt;/code&gt; from the method.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ShadowTest.this.x = "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;ShadowTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#serialization"&gt;
  &lt;/a&gt;
  📌 Serialization &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Serialization of inner classes, including local and anonymous classes is &lt;strong&gt;strongly discouraged&lt;/strong&gt;. When the Java compiler compiles certain constructs such as inner classes, it creates &lt;strong&gt;&lt;em&gt;synthetic constructs&lt;/em&gt;&lt;/strong&gt;; these are classes, methods, fields and other constructs that do not have a corresponding construct in the source code. Synthetic constructs enable Java compilers to implement new Java language features without changes to the JVM. However, they may vary among different implementations.&lt;/li&gt;
&lt;li&gt;Might have compatibility issues if an inner class is serialized and then deserialize it with a different JRE implementation.&lt;/li&gt;
&lt;li&gt;Read more at the Serialization section of this &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"&gt;link&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#local-and-anonymous-classes"&gt;
  &lt;/a&gt;
  📌 Local and Anonymous Classes &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;There are two types of inner classes : local and anonymous. An inner class within the body of a method is called a &lt;strong&gt;local class&lt;/strong&gt;. An &lt;strong&gt;inner class&lt;/strong&gt; can also be declared inside the body of a method without naming them, i.e. an &lt;strong&gt;anonymous class&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The same modifiers used for other members of the outer class can be used for an inner class. For instance the access modifiers &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;package-private&lt;/code&gt; &lt;code&gt;protected&lt;/code&gt; can be used in an inner class just like how they are used for the instance fields of the outer class.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#more-on-local-classes"&gt;
  &lt;/a&gt;
  📌 &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html"&gt;More on Local Classes&lt;/a&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;someMethod&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeLocalClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// class contents here&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Local classes are classes defined in a block, which is a group of zero or more statements. &lt;/li&gt;
&lt;li&gt;Local classes can be defined inside any block, i.e. in a method body, a for loop or an if clause.&lt;/li&gt;
&lt;li&gt;A local class has access to the members of its enclosing class. It also has access to local variables.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;IMPORTANT: A local class can only access local variables that are declared final.&lt;/strong&gt; When a local class accesses a local variable or parameter of the enclosing block, it &lt;strong&gt;&lt;em&gt;captures&lt;/em&gt;&lt;/strong&gt; the variable or parameter.&lt;/li&gt;
&lt;li&gt;Starting Java 8, a local class can access local variables and parameters of the enclosing block that are final or effectively final. A variable or parameter whose value is never changed after it is initialized is &lt;strong&gt;effectively final&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Starting also in Java SE 8, if you declare the local class in a method, it can access the method's parameters.&lt;/li&gt;
&lt;li&gt;Local classes are similar to inner classes because they cannot define or declare any static members.&lt;/li&gt;
&lt;li&gt;Local classes in static methods, can only refer static members of the enclosing classes.&lt;/li&gt;
&lt;li&gt;Local classes are non-static because they have access to instance members of the enclosing block. Consequently they cannot contain most kinds of static declarations.&lt;/li&gt;
&lt;li&gt;An interface cannot be declared inside a block. Interfaces are inherently static.&lt;/li&gt;
&lt;li&gt;Static initializers or member interfaces cannot be declared inside a local class. &lt;/li&gt;
&lt;li&gt;A local class can have static members provided that they are constant variables. A &lt;em&gt;constant variable&lt;/em&gt; is a variable of primitive type or type String that is declared final and initialized with a compile-time constant expression. A compile time constant expression is typically a string or an arithmetic expression that can be evaluated at compile time.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#anonymous-classes"&gt;
  &lt;/a&gt;
  📌 Anonymous Classes
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;    &lt;span class="nc"&gt;SomeAnonyMousClass&lt;/span&gt; &lt;span class="n"&gt;anonClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;SomeAnonyMousClass&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="c1"&gt;// instance field declarations&lt;/span&gt;
        &lt;span class="c1"&gt;// methods &lt;/span&gt;
        &lt;span class="c1"&gt;// should contain no constructor&lt;/span&gt;
    &lt;span class="o"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Anonymous classes makes the code more concise. It enables declaration and instantiation of class at the same time. They are similar to local classes except that they do not have a name.&lt;/li&gt;
&lt;li&gt;While local classes are class declaration, &lt;strong&gt;anonymous classes are expressions&lt;/strong&gt;, which means that the class is defined in another expression. &lt;/li&gt;
&lt;li&gt;The syntax of an anonymous class expression is like the invocation of a constructor, except that there is a class definition contained in the code block.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;HelloWorld&lt;/span&gt; &lt;span class="n"&gt;helloWorld&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code here&lt;/span&gt;
&lt;span class="o"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The anonymous class expression consists of the following: &lt;code&gt;new&lt;/code&gt; operator, the name of an interface to implement or a class to extend, parentheses that contain the arguments to a constructor, just like a normal class instance creation expression and a body, which is a class declaration body.&lt;/li&gt;
&lt;li&gt;Because an anonymous class definition is an expression, it must be part of a statement. This explains why there is a semicolon after the closing brace.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#accessing-local-variables-of-the-enclosing-scope-and-declaring-and-accessing-members-of-the-anonymous-class"&gt;
  &lt;/a&gt;
  📌 Accessing Local Variables of the Enclosing Scope and Declaring and Accessing Members of the Anonymous Class
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Like local classes, anonymous classes can capture variables; they have the same access to local variables of the enclosing scope.&lt;/li&gt;
&lt;li&gt;An anonymous class has access to the members of its enclosing class.&lt;/li&gt;
&lt;li&gt;An anonymous class cannot access local variables in its enclosing scope that are not declared as final or effectively final.&lt;/li&gt;
&lt;li&gt;Like a nested class, a declaration of a type in an anonymous class shadows any other declarations in the enclosing scope that have the same name.&lt;/li&gt;
&lt;li&gt;Anonymous classes also have the same restrictions as local classes with respect to their members: static initializers or member interfaces cannot be declared; an anonymous class can have static members provided that they are constant variables. &lt;/li&gt;
&lt;li&gt;Note, the ff can be declared in anonymous class
a. Fields
b. extra methods
c. instance initializers
d. local classes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IMPORTANT: You cannot declare constructors in an anonymous class.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Anonymous classes are ideal for implementing an interface that contains two or more methods.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To summarize the hierarchy stated above, the image below shows the types of nested classes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GldNYlYQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dre0iay2eowqgnwhtj9i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GldNYlYQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dre0iay2eowqgnwhtj9i.jpg" alt="Types of Nested Classes"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lambda-expressions"&gt;
  &lt;/a&gt;
  📌 &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html"&gt;Lambda Expressions&lt;/a&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Lambda Expressions enables developers to treat functionality as a method argument, or code as a data.&lt;/li&gt;
&lt;li&gt;For classes with only one method, an anonymous class, much more a named class is a bit excessive and cumbersome. Lambdas express instances of single-method classes more compactly.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#syntax-of-lambda-expressions"&gt;
  &lt;/a&gt;
  📌 Syntax of Lambda Expressions
&lt;/h4&gt;

&lt;p&gt;A lambda expression consists of the ff.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A comma-separated list of formal parameters enclosed in parentheses. The data type of the parameters in the lambda expression can be omitted. Moreover, the parentheses can be omitted if there is only one parameter.&lt;/li&gt;
&lt;li&gt;The arrow token &lt;code&gt;-&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The body which consists of a single expression or a statement block. The return statement can also be used, however, keep in mind that a return statement is not an expression in lambdas, so they must be enclosed in braces. Lambdas can be treated as anonymous methods - methods without names.
For instance,
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#functional-interface"&gt;
  &lt;/a&gt;
  📌 Functional Interface &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;A &lt;strong&gt;&lt;em&gt;functional interface&lt;/em&gt;&lt;/strong&gt; is any interface that contains only one &lt;strong&gt;abstract method&lt;/strong&gt;. It may contain one or more default methods or static methods. Because it only contains one abstract method, the name can be omitted when implementing it. By doing this instead of using an anonymous class expression, a lambda expression is used. The JDK defines several standard functional interfaces which can be found in the package &lt;code&gt;java.util.function&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#accessing-local-variables-of-the-enclosing-scope-in-lambda-expressions"&gt;
  &lt;/a&gt;
  📌 Accessing Local Variables of the Enclosing Scope in Lambda Expressions
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Like local and anonymous classes, lambdas can capture variables; they have the same access to local variables of the enclosing scope. However, unlike local and anonymous classes, &lt;strong&gt;lambdas do not have shadowing issues&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Lambdas are &lt;strong&gt;lexically scoped&lt;/strong&gt;. This means that they do not inherit any names from a supertype or introduce a new level of scoping. Declarations in lambdas are interpreted just as they are in the enclosing environment.&lt;/li&gt;
&lt;li&gt;If the parameter passed to a lambda is declared in the enclosing scope, then the compiler generates an error, &lt;code&gt;Lambda expression's parameter {} cannot redeclare another local variable defined in an enclosing scope&lt;/code&gt;. This is because lambda expressions do not introduce a new level of scoping. Consequently, lambdas can directly access fields, methods and local variables of the enclosing scope. &lt;/li&gt;
&lt;li&gt;Like local and anonymous classes, a lambda expression can only access local variables and parameters of the enclosing block that are &lt;strong&gt;final&lt;/strong&gt; or &lt;strong&gt;effectively final&lt;/strong&gt; (value should not be changed after initialization).&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#target-typing-in-lambdas"&gt;
  &lt;/a&gt;
  📌 Target Typing in Lambdas &lt;a&gt;
&lt;/a&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;So how can the type of a lambda expression be determined, e.g. the type of p in the example below?&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the Java runtime invokes the method where the lambda is passed, it is expecting a specific datatype, so the lambda expression is of this type.The data type that these methods expect is called the &lt;strong&gt;target type&lt;/strong&gt;. To determine the type of a lambda expression, the Java compiler uses the target type of the context or situation in which the lambda expression was found. Thus, &lt;strong&gt;_lambda expressions can only be used in situation in which the Java compiler can determine the target type _&lt;/strong&gt;, i.e. in :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;variable declarations&lt;/li&gt;
&lt;li&gt;assignments&lt;/li&gt;
&lt;li&gt;return statements&lt;/li&gt;
&lt;li&gt;array initializers&lt;/li&gt;
&lt;li&gt;method or constructor arguments&lt;/li&gt;
&lt;li&gt;lambda expression bodies&lt;/li&gt;
&lt;li&gt;conditional expressions&lt;/li&gt;
&lt;li&gt;cast expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#target-types-and-method-arguments"&gt;
  &lt;/a&gt;
  📌 Target Types and Method Arguments
&lt;/h5&gt;

&lt;p&gt;For method arguments, the Java compiler determines the target type with two other language features &lt;strong&gt;overload resolution&lt;/strong&gt; and &lt;strong&gt;type argument interface&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For instance, if the functional interfaces &lt;code&gt;java.lang.Runnable&lt;/code&gt; and &lt;code&gt;java.util.Callable&amp;lt;V&amp;gt;&lt;/code&gt; are implemented and overloaded by a certain class like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Runnable&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Callable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;call&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which method will be invoked by the statement below?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"done"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The method with argument &lt;code&gt;Callable&amp;lt;V&amp;gt;&lt;/code&gt; will be invoked because the lambda returns a value, in this case the string &lt;code&gt;done&lt;/code&gt;. Note that the method &lt;code&gt;invoke(Runnable)&lt;/code&gt; does not return a value.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#serialization-of-lambdas"&gt;
  &lt;/a&gt;
  📌 Serialization of Lambdas
&lt;/h4&gt;

&lt;p&gt;A lambda can be serialized if its target type and its captured arguments are serializable. However, like inner classes, 🛑 &lt;strong&gt;the serialization of lambdas are strongly discouraged&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#method-references"&gt;
  &lt;/a&gt;
  📌 Method References &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Lambdas can be used to create anonymous methods. However, there are times when it does nothing but call an existing method. In these cases, it is often clearer to refer to the existing method by name, called &lt;strong&gt;method referencing&lt;/strong&gt;. They are compact, easy-to-read lambdas for methods that already have a name.&lt;br&gt;
For instance this can be done in sorting an array of Person objects by age.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;personListAsArray&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;Person:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;compareByAge&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The method reference &lt;code&gt;Person::compareByAge&lt;/code&gt; is semantically the same as the lambda expression where &lt;code&gt;compareByAge&lt;/code&gt; is a static method of the Person class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compareByAge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#kinds-of-method-references"&gt;
  &lt;/a&gt;
  Kinds of Method References
&lt;/h5&gt;

&lt;p&gt;There are four types of method referencing&lt;br&gt;
|Kind|Syntax|Example|&lt;br&gt;
|:---|:----|:----|&lt;br&gt;
|Reference to a static method|&lt;code&gt;ContainingClass::staticMethodName&lt;/code&gt;|&lt;code&gt;Person::compareByAge&lt;/code&gt;|&lt;br&gt;
|Reference to an instance method of a particular object|&lt;code&gt;containingObject::instanceMethodName&lt;/code&gt;|&lt;code&gt;person1::compareByName&lt;/code&gt;|&lt;br&gt;
|Reference to an instance method of an arbitrary object of a particular type|&lt;code&gt;ContainingType::methodName&lt;/code&gt;|&lt;code&gt;String::concat&lt;/code&gt;|&lt;br&gt;
|Reference to a constructor|&lt;code&gt;ClassName::new&lt;/code&gt;|&lt;code&gt;HashSet::new&lt;/code&gt;|&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-nested-classes-local-classes-anonymous-classes-and-lambda-expressions"&gt;
  &lt;/a&gt;
  📌 When to Use Nested Classes, Local Classes, Anonymous Classes and Lambda Expressions &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nested Classes enable the logical grouping of classes that are only used in one place, increase the use of encapsulation, create more readable and maintainable code. Local classes, anonymous classes and lambda expressions also share the same advantages but they are usually used for more specific situations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Local Class&lt;/strong&gt; . Used if creating more than one instance of a class is needed, access its constructor and/or introduce a new, named type.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Anonymous Class&lt;/strong&gt; . Used if declared fields or additional methods are needed&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lambda Expressions&lt;/strong&gt; . &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Used for encapsulating a single unit of behavior that is passed to the other parts of the code. &lt;/li&gt;
&lt;li&gt;Used if a simple instance of a functional interface is needed and some other criteria like constructor, named type, fields or additional methods are not needed&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Nested Class&lt;/strong&gt; . Used for reasons similar to those of local classes, i.e. it is necessary to make the type more widely available, and access to local variables or method parameters are not needed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inner class should be used if access to an enclosing instance's non-public fields and methods are required. &lt;/li&gt;
&lt;li&gt;Static class should be used if there is no instance field that needs to be accessed from the class.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Getting used and familiar with nested classes and advanced lambdas with generics certainly takes a lot of reading code and practice. We will eventually get there.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As always, cheers to continued growth and learning 🍷!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  REFERENCES
&lt;/h3&gt;

&lt;p&gt;[1] &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"&gt;Java Nested Classes&lt;/a&gt;&lt;br&gt;
[2] &lt;a href="https://www.flowerbrackets.com/nested-classes-in-java/"&gt;Nested Classes in Java&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Is it important to know how Javascript work under the hood?</title>
      <author>Toni</author>
      <pubDate>Sun, 11 Jul 2021 09:21:09 +0000</pubDate>
      <link>https://dev.to/mhb2011_/is-it-important-to-know-how-javascript-work-under-the-hood-5489</link>
      <guid>https://dev.to/mhb2011_/is-it-important-to-know-how-javascript-work-under-the-hood-5489</guid>
      <description>&lt;p&gt;After using javascript for all kind of projects and doing it professionally for almost a year (Developing React Native apps) I asked myself how does javascript work and does it really matter ? When i asked my friend that is much more experienced than me, he told me : Look Toni, it works. I don't care what it does under the hood.&lt;/p&gt;

&lt;p&gt;Then one day i stumbled upon medium article named "Master the JavaScript Interview" or something like that, with bunch of questions I've heard about but i could't really answer them. There  were bunch of questions like which paradigm javascript uses, difference between class and prototypal inheritance, pure functions, composition, call stack , callback queue...&lt;/p&gt;

&lt;p&gt;Wait, maybe it does matter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Yes, there are two paths you can go by, but in the long run, there's still time to change the road you're on.” - Led Zeppelin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is when I've started to dig deeper.&lt;/p&gt;

&lt;p&gt;This article of course can't explain all of it but something that stuck with me on my journey of understanding javascript and something that i think can help a lot of you understand javascript better is this youtube video:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=8aGhZQkoFbQ&amp;lt;br&amp;gt;%0A"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKyLfL-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/8aGhZQkoFbQ/0.jpg" alt="Event loop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is focused on explaining what the heck "event loop" is but it explains so much more. I can't recommend this talk enough that i had to write a dev.to post about it.&lt;/p&gt;

&lt;p&gt;Finally, after researching a lot i think i've changed the way i think. If you want code great websites, apps or anything else you have to understand the background , you have to understand how it works under the hood. It can save you so much time no matter which framework you are using Angular, Vue or React they are all based on javascript.&lt;/p&gt;

&lt;p&gt;I would like to hear your opinion.&lt;/p&gt;

&lt;p&gt;Thanks for reading :)&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>A Vim Guide for Adept Users</title>
      <author>Matthieu Cneude</author>
      <pubDate>Sun, 11 Jul 2021 09:20:55 +0000</pubDate>
      <link>https://dev.to/phantas0s/a-vim-guide-for-adept-users-477i</link>
      <guid>https://dev.to/phantas0s/a-vim-guide-for-adept-users-477i</guid>
      <description>&lt;p&gt;This is the fourth part of this series to learn Vim from the ground up:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-beginner/"&gt;Vim for Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-intermediate/"&gt;Vim for Intermediate Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-advanced/"&gt;Vim for Advanced Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-adept/"&gt;Vim for Adept Users&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Dave, your colleague developer, just read Vim for Advanced Users before going to bed. He wonders what's next: Vim for Unstoppable Creators? Vim for Godlike Developers? On these reassuring thoughts, he falls into a deep sleep.&lt;/p&gt;

&lt;p&gt;He wakes up suddenly: he's not in his bed anymore! He's now in a massive room, probably a church, where hundreds of masked and hooded figures sing in unison. He's sitting in front of a desk, like everybody else. The smell of incense is powerful and, even if he's in an open space, it's warm and comfy.&lt;/p&gt;

&lt;p&gt;The singing stop. A tall individual, hooded too, wearing a wonderful golden robe and a silver mask, stands on a stage in front of the gathering, not far from you. &lt;/p&gt;

&lt;p&gt;She begins to speak:&lt;/p&gt;

&lt;p&gt;"My friends! You've been chosen as the most fervent follower of our Guide, the powerful Vim! For the Glory of Vim!"&lt;/p&gt;

&lt;p&gt;Everybody repeats the words of the hooded woman: "For the glory of Vim!"&lt;/p&gt;

&lt;p&gt;She continues. "Today, when your formation will be done, I will knight you Glorious Vim Adept™. You'll be then borderline unstoppable, but beware! The Power needs to be used for The Greater Good!"&lt;/p&gt;

&lt;p&gt;"The Greater Good!", repeats the gathering.&lt;/p&gt;

&lt;p&gt;"My friends! Look under your desk. You have the Vector of Power, a Lenovo x220, with The Highness Vim running on it. Take it, it will be the link between you and my unbearable teaching. You'll become soon The Builders of the New Sweet World!"&lt;/p&gt;

&lt;p&gt;"The Builder of the New Sweet World!", repeat the others.&lt;/p&gt;

&lt;p&gt;There is indeed a computer under Dave's desk. He takes it and begins to read the table of content blinking before his excited eyes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How to manipulate multiple quickfix and location lists.&lt;/li&gt;
&lt;li&gt;What are digraphs and how to use them.&lt;/li&gt;
&lt;li&gt;Useful keystrokes in INSERT mode.&lt;/li&gt;
&lt;li&gt;Useful keystrokes in VISUAL mode.&lt;/li&gt;
&lt;li&gt;Vim regular expressions.&lt;/li&gt;
&lt;li&gt;Using shell commands in Vim.&lt;/li&gt;
&lt;li&gt;Folding content.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Suddenly, the course itself begins to poor in Dave's brain! Frenetically, his fingers type in Vim everything his telepathic connection is showing him.&lt;/p&gt;

&lt;p&gt;This article is a transcript of what Dave experienced in his own mind. It's not as powerful as telepathic teaching, but here are some tips and tricks you can use to remember what you'll read:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Try in Vim what's described while reading the article.&lt;/li&gt;
&lt;li&gt;Create your own cheatsheet. It will help you remember all the shenanigans and you can even refer to it in your daily work.&lt;/li&gt;
&lt;li&gt;Pick and choose new concepts from this article from time to time and try to integrate them to your own workflow.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What did Dave learn in his adventure?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multiple-quickfix-and-locations-lists"&gt;
  &lt;/a&gt;
  Multiple Quickfix and Locations Lists
&lt;/h2&gt;

&lt;p&gt;We saw in the &lt;a href="https://dev.to/vim-advanced/"&gt;last article&lt;/a&gt; how useful the quickfix lists are. But it didn't explain how to access the stack of these lists. &lt;/p&gt;

&lt;p&gt;Indeed, each time we create a quickfix list, it will be added to a stack and the previous one will be pushed down. This stack can contain 10 quickfix lists maximum; each time you create a quickfix list, the 10th on the stack will disappear forever in the Forgotten Pit of Quickfix Lists.&lt;/p&gt;

&lt;p&gt;This is true for location lists too: you'll have a stack containing 10 of them &lt;em&gt;per window open&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can use these commands to manipulate this stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:chistory&lt;/code&gt; or &lt;code&gt;:chi&lt;/code&gt; - Show the stack of quickfix lists and point out the current one.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:colder&lt;/code&gt; or &lt;code&gt;:col&lt;/code&gt; - Change the current quickfix list to the next older one.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:cnewer&lt;/code&gt; or &lt;code&gt;:cnew&lt;/code&gt; - Change the current quickfix list to the next newer one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can add a count after &lt;code&gt;:colder&lt;/code&gt; and &lt;code&gt;:cnewer&lt;/code&gt;. For example, running &lt;code&gt;:colder 3&lt;/code&gt; will select the quickfix list which is 3 positions down the current one.&lt;/p&gt;

&lt;p&gt;To change your current location list, you can replace the first letter &lt;code&gt;c&lt;/code&gt; (qui&lt;code&gt;c&lt;/code&gt;kfix) of the commands above with a &lt;code&gt;l&lt;/code&gt; (&lt;code&gt;l&lt;/code&gt;ocation).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;:help quickfix-error-lists&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#digraphs"&gt;
  &lt;/a&gt;
  Digraphs
&lt;/h2&gt;

&lt;p&gt;Vim allows you to insert special characters easily using &lt;em&gt;digraphs&lt;/em&gt;. To insert these special characters, you need to know their &lt;em&gt;representations&lt;/em&gt;, always two "normal" characters. &lt;/p&gt;

&lt;p&gt;Here are some useful commands:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:digraphs&lt;/code&gt; or &lt;code&gt;:dig&lt;/code&gt; - Display the digraphs available.&lt;br&gt;
&lt;code&gt;:digraphs &amp;lt;char1&amp;gt;&amp;lt;char2&amp;gt; &amp;lt;number&amp;gt;&lt;/code&gt; - Create a new digraph represented with the characters &lt;code&gt;&amp;lt;char1&amp;gt;&amp;lt;char2&amp;gt;&lt;/code&gt;. The &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt; is its decimal representation (Unicode character).&lt;/p&gt;

&lt;p&gt;You can also use the following keystrokes in INSERT mode to spit these good digraphs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CTRL+K &amp;lt;char1&amp;gt;&amp;lt;char2&amp;gt;&lt;/code&gt; - Insert the digraph represented with the characters &lt;code&gt;&amp;lt;char1&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;char2&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;char1&amp;gt;&amp;lt;BS&amp;gt;&amp;lt;char2&amp;gt;&lt;/code&gt; - Insert the digraph represented with the characters &lt;code&gt;&amp;lt;char1&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;char2&amp;gt;&lt;/code&gt; (only if the option &lt;code&gt;digraph&lt;/code&gt; is set to true).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CTRL+K -&amp;gt;&lt;/code&gt;: →&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+K TM&lt;/code&gt;: ™&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+K Co&lt;/code&gt;: ©&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+K Rg&lt;/code&gt;: ®&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+K Eu&lt;/code&gt;: €&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+K +-&lt;/code&gt;: ±&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+K OK&lt;/code&gt;: ✓&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+K XX&lt;/code&gt;: ✗&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I owe my sanity to digraphs when I was trying to &lt;a href="https://raw.githubusercontent.com/Phantas0s/playground/master/cs/04-math/discrete-math-applications/1/1.3/1.3.md"&gt;solve some problems in propositional logic&lt;/a&gt; full of "∧" (&lt;code&gt;CTRL+k AN&lt;/code&gt;), "∨" (&lt;code&gt;CTRL+k OR&lt;/code&gt;) or "∈" (&lt;code&gt;CTRL+k (-&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;A last tip: you can use the keystroke &lt;code&gt;ga&lt;/code&gt; in NORMAL mode to display the digraph of the character under the cursor (if there is one).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help digraph&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help digraph-table&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#useful-keystrokes-in-insert-mode"&gt;
  &lt;/a&gt;
  Useful Keystrokes in Insert Mode
&lt;/h2&gt;

&lt;p&gt;We saw many keystrokes for NORMAL mode throughout this series, but what about INSERT mode? We need more equality between modes in this world. &lt;/p&gt;

&lt;p&gt;Keystrokes in INSERT mode are prefixed with &lt;code&gt;CTRL&lt;/code&gt;, specifying to Vim that we don't want to insert some text.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#inserting-and-deleting"&gt;
  &lt;/a&gt;
  Inserting and Deleting
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CTRL+a&lt;/code&gt; - Insert the l&lt;code&gt;a&lt;/code&gt;st content inserted.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+@&lt;/code&gt; - Insert the l&lt;code&gt;a&lt;/code&gt;st content inserted and quit INSERT mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+h&lt;/code&gt; - Delete the character before the cursor.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+w&lt;/code&gt; - Delete the &lt;code&gt;w&lt;/code&gt;ord under the cursor.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+u&lt;/code&gt; - Delete everything before the c&lt;code&gt;u&lt;/code&gt;rsor.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+t&lt;/code&gt; - Add one indenta&lt;code&gt;t&lt;/code&gt;ion.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+d&lt;/code&gt; - &lt;code&gt;D&lt;/code&gt;elete one indentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#spitting-registers"&gt;
  &lt;/a&gt;
  Spitting Registers
&lt;/h3&gt;

&lt;p&gt;We saw already in the &lt;a href="https://dev.to/vim-advanced/"&gt;previous article&lt;/a&gt; how to spit the content of a register in INSERT mode. Let's introduce some subtleties here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CTRL+R &amp;lt;reg&amp;gt;&lt;/code&gt; - Spit the content of the register &lt;code&gt;&amp;lt;reg&amp;gt;&lt;/code&gt; &lt;em&gt;as if you typed it&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+R CTRL+R &amp;lt;reg&amp;gt;&lt;/code&gt; - Same as &lt;code&gt;CTRL+R&lt;/code&gt;, but insert the text literally.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+R CTRL+P &amp;lt;reg&amp;gt;&lt;/code&gt; - Spit the literal content of the register &lt;code&gt;&amp;lt;reg&amp;gt;&lt;/code&gt; with the correct indentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you look at the content of your registers, you might find some weird characters like &lt;code&gt;^M&lt;/code&gt; or &lt;code&gt;^I&lt;/code&gt;. You can think of them as &lt;code&gt;CTRL+m&lt;/code&gt; and &lt;code&gt;CTRL+i&lt;/code&gt;, which means, if you recorded some macros while being in INSERT more, end-of-line and tabulation respectively.&lt;/p&gt;

&lt;p&gt;The first keystroke &lt;code&gt;CTRL+R &amp;lt;reg&amp;gt;&lt;/code&gt; will insert these end-of-lines and tabulations. For example, if you have the characters &lt;code&gt;^M&lt;/code&gt; in your register when you display them via &lt;code&gt;:reg&lt;/code&gt;, it will become an end-of-line when you insert it.&lt;/p&gt;

&lt;p&gt;If you use &lt;code&gt;CTRL+R CTRL+R &amp;lt;reg&amp;gt;&lt;/code&gt;, you'll have the literal characters &lt;code&gt;^M&lt;/code&gt; inserted in your buffer. It's handy to spit a recording for a macro, modify it, and then save it back to your register &lt;code&gt;&amp;lt;reg&amp;gt;&lt;/code&gt;. From there, you can execute your modified macro.&lt;/p&gt;

&lt;p&gt;To know what the literal version of a key is, you can use &lt;code&gt;CTRL+V&lt;/code&gt; (or &lt;code&gt;CTRL+Q&lt;/code&gt;) in INSERT mode followed by the key. For example, &lt;code&gt;CTRL+V ENTER&lt;/code&gt; will display &lt;code&gt;^M&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since we're speaking about &lt;code&gt;CTRL+V&lt;/code&gt;, you can also use it followed by the decimal, octal, or hexadecimal value of a character. It's another way to insert special characters without using digraphs. You can run &lt;code&gt;man ascii&lt;/code&gt; to have access to the ASCII table in your shell and choose whatever character you want.&lt;/p&gt;

&lt;p&gt;The keystrokes &lt;code&gt;CTRL+V&lt;/code&gt; and the equivalent &lt;code&gt;CTRL+Q&lt;/code&gt; can be used in COMMAND-LINE mode too.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#back-to-normal-mode"&gt;
  &lt;/a&gt;
  Back to NORMAL mode
&lt;/h3&gt;

&lt;p&gt;The keystroke &lt;code&gt;CTRL+o&lt;/code&gt; in INSERT mode allows you to come back to NORMAL mode for one keystroke (or one command in COMMAND-LINE mode). When it's done, you'll be automatically back in INSERT mode.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#undo-in-insert-mode"&gt;
  &lt;/a&gt;
  Undo in Insert Mode
&lt;/h3&gt;

&lt;p&gt;You can stop the undo sequence if you use &lt;code&gt;CTRL+G u&lt;/code&gt; in INSERT mode.&lt;/p&gt;

&lt;p&gt;For example, try to insert some text in INSERT mode and then undo your insertion with &lt;code&gt;u&lt;/code&gt; in NORMAL mode. Everything you've inserted is now gone.&lt;/p&gt;

&lt;p&gt;If you want to undo each word you've inserted instead of everything, you can use this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:inoremap &amp;lt;space&amp;gt; &amp;lt;C-G&amp;gt;u&amp;lt;space&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, each time you press &lt;code&gt;SPACE&lt;/code&gt; in INSERT mode, you'll stop the undo sequence. When you hit &lt;code&gt;u&lt;/code&gt; in NORMAL mode, it will undo what you've inserted after hitting the last &lt;code&gt;SPACE&lt;/code&gt;. If you undo again, it will undo another word, and so on. There is a drawback, however: abbreviations won't work anymore in insert mode.&lt;/p&gt;

&lt;p&gt;You can think of &lt;code&gt;CTRL+G u&lt;/code&gt; as creating chunks of undo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help ins-special-keys&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help insert−index&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#useful-keystrokes-in-visual-mode"&gt;
  &lt;/a&gt;
  Useful Keystrokes in Visual mode
&lt;/h2&gt;

&lt;p&gt;There are also interesting keystrokes you can hit in the different variants of VISUAL mode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-mode-and-visual-mode-linewise"&gt;
  &lt;/a&gt;
  Visual Mode and Visual Mode Linewise
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;o&lt;/code&gt; - Move your cursor to the &lt;code&gt;o&lt;/code&gt;pposite side of the selection (or the &lt;code&gt;o&lt;/code&gt;ther end if you prefer). Doesn't work in VISUAL mode linewise.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;R&lt;/code&gt; or &lt;code&gt;S&lt;/code&gt; - Delete the selected lines and start INSERT mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;U&lt;/code&gt; - &lt;code&gt;U&lt;/code&gt;ppercase the selection.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;gv&lt;/code&gt; - Switch back and forth between the previous selection and the current one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another tip: You can switch between VISUAL mode linewise and VISUAL mode blockwise &lt;em&gt;without coming back to NORMAL mode&lt;/em&gt; with &lt;code&gt;CTRL+v&lt;/code&gt; and &lt;code&gt;SHIFT+v&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-mode-blockwise"&gt;
  &lt;/a&gt;
  Visual Mode Blockwise
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;o&lt;/code&gt; - Move to the &lt;code&gt;o&lt;/code&gt;pposite corner of the selection.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;O&lt;/code&gt; - Move to the &lt;code&gt;o&lt;/code&gt;pposite side of the selection.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;I&lt;/code&gt; - &lt;code&gt;I&lt;/code&gt;nsert some content at the beginning of every line selected.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; - &lt;code&gt;A&lt;/code&gt;ppend some content on every line selected after the highlighted area.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$A&lt;/code&gt; - &lt;code&gt;A&lt;/code&gt;ppend some content at the end of every line selected.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;c&lt;/code&gt; - Delete selected lines and begin INSERT mode &lt;em&gt;on every line&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help visual-index&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help blockwise-operators&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#vim-regular-expressions"&gt;
  &lt;/a&gt;
  Vim Regular Expressions
&lt;/h2&gt;

&lt;p&gt;We're now at the crux of this article: Vim's regexes are really powerful for searching in your content or transforming it. As a Venerable Vim Adept, you need to harness its power.&lt;/p&gt;

&lt;p&gt;This section won't go into the details of regexes in general. I assume that you know your basic metacharacters. If not, I've recorded &lt;a href="https://www.youtube.com/watch?v=LIVBktatfQI&amp;amp;list=PLRU13thWaP5kNYXveE9iF8aoEOlp4lgwN&amp;amp;index=2"&gt;videos about the basic of regexes using Grep&lt;/a&gt; (with exercises) if you're interested to learn more about them. It's not that hard and the benefits are huge.&lt;/p&gt;

&lt;p&gt;If you know already some common regex engines like Perl, you won't be &lt;em&gt;too much&lt;/em&gt; surprised by Vim's regexes. The basics are the same, but Vim introduces original concepts which are... interesting? If you want to quickly see the difference between Perl's regexes and Vim's, you'll find a summary by running &lt;code&gt;:help perl-patterns&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this article, I call "metacharacter" any character which has semantics: for example, the semantics for &lt;code&gt;^&lt;/code&gt; is "beginning of the line". &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-concept-of-atom"&gt;
  &lt;/a&gt;
  The Concept of Atom
&lt;/h3&gt;

&lt;p&gt;You'll see often this confusing notion of &lt;em&gt;atom&lt;/em&gt; in Vim's help. It's just any metacharacter or group of metacharacters matching one character. For example, &lt;code&gt;[A-Z]&lt;/code&gt; is an atom because it matches only one character from &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;Z&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#magic-and-nomagic"&gt;
  &lt;/a&gt;
  Magic and Nomagic
&lt;/h3&gt;

&lt;p&gt;As we saw quickly in the &lt;a href="https://dev.to/vim-advanced/"&gt;previous article&lt;/a&gt;, Vim's regexes can have four different levels of magic: &lt;em&gt;Very magic&lt;/em&gt;, &lt;em&gt;magic&lt;/em&gt;, &lt;em&gt;nomagic&lt;/em&gt;, and &lt;em&gt;very nomagic&lt;/em&gt;. My advice in this madness: remember that &lt;em&gt;very magic&lt;/em&gt; will allow you to use every regex metacharacter without escaping them, and that  &lt;em&gt;very nomagic&lt;/em&gt; oblige you to escape these metacharacters to use them.&lt;/p&gt;

&lt;p&gt;The level of magic is set with the option &lt;code&gt;magic&lt;/code&gt;. You might be tempted to change its value; please don't. Every plugin out there expect this option set to &lt;code&gt;magic&lt;/code&gt;. Instead, we'll see different ways to change the magic level for each regex.&lt;/p&gt;

&lt;p&gt;Because everybody has the level of magic set to "magic", you'll see many Vim regexes out there with a tonne of backslash to escape &lt;em&gt;some&lt;/em&gt; metacharacters. That's why Vim's regexes often look so ugly, confusing, and hard to read. I propose this simple rule:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When you need a regex, use "very magic" by adding &lt;code&gt;\v&lt;/code&gt; before your pattern.&lt;/li&gt;
&lt;li&gt;When you don't need a regex, use "very nomagic" by adding &lt;code&gt;\V&lt;/code&gt; before your pattern.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, &lt;code&gt;:%s/\v(emacs)/\1 is bad/&lt;/code&gt; will work flawlessly.&lt;/p&gt;

&lt;p&gt;If you're curious what level of magic allows what metacharacter, take a look at &lt;code&gt;:help \magic&lt;/code&gt;. You'll be granted with a wonderful table nobody remembers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#character-classes"&gt;
  &lt;/a&gt;
  Character classes
&lt;/h3&gt;

&lt;p&gt;Similarly to other regex engines, you'll have access to many character classes in Vim. You'll need to use the backslash preceding them whatever the level of magic you use.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#useful-character-classes"&gt;
  &lt;/a&gt;
  Useful Character Classes
&lt;/h4&gt;

&lt;p&gt;Here are the character classes I find the most useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;\s&lt;/code&gt; or &lt;code&gt;[:blank:]&lt;/code&gt; - whitespace characters.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;[A-Z]&lt;/code&gt; or &lt;code&gt;\u&lt;/code&gt; or &lt;code&gt;[:upper:]&lt;/code&gt; - Uppercase.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;[a-z]&lt;/code&gt; or &lt;code&gt;\l&lt;/code&gt; or &lt;code&gt;[:lower:]&lt;/code&gt; - Lowercase.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;[0-9]&lt;/code&gt; or &lt;code&gt;\d&lt;/code&gt; or &lt;code&gt;[:digit:]&lt;/code&gt; - Digits.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\_&lt;/code&gt; - Character class with end of line included.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, to illustrate a bit more the last one, if you want to include uppercase characters &lt;em&gt;and&lt;/em&gt; line breaks in your regex, you can use &lt;code&gt;\_u&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Most of the time, you can use the uppercase version of the character class to negate it. For example, &lt;code&gt;\L&lt;/code&gt; is equivalent to &lt;code&gt;[^a-z]&lt;/code&gt; (every character except the characters in the range &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;z&lt;/code&gt;).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#character-classes-set-via-options"&gt;
  &lt;/a&gt;
  Character Classes Set Via Options
&lt;/h4&gt;

&lt;p&gt;These character classes are interesting because you can change the characters they can match by changing the value of an option:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;\f&lt;/code&gt; - Filename characters (option &lt;code&gt;isfname&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\i&lt;/code&gt; - Identifier characters (option &lt;code&gt;isident&lt;/code&gt; option)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\k&lt;/code&gt; - Keyword character (option &lt;code&gt;iskeyword&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\p&lt;/code&gt; - Printable character (option &lt;code&gt;isprint&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Changing these options can have consequences: they are sometimes used for other commands or keystrokes. For example, the keystroke &lt;code&gt;gf&lt;/code&gt; use &lt;code&gt;isfname&lt;/code&gt; under the hood. &lt;/p&gt;

&lt;p&gt;Another tip: if you see for example the value &lt;code&gt;48-57&lt;/code&gt; in these options, it means the ASCII characters from 48 to 57, which are the numbers from 0 to 9.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zerowidth"&gt;
  &lt;/a&gt;
  Zero-width
&lt;/h3&gt;

&lt;p&gt;A zero-width lookaround assertion allows you to match a pattern looking forward of backward without adding it to the match. As a result, these metacharacters don't match any character by themselves. For example, &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; are zero-width. &lt;/p&gt;

&lt;p&gt;If you try to substitute them, you won't replace anything because there is nothing to replace. Instead, you'll insert some text. To understand that, you can try to run &lt;code&gt;:%s/^/-&amp;gt;&lt;/code&gt; in a buffer for example.&lt;/p&gt;

&lt;p&gt;You'll need to use the backslash for these metacharacters whatever the level of magic you're using. Here are the ones which might be useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;\zs&lt;/code&gt; - Only match your pattern if what's before the metacharacter &lt;code&gt;\zs&lt;/code&gt; match what's before your pattern.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\ze&lt;/code&gt; - Only match your pattern if what's after the metacharacter &lt;code&gt;\ze&lt;/code&gt; match what's after your pattern.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\&amp;lt;&lt;/code&gt; - Match the beginning of a word.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/&amp;gt;&lt;/code&gt; - Match the end of a word.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\%^&lt;/code&gt; - Match the beginning of the file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\%$&lt;/code&gt; - Match the end of the file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\%V&lt;/code&gt; - Match inside the visual selection (or the previous one if you're not in VISUAL mode).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, in COMMAND-LINE mode after hitting &lt;code&gt;/&lt;/code&gt; for searching:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;\v^\s+\zsfor&lt;/code&gt; - Only match &lt;code&gt;for&lt;/code&gt; if there are one or more whitespace before the pattern.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\&amp;lt;if\&amp;gt;&lt;/code&gt; - Only match the word &lt;code&gt;if&lt;/code&gt; and not the substring &lt;code&gt;if&lt;/code&gt; in &lt;code&gt;cliff&lt;/code&gt; for example.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;end\%$&lt;/code&gt; - Only match the pattern &lt;code&gt;end&lt;/code&gt; if it's just before the end of the current file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another concrete example: I'm using &lt;a href="https://dev.to/zsh-install-configure-mouseless/"&gt;Zsh&lt;/a&gt; to edit command lines in Vim and I often end up with the following when I want to rename a file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mv my-file-name.jpg my-file-name.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The goal is to replace the hyphen &lt;code&gt;-&lt;/code&gt; with underscores &lt;code&gt;_&lt;/code&gt; in the filename &lt;code&gt;my-file-name.jpg&lt;/code&gt;. I could: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Switch to VISUAL mode&lt;/li&gt;
&lt;li&gt;Select the second &lt;code&gt;my-file-name.jpg&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run the following:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:'&amp;lt;,'&amp;gt;s/-/_/g
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But it doesn't work. My substitute will replace &lt;em&gt;every hyphen on the line&lt;/em&gt; thanks to the &lt;code&gt;g&lt;/code&gt; flag, and, if I don't use it, I only replace &lt;em&gt;the first hyphen on the line&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;To solve the problem, I can use &lt;code&gt;\%V&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:'&amp;lt;,'&amp;gt;s/\%V-/_/g
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works as expected because the pattern only match what's inside the selection I've made.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#regexes-and-marks"&gt;
  &lt;/a&gt;
  Regexes and Marks
&lt;/h3&gt;

&lt;p&gt;What about using marks in our regexes?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;\%&amp;lt;'m&lt;/code&gt; - Matches before the position of mark m.&lt;br&gt;
&lt;code&gt;\%&amp;gt;'m&lt;/code&gt; - Match after the position of mark m.&lt;/p&gt;

&lt;p&gt;For example, &lt;code&gt;/\%&amp;gt;'mcat\%&amp;lt;'a&lt;/code&gt; search the pattern &lt;code&gt;cat&lt;/code&gt; between the mark &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help regex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help /magic&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:help holy-grail&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help pattern&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help pattern-atoms&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help pattern-overview&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#using-your-shell-commands-in-vim"&gt;
  &lt;/a&gt;
  Using Your Shell Commands in Vim
&lt;/h2&gt;

&lt;p&gt;Vim is powerful by itself, but coupling Vim with the shell is switching your life's GODLIKE mode. Additionally, if your development environment is built around the shell and your tools allow you to stay as much as you can on your keyboard, you'll be unstoppable.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#executing-external-command"&gt;
  &lt;/a&gt;
  Executing External Command
&lt;/h3&gt;

&lt;p&gt;Here are the commands you can use to summon the Unfathomable Power of The Shell®:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:! &amp;lt;cmd&amp;gt;&lt;/code&gt; - Execute the shell command &lt;code&gt;&amp;lt;cmd&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:!!&lt;/code&gt; - Repeat the last command executed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, We saw in this article that we can look at the ASCII table if we run &lt;code&gt;man ascii&lt;/code&gt; in a shell. Now, you can look at it directly in Vim with &lt;code&gt;:!man ascii&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What about inserting the output of a shell command in your buffer?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:read! &amp;lt;cmd&amp;gt;&lt;/code&gt; or &lt;code&gt;:r! &amp;lt;cmd&amp;gt;&lt;/code&gt; - Execute the command &lt;code&gt;&amp;lt;cmd&amp;gt;&lt;/code&gt; and insert the output in the current buffer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:read!!&lt;/code&gt; or &lt;code&gt;:r!!&lt;/code&gt;- Repeat the last command executed and insert the output in the current buffer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, everybody in the universe can feel your brain radiating with The Power.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help :!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help :r!&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#filter"&gt;
  &lt;/a&gt;
  Filter
&lt;/h3&gt;

&lt;p&gt;Did you ever dream, during the warm summer nights, about feeding the lines of your Vim buffers into the input stream of your favorite command, and replace these lines with the resulting output?&lt;/p&gt;

&lt;p&gt;Your dream will become a reality. Using &lt;code&gt;:!&lt;/code&gt; with a range will help you fulfill your destiny. For example, you could:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select a couple of lines in VISUAL mode&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;:'&amp;lt;,'&amp;gt;!grep &amp;lt;pattern&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Every line without the pattern &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; will disappear in a magical cloud. Show that to your friends, your family, or your boss, and they'll respect you forever.&lt;/p&gt;

&lt;p&gt;This functionality is called "filter", but it's quite misleading to me. If I use &lt;code&gt;1,10:!sort&lt;/code&gt;, it won't filter anything,  it will replace the input I gave to &lt;code&gt;sort&lt;/code&gt; and it will replace it with the output.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;:help filter&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#folding"&gt;
  &lt;/a&gt;
  Folding
&lt;/h2&gt;

&lt;p&gt;A good way to manage complexity is to hide what we don't need. In that regard, folding can be handy for complex codebases and long files.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#choosing-your-fold-method"&gt;
  &lt;/a&gt;
  Choosing Your Fold Method
&lt;/h3&gt;

&lt;p&gt;The value of the option &lt;code&gt;foldmethod&lt;/code&gt; will determine how you want to manage your folds. There are 6 in total:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;manual&lt;/code&gt; - You manually define folds with the commands below.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;indent&lt;/code&gt; - Folds are created depending on the indentation level.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;expr&lt;/code&gt; - Folds are created depending on a Vimscript expression defined in &lt;code&gt;foldexpr&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;syntax&lt;/code&gt; - Fold are created depending on the syntax highlighting (if the syntax highlighting defines them).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;diff&lt;/code&gt; -  Fold unchanged text.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;marker&lt;/code&gt; - Fold depending on markers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the foldmethod &lt;code&gt;marker&lt;/code&gt;, here's an example I use in my &lt;code&gt;.vimrc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Install Plugins ---------------------- {{{&lt;/span&gt;
&lt;span class="c"&gt;"&lt;/span&gt;
&lt;span class="c"&gt;" Some config here&lt;/span&gt;
&lt;span class="c"&gt;"&lt;/span&gt;
&lt;span class="c"&gt;" }}}&lt;/span&gt;
&lt;span class="c"&gt;" Plugins Config ---------------------- {{{&lt;/span&gt;
&lt;span class="c"&gt;"&lt;/span&gt;
&lt;span class="c"&gt;" Some config here&lt;/span&gt;
&lt;span class="c"&gt;"&lt;/span&gt;
&lt;span class="c"&gt;" }}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you forgot how to set and unset options, I cover that in the &lt;a href="https://dev.to/vim-beginner/"&gt;first article of the series&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keystrokes"&gt;
  &lt;/a&gt;
  Keystrokes
&lt;/h3&gt;

&lt;p&gt;All these keystrokes begins with &lt;code&gt;z&lt;/code&gt;. When you look at this wonderful letter, you can let your imagination going into foreign worlds and see a fold. Folded: &lt;code&gt;-&lt;/code&gt;. Unfolded: &lt;code&gt;z&lt;/code&gt;.  Think about unfolding an old manuscript full of hidden Vim knowledge. Impressed? Me too.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-and-deleting-folds"&gt;
  &lt;/a&gt;
  Creating and deleting folds
&lt;/h4&gt;

&lt;p&gt;These keystrokes only work if your foldmethod is set to &lt;code&gt;manual&lt;/code&gt; or &lt;code&gt;marker&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;zf&lt;/code&gt; - Create a &lt;code&gt;f&lt;/code&gt;old. It can be used in VISUAL mode or with a motion. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;zd&lt;/code&gt; - &lt;code&gt;d&lt;/code&gt;elete the fold  under the cursor (but not the nested ones).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;zD&lt;/code&gt; - &lt;code&gt;D&lt;/code&gt;elete the fold under the cursor, including the nested ones.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;zE&lt;/code&gt; - &lt;code&gt;E&lt;/code&gt;liminate every fold in the window. It deletes the markers if your foldmethod is set to &lt;code&gt;marker&lt;/code&gt;. Brutal.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#opening-and-closing-folds"&gt;
  &lt;/a&gt;
  Opening and Closing Folds
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;zo&lt;/code&gt; - &lt;code&gt;o&lt;/code&gt;pen the fold under the cursor.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;zc&lt;/code&gt; - &lt;code&gt;c&lt;/code&gt;lose the fold under the cursor.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;za&lt;/code&gt; - Toggle the fold under the cursor (close it if it's open, open it if it's close).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;zx&lt;/code&gt; - Undo opened and closed folds.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Uppercase variants of these keystrokes (&lt;code&gt;zO&lt;/code&gt; for example) can be used to propagate the action to every nested fold.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#opening-and-closing-all-folds"&gt;
  &lt;/a&gt;
  Opening and Closing All Folds
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;zM&lt;/code&gt; - Close all folds&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;zR&lt;/code&gt; - Open all folds&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;zi&lt;/code&gt; - Toggle the use of folds (option &lt;code&gt;foldenable&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#moving-through-folds"&gt;
  &lt;/a&gt;
  Moving Through Folds
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;[z&lt;/code&gt; - Move to the start of the current fold.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;]z&lt;/code&gt; - Move to the end of the current fold.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;zj&lt;/code&gt; - Move downward to the start of the next fold.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;zk&lt;/code&gt; - Move upward to the start of the next fold.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#commands"&gt;
  &lt;/a&gt;
  Commands
&lt;/h3&gt;

&lt;p&gt;You can also use these commands to manipulate folds. Each of them accept a range as prefix.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:foldopen&lt;/code&gt; or &lt;code&gt;foldo&lt;/code&gt; - Open folds.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:foldclose&lt;/code&gt; or &lt;code&gt;foldc&lt;/code&gt; - Close folds.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:folddoopen &amp;lt;cmd&amp;gt;&lt;/code&gt; or &lt;code&gt;:foldd &amp;lt;cmd&amp;gt;&lt;/code&gt; - Execute command &lt;code&gt;&amp;lt;cmd&amp;gt;&lt;/code&gt; on all opened fold.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:folddoclosed &amp;lt;cmd&amp;gt;&lt;/code&gt; or &lt;code&gt;:folddoc &amp;lt;cmd&amp;gt;&lt;/code&gt; - Execute command &lt;code&gt;&amp;lt;cmd&amp;gt;&lt;/code&gt; on all closed fold&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using a bang &lt;code&gt;!&lt;/code&gt; for the first two ones (&lt;code&gt;foldo!&lt;/code&gt; and &lt;code&gt;foldc!&lt;/code&gt;) will open or close all nested folds too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help Folding&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help fold-methods&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help fold-commands&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#are-we-there-yet"&gt;
  &lt;/a&gt;
  Are We There Yet?
&lt;/h2&gt;

&lt;p&gt;Suddenly, Dave woke up in his bed. This was all a dream! The hooded figures, the telepathic Vim course, everything! But he has now a lot of knowledge about Vim he didn't have before falling asleep. Was it real? Was it a dream? Is our reality just a dream? Are we part of a weird Sim-like simulation? Are raspberries better than strawberries?&lt;/p&gt;

&lt;p&gt;So many questions, so few answers! At least, we learned together the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can have access to 10 global quickfix lists, and 10 location lists per window.&lt;/li&gt;
&lt;li&gt;The NORMAL mode is powerful, but many useful keystrokes wait for our fingers to type them in INSERT and VISUAL modes.&lt;/li&gt;
&lt;li&gt;Vim regular expressions can be more or less "magic", deciding what metacharacter you can use in your patterns without escaping them.&lt;/li&gt;
&lt;li&gt;An atom in Vim regexes is any pattern matching one character.&lt;/li&gt;
&lt;li&gt;Zero-width metacharacters don't match any character but help you narrow down your match depending on its context.&lt;/li&gt;
&lt;li&gt;You can use marks in your regexes too.&lt;/li&gt;
&lt;li&gt;You can run any shell command with &lt;code&gt;:!&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can spit output of shell commands in Vim with &lt;code&gt;:read&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Folding can be useful when you've too much content on your screen.&lt;/li&gt;
&lt;li&gt;Folding can also be used to apply a specific command on folded lines with &lt;code&gt;:foldd&lt;/code&gt; and &lt;code&gt;:folddoc&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is not over. More discoveries will be made in the Name of Vim, and we'll all get Its Highest Power to build new applications which will save the world.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#becoming-mouseless"&gt;
  &lt;/a&gt;
  Becoming Mouseless
&lt;/h2&gt;

&lt;p&gt;Do you want to build a &lt;a href="https://themouseless.dev"&gt;Mouseless Development Environment&lt;/a&gt; where the Linux shell and Vim have a central role?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://themouseless.dev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gkZumQAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themouseless.dev/images/small_cover.webp" alt="building your mouseless development environment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Switching between the keyboard and the mouse costs cognitive energy. This book will guide you step by step to set up a Linux-based development environment that keeps your hands on your keyboard.&lt;/p&gt;

&lt;p&gt;Take the brain power you've been using to juggle input devices and focus it where it belongs: on what you create.&lt;/p&gt;




</description>
      <category>vim</category>
      <category>terminal</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Elevate your Git-fu!</title>
      <author>Abhay Krishna Arunachalam</author>
      <pubDate>Sun, 11 Jul 2021 09:08:36 +0000</pubDate>
      <link>https://dev.to/abhaykrishna/elevate-your-git-fu-3ip4</link>
      <guid>https://dev.to/abhaykrishna/elevate-your-git-fu-3ip4</guid>
      <description>&lt;p&gt;If I had a dollar for every time I looked up &lt;em&gt;how to ... in Git&lt;/em&gt;, I would have enough to launch a new cryptocurrency of my own (dibs on the name Gitcoin™️ 😛). As developers, we use Git almost everyday, and most of us find ourselves experiencing &lt;em&gt;dèjà vu&lt;/em&gt; with some common scenarios when working with Git. This blog discusses how to easily navigate your way through such scenarios using the Git command-line interface. It also covers some neat Git tricks along the way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#turning-off-git-command-pagination"&gt;
  &lt;/a&gt;
  Turning off git command pagination
&lt;/h2&gt;

&lt;p&gt;Git commands like &lt;code&gt;git diff&lt;/code&gt; and &lt;code&gt;git log&lt;/code&gt; can print large amounts of text to standard output and are hence paginated by default, requiring user input for navigation and exit. This doesn't lend itself well to automation/scripting, where we want to avoid user interaction. To turn off pagination, we can use the &lt;code&gt;--no-pager&lt;/code&gt; flag with Git.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git &lt;span class="nt"&gt;--no-pager&lt;/span&gt; log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#removing-files-mistakenly-added-to-commit"&gt;
  &lt;/a&gt;
  Removing files mistakenly added to commit
&lt;/h2&gt;

&lt;p&gt;Many times, we may inadvertently commit the wrong file(s), and checking the &lt;code&gt;git status&lt;/code&gt; doesn't help since there are no hint commands displayed as would be before committing. In this situation, we can use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git restore &lt;span class="nt"&gt;--source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;HEAD~ &lt;span class="nt"&gt;--staged&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to bring a file back into the staging area.&lt;/p&gt;

&lt;p&gt;If you are unsure of the filenames and would prefer to move all files back into the staging area, then&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git reset &lt;span class="nt"&gt;--soft&lt;/span&gt; HEAD~
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will be your best friend.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#checking-the-current-commit-hash"&gt;
  &lt;/a&gt;
  Checking the current commit hash
&lt;/h2&gt;

&lt;p&gt;I personally require this all the time to navigate back and forth between commits. Every commit has a SHA-1 hash composed of few of the commit's properties such as the date, author/committer, commit message, etc. You can get the current commit SHA using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git rev-parse HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#git-committer-statistics"&gt;
  &lt;/a&gt;
  Git committer statistics
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;git shortlog&lt;/code&gt; command can be used to aggregate commits by author and title. This is especially useful for release announcements. It even provides a summary of commits by count. &lt;/p&gt;

&lt;p&gt;For example, commit count summaries in the &lt;a href="https://github.com/aws/eks-distro-prow-jobs"&gt;aws/eks-distro-prow-jobs&lt;/a&gt; repository are as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git shortlog &lt;span class="nt"&gt;-sn&lt;/span&gt;
    62  EKS Distro Bot
    31  Abhay Krishna
    29  EKS Distro PR Bot
    27  Abhay Krishna Arunachalam
    23  &lt;span class="o"&gt;[&lt;/span&gt;REDACTED]
    15  &lt;span class="o"&gt;[&lt;/span&gt;REDACTED]
              &lt;span class="nb"&gt;.&lt;/span&gt;
              &lt;span class="nb"&gt;.&lt;/span&gt;
              &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#committing-without-editing-message"&gt;
  &lt;/a&gt;
  Committing without editing message
&lt;/h2&gt;

&lt;p&gt;Sometimes, we may need to make minor changes to files that have already been committed. Once the files have been updated and &lt;code&gt;git add&lt;/code&gt;ed, we need to commit the new changes, but we probably want to retain the same commit message.&lt;/p&gt;

&lt;p&gt;We can do that with the help of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;--amend&lt;/span&gt; &lt;span class="nt"&gt;--no-edit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;--amend&lt;/span&gt; &lt;span class="nt"&gt;-C&lt;/span&gt; HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I find myself using this a lot so I have configured the following Git alias, which is short for &lt;strong&gt;c&lt;/strong&gt;ommit &lt;strong&gt;w&lt;/strong&gt;ithout &lt;strong&gt;a&lt;/strong&gt;mend.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config alias.cwa &lt;span class="s1"&gt;'commit --amend --no-edit'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#reordering-unmerged-commits"&gt;
  &lt;/a&gt;
  Reordering unmerged commits
&lt;/h2&gt;

&lt;p&gt;In a software company, more often than not, you may be working on multiple features or modules at the same time. In some cases, you may want a more recent feature change to get reviewed first and merged before other changes, for several reasons like coherence, priority, etc. In such cases, we can re-order commits as follows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get the list of all commits with their hashes
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git log &lt;span class="nt"&gt;--oneline&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Identify the depth of the commit range you want to reorder with respect to the HEAD commit.&lt;/li&gt;
&lt;li&gt;Perform interactive rebase on the branch.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git rebase &lt;span class="nt"&gt;-i&lt;/span&gt; HEAD~n &lt;span class="c"&gt;# n is the depth from the previous step&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;     This will open an editor with the commits in the range specified, along with      prompts on how to edit the history.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once you have saved and exited the editor, you can repeat step 1 to view the re-ordered commit history.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; After changing history and before pushing to a remote branch, it's important to rebase on top of the remote head to validate that the re-ordering does not cause conflicts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git fetch upstream
git rebase upstream/main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#recovering-lost-changes"&gt;
  &lt;/a&gt;
  Recovering lost changes
&lt;/h2&gt;

&lt;p&gt;If you are in a situation where you wrote hundreds of lines of code and then end up losing them due to some conspiracy of the universe, then this one command can save the day. That command is &lt;code&gt;git reflog&lt;/code&gt; (read &lt;em&gt;ref-log&lt;/em&gt; and not &lt;em&gt;re-flog&lt;/em&gt;, though I get why one might think they can expect Git to co-operate by repeatedly flogging it for all the torture 😤).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reflog&lt;/code&gt; gives you an entire history of all the changes and actions you made across all branches in the local repository. The entries in the log are called &lt;em&gt;reference logs&lt;/em&gt;, and they record when the tips of branches and other references were updated in the local Git working tree. Each entry is marked with an index number which can be used to move forward and backward through history.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;reflog&lt;/code&gt; has several use-cases such as retrieving lost/deleted commits, reverting breaking changes, identifying divergent paths, etc.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#viewing-git-help-on-the-browser"&gt;
  &lt;/a&gt;
  Viewing Git help on the browser
&lt;/h2&gt;

&lt;p&gt;The manual pages for Git command help open in the terminal by default. Perusing man-pages can be a cumbersome task and they are also not user-friendly when searching for information (unless your Vim-fu is on point). If you would prefer to look up a command's manual page on the browser, all you need to do is use the &lt;code&gt;-w&lt;/code&gt; or &lt;code&gt;--web&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;For example, the man-page for &lt;code&gt;git branch&lt;/code&gt; can be opened on the default browser (configurable) using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git &lt;span class="nb"&gt;help &lt;/span&gt;log &lt;span class="nt"&gt;-w&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git log &lt;span class="nt"&gt;--help&lt;/span&gt; &lt;span class="nt"&gt;-w&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#getting-affected-filenames"&gt;
  &lt;/a&gt;
  Getting affected filenames
&lt;/h2&gt;

&lt;p&gt;Commands like &lt;code&gt;git diff&lt;/code&gt; and &lt;code&gt;git show&lt;/code&gt; work beautifully for displaying all the changes that are yet to be and have been committed, respectively. But in some cases, we may only require the names of files affected by a Git operation (for example, for scripting or filtering). We can directly obtain just the names by passing the following flags to the command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git diff &lt;span class="nt"&gt;--pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"format:"&lt;/span&gt; &lt;span class="nt"&gt;--name-only&lt;/span&gt;
git show &lt;span class="nt"&gt;--pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"format:"&lt;/span&gt; &lt;span class="nt"&gt;--name-only&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see all files added to the staging area, we can use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git diff &lt;span class="nt"&gt;--staged&lt;/span&gt; &lt;span class="nt"&gt;--pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"format:"&lt;/span&gt; &lt;span class="nt"&gt;--name-only&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Filtering based on file extensions is also supported. For example, to get the list of all Python files in the latest commit, we can use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git show &lt;span class="nt"&gt;--pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"format:"&lt;/span&gt; &lt;span class="nt"&gt;--name-only&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="s2"&gt;"*.py"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;That brings us to the end of this blog. Thank you all for giving it a read! As closing notes, I wish to point out that Git is flexible in that it gives you several different techniques to fix a single problem, and the above methods are just from my experience and not advocated as canon. Feel free to leave your comments and corrections, and do reach out to me on &lt;a href="https://www.linkedin.com/in/abhayk96/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://twitter.com/abhay_krishna96"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>git</category>
      <category>devops</category>
      <category>github</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Nodejs Express in AWS Lambda via SAM</title>
      <author>Paul</author>
      <pubDate>Sun, 11 Jul 2021 08:26:04 +0000</pubDate>
      <link>https://dev.to/paul_k/nodejs-express-in-aws-lambda-via-sam-1a5</link>
      <guid>https://dev.to/paul_k/nodejs-express-in-aws-lambda-via-sam-1a5</guid>
      <description>&lt;p&gt;I like NodeJS and Express it's handy, easy to use and light weight.  I have used this at work and in personal projects even though I tend to choose Python and Flask these days.  What I like about express is that I can host my Frontend ( and SSR content ) and API in the same project.  If I am building a PoC or a small site/application this make perfect sense.&lt;/p&gt;

&lt;p&gt;A year or so ago as I was building out a lab for the local &lt;a href="https://www.meetup.com/Melbourne-AWS-Programming-and-Tools-Meetup/"&gt;"AWS Programming and Tools"&lt;/a&gt; Meetup I built a small demo using localstack and Dynamo.  A team that is building an adaption of &lt;a href="http://scrumblr.ca/"&gt;Scrumbler&lt;/a&gt; Where having some issues so I whipped up a quick example of Express, wrapped up into a SAM template and deployed to AWS Lambda.&lt;/p&gt;

&lt;p&gt;The set this up simply I have used &lt;a href="https://www.npmjs.com/package/@vendia/serverless-express"&gt;@vendia/serverless-express&lt;/a&gt; as a wrapper/proxy for lambda.  In this way I can develop locally with hot reloading and push the same code without change to Lambda.&lt;/p&gt;

&lt;p&gt;There are 2 entry points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Local (app.local.js)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`listening on http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lambda.js
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serverlessExpress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vendia/serverless-express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;serverlessExpress&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then of course the application itself.  This application is simple and small and is all in one file ( app.js )&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;FruitBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;//Static content ie images&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/static&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;static&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;view engine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ejs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;views&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;views&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;fruitBox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FruitBox&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;fruitBox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FruitBox&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/ping&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;incomming&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ping &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;resonse&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pong &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/fruitbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;FruitBox&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/fruitbox/:item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;FruitBox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;


&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/fruitbox&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fruitName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;qty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;qty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fruitName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;qty&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;qty&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;FruitBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;FruitBox&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;errorMessage&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ensure your POST body contains both a fruitName and a qty and content type is application/json &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The full repo can be seen &lt;a href="https://github.com/kukielp/aws-sam-nodejs-express"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll now explain how this comes together....tbc&lt;/p&gt;

</description>
      <category>aws</category>
      <category>node</category>
      <category>serverless</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Class Components vs Functional Components in React</title>
      <author>Megan Lo</author>
      <pubDate>Sun, 11 Jul 2021 08:19:43 +0000</pubDate>
      <link>https://dev.to/mehmehmehlol/class-components-vs-functional-components-in-react-4hd3</link>
      <guid>https://dev.to/mehmehmehlol/class-components-vs-functional-components-in-react-4hd3</guid>
      <description>&lt;p&gt;Disclaimer: This article is not about which components are better, but more of a discussion on the differences. &lt;/p&gt;

&lt;p&gt;When I started learning React with my bootcamp, we mainly focused on using class components -- if there is initial state, and presentational components if we are just grabbing props. I heard of functional components, but never felt comfortable using it until I started learning Hooks (Remember you can only use Hooks in functional components, not class components).&lt;/p&gt;

&lt;p&gt;Let's break down the syntax difference in each of these components!&lt;/p&gt;




&lt;h2&gt;Difference 1: Rendering JSX&lt;/h2&gt;

&lt;h3&gt;🕹 Syntax 🕹&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Class Component (without ES6 destructuring)&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Functional Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;🍳 Breakdown 🍳&lt;/h3&gt;

&lt;p&gt;As you can see above, there are a couple obvious differences in functional component: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We don't need to extend a component &lt;/li&gt;
&lt;li&gt;We also don't need to use the &lt;code&gt;render&lt;/code&gt; keyword. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: Why do we need to extend the &lt;code&gt;React.Component&lt;/code&gt; class in class component?&lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;: In React, by extending the &lt;code&gt;React.Component&lt;/code&gt; class, it allows us to pass props to a user defined class/component and inherit methods from &lt;code&gt;React.Component&lt;/code&gt; class, like the lifecycle methods (&lt;code&gt;componentDidMount&lt;/code&gt;, &lt;code&gt;componentDidUpdate&lt;/code&gt;, &lt;code&gt;componentWillUnmount&lt;/code&gt;, &lt;code&gt;render&lt;/code&gt;) and &lt;code&gt;setState&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;📝 Note 📝&lt;/h3&gt;

&lt;p&gt;In case you don't know, &lt;code&gt;render&lt;/code&gt; is one of the lifecycle methods and the only required method in a class component. It would examine &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; and return types like React elements (JSX), array and fragments, etc. Do not expect it will modify component state! &lt;/p&gt;

&lt;p&gt;The React documentation has a very precise and clear explanation on the &lt;code&gt;render&lt;/code&gt; method, as well as the rest of the lifecycle methods. &lt;a href="https://reactjs.org/docs/react-component.html#render"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;⭐️ Additional Note ⭐️&lt;/h3&gt;

&lt;p&gt;Here's a rule of thumb 👍🏻: &lt;br&gt;
If you only have the render method in your class component, use functional component (which is referred as stateless component sometimes) instead. In functional component, everything defined in the function's body is the render function which returns JSX in the end. &lt;/p&gt;

&lt;p&gt;That's how Hooks comes in place as well. In case you want to make a state change in that functional component, you can easily add it without changing to class component by using &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; for lifecycle methods (will cover that in a bit!).&lt;/p&gt;

&lt;h3&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.javascriptjanuary.com/blog/extending-react"&gt;Extending React&lt;/a&gt; (JavaScript January)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://stackoverflow.com/questions/52585851/why-we-do-extends-react-component-when-creating-the-class-component-in-react"&gt;Why we do extends React.Component when creating the class component in React?&lt;/a&gt; (Stack Overflow)&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;Difference 2: Passing Props&lt;/h2&gt;

&lt;h3&gt;🕹 Syntax 🕹&lt;/h3&gt;

&lt;p&gt;Let's say we have a props &lt;code&gt;name&lt;/code&gt; from this &lt;code&gt;Component&lt;/code&gt;: &lt;br&gt;&lt;code&gt;&amp;lt;ExampleComponent name="Megan" /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Class Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
   &lt;span class="c1"&gt;// or without destructuring, it will look like this:&lt;/span&gt;
   &lt;span class="c1"&gt;// return &amp;lt;h1&amp;gt;Hello, { this.props.name }!&amp;lt;/h1&amp;gt; &lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Functional Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// with destructuring&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// without destructuring&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;🍳 Breakdown 🍳&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;class component&lt;/strong&gt;, since it is a class, we have to use &lt;code&gt;this&lt;/code&gt; to refer to the props, or we can destructure it to get &lt;code&gt;name&lt;/code&gt; inside props. Or if we have multiple props, we can do that too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;occupation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;yo&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;occupation&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As for &lt;strong&gt;functional components&lt;/strong&gt;, we are passing props as an argument of the function. Same as above, if we have mutliple props, we can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// with destructuring&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;occupation&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;yo&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;occupation&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// without destructuring&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;yo&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;occupation&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;Difference 3: Handling and Updating state&lt;/h2&gt;

&lt;p&gt;Before React 16.8 (released in Feb 2019), class component was the only component that can handle state. With the introduction of Hooks and its &lt;code&gt;useState&lt;/code&gt; in React 16.8, we can handle state in functional component! &lt;em&gt;yay!&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;In case you are not familiar with Hooks and wondering what so special about this &lt;em&gt;Hooks&lt;/em&gt; thing, this &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;Intro to Hook&lt;/a&gt; from React documentation explains pretty thoroughly. &lt;/p&gt;

&lt;p&gt;(Off topic: I personally enjoy reading the React documentation because they are able to explain the most technical concepts in a not so robotic and boring tone, really unlike a lot of the documentations I have read. I highly recommend you to spend some time reading the doc!)&lt;/p&gt;

&lt;h3&gt;🕹 Syntax 🕹&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Class Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Megan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// or you can write this without constructor():&lt;/span&gt;
  &lt;span class="c1"&gt;// this.state = {&lt;/span&gt;
  &lt;span class="c1"&gt;//  count: 0,&lt;/span&gt;
  &lt;span class="c1"&gt;//  name: "Megan"&lt;/span&gt;
  &lt;span class="c1"&gt;// };&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, you can write the function inside &lt;code&gt;onClick&lt;/code&gt; event before &lt;code&gt;render()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Megan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// or you can write this without constructor():&lt;/span&gt;
  &lt;span class="c1"&gt;// this.state = {&lt;/span&gt;
  &lt;span class="c1"&gt;//  count: 0,&lt;/span&gt;
  &lt;span class="c1"&gt;//  name: "Megan"&lt;/span&gt;
  &lt;span class="c1"&gt;// };&lt;/span&gt;

  &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;// or &amp;lt;button onClick={() =&amp;gt; this.handleClick()}&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Functional Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// by the way, I don't want to continue this without explanation&lt;/span&gt;
&lt;span class="c1"&gt;// This is the arrow function, in case you are not familiar&lt;/span&gt;
&lt;span class="c1"&gt;// Alternatively, you can also write &lt;/span&gt;
&lt;span class="c1"&gt;// function ExampleComponent()&lt;/span&gt;
&lt;span class="c1"&gt;// They are basically the same thing.&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react;
// ES6 destructure ^ 

const ExampleComponent = () =&amp;gt; {
  const [count, setCount] = useState(0);
  // or without destructuring, this will be React.useState(0)

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;Hello, {this.state.name}&amp;lt;/h1&amp;gt;
      &amp;lt;button onClick={this.handleClick}&amp;gt;
      // or &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;
         Click to add 1
       &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;🍳 Breakdown 🍳&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;class component&lt;/strong&gt;, we can access the value of the state by using &lt;code&gt;this.state&lt;/code&gt; inside JSX and we would use &lt;code&gt;setState&lt;/code&gt; to update the value of the state. You can set the function inside the event or outside of the render() method -- for readability.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;functional component&lt;/strong&gt;, we would use &lt;code&gt;useState&lt;/code&gt; to assign initial state and we would use &lt;code&gt;setCount&lt;/code&gt; (in our example) to update the state. If we want to access the value of the state, we can omit &lt;code&gt;this.state&lt;/code&gt; and call the name of the state instead, in our case, it would just be &lt;code&gt;count&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: What's with the square bracket, like &lt;code&gt;[count, setCount]&lt;/code&gt;? &lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;: The &lt;code&gt;[count, setCount]&lt;/code&gt; syntax is called "array destructuring"!! We are basically making two new variables, in other words,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;countVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;countVariable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;countVariable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This can be quite confusing by accessing with &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; as they have a specific meaning, so React use the "array destructuring" instead. &lt;/p&gt;

&lt;p&gt;This is simply the highlight I got from the React documentation, here's the &lt;a href="https://reactjs.org/docs/hooks-state.html#tip-what-do-square-brackets-mean"&gt;section&lt;/a&gt; where you can read in details!&lt;/p&gt;




&lt;p&gt;Last but not least...&lt;/p&gt;

&lt;h2&gt;Difference 4: Lifecycle Methods&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useEffect&lt;/code&gt; is the combination of &lt;code&gt;componentDidMount&lt;/code&gt;, &lt;code&gt;componentDidUpdate&lt;/code&gt; and &lt;code&gt;componentWillUnmount&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;&lt;code&gt;componentDidMount&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;It is invoked immediately after a component is mounted (Mounting means when an instance of a  component is being created and  inserted into the DOM -- &lt;a href="https://reactjs.org/docs/react-component.html#mounting"&gt;React Doc&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;🕹 Syntax 🕹&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Class Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someUrlHere&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Functional Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someUrlHere&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;🍳 Breakdown 🍳&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;class component&lt;/strong&gt;, &lt;code&gt;componentDidMount&lt;/code&gt; is only called once after the first render.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;functional component&lt;/strong&gt;, we replace &lt;code&gt;componentDidMount&lt;/code&gt; with &lt;code&gt;useEffect&lt;/code&gt;. As we can see there's a &lt;code&gt;[]&lt;/code&gt; in the second argument, we usually would put some state we like to update/change, let's say you want to restart a quiz app. &lt;code&gt;useEffect&lt;/code&gt; will only be called if there's any selected changes. &lt;/p&gt;

&lt;p&gt;In our case right now, since it is an empty array, &lt;code&gt;useEffect&lt;/code&gt; will be called once on mounting, similar to &lt;code&gt;componentDidMount&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you can see in both components, we can set state inside the methods.&lt;/p&gt;

&lt;h3&gt;Further Reading&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you are interested in seeing how useEffect works with fetching data using async/await and axios, here's a great &lt;a href="https://www.robinwieruch.de/react-hooks-fetch-data"&gt;article&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;👩🏻‍💻&lt;strong&gt;Author's Note&lt;/strong&gt;: I am not so sure how to demonstrate the &lt;code&gt;componentDidUpdate()&lt;/code&gt; and &lt;code&gt;useEffect()&lt;/code&gt;. If you are interested, I am attaching this &lt;a href="https://reactjs.org/docs/hooks-effect.html#example-using-classes"&gt;link&lt;/a&gt; from React Doc, this &lt;a href="https://stackoverflow.com/questions/53255951/equivalent-to-componentdidupdate-using-react-hooks"&gt;Stack Overflow post&lt;/a&gt; and &lt;a href="https://dev.to/savagepixie/how-to-mimic-componentdidupdate-with-react-hooks-3j8c"&gt;How to mimic componentDidUpdate() with React Hooks&lt;/a&gt; from another dev.to writer. Based on my quick research, it looks like we may need &lt;code&gt;useRef()&lt;/code&gt; and custom hook, which currently is out of my knowledge range at the moment.👩🏻‍💻 &lt;/p&gt;

&lt;h3&gt;&lt;code&gt;componentWillUnmount&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;It is invoked immediately before a component is unmounted and destroyed. It is usually used for performing any necessary cleanups. One of the most straightforward examples is clear an interval (&lt;code&gt;clearInterval&lt;/code&gt; duh).&lt;/p&gt;

&lt;h3&gt;🕹 Syntax 🕹&lt;/h3&gt;

&lt;p&gt;(Code reference from this &lt;a href="https://stackoverflow.com/questions/49906437/how-to-cancel-a-fetch-on-componentwillunmount"&gt;Stack Overflow post&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Class Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// say we have a mounted function that returns a boolean&lt;/span&gt;
  &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someUrlHere&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;componentWillUnmount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Functional Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isMounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isMounted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;isMounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;🍳 Breakdown 🍳&lt;/h3&gt;

&lt;p&gt;Not so much of a breakdown, but as you can see: &lt;br&gt;
Cool thing about &lt;code&gt;useEffect&lt;/code&gt; is that you can write functions for both mounting and unmounting in the same place. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;componentWillUnmount&lt;/code&gt; is useful when doing cleanups as mentioned above, without that, it can cause severe memory leaks on a bigger project. &lt;/p&gt;




&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As this article is getting longer, I promise I will keep this conclusion section short but short enough to give you room to think about. &lt;/p&gt;

&lt;p&gt;React Hooks are taking over in modern React, as it is created to be more relevant and timeless (according to the React doc). &lt;/p&gt;

&lt;p&gt;From the comparisons above, we can see how functional components are written shorter and simpler, which makes it easier to read, write and test -- because they are just plain JS functions. However, the rendering time and performance in either components do not make a lot of differences. &lt;/p&gt;

&lt;p&gt;I do not necessarily think one is better than the other. A functional programmer may find easier to use functional components, while that applies the same to an object oriented programmer may find easier to use class components. &lt;/p&gt;

&lt;p&gt;As I mentioned in the introduction, I started with class components and I am currently in the transition of using functional components, as I like React Hooks a lot and I feel like I can do a lot more with it, but I still feel more comfortable to use the lifecycle methods in class component. &lt;/p&gt;

&lt;p&gt;There are a lot of discussions out there which one is better than which and why one prefer over the other. Let me know what you think and let's start a discussion down below!&lt;/p&gt;




&lt;h2&gt;Further Readings&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://medium.com/@yassimortensen/container-vs-presentational-components-in-react-8eea956e1cea"&gt;Container vs Presentational Components in React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flatlogic.com/blog/functional-components-vs-class-components-in-react-js/"&gt;Functional Components Vs. Class Components In React.Js&lt;/a&gt; -&amp;gt; they got more in-depth and did some performance test&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.twilio.com/blog/react-choose-functional-components"&gt;Understanding Functional Components vs. Class Components in React&lt;/a&gt; -&amp;gt; codepen examples &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;Introducing Hooks&lt;/a&gt; (React Documentation) -&amp;gt; as you may have noticed, I have quoted from React documentation so many times in this article. I promise you you will find the documentation super helpful and also since React is a front-end framework, let's all agree that the design of the documentation makes it more fun to read... hehe...&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Connect Java with Mysql Database | Java JDBC</title>
      <author>Arjun Codes</author>
      <pubDate>Sun, 11 Jul 2021 08:11:35 +0000</pubDate>
      <link>https://dev.to/arjuncodes/connect-java-with-mysql-database-java-jdbc-3d6b</link>
      <guid>https://dev.to/arjuncodes/connect-java-with-mysql-database-java-jdbc-3d6b</guid>
      <description>&lt;p&gt;To connect Java application with MySQL database using Java JDBC, we follow 5 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Register the Driver class&lt;/li&gt;
&lt;li&gt;Create connection &lt;/li&gt;
&lt;li&gt;Create statement &lt;/li&gt;
&lt;li&gt;Execute queries&lt;/li&gt;
&lt;li&gt;Close connection &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Go through this video for detailed explanation :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/AHFBPxWebFQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>java</category>
      <category>jdbc</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
