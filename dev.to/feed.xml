<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>🚀 Flutter CI/CD using Git Tags in 5 minutes</title>
      <author>Julien</author>
      <pubDate>Fri, 14 May 2021 09:50:20 +0000</pubDate>
      <link>https://dev.to/monisnap/flutter-ci-cd-using-git-tags-in-5-minutes-5bb1</link>
      <guid>https://dev.to/monisnap/flutter-ci-cd-using-git-tags-in-5-minutes-5bb1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-you-need"&gt;What you will need&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-you-do"&gt;What you will do&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-1"&gt;Step 1: Deployment script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2"&gt;Step 2: Git push with tag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-you-will-need"&gt;
  &lt;/a&gt;
  What you will need &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;📲 A Flutter app (obviously)&lt;/li&gt;
&lt;li&gt;📦 A Github, Gitlab or Bitbucket account&lt;/li&gt;
&lt;li&gt;✨ A &lt;a href="https://codemagic.io/start/"&gt;Codemagic&lt;/a&gt; account (linked to your app repository)&lt;/li&gt;
&lt;li&gt;😁 Your best smile&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-you-will-do"&gt;
  &lt;/a&gt;
  What you will do &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dcJWMguN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a378jsuikoj6q03ilil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dcJWMguN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a378jsuikoj6q03ilil.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You will create a git tag containing your new app version, then push it to your repository. It will automatically trigger a Codemagic build, and release your app on the Play Store 🚀&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-a-deployment-script-%F0%9F%9B%A0"&gt;
  &lt;/a&gt;
  Step 1: Create a deployment script 🛠 &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Below you'll find code to configure the CI/CD. You just have to add it to the root of your repository in a file named &lt;strong&gt;codemagic.yaml&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;I've used a script instead of the workflow editor (Codemagic GUI) for multiple reasons (versioned, faster...) but mainly because the version handling isn't possible using the editor.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# codemagic.yaml&lt;/span&gt;

&lt;span class="c1"&gt;# ... &amp;lt;- Here you will include the "reusable" parts that are described afterward&lt;/span&gt;

&lt;span class="na"&gt;workflows&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;play-store&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Play Store Release&lt;/span&gt;
    &lt;span class="na"&gt;max_build_duration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
    &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*caching&lt;/span&gt;

    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;flutter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*flutter_version&lt;/span&gt;
      &lt;span class="na"&gt;xcode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;latest&lt;/span&gt;
      &lt;span class="na"&gt;cocoapods&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt;
      &lt;span class="na"&gt;vars&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*gcp_service_credentials&lt;/span&gt;
        &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*keystore_release&lt;/span&gt;

    &lt;span class="c1"&gt;# ! THE IMPORTANT PART IS HERE !&lt;/span&gt;
    &lt;span class="na"&gt;triggering&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;tag&lt;/span&gt;
      &lt;span class="na"&gt;branch_patterns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;master"&lt;/span&gt;
          &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;tag_patterns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
          &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

    &lt;span class="na"&gt;scripts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;*android_key_properties_setup&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;*flutter_android_properties_setup&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;*flutter_pub_get&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;*flutter_test&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;*flutter_build_play_store_release&lt;/span&gt;

    &lt;span class="na"&gt;artifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;      
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;build/**/outputs/**/*.aab&lt;/span&gt;

    &lt;span class="na"&gt;publishing&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;google_play&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*play_console_credentials&lt;/span&gt;
        &lt;span class="na"&gt;track&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alpha&lt;/span&gt;
        &lt;span class="na"&gt;in_app_update_priority&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0&lt;/span&gt;      
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next are the reusable parts, to be clean and not repeat yourself ✨. Replace the encrypted variables using your credentials and the &lt;a href="https://docs.codemagic.io/building/encrypting/"&gt;Codemagic encrypting tool&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# codemagic.yaml&lt;/span&gt;

&lt;span class="na"&gt;reusable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;flutter_version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;flutter_version&lt;/span&gt; &lt;span class="s"&gt;1.22.6&lt;/span&gt;

  &lt;span class="na"&gt;environment-variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;keystore_release&lt;/span&gt;
      &lt;span class="na"&gt;FCI_KEYSTORE_PATH&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/tmp/keystore.keystore&lt;/span&gt;
      &lt;span class="na"&gt;FCI_KEYSTORE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;
      &lt;span class="na"&gt;FCI_KEYSTORE_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;
      &lt;span class="na"&gt;FCI_KEY_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;
      &lt;span class="na"&gt;FCI_KEY_ALIAS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;gcp_service_credentials&lt;/span&gt;
      &lt;span class="na"&gt;GCLOUD_SERVICE_ACCOUNT_CREDENTIALS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;      

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;play_console_credentials&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;

  &lt;span class="na"&gt;scripts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;android_key_properties_setup&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Android - Setup key.properties&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;echo $FCI_KEYSTORE | base64 --decode &amp;gt; $FCI_KEYSTORE_PATH&lt;/span&gt;
        &lt;span class="s"&gt;cat &amp;gt;&amp;gt; "$FCI_BUILD_DIR/android/key.properties" &amp;lt;&amp;lt;EOF&lt;/span&gt;
        &lt;span class="s"&gt;storePassword=$FCI_KEYSTORE_PASSWORD&lt;/span&gt;
        &lt;span class="s"&gt;keyPassword=$FCI_KEY_PASSWORD&lt;/span&gt;
        &lt;span class="s"&gt;keyAlias=$FCI_KEY_ALIAS&lt;/span&gt;
        &lt;span class="s"&gt;storeFile=/tmp/keystore.keystore&lt;/span&gt;
        &lt;span class="s"&gt;EOF&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;flutter_android_properties_setup&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Flutter x Android - Setup local.properties&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "flutter.sdk=$HOME/programs/flutter" &amp;gt; "$FCI_BUILD_DIR/android/local.properties"&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;flutter_pub_get&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Flutter - Get dependencies&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;flutter packages pub get&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;flutter_test&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Flutter - Run tests&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;flutter test --machine&lt;/span&gt;

    &lt;span class="c1"&gt;# ! THE IMPORTANT PART IS HERE !&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;flutter_build_play_store_release&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build AAB for Play Store release&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;GCLOUD_SERVICE_ACCOUNT_CREDENTIALS=$(echo $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS | base64 --decode)&lt;/span&gt;
        &lt;span class="s"&gt;NEW_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name 'com.company.example') + 1))&lt;/span&gt;
        &lt;span class="s"&gt;NEW_VERSION_NAME=$(git describe --tags)&lt;/span&gt;

        &lt;span class="s"&gt;echo $NEW_VERSION_NAME&lt;/span&gt;
        &lt;span class="s"&gt;echo $NEW_BUILD_NUMBER&lt;/span&gt;

        &lt;span class="s"&gt;flutter build appbundle --build-name=$NEW_VERSION_NAME --build-number=$NEW_BUILD_NUMBER  --obfuscate --split-debug-info=$FCI_BUILD_DIR/debug_files&lt;/span&gt;

  &lt;span class="na"&gt;caching&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;caching&lt;/span&gt;
    &lt;span class="na"&gt;cache_paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;$HOME/.gradle/caches&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;$FLUTTER_ROOT/.pub-cache&lt;/span&gt;

&lt;span class="c1"&gt;# ... &amp;lt;- The workflow part described before should be here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the previous script, the &lt;strong&gt;"flutter_build_play_store_release"&lt;/strong&gt; script handle the versioning :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Version&lt;/strong&gt; is retrieved from the tag.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build number&lt;/strong&gt; is retrieved from the play console (fetching the highest build number, and incrementing it for this release).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Don't forget to replace &lt;strong&gt;com.company.example&lt;/strong&gt; with your app package name&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can now push this script onto your repository. It should then be visible from Codemagic and you should be able to trigger it manually.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-add-git-tag-gt-push-it"&gt;
  &lt;/a&gt;
  Step 2: Add git tag 🔖 -&amp;gt; push it 🚀 &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Creating a git tag is very easy. We will use 1.0.0 as our version, and tag.&lt;br&gt;
You just have to run the following commands :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git tag &lt;span class="nt"&gt;-a&lt;/span&gt; 1.0.0 &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Release 1.0.0"&lt;/span&gt;
git push origin 1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! You should see a build running in Codemagic 🏄‍♂️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h3&gt;

&lt;p&gt;You can add as many workflows as you want using Codemagic! You can use the GUI editor, and then extract to code to have more control over the code. &lt;/p&gt;

&lt;p&gt;Here we deploy on Alpha, so you can change to Production when you feel ready. And then, you can add an iOS workflow with mostly the same code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leave a comment, a like or even a unicorn 🦄 if you've achieved this tutorial! 🚀🔖&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>git</category>
      <category>codemagic</category>
      <category>android</category>
    </item>
    <item>
      <title>JS interview in 2 minutes / Currying 🥘</title>
      <author>Nikita Kozlov</author>
      <pubDate>Fri, 14 May 2021 09:21:47 +0000</pubDate>
      <link>https://dev.to/kozlovzxc/js-interview-in-2-minutes-currying-2hko</link>
      <guid>https://dev.to/kozlovzxc/js-interview-in-2-minutes-currying-2hko</guid>
      <description>&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;br&gt;
What is currying in JavaScript?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick answer:&lt;/strong&gt;&lt;br&gt;
It is a technique used to convert a function that takes multiple arguments into a chain of functions where every only takes one argument.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Longer answer:&lt;/strong&gt;&lt;br&gt;
Currying is basically all about &lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-higher-order-functions-38kb"&gt;Higher Order Functions&lt;/a&gt;. It is an application of JavaScript's ability to return functions from other functions.&lt;/p&gt;

&lt;p&gt;We are replacing a function that takes &lt;code&gt;n&lt;/code&gt; arguments with a set of &lt;code&gt;n&lt;/code&gt; functions, which applied one by one gives exactly the same answer as original functions.&lt;/p&gt;

&lt;p&gt;We can learn it by example right away. Btw it feels like this one is the most common one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// regular implementation&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 7&lt;/span&gt;

&lt;span class="c1"&gt;// curried implementation&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is it. This is what currying is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real-life applications:&lt;/strong&gt;&lt;br&gt;
At first glance, it may look a bit weird 🤯 Why do we ever need to call a function separating arguments?&lt;/p&gt;

&lt;p&gt;You can think of it as a function preparation for execution. If you have some common operation, e.g. getting an object property, you can move it to a curried version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;searchUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// user['id'] can be refactored with&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;getUserId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Or you can go even further and implement generic getter&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pluck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;getUserId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;getUserName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So functions like this can be joined to some helpers library. And here is &lt;a href="https://www.learnrxjs.io/learn-rxjs/operators/transformation/pluck"&gt;RxJS.pluck&lt;/a&gt; and here is &lt;a href="https://ramdajs.com/docs/#pluck"&gt;Ramda.pluck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have a good curry 🥘&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Currying"&gt;wiki/Currying&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other posts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-promise-4fhl"&gt;JS interview in 2 minutes / Promise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-this-3hlm"&gt;JS interview in 2 minutes / this 🤯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-encapsulation-oop-2ico"&gt;JS interview in 2 minutes / Encapsulation (OOP)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Btw, I will post more fun stuff here and on &lt;a href="https://twitter.com/kozlovzxc"&gt;Twitter&lt;/a&gt;. Let's be friends 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>Automatically publish a Flutter Web App on GitHub Pages</title>
      <author>Jan Mewes</author>
      <pubDate>Fri, 14 May 2021 09:14:58 +0000</pubDate>
      <link>https://dev.to/janux_de/automatically-publish-a-flutter-web-app-on-github-pages-3m1f</link>
      <guid>https://dev.to/janux_de/automatically-publish-a-flutter-web-app-on-github-pages-3m1f</guid>
      <description>&lt;p&gt;This blog post describes how to automatically publish a Flutter Web app to GitHub pages after every change in the repository.&lt;/p&gt;

&lt;p&gt;It is assumed that you already know how to create and build a &lt;a href="https://flutter.dev/docs/get-started/web"&gt;Flutter Web app&lt;/a&gt;. Further, it is assumed that your source Flutter source code is located in a Git repository hosted by GitHub. The GitHub Pages feature is available for free on public repositories but requires a paid plan for private repositories.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#publish-to-ghpages-branch"&gt;
  &lt;/a&gt;
  Publish to gh-pages branch
&lt;/h2&gt;

&lt;p&gt;GitHub offers to run a script when there is a change on your branches or a tag was created. This feature is called &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;. In the spirit of the "Don't repeat yourself" principle, GitHub Actions can be grouped into modules. So, in this way, a group of steps can be grouped into one module which can then be used without.&lt;/p&gt;

&lt;p&gt;There is already a GitHub Action available with which the goal of the blog post can be reached:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/deploy-flutter-web-app-to-github-pages"&gt;https://github.com/marketplace/actions/deploy-flutter-web-app-to-github-pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may refer to the &lt;a href="https://github.com/erickzanardo/flutter-gh-pages/blob/main/action.yml"&gt;action.yml&lt;/a&gt; of this GitHub Action to understand what it is doing.&lt;/p&gt;

&lt;p&gt;What you need to do to apply this action is the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a directory ".github/workflows" in your repository&lt;/li&gt;
&lt;li&gt;In the "workflows" directory, create a &lt;a href="https://www.cloudbees.com/blog/yaml-tutorial-everything-you-need-get-started/"&gt;YAML&lt;/a&gt; file, e.g . "publish.yaml"
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Publish to GitHub Pages&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;subosito/flutter-action@v1&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;erickzanardo/flutter-gh-pages@v3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells GitHub to trigger this action whenever it sees a new change on the "main" branch. Then it creates a new Ubuntu VM on which the action will run. The first actual step will be the checkout of your repository. Then it installs Flutter on the VM. Finally, it builds the web app, creates a "gh-pages" branch in your repository, and commits the web app there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enable-github-pages"&gt;
  &lt;/a&gt;
  Enable GitHub Pages
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; is another feature of GitHub. It provides you a web server for static HTML files and a subdomain. The way to publish a website there is to enable the feature for a repository and then to tell it where to look for the files. Any branch can be the source of the website, and in this branch, you can choose whether you want to place the website in the repository root ("/") or in the "/docs" directory.&lt;/p&gt;

&lt;p&gt;Go to the "Pages" settings, select the "gh-pages" branch as the source, keep the directory root, and then click on "Save".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XkyA5Wf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdzhhuulhfdjybwg1soi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XkyA5Wf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdzhhuulhfdjybwg1soi.gif" alt="Enable GitHub Pages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The URL at which your website will be published is displayed in the banner above the source configuration. Mind that the initial rendering of the website may take a while. Afterwards, published updates will be available within 1-10 minutes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#change-base-url"&gt;
  &lt;/a&gt;
  Change base URL
&lt;/h2&gt;

&lt;p&gt;If you are not using a custom domain for your GitHub Pages, then, by default, your URL will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ksch-workflows.github.io/registration-desk"&gt;https://ksch-workflows.github.io/registration-desk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first part of the URL is the owner of the repository which can be an organization or a personal account. In this example, the owner is the organization "ksch-workflows". The domain of the URL is "github.io". Then after the domain is the resource path with the repository name. In this example, it is "registration-desk".&lt;/p&gt;

&lt;p&gt;So, the "index.html" file of the website will be available under the following URL:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ksch-workflows.github.io/registration-desk/index.html"&gt;https://ksch-workflows.github.io/registration-desk/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem with this is that the Flutter app, by default, assumes that it is located directly under the domain, not under a resource path. So, it assumes that the "index.html" file of the website will be available under a URL like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ksch-workflows.github.io/index.html"&gt;https://ksch-workflows.github.io/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result of this is that links to the root of the website will lead to "&lt;a href="https://ksch-workflows.github.io/"&gt;https://ksch-workflows.github.io/&lt;/a&gt;", not to "&lt;a href="https://ksch-workflows.github.io/registration-desk"&gt;https://ksch-workflows.github.io/registration-desk&lt;/a&gt;". So, when the page tries to load the "main.dart.js" file which will render the page, then it tries to get it from "&lt;a href="https://ksch-workflows.github.io/main.dart.js"&gt;https://ksch-workflows.github.io/main.dart.js&lt;/a&gt;" which will yield a 404 Not Found error. The result of this is that you would see an empty page on the attempt to open "&lt;a href="https://ksch-workflows.github.io/registration-desk"&gt;https://ksch-workflows.github.io/registration-desk&lt;/a&gt;" in a browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WGZNEIHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlucju1a4vbuejl3k9cf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WGZNEIHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlucju1a4vbuejl3k9cf.png" alt="404 Not Found"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The solution for this is to change the base URL on the start page of the Flutter app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;diff --git a/web/index.html b/web/index.html
index fd7cfeb..7c588d9 100644
-------- a/web/index.html
+++ b/web/index.html
@@ -11,7 +11,7 @@
     Fore more details:
     * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base
   --&amp;gt;
-  &amp;lt;base href="/"&amp;gt;
+  &amp;lt;base href="/registration-desk/"&amp;gt;

   &amp;lt;meta charset="UTF-8"&amp;gt;
   &amp;lt;meta content="IE=Edge" http-equiv="X-UA-Compatible"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;"Trans Canada Keystone Oil Pipeline" by shannonpatrick17 is licensed with CC BY 2.0. To view a copy of this license, visit &lt;a href="https://creativecommons.org/licenses/by/2.0/"&gt;https://creativecommons.org/licenses/by/2.0/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>github</category>
    </item>
    <item>
      <title>I made a Twitter Clone with VueJS and Go</title>
      <author>Juan Christian</author>
      <pubDate>Fri, 14 May 2021 08:55:30 +0000</pubDate>
      <link>https://dev.to/hotpotatoc/i-made-a-twitter-clone-with-vuejs-and-go-59jf</link>
      <guid>https://dev.to/hotpotatoc/i-made-a-twitter-clone-with-vuejs-and-go-59jf</guid>
      <description>&lt;p&gt;Hello DEV community! 👋&lt;/p&gt;

&lt;p&gt;I've recently attempted to make a clone of Twitter using VueJS as its frontend and Golang as its backend server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JxeUXo-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ts1k9b9b00x0qlx4xmfe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JxeUXo-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ts1k9b9b00x0qlx4xmfe.jpg" alt="twitter clone profile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CifyeFtu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbgvujwsj162ra7tqls5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CifyeFtu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbgvujwsj162ra7tqls5.jpg" alt="twitter clone status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check the github repository here for the source code:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/HotPotatoC"&gt;
        HotPotatoC
      &lt;/a&gt; / &lt;a href="https://github.com/HotPotatoC/twitter-clone"&gt;
        twitter-clone
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Twitter Clone developed using Go + Vue 3 + Vite + TailwindCSS + PostgreSQL + Redis
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;br&gt;
&lt;p&gt;
  &lt;a href="https://github.com/HotPotatoC/heiver"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JDxmhGW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/HotPotatoC/twitter-clone/master/.github/assets/Twitter-clone.png" alt="Logo"&gt;
  &lt;/a&gt;
  &lt;/p&gt;
&lt;h3&gt;
Twitter Clone&lt;/h3&gt;
  &lt;p&gt;A Twitter clone created with Golang, PostgreSQL, Redis, VueJS and Vite with support for dark mode and light mode using TailwindCSS
  &lt;/p&gt;
  &lt;p&gt;Status: Some features are yet to be implemented&lt;/p&gt;

&lt;h1&gt;
Preview&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/HotPotatoC/twitter-clone/master/.github/assets/twitterclone.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MnVnneSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/HotPotatoC/twitter-clone/master/.github/assets/twitterclone.gif" alt="preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For more check out some screenshots &lt;a href="https://raw.githubusercontent.com/HotPotatoC/twitter-clone/master/SCREENSHOTS.md"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;
Features ✨
&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: Not all features from twitter are implemented because of how big Twitter is, Only the main features are implemented atm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Modular Architecture&lt;/li&gt;
&lt;li&gt;Database migration tool using &lt;a href="https://github.com/golang-migrate/migrate"&gt;migrate&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Golang Hot-reloading using &lt;a href="https://github.com/cosmtrek/air"&gt;air&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Supports dark-mode and light-mode with &lt;a href="http://tailwindcs.com/" rel="nofollow"&gt;TailwindCSS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Database seeding script using NodeJS&lt;/li&gt;
&lt;li&gt;Authentication using JWT Refresh token flow and Redis for token blacklisting&lt;/li&gt;
&lt;li&gt;Strongly typed Vuex store&lt;/li&gt;
&lt;li&gt;List Tweets feed&lt;/li&gt;
&lt;li&gt;Create Tweets with images&lt;/li&gt;
&lt;li&gt;Retweets&lt;/li&gt;
&lt;li&gt;Reply to Tweets or reply to another reply!&lt;/li&gt;
&lt;li&gt;Like Tweets&lt;/li&gt;
&lt;li&gt;Follow users&lt;/li&gt;
&lt;li&gt;Images &amp;amp; Media uploads stored in AWS S3 Buckets&lt;/li&gt;
&lt;li&gt;Up to 4 images in a single tweet with the same layout as Twitter&lt;/li&gt;
&lt;li&gt;Crop profile image&lt;/li&gt;
&lt;li&gt;Edit Profile Details&lt;/li&gt;
&lt;li&gt;Edit Profile…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/HotPotatoC/twitter-clone"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Please note that some features are yet to be implemented and i would love to hear your feedback!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>go</category>
    </item>
    <item>
      <title>Solution: Flatten Binary Tree to Linked List</title>
      <author>seanpgallivan</author>
      <pubDate>Fri, 14 May 2021 08:49:02 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-flatten-binary-tree-to-linked-list-599p</link>
      <guid>https://dev.to/seanpgallivan/solution-flatten-binary-tree-to-linked-list-599p</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/flatten-binary-tree-to-linked-list/discuss/1207642"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-114-medium-flatten-binary-tree-to-linked-list"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/flatten-binary-tree-to-linked-list/"&gt;Leetcode Problem #114 (&lt;em&gt;Medium&lt;/em&gt;): Flatten Binary Tree to Linked List&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given the &lt;code&gt;root&lt;/code&gt; of a binary tree, flatten the tree into a "linked list":&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; The "linked list" should use the same &lt;code&gt;TreeNode&lt;/code&gt; class where the &lt;code&gt;right&lt;/code&gt; child pointer points to the next node in the list and the &lt;code&gt;left&lt;/code&gt; child pointer is always &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt; The "linked list" should be in the same order as a &lt;strong&gt;pre-order traversal&lt;/strong&gt; of the binary tree.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;root = [1,2,5,3,4,null,6]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[1,null,2,null,3,null,4,null,5,null,6]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visual:&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4p_h8Sqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg" alt="Example 1 Visual"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;root = []&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;root = [0]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[0]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The number of nodes in the tree is in the range &lt;code&gt;[0, 2000]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-100 &amp;lt;= Node.val &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;O(1) Space Approach:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to properly connect the &lt;strong&gt;linked list&lt;/strong&gt;, we'll need to start at the bottom and work up. This means that we'll need to move in &lt;em&gt;reverse&lt;/em&gt; &lt;strong&gt;pre-order traversal&lt;/strong&gt; order through the &lt;strong&gt;binary tree&lt;/strong&gt;. Since pre-order traversal is normally &lt;strong&gt;"node, left, right"&lt;/strong&gt;, we'll have to move in the reverse order of &lt;strong&gt;"right, left, node"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In order to complete this solution in &lt;strong&gt;O(1) space&lt;/strong&gt;, we won't be able to conveniently backtrack via a &lt;strong&gt;stack&lt;/strong&gt;, so the key to this solution will be to retreat all the way back up to the &lt;strong&gt;root&lt;/strong&gt; each time we reach a leaf. This will push the &lt;strong&gt;time complexity&lt;/strong&gt; to &lt;strong&gt;O(N^2)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We'll want to first set up &lt;strong&gt;head&lt;/strong&gt; and &lt;strong&gt;curr&lt;/strong&gt; to keep track of the head of the linked list we're building and the current node we're visiting. We'll know we're finished once &lt;strong&gt;head = root&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To follow the reverse pre-order traversal order, we'll first attempt to go right and then left. Since we're backtracking to &lt;strong&gt;root&lt;/strong&gt;, however, we'll eventually run back into the same node that we've set as &lt;strong&gt;head&lt;/strong&gt; doing this. To prevent this, we'll stop &lt;em&gt;before&lt;/em&gt; moving to the &lt;strong&gt;head&lt;/strong&gt; node and sever the connection.&lt;/p&gt;

&lt;p&gt;Now that we can't run into already-completed territory, we can be confident that any leaf we move to must be the next value for &lt;strong&gt;head&lt;/strong&gt;, so we should connect it to the old &lt;strong&gt;head&lt;/strong&gt;, update &lt;strong&gt;head&lt;/strong&gt;, and reset back to the &lt;strong&gt;root&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As noted before, once &lt;strong&gt;head = root&lt;/strong&gt;, we've finished our traversal and can exit the function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N^2)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the number of &lt;strong&gt;nodes&lt;/strong&gt; in the binary tree, due to repeated backtracking to root&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(1)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Recursive Approach:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to properly connect the &lt;strong&gt;linked list&lt;/strong&gt;, we'll need to start at the bottom and work up. This means that we'll need to move in &lt;em&gt;reverse&lt;/em&gt; &lt;strong&gt;pre-order traversal&lt;/strong&gt; order through the &lt;strong&gt;binary tree&lt;/strong&gt;. Since pre-order traversal is normally &lt;strong&gt;"node, left, right"&lt;/strong&gt;, we'll have to move in the reverse order of &lt;strong&gt;"right, left, node"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Binary tree traversal is prime ground for a &lt;strong&gt;recursive&lt;/strong&gt; solution, so let's define a helper (&lt;strong&gt;revPreOrder&lt;/strong&gt;) for the purpose. We'll also keep a global variable &lt;strong&gt;head&lt;/strong&gt; to keep track of the head of the linked list as we work our way backwards.&lt;/p&gt;

&lt;p&gt;Per our reverse pre-order traversal approach, we want to recursively work down the right path first then the left path, if they exist. Once we've flattened the left and right paths recursively, &lt;strong&gt;head&lt;/strong&gt; should at this point be equal to the next node after the current one, so we should set it as &lt;strong&gt;node.right&lt;/strong&gt;. We shouldn't forget to set &lt;strong&gt;node.left&lt;/strong&gt; to &lt;strong&gt;null&lt;/strong&gt;, as well.&lt;/p&gt;

&lt;p&gt;Once we're done with the current node, we can update &lt;strong&gt;head&lt;/strong&gt; to &lt;strong&gt;node&lt;/strong&gt; and allow the recursion to complete and move back up to the next layer. Once the recursion stack is exhausted, &lt;strong&gt;head&lt;/strong&gt; will be equal to &lt;strong&gt;root&lt;/strong&gt; again.&lt;/p&gt;

&lt;p&gt;Lastly, we have to deal with an edge case of an empty &lt;strong&gt;root&lt;/strong&gt;, so we can just make sure to only call the initial recursion on &lt;strong&gt;root&lt;/strong&gt; if &lt;strong&gt;root&lt;/strong&gt; actually is a node. There is no need for a &lt;strong&gt;return&lt;/strong&gt; statement, because the test suite will evaluate &lt;strong&gt;root&lt;/strong&gt; directly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the number of &lt;strong&gt;nodes&lt;/strong&gt; in the binary tree&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(N)&lt;/strong&gt; for the &lt;strong&gt;recursion stack&lt;/strong&gt;, which is as long as the maximum depth of the binary tree, which can go up to &lt;strong&gt;N&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-o1-space"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ O(1) Space:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-recursion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Recursion:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;revPreOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-o1-space"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ O(1) Space:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-recursion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Recursion:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-o1-space"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ O(1) Space:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-recursion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Recursion:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;revPreOrder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-o1-space"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ O(1) Space:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;TreeNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-recursion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Recursion:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;private:&lt;/span&gt;
    &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;revPreOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>Exclusive: convert text into image in JavaScript!! (Easy peasy)</title>
      <author>Raghav Yadav</author>
      <pubDate>Fri, 14 May 2021 08:16:24 +0000</pubDate>
      <link>https://dev.to/raghav9official/exclusive-convert-text-into-image-in-javascript-easy-peasy-24lh</link>
      <guid>https://dev.to/raghav9official/exclusive-convert-text-into-image-in-javascript-easy-peasy-24lh</guid>
      <description>&lt;p&gt;Hello guys have you ever wondered how to change text into an image in JavaScript?&lt;/p&gt;

&lt;p&gt;Well in this tutorial I am going to tell you how to do that and this is damn easy:&lt;/p&gt;

&lt;p&gt;I will use hash.JS as a mentioned it in my previous articles...&lt;/p&gt;

&lt;p&gt;Imported by :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://netopa.github.io/hash.js/hashtag_1.0.1.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can do that by a simple command shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#canvas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textToImg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;textToImg!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And he texted is automatically drawn in the Canvas element as a picture !!!&lt;/p&gt;

&lt;p&gt;Just like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t0dpuG2f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wf1w2tze9zs0lhkkhsli.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t0dpuG2f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wf1w2tze9zs0lhkkhsli.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It took me Days to do that so if you enjoyed the article hit the unicorn and the like button!!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>image</category>
      <category>programming</category>
      <category>easyone</category>
    </item>
    <item>
      <title>Let's break down the useState hook.</title>
      <author>Sachin Chaurasiya</author>
      <pubDate>Fri, 14 May 2021 07:58:12 +0000</pubDate>
      <link>https://dev.to/sachinchaurasiya/let-s-break-down-the-usestate-hook-c25</link>
      <guid>https://dev.to/sachinchaurasiya/let-s-break-down-the-usestate-hook-c25</guid>
      <description>&lt;p&gt;Hello Learners,&lt;/p&gt;

&lt;p&gt;Today is the 2ndDay of #8DaysOfReactHook.&lt;br&gt;
In This post will see the breakdown of the useState hook.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-is-usestate-hook"&gt;
  &lt;/a&gt;
  What is useState hook?
&lt;/h1&gt;

&lt;p&gt;useState hook is a special function that lets us manage the state from the functional component.
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#syntax-of-usestate"&gt;
  &lt;/a&gt;
  Syntax of useState
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sO7QFTdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhn4u6djti91sgcat665.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sO7QFTdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhn4u6djti91sgcat665.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-see-an-example"&gt;
  &lt;/a&gt;
  let's see an example
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JjgZfZHR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2pm21niu6eb48rh4410.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JjgZfZHR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2pm21niu6eb48rh4410.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-break-down-the-previous-example"&gt;
  &lt;/a&gt;
  let's break down the previous example
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;first, we have used the useState hook to define the state.&lt;/li&gt;
&lt;li&gt;then we have displayed the state value using JSX.&lt;/li&gt;
&lt;li&gt;on the button, we have added onClick so when we click the button count value will increment by 1.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#how-to-set-state-based-on-previous-state-value"&gt;
  &lt;/a&gt;
  How to set State based on Previous State value.
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--blL9ijhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15cl15o5c20fz6gli3zn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--blL9ijhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15cl15o5c20fz6gli3zn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;in the above example, we have created the clickHandler function and assigned it to the Button onClick.so, when the button is clicked the new count value will be set.&lt;/p&gt;

&lt;p&gt;clickHandler function set the state value using the setCount function. but here we are setting a new state based on the previous state.&lt;/p&gt;

&lt;p&gt;function return by useState hook takes a callback function with the previous state argument and based on that we can set a new value to the state.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#usestate-with-object-as-the-state-value"&gt;
  &lt;/a&gt;
  useState with Object as the State value
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OtNykCZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/css8vx9161sucoc1ztv6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OtNykCZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/css8vx9161sucoc1ztv6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;above code shows the Object as the state value with useState hook.&lt;br&gt;
when we use Object as a state value we need to use spread the value of state(...prevState) because the setState function doesn't persist the state value whenever it changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sachinchaurasiyachotey87@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sachin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;so&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;persist&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here we have used a controlled component by listening to the onChange handler.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#usestate-with-array-as-the-state-value"&gt;
  &lt;/a&gt;
  useState with Array as the State value
&lt;/h1&gt;

&lt;p&gt;The array is the heart of javascript and when it comes to React most of the time we work with Array.  &lt;/p&gt;

&lt;p&gt;Let me give you a better example:&lt;/p&gt;

&lt;p&gt;let say we want to fetch articles from an Endpoint and store them into some variable so that we can render those articles to the webpage.&lt;br&gt;
so, here we will use the Array as a state value and after fetching data we will store the articles to the Array.&lt;/p&gt;

&lt;p&gt;now, if we want to render those articles we will use Array.map()  method to do so.&lt;/p&gt;

&lt;p&gt;If you have Doubt or Suggestions please let me know in the comment section. &lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>No Internet Connection wrapper for React apps</title>
      <author>SagarTrimukhe</author>
      <pubDate>Fri, 14 May 2021 07:36:26 +0000</pubDate>
      <link>https://dev.to/sagartrimukhe/no-internet-connection-wrapper-for-react-apps-5dl8</link>
      <guid>https://dev.to/sagartrimukhe/no-internet-connection-wrapper-for-react-apps-5dl8</guid>
      <description>&lt;p&gt;Imagine, &lt;br&gt;
We have a web application that heavily depends on the backend server for information (eg. records in a table) and that information needs to be constantly updated. We might think to use some polling mechanism.&lt;/p&gt;

&lt;p&gt;But if the data received from the server is directly stored in a React state variable and if the user loses the internet connection then there are chances of updating the state with empty data.&lt;/p&gt;

&lt;p&gt;So, instead of showing empty data, we can show a message, something like "No internet connection." &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-we-do-that"&gt;
  &lt;/a&gt;
  How can we do that?
&lt;/h3&gt;

&lt;p&gt;We can write a wrapper component and wrap the entry-level component. So whenever the internet connection is lost, a custom page/message can be shown.&lt;/p&gt;

&lt;p&gt;Here I have used the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine"&gt;navigator.onLine&lt;/a&gt; API to get the network status.&lt;/p&gt;

&lt;p&gt;enough story, show me the code :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#main-component"&gt;
  &lt;/a&gt;
  Main component
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import './App.css';
import NoInternetConnection from './NoInternetConnection'

function App() {
  return (
    &amp;lt;div className="App"&amp;gt;
        &amp;lt;NoInternetConnection&amp;gt;
        &amp;lt;h1&amp;gt;My first post on DEV!!&amp;lt;/h1&amp;gt;
        &amp;lt;/NoInternetConnection&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#wrapper-component"&gt;
  &lt;/a&gt;
  Wrapper component
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, {useState, useEffect} from 'react';

const NoInternetConnection = (props) =&amp;gt; {
    // state variable holds the state of the internet connection
    const [isOnline, setOnline] = useState(true);

    // On initization set the isOnline state.
    useEffect(()=&amp;gt;{
        setOnline(navigator.onLine)
    },[])

    // event listeners to update the state 
    window.addEventListener('online', () =&amp;gt; {
        setOnline(true)
    });

    window.addEventListener('offline', () =&amp;gt; {
        setOnline(false)
    });

    // if user is online, return the child component else return a custom component
    if(isOnline){
    return(
        props.children
    )
    } else {
        return(&amp;lt;h1&amp;gt;No Interner Connection. Please try again later.&amp;lt;/h1&amp;gt;)
    }
}

export default NoInternetConnection;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the demo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iPdUlvXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uh6vclamb8kg32f8nmte.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iPdUlvXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uh6vclamb8kg32f8nmte.gif" alt="ezgif.com-gif-maker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it. By the way, this is my first post on DEV (damn! on the internet :)). Feedback is appreciated.  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Deno, One Year and Two Hundred Patches Later</title>
      <author>Casper Beyer 🧐</author>
      <pubDate>Fri, 14 May 2021 07:34:21 +0000</pubDate>
      <link>https://dev.to/caspervonb/deno-one-year-and-two-hundred-patches-later-3bdd</link>
      <guid>https://dev.to/caspervonb/deno-one-year-and-two-hundred-patches-later-3bdd</guid>
      <description>&lt;p&gt;About a year ago, I made a new year resolution to take a few months away from contracting and &lt;strong&gt;finally publish a game&lt;/strong&gt;. I’m already thirty and some change and have been developing games for fun since I was a little brat.&lt;/p&gt;

&lt;p&gt;That, predictably turned out pretty much like you’d expect a new year resolution to go, it never came to pass.&lt;/p&gt;

&lt;p&gt;But the reason wasn’t that I didn’t work on it, its just that when it comes to my own projects I am really a top tier expert yak shaver so I basically ended up shaving yaks until I became an active contributor to the &lt;a href="https://deno.land"&gt;Deno TypeScript and JavaScript runtime&lt;/a&gt; instead.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#from-game-development-to-shaving-ten-thousand-yaks"&gt;
  &lt;/a&gt;
  From Game Development To Shaving Ten Thousand Yaks
&lt;/h1&gt;

&lt;p&gt;So how on earth does Deno, a JavaScript and Typescript runtime relate to game development? it doesn’t, at-least not to someone not familiar with the ancient art of yak shaving.&lt;/p&gt;

&lt;p&gt;For those are unfamiliar with the term, here’s Hal from Malcom in the Middle demonstrating proper technique and workflow for fixing a light bulb.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/AbSehcT19u0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Basically dipped my toe in because one of the things I was working on for the platform abstraction layer of my vaporware game was an implementation of the WebAssembly System Interface for Web Browsers.&lt;/p&gt;

&lt;p&gt;One thing lead to another and I ended up implementing it for Deno, I actually uploaded a short video from one of the sessions.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/H_PEvVZTKzA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;While working on that I ran into a lot of issues, like &lt;a href="https://github.com/denoland/deno/pull/6126"&gt;read not working with stdin&lt;/a&gt; and &lt;a href="https://github.com/denoland/deno/pull/6137"&gt;WebAssembly error propogation being broken&lt;/a&gt; which&lt;br&gt;
were pretty much my first patches aside from some trivial renaming and such.&lt;/p&gt;

&lt;p&gt;Found myself lacking more system call bindings for getting my WebAssembly System Interface (WASI) implementation done so I also ended up implementing a handful of system calls such as ftruncate, fstat, fsync and fdatasync which while were all fairly trivial to implement I did end up reading and&lt;br&gt;
familiarising myself with large chunks of the entire codebase.&lt;/p&gt;

&lt;p&gt;Eventually I was approached about my then userland WASI implementation and we migrated that into the standard library which is a collection of modules that lives at &lt;a href="https://deno.land/std"&gt;https://deno.land/std&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Having already familiarised myself with the code base and gone from knowing nothing about Rust except that we should “Rewrite it in Rust” to being fairly comfortable with it I just went to town &lt;a href="https://github.com/denoland/deno/pulls?q=is%3Apr+author%3Acaspervonb"&gt;submitting patches after patches&lt;/a&gt;&lt;br&gt;
including but not limited to the read-eval-print-loop, code coverage and test runner.&lt;/p&gt;

&lt;p&gt;For the last couple of years I’ve been in web development land so I found it quite enjoyable getting back to my roots and be work with a systems level language again.&lt;/p&gt;

&lt;p&gt;Who knew my love for C and and low level game development had a real world application (except for writing unfinished/unpublished games).&lt;/p&gt;

&lt;p&gt;That’s pretty much how I got involved with Deno, it was a complete accident but a &lt;strong&gt;happy&lt;/strong&gt; one as I really enjoy working on software that enables and helps developers build awesome things.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learning-rust-and-dealing-with-build-times"&gt;
  &lt;/a&gt;
  Learning Rust and Dealing with Build Times
&lt;/h1&gt;

&lt;p&gt;Before I dove into Deno I was consulting and contracting. Over the years I’ve done pretty much every random thing you can think of from writing Ruby on Rails applications when that was the hip thing, large scale booking systems in C# and there’s even that one time I was audited a large project’s entire npm dependency graph which I’ll never ever forget but my bread and butter for quite a few years was just writing a bunch of Node.js servers.&lt;/p&gt;

&lt;p&gt;Writing servers is quite far from the low level C and C++ I grew up with as a young lad but I’ve always had a love for systems languages.&lt;/p&gt;

&lt;p&gt;I saw Rust come on the scene and thought it was interesting to have a borrow checker but thought of it as somewhat of a gimmick and quickly fell into the fallacy of “Well, &lt;strong&gt;I&lt;/strong&gt; write correct C and C++ programs I would never need that” and pretty much just brushed of Rust as hype that would go away like it has with every other C replacement language.&lt;/p&gt;

&lt;p&gt;However, it didn't. And after actually giving it a real chance by actually writing code and contributing to Deno. The borrow checker and type system became my favourite feature overnight. The reason was quite simple, I did not really know Rust so for the first month I was effectivly just writing C and making it compile.&lt;/p&gt;

&lt;p&gt;Deno isn’t on the scale of say V8 or Chromium in terms of size but is still a fairly large and complex codebase so having the compiler yell at me for trying to send something that did not implement send was a godsend and pretty much eliminated the need to ever ask anyone about anything.&lt;/p&gt;

&lt;p&gt;The compiler messages are just that great; if you’ve ever seen the horrors that unfold when you forget a token in a C++ template then you can probably relate.&lt;/p&gt;

&lt;p&gt;But, speaking of C++ template horrors there’s also a pretty major downside and that is the &lt;em&gt;the build times&lt;/em&gt;…&lt;/p&gt;

&lt;p&gt;My old workstation and laptop both died sometime during 2019 and we spent 2020 in lockdown so that wasn’t exactly a great year to be splurging on non-essential items.&lt;/p&gt;

&lt;p&gt;That leaves me with my fairly dated Mac mini from around ~2014-2015 which obviously is a &lt;em&gt;bit underpowered for building complex systems&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Building Deno on it takes somewhere around ~1–2 hours for a full debug build and incremental builds take anywhere from 10–30 minutes.&lt;/p&gt;

&lt;p&gt;Productivity wise that’s fairly terrible but if there’s a will there is a way.&lt;/p&gt;

&lt;p&gt;I forced myself to learn Vi/Vim way back in my school days and have used it pretty much ever since which turned out to actually come in handy for once.&lt;/p&gt;

&lt;p&gt;Instead of building locally I rent a way to expensive virtual server and work remotely over a ssh connection.&lt;/p&gt;

&lt;p&gt;It’s mostly stable with a ping low enough not to really notice and connections do drop sometimes but it brings incremental debug builds down to 2–5 minutes which is manageable.&lt;/p&gt;

&lt;p&gt;Really looking forward to seeing what the mold project can do for us in the future here, even if it's only for development builds.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#chasing-after-github-sponsorships-and-dealing-with-burnout"&gt;
  &lt;/a&gt;
  Chasing after GitHub Sponsorships and Dealing with Burnout
&lt;/h1&gt;

&lt;p&gt;Renting a server for development is however not free so I ended up applying for the &lt;a href="https://github.com/sponsors/caspervonb"&gt;GitHub sponsors program&lt;/a&gt; in an attempt to at-least break even with the server costs sometime around July last year.&lt;/p&gt;

&lt;p&gt;I have never been so excited in my life to receive a single dollar, despite having to wait around 60 days to receive it.&lt;/p&gt;

&lt;p&gt;It’s really something else to have complete strangers supporting you in open source endeavours. Especially when it’s individuals, it’s incredibly humbling.&lt;/p&gt;

&lt;p&gt;I’m really truly really grateful and all of you guys are &lt;em&gt;really freaking awesome&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;That said, it is unfortunately &lt;em&gt;not sustainable&lt;/em&gt; even after a year which leads to the inevitable doom and gloom every now and then as savings have been dwindling while I’ve been spending more time on open source than doing actual&lt;br&gt;
paid work over the past year. I only planned for a maximum of 6 months so we had a &lt;em&gt;mild&lt;/em&gt; freakout last month when it&lt;br&gt;
seemed like we were expecting a kid, not exactly great timing right now.&lt;/p&gt;

&lt;p&gt;It’s a funny thing, on the one hand a new sponsor one month, even if its just a few bucks gets me to pull all-nighters. but at the same time I can see it’s very unlikely to that it is ever going to reach the levels I need it to be at to consider it a salary so there's always that impending doom just around the corner.&lt;/p&gt;

&lt;p&gt;It probably doesn’t help that I really despise plugging it so I do it half-assed tongue in cheek. It would be one thing if I could hide behind a marketing account but this is just me by myself.&lt;/p&gt;

&lt;p&gt;Every tweet I’ve ever sent out about has been followed by a cringe starting in my neck and crawling down my spine it’s such an uncomfortable thing to put out there so I tend to make a gag out of it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What’s Next
&lt;/h1&gt;

&lt;p&gt;Bit more personal for once than my usual cold served satire but hey can’t always wear a persona on the internet.&lt;/p&gt;

&lt;p&gt;It’s been an interesting year, I’ve learned a ton&lt;/p&gt;

&lt;p&gt;I’m not sure whats next for me, my current level of sponsorships is definitively more than 0 but it as likely as being struck by lightning that my &lt;a href="https://github.com/sponsors/caspervonb"&gt;GitHub sponsorships&lt;/a&gt; are gonna rocket&lt;br&gt;
up to the range we need to be at in order to keep the lights on and eat on a regular basis.&lt;/p&gt;

&lt;p&gt;I still got promises and commitments to keep to users and the community so I can't bail overnight, there’s a bunch of bug fixes and features to land for 1.10 (which is the next version of Deno).&lt;/p&gt;

&lt;p&gt;Then some more in my backlog for 1.11 and 1.12 but further out than time will tell but I am trying to reduce the time I spend working on Deno.&lt;/p&gt;

&lt;p&gt;By the way, I am open for new things and opportunities so do feel free to hit me up if you’re hiring and building something &lt;em&gt;awesome&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>deno</category>
    </item>
    <item>
      <title>How to vibrate with javascript</title>
      <author>Raghav Yadav</author>
      <pubDate>Fri, 14 May 2021 07:17:10 +0000</pubDate>
      <link>https://dev.to/raghav9official/how-to-vibrate-with-javascript-2a1m</link>
      <guid>https://dev.to/raghav9official/how-to-vibrate-with-javascript-2a1m</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---h85vbF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rp1db8il3b6zm9u20m7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---h85vbF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rp1db8il3b6zm9u20m7.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to vibrate the JavaScript?&lt;br&gt;
Though vibration can provide haptic feedback and a confirmation kinda thing which tells the user that an action has been performed.&lt;/p&gt;

&lt;p&gt;That's easy use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vibrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or use &lt;a href="https://netopa.github.io/hash.js/"&gt;hash.js&lt;/a&gt; and use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;vibrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//where 200 is the strength&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Anddd if(article="nice"){hash(".btn").click()}&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Function of a function</title>
      <author>Kinanee Samson</author>
      <pubDate>Fri, 14 May 2021 07:06:49 +0000</pubDate>
      <link>https://dev.to/kalashin1/function-of-a-function-5868</link>
      <guid>https://dev.to/kalashin1/function-of-a-function-5868</guid>
      <description>&lt;p&gt;Good day guys, the first time i heard about function of a function was when i took an advanced algebra class and i kid you not i was on a foreigner on Jupiter the whole semester, that class was a real hell and i ended up leaving the class entirely, not that advanced algebra was too hard, but maths is not my thing and my lecturer didn't make matters any easier. That said this is not an introduction to advanced algebra rather it is your friendly introduction to functions and how they are implemented in JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-function"&gt;
  &lt;/a&gt;
  What is a function?
&lt;/h3&gt;

&lt;p&gt;A function is an isolated block of code that we can make reference to or call to achieve a particular task.  We just wrap some logic that can be routinely used to achieve a set of task into curly braces and give it a name. The idea of function is geared towards keeping our code DRY and  &lt;strong&gt;&lt;em&gt;reusable&lt;/em&gt;&lt;/strong&gt;, we will come to the meaning of &lt;strong&gt;&lt;em&gt;reusable&lt;/em&gt;&lt;/strong&gt; later. Whether you're a beginner or advanced developer you work with functions a lot, because they make our work much easier, let's see a basic function that we use all the time;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;//  hello world&lt;/span&gt;
&lt;span class="c1"&gt;// the log function is an example of a function call&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The log method of the console object is an example of a function, but this is a built in JavaScript function and in the example above we are actually invoking or calling the function. When we use a function we are invoking or calling the function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-function"&gt;
  &lt;/a&gt;
  Creating a function
&lt;/h3&gt;

&lt;p&gt;We can create a function in two ways;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;using the function keyword &lt;/li&gt;
&lt;li&gt;Or use arrow function syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's look at each in turn&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// using the function keyword&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nameOfFunction&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// do something with parameters&lt;/span&gt;
    &lt;span class="c1"&gt;// do other computational task&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// creating a FUNCTION STATEMENT&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logHero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// OR&lt;/span&gt;

&lt;span class="c1"&gt;// creating a FUNCTION EXPRESSION&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logHero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// calling the function&lt;/span&gt;
&lt;span class="nx"&gt;logHero&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;superman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clark kent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// { name: 'superman', alias: 'clark kent'}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create a function using the function keyword you type the function keyword, space and then the name of the function which is followed by parenthesis, inside that parenthesis we can define one or more parameters that our function will rely on when we call it. The next thing is to enclose all of the logic we want inside curly braces. Anytime we call the function and pass arguments to it, it runs the code inside the curly braces.&lt;/p&gt;

&lt;p&gt;Functions can also be passed as values to variables and that variable will serve as the function name, personally i always use this method to write my functions, this type functions are called function expressions. Using the function keyword before name of the function is called function statements. If you find yourself using function expressions then you should be using arrow functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// using arrow functions&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logHero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// since we have one argument we can omit the parenthesis&lt;/span&gt;
&lt;span class="c1"&gt;// since we are performing only one task we can omit the curly braces&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logHero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;



&lt;span class="nx"&gt;logHero&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;superman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clark kent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// { name: 'superman', alias: 'clark kent' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Arrow functions are shorter to write and they keep your code clean as we saw above, we reduced 3 lines of code to just one. if we are expecting just one parameter we can ditch the parenthesis and also if we are just doing one thing, the we can also ditch the curly braces.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#function-scopes"&gt;
  &lt;/a&gt;
  Function Scopes
&lt;/h3&gt;

&lt;p&gt;A Scope simply refers to a lexical environment that stores the variables and function declared within it, every function has it's own scope. Let's get a better view of function scopes;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// GLOBAL SCOPE&lt;/span&gt;

&lt;span class="c1"&gt;// Every function has access to this lexical environment,&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logNum&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

    &lt;span class="c1"&gt;// logX SCOPE Only logX has access to this scope&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// logX has access to the scopes outside it, GLOBAL SCOPE&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;logNum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 1, 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A scope will generally contain other functions and variables. Thus the function on any scope has access to the variables and functions in it's own scope and those outside of it but not to scopes that belong to functions declared within it. Think of scope like, you can see what's on the same level with you or higher/outside but not lower/inside. This is good to prevent variable name collision and also to tie different values to the same variable on different scopes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// GLOBAL SCOPE&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// logNum Scope&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;logNum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pure-and-impure-functions"&gt;
  &lt;/a&gt;
  PURE AND IMPURE FUNCTIONS
&lt;/h2&gt;

&lt;p&gt;Following from what we noted about scopes this leads to classify our functions into two main categories, we have;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pure functions&lt;/li&gt;
&lt;li&gt;Impure functions&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pure-function"&gt;
  &lt;/a&gt;
  Pure Function
&lt;/h3&gt;

&lt;p&gt;Pure functions are functions that only mutates values that are within it's scope, the logic inside a pure function has no effect on the lexical environment outside it because it has no business with them. One thing about pure functions, given the same input they will always return the same output, these  reasons are why they are considered pure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// PURE FUNCTIONS&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;makeHero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="c1"&gt;// makeHero has no business with anything outside it's scope&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeHero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spiderman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Peter Parker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { name: 'spiderman', alias: 'Peter Parker'}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hulk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeHero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hulk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bruce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hulk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//{ name: 'hulk', alias: 'Bruce' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#impure-functions"&gt;
  &lt;/a&gt;
  Impure Functions
&lt;/h3&gt;

&lt;p&gt;These are functions that make changes to variables that are defined outside it's scope, the result of their computation depends on the other variable declared outside it's scope. It's not really advisable to use impure functions, they can cause some hard to find bugs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// IMPURE FUNCTIONS&lt;/span&gt;

&lt;span class="c1"&gt;// GLOBAL SCOPE&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modifyHero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// modifyHero SCOPE&lt;/span&gt;

    &lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt;

    &lt;span class="c1"&gt;// Accessing hero which is declared in GLOBAL SCOPE&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;universe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hulk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;modifyHero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hulk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bruce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hulk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// { name: 'hulk', alias: 'Bruce', universe: 'MCU' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functional-programming"&gt;
  &lt;/a&gt;
  Functional Programming
&lt;/h2&gt;

&lt;p&gt;JavaScript is a functional language, this implies that we can build our application using functional programming techniques because in JavaScript we can;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pass functions as arguments to other functions&lt;/li&gt;
&lt;li&gt;return functions from functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Functions that accepts functions as arguments or return other functions are called higher order functions, a good example of functions accepting other functions as arguments is found with some of the methods associated with the array class, e.g forEach, find, filter, reduce etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;myArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// we just passed in arrow function to the forEach method&lt;/span&gt;

&lt;span class="nx"&gt;myArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// we can also use functions wth the funcion keyword&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Functional programming helps us achieve things like using callback based code where we write a function that accepts another function as an argument, it we then call the argument which is a function after we have done some task, making it wait.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arguments-parameters-this"&gt;
  &lt;/a&gt;
  Arguments, Parameters, This??
&lt;/h3&gt;

&lt;p&gt;Let's clear somethings, most people including me before in many of my previous post used arguments and parameters interchangeably however i recently discovered that they are two different things. &lt;/p&gt;

&lt;p&gt;A parameter is the variable that your function is depending on to do the things you are asking of it to, that is when we write the function logic we specify that it requires a parameter. &lt;/p&gt;

&lt;p&gt;An argument is the actual value that we call the function with, when we call the function we do so with an argument.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#this"&gt;
  &lt;/a&gt;
  This?
&lt;/h3&gt;

&lt;p&gt;In JavaScript a function is an object, i don't know why on earth that makes sense. But since JavaScript is a prototype base language then i guess it actually does, well we are looking at functions today and not OOP but what does &lt;strong&gt;this&lt;/strong&gt; means inside our functions?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#standard-functions"&gt;
  &lt;/a&gt;
  Standard functions
&lt;/h4&gt;

&lt;p&gt;A standard function will not explicitly hijack the value of this and set it equal to it's own self, rather this will refer to the the object with which the function is defined, if the function is defined on the global scope without being attached to a method to an object, then this will refer to the gloabl this. There is no lexical scoping of this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_name&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// this will always refer to a prototype of Hero&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code block since we used the function keyword to declare our functions, we can be rest assured that whenever we make use of &lt;em&gt;this&lt;/em&gt; it will always refer to an instance of a hero, but since JavaScript uses prototypes, we say a prototype of Hero.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow Functions
&lt;/h3&gt;

&lt;p&gt;Arrow function might be cool for short and clean code but they have an annoying habit of showing themselves. They lexically scope the value of &lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt; to be equal to themselves?? If you are doing some deep work with OOP then i would advise that you refrain from arrow functions and stick with the keyword..&lt;/p&gt;

&lt;p&gt;That's it, your friendly introduction and reminder about functions, feel free to leave a comment below as they are welcomed and valued, you could also drop in a few cool things about functions that skipped me or better that i don't know about. Hope you find this useful.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>An overview of software localization and i18n tools (2021)</title>
      <author>Petr Hodný</author>
      <pubDate>Fri, 14 May 2021 06:53:33 +0000</pubDate>
      <link>https://dev.to/localazy/an-overview-of-software-localization-and-i18n-tools-2021-36cb</link>
      <guid>https://dev.to/localazy/an-overview-of-software-localization-and-i18n-tools-2021-36cb</guid>
      <description>&lt;p&gt;As a developer, you have pretty extensive software internationalization options, language localization, and phrase translation solutions. But when it comes to decision making, the wide variety makes it harder to make a qualified decision on which solution is the best for you and your project. How could one navigate in such a plethora of options?&lt;/p&gt;

&lt;p&gt;Let's take a closer look at it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#difference-between-internationalization-and-localization"&gt;
  &lt;/a&gt;
  🎌 Difference between internationalization and localization
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://localazy.com/dictionary/internationalization"&gt;Internationalization (i18n)&lt;/a&gt; is the preparation of software for multilingual support. &lt;a href="https://localazy.com/dictionary/localization"&gt;Localization (l10n)&lt;/a&gt; is the process of aligning internationalized software with particular cultures' needs, whether you align language, meanings, values, beliefs, or visual code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#many-factors-coming-into-the-decision-process"&gt;
  &lt;/a&gt;
  🤔 Many factors coming into the decision process
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Technologic compatibility&lt;/li&gt;
&lt;li&gt;Service accessibility&lt;/li&gt;
&lt;li&gt;Service availability&lt;/li&gt;
&lt;li&gt;Technical debt&lt;/li&gt;
&lt;li&gt;User experience&lt;/li&gt;
&lt;li&gt;Easiness of adoption and maintenance&lt;/li&gt;
&lt;li&gt;Business compliance&lt;/li&gt;
&lt;li&gt;Business model/pricing policy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#types-of-software-i18nampl10nampt9n-solutions"&gt;
  &lt;/a&gt;
  🛠️ Types of software i18n&amp;amp;l10n&amp;amp;t9n solutions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;i18n frameworks, formats&lt;/li&gt;
&lt;li&gt;language technology providers&lt;/li&gt;
&lt;li&gt;language service providers&lt;/li&gt;
&lt;li&gt;software localization services&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#i18n-frameworks-formats-and-language-technology-providers"&gt;
  &lt;/a&gt;
  🗃️ i18n frameworks, formats, and language technology providers
&lt;/h2&gt;

&lt;p&gt;There are multiple i18n frameworks and formats worldwide you can use for your software internationalization project. All of them have some specialties.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://localazy.com/xliff"&gt;XLIFF file format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://localazy.com/po"&gt;PO file format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://localazy.com/android"&gt;Android XML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://localazy.com/flutter"&gt;Flutter Arb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://localazy.com/blog/javascript-app-localization-i18next-localazy"&gt;i18next&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://localazy.com/json"&gt;Multilingual JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://localazy.com/ios"&gt;iOS .strings, .stringsdict, .plist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://localazy.com/yaml"&gt;YAML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://localazy.com/properties"&gt;Java properties&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And many more, which you can find on the &lt;a href="https://localazy.com/integrations"&gt;Localazy Integrations page&lt;/a&gt;. If you think something is missing, kindly let us know, and we will make sure Localazy supports your platform.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lost-in-localizable-file-format-conversions"&gt;
  &lt;/a&gt;
  Lost in localizable file format conversions?
&lt;/h4&gt;

&lt;p&gt;Activate the &lt;a href="https://localazy.com/docs/general/format-conversions-add-on"&gt;Format Conversions add-on&lt;/a&gt; and seamlessly output your translations in many different formats. Format conversions come especially handy when you are developing your app simultaneously on multiple platforms or when you need to share texts between the front-end and back-end of your project.&lt;/p&gt;

&lt;p&gt;Once you activate the Format Conversions add-on, you can start using new commands in the &lt;a href="https://localazy.com/docs/cli/the-basics"&gt;Localazy CLI tool&lt;/a&gt;  to convert your localizable files into different formats. Make it a part of your workflow and automate file format conversions to output your translations in many different formats seamlessly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uaCa4LBF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/updzkypq094s10n9robe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uaCa4LBF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/updzkypq094s10n9robe.png" alt="Format Conversions add-on"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#language-technology-providers"&gt;
  &lt;/a&gt;
  Language technology providers
&lt;/h3&gt;

&lt;p&gt;The language technology provider will enable you to use their technology to translate your software; however, they will most probably not offer complete localization services, including phrase translations. It is then only your responsibility to implement the technology and use it to localize your software projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#language-service-providers"&gt;
  &lt;/a&gt;
  Language service providers
&lt;/h3&gt;

&lt;p&gt;Language service providers usually provide you with the underlying technology. Still, their core business is preferably in the localization services itself - they help you translate phrases using professional translators, provide you with cultural expertise, and so on. LSPs are, by principle, more expensive because there is an increased portion of human work, and technology is just a part of the workflow. You may still want to check if your LSP uses proper technology, not adding pennies to your bill because of tech debt and non-effective workflows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#software-localization-services"&gt;
  &lt;/a&gt;
  Software localization services
&lt;/h3&gt;

&lt;p&gt;Highly specialized providers focused on software. While language tech and service providers can offer you to localize software and content in general, software localization services dedicate themselves to the SW development vertical. They are thus highly qualified for your kind of job, frequently from i18n to l10n of user interfaces.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#going-further-in-the-software-category"&gt;
  &lt;/a&gt;
  Going further in the software category
&lt;/h3&gt;

&lt;p&gt;The software localization category can go even further. Notably, there are companies focused on the gaming industry, such as Keyword Studio. And there are companies focused on single developers and small digital teams, such as Localazy. If you want to localize your software as an expert, but enterprise solutions are not a cup of your coffee, give us a try.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#combined-solutions-a-l%C3%A1-carte"&gt;
  &lt;/a&gt;
  Combined solutions / A lá carte
&lt;/h3&gt;

&lt;p&gt;Within the market, you can, of course, find combined / A lá carte solutions for your project. Just make your choice of the service you need and order. Do you need only technology? Or do you need just translations? Or maybe both?&lt;/p&gt;

&lt;p&gt;No problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#list-of-i18nl10nt9n-services-and-frameworks"&gt;
  &lt;/a&gt;
  📌 List of i18n/l10n/t9n services and frameworks
&lt;/h2&gt;

&lt;p&gt;Let's dive into the actual tools you can use for localization and translation management. Which one should you pick? That depends on your budget, goals, expectations, and the size of your team and project. Allow us to introduce some of them in the following section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#editors-pick"&gt;
  &lt;/a&gt;
  Editor's pick
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IxnrWIkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xncge2dw86pt3cjwl6a9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IxnrWIkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xncge2dw86pt3cjwl6a9.png" alt="Localazy.com Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#localazycom"&gt;
  &lt;/a&gt;
  🔵 Localazy.com
&lt;/h4&gt;

&lt;p&gt;Which localization tool is the best? You guessed it. 😎 Obviously, &lt;a href="https://localazy.com/benefits"&gt;it's Localazy&lt;/a&gt;! 😀 Why?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;By developers, for developers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Localazy is a developer-friendly automated localization platform. With the powerful &lt;a href="https://localazy.com/docs/cli/the-basics"&gt;CLI tool&lt;/a&gt; and comprehensive &lt;a href="https://localazy.com/integrations"&gt;integrations&lt;/a&gt;, any developer can localize their project conveniently.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See the &lt;a href="https://localazy.com/integrations"&gt;list of available integrations and supported file formats&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Learn &lt;a href="https://localazy.com/tags/howto"&gt;how to integrate Localazy&lt;/a&gt; into your project
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Flexible and affordable pricing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can use Localazy &lt;strong&gt;for free&lt;/strong&gt; and enjoy all core localization features without any recurring payments. Zero compromises, unlimited localization features. &lt;/p&gt;

&lt;p&gt;The free plan includes: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unlimited apps&lt;/li&gt;
&lt;li&gt;Unlimited languages &amp;amp; translations&lt;/li&gt;
&lt;li&gt;Unlimited machine translations&lt;/li&gt;
&lt;li&gt;All integrations &amp;amp; formats&lt;/li&gt;
&lt;li&gt;200 managed source phrases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Localazy offers affordable plans suitable for single developers and bigger teams alike.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See our &lt;a href="https://localazy.com/pricing"&gt;pricing&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Instant translations with &lt;a href="https://localazy.com/docs/general/what-is-localazy-sharetm"&gt;ShareTM technology&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are developers; we share our code, we cooperate, share our knowledge and libraries. We have this in our DNA. It saves us time and money; it helps us to move forward faster and produce better software. ShareTM is what makes Localazy unique and different from other translation platforms. &lt;/p&gt;

&lt;p&gt;ShareTM is a pro-active &lt;a href="https://localazy.com/dictionary/translation-memory"&gt;translation memory&lt;/a&gt; that translates your app automatically to new languages. It works like magic!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Powerful features&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Discover add-ons that make translating and maintaining your project even more enjoyable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://localazy.com/docs/general/connected-apps"&gt;Connected Apps&lt;/a&gt; share translations across backend and frontend, from Android to iOS, or anything else you would like. Many-to-many translation shared memory.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://localazy.com/docs/general/format-conversions-add-on"&gt;Format Conversions&lt;/a&gt; allow you to convert translated files between different formats. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://localazy.com/docs/general/release-tags-add-on"&gt;Release Tags&lt;/a&gt; allow you to release translation updates iteratively only when you want. Test translations on stage before pushing to production.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://localazy.com/docs/general/additional-mt-engines"&gt;Additional MT&lt;/a&gt; will give you three other powerful machine translation engine suggestions to help you make more accurate translations and unlock other features.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Translation on auto-pilot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Focus on what's important and use &lt;a href="https://localazy.com/docs/general/virtual-translator"&gt;Virtual Translator (VT)&lt;/a&gt; to automatically translate and review your phrases to selected languages. Choose between &lt;a href="https://localazy.com/dictionary/hamt"&gt;human-assisted machine translation&lt;/a&gt; or professional translations, and we will handle everything from there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unique review process&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our review process is a pro-active tool that helps you verify translations and keep track of all changes that happened on Localazy while you spent your precious time making your product better. &lt;/p&gt;

&lt;p&gt;The primary function of the review process is to help you with verifying new translations from your contributors. You can accept or reject translations or mark them as acceptable but not good enough, etc.&lt;/p&gt;

&lt;p&gt;As an addition to the approve/reject mechanism, you can directly edit the suggested translation and alter it. That's extremely useful for minor changes. The translation may be perfect but with a small issue such as a missing exclamation mark or typo, which is something you can quickly fix on your own.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://localazy.com/docs/general/unique-review-process-and-self-managed-translations"&gt;Learn more about the review process&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Clean and user-friendly UI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Even though software developers might be fairly used to encountering obscure tools and outdated interfaces, we strive to make all of our users feel at home and pay great attention to UX and design our interfaces thoughtfully. &lt;/p&gt;

&lt;p&gt;Clean UI displaying all of the important information with minimal clutter will help you focus better and get things done quickly. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read a &lt;a href="https://localazy.com/blog/intro-localazy-translators-perspective"&gt;review of Localazy UI by an experienced translator&lt;/a&gt; Michał Tosza&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Stellar support and community engagement&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our users frequently mention our dedication to customer support and fast response times in their &lt;a href="https://www.trustpilot.com/review/localazy.com"&gt;reviews&lt;/a&gt; and &lt;a href="https://localazy.com/testimonials"&gt;testimonials&lt;/a&gt;. Please chat with us whenever you have a question or encounter an issue on your localization journey! We are here to help. 😊&lt;/p&gt;

&lt;p&gt;We also love to communicate with our users and involve them in the development process. Whether we ask for feedback, invite them to test new features early, or just exchange banter in the &lt;a href="https://discuss.localazy.com/"&gt;forum&lt;/a&gt;, we are always happy to talk! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CDN and OTA updates&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our &lt;a href="https://localazy.com/docs/general/localazy-cdn"&gt;CDN&lt;/a&gt; allows you to use translated files directly in your project without needing to rebuild and publish. Just get the link, and you won't have to worry about updates of translations. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://localazy.com/android"&gt;Android&lt;/a&gt; developers can integrate our &lt;a href="https://localazy.com/docs/android/localazy-gradle-plugin"&gt;Gradle plugin&lt;/a&gt; that will do the work for them. Integrate &lt;a href="https://localazy.com/docs/android/only-ota-updates-that-really-work"&gt;Localazy OTA updates&lt;/a&gt; without a single change of your source code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-popular-tools"&gt;
  &lt;/a&gt;
  Other popular tools
&lt;/h3&gt;

&lt;p&gt;The following section will list some of the other most popular translation management platforms for software developers. They are listed in no particular order, and you can compare each with Localazy to see who will fit your needs better. &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---tKrSlIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1w8t4562i1uhdidb7o1v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---tKrSlIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1w8t4562i1uhdidb7o1v.png" alt="Lokalise.com Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lokalisecom"&gt;
  &lt;/a&gt;
  🟠 &lt;a href="https://localazy.com/lokalise-alternative"&gt;Lokalise.com&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Trusted by prominent brands like Revolut, Daimler, and TESCO, Lokalise is without a doubt a well-established tool for localization and translation management. A great variety of valuable features such as real-time translations for support tickets and in-context editing makes Lokalise an excellent choice for teams requiring distinct localization approaches in their daily operations. &lt;/p&gt;

&lt;p&gt;But, even though Lokalise offers a 14-day trial to test out their Enterprise plan, with the Start plan starting at 90 dollars (billed annually), Lokalise is one of the pricier options out there. &lt;/p&gt;

&lt;p&gt;Localazy offers core localization features for &lt;strong&gt;free up to 200 phrases&lt;/strong&gt;, why not give us a shot?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://localazy.com/lokalise-alternative"&gt;Compare Lokalise vs. Localazy&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7A9lWwQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12p40eri59exucu7twn9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7A9lWwQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12p40eri59exucu7twn9.png" alt="Smartling.com Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#smartling"&gt;
  &lt;/a&gt;
  🟣 Smartling
&lt;/h4&gt;

&lt;p&gt;Smartling is considered a market leader in the computer-assisted translation field. With customers like Shopify, Pinterest, Vimeo, and other big names, we can only agree that it is a valid assumption. Smartling emphasizes the human aspect of CAT and prides itself in connecting customers directly with their translators. Smartling also offers a robust infrastructure and a unique approach to translation performance tracking. &lt;/p&gt;

&lt;p&gt;However, the pricing is not transparent, so you can't know how much Smartling will cost you without asking them first. Becoming a part of Smartling might prove expensive, but their linguistic asset management services look promising in increasing translation quality control for any language. &lt;/p&gt;

&lt;p&gt;Localazy offers a &lt;strong&gt;&lt;a href="https://localazy.com/pricing"&gt;transparent pricing&lt;/a&gt;&lt;/strong&gt; model with many core features free.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iX3u4Iqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dur1kvdkzdz856xapwli.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iX3u4Iqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dur1kvdkzdz856xapwli.png" alt="Phrase.com Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#phrasecom"&gt;
  &lt;/a&gt;
  🔵 &lt;a href="https://localazy.com/phrase-alternative"&gt;Phrase.com&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Previously known as PhraseApp, &lt;a href="https://localazy.com/phrase-alternative"&gt;Phrase.com&lt;/a&gt; is an established all-in-one software localization platform with many features for the whole team. The idea of the Phrase platform is centered around translation workflow management and different roles employed in the process. &lt;/p&gt;

&lt;p&gt;However, Phrase is not outfitted with &lt;a href="https://localazy.com/dictionary/machine-translation"&gt;machine translations (MT)&lt;/a&gt;, so you are either on your own, or you can order professional translation services on the platform. Phrase allows a 14-day trial, and the Basic plan starts at 23 dollars a month at the date of publishing this post. &lt;/p&gt;

&lt;p&gt;Localazy offers &lt;strong&gt;machine translations&lt;/strong&gt; for all users to speed up the process and minimize the localization headache.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://localazy.com/phrase-alternative"&gt;Compare Phrase vs. Localazy&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ipa6636B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuvb3csupxute8gbdu7b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ipa6636B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuvb3csupxute8gbdu7b.png" alt="AppLanga.com Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#applangacom"&gt;
  &lt;/a&gt;
  🔵 &lt;a href="https://localazy.com/applanga-alternative"&gt;AppLanga.com&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;AppLanga is an online translation management platform that specializes in the localization of native mobile apps and games. AppLanga offers its' own SDK, integration with leading platforms for mobile app development, in-context editor, and OTA updates to speed up the delivery of localization changes to users. &lt;/p&gt;

&lt;p&gt;There is no phrase limit, and you can even use AppLanga free of charge for a small project with under 1000 MAU (monthly active users). To access more features such as glossary and invite team members, you have to upgrade to the Pro plan, which is 500 dollars per month. &lt;/p&gt;

&lt;p&gt;With Localazy, you can use the &lt;strong&gt;Glossary&lt;/strong&gt; and invite your teammates to help you with translation even on the free plan!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://localazy.com/applanga-alternative"&gt;Compare AppLanga vs. Localazy&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3HDrXJKN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orxzv4sa5m716wv4ucnk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3HDrXJKN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orxzv4sa5m716wv4ucnk.png" alt="Localise.biz Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#localisebiz-loco"&gt;
  &lt;/a&gt;
  🟢 &lt;a href="https://localazy.com/loco-alternative"&gt;Localise.biz (Loco)&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Loco is a simple platform for translation management supporting 14 file formats. With the free plan, you can translate two projects into up to 10 languages. Loco is an affordable option with the Pro plan starting at only 6 dollars a month, and you can increase the limit with additional monthly charges. You can also automate the distribution of localization files with the Loco API. &lt;/p&gt;

&lt;p&gt;However, Loco does not offer any translation services or MT engines, and you have to handle the translations on your own. Loco is also available as a free WordPress plugin for a user-friendly localization of themes and plugins, making it perfect for indie WordPress developers or handy site owners who are looking for a free option to localize their WordPress site. &lt;/p&gt;

&lt;p&gt;With Localazy, you can set up the &lt;strong&gt;&lt;a href="https://localazy.com/docs/general/virtual-translator"&gt;Virtual Translator&lt;/a&gt;&lt;/strong&gt; to translate your apps or use machine translations. On top of that we don't limit the number of projects or languages!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://localazy.com/loco-alternative"&gt;Compare Loco vs. Localazy&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LSbioutK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjc5ag9aclhdw9n8onls.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LSbioutK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjc5ag9aclhdw9n8onls.png" alt="homepage-transifex-com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#transifexcom"&gt;
  &lt;/a&gt;
  🟣 &lt;a href="https://localazy.com/transifex-alternative"&gt;Transifex.com&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Transifex is a cloud-based localization platform trusted by some of the world's tech leaders such as Atlassian, Trello, or Disqus, to name a few. Transifex offers a variety of integrations not only for developers but for designers, support platforms, and e-commerce solutions as well. With Transifex, you can also manage localization workflows, order professional translations and view comprehensive reports to measure your efforts. &lt;/p&gt;

&lt;p&gt;You can try Transifex for free. The Basic plan starts at $70 / month and offers up to 50,000 words, unlimited projects, and essential tools to start localizing your project. However, the initial setup might not be the easiest out there, according to some reviews. &lt;/p&gt;

&lt;p&gt;Integrate Localazy in minutes with our &lt;strong&gt;&lt;a href="https://localazy.com/docs/cli/the-basics"&gt;developer friendly CLI tool&lt;/a&gt;&lt;/strong&gt; and try Localazy for free.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://localazy.com/transifex-alternative"&gt;Compare Transifex vs. Localazy&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3tvr-OZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j6nznwh1mbax9px2g7r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3tvr-OZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j6nznwh1mbax9px2g7r.png" alt="ICanLocalize.com Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#icanlocalize"&gt;
  &lt;/a&gt;
  🟠 ICanLocalize
&lt;/h4&gt;

&lt;p&gt;Focusing on professional translation delivery between over 400 language pairs, ICanLocalize is a great choice for one-time projects. They also offer transparent pricing with rates that start at 0.09 USD per word and no additional storage fees. Since ICanLocalize is the company behind the WPML plugin for WordPress, using their services for translating WordPress websites should be easy. &lt;/p&gt;

&lt;p&gt;Translating &lt;a href="https://localazy.com/android"&gt;Android&lt;/a&gt; or &lt;a href="https://localazy.com/ios"&gt;iOS&lt;/a&gt; apps is possible with ICanLocalize too, but you have to upload files manually every time you make a change in your project, which means you must add an extra step into your workflow. You can also upload any documents for translation, and with their Instant translation service, translating short texts is possible within minutes for common language pairs. &lt;/p&gt;

&lt;p&gt;You can &lt;strong&gt;&lt;a href="https://localazy.com/tags/automated-localization"&gt;fully automate the localization&lt;/a&gt;&lt;/strong&gt; process with Localazy and forget about handling files manually thanks to our &lt;strong&gt;&lt;a href="https://localazy.com/docs/cli/the-basics"&gt;CLI&lt;/a&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;a href="https://localazy.com/docs/general/localazy-cdn"&gt;CDN&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AzEekIaO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g34ywejue0bswidh572x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AzEekIaO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g34ywejue0bswidh572x.png" alt="OneSkyApp.com Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#oneskyappcom"&gt;
  &lt;/a&gt;
  🔵 &lt;a href="https://localazy.com/oneskyapp-alternative"&gt;OneSkyApp.com&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;OneSky offers an end-to-end localization solution with 50+ Languages, 1,000+ Translators, and 19 compatible file formats. OneSky is an established platform that has helped many companies localize their mobile apps and games, including HubSpot, Ubisoft, and Microsoft. Pricing at OneSky is pay per word, starting at $0.04 for translation and $0.05 for review, and offers only translators with technical experience and industry-specific knowledge suitable for your project. &lt;/p&gt;

&lt;p&gt;Additionally, OneSky offers App Store Integration for description translation and On-Device Testing to ensure your UI won't break in other language versions, emphasizing their specialization in apps and games. &lt;/p&gt;

&lt;p&gt;Localazy offers a wider variety of approaches to the localization process. You can translate your apps on your own, invite volunteers or order the &lt;strong&gt;&lt;a href="https://localazy.com/docs/general/virtual-translator"&gt;Virtual Translator&lt;/a&gt;&lt;/strong&gt;. We don't push you to pay per translated word if you don't want to!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://localazy.com/oneskyapp-alternative"&gt;Compare OneSkyApp vs. Localazy&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qEMxoKC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjuxfvcipezuew81067s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qEMxoKC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjuxfvcipezuew81067s.png" alt="i18nexus.com Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#i18nexus"&gt;
  &lt;/a&gt;
  🟢 i18nexus
&lt;/h4&gt;

&lt;p&gt;i18nexus allows you to quickly edit, automate, and manage your translations and connect them to your website, app, or video game with the i18next framework. &lt;a href="https://localazy.com/dictionary/i18next"&gt;i18next&lt;/a&gt; is a flexible &lt;a href="https://localazy.com/json"&gt;JSON&lt;/a&gt; approach that works with all modern tech stacks, including libraries for React, Angular, Node, iOS, Ruby on Rails... i18next is one of the top open-source internationalization frameworks and Localazy supports i18next as well!&lt;/p&gt;

&lt;p&gt;i18nexus translates your app using Google Translate immediately, but you have to source professional translators yourself and invite them to i18nexus if you want to localize your app professionally. The free plan is quite generous, offering up to 500 strings for free; the basic plan (up to 3000 strings) starts at $14 / mo. &lt;/p&gt;

&lt;p&gt;Localazy allows you to &lt;strong&gt;&lt;a href="https://localazy.com/dictionary/i18next"&gt;automate your i18next project localization&lt;/a&gt;&lt;/strong&gt; and order professional translators when you are ready. You can fully focus on development and improvement of your software, while Localazy handles the rest for you! &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H9c5Zzlg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqh2hmuqnb5un7byl1rb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H9c5Zzlg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqh2hmuqnb5un7byl1rb.png" alt="Lingoport.com Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lingoport"&gt;
  &lt;/a&gt;
  🟣 Lingoport
&lt;/h4&gt;

&lt;p&gt;Lingoport is a full-service solution that provides a broad range of software internationalization services customized to fit your release goals, technologies, engineering resources, and budget. Established in 2001, Lingoport is trusted by the world's largest software companies, including Snapchat, VISA, or Dell. &lt;/p&gt;

&lt;p&gt;Lingoport Suite consists of three products: Globalyzer, Localyzer, and Localyzer QA that work together to support i18n, L10n, and QA. All Lingoport Suite products offer various license choices ranging from cloud hosting, private cloud installation, and on-premise installation. On the other hand, you can't easily find the pricing models for any of the options offered by Lingoport, so you would have to contact them with your specific case. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://localazy.com/tags/automated-localization"&gt;Automate the localization&lt;/a&gt;&lt;/strong&gt; of your project with Localazy, start for free and upgrade when you need. Deliver your translations via our &lt;strong&gt;&lt;a href="https://localazy.com/docs/general/localazy-cdn"&gt;CDN&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href="https://localazy.com/docs/android/only-ota-updates-that-really-work"&gt;OTA updates&lt;/a&gt;&lt;/strong&gt;, and don't waste time on complicated setup and maintenance. &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WEJq82oI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dkufp1wmr87qi75cczqj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WEJq82oI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dkufp1wmr87qi75cczqj.png" alt="GitLocalize.com Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#gitlocalize-part-of-alconost"&gt;
  &lt;/a&gt;
  🟡 GitLocalize (part of Alconost)
&lt;/h4&gt;

&lt;p&gt;Aimed at single developers and small teams, GitLocalize is a free and simple-to-use translation management tool that integrates directly with your GitHub repository. GitLocalize tracks changes in your repository and pulls them into the project. Translations are then sent to the repository via a pull request. &lt;/p&gt;

&lt;p&gt;Setup is easy, and translations can be managed statically on a file level and compared to the original by segment. Since the tool is free, you shouldn't expect any built-in machine translation help or professional translation services, so this important part of the localization process has to be sourced elsewhere. &lt;/p&gt;

&lt;p&gt;Localazy can do the same as GitLocalize and much more for you, e.g.:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;translate your project with &lt;a href="https://localazy.com/dictionary/machine-translation"&gt;machine translations&lt;/a&gt; and &lt;a href="https://localazy.com/docs/general/what-is-localazy-sharetm"&gt;ShareTM&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;fully &lt;a href="https://localazy.com/tags/automated-localization"&gt;automate the localization process&lt;/a&gt; with the &lt;a href="https://localazy.com/docs/general/virtual-translator"&gt;Virtual Translator&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;deliver translations to your users via &lt;a href="https://dev.todocs/general/localazy-cdn"&gt;CDN&lt;/a&gt;... &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ixfPvHhs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80mbza5vv2yd0ve0dx88.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ixfPvHhs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80mbza5vv2yd0ve0dx88.png" alt="IBabbleOn.com Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#babbleon"&gt;
  &lt;/a&gt;
  ⚫ Babble-on
&lt;/h4&gt;

&lt;p&gt;Babble-on is an expert team of native translators and writers. With their app localization service, you can have your app translated professionally into any language of your choice. Babble-on supports around 20 file formats. You can sync via Github or Bitbucket or send them the latest export of your strings to get your translated files back in a few days. &lt;/p&gt;

&lt;p&gt;Babble-on can handle the whole process for you, or you can join their translation system and participate by adding context &amp;amp; screenshots, answer translators' questions, and remove texts you don't want to translate. Pay $0.21 per word, with zero monthly fees. Babble-on can also help you with your app descriptions and press releases in different languages.&lt;/p&gt;

&lt;p&gt;With Localazy, you can translate your apps on your own with the help of machine translation engines, invite volunteers or order the &lt;strong&gt;&lt;a href="https://localazy.com/docs/general/virtual-translator"&gt;Virtual Translator&lt;/a&gt;&lt;/strong&gt; to translate your project automatically and pro-actively. &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9obEWYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rca99mfwcluxn0zi1thm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9obEWYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rca99mfwcluxn0zi1thm.png" alt="Locize.com Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#locizecom"&gt;
  &lt;/a&gt;
  🔵 &lt;a href="https://localazy.com/locize-alternative"&gt;locize.com&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Locize is a translation management system with a variety of features built by the creators of &lt;a href="https://localazy.com/dictionary/i18next"&gt;i18next&lt;/a&gt;. You'll find features aimed at teams, contributors, and managers, as well as single developers + other essential tools for efficient translation management. Locize also offers professional translations, and machine translations are included within the system as well. &lt;/p&gt;

&lt;p&gt;On top of that, you can translate your website directly from your browser with their InContext Editing tool. Locize employs a variable "pay as you go" pricing model that might be hard to understand at first, and the UI might seem cluttered for some users, but you can try a 14-day trial to see if Locize is what you are looking for.&lt;/p&gt;

&lt;p&gt;Translate your app comfortably and enjoy the clean and user-friendly interface of Localazy. Also, please don't get lost in pricing calculations, take a look at our transparent and easy to understand &lt;a href="https://localazy.com/pricing"&gt;pricing&lt;/a&gt; ;-) &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://localazy.com/locize-alternative"&gt;Compare Locize vs Localazy&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#and-more"&gt;
  &lt;/a&gt;
  and more...
&lt;/h4&gt;

&lt;p&gt;This list is not exhaustive, if you would like to see a comparison with your current platform or service not included in the list, kindly let us know. ;-) &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  ✔️ In conclusion
&lt;/h2&gt;

&lt;p&gt;We hope this article helped serve as a broad overview of solutions available for software localization and translation management. &lt;/p&gt;

&lt;p&gt;At Localazy, we are working very hard to become the go-to option for software developers in need of a localization platform. We believe that everyone should be able to enjoy software in their native language. We want to bring together developers, users &amp;amp; translators that believe in the same thing and provide them with an effortless way of translating their projects. &lt;/p&gt;

&lt;p&gt;We value the feedback of our current or potential users. Whether you are a developer or freelance translator, &lt;a href="https://discuss.localazy.com/"&gt;join our forum&lt;/a&gt; and let us know what you think!  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-developers-love-localazy"&gt;
  &lt;/a&gt;
  💖 Why developers love Localazy?
&lt;/h2&gt;

&lt;p&gt;Whether you are a single developer or an agency, you can rely on Localazy when it comes to i18n &amp;amp; l10n! &lt;br&gt;
&lt;strong&gt;&lt;a href="https://localazy.com/testimonials"&gt;Read our testimonials!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>localization</category>
      <category>i18n</category>
      <category>l10n</category>
      <category>translations</category>
    </item>
  </channel>
</rss>
