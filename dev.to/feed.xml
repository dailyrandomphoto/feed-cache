<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Building a culture of trust — with Metrics — at Slack </title>
      <author>Conor Bronsdon</author>
      <pubDate>Mon, 13 Sep 2021 21:58:26 +0000</pubDate>
      <link>https://dev.to/linearb/building-a-culture-of-trust-with-metrics-at-slack-2egc</link>
      <guid>https://dev.to/linearb/building-a-culture-of-trust-with-metrics-at-slack-2egc</guid>
      <description>&lt;p&gt;Rukmini Reddy, VP of Engineering at Slack, has a truly inspiring origin story. As a student growing up in India, she hated that all of the girls in her class were forced to learn sewing. When she was offered the chance to go to her school’s computer lab instead, she never looked back.&lt;/p&gt;

&lt;p&gt;She joins the &lt;a href="https://open.spotify.com/episode/3SZul4mXqjZ0uAYpU9aksi?si=3dCuthEGQMqkmyOoQHIfLA&amp;amp;dl_branch=1"&gt;Dev Interrupted podcast&lt;/a&gt; to talk about her journey into software engineering, how she transitioned to a leadership role and what it was like to onboard at Slack during the pandemic. Her and Dan also have a lively discussion on engineering metrics and how data can provide a “shared view of reality” when it comes to making tough decisions as a leader.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3SZul4mXqjZ0uAYpU9aksi"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Her journey into software engineering&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Conquering self-doubt and imposter syndrome as a woman of color&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Slack’s culture and core values&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How high trust enables hypergrowth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data as a way to provide a shared view of reality&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;If you haven't already heard&lt;/strong&gt;, Dev Interrupted is partnering with Dzone to host &lt;strong&gt;INTERACT&lt;/strong&gt;: An interactive, community-driven, digital conference on September 30th - by engineering leaders, for engineering leaders. 1 day, 10 speakers, 100s of engineers and engineering leaders, all free.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#register-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://devinterrupted.com/event/interact/"&gt;Register Now&lt;/a&gt;
&lt;/h1&gt;




&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-community"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Community
&lt;/h2&gt;

&lt;p&gt;If you haven’t already joined the best developer discord out there, WYD?&lt;/p&gt;

&lt;p&gt;Look, I know we talk about it a lot but we love our developer discord community. With over 1600 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No salespeople allowed. &lt;a href="https://discord.gg/tpkmwM6c3g"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ghKqRKWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79p55zb3q4hh0drifmdu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ghKqRKWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79p55zb3q4hh0drifmdu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/podcast/building-a-culture-of-trust-with-metrics-at-slack/"&gt;https://devinterrupted.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>womenintech</category>
      <category>techtalks</category>
      <category>podcast</category>
      <category>culture</category>
    </item>
    <item>
      <title>7 Golden Tips While Redesigning Your Website</title>
      <author>bruceaustin04</author>
      <pubDate>Mon, 13 Sep 2021 21:37:12 +0000</pubDate>
      <link>https://dev.to/bruceaustin04/7-golden-tips-while-redesigning-your-website-406e</link>
      <guid>https://dev.to/bruceaustin04/7-golden-tips-while-redesigning-your-website-406e</guid>
      <description>&lt;p&gt;The process of redesigning a website can be stressful, confusing, and time-consuming. It's understandable if you feel overwhelmed by the amount of information you need to know in order to create a new, fresh design. But, you can avoid making mistakes, and you can achieve your goals if you take the time to educate yourself and get hands-on experience. To help you get started, here are seven golden tips for redesigning your website:&lt;/p&gt;

&lt;p&gt;When you think of redesigning your website, you probably think big and bold. It's a perfect time to create a powerful and dramatic new look to your website. But the world is a little different than what you might expect.&lt;/p&gt;

&lt;p&gt;A great way to start is by considering the importance of a visitors' first impression. Sometimes we jump to our websites with the goal of looking at our work and moving forward. But there are many times when a visitor has no idea what they are looking at.So, take a few minutes to develop a strategy on how you want to present yourself to visitors.&lt;/p&gt;

&lt;p&gt;When redesigning a website, there's no better way to make sure you &lt;a href="https://psdtowpservice.com/wordpress-customization-service/"&gt;get the job done from professionals&lt;/a&gt;. If you can't find a designer or developer that's up to speed, but you want to learn, it's time to expand your network and use the power of social media to help.&lt;/p&gt;

&lt;h2&gt;1. Don't use the same layout as your old site.&lt;/h2&gt;

&lt;p&gt;Nothing makes life more difficult than an old site that looks the same as before. If you’re planning on redesigning your website, do it right. Start by identifying the look and feel of your old site and what it does.&lt;/p&gt;

&lt;p&gt;Then, create a style guide that shows the direction of your new site.We recently redesigned our website from the ground up with a new logo, new colors, and a better overall feel. This means we have updated our old site to match, so we can share the same layout as before. We also wanted to make sure our blog was still as helpful as possible.&lt;/p&gt;

&lt;p&gt;A lot of people are stuck with a layout they don't like and don't know how to change it. A lot of times it's not easy to change and, in some cases, it's not even possible because you don't have an HTML template. And, because you don't have an HTML template, you have to create that layout from scratch. And, this is where things get complicated for a lot of people.&lt;/p&gt;

&lt;p&gt;For years, site publishers have been forced to use the same layout for the same website. The reason for this is that they were able to choose from a few designs that were already perfected by designers. Now, with rapid changes in design trends, you are expected to come up with a fresh design. Since you are not able to follow the same process as earlier, design your new layout with a different approach.&lt;/p&gt;

&lt;h2&gt;2. Use a responsive design when building your site&lt;/h2&gt;

&lt;p&gt;Responsive design has become increasingly important in web design lately. To understand why, let's take a look at a site that doesn't &lt;a href="https://psdtowpservice.com/4-ways-to-convert-your-psd-sketch-into-a-responsive-website/"&gt;use responsive design&lt;/a&gt;—let's say, a newspaper or magazine site. When you visit that site, you'll notice that it has a fixed layout. That means it has a fixed width and fixed height. If you did a Google search for that site, you'll notice that your results will be returned in a fixed width, fixed height view of the site. That means that your browser will have to "remember" the width and height of the site each time you visit it. This can be very frustrating.&lt;/p&gt;

&lt;p&gt;When building a website, the possibilities are endless, but when you split your time between multiple projects, the next thing you know, you’re overworked, underpaid, and exhausted. If the idea of having multiple projects at any given time doesn’t scare you away. Responsive design has become increasingly important in web design lately.&lt;/p&gt;

&lt;p&gt;To understand why, let's take a look at a site that doesn't use responsive design—let's say, a newspaper or magazine site. When you visit that site, you'll notice that it has a fixed layout. That means it has a fixed width and fixed height.&lt;/p&gt;

&lt;p&gt;If you did a Google search for that site, you'll notice that your results will be returned in a fixed width, fixed height view of the site. That means that your browser will have to "remember" the width and height of the site each time you visit it. This can be very frustrating.&lt;/p&gt;

&lt;h2&gt;3. Be honest about your experience and skills&lt;/h2&gt;

&lt;p&gt;What your competitors have done and what features you should keep. But instead of following their example blindly, ask yourself what makes your website special. It's important to keep in mind that your visitors won't want to spend time on your website if they don't have anything to use. Make sure you provide them with something concrete and useful.&lt;/p&gt;

&lt;p&gt;There are a lot of people out there who have a website. But they all seem to be doing something different. They write, sell, offer help, or have a blog. It seems as though there is no one-size-fits-all approach to landing search traffic and &lt;a href="https://www.business2community.com/content-marketing/techniques-to-warm-up-your-cold-traffic-and-build-connections-02262097"&gt;converting visitors into customers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Having a stable professional background on the internet is a great thing for your resume, but it doesn't mean it's enough. In the eyes of a potential employer, chronicling how awful your old job was might not be the best way to get the job. So can you talk about your old job without getting into the dirt?&lt;/p&gt;

&lt;p&gt;Yes you can, and it's not about lying or exaggerating. Being honest is a great thing for your resume, but it doesn't mean it's enough. In the eyes of a potential employer, chronicling how awful your old job was might not be the best way to get the job. So can you talk about your old job without getting into the dirt? Yes you can, and it's not about lying&lt;/p&gt;

&lt;h2&gt;4. Don't use pop ups&lt;/h2&gt;

&lt;p&gt;You've seen them, a popup ad or blinking banner that has suddenly appeared in the middle of your website. No matter what the popup says, they all have one thing in common: they're annoying. So, why would you want to have one of these annoying ads on your site?&lt;/p&gt;

&lt;p&gt;Well, maybe you're getting a lot of clicks from your visitors right now. Or, maybe you want to try some analytics to see where your visitors are coming from. Either way, you want to find out what your visitors do after they get to your site so that you can improve on your conversion rates.&lt;/p&gt;

&lt;p&gt;Most of us have used a pop up in the past. The idea was to get some attention for something we deemed important. Unfortunately the bad stuff was what people remembered. A pop up is a form that works quickly. No one will read it, no one will click it, and no one will even see it until it is too late.&lt;/p&gt;

&lt;h2&gt;5. Use Google Fonts to redesign your website &lt;/h2&gt;

&lt;p&gt;Google Fonts are one of the many tools that Google provides to web designers to help them design their websites with a variety of different fonts and styles. You can use Google Fonts by going to Google Fonts, creating a custom font and then uploading it to your website.&lt;/p&gt;

&lt;p&gt;While not everyone has the budget to &lt;a href="https://psdtowpservice.com/wordpress-expert/"&gt;hire a full-time designer&lt;/a&gt;, everyone can benefit from incorporating some of the typefaces Google offers into their website. Google Fonts is a free library of fonts that are available to download by anyone. These fonts are easily added to a website's HTML code by adding them directly to the &amp;lt;head&amp;gt; section.&lt;/p&gt;

&lt;p&gt;The possibilities for typeface combinations are endless, and you can see some of the results below.Google Fonts are a great way to make your website more beautiful and unique. You can change the colors, sizes, and the styles of fonts, and you don't have to worry about the compatibility issues with older browsers.&lt;/p&gt;

&lt;h2&gt;6. Keep your website updated&lt;/h2&gt;

&lt;p&gt;Make sure your website is updated and your subscribers are always up to date. Make sure you read your emails and respond to them immediately. Don't let your subscribers have to keep contacting you for answers. &lt;/p&gt;

&lt;p&gt;Always try to keep your subscribers up to date on the latest news, events, and so on. If you're interested in finding out more about anything, your subscribers will be interested in it too. When you decide to redesign a website, you may be fairly confident in your choice, but have you considered all the things you can do to keep your site updated?&lt;/p&gt;

&lt;h2&gt;7. Consider having a pre-launch page&lt;/h2&gt;

&lt;p&gt;There are many people out there who have a website that is well past its usefulness; and they want to redesign it so they can make it more user friendly and to &lt;a href="https://christianmarketingexperts.com/seo/"&gt;get better search engine rankings&lt;/a&gt;. Additionally, they want to create a new website that is going to serve all their future needs. The problem is they have never built a website before. So what can they do?&lt;/p&gt;

&lt;p&gt;Most website owners know that having a pre-launch page can help to get more traffic to your new design, but what about those that don't yet know your new design? You can help them out by "pre-launching" your new design.&lt;/p&gt;

&lt;p&gt;What this means is publishing a page on your website that will look exactly the same as your new design, but will serve as a placeholder when visitors to your website land on it. That way, when you do publish your new design, visitors will be able to immediately see your new design.&lt;/p&gt;

</description>
      <category>website</category>
      <category>design</category>
    </item>
    <item>
      <title>Best Practices for React Developers in 2021</title>
      <author>Morgan</author>
      <pubDate>Mon, 13 Sep 2021 20:39:45 +0000</pubDate>
      <link>https://dev.to/grapecity/best-practices-for-react-developers-in-2021-42a</link>
      <guid>https://dev.to/grapecity/best-practices-for-react-developers-in-2021-42a</guid>
      <description>&lt;p&gt;It may be hard to believe, but this year React turned eight years old. In the technology landscape, especially on client-side web development, this is quite remarkable. How can a simple library for building UIs be that old and still be this relevant?&lt;/p&gt;

&lt;p&gt;The reason is, React not only revolutionized the building of UIs, but it also made functional paradigms for building UIs popular. And even then, React did not stop there. They continued to push innovative concepts forward without breaking the existing codes. As a result, React is stabler, leaner, and faster than ever. &lt;/p&gt;

&lt;p&gt;But, the downside of React's ever-evolving nature is that best practices change over time. To harvest some of the newest performance benefits, one needs to carefully study the new additions. And figuring that out is not always easy, sometimes it's not straightforward at all.&lt;/p&gt;

&lt;p&gt;In this article, we will take a look at the best practices that apply to React in 2021. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conventions"&gt;
  &lt;/a&gt;
  Conventions
&lt;/h4&gt;

&lt;p&gt;To structure your work with React, it makes sense to follow a few conventions. Some conventions are even required for the tooling to work smoothly. For example, if you name your components using camelCase, then the following would not work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myComponent = () =&amp;gt; &amp;lt;div&amp;gt;Hello World!&amp;lt;/div&amp;gt;;

ReactDOM.render(&amp;lt;myComponent /&amp;gt;, document.querySelector('#app'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is because the standard JSX transformer from Babel (or TypeScript) uses the naming convention to decide whether to pass a string or an identifier to React.&lt;/p&gt;

&lt;p&gt;As a result, the transpiled code would look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myComponent = () =&amp;gt; React.createElement("div", null, "Hello World!");

ReactDOM.render(React.createElement("myComponent", null), document.querySelector('#app'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is not what we want. Instead, we can use PascalCase. In this case, the JSX transformer will detect the usage of a custom component and the required reference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyComponent = () =&amp;gt; &amp;lt;div&amp;gt;Hello World!&amp;lt;/div&amp;gt;;

ReactDOM.render(&amp;lt;MyComponent /&amp;gt;, document.querySelector('#app'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, everything is fine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ReactDOM.render(React.createElement(MyComponent, null), document.querySelector('#app'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While other conventions are less strict, they should be still followed. For instance, it makes sense to use quoted string attributes instead of JSX expressions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// avoid
&amp;lt;input type={'text'} /&amp;gt;

// better
&amp;lt;input type="text" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Likewise, it makes sense to keep the attribute quote style consistent. Most guides will propagate using single-quoted strings in JS expressions, and double-quoted strings for these React props. In the end, it doesn’t matter as long as its usage within the codebase is consistent. &lt;/p&gt;

&lt;p&gt;Speaking of conventions and props, these should also follow the standard JS naming convention of using camelCase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// avoid
const MyComponent = ({ is_valid, Value }) =&amp;gt; {
  // ...
  return null;
};

// better
const MyComponent = ({ isValid, value }) =&amp;gt; {
  // ...
  return null;
}; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, be sure not to misuse the names of the built-in HTML component props (for example, style or className). If using these props, forward them to the respective in-built component. Also, keep them at the original type (for example, for style a CSS style object and for className a string).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// avoid
const MyComponent = ({ style, cssStyle }) =&amp;gt; {
  if (style === 'dark') {
    // ...
  }

  // ...
  return &amp;lt;div style={cssStyle}&amp;gt;...&amp;lt;/div&amp;gt;;
};

// better
const MyComponent = ({ kind, style }) =&amp;gt; {
  if (kind === 'dark') {
    // ...
  }

  // ...
  return &amp;lt;div style={style}&amp;gt;...&amp;lt;/div&amp;gt;;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This makes the intention of the props much clearer and establishes a consistency level that is critical for efficient usage of larger component collections.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#component-separation"&gt;
  &lt;/a&gt;
  Component Separation
&lt;/h4&gt;

&lt;p&gt;One of React's biggest advantages is its ability to easily test and reason about components. However, this is only possible if a component is small and dedicated enough to support that. &lt;/p&gt;

&lt;p&gt;Back when React first started gaining popularity, they introduced the concept of a controller and a view component to efficiently structure larger components. Even though today we have dedicated state containers and hooks, it still makes sense to structure and categorize components in some way.&lt;/p&gt;

&lt;p&gt;Let's consider the simple example of loading some data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyComponent = () =&amp;gt; {
  const [data, setData] = React.useState();

  React.useEffect(() =&amp;gt; {
    let active = true;

    fetch('...')
      .then(res =&amp;gt; res.json())
      .then(data =&amp;gt; active &amp;amp;&amp;amp; setData(data))
      .catch(err =&amp;gt; active &amp;amp;&amp;amp; setData(err));


    return () =&amp;gt; {
      active = false;
    };
  }, []);

  return (
    data === undefined ?
      &amp;lt;div&amp;gt;Loading ...&amp;lt;/div&amp;gt; :
      data instanceof Error ?
        &amp;lt;div&amp;gt;Error!&amp;lt;/div&amp;gt; :
        &amp;lt;div&amp;gt;Loaded! Do something with data...&amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, a componentless action would be better suited here. But the point is that the written component has to both gather the data and display it.&lt;/p&gt;

&lt;p&gt;A cleaner model would imply a separation that could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyComponent = ({ error, loading, data }) =&amp;gt; {
  return (
    loading ?
      &amp;lt;div&amp;gt;Loading ...&amp;lt;/div&amp;gt; :
      error ?
        &amp;lt;div&amp;gt;Error!&amp;lt;/div&amp;gt; :
        &amp;lt;div&amp;gt;Loaded! Do something with data...&amp;lt;/div&amp;gt;
  );
};

const MyLoader = () =&amp;gt; {
  const [data, setData] = React.useState();

  React.useEffect(() =&amp;gt; {
    let active = true;

    fetch('...')
      .then(res =&amp;gt; res.json())
      .then(data =&amp;gt; active &amp;amp;&amp;amp; setData(data))
      .catch(err =&amp;gt; active &amp;amp;&amp;amp; setData(err));

    return () =&amp;gt; {
      active = false;
    };
  }, []);

  const isError = data instanceof Error;

  return (
    &amp;lt;MyComponent
      error={isError ? data : undefined}
      loading={data === undefined}
      data={!isError ? data : undefined} /&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To further improve it, the most ideal separation is extraction into a custom hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function useRemoteData() {
  const [data, setData] = React.useState();

  React.useEffect(() =&amp;gt; {
    let active = true;

    fetch('...')
      .then(res =&amp;gt; res.json())
      .then(data =&amp;gt; active &amp;amp;&amp;amp; setData(data))
      .catch(err =&amp;gt; active &amp;amp;&amp;amp; setData(err));

    return () =&amp;gt; {
      active = false;
    };
  }, []);

  const isError = data instanceof Error;

  return [data === undefined, !isError ? data : undefined, isError ? data : undefined];
}

const MyComponent = () =&amp;gt; {
  const [loading, data, error] = useRemoteData();

  return (
    loading ?
      &amp;lt;div&amp;gt;Loading ...&amp;lt;/div&amp;gt; :
      error ?
        &amp;lt;div&amp;gt;Error!&amp;lt;/div&amp;gt; :
        &amp;lt;div&amp;gt;Loaded! Do something with data...&amp;lt;/div&amp;gt;
  );
}; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#hooks"&gt;
  &lt;/a&gt;
  Hooks
&lt;/h4&gt;

&lt;p&gt;React hooks are among the most debated technology features in the frontend space. When they were first introduced, they were considered elegant and innovative. On the flip side, there have been a growing number of critics over the years.&lt;/p&gt;

&lt;p&gt;Pros and cons aside, in general, using hooks can be a best practice depending on the scenario.&lt;/p&gt;

&lt;p&gt;Keep in mind that some hooks are there to help you with performance optimizations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;useMemo helps avoid doing expensive calculations on every re-render.&lt;/li&gt;
&lt;li&gt;useCallback produces stable handlers, similarly to useMemo, but more conveniently geared towards callbacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example, let’s look at the following code without useMemo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyComponent = ({ items, region }) =&amp;gt; {
  const taxedItems = items.map(item =&amp;gt; ({
      ...item,
      tax: getTax(item, region),
  }));

  return (
      &amp;lt;&amp;gt;
        {taxedItems.map(item =&amp;gt; &amp;lt;li key={item.id}&amp;gt;
          Tax: {item.tax}
        &amp;lt;/li&amp;gt;)}
      &amp;lt;/&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Considering there might be a lot of items in that array, and that the getTax operation is quite expensive (no pun intended), you’d have quite a bad re-rendering time, assuming minimal items and region change.&lt;/p&gt;

&lt;p&gt;Therefore, the code would benefit a lot from useMemo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyComponent = ({ items, region }) =&amp;gt; {
  const taxedItems = React.useMemo(() =&amp;gt; items.map(item =&amp;gt; ({
      ...item,
      tax: getTax(item, region),
  })), [items, region]);

  return (
      &amp;lt;&amp;gt;
        {taxedItems.map(item =&amp;gt; &amp;lt;li key={item.id}&amp;gt;
          Tax: {item.tax}
        &amp;lt;/li&amp;gt;)}
      &amp;lt;/&amp;gt;
  );
}; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The beauty of useMemo is that it's almost invisible. As you can see, all we need to do is to wrap the computation in a function. That's it. No other changes required.&lt;/p&gt;

&lt;p&gt;A more subtle issue is the lack of useCallback. Let's have a look at some very generic code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyComponent = () =&amp;gt; {
  const save = () =&amp;gt; {
    // some computation
  };
  return &amp;lt;OtherComponent onSave={save} /&amp;gt;;
}; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we don't know anything about OtherComponent, but there are certain possible changes originating here, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It’s a pure component and will prevent re-rendering, as long as all props remain untouched.&lt;/li&gt;
&lt;li&gt;It uses the callback on either some memoization or effect hooks.&lt;/li&gt;
&lt;li&gt;It passes the callback to some component that uses one of these properties.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Either way, passing values as props that essentially have not changed should also result in values that have not changed. The fact that we have a function declared inside our rendering function will be problematic.&lt;/p&gt;

&lt;p&gt;An easy way out is to write the same thing using useCallback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyComponent = () =&amp;gt; {
  const save = React.useCallback(() =&amp;gt; {
    // some computation
  }, []);
  return &amp;lt;OtherComponent onSave={save} /&amp;gt;;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the recomputed callback is taken only if one of the dependencies given in the array changed. Otherwise, the previous callback (for instance, a stable reference) is returned.&lt;/p&gt;

&lt;p&gt;Like before, there are almost no code changes required for this optimization. As a result, you should always wrap callbacks using useCallback.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h4&gt;

&lt;p&gt;Speaking of pure components, while class components had the PureComponent abstraction, a functional pure component can be introduced to React explicitly using memo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// no memoed component
const MyComponent = ({ isValid }) =&amp;gt; (
  &amp;lt;div style=\{{ color: isValid ? 'green' : 'red' }}&amp;gt;
    status
  &amp;lt;/div&amp;gt;
);

// memoed component
const MyComponent = React.memo(({ isValid }) =&amp;gt; (
  &amp;lt;div style=\{{ color: isValid ? 'green' : 'red' }}&amp;gt;
    status
  &amp;lt;/div&amp;gt;
));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://reactjs.org/docs/react-api.html"&gt;React documentation&lt;/a&gt; is quite detailed about memo. It says: “If your component renders the same result given the same props, you can wrap it in a call to React.memo for a performance boost in some cases by memoizing the result. This means that React will skip rendering the component, and reuse the last rendered result.”&lt;/p&gt;

&lt;p&gt;Keep in mind that — like any other comparison done by React — the props are only shallowly compared. Therefore, this optimization is only applied if we are careful what to pass in. For instance, if we use useMemo and other techniques for complex props such as arrays, objects, and functions.&lt;/p&gt;

&lt;p&gt;You may have noticed that we exclusively used functional components. As a matter of fact, since the introduction of hooks, you can practically work without class components.&lt;/p&gt;

&lt;p&gt;There are only two possible reasons to still use class components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You want to have access to the more sophisticated life cycle events. For example, shouldComponentUpdate.&lt;/li&gt;
&lt;li&gt;You want to introduce error boundaries.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, even in these cases, you might just need to write one React class component to fulfill your needs. Look at this boundary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export class Boundary extends React.Component {
  state = {
    error: undefined,
  };

  componentDidCatch(error) {
    this.setState({
      error,
    });
  }

  render() {
    const { error } = this.state;
    const { children, ShowError } = this.props;

    if (error) {
      return &amp;lt;ShowError error={error} /&amp;gt;;
    }

    return children;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not only will the component catch any errors which may appear in its children, but it will also display a fallback component passed in as ShowError receiving a single prop: the error.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#operators"&gt;
  &lt;/a&gt;
  Operators
&lt;/h4&gt;

&lt;p&gt;Some operators can be used to simplify the tree construction in React. For instance, the ternary operator allows us to write code that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {currentUser ? &amp;lt;strong&amp;gt;{currentUser}&amp;lt;/strong&amp;gt; : &amp;lt;span&amp;gt;Not logged in&amp;lt;/span&amp;gt;}
&amp;lt;/div&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Boolean operators such as &amp;amp;&amp;amp; and || may also be useful, but there are a few traps to watch out for. As an example, look at this code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {numUsers &amp;amp;&amp;amp; &amp;lt;i&amp;gt;There are {numUsers} users logged in.&amp;lt;/i&amp;gt;}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming that numUsers is always a number between 0 and the total number of users, we'd end up with the expected output if numUsers is positive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;i&amp;gt;There are 5 users logged in.&amp;lt;/i&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, for the edge case of zero users, we'd get this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  0
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which may not be what we wanted, so a boolean conversion or more explicit comparison could help here. In general, the following is more readable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {numUsers &amp;gt; 0 &amp;amp;&amp;amp; &amp;lt;i&amp;gt;There are {numUsers} users logged in.&amp;lt;/i&amp;gt;}
&amp;lt;/div&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, in the zero users edge case scenario we get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the ternary operator as an exclusive boolean operator avoids the issue completely. But what about a state where we don't want to render anything? We could either use false or an empty fragment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {numUsers ? &amp;lt;i&amp;gt;There are {numUsers} users logged in.&amp;lt;/i&amp;gt; : &amp;lt;&amp;gt;&amp;lt;/&amp;gt;}
&amp;lt;/div&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The empty fragment has the advantage of giving us the ability to just add content later. However, for users less familiar with React, it could look a bit strange.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;In this article, we went over some of the best practices that make your React codebase easier to work with. By switching over from class components to functional components, you can dive more into hooks. This will provide the ability to automatically introduce a great separation of concerns, where the behavioral aspects are all done in functions and rendering is defined within components.&lt;/p&gt;

&lt;p&gt;By following a set of useful conventions, together with some techniques such as the use of the right operators, hooks, and separation of concerns, you should end up with a clean codebase that can be maintained and extended quite easily.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>Decouple your DAGs with an event-driven architecture on AWS</title>
      <author>Tom Milner</author>
      <pubDate>Mon, 13 Sep 2021 20:08:39 +0000</pubDate>
      <link>https://dev.to/aws-builders/decouple-your-dags-with-an-event-driven-architecture-on-aws-bk</link>
      <guid>https://dev.to/aws-builders/decouple-your-dags-with-an-event-driven-architecture-on-aws-bk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Applying domain-driven design and an event-driven architecture to the orchestration of our services has given our teams some very practical benefits in their day-to-day work on development and support. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h1&gt;

&lt;p&gt;Up until recently, we ran our main scoring job in one big DAG running in Airflow. This DAG calls services developed and maintained by at least 3 separate teams. With this setup, we were tightly coupling our systems, our processes (on-call, support) and our development and technology choices.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eI_cboKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ds0z3wyluo28u83p0tp6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eI_cboKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ds0z3wyluo28u83p0tp6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In practice, here are a couple of real world problems we were running into:&lt;/p&gt;

&lt;p&gt;1) The upstream team had several variations of their steps within the DAG. Each variation needed to have our teams steps copied and maintained in separate DAGs. Decoupling allows us to keep all our steps in a single DAG and to know where exactly our services are being orchestrated from.&lt;br&gt;
2) The decision to use Airflow was made by the upstream team as it made sense for their skills and technologies. Decoupling will also allow us to use a technology that may be better suited to our teams skills and technologies. For example, we could move to Step Functions if we wanted. We will not be bound to another team or domains technology choices.&lt;br&gt;
3) In addition to being on a mailing list for all alerts from the DAG, having to troubleshoot any failure may involve going through the larger DAG. While this may seem minor, situations like these can take a toll on a developer's productivity. Having our own separate DAG allows us to focus on our own services.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#domain-driven-design"&gt;
  &lt;/a&gt;
  Domain Driven Design
&lt;/h2&gt;

&lt;p&gt;The first step was to identify the different domains represented within the larger DAG. From the outside, these may seem simple. The core services can be easy to identify but the boundaries are harder to identify. Where does one domain end and another begin? Our criteria for each domain was resolved around which team supported the service called. In addition, it was agreed the upstream domain was responsible for publishing an event when a material step in the DAG had completed. The downstream domain was responsible to consume that event. Using these guidelines, we were able to split the DAG out into 3 separate domains.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bkuUKRPT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76e2s6gtmh7xlypd6xs4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bkuUKRPT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76e2s6gtmh7xlypd6xs4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#communication-between-domains"&gt;
  &lt;/a&gt;
  Communication between domains
&lt;/h2&gt;

&lt;p&gt;We knew we needed to communicate between domains. This communication would involve more than just a marker to say that an event had happened. We also needed to pass some parameters between domains. These parameters were necessary to the execution of the end-to-end flow and needed to be passed from domain to domain. &lt;/p&gt;

&lt;p&gt;The term event-driven has become ubiquitous in modern software development but what does it mean? What exactly is an event? According to AWS&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An event is a change in state, or an update, like an item being placed in a shopping cart on an e-commerce website. Events can either carry the state (the item purchased, its price, and a delivery address) or events can be identifiers (a notification that an order was shipped).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using this definition, we would able to use the event to pass information from one domain to another. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-solution"&gt;
  &lt;/a&gt;
  Technical solution
&lt;/h2&gt;

&lt;p&gt;While our Airflow clusters are hosted on-premise, we decided early on that we wanted to use AWS services to publish and subscribe to events. We have an internal goal to host our services on AWS and to use a serverless service where we can. Ultimately, the SNS Fanout to SQS pattern fitted well to our requirements. For more information on this pattern, see this post on the AWS blog.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/compute/enriching-event-driven-architectures-with-aws-event-fork-pipelines/"&gt;https://aws.amazon.com/blogs/compute/enriching-event-driven-architectures-with-aws-event-fork-pipelines/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This pattern allows us to separate out the publisher and subscriber into distinct services. The upstream service publishes an SNS topic with the event details. Each downstream service owns a separate SQS queue that subscribes to that topic. A JSON document can be passed between both services to communicate any necessary parameters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz-3HJGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86o179nxa2ywdxa1umxb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz-3HJGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86o179nxa2ywdxa1umxb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1) This is the upstream Airflow DAG. Once it has passed a certain point, a JSON document is passed via API Gateway to an SNS topic. &lt;br&gt;
2) SNS immediately informs all subscribers that a new event has been received. The JSON document is passed along to all subscribers.&lt;br&gt;
3) In the downstream domain, an FIFO SQS queue is subscribed to the SNS topic. &lt;br&gt;
4) The first step in the downstream DAG polls the SQS queue on a regular interval for messages using API Gateway. If a message is on the queue, the step validates the message to see if it is properly formed. If so, it kicks off the DAG with the parameters from the JSON document and deletes the message from the queue via API Gateway.&lt;/p&gt;

&lt;p&gt;An obvious advantage of this design is that when multiple SQS queues can subscribe to the SNS topic without impacting on the upstream DAG or other subscribed SQS queues.&lt;/p&gt;

&lt;p&gt;Note: No Lambdas were harmed in the development of this application. Serverless is about more than Lambda.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cdk"&gt;
  &lt;/a&gt;
  CDK
&lt;/h2&gt;

&lt;p&gt;We used CDK to deploy our services. This construct is very similar to what we used. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://constructs.dev/packages/@aws-solutions-constructs/aws-sns-sqs/v/1.120.0?lang=python"&gt;https://constructs.dev/packages/@aws-solutions-constructs/aws-sns-sqs/v/1.120.0?lang=python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, you will need to split out the SQS queue into the downstream domains code base parameterized with the name of the SNS topic. This is still a manual step for us but we are investigating the use of AWS Systems Manager Parameter Store to store and retrieve the name of relevant topic within the CI/CD process.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;Utilizing AWS services to facilitate an event-driven architecture  has been a game-changer for us. It is a relatively simple change in our case but provides several powerful benefits.&lt;/p&gt;

&lt;p&gt;To find out more about how AWS can help you decouple your applications and take advantage of event driven architectures, check out this link:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/event-driven-architecture/"&gt;https://aws.amazon.com/event-driven-architecture/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To check out the individual services used, use the links below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/sqs/"&gt;https://aws.amazon.com/sqs/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aws.amazon.com/sns/"&gt;https://aws.amazon.com/sns/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aws.amazon.com/api-gateway/"&gt;https://aws.amazon.com/api-gateway/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>eventdriven</category>
      <category>serverless</category>
    </item>
    <item>
      <title>An insight into Norway's recycling program</title>
      <author>56-magdeline</author>
      <pubDate>Mon, 13 Sep 2021 19:47:25 +0000</pubDate>
      <link>https://dev.to/56magdeline/trash-to-treasure-32oi</link>
      <guid>https://dev.to/56magdeline/trash-to-treasure-32oi</guid>
      <description>&lt;p&gt;You would have thought running out of rubbish would be a blessing rather than a curse. Yet in Norway, did you know that lack of waste is becoming a major headache for the waste management business?!! &lt;br&gt;
Since a 2009 ban on using plastic bottles and landfills, the country has invested in modern waste-to-energy incineration plants with enormous capacity for burning waste and creating heat energy which is fed to private houses and businesses and an alternative to use aluminium canes instead of plastic bottles.&lt;br&gt;
   &lt;strong&gt;Why is it so Important?????&lt;/strong&gt;&lt;br&gt;
      In addition to its negative environmental impacts, plastic bottles have an impact on human health.&lt;/p&gt;

&lt;p&gt;Micro plastics contamination is a &lt;strong&gt;stunning 93%&lt;/strong&gt; of the total world consumption. &lt;br&gt;
While Recycling plastics and promoting renewable energy also preserves the world’s natural resources, they also reduce the risk of environmental disasters or the problems associated with natural gas leaks.&lt;br&gt;&lt;br&gt;
With fuel diversification, through different power plants using different energy sources, it is possible to create reliable power supplies from burning waste to enhance energy security, ensuring there is enough to meet our demands&lt;br&gt;
&lt;strong&gt;How dangerous is Microplastic consumption???&lt;/strong&gt;&lt;br&gt;
Globally-sourced bottled waters they tested at levels two times higher than those they'd previously recorded in tap water samples. &lt;br&gt;
Micro plastics were also recently discovered in all three sides of the human placenta - mom, baby, and chorionic membrane and experts estimate that we are all ingesting roughly a credit’s card worth (5 grams) of plastic each week with effects on our health enormously. &lt;br&gt;
Beverages packaged in aluminium cans reduce micro plastics exposure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aluminium cans for Plastic Bottle Recycling…&lt;/strong&gt;&lt;br&gt;
The aluminium bottle generator Vending Machine is where user empty the &lt;br&gt;
plastic bottles for recycling. In this the user puts in bottle and gets credit points or an aluminium bottle. &lt;br&gt;
 ![&lt;a href="https://cms.qz.com/wp-content/uploads/2020/09/b1617d52-6948-4aa8-b813-7f5cd591a7dc-e1601471779847.jpg?quality=75&amp;amp;strip=all&amp;amp;w=1100&amp;amp;h=619"&gt;https://cms.qz.com/wp-content/uploads/2020/09/b1617d52-6948-4aa8-b813-7f5cd591a7dc-e1601471779847.jpg?quality=75&amp;amp;strip=all&amp;amp;w=1100&amp;amp;h=619&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;The main functions of the machine include bottle acceptance, fill detection and alerting the authorities when the machine is fill. &lt;br&gt;
Proposed system uses a monitoring technique to monitors the machine. This can help the authorities to get real time information about the machine. &lt;br&gt;
The machine fill detection is based on an IR sensor placed on the machine which could be used to detect the filled level of the machine. &lt;br&gt;
For interfacing the sensor with the server we use a Bluetooth module that enables serial port communication. If the level is greater than threshold value, a message is sent to authorities through GSM module. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Norwegian waste wasted in Sweden…&lt;/strong&gt;&lt;br&gt;
The market works like any other market, but the big difference is that we are not paying for the waste. The waste holder is actually paying to get rid of the waste.&lt;br&gt;
 Sweden is building a lot of waste incinerators, and they're now competing in the Norwegian market.&lt;/p&gt;

&lt;p&gt;![&lt;a href="https://static.dw.com/image/18783672_303.jpg"&gt;https://static.dw.com/image/18783672_303.jpg&lt;/a&gt;]&lt;br&gt;
Trucks loaded with waste drive right past the Klemetsrud plant, heading for the Swedish border. Swedish incinerator plants can offer cheaper rates because many are older than their Norwegian counterparts and debt-free. &lt;/p&gt;

&lt;p&gt;Norway forces municipalities to take their waste to the treatment plant closest to them, not the cheapest…which is okay by me, because the trash does gets recycled.&lt;br&gt;
Energy generation works by producing power without having negative environmental impacts, such as the release of greenhouse gases like carbon dioxide.&lt;br&gt;
&lt;strong&gt;And yes, Clean Energy can Reduce Global Warming…..&lt;/strong&gt;&lt;br&gt;
Humans have been using fossil fuels for over 150 years and, as their use increased, so did the release of the greenhouse gases that are produced when these fuels are burned. These greenhouse gases trap heat in the atmosphere causing the temperature of the Earth to rise. &lt;br&gt;
Thus global warming is one symptom of climate change that has seen a rise in extreme weather events, shifting wildlife habitats and populations, rising sea levels and other impacts.&lt;br&gt;
Because renewable energy sources don’t emit greenhouse gases such as carbon dioxide, they do not contribute to global warming. &lt;br&gt;
&lt;strong&gt;Can Renewable Energy Replace Fossil Fuels?&lt;/strong&gt;&lt;br&gt;
These renewable sources mean that climate change is not being advanced, while measures such as reforestation can help to alleviate the damage already done to the climate, combining to reduce global warming.&lt;br&gt;
              As mentioned above, humans have been using fossil fuels for decades, meaning that the switch to clean energy has been relatively recent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Heat for 60,000 homes!!!!&lt;/strong&gt;&lt;br&gt;
Peering into a giant oven burning waste at between 850 and 1,000 degrees Celsius, we see how Oslo's waste-to-energy agency from the Klemetsrud incineration plant turns people's rubbish into heat for their homes in the capital.&lt;br&gt;
The heat from the incineration is used to heat water, and the water is sent off to the district heating system in Oslo, and also produces electricity from the steam.&lt;br&gt;
From this plant alone around 60,000 households in Oslo are provided with heat.&lt;br&gt;
The level of recycling in Norway is diving, and we are burning too much waste that could have been recycled.&lt;br&gt;
However, we need to campaign on behalf of our country’s waste management industry to keep rubbish as a means of energy. Not only is it better for business, but the terms ‘waste’ also means rubbish which should be recycled — like food, paper and plastics which is now burnt to keep the ovens going.&lt;br&gt;
 If this system is made available worldwide…mostly being applicable to drinks containers of all sizes, and available everywhere they are sold, it will make a huge difference to the plastic problem.&lt;/p&gt;

&lt;p&gt;Thankyou &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Form Handling Tutorial</title>
      <author>Abanoub George</author>
      <pubDate>Mon, 13 Sep 2021 19:41:07 +0000</pubDate>
      <link>https://dev.to/abanoub2017/form-handling-tutorial-2hel</link>
      <guid>https://dev.to/abanoub2017/form-handling-tutorial-2hel</guid>
      <description>&lt;p&gt;The Vue CLI is an awesome tool to kick-start your Vue projects. But by default — and rightly so — it comes with very little in the way of styling. Follow along and I’ll show you how to Create Form on Vue&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-set-up"&gt;
  &lt;/a&gt;
  Getting set up
&lt;/h3&gt;

&lt;p&gt;In order to show every step from start to finish, I’m going to create a new project from scratch. If you already have a project (that you set up with Vue CLI 3), you can skip this section.&lt;/p&gt;

&lt;p&gt;If you don’t already have Vue CLI version 3, &lt;a href="https://cli.vuejs.org/guide/installation.html"&gt;install it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now create the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;vue&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="nx"&gt;vue&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I named my app “vue-form”, but you can name yours whatever you like&lt;/p&gt;

&lt;p&gt;Once the app is created, move into the directory and serve the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;vue&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your new Vue app is available at &lt;a href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TrSQ2ZOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy83wzrlo8hlq3nli986.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TrSQ2ZOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy83wzrlo8hlq3nli986.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-bootstrap-styles"&gt;
  &lt;/a&gt;
  Adding Bootstrap styles
&lt;/h3&gt;

&lt;p&gt;I’m going to add a Bootstrap component to the app&lt;br&gt;
Still inside the &lt;code&gt;vue-form&lt;/code&gt; directory, install Bootstrap and its &lt;a href="https://getbootstrap.com/docs/4.0/getting-started/javascript/#dependencies"&gt;dependencies&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt; &lt;span class="nx"&gt;jquery&lt;/span&gt; &lt;span class="nx"&gt;popper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: If you’re not going to use Bootstrap’s JavaScript, and only going to use its styles, don’t worry about installing &lt;strong&gt;jQuery&lt;/strong&gt; or &lt;strong&gt;Popper.js.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, import it into the main script by adding these lines to the top of &lt;code&gt;vue-form/src/main.js:&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bootstrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bootstrap/dist/css/bootstrap.min.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Again, if you only want the styles, and not the JavaScript functionality, just leave off the first line and only include the CSS.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clear-the-project"&gt;
  &lt;/a&gt;
  Clear the Project
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;remove the &lt;code&gt;src/components/HelloWorld.vue&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6NvlDOqt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlc2kj72ze3fymboh0g8.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;remove all code in &lt;code&gt;src/App.vue&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hfoNHu7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwjluc9y4knymhwrfv6v.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#add-html-form-using-bootstrap-form"&gt;
  &lt;/a&gt;
  Add Html Form using Bootstrap Form
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--igzQxpKl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mte41sjnriaukaq7ku85.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--igzQxpKl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mte41sjnriaukaq7ku85.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
The form will be like &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WzLNUZCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dmbd7x72s85e28qrxri.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WzLNUZCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dmbd7x72s85e28qrxri.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#store-the-data"&gt;
  &lt;/a&gt;
  Store the Data
&lt;/h2&gt;

&lt;p&gt;we will create the object have all data from inputs we will store &lt;br&gt;
 it in &lt;code&gt;userInfo&lt;/code&gt; Object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#we-will-use-raw-vmodel-endraw-to-bind-the-value-form-inputs"&gt;
  &lt;/a&gt;
  We Will Use &lt;code&gt;v-model&lt;/code&gt; to bind the value form inputs
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: &lt;code&gt;v-model&lt;/code&gt; is the two way data binding in Vue.js bind the value from inputs  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H0-UDTfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/622l6fprsubr1gd206pw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H0-UDTfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/622l6fprsubr1gd206pw.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: we use the v-model like &lt;code&gt;v-model="userInfo.firstName"&lt;/code&gt; &lt;code&gt;userInfo.firstName&lt;/code&gt; write the userInfo as the main object and access the keys from this object&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#add-function-to-get-all-data"&gt;
  &lt;/a&gt;
  Add Function to get all Data
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="nx"&gt;methods&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.add function &lt;code&gt;addUser&lt;/code&gt; in methods to get all data form the userInfo Object and console.log the data &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;add the Function &lt;code&gt;addUser&lt;/code&gt; in Form to handle the Function
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GX1tZBni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2ysvaesuz7y6zh6ccxu.PNG" alt="Alt Text"&gt;
Note : &lt;code&gt;@submit.prevent="addUser()"&lt;/code&gt; use the prevent To stop this behavior,&lt;/li&gt;
&lt;li&gt;show the data in console will be like
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AbFoYvQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otvz0y4iqjzjm5bcty6a.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#lets-show-the-data-in-browser"&gt;
  &lt;/a&gt;
  lets show the data in Browser
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;add &lt;code&gt;showUserInfo&lt;/code&gt; as Boolean value in data to show the user information if user click in submit , by default will be &lt;code&gt;false&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;showUserInfo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;add Html Code 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lZ2dFlwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj0qgkhau8hke2vg0q2m.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;to switch the value of Boolean value from False to true to show the data
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;methods&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showUserInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#finall-the-form-and-user-information-will-be-like"&gt;
  &lt;/a&gt;
  Finall the Form and User Information will be like
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TLtDdKeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n68whetm986js3p3brvf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TLtDdKeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n68whetm986js3p3brvf.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#you-can-find-the-code-in-github"&gt;
  &lt;/a&gt;
  you can find the Code in &lt;a href="https://github.com/abanoub2017/vue-form"&gt;Github&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;And that’s it! i hope you enjoyed&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>bootstrap</category>
    </item>
    <item>
      <title>The free from Validation Framework cookbook 🌽</title>
      <author>Adam Crockett</author>
      <pubDate>Mon, 13 Sep 2021 19:28:24 +0000</pubDate>
      <link>https://dev.to/adam_cyclones/the-free-from-validation-framework-cookbook-4bj7</link>
      <guid>https://dev.to/adam_cyclones/the-free-from-validation-framework-cookbook-4bj7</guid>
      <description>&lt;p&gt;One attribute makes form validation frameworks completely redundant: &lt;code&gt;&amp;lt;form novalidate&amp;gt;&lt;/code&gt; is the star of the show, but it doesn't do what you think!&lt;/p&gt;

&lt;p&gt;But first, why do we have custom validation if html 5 has a huge plethora of validation attributes? I believe it's 2 fold, you cannot style the browser native validation messages, or the user has to support pre html 5 browsers (at this point, this ask is just sheer cruelty to frontend developers).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;novalidate&lt;/code&gt; is similar to &lt;code&gt;preventDefault()&lt;/code&gt; in that it prevents native browser behaviour, specifically validation messages, it actually hides the ugly native browser html 5 messaging you get if you use any html 5 validation attributes, such as &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;pattern&lt;/code&gt; and instead does nothing...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Soo you broke my form.. how is this validation?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's still validating but you have to switch over to JavaScript and manage the validation yourself... &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Kind of like a form validation framework but without any dependencies, loading, weight or new syntax?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yep, 😊 because HTMLFormElement and all inputs have a few methods and less well known tricks, tricks you might not know, you can easily pull of validation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tricks"&gt;
  &lt;/a&gt;
  Tricks 🐰🎩
&lt;/h2&gt;

&lt;p&gt;Let's see, to do this we will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTMLFormElement.checkValidity()&lt;/li&gt;
&lt;li&gt;HTMLInputElement.checkValidity()&lt;/li&gt;
&lt;li&gt;new FormData(someFormEl);&lt;/li&gt;
&lt;li&gt;all html 5 accessible validation attributes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Above are all the pieces you need in order to create accessable, JavaScript enabled, simple yet powerful form.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-react-vue-angular"&gt;
  &lt;/a&gt;
  But React, Vue, Angular
&lt;/h2&gt;

&lt;p&gt;People, your submit and on change events all have &lt;code&gt;target&lt;/code&gt; references to the actual element 😱, you can call these methods just like any other JavaScript that ever has, or ever will be. You can even ref too if you like.&lt;/p&gt;

&lt;p&gt;Do I use these techniques? yes I do in all of the above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-validation-on-submit"&gt;
  &lt;/a&gt;
  Simple validation on submit
&lt;/h2&gt;

&lt;p&gt;So because it's hard to describe for everything, let's do a React example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkValidity&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// form invalid!&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="nx"&gt;Stuff&lt;/span&gt; &lt;span class="nx"&gt;happens&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay from here we could just report some none specific error that might be fine in some cases and actually a security requirement in say a login form, but what if we want to check all the values of the form and find the broken thing. Off the top of my head there are a few ways, we could use &lt;code&gt;HTMLFormElement.elements&lt;/code&gt;to return a Node list of all elements in the array but that uses the DOM and might not fit with idiomatic styles of your given framework even though it's way easier! even so you could call &lt;code&gt;element[I]checkValidity()&lt;/code&gt; inside of a loop, that could help you work it out... Or we could do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkValidity&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// form invalid!&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formEntries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEntries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; 
        &lt;span class="c1"&gt;// Loop through and validate&lt;/span&gt;
        &lt;span class="nx"&gt;formEntries&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. Nothing more to say, no framework needed ♥️&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>angular</category>
      <category>vue</category>
    </item>
    <item>
      <title>Ceres Editor - My simple own code editor.</title>
      <author>Lucifer25x</author>
      <pubDate>Mon, 13 Sep 2021 19:18:30 +0000</pubDate>
      <link>https://dev.to/lucifer25x/ceres-editor-my-simple-own-code-editor-1df0</link>
      <guid>https://dev.to/lucifer25x/ceres-editor-my-simple-own-code-editor-1df0</guid>
      <description>&lt;p&gt;I maked this code editor using only html,css,js. I used electron.js, ace.js&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href="https://github.com/ceres-editor"&gt;https://github.com/ceres-editor&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to use React Context like a pro</title>
      <author>Pierre Ouannes</author>
      <pubDate>Mon, 13 Sep 2021 19:04:29 +0000</pubDate>
      <link>https://dev.to/pierreouannes/how-to-use-react-context-like-a-pro-11e2</link>
      <guid>https://dev.to/pierreouannes/how-to-use-react-context-like-a-pro-11e2</guid>
      <description>&lt;p&gt;Using &lt;a href="https://reactjs.org/docs/context.html"&gt;React's Context API&lt;/a&gt; is often very useful. I've found that there are several patterns that you should regularly use in combination with contexts in React, and these patterns aren't that well known.&lt;/p&gt;

&lt;p&gt;I'm sharing them in this article so you can start using React Contexts like a pro!&lt;/p&gt;

&lt;p&gt;As a quick reminder before we start, here's the vanilla hook based implementation of a context (that we'll use as an example for the different patterns):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// create context&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// the value that will be given to the context&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// fetch a user from a fake backend API&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// this would usually be your own backend, or localStorage&lt;/span&gt;
      &lt;span class="c1"&gt;// for example&lt;/span&gt;
      &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://randomuser.me/api/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;An error occurred&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;fetchUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// the Provider gives access to the context to its children&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Page&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// access the context value&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You are logged in as &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You are not logged in&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, the context is used to provide the logged-in &lt;code&gt;user&lt;/code&gt; object to the app. This context is then consumed by the &lt;code&gt;Page&lt;/code&gt; component that conditionally renders based on the &lt;code&gt;user&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;This is a very common use case in real-life React applications.&lt;/p&gt;

&lt;p&gt;Let's see how we can improve it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extract-the-react-context-logic-in-another-file"&gt;
  &lt;/a&gt;
  Extract the React Context logic in another file
&lt;/h2&gt;

&lt;p&gt;One thing I don't like in the code above is that the context logic is mixed in with the &lt;code&gt;App&lt;/code&gt; code when both have little to do with each other. The &lt;code&gt;App&lt;/code&gt; only wants to provide the context to its children and doesn't care about how this context is made.&lt;/p&gt;

&lt;p&gt;So let's extract all of this logic to an external file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-react-context-with-a-custom-provider"&gt;
  &lt;/a&gt;
  Use React Context with a custom Provider
&lt;/h3&gt;

&lt;p&gt;First, we'll create a &lt;code&gt;UserContextProvider&lt;/code&gt; component inside of a new file called &lt;code&gt;UserContext.jsx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This component is the one that will hold the logic for getting the value of the context (&lt;code&gt;user&lt;/code&gt;) and giving it to the &lt;code&gt;UserContext.Provider&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// create context&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserContextProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// the value that will be given to the context&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// fetch a user from a fake backend API&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// this would usually be your own backend, or localStorage&lt;/span&gt;
      &lt;span class="c1"&gt;// for example&lt;/span&gt;
      &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://randomuser.me/api/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;An error occured&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;fetchUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// the Provider gives access to the context to its children&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserContextProvider&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we're removed the above from our &lt;code&gt;App&lt;/code&gt; component, it's way cleaner:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserContextProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./UserContext&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserContextProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Page&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;UserContextProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// access the context value&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You are logged in as &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You are not logged in&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isn't it much nicer?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-react-context-with-a-custom-hook"&gt;
  &lt;/a&gt;
  Use React Context with a custom hook
&lt;/h3&gt;

&lt;p&gt;Unfortunately, there's still something bothering me in the code above.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;Page&lt;/code&gt; component, we are accessing the context by using the &lt;code&gt;useContext&lt;/code&gt; hook directly. But what if the component is not actually inside a &lt;code&gt;UserContextProvider&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Then the value would default to &lt;code&gt;undefined&lt;/code&gt; without us knowing. Of course, we could do a check for that in the &lt;code&gt;Page&lt;/code&gt; component, but that means we would have to do it in every context consumer, which would get annoying.&lt;/p&gt;

&lt;p&gt;It's much simpler to extract the &lt;code&gt;useContext&lt;/code&gt; line to a custom hook, and we will do the check there.&lt;/p&gt;

&lt;p&gt;Of course, you could argue that as our &lt;code&gt;UserContextProvider&lt;/code&gt; is at the top-level of our app it's unlikely that a component would live outside of it.&lt;/p&gt;

&lt;p&gt;Fair, but keep in mind that contexts aren't always at the top level. It's quite common for contexts to only be available in a section of the app, and in those cases it's quite easy to use a context where it's not available.&lt;/p&gt;

&lt;p&gt;Another benefit to doing that is that it saves us an import. Instead of having to import both the &lt;code&gt;useContext&lt;/code&gt; hook and the actual context itself (&lt;code&gt;UserContext&lt;/code&gt;), we now only have to import the custom consumer hook. Fewer lines to write! 😄&lt;/p&gt;

&lt;p&gt;Here's the resulting custom consumer hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// context consumer hook&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useUserContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// get the context&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// if `undefined`, throw an error&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;useUserContext was used outside of its Provider&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to use it, simply import the hook and use it in the &lt;code&gt;Page&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// access the context value&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useUserContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You are logged in as &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You are not logged in&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you ask me, our context usage now seems very nice! All of the logic related to the &lt;code&gt;UserContext&lt;/code&gt; sits in one file, the context is very simple to access using the &lt;code&gt;useUserContext&lt;/code&gt; hook and we will be warned whenever we try to access the context outside of the right provider.&lt;/p&gt;

&lt;p&gt;The code above is usually enough for most purposes, but sometimes you need to go further, usually for performance and optimization reasons.&lt;/p&gt;

&lt;p&gt;The next two sections explore ways to optimize your context. Bear in mind that it should only be used if you are indeed having performance and optimization issues. Otherwise it's safe to go with the simpler option from above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-careful-about-updating-context-values-and-memoize-them"&gt;
  &lt;/a&gt;
  Be careful about updating context values, and memoize them
&lt;/h2&gt;

&lt;p&gt;Imagine our &lt;code&gt;UserContext&lt;/code&gt; in a big app. Presumably, a lot of components are using the context.&lt;/p&gt;

&lt;p&gt;Now imagine that we are polling our backend every 15 seconds to see if the &lt;code&gt;user&lt;/code&gt; value changed somehow. For example we could be storing the number of credits a user has left in his account directly in the &lt;code&gt;user&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Want to learn how to do something every 15 seconds in a React app? You do it &lt;a href="https://devtrium.com/posts/set-interval-react"&gt;using intervals&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;If we do this naively, it means that every single component which uses that context will re-render every 15 seconds. Not great.&lt;/p&gt;

&lt;p&gt;You might say that polling your backend every 15 seconds for this info and storing it in the &lt;code&gt;user&lt;/code&gt; object isn't the best way to go about doing this.&lt;/p&gt;

&lt;p&gt;And you would be right. However, this situation and others like it frequently happen in production, where things aren't always ideal.&lt;/p&gt;

&lt;p&gt;This exact issue happened in my team a few months ago. Knowing how to avoid that problem is an important part of knowing how to effectively use context API in React.&lt;/p&gt;

&lt;p&gt;Let's see how to avoid that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#memoize-values-in-your-context-with-raw-usememo-endraw-and-raw-usecallback-endraw-"&gt;
  &lt;/a&gt;
  Memoize values in your context with &lt;code&gt;useMemo&lt;/code&gt; and &lt;code&gt;useCallback&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;It's usually a good idea to wrap context values with memoizing functions like &lt;code&gt;useMemo&lt;/code&gt; and &lt;code&gt;useCallback&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Context values are often used in dependency arrays in context consumers. If you don't memoize context values, you can end up with unwanted behaviors like &lt;code&gt;useEffect&lt;/code&gt; triggering unnecessarily.&lt;/p&gt;

&lt;p&gt;A change in those values could trigger dependency arrays in every context consumer, so it can have a sizeable impact on the affected components. And memoizing the value in the context is very effective since you only have to memoize the value once and it will work for all the components consuming the context.&lt;/p&gt;

&lt;p&gt;Here is &lt;a href="https://devtrium.com/posts/dependency-arrays"&gt;more information on dependency arrays&lt;/a&gt; if you are not sure about how they work.&lt;/p&gt;

&lt;p&gt;For example, let's say you have a &lt;code&gt;signout&lt;/code&gt; function inside the context. It's best to wrap it in a &lt;code&gt;useCallback&lt;/code&gt; hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserContextProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// the value that will be given to the context&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// sign out the user, memoized&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="c1"&gt;// fetch a user from a fake backend API&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// this would usually be your own backend, or localStorage&lt;/span&gt;
      &lt;span class="c1"&gt;// for example&lt;/span&gt;
      &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://randomuser.me/api/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;An error occured&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;fetchUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// the Provider gives access to the context to its children&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signout&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep in mind that memoizing won't always prevent unnecessary triggers. For example, the &lt;code&gt;user&lt;/code&gt; variable is an object. If you change that object through a &lt;code&gt;setState&lt;/code&gt;, as far as &lt;code&gt;useMemo&lt;/code&gt; is concerned the object is a new one (even if all the keys and the values are the same). This is because React is only doing a shallow equality test in dependency arrays.&lt;/p&gt;

&lt;p&gt;In that case, you should do the check yourself and only update the context value if necessary. To do that you could for example use &lt;a href="https://lodash.com/docs/4.17.15#isEqual"&gt;Lodash's &lt;code&gt;isEqual&lt;/code&gt;&lt;/a&gt; function that deeply compares two javascript objects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#separate-state-and-state-setters-if-necessary"&gt;
  &lt;/a&gt;
  Separate state and state setters (if necessary)
&lt;/h2&gt;

&lt;p&gt;To be clear, you usually don't need to do this. If you're careful about updating context values and they are memoized, you're very probably fine.&lt;/p&gt;

&lt;p&gt;But sometimes you might run into issues that will be solved by separating context state and context state setters.&lt;/p&gt;

&lt;p&gt;Here's what I mean by "context state" and "context state setter".&lt;/p&gt;

&lt;p&gt;In our last example you have the &lt;code&gt;user&lt;/code&gt; object, which is the "context state", and the &lt;code&gt;signout&lt;/code&gt; function, which is a "context state setter": it's used to change the "context state".&lt;/p&gt;

&lt;p&gt;Both don't need to be in the same provider. For example, a log-out button might only need the &lt;code&gt;signout&lt;/code&gt; function without caring about the current state of authentication.&lt;/p&gt;

&lt;p&gt;In the default case, that button would update every time the &lt;code&gt;user&lt;/code&gt; object changes, because a change in the &lt;code&gt;user&lt;/code&gt; object means a change in the context value which means an update to every consumer of the context.&lt;/p&gt;

&lt;p&gt;In situations where you care about this (and only in those), you can separate your state and your state setters in two different contexts.&lt;/p&gt;

&lt;p&gt;I believe this idea was first introduced by &lt;a href="https://kentcdodds.com/blog/how-to-optimize-your-context-value"&gt;Kent C. Dodds in this blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The implementation of that pattern is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;useCallback&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// create contexts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserContextState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserContextUpdater&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// context consumer hook&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useUserContextState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// get the context&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UserContextState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// if `undefined`, throw an error&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;useUserContextState was used outside of its Provider&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// context consumer hook&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useUserContextUpdater&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// get the context&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UserContextUpdater&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// if `undefined`, throw an error&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;useUserContextUpdater was used outside of its Provider&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserContextProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// the value that will be given to the context&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="c1"&gt;// fetch a user from a fake backend API&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// this would usually be your own backend, or localStorage&lt;/span&gt;
      &lt;span class="c1"&gt;// for example&lt;/span&gt;
      &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://randomuser.me/api/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;An error occured&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;fetchUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// the Providers gives access to the context to its children&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserContextState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserContextUpdater&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;signout&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;UserContextUpdater&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;UserContextState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UserContextProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useUserContextState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useUserContextUpdater&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The usage is very similar to before, as you can guess. You just have to choose to access the state or the state setters (or both). Of course if you often need both you can also create a hook that provides both out of the box, thus reproducing the previous behavior.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="err"&gt;···&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// access the context value&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useUserContextState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You are logged in as &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You are not logged in&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="err"&gt;···&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#only-use-react-context-if-you-really-need-it"&gt;
  &lt;/a&gt;
  Only use React Context if you really need it
&lt;/h2&gt;

&lt;p&gt;React Context is a great tool, but it can also be dangerous. As it's usually shared between a bunch of components, it can cause performance issues when abused and used for the wrong kind of state.&lt;/p&gt;

&lt;p&gt;Most of the time, &lt;code&gt;useState&lt;/code&gt; is enough for your needs. It's important to know when to use &lt;code&gt;useState&lt;/code&gt; and when to use &lt;code&gt;useContext&lt;/code&gt;. And it's not a clear division either; sometimes both work well.&lt;/p&gt;

&lt;p&gt;You want &lt;code&gt;useState&lt;/code&gt; to be your default option for state and only switch to &lt;code&gt;useContext&lt;/code&gt; if it's necessary.&lt;/p&gt;

&lt;p&gt;A good reason to switch to contexts is if the state is accessed by a lot of components.&lt;/p&gt;

&lt;p&gt;Bear in mind that to solve the "prop drilling" issue where you are passing props through layers of components, &lt;a href="https://reactjs.org/docs/context.html#before-you-use-context"&gt;there are other strategies you can also use&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Examples of good purposes of context:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Share the authentication state across your app&lt;/li&gt;
&lt;li&gt;Share a theme across your app&lt;/li&gt;
&lt;li&gt;Share a value that is used by a lot of components in a part of your app (for example the current balance of a user in a dashboard where a lot of components are using that balance)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;Voilà! You're now equipped to improve your usage of React Contexts. As you saw, there are a lot of different ways to go about it, and the one you choose really depends on your exact circumstances.&lt;/p&gt;

&lt;p&gt;So part of getting good at using React Contexts is also just building experience and reflecting on your code once in a while, to see if you should have done things differently.&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The PHP for loop</title>
      <author>C.S. Rhymes</author>
      <pubDate>Mon, 13 Sep 2021 19:00:07 +0000</pubDate>
      <link>https://dev.to/chrisrhymes/the-php-for-loop-47ch</link>
      <guid>https://dev.to/chrisrhymes/the-php-for-loop-47ch</guid>
      <description>&lt;p&gt;If you have something you want to repeat then consider using a PHP for loop, saving you from copying and pasting the same code multiple times. Adding the code into a loop means you only have to write it once, and you also only have to maintain the code in one place in future.&lt;/p&gt;

&lt;p&gt;The PHP for loop allows you to loop a defined number of times, until a defined condition is no longer true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 0123456789&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what is happening:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define a variable &lt;code&gt;$i&lt;/code&gt; as zero &lt;code&gt;$i = 0;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Keep looping if the variable &lt;code&gt;$i&lt;/code&gt; is less than 10 &lt;code&gt;$i &amp;lt; 10;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Each loop, add 1 to &lt;code&gt;$i&lt;/code&gt; (increment) &lt;code&gt;$i++;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;$i&lt;/code&gt; is no longer less than 10, then stop the loop and don’t add 1 to &lt;code&gt;$i&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#breaking-a-for-loop"&gt;
  &lt;/a&gt;
  Breaking a for loop
&lt;/h2&gt;

&lt;p&gt;You can also break out of a for loop using the &lt;code&gt;break&lt;/code&gt; keyword. In the example below, if the variable &lt;code&gt;$i&lt;/code&gt; is equal to 5 then it will break out of the loop, ignoring the &lt;code&gt;$i &amp;lt; 10;&lt;/code&gt; that we set previously in the loop definition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 012345&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#without-any-expressions"&gt;
  &lt;/a&gt;
  Without any expressions
&lt;/h2&gt;

&lt;p&gt;If you really wanted to you can leave the expressions empty in the for loop and define the variable before the loop, define the break inside the loop and increment the variable inside the loop as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 01234&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I honestly can’t think of a reason why you would do this though, except maybe if you don’t like your work colleagues very much…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#looping-through-an-array"&gt;
  &lt;/a&gt;
  Looping through an array
&lt;/h2&gt;

&lt;p&gt;You can loop through an existing array using a for loop if we wanted to, using &lt;code&gt;$i&lt;/code&gt; as the array key. The for loop variable needs to be initially defined as zero as array keys begin at zero &lt;code&gt;$i = 0;&lt;/code&gt;. We can then use php’s &lt;code&gt;count()&lt;/code&gt; function to count the length of the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$trees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'oak'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ash'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'birch'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'maple'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$trees&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$trees&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// oak ash birch maple&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The downside to this code is that the &lt;code&gt;count($trees)&lt;/code&gt; runs before each loop to check if the condition is still true. Instead, we can calculate the length of the array once and then pass that into the for loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$trees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'oak'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ash'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'birch'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'maple'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;$treesCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$trees&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$treesCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$trees&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// oak ash birch maple&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also consider using a foreach loop for looping through an array as this will loop over the length of the array without calculating the length.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-using-i"&gt;
  &lt;/a&gt;
  Avoid using $i
&lt;/h2&gt;

&lt;p&gt;Many examples use &lt;code&gt;$i&lt;/code&gt; as a variable in for loops, such as the php.net docs (also this article, oops), but try and use a more descriptive name as it will help you out when reading your code at a later date, and more importantly, if you have a for loop inside another for loop then you could end up overwriting the original &lt;code&gt;$i&lt;/code&gt; variable, causing an infinite loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Don't do this&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Some more code here&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 1012345701234570123457012345701234570123457012345701234570123457012345701234570123457012345 etc, etc,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead, use descriptive variable names for you loop so you can better distinguish each variable in each loop. In this example we have 5 trees and each tree has 10 leaves. Don’t worry about the &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; tag, that is just for formatting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$trees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$trees&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$trees&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Tree '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$trees&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' has leaves '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$leaves&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$leaves&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$leaves&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$leaves&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;', '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;br /&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Tree 1 has leaves 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,&lt;/span&gt;
&lt;span class="c1"&gt;// Tree 2 has leaves 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,&lt;/span&gt;
&lt;span class="c1"&gt;// Tree 3 has leaves 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,&lt;/span&gt;
&lt;span class="c1"&gt;// Tree 4 has leaves 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,&lt;/span&gt;
&lt;span class="c1"&gt;// Tree 5 has leaves 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For loops are very powerful tools, allowing you to save time and write cleaner and more maintainable code. Hopefully this introduction will get you thinking about how you could benefit from using them in future.&lt;/p&gt;

</description>
      <category>php</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Build a live chat app</title>
      <author>Tuan Thanh Tan</author>
      <pubDate>Mon, 13 Sep 2021 18:59:14 +0000</pubDate>
      <link>https://dev.to/tuanthanh2067/build-a-live-chat-app-1loi</link>
      <guid>https://dev.to/tuanthanh2067/build-a-live-chat-app-1loi</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hello everyone&lt;/strong&gt;, today I want to write a bit about my little project (Gossip). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://live-chat-client.vercel.app/home"&gt;Check it out here!!!&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-this-project-about"&gt;
  &lt;/a&gt;
  What is this project about
&lt;/h3&gt;

&lt;p&gt;I made this project with users' privacy in mind, it means that users will get to use random username and messages won't be saved anywhere.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Allow real-time conversation&lt;/li&gt;
&lt;li&gt;Create a account with email, username, and password. Email will be hidden away, and username can be generated randomly for users&lt;/li&gt;
&lt;li&gt;Create a chat room that can fits up to 300 people&lt;/li&gt;
&lt;li&gt;Create a private chat room, only people knowing the password could access&lt;/li&gt;
&lt;li&gt;Able to use random name and image to cover up your credentials&lt;/li&gt;
&lt;li&gt;Messages won't be stored anywhere&lt;/li&gt;
&lt;li&gt;Save your favorite rooms so that you can come back later&lt;/li&gt;
&lt;li&gt;Allow emojis that will make the conversion more realistic&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#technologies-i-used"&gt;
  &lt;/a&gt;
  Technologies I used
&lt;/h3&gt;

&lt;p&gt;React for client side and Nodejs for backend development&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tuanthanh2067/live-chat-client"&gt;Client side&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tuanthanh2067/live-chat-server"&gt;Backend side&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Coming soon&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Feliz Dia da Pessoa Programadora!</title>
      <author>Elixir UTFPR</author>
      <pubDate>Mon, 13 Sep 2021 18:56:30 +0000</pubDate>
      <link>https://dev.to/elixir_utfpr/feliz-dia-da-pessoa-programadora-362p</link>
      <guid>https://dev.to/elixir_utfpr/feliz-dia-da-pessoa-programadora-362p</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w76dbp3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx6bctwe4c3qlvbejrtj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w76dbp3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx6bctwe4c3qlvbejrtj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hoje é o &lt;a href="https://en.wikipedia.org/wiki/Day_of_the_Programmer"&gt;Dia da Pessoa Programadora&lt;/a&gt;. Por que? Por ser o ducentésimo quinquagésimo sexto (256º) dia do ano. E claro que &lt;a href="https://dev.to/elixir_utfpr/um-errinho-em-elixir-1dof"&gt;o primeiro dia do ano é o dia 1&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;Por que 256? 256 é 2 elevado à oitava potência. Computadores trabalham com números binários. Logo, faz sentido que o Dia da Pessoa Programadora seja o dia do ano em que temos a maior quantidade de zeros num número binário no formato 1 e vários zeros: 100000000. Para completar, em hexadecimal, 256 é 100.&lt;/p&gt;

&lt;p&gt;Fiz um pequeno programa em Elixir para comemorar. Veja abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;ProgrammersDay&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;show_message_if_today_is_programmers_day&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;show_message_if_today_is_programmers_day&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_it_today?&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;show_message_if_today_is_programmers_day&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Happy Programmers' Day!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;show_message_if_today_is_programmers_day&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Today is not Programmers' Day!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;is_it_today?&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day_of_year&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc_today&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;ProgrammersDay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_message_if_today_is_programmers_day&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basta salvar o código acima num arquivo chamado &lt;code&gt;programmersday.exs&lt;/code&gt; e depois, no terminal, chamar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; elixir programmersday.exs
Happy Programmers' Day!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se o dia em que você estiver executando o código for o Dia da Pessoa Programadora, o programa irá escrever na tela, como acima &lt;code&gt;Happy Programmers' Day!&lt;/code&gt;, ou seja, &lt;code&gt;Feliz Dia da Pessoa Programadora&lt;/code&gt;. Se não for, o programa vai escrever que não é dia da pessoa programadora.&lt;/p&gt;

&lt;p&gt;O que há de interessante no programa acima?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Date.utc_today/0&lt;/code&gt; é uma função (daquelas que não é função matemática) e que retorna o dia de hoje. Exercício: execute &lt;code&gt;Date.utc_today()&lt;/code&gt; no &lt;code&gt;iex&lt;/code&gt; e poste nos comentários o que ela retorna.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Date.day_of_year/1&lt;/code&gt; retorna o índice (começando em 1 e indo no máximo até 366, em caso de último dia de ano bissexto) de uma data no seu ano. Por exemplo, &lt;code&gt;Date.day_of_year/1&lt;/code&gt; aplicado a &lt;code&gt;~D[1050-03-12]&lt;/code&gt; (que representa 12 de março do ano 1050 retorna que 12/03/1050 foi o 75º dia de 1050:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day_of_year&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sx"&gt;~D[1050-03-12]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;71&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como ano passado foi ano bissexto, temos que:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day_of_year&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sx"&gt;~D[2020-12-31]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;366&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O restante não tem muita novidade, certo? Temos duas funções chamadas &lt;code&gt;show_message_if_today_is_programmers_day&lt;/code&gt;: &lt;code&gt;show_message_if_today_is_programmers_day/0&lt;/code&gt; e &lt;code&gt;show_message_if_today_is_programmers_day/1&lt;/code&gt;. A primeira é pública e a segunda é privada.&lt;/p&gt;

&lt;p&gt;Você consegue escrever uma versão mais interessante deste programa? Ou uma versão diferente, usando processos? Poste nos comentários!&lt;/p&gt;

</description>
      <category>elixir</category>
    </item>
  </channel>
</rss>
