<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>ChristmasLight Css</title>
      <author>0xKirz</author>
      <pubDate>Thu, 30 Dec 2021 05:42:31 +0000</pubDate>
      <link>https://dev.to/kirzin/christmaslight-css-593a</link>
      <guid>https://dev.to/kirzin/christmaslight-css-593a</guid>
      <description>&lt;p&gt;&lt;strong&gt;Merry Christmas &amp;amp; Happy New year Everyone&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BM9_6Xu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sth2alarcjgu8nsvuqh1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BM9_6Xu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sth2alarcjgu8nsvuqh1.png" alt="Image description" width="880" height="562"&gt;&lt;/a&gt;&lt;iframe height="600" src="https://codepen.io/kirzin/embed/RwLQQMZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>How to Rice Windows.</title>
      <author>Dhruv Anand</author>
      <pubDate>Thu, 30 Dec 2021 05:29:21 +0000</pubDate>
      <link>https://dev.to/ananddhruv295/how-to-rice-windows-2h12</link>
      <guid>https://dev.to/ananddhruv295/how-to-rice-windows-2h12</guid>
      <description>&lt;h2&gt;
  &lt;a href="#ricing-windows"&gt;
  &lt;/a&gt;
  &lt;em&gt;Ricing Windows&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wg5_8xod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1p30bfgxqu3gmi849es.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wg5_8xod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1p30bfgxqu3gmi849es.png" alt="Desktop Preview" width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#make-your-desktop-look-sick-amp-clean"&gt;
  &lt;/a&gt;
  Make your Desktop look sick &amp;amp; clean.
&lt;/h5&gt;




&lt;p&gt;Here is a list if software and applications that I have used to rice my desktop. &lt;/p&gt;

&lt;p&gt;&lt;u&gt;Web Browser&lt;/u&gt; ▻ &lt;strong&gt;Firefox&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Music Streaming&lt;/u&gt; ▻ &lt;strong&gt;Spotify&lt;/strong&gt; &lt;br&gt;
&lt;u&gt;Messaging Platform&lt;/u&gt; ▻ &lt;strong&gt;Discord&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Text Editor&lt;/u&gt; ▻ &lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Terminal&lt;/u&gt;▻ &lt;strong&gt;Windows Terminal&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;File Manager&lt;/u&gt; ▻ &lt;strong&gt;Files&lt;/strong&gt; &lt;br&gt;
&lt;u&gt;Wallpaper Manager&lt;/u&gt; ▻ &lt;strong&gt;Lively&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;App Launcher&lt;/u&gt; ▻ &lt;strong&gt;PowerToys Run&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Status Bar&lt;/u&gt; ▻ &lt;strong&gt;PolyBar&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Music Widget&lt;/u&gt; ▻ &lt;strong&gt;ModularPlayers&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Dock&lt;/u&gt; ▻ &lt;strong&gt;Nexus&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;Head over to my GitHub repository ↴&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iDCoded"&gt;
        iDCoded
      &lt;/a&gt; / &lt;a href="https://github.com/iDCoded/Windows-Rice"&gt;
        Windows-Rice
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      How to rice Windows. 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;i&gt;Windows Ricing&lt;/i&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147634871-af27d9fd-152c-4ea5-be52-48861ed60908.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4vKqtm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147634871-af27d9fd-152c-4ea5-be52-48861ed60908.png" alt="Desktop"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Wallpaper&lt;/strong&gt; : Spaceman Wallpaper → &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/3bc9ba24d3301ac7fe8cf73062e44e7aba87e7d9fbb873b46422ca066ccc64b4/68747470733a2f2f6d796c69766577616c6c7061706572732e636f6d2f66616e746173792f73706163656d616e2d6a656c6c79666973682d6c6976652d77616c6c70617065722f"&gt;&lt;img src="https://camo.githubusercontent.com/3bc9ba24d3301ac7fe8cf73062e44e7aba87e7d9fbb873b46422ca066ccc64b4/68747470733a2f2f6d796c69766577616c6c7061706572732e636f6d2f66616e746173792f73706163656d616e2d6a656c6c79666973682d6c6976652d77616c6c70617065722f" alt="Here"&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;I have used &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/a8926e4dcecc7bec7e3d82f91bce9d4ded6646cb77639656a7e97408c184c452/68747470733a2f2f6c6976656c7977616c6c70617065722e6e65742f"&gt;&lt;img src="https://camo.githubusercontent.com/a8926e4dcecc7bec7e3d82f91bce9d4ded6646cb77639656a7e97408c184c452/68747470733a2f2f6c6976656c7977616c6c70617065722e6e65742f" alt="Lively"&gt;&lt;/a&gt; for a live wallpaper.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Top bar&lt;/strong&gt; : &lt;a rel="noopener noreferrer" href="https://github.com/khanhas/Polybar"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jOULg9Sf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/khanhas/Polybar" alt="Polybar"&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/73d2b848a51f3c355407ca539ce9318245a9b2e4cf7b7dcd2eadcc27259f8875/68747470733a2f2f7777772e7261696e6d657465722e6e65742f"&gt;&lt;img src="https://camo.githubusercontent.com/73d2b848a51f3c355407ca539ce9318245a9b2e4cf7b7dcd2eadcc27259f8875/68747470733a2f2f7777772e7261696e6d657465722e6e65742f" alt="Rainmeter"&gt;&lt;/a&gt; to add Widgets.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dock&lt;/strong&gt; : &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2155e470231cba17281232606d788f55fc0da9a748585fe48cbfae2f4b930f26/68747470733a2f2f7777772e77696e737465702e6e65742f"&gt;&lt;img src="https://camo.githubusercontent.com/2155e470231cba17281232606d788f55fc0da9a748585fe48cbfae2f4b930f26/68747470733a2f2f7777772e77696e737465702e6e65742f" alt="Nexus"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Music Controller&lt;/strong&gt; : &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e724f97f5d9c028f73a9b0141325e113c3efe41f0ac13d0d20bf06b49358580c/68747470733a2f2f7777772e64657669616e746172742e636f6d2f6a61786f726967696e616c732f6172742f4d6f64756c6172506c61796572732d76312d332d383836353737323536"&gt;&lt;img src="https://camo.githubusercontent.com/e724f97f5d9c028f73a9b0141325e113c3efe41f0ac13d0d20bf06b49358580c/68747470733a2f2f7777772e64657669616e746172742e636f6d2f6a61786f726967696e616c732f6172742f4d6f64756c6172506c61796572732d76312d332d383836353737323536" alt="ModularPlayers"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
Applications&lt;/h1&gt;
&lt;h3&gt;
Discord&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147639804-098fe178-7ede-4437-83c1-d50cc108d2ee.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XZpu0YpG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147639804-098fe178-7ede-4437-83c1-d50cc108d2ee.png" alt="discord"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/iDCoded/Windows-Ricebetterdiscord.app/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vv-3L_yb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/iDCoded/Windows-Ricebetterdiscord.app/" alt="BetterDiscord"&gt;&lt;/a&gt; for &lt;strong&gt;Plugins&lt;/strong&gt; &amp;amp; &lt;strong&gt;Themes&lt;/strong&gt; to enhance Discord.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Theme&lt;/strong&gt; : &lt;a rel="noopener noreferrer" href="https://github.com/CapnKitten/Material-Discord"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p6l9UtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/CapnKitten/Material-Discord" alt="MaterialDiscord"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugins&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Plugins&lt;/th&gt;
&lt;th&gt;Links&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;AppNotifications&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://betterdiscord.app/plugin/AppNotifications" rel="nofollow"&gt;https://betterdiscord.app/plugin/AppNotifications&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;BetterImageViewer&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://1lighty.github.io/BetterDiscordStuff/?plugin=BetterImageViewer" rel="nofollow"&gt;https://1lighty.github.io/BetterDiscordStuff/?plugin=BetterImageViewer&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;GameActivityToggle&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://betterdiscord.app/plugin/GameActivityToggle" rel="nofollow"&gt;https://betterdiscord.app/plugin/GameActivityToggle&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SpotifyControls&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://betterdiscord.app/plugin/SpotifyControls" rel="nofollow"&gt;https://betterdiscord.app/plugin/SpotifyControls&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
Spotify&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147640259-aa7d17a3-3f1a-442d-b290-06fbe7a1f63e.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MLRWKc1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147640259-aa7d17a3-3f1a-442d-b290-06fbe7a1f63e.png" alt="spotify"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/317e2b641f21fade5e938163f6625394c2ede2e15069754c41faadad84531308/68747470733a2f2f7370696365746966792e6170702f"&gt;&lt;img src="https://camo.githubusercontent.com/317e2b641f21fade5e938163f6625394c2ede2e15069754c41faadad84531308/68747470733a2f2f7370696365746966792e6170702f" alt="Spicetify-cli"&gt;&lt;/a&gt; Commandline tool to customize Spotify client.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Theme&lt;/strong&gt; : &lt;strong&gt;Dribbblish&lt;/strong&gt; Color scheme : &lt;strong&gt;Nord-dark&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Extensions&lt;/strong&gt; : &lt;strong&gt;Dribbblish&lt;/strong&gt;, &lt;strong&gt;Popup-Lyrics&lt;/strong&gt;, &lt;strong&gt;Full App Display&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Editor&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147641740-3f65c4f6-2582-49bf-b5fb-e40007b5a328.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWqfL_v5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147641740-3f65c4f6-2582-49bf-b5fb-e40007b5a328.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Theme&lt;/strong&gt; : &lt;strong&gt;GitHub Dark&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Font&lt;/strong&gt; : &lt;strong&gt;Fira Code&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Terminal&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Windows Terminal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147642117-409d2389-6c13-428c-83d1-739022060ad8.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eYSlU7Yt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147642117-409d2389-6c13-428c-83d1-739022060ad8.png" alt="windows terminal"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Colorscheme&lt;/strong&gt; : &lt;strong&gt;One Half Dark&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;System Info&lt;/strong&gt; : &lt;strong&gt;Screenfetch&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
File Manager&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Files&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147641318-768e3acd-3bb9-447d-9148-227d17a6ae1d.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pTwG4lii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147641318-768e3acd-3bb9-447d-9148-227d17a6ae1d.png" alt="files"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Custom Theme&lt;/strong&gt; : &lt;strong&gt;Glass&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
App Launcher&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;PowerToys Run&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147641624-5eff79c0-975d-47a6-82ce-6c40061045e5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----OCf1PQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147641624-5eff79c0-975d-47a6-82ce-6c40061045e5.png" alt="powertoys run"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/iDCoded/Windows-Rice"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>windows</category>
      <category>ricing</category>
      <category>customization</category>
    </item>
    <item>
      <title>Top 5 Python Frameworks for Web Development in 2022</title>
      <author>Ashish Yadav</author>
      <pubDate>Thu, 30 Dec 2021 05:08:43 +0000</pubDate>
      <link>https://dev.to/expoashish/top-5-python-frameworks-for-web-development-in-2022-1mlc</link>
      <guid>https://dev.to/expoashish/top-5-python-frameworks-for-web-development-in-2022-1mlc</guid>
      <description>&lt;p&gt;In this blog we are going to see top 5 best python framework for web development in 2022. Top &amp;amp; Trending Python Frameworks for Web Development in 2022. Let's Start Click Here to read this post:👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-5-python-frameworks-for-web.html"&gt;Top 5 Python Frameworks for Web Development in 2022&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-amp-trending-topics"&gt;
  &lt;/a&gt;
  New &amp;amp; Trending Topics:👇
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-trending-technologies-to-learn.html"&gt;Top 10 Trending Technologies to Learn in 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-programming-languages-you-must.html"&gt;Top 10 Programming Languages You Must Know In 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/top-5-cryptocurrencies-that-could.html"&gt;Top 5 CRYPTOCURRENCIES That Could Dominate In 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-machine-learning.html"&gt;Machine Learning Complete Roadmap 2022&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-roadmap-2022"&gt;
  &lt;/a&gt;
  Complete Roadmap 2022:-👇
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-python-programming.html"&gt;Python Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-machine-learning.html"&gt;Machine Learning Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-c-programming.html"&gt;C++ Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/java-complete-roadmap-2022.html"&gt;Java Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-data-structure.html"&gt;Data Structure Complete Roadmap 2022&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-laravel-tutorial-for-developer"&gt;
  &lt;/a&gt;
  Some Laravel Tutorial for developer:👇
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #1)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and_22.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #2)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/advance-laravel-8-interview-questions.html"&gt;Advance Laravel 8 Interview Questions and Answers 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/everything-about-laravel-8-composer.html"&gt;Everything About Laravel 8 Composer 2022 | Composer in Laravel 8&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-jetstream-vs-laravel-ui-vs.html"&gt;Laravel Jetstream vs Laravel ui  vs Breeze&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-concept-and-projects"&gt;
  &lt;/a&gt;
  Python Concept and Projects:-👇
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/10-best-python-libraries-for-machine.html"&gt;10 Best Python Libraries For Machine Learning&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/07/alarm-clock-in-python-with-gui.html"&gt;Alarm Clock in Python with GUI&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/06/tic-tac-toe-game-using-pygame-in-python.html"&gt;Tic Tac Toe Game Using Pygame in Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thankyou for reading my blogs.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#my-website"&gt;
  &lt;/a&gt;
  My Website:👇
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/"&gt;CodexAshish&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>programming</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>What is the "XSLT" equivalent for JSON? Here is the new answer</title>
      <author>suntong</author>
      <pubDate>Thu, 30 Dec 2021 04:33:55 +0000</pubDate>
      <link>https://dev.to/suntong/what-is-the-xslt-equivalent-for-json-here-is-the-new-answer-7la</link>
      <guid>https://dev.to/suntong/what-is-the-xslt-equivalent-for-json-here-is-the-new-answer-7la</guid>
      <description>&lt;h3&gt;
  &lt;a href="#prefix"&gt;
  &lt;/a&gt;
  Prefix
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What is the "XSLT" equivalent for JSON?&lt;/em&gt;  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the question that people had been asking &lt;a href="https://stackoverflow.com/questions/1618038/xslt-equivalent-for-json"&gt;more than 10 years ago&lt;/a&gt;. By then the &lt;code&gt;xslt&lt;/code&gt; is still the number one answer.&lt;br&gt;&lt;br&gt;
It's high time to take a look at the new kids in town now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-xslt"&gt;
  &lt;/a&gt;
  What is "XSLT"?
&lt;/h3&gt;

&lt;p&gt;XSLT stands for XSL Transformation. It is used to transform XML documents into into various other types of document (like transforming XML into HTML).&lt;/p&gt;

&lt;p&gt;It's most important purpose is transform data, from XML form into a format more presentable to human beings.&lt;br&gt;&lt;br&gt;
XSL is to XML is similar as CSS is to HTML. XSLT can be viewed as the rendering engine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-new-choices-now"&gt;
  &lt;/a&gt;
  What are the new choices now?
&lt;/h3&gt;

&lt;p&gt;The second choice in the above answer had been &lt;a href="https://stedolan.github.io/jq/"&gt;&lt;code&gt;jq&lt;/code&gt;&lt;/a&gt;, and I agree that it is very powerful.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text. There are install packages for different OS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But comparing to &lt;code&gt;jsonpath&lt;/code&gt; it is more difficult to learn to most people, which brings us to the first tool to recommend this time -- &lt;a href="https://github.com/go-jsonfile/jp/"&gt;&lt;code&gt;jp&lt;/code&gt;&lt;/a&gt;, because&lt;/p&gt;

&lt;p&gt;&lt;code&gt;jp&lt;/code&gt; is as simple as &lt;code&gt;jsonpath&lt;/code&gt; but as powerful as &lt;code&gt;jq&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-about-the-rendering-engine-part"&gt;
  &lt;/a&gt;
  How about the rendering engine part?
&lt;/h3&gt;

&lt;p&gt;The problem of both &lt;code&gt;jq&lt;/code&gt; or &lt;code&gt;jp&lt;/code&gt; is that although they can do data projection in any direction (doing data filtering in any way), their purpose are still focusing on data transformation, but when talking about rendering &lt;code&gt;json&lt;/code&gt; data into a format more presentable to human beings, then there is no better tools than &lt;a href="https://github.com/go-easygen/easygen/"&gt;&lt;code&gt;easygen&lt;/code&gt;&lt;/a&gt;. In fact, the &lt;code&gt;easygen&lt;/code&gt; is a universal code/text generator that not only works on &lt;code&gt;json&lt;/code&gt; data but it can take in data defined in YAML format as well. It can be used as any text (or html, or any other forms) generator for arbitrary purposes with arbitrary data and templates. It is built on top of the powerful Go template engine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-put-them-together"&gt;
  &lt;/a&gt;
  To put them together
&lt;/h3&gt;

&lt;p&gt;So the other day, I&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;download &lt;code&gt;json&lt;/code&gt; data via API&lt;/li&gt;
&lt;li&gt;filter the &lt;code&gt;json&lt;/code&gt; data with the &lt;a href="https://github.com/go-jsonfile/jp/releases/tag/v0.2.2"&gt;&lt;code&gt;jp&lt;/code&gt;&lt;/a&gt; that supports filtering by regular expression (&lt;em&gt;hint: do you know any json filter that when given a video's file name, can tell a tv-series apart from a movie?&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;then present the &lt;code&gt;json&lt;/code&gt; data in human friendly format with the new &lt;code&gt;easygen&lt;/code&gt; that can read from &lt;code&gt;stdin&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;in the human friendly form, I need to convert the long number of size in bytes to the size in MB and GB, and I had to search for how to do calculation in Go template, but then was &lt;em&gt;delighted&lt;/em&gt; to realized that &lt;code&gt;easygen&lt;/code&gt; &lt;em&gt;already&lt;/em&gt; supports the &lt;a href="https://github.com/go-easygen/easygen/issues/25#cal"&gt;calculation in Go template&lt;/a&gt; long time ago.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'll give a more concrete example in the next article.&lt;/p&gt;

&lt;p&gt;To me now,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;easygen&lt;/code&gt; is to &lt;code&gt;json&lt;/code&gt; what &lt;code&gt;xslt&lt;/code&gt; is to &lt;code&gt;xml&lt;/code&gt;, but much more powerful and versatile.&lt;/p&gt;

</description>
      <category>json</category>
      <category>transform</category>
      <category>easygen</category>
      <category>generator</category>
    </item>
    <item>
      <title>Binary Search Implementation In Java</title>
      <author>Pratik</author>
      <pubDate>Thu, 30 Dec 2021 04:32:10 +0000</pubDate>
      <link>https://dev.to/pratikdhame/binary-search-implementation-in-java-d0g</link>
      <guid>https://dev.to/pratikdhame/binary-search-implementation-in-java-d0g</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhfnFtN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v56yyav4nozo3cw4do3j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhfnFtN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v56yyav4nozo3cw4do3j.png" alt="Image description" width="880" height="701"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>My Visual studio Theme</title>
      <author>Prince Verma</author>
      <pubDate>Thu, 30 Dec 2021 04:23:20 +0000</pubDate>
      <link>https://dev.to/vermaprince123/my-visual-studio-theme-58bg</link>
      <guid>https://dev.to/vermaprince123/my-visual-studio-theme-58bg</guid>
      <description>&lt;p&gt;Try it at least once , I will 100% sure you love this theme !!!&lt;br&gt;
And give your valuable feedback.....&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tBU_2xZk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjpr3wnppi72dcoab8bx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tBU_2xZk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjpr3wnppi72dcoab8bx.PNG" alt="Image description" width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>ux</category>
      <category>design</category>
      <category>react</category>
    </item>
    <item>
      <title>JavaScript The Hard Parts-Part 1</title>
      <author>Osama Mohamed Ammar</author>
      <pubDate>Thu, 30 Dec 2021 03:49:42 +0000</pubDate>
      <link>https://dev.to/osamamammar/javascript-the-hard-parts-part-1-210a</link>
      <guid>https://dev.to/osamamammar/javascript-the-hard-parts-part-1-210a</guid>
      <description>&lt;p&gt;In the beginning, we need to be sure that we know a lot of things&lt;br&gt;
imagine, the sheet that you write in JavaScript is wrapped with a big thing called execution context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what is execution context?&lt;/strong&gt;&lt;br&gt;
Execution context simply is created to run the code of a function and has 2 parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Thread of execution&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Memory&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;How does JavaScript code run simply?&lt;/strong&gt;&lt;br&gt;
Line-by-line runs or ’executes’, each line — &lt;strong&gt;known as the thread of execution&lt;/strong&gt; and saves ‘data’ like strings and arrays in the memory, so we can use that data later.&lt;/p&gt;

&lt;p&gt;Another thing, we should know the &lt;strong&gt;difference between parameter and argument.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we called &lt;strong&gt;argument&lt;/strong&gt;, we mean the actual number or value that gets passed in, and the &lt;strong&gt;parameter&lt;/strong&gt; is the placeholder that awaits it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Call Stack?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JavaScript keeps track of what the function is currently running &lt;br&gt;
(where’s the thread of execution) there are two things that can happen for call stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run a function →add to call stack&lt;/li&gt;
&lt;li&gt;Finish running the function →JS removes it from the call stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the &lt;strong&gt;&lt;em&gt;three main cores in the JS engine&lt;/em&gt;&lt;/strong&gt; Now we can start reviewing all these concepts clearly all together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-example"&gt;
  &lt;/a&gt;
  For example:
&lt;/h2&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const num = 3;
function multiplyBy2 (inputNumber){
const result = inputNumber*2;
return result;
}
const output = multiplyBy2(num);
const newOutput = multiplyBy2(10);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;let’s play around with that and show what the JavaScript engine will do.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wAn0Eagg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/4586/1%2AL_OZCVopBaMgGTj-JAoVAw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wAn0Eagg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/4586/1%2AL_OZCVopBaMgGTj-JAoVAw.png" alt="Image 1" width="880" height="424"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we say, imagine the code we have written is wrapped with something called execution context like a big rectangle, so we should have 2 parts&lt;br&gt;
memory(global memory) and thread of execution.&lt;/p&gt;

&lt;p&gt;When you look at the code example in the first line, we have a constant variable initialized with the number 3 so that will save in global memory.&lt;/p&gt;

&lt;p&gt;In the next line, we have a declaration function called multiplyBy2 this function body we are gonna take, bundle, store it in the computer memory like a string of characters, so we will represent it with a little box that will add to memory without running because we do not call this function yet.&lt;/p&gt;

&lt;p&gt;Now we wave down to where the next line we declare a constant output that stores a call function, so we can’t store that in memory.&lt;br&gt;
We can only store values that fixed final things. We can’t store instructions that tell go to do some work, so the something that tells me the right-hand side is a command can’t store now is a parenthesis, so, for now, the constant output variable it’s gonna remain uninitialized, and we will go running this command.&lt;br&gt;
This command will create an execution context containing two parts that we said above thread and memory (local to this function) look at the picture above.&lt;/p&gt;

&lt;p&gt;So before go to inside multiblyBy2 function we first handle the parameter in the memory(local memory), and it will take a value of the argument which is number 3, then after that, we can grab result hit result, and assign it to 6&lt;/p&gt;

&lt;p&gt;The final line inside a function is the interesting one, we have got a return result, so what is result mean JavaScript doesn't know automatically, so it goes hunting for it in our local memory, finds it's a number 6, and then takes that number and ships it returns it to output which means evaluate output to number 6, &lt;strong&gt;note&lt;/strong&gt; after that execution context will be deleted.&lt;/p&gt;

&lt;p&gt;Next line, we declare constant newOutput we put it in memory, but we don't know what is stored in newOutput yet, because we are going to do another execution context for the calling this function again as we did before, the image below illustrates this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jclMO17o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/4258/1%2Adp8KMe0uBDLQ0TCeIWRUPg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jclMO17o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/4258/1%2Adp8KMe0uBDLQ0TCeIWRUPg.png" alt="Image 2" width="880" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the function finishes or returns a value, the execution context will be deleted.&lt;/p&gt;

&lt;p&gt;JavaScript also has something called the call stack, JavaScript keeps track of what function is currently running by using the final part of understanding our platform cores of the JavaScript engine called the call stack, it's like a traditional way of storing information in our computer, the image below illustrates this.&lt;/p&gt;

&lt;p&gt;This is the call stack at the beginning of our program until when we're starting to call a function.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pnjgHaNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2An7H2EnSbDRCKgu6Ak21FWQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pnjgHaNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2An7H2EnSbDRCKgu6Ak21FWQ.png" alt="Image 3" width="458" height="572"&gt;&lt;/a&gt;&lt;br&gt;
So when we call multiplyBy2(3) the call stack will look like that.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gCExL4Vj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ai2ZKq0Awt_-OpUuatGKCpg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gCExL4Vj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ai2ZKq0Awt_-OpUuatGKCpg.png" alt="Image 4" width="464" height="564"&gt;&lt;/a&gt;&lt;br&gt;
After the return function happens, it popped up from the stack and returns to the same shape in the first image, According to our code example, the function after the first pop-up it will call again multiplyBy2(10).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ibLE2oD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AlurbsnvrvesRj_Aj3mMc0w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ibLE2oD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AlurbsnvrvesRj_Aj3mMc0w.png" alt="Call stack from right to left" width="464" height="564"&gt;&lt;/a&gt;&lt;br&gt;
After the function finish, the call stack will return to empty.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; if we have an inner function inside an outer function is already called that makes the inner function pushed to the call stack above outer function and after finished inner function, it will pop up from the stack and leave the outer function in the stack until it finishes and pop up from the call stack and make it’s empty.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you got here&lt;/em&gt;, &lt;strong&gt;&lt;em&gt;thank you&lt;/em&gt;&lt;/strong&gt;. &lt;em&gt;Finally, this article is part of a collection of articles about JavaScript hard parts and behind the scenes, don't forget to follow it when it comes out.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What are objects in programming?</title>
      <author>Calin Baenen</author>
      <pubDate>Thu, 30 Dec 2021 01:53:52 +0000</pubDate>
      <link>https://dev.to/baenencalin/what-are-objects-in-programming-1nc9</link>
      <guid>https://dev.to/baenencalin/what-are-objects-in-programming-1nc9</guid>
      <description>&lt;p&gt;So, if you're new to programming, or just hang around people that are programmers, you may have heard of things called "objects".&lt;br&gt;
In this article, we will discuss what exactly objects are, and what they are like in certain languages.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-an-object"&gt;
  &lt;/a&gt;
  What is an object?
&lt;/h2&gt;

&lt;p&gt;At its most fundamental level, an object is a collection of data grouped together.&lt;/p&gt;

&lt;p&gt;Here's a classic example, a &lt;code&gt;Person&lt;/code&gt; object.&lt;br&gt;
Say we want to talk about a person in some code, people in the real world are more complex than a simple number, or a string of text (text, as the kind you're reading now, in programming is referred to as a "string").&lt;br&gt;
But, combining those last two, we get two basic properties all people have in common, name and age.&lt;/p&gt;

&lt;p&gt;So, we know all people have a name and an age, but how do we represent that?&lt;br&gt;
Well, not writing in any particular language, an object may be represented like following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    String name;
    Number age;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This says that this object (&lt;code&gt;o&lt;/code&gt;) contains some &lt;strong&gt;string&lt;/strong&gt; data called &lt;code&gt;name&lt;/code&gt; and some number data called &lt;code&gt;age&lt;/code&gt;.&lt;br&gt;
(The semicolons &lt;code&gt;;&lt;/code&gt; just separate the lines, like decoration.)&lt;br&gt;&lt;br&gt;
The idea of an object in programming is no different than the idea of having a subscript &lt;code&gt;i&lt;/code&gt; on a variable &lt;code&gt;V&lt;/code&gt; (Vi) in science (which stands for the "&lt;strong&gt;I&lt;/strong&gt;nitial &lt;strong&gt;V&lt;/strong&gt;elocity" of a real-world object).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#disambiguating-class-and-object"&gt;
  &lt;/a&gt;
  Disambiguating "class" and "object".
&lt;/h2&gt;

&lt;p&gt;If you've heard "object", you've likely also heard of "class".&lt;br&gt;
If you haven't, you can skip this, as it may just add confusion for the time-being.&lt;/p&gt;

&lt;p&gt;So, what is a class?&lt;br&gt;
A "class" is a general programming term that refers to the structure of an object.&lt;br&gt;
In fact, most people compare classes to blueprints, where the class is the blueprint and the object is the building (finished product).&lt;/p&gt;

&lt;p&gt;Classes in most programming languages are defined like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Person {
    String name;
    Number age;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This states there exists a class called &lt;code&gt;Person&lt;/code&gt;, whose members consist of a &lt;code&gt;name&lt;/code&gt; "field" and an &lt;code&gt;age&lt;/code&gt; "field", where a "field" is some named data.  &lt;/p&gt;

&lt;p&gt;But, classes are comprised of more than just the blueprint.&lt;br&gt;
Because in the real world, we actually use those plans to build something. - In programming, it's not much different.&lt;br&gt;
The "building" we make with this "blueprint" class is called an "instance", as in "I have an instance of a class.".&lt;br&gt;
Any building constructed with the &lt;code&gt;Person&lt;/code&gt; blueprint will always be a &lt;code&gt;Person&lt;/code&gt; instance (&lt;a href="https://www.analyticsvidhya.com/blog/2020/10/inheritance-object-oriented-programming/"&gt;but not always vice-versa&lt;/a&gt;; kind of like how all squares are rectangles, but not all rectangles are squares).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-objects-look-like-in-multiple-languages"&gt;
  &lt;/a&gt;
  What objects look like in multiple languages.
&lt;/h2&gt;

&lt;p&gt;Now that we know what an object and a class is, lets see how they look in various languages, in order of difficulty from easiest to understand to hardest to understand.&lt;br&gt;
In case you were thinking of dipping your toes into the water a little.&lt;br&gt;&lt;br&gt;
To help boost your understanding a little, all "people" (&lt;code&gt;Person&lt;/code&gt; instances) created will have the name "Tom" and will be fifteen (15) years old.&lt;br&gt;
In other words, the same thing will be shown, just in a bunch of different programming languages.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python.
&lt;/h3&gt;

&lt;p&gt;Python has simple object-classes that anyone can read!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Tom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript.
&lt;/h3&gt;

&lt;p&gt;JavaScript allows you to create objects on their own, or from a blueprint.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Does the same thing as the last definition.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java.
&lt;/h3&gt;

&lt;p&gt;Java has classes but not raw objects, unlike JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;    &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* ... */&lt;/span&gt;

&lt;span class="nc"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Tom"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C.
&lt;/h3&gt;

&lt;p&gt;C is one of the barest languages to exist, but it still provides us with a neat way to organize our data!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;         &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="cm"&gt;/* ... */&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name:&lt;/span&gt; &lt;span class="s"&gt;"Tom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nl"&gt;age:&lt;/span&gt;  &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
&lt;b&gt;&lt;/b&gt;&lt;center&gt;Thanks for reading!&lt;br&gt;Cheers!&lt;/center&gt;
&lt;/h1&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Time for change? 🤔</title>
      <author>Let's Code</author>
      <pubDate>Thu, 30 Dec 2021 00:46:12 +0000</pubDate>
      <link>https://dev.to/frontendengineer/time-for-change-469l</link>
      <guid>https://dev.to/frontendengineer/time-for-change-469l</guid>
      <description>&lt;p&gt;Prices 💲 and services everywhere are continuing to soar 📈 at record levels AND the worth of money on our savings account is losing value over time. Although the yearly salary 💶 increase helps, it seems to be not enough.&lt;/p&gt;

&lt;p&gt;The thought of a career 💼 switch definitely came to mind as it may bring at least extra 20% more compensation. It is understandable if this option doesn't apply to many as everybody's situation are different - one is happy and job hopping is a bit risky. &lt;/p&gt;

&lt;p&gt;I am leaning on looking to better provide for my family. As a matter of fact I have couple of interviews lined up next week. What is your situation and are you considering it?&lt;/p&gt;

&lt;p&gt;This &lt;a href="https://dev.to/frontendengineer/series/14457"&gt;resource&lt;/a&gt; might help you in case you need a refresher on interview.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Building a scraping tool with Python and storing it in Airtable (with real code)</title>
      <author>Kalob Taulien</author>
      <pubDate>Thu, 30 Dec 2021 00:27:30 +0000</pubDate>
      <link>https://dev.to/kalobtaulien/building-a-scraping-tool-with-python-and-storing-it-in-airtable-with-real-code-4pbl</link>
      <guid>https://dev.to/kalobtaulien/building-a-scraping-tool-with-python-and-storing-it-in-airtable-with-real-code-4pbl</guid>
      <description>&lt;p&gt;A startup often needs extremely custom tools to achieve its goals. &lt;/p&gt;

&lt;p&gt;At &lt;a href="https://arbington.com"&gt;Arbington.com&lt;/a&gt; we've had to build scraping tools, data analytics tools, and custom email functions. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;None of this required a database. We used files as our "database" but mostly we used Airtable. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#scrapers"&gt;
  &lt;/a&gt;
  Scrapers
&lt;/h2&gt;

&lt;p&gt;Nobody wants to admit it, but scraping is pretty important for gathering huge amounts of useful data. &lt;/p&gt;

&lt;p&gt;It's frowned upon, but frankly, everyone does it. Whether they use an automated tool, or manually sift through thousands of websites to collect email addresses - most organizations do it. &lt;/p&gt;

&lt;p&gt;In fact, scraping is what made the worlds best search engine: Google. &lt;/p&gt;

&lt;p&gt;And in Python, this is REALLY easy. &lt;/p&gt;

&lt;p&gt;The hardest part is reading through various forms of HTML, but even then, we have a tool for that. Let's take a look at an example that I've adjusted so you can scrape my website. &lt;/p&gt;

&lt;p&gt;We'll use &lt;a href="https://kalob.io/teaching/"&gt;https://kalob.io/teaching/&lt;/a&gt; as the example and get all the courses I teach. &lt;/p&gt;

&lt;p&gt;First, we look for a pattern in the DOM. Open up that page, right click, inspect element, and look for all the blue buttons. &lt;/p&gt;

&lt;p&gt;You'll see they all have &lt;code&gt;class="btn btn-primary"&lt;/code&gt;. Interesting, we've found a pattern. Great! We can work with that. &lt;/p&gt;

&lt;p&gt;Now let's just right into the code. And if you're a Python dev, feel free to paste this into your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; 

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://kalob.io/teaching/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll see the HTML for my website. Now, all we need to do is parse the HTML. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: utf-8 encoding is most commonly used on the internet. So we'll want to decode the HTML we scraped into utf-8 compatible text (in a giant string)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our code now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; 

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://kalob.io/teaching/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you'll see the HTML looks a little nicer now. &lt;/p&gt;

&lt;p&gt;Now here's a big hairy problem: parsing HTML. Some people use &lt;code&gt;attr=""&lt;/code&gt; some people use &lt;code&gt;attr=''&lt;/code&gt; some people use XHTML and some don't. &lt;/p&gt;

&lt;p&gt;So how do we get around this? &lt;/p&gt;

&lt;p&gt;Introducing: Beautiful Soup 4. &lt;/p&gt;

&lt;p&gt;In your Python environment pip install this package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;beautifulsoup4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And your code now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; 

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://kalob.io/teaching/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt;  &lt;span class="c1"&gt;# You'll need to `pip install `
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"html.parser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Shows the parsed HTML
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# Returns &amp;lt;class 'bs4.BeautifulSoup'&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So our &lt;code&gt;soup&lt;/code&gt; variable is no longer a string, but an object. This means we can use object methods on it - like looking for  certain elements in the HTML we scraped. &lt;/p&gt;

&lt;p&gt;Let's put together a list of all the links on this page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; 

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://kalob.io/teaching/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt;  &lt;span class="c1"&gt;# You'll need to `pip install `
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"html.parser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;courses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"class"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look at that.. now we have a list of buttons from the page we scraped at the beginning of this article. &lt;/p&gt;

&lt;p&gt;Lastly, let's loop through them to get the button text and the link:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Listen, I wrote 3 print statements to make this clear - but typically I'd write this in a single line. &lt;/p&gt;

&lt;p&gt;Now we have something to work with! We have the entire HTML element, the &lt;code&gt;href&lt;/code&gt; attribute, and the &lt;code&gt;innerText&lt;/code&gt; without any whitespace. &lt;/p&gt;

&lt;p&gt;The entire script is 9 lines of code and looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt;  &lt;span class="c1"&gt;# You'll need to `pip install `
&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://kalob.io/teaching/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"html.parser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;courses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"class"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; -&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#moving-this-data-somewhere-useful"&gt;
  &lt;/a&gt;
  Moving this data somewhere useful.
&lt;/h2&gt;

&lt;p&gt;You know me, I'm a HUGE fan of Airtable. &lt;/p&gt;

&lt;p&gt;And instead of using local database or a cloud based database, I like to use Airtable so me and my team and work with the data and easily expand the tables if we need to. Like if we needed to add a column to see if a course meetings our criteria to be on Arbington.com. &lt;/p&gt;

&lt;p&gt;For this we use Airtables API and the python package known as &lt;br&gt;
&lt;code&gt;airtable-python-wrapper&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Go ahead an install this through pip.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;airtable-python-wrapper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now before we continue, you'll need a &lt;a href="https://airtable.com/invite/r/JXx8l4fX"&gt;free Airtable account&lt;/a&gt; 👈 that's our referral link. No need to use it, it's just a nice kickback for us for constantly promoting Airtable 😂&lt;/p&gt;

&lt;p&gt;Once you have an account, you need to dig up your app API key, your table API key, and your Base Name. It would look something like this in python:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airtable.airtable&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Airtable&lt;/span&gt;

&lt;span class="n"&gt;airtable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Airtable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'appXXXXXXXXX'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Links'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'keyXXXXXXXXXX'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, all we need to do is create a dictionary of Airtable Column Names, and insert the record.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt;  &lt;span class="c1"&gt;# You'll need to `pip install `
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airtable.airtable&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Airtable&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://kalob.io/teaching/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"html.parser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;courses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"class"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;

&lt;span class="n"&gt;airtable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Airtable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'appXXXXXXXXX'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Links'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'keyXXXXXXXXXX'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;new_record&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"Link"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;"Text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;airtable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming you setup your Airtable columns, table and API keys properly, you should see my website links and URLs appear in your Airtable. &lt;/p&gt;

&lt;p&gt;Now you and your team can scrape webpages and store the data in Airtable for the rest of your team to use! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pulling-data-out-to-work-with-it"&gt;
  &lt;/a&gt;
  Pulling data out to work with it
&lt;/h2&gt;

&lt;p&gt;Now that all the data we want is in Airtable, we can use the same Python package to pull the data out, work with it, scrape more data, and update each record. &lt;/p&gt;

&lt;p&gt;But that's for another day 😉 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-learn-python"&gt;
  &lt;/a&gt;
  Want to learn Python?
&lt;/h2&gt;

&lt;p&gt;If you're looking for online courses, take a look at Arbington.com, &lt;a href="https://arbington.com/search/?q=python"&gt;there are over 40 Python courses&lt;/a&gt; available. &lt;/p&gt;

&lt;p&gt;And it comes with a free 14 day trial to access over 1,500 courses immediately! 🔥 &lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>AWS Serverless and the DynamoDB Single Table Design - Hands On with CDK v2</title>
      <author>Adriano Sastre Vieira</author>
      <pubDate>Thu, 30 Dec 2021 00:25:12 +0000</pubDate>
      <link>https://dev.to/adrianosastre/aws-serverless-and-the-dynamodb-single-table-design-hands-on-with-cdk-v2-38d0</link>
      <guid>https://dev.to/adrianosastre/aws-serverless-and-the-dynamodb-single-table-design-hands-on-with-cdk-v2-38d0</guid>
      <description>&lt;p&gt;Hi, I'm Adriano Sastre Vieira, software developer at Inatel Competence Center. &lt;/p&gt;

&lt;p&gt;In this article I'll talk about &lt;strong&gt;AWS Serverless&lt;/strong&gt;, also called &lt;strong&gt;managed services&lt;/strong&gt; (because you don't have to manage a server in order to deploy these services), with more focus on &lt;strong&gt;DynamoDB&lt;/strong&gt; and the &lt;strong&gt;Single Table Design&lt;/strong&gt; concept.&lt;/p&gt;

&lt;p&gt;Not recommended, but &lt;a href="#hands-on"&gt;click here if you want to skip the theory and go strait to the hands on&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#serverless"&gt;
  &lt;/a&gt;
  Serverless!
&lt;/h1&gt;

&lt;p&gt;DynamoDB is a AWS managed database service. When we talk about AWS managed service, we're also talking about Serverless.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt; is the practice of using managed services with event driven compute functions to avoid or minimize infrastructure management, configuration, operations, and idle capacity.&lt;/p&gt;

&lt;p&gt;But it's not just about computing, there is a wide range of things an application architecture may need, e.g. Compute, Storage, Data, Monitoring, Queue, Notification ...&lt;/p&gt;

&lt;p&gt;So, it is correct to say that &lt;strong&gt;DynamoDB&lt;/strong&gt; is a serverless database, or more specifically, an AWS managed database service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt; is a big paradigm shift, potentially even more impactful than the move to the &lt;strong&gt;Cloud&lt;/strong&gt; before it!&lt;/p&gt;

&lt;p&gt;Check the articles below if you want to go deeper into Serverless:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/serverless-transformation/in-defence-of-serverless-the-term-764514653ea7"&gt;In defence of “Serverless” — the term&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pauldjohnston.medium.com/serverless-best-practices-b3c97d551535"&gt;Serverless Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#microservices"&gt;
  &lt;/a&gt;
  Microservices
&lt;/h1&gt;

&lt;p&gt;Yet on the related concepts, we have the &lt;strong&gt;Microservices&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The Microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. &lt;/p&gt;

&lt;p&gt;These services are built around business capabilities and independently deployable by fully automated deployment machinery. &lt;/p&gt;

&lt;p&gt;Many people are using Serverless applications to build a Microservice architecture!&lt;/p&gt;

&lt;p&gt;I believe this is the number one article for those who wants to go deeper on &lt;a href="https://martinfowler.com/articles/microservices.html"&gt;Microservices&lt;/a&gt; - from Martin Fowler.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#serverless-and-the-aws-cloud"&gt;
  &lt;/a&gt;
  Serverless and the AWS Cloud
&lt;/h1&gt;

&lt;p&gt;Ok, some important things about AWS before we cut to the chase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-fundamentals-the-5-pillars-new-mental-models"&gt;
  &lt;/a&gt;
  AWS - Fundamentals (The 5 Pillars, new "mental models")
&lt;/h2&gt;

&lt;p&gt;When starting working with AWS, it's normal to feel quite lost, as it has about 200 services, many of them overlapping others on their responsibilities, doing similar stuff, and the AWS extensive documentation does not seem to help beginners, it's difficult to FOCUS and use what is best for each case.&lt;/p&gt;

&lt;p&gt;In addition, when we change from a monolithic architecture to micro services, it's a big shift, it's like changing from classical physics to quantum physics!&lt;/p&gt;

&lt;p&gt;So, a very good start point is to understand the &lt;strong&gt;AWS Fundamentals&lt;/strong&gt;, which talks about &lt;strong&gt;the 5 pillars&lt;/strong&gt; that requires new &lt;strong&gt;mental models&lt;/strong&gt;, and summarizes the AWS services and concepts for each one:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Operational excellence&lt;/strong&gt;: thinking about operations as automation (CloudFormation, CDK ...)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Security&lt;/strong&gt;: zero trust, the principle of least privilege (IAM, data encryption ...)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reliability&lt;/strong&gt;: using fault isolation zones to limit blast radius (regions, quotas, throttling ...)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Performance Efficiency&lt;/strong&gt;: think of your services as cattle, not pets. (horizontal vs vertical scaling, auto scaling ...)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cost Optimization&lt;/strong&gt;: OpEx (pay-as-you-go) instead of CapEx (one-time purchase)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QpSZGY2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxzl3febx9mnua7v92ek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QpSZGY2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxzl3febx9mnua7v92ek.png" alt="AWS Fundamentals" width="880" height="686"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So if you didn't yet, now it's a good opportunity to check the &lt;a href="https://aws.amazon.com/getting-started/fundamentals-core-concepts/"&gt;AWS Fundamentals&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-aws-managed-services"&gt;
  &lt;/a&gt;
  The AWS Managed Services
&lt;/h2&gt;

&lt;p&gt;When we talk about AWS managed services, these are the main ones:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TT4DLApH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtbz8so5ssvrhm9lit4r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TT4DLApH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtbz8so5ssvrhm9lit4r.png" alt="AWS Serverless" width="880" height="571"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many pros on using managed services:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Cost reduction&lt;/strong&gt;: the initial cost tend to zero (free tier for most of them, after that pay as you use)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Security&lt;/strong&gt;: e.g. no need to install security patches on servers&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;NoOps&lt;/strong&gt;: e.g. no servers / storage to manage or to scale, no need for a infrastructure team&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;More scalable&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;High performance&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Greener&lt;/strong&gt;: if you don't need, you're not using the server resources&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Productivity&lt;/strong&gt;: developers focus on delivering business value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some cool links to learn more about Serverless on AWS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/serverless/"&gt;Serverless on AWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/getting-started/deep-dive-serverless/"&gt;AWS Deep Dive Serverless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serverlessland.com/"&gt;Serverless Land&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/free"&gt;AWS Free Tier&lt;/a&gt; - in order to check if a AWS service is free or how much it costs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#minimum-stack-api-gateway-lambda-dynamodb"&gt;
  &lt;/a&gt;
  Minimum Stack: API Gateway + Lambda + DynamoDB
&lt;/h2&gt;

&lt;p&gt;While this article focus is the DynamoDB, in order to talk about it in a more practical way, it's important to think in a minimum sample architecture where it fits.&lt;/p&gt;

&lt;p&gt;The classical AWS example is: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An API (e.g. some CRUD) implemented via API Gateway;&lt;/li&gt;
&lt;li&gt;This API is accessed by a client (e.g, the Postman, or a mobile/web app);&lt;/li&gt;
&lt;li&gt;Lambda function(s) in order to manage this API and interface with the database&lt;/li&gt;
&lt;li&gt;And the DynamoDB table in order to store data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ad8172hG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ll5gg9eb6u9xzcxjq8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ad8172hG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ll5gg9eb6u9xzcxjq8r.png" alt="Minimum Stack" width="880" height="305"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll briefly talk about API Gateway and Lambda before going to DynamoDB. Pay attention to the &lt;strong&gt;&lt;em&gt;italic&lt;/em&gt;&lt;/strong&gt; words, they are related to the &lt;strong&gt;Serverless&lt;/strong&gt; concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#api-gateway"&gt;
  &lt;/a&gt;
  API Gateway
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/api-gateway"&gt;https://aws.amazon.com/api-gateway&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fully &lt;strong&gt;&lt;em&gt;managed service&lt;/em&gt;&lt;/strong&gt; that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at &lt;strong&gt;&lt;em&gt;any scale&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Handles all the tasks involved in accepting and processing up to hundreds of thousands of concurrent API calls, including traffic management, CORS support, authorization and access control, throttling, monitoring, and API version management.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lambda"&gt;
  &lt;/a&gt;
  Lambda
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/lambda"&gt;https://aws.amazon.com/lambda&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Lambda is an &lt;strong&gt;&lt;em&gt;event-driven&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;serverless computing platform&lt;/em&gt;&lt;/strong&gt; provided by Amazon as a part of Amazon Web Services. &lt;/p&gt;

&lt;p&gt;Runs code in response to events and &lt;strong&gt;&lt;em&gt;automatically manages the computing resources&lt;/em&gt;&lt;/strong&gt; required by that code.&lt;/p&gt;

&lt;p&gt;Triggered by events (e.g. HTTP Calls via API Gateway, S3 new objects on a bucket, new SQS in a queue, new item in a DynamoDB table ...)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dynamodb"&gt;
  &lt;/a&gt;
  DynamoDB
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/dynamodb/"&gt;https://aws.amazon.com/dynamodb/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we're talking. DynamoDB definitions and main characteristics from AWS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Fast&lt;/strong&gt;&lt;/em&gt; and &lt;strong&gt;&lt;em&gt;flexible&lt;/em&gt;&lt;/strong&gt; NoSQL database service for &lt;strong&gt;&lt;em&gt;any scale&lt;/em&gt;&lt;/strong&gt;. Key-value and document database that delivers &lt;em&gt;&lt;strong&gt;single-digit millisecond performance&lt;/strong&gt;&lt;/em&gt; at &lt;em&gt;&lt;strong&gt;any scale&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Fully managed&lt;/strong&gt;&lt;/em&gt;, multi-region, multi-active, durable database with built-in security, backup and restore, and in-memory caching for &lt;strong&gt;&lt;em&gt;internet-scale&lt;/em&gt;&lt;/strong&gt; applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Free-tier forever&lt;/strong&gt;&lt;/em&gt; applied, up to 25GB storage, 25 read/write provisioned units (about 200M requests/month). After that: cost by storage and requests.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For those who are curious about its roots, read &lt;a href="https://www.dynamodbguide.com/the-dynamo-paper"&gt;"The Dynamo Paper"&lt;/a&gt;. Summary: it was created by Amazon (2004-2007), public released by AWS in 2012.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamodb-as-part-of-a-serverless-architecture"&gt;
  &lt;/a&gt;
  DynamoDB as part of a Serverless Architecture
&lt;/h3&gt;

&lt;p&gt;When we first saw these &lt;em&gt;propaganda&lt;/em&gt;, it seems all good news alright? &lt;/p&gt;

&lt;p&gt;But wait, it is not that simple.&lt;/p&gt;

&lt;p&gt;First, adopting DynamoDB in place of a relational database is just part of moving to a Serverless Architecture, although a very important one.&lt;/p&gt;

&lt;p&gt;The idea of using NoSQL for any and all core business requirements is quite new, and this is because the whole system now works at a scale and event-driven nature before inexistent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bad designed DynamoDB tables has often the major impact on a serverless architectured system, both on performance and costs!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Don't get me wrong, DynamoDB is really great! There are lots of benefits on using it, as easily integrating it with other managed services like lambdas and very low initial cost.&lt;/p&gt;

&lt;p&gt;And yes, it is possible to use it correctly on the majority of the systems (remember: Amazon uses it on its shopping cart, so why can't we?); but in summary: &lt;strong&gt;DynamoDB is complex, doing it well even more so!&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamodb-nosql-design-vs-rdbms"&gt;
  &lt;/a&gt;
  DynamoDB NoSQL design vs RDBMS
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NoSQL&lt;/strong&gt; design requires a different mindset than &lt;strong&gt;RDBMS&lt;/strong&gt; design.&lt;/p&gt;

&lt;p&gt;With RDBMS, you can go ahead and create a &lt;strong&gt;normalized&lt;/strong&gt; data model without thinking about &lt;strong&gt;access patterns&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;By contrast, you shouldn't start designing the schema for DynamoDB until you know the questions that need to be answered. &lt;strong&gt;Understanding the business problems and the application use cases up front is essential!&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To clarify, it follows some common access patterns examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get a user's profile data&lt;/li&gt;
&lt;li&gt;List the user's orders&lt;/li&gt;
&lt;li&gt;Get an order and its items&lt;/li&gt;
&lt;li&gt;List the user's orders by status&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, on a real system there are lots more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamodb-design-considerations"&gt;
  &lt;/a&gt;
  DynamoDB design considerations
&lt;/h3&gt;

&lt;p&gt;This AWS documentation "&lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-general-nosql-design.html#bp-general-nosql-design-concepts"&gt;NoSQL Design&lt;/a&gt;" goes deeper on the concepts I've summarized in this image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ynw5n28x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6m98ww7mu014bjysmjk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ynw5n28x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6m98ww7mu014bjysmjk.png" alt="Design considerations" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you identify specific query requirements, you can organize data according to general principles that govern performance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Keep related data together&lt;/strong&gt;.  Keeping related data in close proximity has a major impact on cost and performance. Instead of distributing related data items across multiple tables, you should keep related items in your NoSQL system as close together as possible. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use sort order&lt;/strong&gt;.  Related items can be grouped together and queried efficiently if their key design causes them to sort together. This is an important NoSQL design strategy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Distribute queries&lt;/strong&gt;.  It is also important that a high volume of queries not be focused on one part of the database, where they can exceed I/O capacity. Instead, you should design data keys to distribute traffic evenly across partitions as much as possible, avoiding "hot spots".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Using indexes&lt;/strong&gt;.  By creating specific global secondary indexes, you can enable different queries than your main table can support, and that are still fast and relatively inexpensive.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;These general principles translate into some common design patterns that you can use to model data efficiently in DynamoDB.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This presentation &lt;a href="https://d1.awsstatic.com/events/reinvent/2019/REPEAT1_Advanced_design_patterns_for_Amazon_DynamoDB_DAT334-R1.pdf"&gt;Advanced Design Patterns for Amazon DynamoDB&lt;/a&gt; is great for better understanding it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamodb-table-capacity"&gt;
  &lt;/a&gt;
  DynamoDB - table capacity
&lt;/h3&gt;

&lt;p&gt;Per DynamoDB table, it is possible to configure the capacity as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;OnDemand&lt;/strong&gt;: automatic and "infinite" scaling&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Provisioned&lt;/strong&gt;: possible to define independent read and write unit capacities; also possible to configure auto-scaling rules, e.g. min/max scaling&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When correctly configured, a provisioned capacity costs less than an on demand capacity.&lt;/p&gt;

&lt;p&gt;It is possible to change between OnDemand and Provisioned once a day! This is very useful for scenarios where on a specific time range, it is not possible to predict the scaling (e.g. e-commerce system on Black Fridays).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamodb-pk-sk-attributes"&gt;
  &lt;/a&gt;
  DynamoDB pk, sk, attributes
&lt;/h3&gt;

&lt;p&gt;As key-value and document database, each DynamoDB table item may have different attributes! &lt;/p&gt;

&lt;p&gt;But it is mandatory to define the primary key. In a nutshell:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Primary Key&lt;/strong&gt;:&lt;br&gt;
&lt;strong&gt;PK&lt;/strong&gt; = Partition Key (aka hash key) (mandatory)&lt;br&gt;
&lt;strong&gt;SK&lt;/strong&gt; = Sort Key (aka range key) (optional)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attributes&lt;/strong&gt;: Binary, Number or String&lt;br&gt;
Can be grouped in a JSON-like structure&lt;/p&gt;

&lt;p&gt;This image exemplifies the DynamoDB structure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YaIqyuU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dyk07fad0fbfjn4e494.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YaIqyuU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dyk07fad0fbfjn4e494.png" alt="DynamoDB structure" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this shows an example of a populated DynamoDB table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2TRDzXhQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/po9ujdd9hn15ds1oosud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2TRDzXhQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/po9ujdd9hn15ds1oosud.png" alt="Populated Table" width="880" height="280"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dynamodb-how-to-query-data"&gt;
  &lt;/a&gt;
  DynamoDB - How to query data
&lt;/h3&gt;

&lt;p&gt;Querying data is normally the most important consideration when designing DynamoDB schema, as usually there are much more reading than writing operations.&lt;/p&gt;

&lt;p&gt;There are basically 3 ways of querying DynamoDB data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Get&lt;/strong&gt; = one specific item, by PK or PK/SK&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Query&lt;/strong&gt; = several items, by PK/SK or indexed attributes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scan&lt;/strong&gt; = several items, by any table attribute&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is very important: the &lt;strong&gt;get&lt;/strong&gt; and &lt;strong&gt;query&lt;/strong&gt; operations are much faster comparing to the &lt;strong&gt;scan&lt;/strong&gt; operation, which has a poor performance and a high cost.&lt;/p&gt;

&lt;p&gt;So it is crucial to model a DynamoDB table in a way that it is possible to query all necessary data, for every access pattern, using get or query operations, and avoiding scan operations.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dynamodb-indexes"&gt;
  &lt;/a&gt;
  DynamoDB indexes
&lt;/h3&gt;

&lt;p&gt;We may define 2 kinds of indexes on DynamoDB:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GSI = Global Secondary Index = more common, applied to all table items&lt;/li&gt;
&lt;li&gt;LSI = Local Secondary Index = applied to a particular table partition (pk)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It follows the main pros and cons of using DynamoDB indexes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pros: performance: with an index, it is possible to &lt;strong&gt;query&lt;/strong&gt; (instead of &lt;strong&gt;scan&lt;/strong&gt;) on attributes other than the PK/SK&lt;/li&gt;
&lt;li&gt;Cons: behind the scenes, each GSI duplicates the table storage, along with its storage costs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also a limit of 20 GSI per table.&lt;/p&gt;

&lt;p&gt;The following image provides more details on DynamoDB indexes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HSSxfwfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnkf9hwx5u47ho1y43o4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HSSxfwfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnkf9hwx5u47ho1y43o4.png" alt="Indexes" width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dynamodb-ttl-time-to-live"&gt;
  &lt;/a&gt;
  DynamoDB TTL (time to live)
&lt;/h3&gt;

&lt;p&gt;Optionally, a &lt;strong&gt;time to live&lt;/strong&gt; attribute can be defined on DynamoDB tables, and it is very useful on scenarios where items have to be deleted after certain time is reached.&lt;/p&gt;

&lt;p&gt;Another interesting behavior, each table item may have a different time to live value, or no TTL value at all!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dynamodb-single-table-design"&gt;
  &lt;/a&gt;
  DynamoDB - Single Table Design
&lt;/h2&gt;

&lt;p&gt;Different from relational databases where we have to &lt;strong&gt;normalize&lt;/strong&gt; the data, it is an AWS recommendation to maintain as few tables as possible when modeling with DynamoDB, as stated on &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-general-nosql-design.html"&gt;NoSQL Design for DynamoDB&lt;/a&gt; documentation.&lt;/p&gt;

&lt;p&gt;When we normalize data, we make the data access very flexible, but it reduces the scalability, due to the high cost of the joins operations.&lt;/p&gt;

&lt;p&gt;But DynamoDB was built for enormous, high-velocity use cases, such as the Amazon.com shopping cart. Rather than working to make joins scale better, DynamoDB sidesteps the problem by removing the ability to use joins at all!&lt;/p&gt;

&lt;p&gt;Again, DynamoDB was build with web scale in mind. It can grow almost infinitely without degrading performance. In order to achieve this DynamoDB removed joins completely.&lt;/p&gt;

&lt;p&gt;You have to model the data in such a way that you can read the data, ideally, in a single request by &lt;strong&gt;denormalizing&lt;/strong&gt; the data.&lt;/p&gt;

&lt;p&gt;The main reason for using a DynamoDB single table is to retrieve multiple, heterogenous item types using a single request.&lt;/p&gt;

&lt;p&gt;The following links are great to understand more about the single table design concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.alexdebrie.com/posts/dynamodb-single-table/"&gt;The What, Why, and When of Single-Table Design with DynamoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serverlessfirst.com/dynamodb-modelling-single-vs-multi-table/"&gt;Comparing multi and single table approaches to designing a DynamoDB data model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cbannes.medium.com/microservices-with-dynamodb-should-you-use-a-single-table-or-use-one-table-per-microservice-25f54cf610d9"&gt;Microservices with DynamoDB: should you use a single table or use one table per microservice?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#single-table-desing-pros-and-cons"&gt;
  &lt;/a&gt;
  Single Table Desing - Pros and Cons
&lt;/h3&gt;

&lt;p&gt;Summary of the advantages and disadvantages of applying the single table design:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qqUHYVEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xaynq0coiix67qy42bsx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qqUHYVEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xaynq0coiix67qy42bsx.png" alt="pros and cons" width="880" height="413"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dynamodb-when-and-how-not-to-use"&gt;
  &lt;/a&gt;
  DynamoDB - When and how (not) to use
&lt;/h2&gt;

&lt;p&gt;I summarize in the following images when and how to use and not to use DynamoDB:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rRPqK5e2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60acpgq407ynp4iripts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rRPqK5e2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60acpgq407ynp4iripts.png" alt="how to use" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More about &lt;a href="https://www.alexdebrie.com/posts/dynamodb-patterns-serverless/#the-true-microservice"&gt;the true microservice&lt;/a&gt; here. In a nutshell, it favors using a DynamoDB single table per microservice, but not per the whole system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aX54ZqP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fp09xftsvftoe3hphrd7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aX54ZqP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fp09xftsvftoe3hphrd7.png" alt="how not to use" width="880" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Indeed the &lt;strong&gt;Faux SQL&lt;/strong&gt; is a common mistake when starting using a NoSQL database as DynamoDB or MongoDB. More about the &lt;a href="https://www.alexdebrie.com/posts/dynamodb-patterns-serverless/#faux-sql"&gt;Faux SQL&lt;/a&gt; here.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#dynamodb-hands-on"&gt;
  &lt;/a&gt;
  DynamoDB - Hands on! &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#from-relational-to-nosql"&gt;
  &lt;/a&gt;
  From Relational to NoSQL
&lt;/h2&gt;

&lt;p&gt;In order to get the hands dirty on the DynamoDB single table design, let's imagine a simple system where we have users and orders.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rdbms"&gt;
  &lt;/a&gt;
  RDBMS:
&lt;/h3&gt;

&lt;p&gt;In the relational world we would have the following model:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RdWlDgCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5jry0v006xlk1212dww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RdWlDgCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5jry0v006xlk1212dww.png" alt="relational model" width="880" height="608"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dynamodb"&gt;
  &lt;/a&gt;
  DynamoDB
&lt;/h3&gt;

&lt;p&gt;When we model it with DynamoDB, the first and more important question is: &lt;strong&gt;What are the access patterns for my system?&lt;/strong&gt; &lt;br&gt;
In other words, how the system will query the data in the database?&lt;/p&gt;

&lt;p&gt;In this case, we can think about the following access patterns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;List all users&lt;/li&gt;
&lt;li&gt;Get user profile&lt;/li&gt;
&lt;li&gt;Add user&lt;/li&gt;
&lt;li&gt;Edit user&lt;/li&gt;
&lt;li&gt;Delete User&lt;/li&gt;
&lt;li&gt;List all users orders&lt;/li&gt;
&lt;li&gt;List users orders by status&lt;/li&gt;
&lt;li&gt;List users order items&lt;/li&gt;
&lt;li&gt;Add user order&lt;/li&gt;
&lt;li&gt;Edit user order&lt;/li&gt;
&lt;li&gt;Delete user order&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that in mind, we have the following schema for a DynamoDB single table on this scenario:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i0MyEti7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1i18u3q8zz7xm7kvm7qz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i0MyEti7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1i18u3q8zz7xm7kvm7qz.png" alt="single table" width="880" height="156"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that we have in the same table, different items for users and orders information. They even have different attributes. But the important is that they have different patterns in their pk and sk values, and these patterns are used in order to query data for all access patterns.&lt;/p&gt;

&lt;p&gt;Again, there are more detailed articles explaining how to go from a relational to a NoSQL database, if you wanna go further:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.trek10.com/blog/dynamodb-single-table-relational-modeling/"&gt;From relational DB to single DynamoDB table: a step-by-step exploration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jeremydaly.com/how-to-switch-from-rdbms-to-dynamodb-in-20-easy-steps/"&gt;How to switch from RDBMS to DynamoDB in 20 easy steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#iac-the-infrastructure-as-code"&gt;
  &lt;/a&gt;
  IaC - the Infrastructure as Code
&lt;/h2&gt;

&lt;p&gt;Before configuring the AWS services and coding the business logic, let's do it right!&lt;/p&gt;

&lt;p&gt;Having the infrastructure as code is essential in order to code versioning (ex: git) all the AWS services configuration, instead of making it through the AWS Console (and totally losing control when something goes wrong!).&lt;/p&gt;

&lt;p&gt;IaC is also critical to implement CI/CD pipelines.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cloudformation"&gt;
  &lt;/a&gt;
  CloudFormation
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/cloudformation/"&gt;https://aws.amazon.com/cloudformation/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When it comes to the AWS IaC, the most basic level is the CloudFormation. Basically, it consists on yaml or json templates that describes your resources and its dependencies so you can launch and configure them together as a stack. &lt;/p&gt;

&lt;p&gt;In other words, it is an automated process for resources creation. But it is still quite hard and error-prone to program IaC with CloudFormation.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cdk-the-cloud-development-kit"&gt;
  &lt;/a&gt;
  CDK - The Cloud Development Kit
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/cdk/api/v2/"&gt;https://docs.aws.amazon.com/cdk/api/v2/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=bz4jTx4v-l8"&gt;Released on 2019&lt;/a&gt;, we now have the &lt;strong&gt;AWS CDK&lt;/strong&gt;: the official AWS open source software development framework to define your cloud application resources using familiar programming languages. And now in the end of 2021, we have CDK v2 released.&lt;/p&gt;

&lt;p&gt;With CDK, you can model the infrastructure resources in high-level languages like Java, Typescript, Python or C#.&lt;/p&gt;

&lt;p&gt;Behind the scenes, the CDK will generate the CloudFormation templates and deploy them as AWS CloudFormation Stacks.&lt;/p&gt;

&lt;p&gt;It is much safe, easy and fun to program AWS IaC code with CDK that with CloudFormation!! Also, when compared to other IaC frameworks (e.g. serverless,  terraform, etc), it has the following advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implemented and maintained by AWS &lt;/li&gt;
&lt;li&gt;Easy integration with AWS services&lt;/li&gt;
&lt;li&gt;More secure (e.g. roles automatically generated for services, from read/write permissions)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#step-by-step"&gt;
  &lt;/a&gt;
  Step by step
&lt;/h2&gt;

&lt;p&gt;Let's get the hands dirty!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;If not yet, create / install / configure the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1 - Create an AWS Account&lt;/strong&gt; if you don't have yet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2 - After logged into the AWS Console, add an IAM user&lt;/strong&gt; with "Access type: Programatic access" and for the sake of this example, add the "Administrator Access" policy to this user. Copy its "Access key ID" and "Secret access key", we'll use them soon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3 - Download and install VS Code&lt;/strong&gt;: &lt;a href="https://code.visualstudio.com/"&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4 - Install Node and NPM&lt;/strong&gt;: &lt;a href="https://nodejs.org/en/download/"&gt;https://nodejs.org/en/download/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After installing, check their version. At the moment of this writing I have node v16.13.1 and npm 8.3.0&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node -v
npm -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5 - Download and install AWS cli&lt;/strong&gt;: &lt;a href="https://aws.amazon.com/cli/"&gt;https://aws.amazon.com/cli/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After installing, check its version and configure it to your AWS account IAM user created on step 2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws --version
aws configure
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;6 - Install AWS CDK&lt;/strong&gt;: &lt;/p&gt;

&lt;p&gt;Install CDK via NPM and check its version. At the moment I have 2.3.0 (build beaa5b2)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g aws-cdk
cdk --version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;7 - Download and install Docker&lt;/strong&gt;: &lt;a href="https://www.docker.com/products/docker-desktop"&gt;https://www.docker.com/products/docker-desktop&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Docker is only used in order to deploy the CDK project into AWS, we do not have containerized AWS services in this example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8 - Download and install Postman&lt;/strong&gt;: &lt;a href="https://www.postman.com/"&gt;https://www.postman.com/&lt;/a&gt; (used in order to test the APIs)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vBV45Jp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8e4mihxdoy2uhjw1j20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vBV45Jp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8e4mihxdoy2uhjw1j20.png" alt="architecture" width="880" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As per the above architecture, this project consists on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API Gateway, with the /users and /products RESTful resources&lt;/li&gt;
&lt;li&gt;Lambdas: functions for users and orders, they handle the APIs and DynamoDB data&lt;/li&gt;
&lt;li&gt;DynamoDB: one single table to store users and orders data&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#open-project-on-vs-code"&gt;
  &lt;/a&gt;
  Open project on VS Code
&lt;/h3&gt;

&lt;p&gt;This project was implemented with &lt;strong&gt;CDK v2&lt;/strong&gt; with &lt;strong&gt;Typescript&lt;/strong&gt;, and is public available on github:&lt;br&gt;
&lt;a href="https://github.com/adrianosastre/DynamoDB-CDK-Hands-On"&gt;github.com/adrianosastre/DynamoDB-CDK-Hands-On&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please clone and open it on VS Code, and look at these important chunks of code:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1 - Resources application stack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;lib/resources-application-stack.ts&lt;/strong&gt; file is &lt;strong&gt;IaC&lt;/strong&gt; code, it creates the DynamoDB table and the users and orders Lambdas. &lt;/p&gt;

&lt;p&gt;Important things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The "grantReadWrite" method that manages the lambda permissions on the DynamoDB table.&lt;/li&gt;
&lt;li&gt;The lambdas were implemented as class readonly public attributes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2 - API stack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;lib/api-gateway-stack.ts&lt;/strong&gt; file, also an &lt;strong&gt;IaC&lt;/strong&gt; code, creates the API Gateway with our users and orders resources. &lt;/p&gt;

&lt;p&gt;Note that it uses the lambdas exposed on the &lt;strong&gt;lib/resources-application-stack.ts&lt;/strong&gt; file in order to create the resources integration with the lambdas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3 - The CDK main file&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The file under the bin directory, in this case the &lt;strong&gt;bin/dynamoDB-CDK-Hands-On-Project.ts&lt;/strong&gt; file, is the main file in the CDK structure. &lt;/p&gt;

&lt;p&gt;It instantiates the stacks and care about its dependencies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4 - Lambdas code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;users.js&lt;/strong&gt; and &lt;strong&gt;orders.js&lt;/strong&gt; files under &lt;strong&gt;lambda&lt;/strong&gt; directory are not IaC code. &lt;/p&gt;

&lt;p&gt;Instead, they are the "core" of the system, containing the business logic code behind the lambdas, and are executed every time the lambdas are triggered.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deploying-on-aws"&gt;
  &lt;/a&gt;
  Deploying on AWS
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Note: AWS cli must be correctly configured as explained in the Prerequisites session.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Only once, it is necessary to execute the following command so the CDK will deploy into your AWS account the required resources for it to deploy projects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, you can deploy the project to your AWS account via the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy --all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every time you change the IaC or lambda code, you can use this command to redeploy, and it does not impact the services usage!&lt;/p&gt;

&lt;p&gt;After the project is deployed, you can check in your AWS account the following resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://console.aws.amazon.com/cloudformation"&gt;&lt;strong&gt;CloudFormation&lt;/strong&gt;&lt;/a&gt;: the stacks with the resources programmed via CDK were deployed here:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--krNW3veV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p45fqn28ip2iov24o69q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--krNW3veV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p45fqn28ip2iov24o69q.png" alt="cloudformation" width="880" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://console.aws.amazon.com/apigateway/main/apis"&gt;&lt;strong&gt;API Gateway&lt;/strong&gt;&lt;/a&gt;: the DynamoDB-CDK-Hands-On-API API is deployed and public available:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_6CWLJox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4k4rvgkjclg5hf1mzvzy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_6CWLJox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4k4rvgkjclg5hf1mzvzy.png" alt="api gateway" width="880" height="179"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the API expanded showing its resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_BsoXJB9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hevimw31qqjj6yz8zwtl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_BsoXJB9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hevimw31qqjj6yz8zwtl.png" alt="api gateway expanded" width="880" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, the Stages &amp;gt; prod &amp;gt; &lt;strong&gt;Invoke URL&lt;/strong&gt; shows the base URL for this API, so you can use it, for example, with Postman:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMdW1hqT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxpk4c75kb3vt2ia7urd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMdW1hqT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxpk4c75kb3vt2ia7urd.png" alt="base url" width="880" height="239"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://console.aws.amazon.com/lambda"&gt;&lt;strong&gt;Lambda&lt;/strong&gt;&lt;/a&gt;: the functions to handle users and orders are deployed:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ozIqRddf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8r7tluc2wgxe0yvfnpc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ozIqRddf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8r7tluc2wgxe0yvfnpc.png" alt="lambdas" width="880" height="248"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://console.aws.amazon.com/dynamodb"&gt;&lt;strong&gt;DynamoDB&lt;/strong&gt;&lt;/a&gt;: The DynamoDB-CDK-Hands-On-Single-Table table was also created and deployed:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WZ8dT3fq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jad3asec8fxtgysipxez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WZ8dT3fq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jad3asec8fxtgysipxez.png" alt="dynamodb" width="880" height="211"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-with-postman"&gt;
  &lt;/a&gt;
  Test with Postman
&lt;/h3&gt;

&lt;p&gt;After deployed, it is possible to test all the project URLs with Postman. Take the following images as references and use Postman with your API base URL.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding users:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pUOA9ZE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qirc5ppk4001jufwk9ri.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pUOA9ZE5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qirc5ppk4001jufwk9ri.png" alt="add user" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yk4KAU_C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0d7mtdvkfyjysr9c0nqi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yk4KAU_C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0d7mtdvkfyjysr9c0nqi.png" alt="add user lambda" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Listing all users:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nAGMwhsx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hohlmzvjmmaspiusl8iu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAGMwhsx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hohlmzvjmmaspiusl8iu.png" alt="list all users" width="880" height="675"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEan-xCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxo9odc8j89457lfawt6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEan-xCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxo9odc8j89457lfawt6.png" alt="list users lambda" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Getting a user profile data:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2OBw5Dod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ofhj6e9bh97m6kk8xr2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2OBw5Dod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ofhj6e9bh97m6kk8xr2.png" alt="get user profile" width="880" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YbM0Kbmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws5c7t1n93znp62ai2z1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YbM0Kbmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws5c7t1n93znp62ai2z1.png" alt="get user profile lambda" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Editing a user:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eq1yMqq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fs7h5lrp1diav16t2r5t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eq1yMqq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fs7h5lrp1diav16t2r5t.png" alt="edit user" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZOnQQHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gin76tgtrujoq41zreyt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZOnQQHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gin76tgtrujoq41zreyt.png" alt="edit user lambda" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deleting a user:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MDBpgk6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avpah36hcn6vu0atghyx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MDBpgk6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avpah36hcn6vu0atghyx.png" alt="delete user" width="880" height="302"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5bc68JF3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1glmzzgctwsqtehyrz75.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5bc68JF3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1glmzzgctwsqtehyrz75.png" alt="delete user lambda" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding an order for a user:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yCHrO54T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hrfe3bury6z5wur334w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yCHrO54T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hrfe3bury6z5wur334w.png" alt="add order" width="880" height="662"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Listing all orders for each user:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CMwF_QOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vifc21u1n9uh5omczmqk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CMwF_QOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vifc21u1n9uh5omczmqk.png" alt="list user orders 1" width="880" height="729"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WN4YguGG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3puz4fuq1053b513hj3j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WN4YguGG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3puz4fuq1053b513hj3j.png" alt="list user orders 2" width="880" height="698"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eiFLfV8P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7olvdjmmi132kh38nyrf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eiFLfV8P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7olvdjmmi132kh38nyrf.png" alt="list user orders lambda" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Listing users orders by status:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0BP_QPIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khz8urbt8pcega1k6y8i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0BP_QPIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khz8urbt8pcega1k6y8i.png" alt="orders by status" width="880" height="679"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xWaMhYoO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdqsdnqy1cep4xx6tpwk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xWaMhYoO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdqsdnqy1cep4xx6tpwk.png" alt="orders by status lambda" width="880" height="467"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Listing a user specific order items:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uWaqVYvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap388sg5lsrgs6qvh0rx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uWaqVYvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap388sg5lsrgs6qvh0rx.png" alt="order items" width="880" height="634"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Editing user order:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qsrAWfgH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xiiua9ymqm48m9j7mov0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qsrAWfgH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xiiua9ymqm48m9j7mov0.png" alt="edit user order" width="880" height="669"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deleting user order:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fFGj9MWV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a5c6odsdcu3rnznb3zr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFGj9MWV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a5c6odsdcu3rnznb3zr.png" alt="delete order" width="880" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-troubleshooting"&gt;
  &lt;/a&gt;
  AWS troubleshooting
&lt;/h3&gt;

&lt;p&gt;Things does not always go right from the first time. &lt;/p&gt;

&lt;p&gt;In order to troubleshoot AWS services, e.g. the lambdas code, their logs results that can be double-checked on &lt;a href="https://console.aws.amazon.com/cloudwatch/home#logsV2:log-groups"&gt;AWS CloudWatch Log Groups&lt;/a&gt;. Just click on the respective log group:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RAKFkR0e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djqw75125emqrgr6hm4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RAKFkR0e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djqw75125emqrgr6hm4g.png" alt="cloudwatch log group" width="880" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And after that, in the log stream messages:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P3_I2QGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ks7i8k48iborilvj3ga3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P3_I2QGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ks7i8k48iborilvj3ga3.png" alt="log streams" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember, logs are our best friends! As stated on this great old &lt;a href="https://testing.googleblog.com/2013/06/optimal-logging.html"&gt;&lt;strong&gt;Optimal Logging&lt;/strong&gt;&lt;/a&gt; article, &lt;em&gt;"With optimal logging, you can even eliminate the necessity for debuggers!"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last but not least, in order to track performance, this project lambdas also have &lt;strong&gt;X-Ray&lt;/strong&gt; enabled so you can verify X-Ray traces in &lt;a href="https://console.aws.amazon.com/cloudwatch/home#servicelens:traces"&gt;&lt;strong&gt;ServiceLens&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is so cool and useful to graphically see the services flow and how much time was spent in each service or function!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OThJB3FY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdbamd0e8psfxf1gavlb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OThJB3FY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdbamd0e8psfxf1gavlb.png" alt="x-ray 1" width="880" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ChcKQOCK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi5b16q9336qzt2c9ijs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ChcKQOCK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi5b16q9336qzt2c9ijs.png" alt="x-ray 2" width="880" height="411"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thats-all-folks"&gt;
  &lt;/a&gt;
  That's all folks!
&lt;/h1&gt;

&lt;p&gt;I hope this article was helpful, and I'm available for any comments or questions here or via &lt;a href="mailto:adrianosastre@gmail.com"&gt;adrianosastre@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks and have a nice 2022 :)&lt;/p&gt;

</description>
      <category>aws</category>
      <category>node</category>
      <category>serverless</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Holidays are almost over 😭 Back to Reality 😱</title>
      <author>Let's Code</author>
      <pubDate>Thu, 30 Dec 2021 00:25:08 +0000</pubDate>
      <link>https://dev.to/frontendengineer/holiday-is-over-back-to-reality-4op</link>
      <guid>https://dev.to/frontendengineer/holiday-is-over-back-to-reality-4op</guid>
      <description>&lt;p&gt;While some of us might be back to work already after a glorious holiday, some of us will be back after the New Year's holiday and will face the inevitable. I am one of the latter and is definitely not quite ready yet.&lt;/p&gt;

&lt;p&gt;I am curious on what did you do during the long holiday - either personal and professional wise. Below is my story. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Spent my leave on staycation. I hang out with the family and in-laws. Lots of shopping and ice skating.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ate a bunch of unhealthy food I shouldn't be eating - more than what I imagined. Major diet after New Year to follow. 😊&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, wrote couple of ReactJS articles here at dev.to and created a video version that I am very proud of (still honing my video recording skills). Below are the links if you want to check it out. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks for the dev.to community for a great, warm support of the articles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/frontendengineer/react-interview-questions-part-2-mid-senior-level-cal"&gt;Advance React Interview Questions&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/frontendengineer/common-react-interview-questions-50gm"&gt;Basic React Interview Questions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, that is my story. What is yours - No right/wrong answers.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
