<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learning Python- Intermediate course: Day 32, The Menubutton Widget</title>
      <author>Aatmaj</author>
      <pubDate>Sat, 25 Sep 2021 06:25:59 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-32-the-menubutton-widget-4l0j</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-32-the-menubutton-widget-4l0j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-let-us-learn-about-the-menubutton-widget"&gt;
  &lt;/a&gt;
  Today let us learn about the menubutton widget.
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#menubutton-widget"&gt;
  &lt;/a&gt;
  Menubutton widget
&lt;/h2&gt;

&lt;p&gt;The menubutton widget is a drop down type of widget. It looks similar to the listbox widget. The menubutton widget is dropped down once the menubutton button is clicked.&lt;/p&gt;




&lt;p&gt;Here is a sample program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"300x200"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Menubutton&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Favorite data analysis"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;menu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;Menu&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tearoff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"menu"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;menu&lt;/span&gt;

&lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IntVar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IntVar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_checkbutton&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Classification"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_checkbutton&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Regression"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;MB = Menubutton ( master, text="" )&lt;/code&gt; Create a menubutton with text and the window frame parameters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;MB.menu =  Menu ( MB, tearoff = 0 )&lt;/code&gt; &lt;code&gt;MB["menu"] =  MB.menu&lt;/code&gt; Create a menu object and configure it with the menubutton.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;MB.menu.add_checkbutton ( label="Classification",&lt;br&gt;
                      variable=one )&lt;/code&gt; Add a button to the menubutton and control it using the &lt;code&gt;Intvar()&lt;/code&gt; classes. This is very similar to how we operated on checkboxes and radiobuttons. In case you have missed it, you can check it out &lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-23-intvar-and-radio-buttons-164k"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aBEDeQ6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rsihy1p6d9sohvnfxztq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aBEDeQ6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rsihy1p6d9sohvnfxztq.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zR1_VbZg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uodtuaresrhmirfrz44p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zR1_VbZg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uodtuaresrhmirfrz44p.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YJfP330b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2329jh7qvwvls1onf6nc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YJfP330b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2329jh7qvwvls1onf6nc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IVTdrwl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu0wly4kfx4tnhk2sjbg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IVTdrwl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu0wly4kfx4tnhk2sjbg.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y1LkHlgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcjiw65bs2t6bmqodg2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y1LkHlgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcjiw65bs2t6bmqodg2q.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-tearoff-parameter-the-raw-tearoff-endraw-parameter-is-present-if-we-want-to-remove-the-window-and-create-a-subwindow-for-the-parameters-for-example-removing-the-raw-tearoff-endraw-parameter-to-the-default-settings-will-show-a-result-like-this"&gt;
  &lt;/a&gt;
  The tearoff parameter. The &lt;code&gt;tearoff&lt;/code&gt; parameter is present if we want to remove the window and create a sub-window for the parameters. For example, removing the &lt;code&gt;tearoff&lt;/code&gt; parameter to the default settings will show a result like this-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P07v3v9X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgslkb1rpcjz231l4sur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P07v3v9X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgslkb1rpcjz231l4sur.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BowOrrNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vmg6foz4mp6mddggpzf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BowOrrNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vmg6foz4mp6mddggpzf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But if we click on the horizontal dotted line, the dropdown tears apart into a different window&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J7_lvZSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymc00hm4m1aaubtunc0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J7_lvZSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymc00hm4m1aaubtunc0z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2jOxX30W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77zazani5timfbjl5x2u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jOxX30W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77zazani5timfbjl5x2u.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oNnjfvzT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4w4w3n7qdqop8pgn3ft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oNnjfvzT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4w4w3n7qdqop8pgn3ft.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
We can create multiple windows in such manner.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--trXLiTBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arfuzy28zjoqvsq49kea.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--trXLiTBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arfuzy28zjoqvsq49kea.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary-of-the-week"&gt;
  &lt;/a&gt;
  Summary of the week
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-29-sliders-in-tkinter-5a6d"&gt;Learning Python- Intermediate course: Day 29, Sliders in Tkinter&lt;/a&gt; We covered sliders in Tkinter. Slider is a type of widget which lets the user choose variable values in a graphical and interactive manner. We saw how to set various parameters like the interval length, length and orientation of the slider. We saw the getter and setter methods of the widget.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-30-spinbox-and-labelbox-1b35"&gt;Learning Python- Intermediate course: Day 30, Spinbox and Labelbox&lt;/a&gt;- We checked out the spinbox and the labelbox widgets. The spinbox widget is a widget which is used to get input from the user navigated through up and down keys. The listbox is a menu type widget which helps the users select from a list of items. We also saw the various types of parameters of the listbox widget, for example the types of selections and length of the listbox. We saw the getter and setter methods of the widget. The type of selection of the listboxes include &lt;code&gt;BROWSE&lt;/code&gt; &lt;code&gt;SINGLE&lt;/code&gt; &lt;code&gt;MULTIPLE&lt;/code&gt; and &lt;code&gt;EXTENDED&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-31-coordinate-positions-4eah"&gt;Learning Python- Intermediate course: Day 31, Coordinate positions&lt;/a&gt; In this part, we made a sample practice program to calculate the discount prices. In this, we used both the spinbox and the slider widgets. In order to place the widgets around in the desired manner, wee used coordinate placing using the &lt;code&gt;.place()&lt;/code&gt; method. Using this method, we placed the widgets in proper x and y coordinates.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;So friends that was all for this week. Hope you all are having fun 👍&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Get Free Responsive Landing Page with Animations.</title>
      <author>Kishan Sheth</author>
      <pubDate>Sat, 25 Sep 2021 06:14:34 +0000</pubDate>
      <link>https://dev.to/koolkishan/get-free-responsive-landing-page-with-animations-dab</link>
      <guid>https://dev.to/koolkishan/get-free-responsive-landing-page-with-animations-dab</guid>
      <description>&lt;h2&gt;
  &lt;a href="#you-can-get-the-template-from-the-link-proivided-in-the-description-of-the-video"&gt;
  &lt;/a&gt;
  You can get the template from the link proivided in the description of the video.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#technologies-used-"&gt;
  &lt;/a&gt;
  Technologies Used :-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JAVASCRIPT&lt;/li&gt;
&lt;li&gt;JQUERY&lt;/li&gt;
&lt;li&gt;SASS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#libraries-and-assets-used-"&gt;
  &lt;/a&gt;
  Libraries and Assets Used :-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;jQuery&lt;/li&gt;
&lt;li&gt;Scroll Reveal&lt;/li&gt;
&lt;li&gt;Unicons&lt;/li&gt;
&lt;li&gt;Google Fonts&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#sections-given-in-template-"&gt;
  &lt;/a&gt;
  Sections Given in Template :-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Navbar&lt;/li&gt;
&lt;li&gt;Hero Section&lt;/li&gt;
&lt;li&gt;About Section&lt;/li&gt;
&lt;li&gt;Services Section&lt;/li&gt;
&lt;li&gt;Milestones Section&lt;/li&gt;
&lt;li&gt;Clients Section&lt;/li&gt;
&lt;li&gt;Footer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#to-learn-how-to-create-this-template-watch-the-complete-video-you-can-get-the-template-for-free-from-the-link-provided-in-the-description-of-the-video"&gt;
  &lt;/a&gt;
  To learn how to create this template watch the complete video. You can get the template for free from the link provided in the description of the video.
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4OgFQyRsy80"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#please-do-like-the-video-and-subscribe-to-the-channel-it-helps-and-motivates-me-to-create-more-content-like-this"&gt;
  &lt;/a&gt;
  Please do like the video and subscribe to the channel. It helps and motivates me to create more content like this.
&lt;/h2&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>15 Must-Have Browser Extensions for Web Developers</title>
      <author>Coder Helper</author>
      <pubDate>Sat, 25 Sep 2021 06:12:16 +0000</pubDate>
      <link>https://dev.to/f79sd/15-must-have-browser-extensions-for-web-developers-3pg2</link>
      <guid>https://dev.to/f79sd/15-must-have-browser-extensions-for-web-developers-3pg2</guid>
      <description>&lt;p&gt;Browsers are increasingly incorporating more &lt;span&gt;&lt;a href="#"&gt;extensions, plugins and add-ons&lt;/a&gt;&lt;/span&gt;, which are often developed by their users, making the browser more powerful, and helping us increase our productivity. Here at Awwwards, our mission is to share with you the best resources and tools on the web, so we're writing a series of blog articles on &lt;span&gt;the best extensions and plugins for major browsers&lt;/span&gt;. To kick-off, we're focusing on extensions that are offered in the Chrome Web Store, available for free and easy to install.&lt;/p&gt;
&lt;p&gt;Among the tools, we'll highlight those that are&lt;span&gt; most useful for web designers and developers&lt;/span&gt;. We hope you find them useful and get you better results. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/chrome-extensions-for-web-developers/&amp;amp;ved=2ahUKEwjNobWsr-fyAhX_yzgGHYoACLUQFnoECAMQBQ&amp;amp;usg=AOvVaw3LrSRSp_yMsQU7StlCW8qG"&gt;15 Must-Have Browser Extensions for Web Developers&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>ODD-EVEN Number using Recursion in JS 🚀</title>
      <author>Shubham Jadhav</author>
      <pubDate>Sat, 25 Sep 2021 05:54:10 +0000</pubDate>
      <link>https://dev.to/dev_shubham/odd-even-number-using-recursion-in-js-2l3g</link>
      <guid>https://dev.to/dev_shubham/odd-even-number-using-recursion-in-js-2l3g</guid>
      <description>&lt;p&gt;Hello Guys, Today is this article we are taking about Recursion. &lt;br&gt;
 We are solving and understanding a problem by using Recursion in JavaScript.&lt;/p&gt;

&lt;p&gt;👉 Problem :- Find odd-even number using Recursion ? &lt;/p&gt;

&lt;p&gt;Let's start today's article... &lt;/p&gt;

&lt;p&gt;• What is recursion? &lt;br&gt;
=&amp;gt; Recursion mean calling itself till condition not true. A function call itself that's function called Recursive function. &lt;/p&gt;

&lt;p&gt;• How to find odd even number in JavaScript? &lt;br&gt;
=&amp;gt; We are finding odd-even number by dividing 2. When the reminder is 0 it's mean the number is even or reminder is 1, it is odd number. Right... &lt;/p&gt;

&lt;p&gt;We are using same logic in today's solving problem using recursion but different. &lt;/p&gt;

&lt;p&gt;👉 Let's start solving problems&lt;/p&gt;

&lt;p&gt;• First we create a function and pass one parameter. As following 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cNVwKbAp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmci707lxv50i6tn23n8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cNVwKbAp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmci707lxv50i6tn23n8.jpg" alt="img1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;• We are using same logic as we use always to find odd even number but in this problem we are consider if the parameter's value is 0 it is even or if it's value is 1 it means number is odd. &lt;/p&gt;

&lt;p&gt;• See following code to better understand, we are using if-else condition. 👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJdnHXfQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ir7tmt0r97la5xcfq0d7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJdnHXfQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ir7tmt0r97la5xcfq0d7.jpg" alt="img2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;• Now time to use recursion function but before using recursion we simply decrease parameter 'num' value by 2.&lt;br&gt;
Because odd and even number difference is 2 for example 1 and 3 difference is 2 and also 2 and 4 difference is 2. See below 👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dSAEeqPd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33q7fenkp7afg02f32mh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSAEeqPd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33q7fenkp7afg02f32mh.jpg" alt="img3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;• In the above code, in a line number 14 we are calling a function that's mean it will call itself till when given condition not true. &lt;/p&gt;

&lt;p&gt;• Let's check the output 👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4tNd9oi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thaycqa2egdrbxi8qezm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4tNd9oi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thaycqa2egdrbxi8qezm.jpg" alt="img4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🙏 Thanks for reading...&lt;br&gt;
👉 Stay with us for more.... &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Operating Systems: Process Control Blocks (PCB)</title>
      <author>Kathan Vakharia</author>
      <pubDate>Sat, 25 Sep 2021 05:46:48 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/operating-systems-process-control-blocks-pcb-na9</link>
      <guid>https://dev.to/kathanvakharia/operating-systems-process-control-blocks-pcb-na9</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;💡 I assume, you have read the previous two articles of this series before you start because I have used some of the jargon I explained in them frequently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For sake of simplicity, assume we have only 1 CPU in a multiprogramming( preemptive or non-preemptive doesn't matter ) environment.&lt;/p&gt;

&lt;p&gt;Whenever I use the term memory, I mean main memory or RAM until unless specified.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#need-for-pcb"&gt;
  &lt;/a&gt;
  Need for PCB
&lt;/h2&gt;

&lt;p&gt;In the previous article, we saw a program is a &lt;em&gt;passive&lt;/em&gt; entity while a process is an &lt;em&gt;active&lt;/em&gt; entity. Simply putting, the process is your program in execution.&lt;/p&gt;

&lt;p&gt;It's the job of OS to dynamically assign CPU to the process which requires it because processes don't need CPU all the time, a good example might be when they go for I/O.&lt;/p&gt;

&lt;p&gt;The question is how do you(as an OS) &lt;em&gt;identify&lt;/em&gt; which process is which? I mean to say, there are dozens of processes that can exist at the same time in your system. For example, there can be an MS-Word process, pdf reader process, the browser process, and of course, the background processes all existing at the same time. Moreover, sometimes a process needs to be pulled out of the main memory for some other important process say, the task manager process in windows.&lt;/p&gt;

&lt;p&gt;This is the reason, we need an identification card for every process that is created. And that identification card is what we call a &lt;strong&gt;Process Control Block(PCB)&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Commonly, PCB is also referred to as Context (of a process)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-pcb"&gt;
  &lt;/a&gt;
  What is a PCB?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H-fO_2in--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uxzibp6n8157a8c2ba6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H-fO_2in--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uxzibp6n8157a8c2ba6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whenever a process is created, OS also creates a data structure(a record) that contains important information about a process. This is called PCB. &lt;/p&gt;

&lt;p&gt;Every process that comes into existence has a corresponding context or PCB associated with it. These PCBs are stored in the memory reserved for the operating system.&lt;/p&gt;

&lt;p&gt;You can think of it as a dictionary having various keys(attribute or information name) and values(the information itself!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#important-attributes-or-fields-in-a-pcb"&gt;
  &lt;/a&gt;
  Important Attributes or fields in a PCB
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BYwAi6ff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gnggv8wrc6qdb6ss0fgg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BYwAi6ff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gnggv8wrc6qdb6ss0fgg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Process ID: A unique &lt;em&gt;identification number&lt;/em&gt; for every process.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Program Counter: Address of the &lt;em&gt;next instruction&lt;/em&gt; that is to be executed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Process State: It contains the &lt;em&gt;current state&lt;/em&gt; of the process. A process goes under various states like ready, running, wait, etc. throughout its execution. (Topic for next post)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Priority: A number specifying the &lt;em&gt;importance&lt;/em&gt; of this process. (I will come to this when we discuss scheduling algorithms) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;General Purpose Registers: It contains information about &lt;em&gt;CPU registers&lt;/em&gt; used by the process. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When a process is executing, data about it is stored in these so-called registers. When a process is preempted by OS to schedule some other process, this new process will override the old data present in these registers. &lt;/li&gt;
&lt;li&gt;Thus when our old process is scheduled again, we need its register information.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;List of open files: It is self-explanatory; contains information about files that are opened by this process.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;List of open devices: Again self-explanatory; contains information about opened devices say, printer.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the list goes on... &lt;br&gt;
I think you should appreciate the fact that OS exists otherwise just imagine doing process management manually!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-are-pcbs-stored"&gt;
  &lt;/a&gt;
  How are PCBs stored
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zaoLshRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q41m03igr6qlx4d9hfha.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zaoLshRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q41m03igr6qlx4d9hfha.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These PCBs are organized in the form of &lt;em&gt;LinkedList&lt;/em&gt; in the memory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PCBs are important data structures created by OS for controlling the execution of a process.&lt;/li&gt;
&lt;li&gt;Every process has a corresponding PCB associated with it.&lt;/li&gt;
&lt;li&gt;Also known as Context.&lt;/li&gt;
&lt;li&gt;Created in memory reserved for the operating system.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>computerscience</category>
      <category>tutorial</category>
      <category>os</category>
    </item>
    <item>
      <title>From Zero to Hero in Game Design: Beginner's Guide</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Sat, 25 Sep 2021 05:45:33 +0000</pubDate>
      <link>https://dev.to/unitybuddy/from-zero-to-hero-in-game-design-beginner-s-guide-1p9m</link>
      <guid>https://dev.to/unitybuddy/from-zero-to-hero-in-game-design-beginner-s-guide-1p9m</guid>
      <description>&lt;p&gt;Hello, buddies! Game design is an exciting, rewarding, and multi-faceted field with promising job prospects. However, becoming a game designer can be a challenging journey. Passion, patience, and persistence are essential!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-a-game-designer-do"&gt;
  &lt;/a&gt;
  What does a game designer do?
&lt;/h2&gt;

&lt;p&gt;A game designer is a creative driver responsible for bringing a game to life. They are generally a cross between a writer, artist, and programmer. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's not just about playing games and having ideas. You need to not only understand how to apply your ideas into many different, and often conflicting, areas of game design; you must also understand HOW to design, WHAT to design WHEN to design each feature, and WHY you are designing what you are designing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Every game is comprised of several different gameplay systems, mechanics, and features which all work together to create a fun and engaging experience for players.&lt;/p&gt;

&lt;p&gt;Your responsibilities may vary on your team/studio, the type of game you are working on, etc. But generally, Game design is all about - Design, Art, Code, Audio, Polish, and Marketing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-design"&gt;
  &lt;/a&gt;
  1. Design
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yxValvt4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632411198754/ZZ-IenRKX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yxValvt4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632411198754/ZZ-IenRKX.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
You’ve got a great idea, But how do you capture it in writing?&lt;/p&gt;

&lt;p&gt;Everyone has their own way of doing their best. Some compose 60-page design documents. Others, like me, write a page of badly-written notes, unreadable to anyone else. I don’t know what’s best for you. But I can give suggestions on what to write about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hook -  What makes your game idea great? Is it something that no one has done before?&lt;/li&gt;
&lt;li&gt;Mechanics - What does your player do?  Fighting with enemies to save the world, or just running to escape from evil?&lt;/li&gt;
&lt;li&gt;Story -  This may not be required in some types of games like hyper-casual. But in shooting games, puzzle-like games, etc it is important!. &lt;/li&gt;
&lt;li&gt;Mood - What impression does your game make? What are the visuals? Sound? First impressions matter. First impressions will hook — then keep — the player playing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use Notepad, Trello, or just a paper and a pencil for writing your ideas!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#art"&gt;
  &lt;/a&gt;
  Art
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nTxXdeGA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632412307553/tjR7v5IvL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nTxXdeGA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632412307553/tjR7v5IvL.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Art is essential for a game. Mainly, the Art part in a game contains, UI design and 2D Animations.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ui"&gt;
  &lt;/a&gt;
  UI
&lt;/h3&gt;

&lt;p&gt;Think about a way that you can make your UI look unique and attractive — have a distinct color scheme, font(s), shape(s), and icon(s) — while &lt;em&gt;functional&lt;/em&gt;. Also, it should be readable so the Player can gain the correct info.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2d-animations"&gt;
  &lt;/a&gt;
  2D Animations
&lt;/h3&gt;

&lt;p&gt;Don't worry, 2D Animations aren't hard as you think! &lt;/p&gt;

&lt;p&gt;If you need icons, fonts, and other UI stuff, just head to Behance. And if would recommend Blender for creating 3D assets or if you feel boring with doing everything yourself, just head over to &lt;a href="https://assetstore.unity.com/"&gt;Unity Asset Store!&lt;/a&gt;(If you're using Unity as a Game Engine)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j_jrWfcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632411285141/GpX75nn_K.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j_jrWfcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632411285141/GpX75nn_K.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Just don't fear this. I didn't know anything about C# or any other language before starting to make games!&lt;/p&gt;

&lt;p&gt;First, Decide on a game engine and an IDE (Integrated Development Environment — basically, an app that lets you code). My recommended game engines + IDEs are in the Resources below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Game Engines&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unity(Great for beginners and have a large community)&lt;/li&gt;
&lt;li&gt;Unreal Engine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;IDEs&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visual Studio Code (For Mac)&lt;/li&gt;
&lt;li&gt;Visual Studio Community (For Windows)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if you are a new buddy for C#/C++ or programming, just don't worry! You can learn them easily.&lt;/p&gt;

&lt;p&gt;Here let's see examples that you will need(these are written in C#, which is used in Unity. Very similar to C++)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data types and variables&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The root of all code is data. That data is stored in variables. In games, GameObjects, Texts, are some examples of data stored in Variables. You can declare a variable like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;int&lt;/code&gt; is the data type. i is the variable name. And that &lt;code&gt;= 0&lt;/code&gt; assigns zero as the variable value.&lt;/p&gt;

&lt;p&gt;Some common data types: &lt;code&gt;int&lt;/code&gt; is an integer. &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt; are decimal numbers. And &lt;code&gt;string&lt;/code&gt; is any sentence or a word. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If statements.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If statements evaluate if a certain condition is true. If it is, run the code that’s inside the if statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="c1"&gt;//true is always true!&lt;/span&gt;

    &lt;span class="nf"&gt;doThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//I'm inside the if statement's brackets, run me!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the condition isn’t true, we can evaluate other conditions with else if:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; 

   &lt;span class="nf"&gt;doThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

   &lt;span class="nf"&gt;doOtherThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//I'm gonna be run!&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, just run some other code with else:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;60000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

  &lt;span class="nf"&gt;doThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 

&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nf"&gt;doOtherThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Again, I will run &lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;For/while loops&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While loops continue while a certain condition is still true, executing the same lines of code over and over again. When the condition is false, the while loop exits.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someBool&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="c1"&gt;//condition&lt;/span&gt;

   &lt;span class="nf"&gt;doThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//We'll keep doing things until someBool is false&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How long does this while loop last?&lt;/p&gt;

&lt;p&gt;Only while &lt;code&gt;someBool&lt;/code&gt; is true. When it becomes, False, &lt;code&gt;while&lt;/code&gt; loop will stop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

  &lt;span class="nf"&gt;doThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For loops are basically while loops where:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; 

    &lt;span class="nf"&gt;doThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt; &lt;span class="c1"&gt;//increment after doing things&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s equivalent to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++){&lt;/span&gt;

    &lt;span class="nf"&gt;doThings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Basic data structures.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, we have data, and we ways to evaluate and manipulate that data. We can also store that data into some structure — a data structure. Data structures you should know(As a Game Dev) are arrays, lists, and sets.&lt;/p&gt;

&lt;p&gt;Here’s a quick example of an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
Say you have numbers 0 through 9 that you want to store somewhere. You can store it in an array!
*/&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// An array of floats&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// An array of integers&lt;/span&gt;

&lt;span class="cm"&gt;/* 
If need an array of Gameobjects,

GameObject[] objects; // Depends on Game Engine
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The [] brackets declare an array. We assign a new array to arr of size 10 - that means it can hold 10 elements. Array now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;*/&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++){&lt;/span&gt;

    &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//We assign whatever i is to the the ith index of the array.&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*
After the for loop, our array data structure should look like this!
arr = [ 0 1 2 3 4 5 6 7 8 9 ]
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Functions and exceptions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Functions are basically a small line of code describing a big bunch of code. For example, if you call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="nf"&gt;EatChoco&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;And&lt;/span&gt; &lt;span class="nf"&gt;EatChoco&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;looks&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;EatChoco&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="c1"&gt;//&amp;lt;---this is a function. &lt;/span&gt;

   &lt;span class="n"&gt;chocoAte&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="n"&gt;Debu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"I hope mom won't find I ate her chocolate"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then the call to &lt;code&gt;EatChoco()&lt;/code&gt; is actually a call to the two statements within the &lt;code&gt;EatChoco()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;If you do something bad in your code, an exception might get thrown. They’re angry red errors there to tell you, hey, back up, what you did right there just ain’t workin‘ out logically. Go revise it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PFd5EXTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632243483179/udMApnEvf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFd5EXTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632243483179/udMApnEvf.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
RIP&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Language&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What language are you going to code in? C++? Javascript? C#? Every language is written somewhat differently and can let you do different things! Just don't let others demotivate you.&lt;/p&gt;

&lt;p&gt;Not only learn by doing but learn by seeing is also a great way by the way!&lt;/p&gt;

&lt;p&gt;Unreal and Unity both have a ton of free example projects. This’ll let you discover how everything comes together. Plus, you can build your game idea off of the project.&lt;/p&gt;

&lt;p&gt;I know. Coding is scary at first. Nothing makes sense, you’re hitting constant roadblocks, and you might want to quit in the face of failures and exceptions. It doesn’t mean you’re bad at coding. Coding is challenging. It’s understandable to feel incompetent at first.&lt;/p&gt;

&lt;p&gt;But it just takes time, like any other skill. It’ll get easier and fun!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#audio"&gt;
  &lt;/a&gt;
  Audio
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s8KX3pCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632411742546/MseRW9uUc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s8KX3pCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632411742546/MseRW9uUc.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Audio can do wonders for immersion and mood. But, it can cost memory.&lt;/p&gt;

&lt;p&gt;Will you include music? Sound effects? Voiceovers or narration?&lt;/p&gt;

&lt;p&gt;For any of the above, record and mix them in a way that matches your game’s mood. For example, Bastion uses organic mouth and instrument sounds, matching its game world. Crypt of the Necrodancer uses a blend of electronic beats and chiptune rock to match the colorful, rhythmic game.&lt;/p&gt;

&lt;p&gt;Just check out the below resources!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://soundcloud.com/"&gt;Soundcloud&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://incompetech.com/music/"&gt;Incompetech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bensound.com/royalty-free-music"&gt;Bensound&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#polish"&gt;
  &lt;/a&gt;
  Polish
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R3JzmJiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632412097111/keW3SsUHX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R3JzmJiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632412097111/keW3SsUHX.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Finally, you've made a game! Congrats! But wait, this is not the end. We have to polish it before selling it!&lt;/p&gt;

&lt;p&gt;You’re done.. right?&lt;/p&gt;

&lt;p&gt;Well. There’s a 99.99999% chance there’re bugs.&lt;/p&gt;

&lt;p&gt;It’s time to bug test! &lt;/p&gt;

&lt;p&gt;Just don't do it yourself. Ask your friends. Of course, they'll be very happy to get early access for a new game! And be sure to play it on all targeted platforms. Sometimes, it might work well on Editor but in an android, it won't work. &lt;/p&gt;

&lt;p&gt;Alright, you found a bug. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check the console for exceptions&lt;/strong&gt; Found one? Great! Find the file and line number where the exception was thrown. If the exception sounds like something from Mars or Jupiter, Google it and learn about it. Then figure out why that line number is throwing that exception.&lt;/p&gt;

&lt;p&gt;Still can’t figure it out? Write to console. Start tossing in them log statements in the place(s) you think are causing you trouble. Print variable values, and see whether what’s printed is what’s expected. If not, fix that. (&lt;code&gt;Debug.Log()&lt;/code&gt; is useful in that case. &lt;a href="https://docs.unity3d.com/ScriptReference/Debug.Log.html"&gt;More info&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;When worse comes to worst, check logs. The logs of your project will give you way more info than the console. Read the last lines where the exception occurred. Google anything you don’t know. Can you fix it now?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sleep. It’ll get fixed in the morning. This is just a bad dream. Right? (This is an approved solution, to be honest)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's see some common errors (specially in Unity).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;NullReferenceException&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doThing&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//throws NullReferenceException: Object reference not set to an instance of an object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Problem: You’re doing a thing on a null (nonexistent) variable.&lt;/p&gt;

&lt;p&gt;Quick fix: Check if the variable is null before doing the thing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if(var != null)
    {
        var.doThing(); // do the thing safely!
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SyntaxErrorException.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Problem: Your code has invalid syntax.&lt;/p&gt;

&lt;p&gt;Quick fix: In the Exception message, it should tell you what character is throwing the error. Change that character.&lt;/p&gt;

&lt;p&gt;Note: If the character is a double quote, make sure you’re using dumb quotes instead of smart quotes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="s"&gt;" //dumb quote
&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="c1"&gt;//smart quote.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pink or black screen.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Possible problem: Some shaders can’t render.&lt;/p&gt;

&lt;p&gt;Possible causes: You’re using a 3D shader for a 2D game. Or, you’re using some shader feature unsupported by the target OS. Be sure to use mobile shaders for mobile games.&lt;/p&gt;

&lt;p&gt;Great, you've nicely polished your game! Then, the most important thing,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#market"&gt;
  &lt;/a&gt;
  Market
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H47nYcZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632412246580/UUBIQpFan.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H47nYcZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632412246580/UUBIQpFan.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Congrats! You’ve made something. It’s time to show the world what you’ve made.&lt;/p&gt;

&lt;p&gt;In general, marketing is our most anxiety-inducing stage. If you, too, get doubtful, the game developer community is helpful. You’re not alone in this. And you’ve come so far — might as well get through to the end, right?&lt;/p&gt;

&lt;p&gt;Good. So now what? Let's see with the essentials. You'll need:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A website&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whether your website acts as a home base for all of your games, or just the one you're currently working on, it needs to be updated frequently and departmentalized. The home page should feature an extended overview, captivating screenshots (a picture of your UI isn't all that exciting), and relevant links. You'll also need a media page that houses images or videos. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Active Social Media&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At the very least you should have a Facebook page and a Twitter profile. If your game is small or mid-sized this is probably enough, but in theory, you could subscribe to dozens of social media outlets. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A development blog:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While development blogs are less essential than a website and a strong social media presence, gamers and developers alike love to read about the personal struggles and triumphs associated with making a game. Keep it personal, as if you're speaking directly to your readers. Humanize yourself and viewers will connect with and appreciate your plight. Post as frequently as necessary, but try to avoid posting about every little bug fix or new art piece. It's enough simply to prove that your game is coming along.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trailers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This comes a bit later but is probably one of the single most important things you can do to get people excited to play your game. Don't overload it with cheesy titles, and don't think you have to be an expert cinematographer to produce a compelling video. Instead, target each facet of gameplay at least once, clearly display the game's title and the name of your company (you do have one, right?), and keep the cut scenes down to a minimum.&lt;/p&gt;

&lt;p&gt;And remember to document everything and share them with your fellow team members!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g6mACXd5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632409948146/45EDKbG0u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g6mACXd5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632409948146/45EDKbG0u.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Great documentation(I think so.. 😇😇)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here are some tips that may help you to blow your game on Social Media&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The r/IndieGaming subreddit is a great place to link your YouTube trailers, preview, reviews and game demos. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your website should link to your social media accounts. Your Twitter account should have links to your Facebook page and website. Your Facebook page... you get the point!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It's worse to have a grossly outdated Facebook page and website than none at all. Keep things current. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you must relay your game dev failings to the Internet, try to be funny about it. The same goes for your announcements.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s no cheat code to making a game. It’s just a lot of determination and effort. You’ll get confused. You’ll make mistakes. You might even cry!&lt;/p&gt;

&lt;p&gt;But that’s okay. It means you’re growing. If you‘re putting in that much effort, I believe in you and your game: You can do it!&lt;/p&gt;

&lt;p&gt;If you ever want a hearing ear, just Email me. I would be happy to help you technically as well but for now, I'm a little bit busy. Anyway, my inbox is open!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lKMyVQFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632411088307/Xpi70m0D_.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lKMyVQFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632411088307/Xpi70m0D_.gif" alt="1ws.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mr-unity-buddy.hashnode.dev/from-zero-to-hero-in-game-design-beginners-guide"&gt;Originally&lt;/a&gt; published on Hashnode&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gameifyouare.com/2019/05/15/indie-game-marketing-101-part-1-a-beginners-guide-to-games-marketing/"&gt;https://gameifyouare.com/2019/05/15/indie-game-marketing-101-part-1-a-beginners-guide-to-games-marketing/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.process.st/indie-game-marketing/"&gt;https://www.process.st/indie-game-marketing/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://elearningindustry.com/advertise/elearning-marketing-resources/blog/beginners-guide-marketing-your-games-online"&gt;https://elearningindustry.com/advertise/elearning-marketing-resources/blog/beginners-guide-marketing-your-games-online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gamedeveloper.com/discipline/a-beginner-s-guide-to-making-your-own-games"&gt;https://www.gamedeveloper.com/discipline/a-beginner-s-guide-to-making-your-own-games&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>gamedev</category>
      <category>beginners</category>
      <category>guide</category>
      <category>unity</category>
    </item>
    <item>
      <title>Difference Between Content Writing Vs Blogger in 2021</title>
      <author>Blog triggers</author>
      <pubDate>Sat, 25 Sep 2021 04:49:57 +0000</pubDate>
      <link>https://dev.to/blogtriggers/difference-between-content-writing-vs-blogger-in-2021-88i</link>
      <guid>https://dev.to/blogtriggers/difference-between-content-writing-vs-blogger-in-2021-88i</guid>
      <description>&lt;p&gt;We’ve all heard of content marketing. You probably even have a blog that “markets” your business. But have you ever wondered what the &lt;b&gt;&lt;a href="https://www.blogtriggers.com/2021/05/difference-between-bloggers-vs-content-writers.html"&gt;difference between content writing vs blogger&lt;/a&gt;&lt;/b&gt; is?&lt;/p&gt;

&lt;p&gt;The terms “content writing” and “blogger” have been making a lot of buzz for a while now. In this article, we will focus on the differences between the two.&lt;/p&gt;

&lt;h1&gt;Blogger Vs Content Writing&lt;/h1&gt;

&lt;p&gt;Content writing and blogger are two different things. The former is specific and the latter is generic.&lt;/p&gt;

&lt;p&gt;1) &lt;b&gt;Content writing&lt;/b&gt;, as the name suggest, deals with creating content to keep your website or blog updated. Here content means all those things that you come across on websites - from product reviews to news. &lt;/p&gt;

&lt;p&gt;1) &lt;b&gt;Blogger&lt;/b&gt;, on the other hand, describes a person whose hobby is to write blogs. Anyone who has a blog can be called a blogger irrespective of the content being blogged about.&lt;/p&gt;

&lt;p&gt;2) &lt;b&gt;Content writers&lt;/b&gt; need a degree in journalism, a short but highly competitive qualifying test, and a number of years of experience before they can make their own schedules.&lt;/p&gt;

&lt;p&gt;2) &lt;b&gt;Bloggers&lt;/b&gt; need nothing more than a computer with an Internet connection.&lt;/p&gt;

&lt;p&gt;3) A &lt;b&gt;content writer&lt;/b&gt; produces work that is factual and meant to inform and engage their audience&lt;/p&gt;

&lt;p&gt;3) A &lt;b&gt;blogger's&lt;/b&gt; writing is more personally oriented and opinionated.&lt;/p&gt;

&lt;p&gt;4) A &lt;b&gt;content writer&lt;/b&gt; is an expert writer who is capable of writing long content ranging from 500 words to 5000 or 10,000 words&lt;/p&gt;

&lt;p&gt;4) A &lt;b&gt;blogger&lt;/b&gt; or a freelancer is a general type of author that writes anything and everything.&lt;/p&gt;

&lt;p&gt;5)&lt;b&gt;Content writers&lt;/b&gt; on the other hand wont be published frequently at all, content writers might write only once a month and it will be a complete package of materials that can reach an industry, market or company. You cannot expect for a content writer to reach the peak of his/her career in just months.  &lt;/p&gt;

&lt;p&gt;5) &lt;b&gt;Bloggers&lt;/b&gt; write to express an emotion or opinion. Blogger is usually written everytime they want to do such thing. So bloggers aim to publish several articles each day&lt;/p&gt;

&lt;p&gt;I hope you learn something new Things related to blogger vs content writer&lt;/p&gt;

&lt;p&gt;If you want to Know more about blogging and SEO then visit our website &lt;b&gt;&lt;a href="https://www.blogtriggers.com"&gt;Blogtriggers&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;If you have any doubt regarding blogging and SEO then join our telegram group chat: &lt;b&gt;&lt;a href="https://t.me/blogtriggers_group"&gt;Blogtriggers Discussion Group&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>blogger</category>
      <category>contentwriter</category>
      <category>difference</category>
      <category>content</category>
    </item>
    <item>
      <title>Tips To Become Great Programmer Of All Time</title>
      <author>Coder Helper</author>
      <pubDate>Sat, 25 Sep 2021 04:43:23 +0000</pubDate>
      <link>https://dev.to/f79sd/tips-to-become-great-programmer-of-all-time-3ic8</link>
      <guid>https://dev.to/f79sd/tips-to-become-great-programmer-of-all-time-3ic8</guid>
      <description>&lt;p&gt; A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/tips-to-become-a-great-programmer/"&gt;Tips to become a great programmer&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Ember Times - Issue No. 189</title>
      <author>The Ember Times</author>
      <pubDate>Sat, 25 Sep 2021 04:29:32 +0000</pubDate>
      <link>https://dev.to/embertimes/the-ember-times-issue-no-189-1c0l</link>
      <guid>https://dev.to/embertimes/the-ember-times-issue-no-189-1c0l</guid>
      <description>&lt;p&gt;👋 Emberistas! 🐹&lt;/p&gt;

&lt;p&gt;RFC: Asset Import Spec, ember-element-query v4, EmberFest 2021 - best of both worlds, Glimmer cheatsheet, and Glimmer Apollo v0.4.0.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#rfc-asset-import-spec"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/emberjs/rfcs/pull/763"&gt;✍️ RFC: Asset Import Spec&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/ef4"&gt;Edward Faulkner (@ef4)&lt;/a&gt; proposed a new &lt;a href="https://github.com/emberjs/rfcs/pull/763"&gt;RFC&lt;/a&gt; which defines the standard semantics for what it means to depend on files that are not JavaScript or CSS, like images, fonts, and other media. The ecosystem today mostly relies on &lt;a href="https://github.com/ember-cli/broccoli-asset-rev"&gt;broccoli-asset-rev&lt;/a&gt; which is a Broccoli plugin that adds fingerprint checksums and CDN URLs to your assets. The RFC argues that the broccoli-asset-rev plugin does not take advantage of the newer capabilities we have in &lt;a href="https://github.com/ef4/ember-auto-import"&gt;ember-auto-import&lt;/a&gt; and &lt;a href="https://github.com/embroider-build/embroider"&gt;embroider&lt;/a&gt;. The proposed pull-based design lets code declare what assets it needs and then not worry about how those assets will get delivered is safer and easier to change in the future.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;myImage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./hello.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;myImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myImage&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight handlebars"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="k"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;myImage&lt;/span&gt;&lt;span class="k"&gt;}}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If this is something you are interested in, please read and discuss the &lt;a href="https://github.com/emberjs/rfcs/pull/763"&gt;Asset Import Spec RFC on GitHub&lt;/a&gt;!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#emberelementquery-v4"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/lolmaus/ember-element-query/"&gt;✨ ember-element-query v4&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/lolmaus"&gt;Andrey Mikhaylov (@lolmaus)&lt;/a&gt; announced the &lt;a href="https://twitter.com/lolmaus_en/status/1424083417591914499"&gt;release&lt;/a&gt; of &lt;a href="https://github.com/lolmaus/ember-element-query/"&gt;ember-element-query&lt;/a&gt; v4, a &lt;strong&gt;complete rewrite for Octane&lt;/strong&gt; with a new convenient API.&lt;/p&gt;

&lt;p&gt;Element queries are a technique to do responsive transformations based on the element's own size, rather than the viewport size. You can implement reusable responsive components with encapsulated styles, that are decoupled from their parent context. Such components will realign their content depending on how much space is available to them.&lt;/p&gt;

&lt;p&gt;For example, if you put a responsive component into a tight sidebar, it will align its content vertically. When the sidebar expands, the component will realign horizontally, in order to efficiently use available space. Check out &lt;a href="https://www.smashingmagazine.com/2016/07/how-i-ended-up-with-element-queries-and-how-you-can-use-them-today/"&gt;Element Queries, And How You Can Use Them Today&lt;/a&gt; on Smashing Magazine to learn more.&lt;/p&gt;

&lt;p&gt;Historically, &lt;code&gt;ember-element-query&lt;/code&gt; was the first Ember addon to offer element queries out of the box, but back then it used an inefficient implementation and was written in the now-outdated Classic Ember paradigm. It served as one of inspirations for &lt;a href="https://github.com/chadian"&gt;Chad Carbert's (@chadian)&lt;/a&gt; &lt;a href="https://github.com/chadian/ember-fill-up"&gt;ember-fill-up&lt;/a&gt;. &lt;a href="https://www.youtube.com/watch?v=RIdjk9_RSBY"&gt;Announced&lt;/a&gt; at EmberFest 2019 as a proof-of-concept, &lt;code&gt;ember-fill-up&lt;/code&gt; saw no updates and was discontinued.&lt;/p&gt;

&lt;p&gt;The first element query addon to be released with feature completeness, full test coverage and lasting support was &lt;a href="https://github.com/ijlee2/"&gt;Isaac Lee's (@ijlee2)&lt;/a&gt; &lt;code&gt;ember-container-query&lt;/code&gt;, featured in &lt;a href="https://blog.emberjs.com/the-ember-times-issue-153/"&gt;The Ember Times #153&lt;/a&gt;. The re-release of &lt;code&gt;ember-element-query&lt;/code&gt; followed suit with a subjectively more convenient, opinionated API, backed by modern, efficient &lt;code&gt;ResizeObserver&lt;/code&gt; under the hood. &lt;a href="https://github.com/ijlee2/"&gt;@ijlee2&lt;/a&gt; provided kind support, criticism and generously shared the demo app with &lt;a href="https://github.com/lolmaus"&gt;@lolmaus&lt;/a&gt;'s &lt;code&gt;ember-element-query&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Check out the detailed &lt;a href="https://github.com/lolmaus/ember-element-query/"&gt;README&lt;/a&gt; and give the addon a spin!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#emberfest-2021-best-of-both-worlds"&gt;
  &lt;/a&gt;
  &lt;a href="https://emberfest.eu"&gt;🏛️ EmberFest 2021 - best of both worlds&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Next week, after a year of absence because of COVID, &lt;a href="https://emberfest.eu"&gt;EmberFest&lt;/a&gt; is back. On the 30th of September and the 1st of October, Emberistas will gather &lt;strong&gt;digitally&lt;/strong&gt; and &lt;strong&gt;on-site&lt;/strong&gt; in Rome to hear awesome Ember talks.&lt;/p&gt;

&lt;p&gt;There will be well-known EmberConf/Fest speakers like &lt;a href="https://github.com/MelSumner"&gt;Melanie Sumner (@MelSumner)&lt;/a&gt; and &lt;a href="https://github.com/ef4"&gt;Edward Faulkner (@ef4)&lt;/a&gt;, as well as first-time speakers like &lt;a href="https://github.com/BobrImperator"&gt;Bartlomiej Dudzik (@BobrImperator)&lt;/a&gt;, &lt;a href="https://github.com/JennyJudova"&gt;Jenny Judova (@JennyJudova)&lt;/a&gt;, and &lt;a href="https://github.com/ZoeBijl"&gt;Zoë Bijl (@ZoeBijl)&lt;/a&gt;. The &lt;a href="https://emberfest.eu/schedule/"&gt;line-up&lt;/a&gt; is super diverse and interesting for all Ember enthusiasts.&lt;/p&gt;

&lt;p&gt;Remote tickets are still available. A few on-site tickets too, if you plan on arriving at the last minute. We hope you enjoy EmberFest wherever you decide to join.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-glimmer-cheatsheet"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/nullvoxpopuli/status/1439652161625985037"&gt;⚡️ Glimmer Cheatsheet&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you've ever found the Ember Octane vs Ember Classic Cheat Sheet cheatsheet helpful, and you're also interested in Glimmer.js, you might want to check out the in-progress and exciting, but &lt;strong&gt;unofficial&lt;/strong&gt;, &lt;a href="https://cheatsheet.glimmer.nullvoxpopuli.com/docs"&gt;Glimmer Cheatsheet&lt;/a&gt; that &lt;a href="https://github.com/NullVoxPopuli"&gt;NullVoxPopuli (@NullVoxPopuli)&lt;/a&gt; recently started to put together.&lt;/p&gt;

&lt;p&gt;So far only part of the &lt;a href="https://cheatsheet.glimmer.nullvoxpopuli.com/docs/templates"&gt;templates page&lt;/a&gt; has been written, but if you're interested in contributing there is a rough outline and placeholder i18n to help get you started.&lt;/p&gt;

&lt;p&gt;Take a look at the &lt;a href="https://github.com/nullvoxpopuli/ember-cheat-sheet"&gt;GitHub repo&lt;/a&gt; or the &lt;a href="https://cheatsheet.glimmer.nullvoxpopuli.com/docs"&gt;deployed app&lt;/a&gt; for more!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#glimmer-apollo-v040"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/josemarluedke/status/1441532888072142859"&gt;📈 Glimmer Apollo v0.4.0&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/josemarluedke"&gt;Josemar Luedke (@josemarluedke)&lt;/a&gt; recently released a new &lt;a href="https://github.com/josemarluedke/glimmer-apollo/releases/tag/v0.4.0"&gt;v0.4.0&lt;/a&gt; of Glimmer Apollo that includes support for &lt;a href="https://glimmer-apollo.com/docs/fetching/subscriptions/"&gt;subscriptions&lt;/a&gt;! 🔥&lt;/p&gt;

&lt;p&gt;If you haven't checked out Glimmer Apollo and you would like to make use of Apollo to access GraphQL data in your Glimmer or Ember app, you should take a look at this &lt;a href="https://github.com/josemarluedke/glimmer-apollo"&gt;exciting project&lt;/a&gt; and give &lt;a href="https://glimmer-apollo.com/docs"&gt;the docs&lt;/a&gt; a read.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#contributors-corner"&gt;
  &lt;/a&gt;
  &lt;a href="https://guides.emberjs.com/release/contributing/repositories/"&gt;👏 Contributors' corner&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This week we'd like to thank &lt;a href="https://github.com/davideferre" rel="noopener noreferrer"&gt;Davide Ferrero (@davideferre)&lt;/a&gt;, &lt;a href="https://github.com/chriskrycho" rel="noopener noreferrer"&gt;Chris Krycho (@chriskrycho)&lt;/a&gt;, &lt;a href="https://github.com/lifeart" rel="noopener noreferrer"&gt;Alex Kanunnikov (@lifeart)&lt;/a&gt;, &lt;a href="https://github.com/tben" rel="noopener noreferrer"&gt;Ben Tidy (@tben)&lt;/a&gt;, &lt;a href="https://github.com/enspandi" rel="noopener noreferrer"&gt;Andreas Minnich (@enspandi)&lt;/a&gt;, &lt;a href="https://github.com/StephanH90" rel="noopener noreferrer"&gt;@StephanH90&lt;/a&gt;, &lt;a href="https://github.com/NullVoxPopuli" rel="noopener noreferrer"&gt;@NullVoxPopuli&lt;/a&gt;, &lt;a href="https://github.com/jkeen" rel="noopener noreferrer"&gt;Jeff Keen (@jkeen)&lt;/a&gt;, &lt;a href="https://github.com/nlfurniss" rel="noopener noreferrer"&gt;Nathaniel Furniss (@nlfurniss)&lt;/a&gt;, &lt;a href="https://github.com/ro0gr" rel="noopener noreferrer"&gt;Ruslan Hrabovyi (@ro0gr)&lt;/a&gt;, &lt;a href="https://github.com/rwwagner90" rel="noopener noreferrer"&gt;Robert Wagner (@rwwagner90)&lt;/a&gt;, &lt;a href="https://github.com/jherdman" rel="noopener noreferrer"&gt;James Herdman (@jherdman)&lt;/a&gt;, &lt;a href="https://github.com/colenso" rel="noopener noreferrer"&gt;@colenso&lt;/a&gt;, &lt;a href="https://github.com/bmish" rel="noopener noreferrer"&gt;Bryan Mishkin (@bmish)&lt;/a&gt;, &lt;a href="https://github.com/chrisrng" rel="noopener noreferrer"&gt;Chris Ng (@chrisrng)&lt;/a&gt;, &lt;a href="https://github.com/snewcomer" rel="noopener noreferrer"&gt;Scott Newcomer (@snewcomer)&lt;/a&gt;, &lt;a href="https://github.com/MinThaMie" rel="noopener noreferrer"&gt;Anne-Greeth Schot-van Herwijnen (@MinThaMie)&lt;/a&gt;, &lt;a href="https://github.com/rwjblue" rel="noopener noreferrer"&gt;Robert Jackson (@rwjblue)&lt;/a&gt;, &lt;a href="https://github.com/ijlee2" rel="noopener noreferrer"&gt;Isaac Lee (@ijlee2)&lt;/a&gt;, &lt;a href="https://github.com/gilest" rel="noopener noreferrer"&gt;Giles Thompson (@gilest)&lt;/a&gt;, &lt;a href="https://github.com/Baltazore" rel="noopener noreferrer"&gt;Kirill Shaplyko (@Baltazore)&lt;/a&gt;, &lt;a href="https://github.com/charlesfries" rel="noopener noreferrer"&gt;Charles Fries (@charlesfries)&lt;/a&gt;, &lt;a href="https://github.com/locks" rel="noopener noreferrer"&gt;Ricardo Mendes (@locks)&lt;/a&gt;, &lt;a href="https://github.com/jfdnc" rel="noopener noreferrer"&gt;Jacob (@jfdnc)&lt;/a&gt;, &lt;a href="https://github.com/kategengler" rel="noopener noreferrer"&gt;Katie Gengler (@kategengler)&lt;/a&gt;, &lt;a href="https://github.com/jenweber" rel="noopener noreferrer"&gt;Jen Weber (@jenweber)&lt;/a&gt;, &lt;a href="https://github.com/maxfierke" rel="noopener noreferrer"&gt;Max Fierke (@maxfierke)&lt;/a&gt;, &lt;a href="https://github.com/raido" rel="noopener noreferrer"&gt;Raido Kuli (@raido)&lt;/a&gt;, &lt;a href="https://github.com/amyrlam" rel="noopener noreferrer"&gt;Amy Lam (@amyrlam)&lt;/a&gt;, &lt;a href="https://github.com/sly7-7" rel="noopener noreferrer"&gt;Sylvain Mina (@sly7-7)&lt;/a&gt;, &lt;a href="https://github.com/ddzz" rel="noopener noreferrer"&gt;Darius Dzien (@ddzz)&lt;/a&gt;, &lt;a href="https://github.com/jaredgalanis" rel="noopener noreferrer"&gt;Jared Galanis (@jaredgalanis)&lt;/a&gt;, and &lt;a href="https://github.com/ndekeister-us" rel="noopener noreferrer"&gt;Nathanaël Dekeister (@ndekeister-us)&lt;/a&gt; for their contributions to Ember and related repositories! 💖&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#connect-with-us"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScqu7Lw_9cIkRtAiXKitgkAo4xX_pV1pdCfMJgIr6Py1V-9Og/viewform"&gt;🤓 Connect with us&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FSjd7Dlx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73io6soifsratf82s6qa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FSjd7Dlx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73io6soifsratf82s6qa.png" alt="Office Hours Tomster mascot"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Wondering about something related to Ember, Ember Data, Glimmer, or addons in the Ember ecosystem, but don't know where to ask? Readers’ Questions are just for you!&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Submit your own&lt;/strong&gt; short and sweet &lt;strong&gt;question&lt;/strong&gt; under &lt;a href="https://bit.ly/ask-ember-core"&gt;bit.ly/ask-ember-core&lt;/a&gt;. And don’t worry, there are no silly questions, we appreciate them all - promise! 🤞&lt;/p&gt;


&lt;p&gt;Want to write for the Ember Times? Have a suggestion for next week's issue? Join us at &lt;a href="https://discordapp.com/channels/480462759797063690/485450546887786506"&gt;#support-ember-times&lt;/a&gt; on the &lt;a href="https://discord.gg/emberjs"&gt;Ember Community Discord&lt;/a&gt; or ping us &lt;a href="https://twitter.com/embertimes"&gt;@embertimes&lt;/a&gt; on Twitter.&lt;/p&gt;


&lt;p&gt;Keep on top of what's been going on in Emberland this week by subscribing to our &lt;a href="https://embertimes.substack.com/"&gt;e-mail newsletter&lt;/a&gt;! You can also find our posts on the &lt;a href="https://blog.emberjs.com/tag/newsletter"&gt;Ember blog&lt;/a&gt;. See you in two weeks!&lt;/p&gt;




&lt;p&gt;That's another wrap! ✨&lt;/p&gt;

&lt;p&gt;Be kind,&lt;/p&gt;

&lt;p&gt;Chris Ng, Anne-Greeth Schot-van Herwijnen, Jared Galanis, Amy Lam, and the Learning Team&lt;/p&gt;

</description>
      <category>ember</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Go/Golang Basics - Pointers and Functions</title>
      <author>Tarun Kumar J</author>
      <pubDate>Sat, 25 Sep 2021 03:59:23 +0000</pubDate>
      <link>https://dev.to/tarunj096/go-golang-basics-pointers-and-functions-27f9</link>
      <guid>https://dev.to/tarunj096/go-golang-basics-pointers-and-functions-27f9</guid>
      <description>&lt;p&gt;A &lt;code&gt;function&lt;/code&gt; is a group of statements that can be used repeatedly in a program. Below is a simple function definition in &lt;code&gt;Go&lt;/code&gt; language :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;helloUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

         &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above-defined function helloUser() has a print statement in it and It runs it when we call the function.&lt;/p&gt;

&lt;p&gt;A function starts with the keyword func followed by the function name. Below is a function that is defined with parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;addNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above function has two parameters num1 and num2 and there's a return type specified after the parentheses. The return type here is Int. A Go function can return multiple values&lt;/p&gt;

&lt;p&gt;Since the above function has the parameters with the same datatype we can write it as :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;addNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*&lt;em&gt;Note *&lt;/em&gt;: Go uses &lt;code&gt;Pass by value&lt;/code&gt; to pass arguments in a function. It cannot change the arguments within the function that are being passed.&lt;/p&gt;

&lt;p&gt;Below is an example of multiple return values in a Go function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

          &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
          &lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
          &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mul&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;addandMultiplyNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Result after adding is :"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Result after multiplying is :"&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;addandMultiplyNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
       &lt;span class="n"&gt;result1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;
       &lt;span class="n"&gt;result2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pointers"&gt;
  &lt;/a&gt;
  Pointers
&lt;/h3&gt;

&lt;p&gt;As I said above Go uses Pass by value in functions. Go is a &lt;code&gt;Pass by value&lt;/code&gt; language.&lt;br&gt;
It means that it only passes the value of the argument and the argument itself. The changes that take place in function stay within that.&lt;/p&gt;

&lt;p&gt;To change the values we use &lt;strong&gt;Pointers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A Pointer is a variable that is used to store the memory address of another variable. Every time we use a variable we retrieve the value stored at the variable's address. To access the address of the variable we use &lt;code&gt;&amp;amp;&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;Below is the example for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;55&lt;/span&gt;

&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;// Prints the address of num&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To store the addresses we use pointers. The&lt;code&gt;*&lt;/code&gt;operator is used to declare a pointer. &lt;br&gt;
An example of that is :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;55&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;pointertoNum&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; 

&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pointertoNum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;//Prints the address of num&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we'd want to store a different value in the variable, We can access the value stored in the address by the&lt;code&gt;*&lt;/code&gt; operator. That is also called dereferencing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;55&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;pointertoNum&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; 

&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pointertoNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;45&lt;/span&gt;

&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// Prints 45&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To change values that are passed to function, We can use Pointers.&lt;br&gt;
Below is a example for that :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;changeNumtoZero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numptr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;  &lt;span class="c"&gt;//The parameter here is pointer to num&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;numptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// Prints 20&lt;/span&gt;
&lt;span class="n"&gt;changeNumtoZero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;//Pass the address of num&lt;/span&gt;
&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// Prints 0&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's It for this blog ✅.&lt;/p&gt;

&lt;p&gt;For more information, You can always check out the official documentation. &lt;br&gt;
&lt;a href="https://golang.org"&gt;This &lt;/a&gt; is the official site 💯.&lt;/p&gt;

&lt;p&gt;If you are new to the Go language and you want to check out more,&lt;br&gt;
 Below are some &lt;strong&gt;resources&lt;/strong&gt; 🔥.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Free coding exercises(Gophercises) course in Go by John Calhoun. You can check it out &lt;a href="https://gophercises.com"&gt; here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A full video course on  &lt;a href="https://www.youtube.com/watch?v=YS4e4q9oBaU"&gt;freecodecamp&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There's a course on Codecademy on Go language. You can check it out  &lt;a href="https://www.codecademy.com/learn/learn-go"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>100daysofcode</category>
      <category>go</category>
      <category>beginners</category>
    </item>
    <item>
      <title>40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS</title>
      <author>Coder Helper</author>
      <pubDate>Sat, 25 Sep 2021 03:57:38 +0000</pubDate>
      <link>https://dev.to/f79sd/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-5hha</link>
      <guid>https://dev.to/f79sd/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-5hha</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Open Source: My first Pull Request</title>
      <author>MizuhoOkimoto</author>
      <pubDate>Sat, 25 Sep 2021 03:38:53 +0000</pubDate>
      <link>https://dev.to/okimotomizuho/open-source-my-first-pull-request-1356</link>
      <guid>https://dev.to/okimotomizuho/open-source-my-first-pull-request-1356</guid>
      <description>&lt;p&gt;After I published an open source project which creates a static site generator(SSG), my second lab assignment was adding new features and making a Pull Request with my partner's same project. My partner, Anatoliy, also created a SSG in JavaScript and his way to convert text file(s) to HTML file(s) was organized and clear.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anatoliy's Project on GitHub: &lt;a href="https://github.com/aserputov/qck-ssg-final"&gt;https://github.com/aserputov/qck-ssg-final&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;My Project on GitHub: &lt;a href="https://github.com/MizuhoOkimoto/pajama-ssg"&gt;https://github.com/MizuhoOkimoto/pajama-ssg&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New features
&lt;/h2&gt;

&lt;p&gt;There are 2 required features.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Modify the file handling so that it supports both .txt files as well as .md, and parse one aspect of Markdown into HTML.&lt;/li&gt;
&lt;li&gt;Implement one of the Markdown syntax features for Italics, Bold, Heading1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First of all, I used Fork on his GitHub repository, and cloned to my GitHub repository. Then, I cloned it to my local computer, and created a new branch for my work with this command &lt;code&gt;git checkout -b issue-5&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initial-thoughts"&gt;
  &lt;/a&gt;
  Initial Thoughts
&lt;/h2&gt;

&lt;p&gt;Last week, when I tested and reviewed his project, I thought I understood his way and the code structure. However, when I started trying to implement the new features, I hit a wall. I had to ask him to explain his way and he sent me some videos to explain!(It was at 2am! Thank you, my sweet friend😭)&lt;br&gt;
I communicated with him and I finally implemented the new features by adding some functions for reading .md file, and used replace methods to replace to markdown. Unfortunately, I had another problem. I installed Prettier on my local machine globally, so when I type &lt;code&gt;**&lt;/code&gt; to make the line bold, it became &lt;code&gt;-&lt;/code&gt;or &lt;code&gt;\*&lt;/code&gt;, so I couldn't test the implementations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-a-pull-request"&gt;
  &lt;/a&gt;
  Making a Pull Request
&lt;/h2&gt;

&lt;p&gt;After I finished the implementations, I made a &lt;a href="https://github.com/aserputov/qck-ssg-final/pull/6"&gt;pull request&lt;/a&gt; on my fork repository.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ylvRGCBe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m96p61i3m7zd9snejacy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ylvRGCBe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m96p61i3m7zd9snejacy.png" alt="image"&gt;&lt;/a&gt; &lt;br&gt;
On my terminal, I changed the branch to issue-5, added the JavaScript file and updated README.md, committed, and pushed to the issue-5.&lt;br&gt;
I posted a comment what I implemented with a sample on GitHub, and asked him to review and merge it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#receiving-a-pull-request"&gt;
  &lt;/a&gt;
  Receiving a Pull Request
&lt;/h2&gt;

&lt;p&gt;I received a &lt;a href="https://github.com/MizuhoOkimoto/pajama-ssg/pull/15"&gt;pull request&lt;/a&gt; from Anatoliy, and I found a problem. After he Fork my repository, I updated my project, so there were some conflicts. I was afraid I would lose my updates when I merged his code, so I asked my professor and he worked me through how to merge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-merged-and-rebased"&gt;
  &lt;/a&gt;
  How I merged and rebased
&lt;/h2&gt;

&lt;p&gt;First, I cloned my project's repository on my local computer, and checked with &lt;code&gt;git status&lt;/code&gt;. It showed &lt;code&gt;Your branch is up to date with 'origin/main'&lt;/code&gt;. Then, viewing git remote configurations(&lt;code&gt;$git remote&lt;/code&gt;), and added Anatoliy's repository and named it &lt;code&gt;anatoliy&lt;/code&gt;(&lt;code&gt;$git remote add anatoliy https://github.com/aserputov/pajama-ssg.git&lt;/code&gt;). After I added his repository, I checked remote configuration again, it showed &lt;code&gt;anatoliy&lt;/code&gt;&lt;code&gt;origin&lt;/code&gt;. So I downloaded the commits, files, and refs from a remote repository into my local repo(&lt;code&gt;$git fetch anatoliy&lt;/code&gt;), and checked the past commits.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JjdIzrgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as52b3a7gped8sne5dvm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JjdIzrgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/as52b3a7gped8sne5dvm.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Then, I went back to my main branch(&lt;code&gt;$git checkout main&lt;/code&gt;), and merged issue-5(&lt;code&gt;$git merge issue-5&lt;/code&gt;).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pn880Tk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsstxli1a5zhxoqkr3gt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pn880Tk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsstxli1a5zhxoqkr3gt.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
I had some unmerged files, so I opened a pull request and filed changes on GitHub, so I could check what I should or shouldn't merge. For Example: &lt;code&gt;$ git rm .\.DS_Store&lt;/code&gt;and &lt;code&gt;$git add README.md&lt;/code&gt;&lt;br&gt;
After I committed it (&lt;code&gt;$git commit&lt;/code&gt; without message), I checked with &lt;code&gt;$git log&lt;/code&gt;, and I could see that I finally merged everything.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zAsYZ19Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doysvrj8cfde8dbga0kf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zAsYZ19Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doysvrj8cfde8dbga0kf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-a-pull-request"&gt;
  &lt;/a&gt;
  Closing a Pull Request
&lt;/h2&gt;

&lt;p&gt;My professor taught me how to send a request change based on the pull request. First, inside the pull request page, I clicked the "View changes" button, checked the changes, then made a Review changes and submitted. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kDO6fh3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qwdkoc6gaswa0t1auhy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kDO6fh3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qwdkoc6gaswa0t1auhy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Conclusion:&lt;br&gt;
I didn't like Git before, because it's complicated and I always get a bunch of error messages. However, after I watched my professor's lectures and through this assignment, I'm getting to like it. I feel like Git is magic💥 It was great to collaborate with my partner and get support from my professor.&lt;br&gt;
I still have some &lt;a href="https://github.com/MizuhoOkimoto/pajama-ssg/issues"&gt;issues&lt;/a&gt; to improve my project, so I will update it soon 👍&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
