<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Collective Community: How we empower developers</title>
      <author>Conor Bronsdon</author>
      <pubDate>Wed, 15 Dec 2021 18:10:22 +0000</pubDate>
      <link>https://dev.to/linearb/collective-community-how-we-empower-developers-1noc</link>
      <guid>https://dev.to/linearb/collective-community-how-we-empower-developers-1noc</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was written exclusively for &lt;a href="https://devinterrupted.com/collective-community-how-we-empower-developers/"&gt;devinterrupted.com&lt;/a&gt; by Ben Matthews&lt;/em&gt;&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
Putting employees and your community first should be a crucial priority for every organization, and it shouldn’t exist only in principle - it must exist as an actionable goal. Fostering a community within your team creates a foundation for high-performance, but it only works if you lead people-first.&lt;/p&gt;

&lt;p&gt;At Stack Overflow, the level of collaboration between engineers is a step above any other organization I have seen. It takes conscious effort on the part of leadership to foster a work environment that puts employees first. Managers should choose to put people first, because it’s the right thing to do, not just a vague claim to a cliche. &lt;/p&gt;

&lt;p&gt;Thankfully, we live in a world where the data demonstrates that caring for people first is also the economic thing to do. No one has ever done a better job because they were scared, stressed, or worried about their future; especially in jobs centered around creativity and problem solving such as software development.&lt;/p&gt;

&lt;p&gt;This commitment to people is the leadership philosophy behind Stack and helps guide our decision-making and our workplace culture. It also helped us to create Collectives™ on Stack Overflow. To get there, we needed a successful engineering team and culture - here’s how we built it. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/54GeeR80VdGjiXwenLnDzc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#indicators-of-team-health"&gt;
  &lt;/a&gt;
  Indicators of team health
&lt;/h2&gt;

&lt;p&gt;Common metrics that organizations tend to follow are often a symptom of a team’s performance, but not necessarily the whole story. Velocity, predictability, bug rate, etc should be viewed as an indicator of team health, not as a goal to be achieved; sometimes the best indicators to follow are subjective, and relative to the people and teams. &lt;/p&gt;

&lt;p&gt;After all, what does success look like? If people are getting what they need, agreed upon expectations are being met, and team morale is high, that’s real success. If this kind of people-driven success is occurring, you’ll start to notice that things like velocity time and predictability will naturally improve and not the other way around.&lt;/p&gt;

&lt;p&gt;For the record, predictability should never be the goal. The end goal should always be to create value for your customers and/or your community. Any team - or manager for that matter - can make predictability look good if they are making sure that they never fail a given estimate on paper, but that’s not an indicator of good product creation.&lt;/p&gt;

&lt;p&gt;If you're actually producing value, and you have a well run team, predictability will follow. It's a side effect, a symptom of good team health.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/eIkU4QOxthQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#servant-leadership"&gt;
  &lt;/a&gt;
  Servant Leadership
&lt;/h2&gt;

&lt;p&gt;At Stack Overflow, we’ve had long talks about what metrics we feel provide valuable feedback and those we believe are valuable to track. Numbers are important and should not be ignored, but again, they should not be the standalone goal. Tracking the right metrics should facilitate introspection for your organization and leaders would do well to keep this in mind. If we have a bad sprint, it tends to trigger us to think, “what went wrong?” and “how can we improve this for next time?” instead of thinking this was a failure of certain individuals.&lt;/p&gt;

&lt;p&gt;For instance, if you had a sprint where you achieved a really high velocity, you should celebrate that success. But at the same time, you should be asking yourself what led to that success. Was there a behavior that changed? Not everything is internal. Sometimes external factors, a pandemic as an apropos example, influence successful team metrics just as much as internal ones do. Remember to &lt;a href="https://devinterrupted.com/adhd-in-the-workplace-3-ways-you-can-help/"&gt;look behind the metrics to see what’s impacting team members.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As far as following specific methodologies is concerned, try not to get hung up on the little things; analysis paralysis occurs is often a huge drain on performance and focus of the team. Time spent sitting around and arguing about whether something is a three point or a four point story is not productive. Call it a four and keep moving. Good leaders should keep their developers developing, while removing any hindrances to their performance, ideally before it is even on their radar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-team-and-your-product"&gt;
  &lt;/a&gt;
  Building a team &lt;em&gt;and&lt;/em&gt; your product
&lt;/h2&gt;

&lt;p&gt;If you’ve been around software development long enough, I’m sure you’ve had the experience of joining an organization where everything is dictated in a top-down approach. This kind of “my way or the highway” thinking ultimately undermines your teams and makes your organization rigid in an industry that is far more creative than some like to admit. &lt;/p&gt;

&lt;p&gt;A good manager will do their best to accommodate their teams, even if that means allowing a team to communicate or operate in a way that is not established within an organization. Recently, one of my most productive teams started to struggle after the project we were working on started to shift. A lot of the QA and code review work associated with the stories became large and unwieldy and the common practice was to have that wrapped in with the dev story. That makes sense after all, the former can’t ship without the later. Eventually we just tried separating out the more cumbersome tasks into their own stories. The immediate and biggest reaction was from folks overly invested in the metrics: we just doubled our stories and made it appear that story cycle time virtually doubled. The instinct was to say “this is a step backward. Undo it all,” but that would be ignoring what's going on behind the metrics: more work was getting done, and the bug count dropped. As those were saying we need to go back because the metrics showed team health was bad, my response was to just change the metrics to accurately reflect our healthier team that chose their own workflow.&lt;/p&gt;

&lt;p&gt;Adopting this mindset as a manager provides huge returns for your organization. People are happier when they are not being forced into something that doesn't fit. With team members that control how they work, on their own and especially with each other, comes higher value creation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#worklife-balance"&gt;
  &lt;/a&gt;
  Work-life Balance
&lt;/h2&gt;

&lt;p&gt;I have never met anyone that works better when they’re worried about what’s going on in their personal life. I’ve found this over and over in my career as a developer and eventually a manager inspired me to &lt;a href="https://stackoverflow.blog/2020/07/01/nobody-has-to-lose-in-work-life-balance/"&gt;write about it.&lt;/a&gt; People who are under stress feel strained to come up with strong solutions and tend to generate less errors. Those people who say “this person just works well under pressure” are really just saying “This person's performance doesn’t fold as much as others once emergencies happen.” That's a good quality for them, sure, but nothing an team should brag about; that should be embarrassing that it happened enough that some people have reputations around crises.&lt;/p&gt;

&lt;p&gt;Work-life balance is not something a company sacrifices, that’s zero sum thinking. It’s been shown time and again that the opposite is true. Providing people with things like  leave, and an investment in their mental health has more for an organization’s productivity than filling out timesheets ever will. At Stack we have a policy of unlimited sick days, no questions asked. If you need a day, we trust you to be able to take care of yourself. &lt;/p&gt;

&lt;p&gt;When you take care of people they will work better and faster - that’s also what they want to do. Regardless of the stereotypes people will often hear from naysayers who balk at the idea of unlimited sick time, the folks who just want to phone it in and game the system are the minority. So much so, that spending the effort considering how to manage the time a person takes a sick day when they aren’t sick is probably more of a time sink than how much it will happen. &lt;/p&gt;

&lt;p&gt;By choosing to be invested in your people’s health, an organization chooses to be a place that values its employees. When you avoid zero sum thinking, getting trapped in the idea that if employees are benefiting the company must be losing, you begin to realize that working with, instead of against, those you represent leads to happier people and a better bottom line. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/O873vxozamw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-took-all-these-leadership-principles-and-applied-them-to-collectives"&gt;
  &lt;/a&gt;
  We took all these leadership principles and applied them to Collectives
&lt;/h2&gt;

&lt;p&gt;At Stack Overflow, we’re quite a flat company. And I don’t mean this by measuring the number of levels between an engineer and the CEO (it’s 4, for the record), but people of all levels have a voice in product decisions. Engineers are heavily involved in what we build and how it is built. Being a company built for engineers and driven by engineers is a huge part of why Stack Overflow is successful. &lt;/p&gt;

&lt;p&gt;This success has allowed a beautiful community to thrive on our public platform, but we are always looking at how best we can give back to that community. How do we help our community grow? How do we make those experiences more meaningful? Those are the questions that guide us at Stack. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Anything that fosters our users’ ability to help each other and to benefit from it. That's always a homerun.” - &lt;a href="https://devinterrupted.com/podcast/developer-first-culture-and-collectives-at-stack-overflow/"&gt;from the Dev Interrupted Podcast at 34:54&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With that in mind, we’ve launched &lt;a href="https://stackoverflow.com/collectives-on-stack-overflow"&gt;Collectives&lt;/a&gt;, a new way for the community to interact with the maintainers of the technology they use most. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5rRsbb75Oqg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As &lt;a href="https://devinterrupted.com/podcast/developer-first-culture-and-collectives-at-stack-overflow/"&gt;I discussed on the Dev Interrupted Podcast&lt;/a&gt;, Collectives are dedicated spaces on Stack Overflow where you can find the resources (including questions and technical articles) and trusted answers you need, faster, by centralizing that content and connecting you with the product experts and trusted users. For instance, if you have questions about Google Go, you can get answers directly from those who help maintain the language.&lt;/p&gt;

&lt;p&gt;I am extremely proud of the work that went into this, and the work that we continue to do to make it something our users can enjoy. Like all new adventures, there is a constant feedback loop we work through to try and keep making Collectives, and Stack Overflow, a better and more welcoming place. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-is-still-the-stack-overflow-you-know-and-love"&gt;
  &lt;/a&gt;
  It is still the Stack Overflow you know and love
&lt;/h2&gt;

&lt;p&gt;The Beta release of Collectives was a huge success. We’ve seen over 20,000 users join Collectives on Stack Overflow and start collaborating since the launch in June. That said, we know we don’t have a Collective for everyone (yet). For users that don't want to take part, or haven't found a Collective that they're excited about yet, their Stack Overflow experience is not going to change.&lt;/p&gt;

&lt;p&gt;For instance, we're not changing accepted answers, whether it comes from Google (our new partner) or not. If people don't vote for an answer, it doesn't get accepted. Content moderation will be treated the same way. Moderators will interact with content from sponsored users just like they would anyone else. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“I think the most positive thing about it is that people aren't losing the site that they love, and that we're really proud of.” - &lt;a href="https://devinterrupted.com/podcast/developer-first-culture-and-collectives-at-stack-overflow/"&gt;from the Dev Interrupted Podcast at 33:22&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With our community update, organizations will be able to improve the visibility and detail of content being created around their technologies, and users will be able to find more relevant and accurate answers they can put to use solving problems while being better recognized for their contributions. Ultimately providing both organizations and users with more actionable insights. &lt;/p&gt;

&lt;p&gt;These efforts allow Slack to build better communities because after all that’s really what we do: we are in the business of building communities. &lt;/p&gt;

&lt;p&gt;Collectives do just that.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Starved for top-level software engineering content? Need some good tips on how to manage your team? This article is based on an episode of &lt;a href="https://devinterrupted.com/podcasts/"&gt;Dev Interrupted&lt;/a&gt; - the go-to podcast for engineering leaders.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dev Interrupted features expert guests from around the world to explore strategy and day-to-day topics ranging from dev team metrics to accelerating delivery. With new guests every week from Google to small startups, the Dev Interrupted Podcast is a fresh look at the world of software engineering and engineering management.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devinterrupted.com/podcasts/"&gt;&lt;strong&gt;&lt;em&gt;Listen and subscribe on your streaming service of choice today.&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QHYGo-8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8c4wxxwj3jki3xpqq2z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QHYGo-8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8c4wxxwj3jki3xpqq2z.png" alt="https://devinterrupted.com/podcasts/" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>management</category>
      <category>leadership</category>
      <category>career</category>
    </item>
    <item>
      <title>Colorful Rain with JS</title>
      <author>Jatin Sharma</author>
      <pubDate>Wed, 15 Dec 2021 17:43:14 +0000</pubDate>
      <link>https://dev.to/j471n/colorful-rain-with-js-514j</link>
      <guid>https://dev.to/j471n/colorful-rain-with-js-514j</guid>
      <description>&lt;p&gt;In this article, we are going to build a container that generates rain by using JS. And it is a colorful rain with random colors. You can play with colors however you want. So first, let's see what are we building.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview"&gt;
  &lt;/a&gt;
  Preview
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p65PpJxD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/pt4KC8x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p65PpJxD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/pt4KC8x.gif" alt="preview" width="809" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's look at the code, how we can make that work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"rain-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.rain-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;999px&lt;/span&gt; &lt;span class="m"&gt;999px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;animate&lt;/span&gt; &lt;span class="m"&gt;5s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;animate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-120px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100vh&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rainContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.rain-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// background Colors for the raindrop&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;linear-gradient(transparent, aqua)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;linear-gradient(transparent, red)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;linear-gradient(transparent, limegreen)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;linear-gradient(transparent, white)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;linear-gradient(transparent, yellow)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// amount of raindops&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Looping and creating the raindrop then adding to the rainContainer&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//  Creating and Element&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;drop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//   CSS Properties for raindrop&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;raindropProperties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;positionX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
    &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;//   Setting Styles for raindrop&lt;/span&gt;
  &lt;span class="nx"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;raindropProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;raindropProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;positionX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;animationDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;raindropProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;animationDuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;raindropProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;raindropProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;raindropProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;//   Appending the raindrop in the raindrop container&lt;/span&gt;
  &lt;span class="nx"&gt;rainContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/j471n/embed/GRMNeZG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/j471n/pen/GRMNeZG"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--601Kx282--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://svgshare.com/i/cqh.svg" alt="codepen" width="300" height="66"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;This is it. You can simply do that with this and you can also take this to the next level. If you enjoyed this article then don't forget to press ❤️. If you have any queries or suggestions don't hesitate to drop them. See you. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can extend your support by buying me a Coffee.😊👇&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/j471n"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUX4imFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/2QWo3cm.png" alt="buymecoffee" width="374" height="88"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#you-might-be-interested-in-"&gt;
  &lt;/a&gt;
  You might be interested in -
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/creative-hover-menu-with-css-513c"&gt;Creative Hover Menu with CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/typing-effect-by-using-css-50p"&gt;Typing Effect by using CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/curved-css-timeline-5ab3"&gt;Curved Timeline in CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The most important use Websites &amp; Tools &amp; communities for Web Developers</title>
      <author>Mahmoud EL-kariouny</author>
      <pubDate>Wed, 15 Dec 2021 17:34:28 +0000</pubDate>
      <link>https://dev.to/mahmoudessam/the-most-important-use-websites-tools-communities-for-web-developers-680</link>
      <guid>https://dev.to/mahmoudessam/the-most-important-use-websites-tools-communities-for-web-developers-680</guid>
      <description>&lt;h4&gt;
  &lt;a href="#hosting-amp-deployment"&gt;
  &lt;/a&gt;
  Hosting &amp;amp; Deployment
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Netlify &lt;/li&gt;
&lt;li&gt;Heroku&lt;/li&gt;
&lt;li&gt;Google Cloud Platform&lt;/li&gt;
&lt;li&gt;Amazon Web Services&lt;/li&gt;
&lt;li&gt;Microsoft Azure&lt;/li&gt;
&lt;li&gt;Oracle Cloud&lt;/li&gt;
&lt;li&gt;IBM Cloud&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#royaltyfree-images-amp-video"&gt;
  &lt;/a&gt;
  Royalty-Free Images &amp;amp; Video
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Unsplash&lt;/li&gt;
&lt;li&gt;Pexels&lt;/li&gt;
&lt;li&gt;Coverr&lt;/li&gt;
&lt;li&gt;Undraw&lt;/li&gt;
&lt;li&gt;Storyset&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#icons-amp-fonts"&gt;
  &lt;/a&gt;
  Icons &amp;amp; Fonts
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Google Fonts&lt;/li&gt;
&lt;li&gt;Flaticon&lt;/li&gt;
&lt;li&gt;Font Awesome&lt;/li&gt;
&lt;li&gt;Animated icons8.com&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#learning"&gt;
  &lt;/a&gt;
  Learning
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Freecodecamp&lt;/li&gt;
&lt;li&gt;Theodinproject&lt;/li&gt;
&lt;li&gt;Mem.dev&lt;/li&gt;
&lt;li&gt;smashingmagazine&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#mockup-tools"&gt;
  &lt;/a&gt;
  Mockup Tools
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Figma&lt;/li&gt;
&lt;li&gt;Zeplin&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#freelancing"&gt;
  &lt;/a&gt;
  Freelancing
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Upwork&lt;/li&gt;
&lt;li&gt;freelancer&lt;/li&gt;
&lt;li&gt;Fiverr&lt;/li&gt;
&lt;li&gt;PeoplePerHour&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#project-design-ideas"&gt;
  &lt;/a&gt;
  Project Design Ideas
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Awwwards&lt;/li&gt;
&lt;li&gt;Dribbble&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#exercises-amp-algorithms"&gt;
  &lt;/a&gt;
  Exercises &amp;amp; Algorithms
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Leetcode&lt;/li&gt;
&lt;li&gt;Exercism&lt;/li&gt;
&lt;li&gt;Codewars&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#general-tools"&gt;
  &lt;/a&gt;
  General Tools
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Emailjs&lt;/li&gt;
&lt;li&gt;Caniuse&lt;/li&gt;
&lt;li&gt;Image compressor&lt;/li&gt;
&lt;li&gt;Css-tricks&lt;/li&gt;
&lt;li&gt;free-for.dev&lt;/li&gt;
&lt;li&gt;mytemplate.xyz&lt;/li&gt;
&lt;li&gt;getavataaars.com&lt;/li&gt;
&lt;li&gt;devdocs.io&lt;/li&gt;
&lt;li&gt;drawsql.app&lt;/li&gt;
&lt;li&gt;mockaroo&lt;/li&gt;
&lt;li&gt;jsonplaceholder.typicode&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#communities"&gt;
  &lt;/a&gt;
  Communities
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;dev.to&lt;/li&gt;
&lt;li&gt;indiehackers&lt;/li&gt;
&lt;li&gt;hackernoon&lt;/li&gt;
&lt;li&gt;quora&lt;/li&gt;
&lt;li&gt;codeproject&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the best for you :)&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The many meanings of $ in Svelte</title>
      <author>Geoff Rich</author>
      <pubDate>Wed, 15 Dec 2021 17:18:16 +0000</pubDate>
      <link>https://dev.to/geoffrich/the-many-meanings-of-in-svelte-1k8l</link>
      <guid>https://dev.to/geoffrich/the-many-meanings-of-in-svelte-1k8l</guid>
      <description>&lt;p&gt;If you're writing Svelte code, you'll notice that &lt;code&gt;$&lt;/code&gt; can have multiple different meanings, depending on the context. For example, look at this code snippet — &lt;code&gt;$&lt;/code&gt; is used in three different ways! If you're new to Svelte, or to JavaScript in general, it can be confusing to keep them all straight.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Total: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;$count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this post, I'll show all the different meanings that &lt;code&gt;$&lt;/code&gt; can have in Svelte.&lt;/p&gt;

&lt;p&gt;First, let's start with the primary uses of &lt;code&gt;$&lt;/code&gt; in Svelte: reactive statements and reactive stores.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactive-statements"&gt;
  &lt;/a&gt;
  Reactive statements
&lt;/h2&gt;

&lt;p&gt;In a Svelte component, prefixing a statement with &lt;code&gt;$:&lt;/code&gt; marks the statement as &lt;em&gt;reactive&lt;/em&gt; — it will run whenever the variables referenced in that statement change. Here's a classic example. Whenever &lt;code&gt;num&lt;/code&gt; changes, &lt;code&gt;doubled&lt;/code&gt; is automatically set to the correct value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;doubled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Num: {num}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Doubled: {doubled}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{()&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; num++}&amp;gt;
    Increment
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's also possible to have an entire reactive block that runs when the variables referenced inside it change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;doubled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;doubled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;doubled&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a core concept of Svelte. If you're not familiar with it, go review the section of the Svelte tutorial on &lt;a href="https://svelte.dev/tutorial/reactive-declarations"&gt;reactivity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is valid JavaScript, since it uses the obscure &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label"&gt;label&lt;/a&gt; syntax. However, its reactive properties are unique to Svelte, and specifically to Svelte components. Using this syntax inside a regular &lt;code&gt;.js&lt;/code&gt; file will not make a statement reactive.&lt;/p&gt;

&lt;p&gt;Since this is a valid label, you can exit a reactive block early the same way you'd &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label#using_a_labeled_break_statement"&gt;break out of a regular label&lt;/a&gt;. This example will keep track of the number of evens, but only until the counter reaches 10. At that point, &lt;code&gt;break $&lt;/code&gt; will exit the block early.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;evens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;evens&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{()&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; (counter++)}&amp;gt;
    Increment
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Counter: {counter}, evens before 10: {evens}
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You won't need to use this very often, but it's useful to know about.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-store-values"&gt;
  &lt;/a&gt;
  Accessing store values
&lt;/h2&gt;

&lt;p&gt;The other primary use of &lt;code&gt;$&lt;/code&gt; you'll see in a Svelte component is when referencing the current value of a store. In Svelte, a &lt;a href="https://svelte.dev/tutorial/writable-stores"&gt;store&lt;/a&gt; is any object with a &lt;code&gt;subscribe&lt;/code&gt; method that allows you to be notified when the value of the store changes. It's especially useful when you want a reactive value to be accessible from muliple components in your application, since the store can live outside of a Svelte component.&lt;/p&gt;

&lt;p&gt;If you wanted to get the current value of a store in a Svelte component and have it automatically update when the store changes, you could do something like the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;_count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unsubscribe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code subscribes to the &lt;code&gt;count&lt;/code&gt; store, updates the local &lt;code&gt;_count&lt;/code&gt; variable when the store changes, and unsubscribe from the store when the component is destroyed. However, this is a lot of boilerplate.&lt;/p&gt;

&lt;p&gt;Thankfully, Svelte has a special syntax to make this sort of thing easy. Inside a Svelte component, we can reference the current value of the &lt;code&gt;count&lt;/code&gt; store with the variable &lt;code&gt;$count&lt;/code&gt;. By using this syntax, Svelte will take care of subscribing and unsubscribing to the store for us.&lt;/p&gt;

&lt;p&gt;As with reactive declarations, this syntax only works inside a Svelte component. In regular JS files, you'll need to subscribe to the store manually.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comparing-reactive-statements-and-reactive-stores"&gt;
  &lt;/a&gt;
  Comparing reactive statements and reactive stores
&lt;/h3&gt;

&lt;p&gt;Those are the two primary ways &lt;code&gt;$&lt;/code&gt; is used inside Svelte. If the dollar sign has a colon after it (&lt;code&gt;$:&lt;/code&gt;), then it indicates a &lt;a href="https://svelte.dev/docs#3_%24_marks_a_statement_as_reactive"&gt;reactive statement&lt;/a&gt;. If it is at the start of a variable name inside a Svelte component, then it's &lt;a href="https://svelte.dev/docs#4_Prefix_stores_with_%24_to_access_their_values"&gt;accessing a reactive store value&lt;/a&gt;. In general, when you see &lt;code&gt;$&lt;/code&gt; in a Svelte component, you should think &lt;em&gt;reactivity&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Note that there are often times where you'll want to combine the two. Referencing a store value in the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; block with &lt;code&gt;$&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; mean that value will automatically be updated when the store changes. In the following example, &lt;code&gt;doubledCount&lt;/code&gt; will not be automatically updated unless you mark that assignment as reactive with &lt;code&gt;$:&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// count is a store&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// doesn't keep value updated&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;doubledCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$count&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// keeps value updated&lt;/span&gt;
    &lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;doubledCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$count&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This could seem unintuitive — didn't I just say that a store is reactive? Yes, but it's only reactive in that &lt;em&gt;we can be notified any time the value changes&lt;/em&gt;. If we want to derive a value from it, we still need to mark that statement as reactive as well.&lt;/p&gt;

&lt;p&gt;This is a little difficult to wrap your head around, so see this alternate explanation in &lt;a href="https://www.reddit.com/r/sveltejs/comments/r6j9r4/i_still_dont_get_this_and_need_an_eli5/hmy13ud/"&gt;r/sveltejs&lt;/a&gt; if you're still having trouble.&lt;/p&gt;

&lt;p&gt;However, those are not the only times you'll see &lt;code&gt;$&lt;/code&gt; in a Svelte component. &lt;code&gt;$&lt;/code&gt; is used in other ways, both in Svelte and in vanilla JavaScript in general. Let's go over a few more examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#template-literals"&gt;
  &lt;/a&gt;
  Template literals
&lt;/h2&gt;

&lt;p&gt;This is not Svelte-specific, but is worth mentioning, since it's a common technique in modern JavaScript. When writing &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;template literals&lt;/a&gt; in JavaScript, you can use &lt;code&gt;${var}&lt;/code&gt; to insert the value of a variable into the template string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;running&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;walking&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// both output "running and walking"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; and &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// without template literals&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// with template literals&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where this could get confusing is if you combine template literals with reactive statements and stores! Make sure you can pick out what each &lt;code&gt;$&lt;/code&gt; means in the below example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`num is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and the store is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;$count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#props-restprops-and-slots"&gt;
  &lt;/a&gt;
  $$props, $$restProps, and $$slots
&lt;/h2&gt;

&lt;p&gt;These are globally-available variables inside a Svelte component. &lt;code&gt;$$props&lt;/code&gt; contains all the props passed to the component, &lt;code&gt;$$restProps&lt;/code&gt; contains all the props that were not explicitly exported by the component (which useful for wrapping native HTML elements like &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;), and &lt;code&gt;$$slots&lt;/code&gt; contains the slots passed to the component. Here, \$\$ doesn't indicate that this is a store value; it's just a naming convention.&lt;/p&gt;

&lt;p&gt;In fact, their naming mirrors how Svelte names things internally. For example, if you look at the code Svelte generates, you'll see reference to similarly-named variables like &lt;code&gt;$$self&lt;/code&gt; and &lt;code&gt;$$invalidate&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$$props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$$invalidate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;click_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;$$invalidate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;click_handler&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://svelte.dev/docs#Client-side_component_API"&gt;client-side component API&lt;/a&gt; also prefixes its methods with &lt;code&gt;$&lt;/code&gt; to avoid colliding with methods defined on the component instance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-derived-store"&gt;
  &lt;/a&gt;
  Creating a derived store
&lt;/h2&gt;

&lt;p&gt;When creating a &lt;a href="https://svelte.dev/docs#derived"&gt;derived store&lt;/a&gt;, it is common to prefix the values of the store in the derived callback with &lt;code&gt;$&lt;/code&gt;. You'll see this in the derived store examples in the Svelte docs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;derived&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;derived&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is not required and does not indicate anything special — it works the same in and out of Svelte components. It just provides an easy way to distinguish the variable in the callback (which has the updated value of the store) and the reference to the store itself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;While it might seem difficult to keep track of all these at first, given enough experience you'll get the hang of it. It's most important to understand the difference between the first three examples. You're less likely to encounter the others until you reach more advanced scenarios.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Dockside (Open Source) - Provision dev containers and staging environments with IDEs</title>
      <author>Ashley</author>
      <pubDate>Wed, 15 Dec 2021 17:03:45 +0000</pubDate>
      <link>https://dev.to/awilliams/dockside-open-source-provision-dev-containers-and-staging-environments-with-ides-2721</link>
      <guid>https://dev.to/awilliams/dockside-open-source-provision-dev-containers-and-staging-environments-with-ides-2721</guid>
      <description>&lt;p&gt;We're excited to announce the open-source release of Dockside, a development tool for provisioning lightweight access-controlled development containers, staging environments and sandboxes - aka ‘devtainers’ - on local machines, on-premises (raw metal or VM) or in the cloud.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href="https://github.com/newsnowlabs/dockside"&gt;https://github.com/newsnowlabs/dockside&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dockside is a tool for provisioning lightweight access-controlled IDEs, staging environments and sandboxes - aka ‘devtainers’ - on local machines, on-premises (raw metal or VM) or in the cloud.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who is Dockside for?&lt;/strong&gt;&lt;br&gt;
→ Developers: Work from anywhere (it is browser-based) in a clone of your production environment. Switch between/hand over tasks instantly. No more laborious branch switching, or committing code before it’s ready. ‘git stash’ will be a thing of the past!&lt;/p&gt;

&lt;p&gt;→ Code Reviewers: Access your colleagues’ devtainers directly. No longer must you stare at their code wondering what it does, or waste time on setup, when their code is already running. Comment on and correct code in-place.&lt;/p&gt;

&lt;p&gt;→ Product Managers, Stakeholders &amp;amp; Clients: Access always-on but secure staged versions of the dev team’s work and works-in-progress, from wherever you are in the world.&lt;/p&gt;

&lt;p&gt;Dockside has been built in-house by the team at NewsNow - one of the most popular news websites in the UK - and has been relied upon over the past few years for all our daily development, product review, staging and testing needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To learn more and try Dockside, check out&lt;/strong&gt; &lt;a href="https://github.com/newsnowlabs/dockside"&gt;https://github.com/newsnowlabs/dockside&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dockside is stable, but under active development, so any ideas, suggestions, or feedback would be gratefully appreciated. Also, if you’d like to be paid to work on Dockside, among our other projects, we’re hiring: &lt;a href="https://www.newsnow.co.uk/careers/"&gt;https://www.newsnow.co.uk/careers/&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>opensource</category>
      <category>docker</category>
      <category>ide</category>
    </item>
    <item>
      <title>What is the difference between Amazon RDS Read Replicas vs Multi AZ</title>
      <author>Vijay Patel</author>
      <pubDate>Wed, 15 Dec 2021 16:16:52 +0000</pubDate>
      <link>https://dev.to/easyawslearn/what-is-the-difference-between-amazon-rds-read-replicas-vs-multi-az-350</link>
      <guid>https://dev.to/easyawslearn/what-is-the-difference-between-amazon-rds-read-replicas-vs-multi-az-350</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-relational-database-service-rds"&gt;
  &lt;/a&gt;
  What is Relational Database Service (RDS)
&lt;/h2&gt;

&lt;p&gt;Amazon Relational Database Service (Amazon RDS) makes it easy to set up, operate, and scale a relational database in the cloud. &lt;br&gt;
It provides cost-efficient and resizable capacity while automating time-consuming administration tasks such as hardware provisioning, database setup, patching and backups. &lt;br&gt;
It frees you to focus on your applications so you can give them the fast performance, high availability, security, and compatibility they need.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Here is the full dedicated video on this topic👇👇&lt;/code&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=70EJ-qSBBXQ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftvtuyYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qljo37ti42q0k7at1ni.png" alt="Image description" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-amazon-rds-read-replicas"&gt;
  &lt;/a&gt;
  What is Amazon RDS Read Replicas?
&lt;/h2&gt;

&lt;p&gt;The read replica operates as a DB instance that allows only read-only connections. Applications connect to a read replica the same way they do to any DB instance. Amazon RDS replicates all databases in the source DB instance. The Oracle DB engine supports replica databases in mounted mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-amazon-rds-multi-az"&gt;
  &lt;/a&gt;
  What is Amazon RDS Multi AZ?
&lt;/h2&gt;

&lt;p&gt;RDS Multi-AZ. Amazon RDS Multi-AZ deployments provide enhanced availability for database instances within a single AWS Region. With Multi-AZ, your data is synchronously replicated to a standby instance in a different AZ.&lt;/p&gt;




&lt;p&gt;▬▬▬▬▬▬ WANT TO LEARN MORE? ▬▬▬▬▬▬&lt;br&gt;
Full Terraform tutorial ► &lt;a href="https://bit.ly/2GwK8V2"&gt;https://bit.ly/2GwK8V2&lt;/a&gt;&lt;br&gt;
DevOps Tools, like Ansible ► &lt;a href="https://bit.ly/3iASHuP"&gt;https://bit.ly/3iASHuP&lt;/a&gt;&lt;br&gt;
Docker Tutorial ► &lt;a href="https://bit.ly/3iAT9Jx"&gt;https://bit.ly/3iAT9Jx&lt;/a&gt;&lt;br&gt;
AWS Tutorial ► &lt;a href="https://bit.ly/3iAT9Jx"&gt;https://bit.ly/3iAT9Jx&lt;/a&gt;&lt;br&gt;
GCP Tutorial ► &lt;a href="https://bit.ly/3mwh412"&gt;https://bit.ly/3mwh412&lt;/a&gt;&lt;br&gt;
Jenkins Tutorials ► [&lt;a href="https://bit.ly/3iHnfv4"&gt;https://bit.ly/3iHnfv4&lt;/a&gt;]&lt;/p&gt;

</description>
      <category>aws</category>
      <category>database</category>
      <category>readreplica</category>
      <category>multiaz</category>
    </item>
    <item>
      <title>JMeter 5.4.1 fix for Security CVE-2021-44228 issue</title>
      <author>Boga Sebastian Nicolae</author>
      <pubDate>Wed, 15 Dec 2021 15:59:31 +0000</pubDate>
      <link>https://dev.to/sebiboga/jmeter-541-fix-for-security-cve-2021-44228-issue-4joc</link>
      <guid>https://dev.to/sebiboga/jmeter-541-fix-for-security-cve-2021-44228-issue-4joc</guid>
      <description>&lt;p&gt;In case you installed on Windows, JMeter 5.4.1 from the Github repo: &lt;a href="https://github.com/sebiboga/install-jmeter-windows"&gt;install-jmeter-windows&lt;/a&gt;, by now you should know that you are impacted by Security issue CVE-2021-44228 because JMeter is a JAVA application&lt;/p&gt;

&lt;p&gt;Here you can find an automatic tool that will fix your vulnerability by downloading the log4j version 2.16&lt;/p&gt;

&lt;p&gt;STEPS:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;STOP JMeter GUI&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;download Release v01 from here: &lt;a href="https://github.com/sebiboga/jmeter-fix-cve-2021-44228-windows/releases/tag/v01"&gt;https://github.com/sebiboga/jmeter-fix-cve-2021-44228-windows/releases/tag/v01&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;unzip the Release&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;double click on cve-2021-44228.bat&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;In case you didn't installed JMeter in C:\JMeter\apache-jmeter-5.4.1, you'll have to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; EDIT the bat file and on row 2, update your location where JMeter is installed;&lt;/li&gt;
&lt;li&gt;then update all copy commands with correct destination folder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the batch file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@echo off
cd C:\JMeter\apache-jmeter-5.4.1\lib
del log4j*.*
md C:\JMeter\cve-2021-4428

powershell -command "Invoke-WebRequest   -Uri 'https://dlcdn.apache.org/logging/log4j/2.16.0/apache-log4j-2.16.0-bin.zip' -OutFile 'C:\JMeter\cve-2021-4428\apache-log4j-2.16.0-bin.zip'"
powershell -command "Expand-Archive -Force 'C:\JMeter\cve-2021-4428\apache-log4j-2.16.0-bin.zip' 'C:\JMeter\cve-2021-4428'"
copy C:\JMeter\cve-2021-4428\apache-log4j-2.16.0-bin\log4j-1.2-api-2.16.0.jar  C:\JMeter\apache-jmeter-5.4.1\lib\*.*
copy C:\JMeter\cve-2021-4428\apache-log4j-2.16.0-bin\log4j-api-2.16.0.jar  C:\JMeter\apache-jmeter-5.4.1\lib\*.*
copy C:\JMeter\cve-2021-4428\apache-log4j-2.16.0-bin\log4j-core-2.16.0.jar  C:\JMeter\apache-jmeter-5.4.1\lib\*.*
copy C:\JMeter\cve-2021-4428\apache-log4j-2.16.0-bin\log4j-slf4j-impl-2.16.0.jar  C:\JMeter\apache-jmeter-5.4.1\lib\*.*
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Have a nice day!&lt;/p&gt;

</description>
      <category>jmeter</category>
      <category>cve202144228</category>
      <category>security</category>
    </item>
    <item>
      <title>Reduzindo as chances de errar um squash de migrações no Hasura</title>
      <author>Fernando Karchiloff</author>
      <pubDate>Wed, 15 Dec 2021 15:55:59 +0000</pubDate>
      <link>https://dev.to/fernandokga/reduzindo-as-chances-de-errar-um-squash-de-migracoes-no-hasura-3c23</link>
      <guid>https://dev.to/fernandokga/reduzindo-as-chances-de-errar-um-squash-de-migracoes-no-hasura-3c23</guid>
      <description>&lt;h1&gt;
  &lt;a href="#sum%C3%A1rio"&gt;
  &lt;/a&gt;
  Sumário
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#vers%C3%A3o-das-tecnologias"&gt;Versão das tecnologias&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#requisitos-m%C3%ADnimos-de-conhecimento-para-entender-o-artigo"&gt;Requisitos mínimos de conhecimento para entender o artigo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#por-qu%C3%AA-deste-artigo"&gt;Por quê deste artigo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#para-os-apressados"&gt;Para os apressados&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exemplo-de-base-de-dados"&gt;Exemplo de base de dados&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#processo-de-fazer-um-squash"&gt;Processo de fazer um squash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclus%C3%A3o"&gt;Conclusão&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#vers%C3%A3o-das-tecnologias"&gt;
  &lt;/a&gt;
  Versão das tecnologias
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Hasura v2.0.9&lt;/li&gt;
&lt;li&gt;Hasura CLI v2.0.9&lt;/li&gt;
&lt;li&gt;PostgreSQL 12&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#requisitos-m%C3%ADnimos-de-conhecimento-para-entender-o-artigo"&gt;
  &lt;/a&gt;
  Requisitos mínimos de conhecimento para entender o artigo
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Entender de comandos SQL&lt;/li&gt;
&lt;li&gt;Como migrações funcionam&lt;/li&gt;
&lt;li&gt;Como &lt;a href="https://hasura.io/docs/latest/graphql/core/getting-started/index.html#getting-started"&gt;Hasura GraphQL Engine&lt;/a&gt; funciona&lt;/li&gt;
&lt;li&gt;Como &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; funciona&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#por-qu%C3%AA-deste-artigo"&gt;
  &lt;/a&gt;
  Por quê deste artigo
&lt;/h2&gt;

&lt;p&gt;Durante o desenvolvimento de um dos projetos de uma empresa de &lt;em&gt;e-commerce&lt;/em&gt;, tivemos uma tarefa que seria necessário mudar a estrutura do banco de dados, esta alteração mexeria com diversas tabelas e colunas para que o objetivo da tarefa fosse concluído.&lt;/p&gt;

&lt;p&gt;Como o Hasura GraphQL Engine oferece uma interface para fazer as mudanças na estrutura do banco de dados, modifiquei por meio desta e executei as queries manuais que se mostraram necessárias, todas essas modificações criavam migrações no repositório do projeto, assim como esperado para um projeto com migrações habilitadas no Hasura.&lt;/p&gt;

&lt;p&gt;Após as modificações, era notável a quantidade de pastas com modificações que foram sendo gravadas no formato de migrações, decidi então usar o comando para comprimir todas elas em um único arquivo, o que seria mais legível, e minha falha se concretizou no momento que executei o comando. &lt;/p&gt;

&lt;p&gt;Sem ter feito validações básicas antes, executei o comando e excluí as migrações anteriores. E assim passei mais de um dia tentando corrigir o erro que cometi por não fazer uma lista de verificação básica antes de usar o comando. Como evitar isso? Vou te explicar no decorrer do artigo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#para-os-apressados"&gt;
  &lt;/a&gt;
  Para os apressados
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Faça as suas modificações usando migrações.&lt;/li&gt;
&lt;li&gt;Usando Git ou outro versionador, faça um commit para salvar as migrações.&lt;/li&gt;
&lt;li&gt;Garanta que os arquivos de &lt;code&gt;up.sql&lt;/code&gt; e &lt;code&gt;down.sql&lt;/code&gt; executam como deveriam usando &lt;code&gt;hasura migrate apply&lt;/code&gt; e &lt;code&gt;hasura migrate apply --down &amp;lt;N&amp;gt;&lt;/code&gt;. Correções manuais (caso erros aconteçam), faça pela aba &lt;code&gt;SQL&lt;/code&gt; sem usar migrações.&lt;/li&gt;
&lt;li&gt;Salve as migrações completas no versionador.&lt;/li&gt;
&lt;li&gt;Use o comando &lt;code&gt;hasura migrate squash --from &amp;lt;num_migracao&amp;gt; --name &amp;lt;name&amp;gt;&lt;/code&gt; para executar o &lt;em&gt;squash&lt;/em&gt;, remova as migrações anteriores (pois você já salvou no versionador).&lt;/li&gt;
&lt;li&gt;Marque a migração que foi criada como preenchida no banco, usando &lt;code&gt;hasura migrate apply --skip-execution&lt;/code&gt; (se as que serão removidas não haviam sido aplicadas, não use a &lt;em&gt;flag&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Use novamente o &lt;code&gt;hasura migrate apply --down &amp;lt;N&amp;gt;&lt;/code&gt; para retirar, e sem a &lt;em&gt;flag&lt;/em&gt; para colocar as migrações, garantindo que sua migração funciona.&lt;/li&gt;
&lt;li&gt;Grave as alterações no versionador.&lt;/li&gt;
&lt;li&gt;(Opcional) Faça otimizações de comandos SQL se achar necessário, exemplo: remover &lt;code&gt;ALTER TABLE&lt;/code&gt; caso exista um &lt;code&gt;DROP TABLE&lt;/code&gt; para uma tabela (sem perda de dados).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#exemplo-de-base-de-dados"&gt;
  &lt;/a&gt;
  Exemplo de base de dados
&lt;/h2&gt;

&lt;p&gt;Para demonstrar como fazer um &lt;em&gt;squash&lt;/em&gt; corretamente, irei utilizar uma base de dados de exemplo simples com uma única tabela, mas no caso real você pode ter diversas operações entre &lt;em&gt;N&lt;/em&gt; tabelas, o que pode tornar o &lt;em&gt;squash&lt;/em&gt; maior e mais complexo.&lt;/p&gt;

&lt;p&gt;A nossa base contém a tabela &lt;code&gt;students&lt;/code&gt; definida por meio desta estrutura:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="nv"&gt;"public"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;"students"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;"id"&lt;/span&gt; &lt;span class="nb"&gt;serial&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;"name"&lt;/span&gt; &lt;span class="nb"&gt;Text&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;"score"&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ela foi criada depois que já executamos a conexão com a nossa base de dados criada no PostgreSQL, desativamos o console e iniciamos as migrações no projeto. Você pode ver mais detalhes de como ativar migrações nesta &lt;a href="https://hasura.io/docs/latest/graphql/core/migrations/migrations-setup.html"&gt;seção&lt;/a&gt; de &lt;em&gt;Migrations &amp;amp; Metadata (CI/CD)&lt;/em&gt; na documentação do &lt;em&gt;Hasura GraphQL Engine&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Digamos então que esta tabela foi preenchida com alguns dados de estudantes:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5xCgaQSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1goo3fgozuc3tasrzz1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5xCgaQSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1goo3fgozuc3tasrzz1.png" alt='Tabela com três colunas chamadas: "id", "name", "score" e alguns dados preenchidos' width="277" height="130"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No meio do caminho, percebemos que os dados das notas localizados na coluna &lt;code&gt;score&lt;/code&gt;, não poderiam ser textos, pois gostaríamos de fazer algumas aritméticas com eles. Entretanto, não podemos mudar estes dados caso estejam em uso no ambiente de produção! (Suponha que você tenha milhares de dados importantes e não pode perdê-los)&lt;/p&gt;

&lt;p&gt;O que fazer então? No ambiente de desenvolvimento, iremos &lt;strong&gt;criar uma coluna&lt;/strong&gt; para acomodar esses dados, vamos nomeá-la &lt;code&gt;score_decimal&lt;/code&gt;, pois representa a nota em número decimal permitindo operações aritméticas. Vá até à aba &lt;em&gt;Modify&lt;/em&gt; da tabela &lt;code&gt;students&lt;/code&gt; e clique em &lt;em&gt;Add new column&lt;/em&gt;. Vamos definir como uma coluna &lt;code&gt;Numeric&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_-ydEvDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6iop7eaqomy9s2yt4u2o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_-ydEvDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6iop7eaqomy9s2yt4u2o.png" alt="Aba de Modify selecionada e com opção de adicionar nova coluna aparecendo com dados preenchidos" width="529" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Uma vez criada a nova coluna, podemos fazer a migração dos dados da coluna &lt;code&gt;score&lt;/code&gt; para &lt;code&gt;score_decimal&lt;/code&gt;. Para isso ser possível, vamos usar a seção de &lt;code&gt;SQL&lt;/code&gt; que fica logo abaixo das tabelas da nossa base de dados.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7MQiWUBp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7euulbm2lsd9aq5v9gm2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7MQiWUBp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7euulbm2lsd9aq5v9gm2.png" alt="Bancos de dados sendo exibidos na aba de cima e logo abaixo a aba de SQL" width="258" height="188"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nessa aba você pode rodar código SQL diretamente contra o banco de dados selecionado, podendo marcar estas consultas como migrações ou não. Dependendo do código, o Hasura talvez seja inteligente para identificar ser uma alteração estrutural ou de dados e marque como migração automaticamente, então sempre preste atenção antes de rodar a consulta para ver se a caixa de "&lt;em&gt;This is a migration&lt;/em&gt;" está habilitada.&lt;/p&gt;

&lt;p&gt;Colocando a consulta que converte as notas no campo de texto, podemos rodar sem adicionar como migração com intenção de verificar se a consulta está sendo executada como descrita. Após a verificação, podemos ativar a caixa de migração e escrever um nome para ela, usei um nome descritivo &lt;code&gt;cast_students_score_to_decimal_migration&lt;/code&gt;.&lt;br&gt;
Esta é a consulta feita para converter os dados:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt;
&lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;score_decimal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;CAST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="nb"&gt;DECIMAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cDPAoVL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7izhheuev7kw4gpd6ugo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cDPAoVL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7izhheuev7kw4gpd6ugo.png" alt="Aba SQL com consulta preenchida no campo de texto e função de migração ativada" width="534" height="515"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OBSERVAÇÃO: sempre tome cuidado para fazer alterações estruturais que mudam categorias de campos, então faça por partes e vá atualizando a camada de visualização (front-end), caso sejam utilizadas, para mudar o novo tipo sem quebrar a aplicação para os clientes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Após rodar a atualização dos dados, podemos renomear as colunas e deletar a antiga. O nome usado para migração foi &lt;code&gt;rename_columns_and_remove_old_migration&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt; &lt;span class="k"&gt;RENAME&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="nv"&gt;"score"&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="nv"&gt;"score_text"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt; &lt;span class="k"&gt;RENAME&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="nv"&gt;"score_decimal"&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="nv"&gt;"score"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt; &lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="nv"&gt;"score_text"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LMb6WBo3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m85kjzac5sndhxbljb4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LMb6WBo3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m85kjzac5sndhxbljb4k.png" alt="Aba SQL com consulta preenchida no campo de texto e função de migração ativada" width="469" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com isso, finalizamos nossa modificação para executarmos nossas operações aritméticas, mas acabamos com algumas migrações separadas que podem ser unidas através de uma operação de &lt;code&gt;squash&lt;/code&gt;, pois podem ser executadas todas juntas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#processo-de-fazer-um-squash"&gt;
  &lt;/a&gt;
  Processo de fazer um squash
&lt;/h2&gt;

&lt;p&gt;Para que o processo de &lt;em&gt;squash&lt;/em&gt; das migrações ocorra "corretamente" (sempre pode ocorrer algum erro inesperado no meio do processo), precisamos garantir que algumas etapas sejam seguidas. Vou listar algumas delas para evitar erros desse processo.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Gravar as migrações feitas no repositório&lt;/li&gt;
&lt;li&gt;Garantir que as migrações podem ser feitas e desfeitas sem erros&lt;/li&gt;
&lt;li&gt;Gravar as migrações completas&lt;/li&gt;
&lt;li&gt;Fazer o &lt;em&gt;squash&lt;/em&gt; das migrações&lt;/li&gt;
&lt;li&gt;Marcar a migração como executada&lt;/li&gt;
&lt;li&gt;Grave as alterações&lt;/li&gt;
&lt;li&gt;(Opcional) Modifique a migração comprimida como desejar (e grave as alterações)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-gravar-as-migra%C3%A7%C3%B5es-feitas"&gt;
  &lt;/a&gt;
  1. Gravar as migrações feitas
&lt;/h3&gt;

&lt;p&gt;Para mantermos controle das nossas migrações e não perdermos o progresso feito, gravamos as alterações em um commit do versionador, podemos então prosseguir em alterá-las sem risco de perder o que já fizemos, esse foi um dos erros que cometi anteriormente, não ter salvo no versionador.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-garanta-que-as-migra%C3%A7%C3%B5es-podem-ser-feitas-e-desfeitas-sem-erros"&gt;
  &lt;/a&gt;
  2. Garanta que as migrações podem ser feitas e desfeitas sem erros
&lt;/h3&gt;

&lt;p&gt;Com as migrações salvas no repositório, podemos começar a modificação das que possuem arquivos &lt;code&gt;down.sql&lt;/code&gt; incompletos. Muitas das alterações que executamos no banco de dados, nem sempre refletem nos arquivos por serem modificações complexas, como a renomeação das colunas e deleção de coluna na mesma migração. Por exemplo, a última migração, o arquivo &lt;code&gt;down.sql&lt;/code&gt; foi preenchido desta forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Could not auto-generate a down migration.&lt;/span&gt;
&lt;span class="c1"&gt;-- Please write an appropriate down migration for the SQL below:&lt;/span&gt;
&lt;span class="c1"&gt;-- ALTER TABLE students RENAME COLUMN "score" TO "score_text";&lt;/span&gt;
&lt;span class="c1"&gt;-- ALTER TABLE students RENAME COLUMN "score_decimal" TO "score";&lt;/span&gt;
&lt;span class="c1"&gt;-- ALTER TABLE students DROP COLUMN "score_text";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para que a migração funcione na volta, ou seja, remover as mudanças, vamos inverter os comandos feitos no &lt;code&gt;up.sql&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="nv"&gt;"score_text"&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt; &lt;span class="k"&gt;RENAME&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="nv"&gt;"score"&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="nv"&gt;"score_decimal"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt; &lt;span class="k"&gt;RENAME&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="nv"&gt;"score_text"&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="nv"&gt;"score"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Faremos o mesmo com a migração que cria a nova coluna e inverteremos o comando.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="nv"&gt;"public"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;"students"&lt;/span&gt; &lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="nv"&gt;"score_decimal"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com isso, podemos usar as &lt;em&gt;flags&lt;/em&gt; de &lt;code&gt;--up&lt;/code&gt; e &lt;code&gt;--down&lt;/code&gt; do &lt;code&gt;hasura migrate apply&lt;/code&gt;. O comando altera o banco de dados conforme os &lt;code&gt;.sql&lt;/code&gt; definidos nas migrações. Se você relacionar os arquivos aos seus respectivos comandos, fará mais sentido, o comando que usa &lt;code&gt;--down&lt;/code&gt; vai remover as alterações de migrações já aplicadas, enquanto o &lt;code&gt;--up&lt;/code&gt; irá aplicá-las (o &lt;code&gt;--up&lt;/code&gt; é aplicado por padrão se não for definido). Para remover somente algumas, use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;hasura migrate apply &lt;span class="nt"&gt;--down&lt;/span&gt; &amp;lt;N&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No comando, &lt;em&gt;N&lt;/em&gt; é a quantidade de migrações que serão removidas. Use &lt;code&gt;hasura migrate apply --help&lt;/code&gt; para mais detalhes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observação: se você executou alguma migração e ela falhou, caso tenha mais de um comando SQL no mesmo arquivo, tente corrigir pela aba &lt;code&gt;SQL&lt;/code&gt; (sem fazer uma nova), corrigi-la e tentar novamente.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-grave-as-migra%C3%A7%C3%B5es-completas"&gt;
  &lt;/a&gt;
  3. Grave as migrações completas
&lt;/h3&gt;

&lt;p&gt;Dado que você testou suas migrações, e elas estão funcionando, grave novamente em um commit, agora com as migrações completas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-fazer-o-squash-das-migra%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  4. Fazer o &lt;em&gt;squash&lt;/em&gt; das migrações
&lt;/h3&gt;

&lt;p&gt;Com todas as migrações completas e funcionando ida e volta, podemos agora fazer o &lt;em&gt;squash&lt;/em&gt; delas, ou seja, comprimi-las em uma única só migração, para isso, vamos rodar o comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;hasura migrate squash &lt;span class="nt"&gt;--from&lt;/span&gt; &amp;lt;num_migracao&amp;gt; &lt;span class="nt"&gt;--name&lt;/span&gt; &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ele executa a compressão dos arquivos das migrações para nós. No meu caso, farei dessa forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;hasura migrate squash &lt;span class="nt"&gt;--from&lt;/span&gt; 1638852925395 &lt;span class="nt"&gt;--name&lt;/span&gt; &lt;span class="s2"&gt;"changing_column_type"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Este comando irá a partir da migração de prefixo &lt;code&gt;1638852925395&lt;/code&gt; juntar todas em uma única, de nome &lt;em&gt;"changing_column_type"&lt;/em&gt;. Recomendo você deletar as migrações anteriores pois já estão salvas no repositório.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-marcar-a-migra%C3%A7%C3%A3o-como-executada"&gt;
  &lt;/a&gt;
  5. Marcar a migração como executada
&lt;/h3&gt;

&lt;p&gt;Assim que criamos a nossa nova migração comprimida como resultado da operação, &lt;strong&gt;caso as migrações anteriores não estivessem aplicadas no banco de dados&lt;/strong&gt;, vamos rodar o comando para marcar como se a migração que acabamos de gerar, já tivesse sido aplicada:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;hasura migrate apply &lt;span class="nt"&gt;--skip-execution&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lembrando que este comando só deve ser executado se efetivamente aplicamos as alterações das outras migrações no banco de dados, caso contrário, rode o comando sem a &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;--skip-execution&lt;/code&gt; para aplicar normalmente.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-grave-as-altera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  6. Grave as alterações
&lt;/h3&gt;

&lt;p&gt;Feito isso, grave novamente as alterações na versão de controle do repositório para não perder suas alterações.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-opcional-modifique-a-migra%C3%A7%C3%A3o-comprimida-como-desejar-e-grave-as-altera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  7. (Opcional) Modifique a migração comprimida como desejar (e grave as alterações)
&lt;/h3&gt;

&lt;p&gt;Se a sua migração possui muitos comandos, avalie o arquivo e verifique se, dependendo das alterações feitas, você pode simplificar o código SQL executado. Por exemplo, você cria uma tabela, e depois em outra migração adiciona uma coluna, caso você não tenha adicionado nenhum dado no meio do caminho, ou não foi para produção ainda, coloque diretamente a coluna na criação da tabela, o que simplificará o código.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Espero que estas instruções sirvam de guia para que não cometa os mesmos erros que eu durante o projeto que estava desenvolvendo. Tentei colocar o máximo de detalhes no passo a passo e seus motivos. &lt;/p&gt;

&lt;p&gt;Essas instruções podem ser replicadas em outros projetos, mesmo que não sigam a mesma tecnologia, mas se seus conceitos forem parecidos, é possível. Caso você não aplique imediatamente, ao menos espero que tenha aprendido algo com o que demonstrei neste artigo.&lt;/p&gt;

&lt;p&gt;Qualquer crítica positiva que possa incrementar este artigo é bem-vinda! Compartilhe com outras pessoas que precisam deste conteúdo!&lt;/p&gt;

&lt;p&gt;Obrigado por sua atenção.&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>database</category>
      <category>hasura</category>
      <category>migrations</category>
    </item>
    <item>
      <title>Github Copilot offends developers with this joke</title>
      <author>Virej Dasani</author>
      <pubDate>Wed, 15 Dec 2021 15:41:18 +0000</pubDate>
      <link>https://dev.to/virejdasani/github-copilot-offends-developers-with-this-joke-4p78</link>
      <guid>https://dev.to/virejdasani/github-copilot-offends-developers-with-this-joke-4p78</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/SFBSbAJBTOM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>ai</category>
      <category>github</category>
    </item>
    <item>
      <title>Scrape Your First Website in Minutes with Python</title>
      <author>Saji Wang</author>
      <pubDate>Wed, 15 Dec 2021 15:33:02 +0000</pubDate>
      <link>https://dev.to/sewangco/scrape-your-first-website-in-minutes-with-python-2lo7</link>
      <guid>https://dev.to/sewangco/scrape-your-first-website-in-minutes-with-python-2lo7</guid>
      <description>&lt;p&gt;Ever felt the need to pull out data from a website? What would you do? Visit the sites one after the other and gather information?&lt;/p&gt;

&lt;p&gt;Well that would work if you have a page or two. However, if you have lots of them, manual extraction will become too difficult a task; this is where web scraping comes to the rescue!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-is-web-scraping"&gt;
  &lt;/a&gt;
  What is web scraping?
&lt;/h3&gt;

&lt;p&gt;Web scraping, as the name suggests, is a method of extracting data from web pages in an automated fashion. Scraping is super helpful in price comparisons, R&amp;amp;D, gathering data from social media, job listings, and more.&lt;/p&gt;

&lt;p&gt;Many methods can be used to perform web scraping such as online services, APIs, or even writing your own script. And that’s why we are here. This article will teach you the basics of how to scrape data from the web. Before we get into that, let’s take a quick look at why we would even want to scrape data from the web.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#why-do-we-need-web-scraping"&gt;
  &lt;/a&gt;
  Why do we need web scraping?
&lt;/h3&gt;

&lt;p&gt;Websites, in general, have huge quantities of information. This information is mostly unstructured or cluttered. When users visit a website they only need a small percentage of what’s available. &lt;/p&gt;

&lt;p&gt;While they can manually access it, the process is quite cumbersome, especially when repetition is involved (given that the data is dynamic and updated frequently). Hence, the need for web scraping.  &lt;/p&gt;

&lt;p&gt;Once the script is set up for a particular webpage, it can be executed any number of times to extract data and use it as required.&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#web-scraping-demo"&gt;
  &lt;/a&gt;
  Web scraping demo
&lt;/h3&gt;

&lt;p&gt;This  script will extract weather data from  a webpage and save it to a &lt;code&gt;.csv&lt;/code&gt; file. We will be using the following libraries to help us with the scraping and managing the extracted data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Requests - This library is required to send an HTTP request to the web page. This will give us access to the HTML content of the webpage we want to scrape.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Beautiful Soup - This library gives us functions to help extract data from the HTML content we receive when we send an HTTP request.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pandas - This library helps us manage the data that has been extracted. In this case we will use it to save our data to a &lt;code&gt;.csv&lt;/code&gt; file.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In case you don’t have the aforementioned libraries installed, follow the commands given below to install them:&lt;/p&gt;

&lt;p&gt;**Installing BeautifulSoup&lt;br&gt;
&lt;code&gt;pip install beautifulsoup4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing requests&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;pip install requests&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing Pandas&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;pip install pandas&lt;/code&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#writing-the-code"&gt;
  &lt;/a&gt;
  Writing the Code
&lt;/h3&gt;

&lt;p&gt;Once you have the libraries installed, follow the steps given below to scrape data from web in python3&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Start by importing all the libraries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Send an HTTP request to the webpage using its URL. Make sure the response code is 200 which means the request was successful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the BeautifulSoup function to extract the raw HTML from the response received.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;From the raw HTML, extract the data we need using different selectors. The selectors used here are ‘class’ and ‘id’.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save the extracted data into a pandas dataframe in the form of a python dictionary.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save the dataframe to a csv file. Note: We are using the utf-16BE encoding to render the degree symbol properly in the csv file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Once you have your code ready, you can deploy it directly to the cloud using &lt;a href="https://link.codesphere.com/GX"&gt;Codesphere&lt;/a&gt;. Codesphere let’s you avoid the hassle of config so that you can spend more time doing what you do best: Actually coding!&lt;/p&gt;

&lt;p&gt;Let us know what you’re going to scrape down below!&lt;/p&gt;

&lt;p&gt;Till then, happy coding.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Setting up TailwindCSS 3.0 on a Laravel project</title>
      <author>Erika Heidi</author>
      <pubDate>Wed, 15 Dec 2021 15:31:43 +0000</pubDate>
      <link>https://dev.to/sourcegraph/setting-up-tailwindcss-30-on-a-laravel-project-1cb8</link>
      <guid>https://dev.to/sourcegraph/setting-up-tailwindcss-30-on-a-laravel-project-1cb8</guid>
      <description>&lt;p&gt;In the &lt;a href="https://dev.to/sourcegraph/creating-a-new-laravel-application-with-sail-and-docker-no-php-required-4c2n"&gt;first part of our series&lt;/a&gt;, we saw how to bootstrap a new Laravel application with &lt;a href="https://laravel.com/docs/8.x/sail"&gt;Sail&lt;/a&gt; and Docker. This allows you to develop a Laravel application without having to set up a PHP development environment on your system.&lt;/p&gt;

&lt;p&gt;With the base application up and running, the second part of our livestreaming series was focused on setting up a basic blog layout using TailwindCSS. In this post, you'll see a recap with all steps executed during the live session, so that you can reproduce them at your own pace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preparation"&gt;
  &lt;/a&gt;
  Preparation
&lt;/h2&gt;

&lt;p&gt;Before moving along, make sure you have followed all steps in the &lt;a href="https://dev.to/sourcegraph/creating-a-new-laravel-application-with-sail-and-docker-no-php-required-4c2n"&gt;first tutorial of the series&lt;/a&gt; in order to bootstrap your Laravel application and development environment. This will require you to have Docker, Curl, and Git installed on your system.&lt;/p&gt;

&lt;p&gt;If you haven't yet, bring your environment up with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./vendor/bin/sail up &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will start up your environment and keep it running in the background. Your Laravel application should now be available at &lt;code&gt;http://localhost&lt;/code&gt;. Open this URL on your browser and you'll see a page like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--umxqQ4rk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoci8k1kpbpbcr12rur7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--umxqQ4rk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoci8k1kpbpbcr12rur7.png" alt="Laravel welcome page" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For convenience, you may want to create an alias to execute Sail from the application's root directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;ln&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; ./vendor/bin/sail sail
&lt;span class="nb"&gt;chmod&lt;/span&gt; +x sail
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can run Sail like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./sail artisan
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will run Artisan on the application container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-installing-and-configuring-tailwindcss-3-with-laravel"&gt;
  &lt;/a&gt;
  1. Installing and configuring TailwindCSS 3 with Laravel
&lt;/h2&gt;

&lt;p&gt;Start by installing the frontend dependencies via NPM. The &lt;code&gt;npm&lt;/code&gt; command is available as a shortcut with Laravel Sail:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./sail npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, install TailwindCSS with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./sail npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; tailwindcss postcss autoprefixer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, run the following command to generate your Tailwind configuration file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./sail npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you'll need to tell Laravel that you want to compile Tailwind resources using Laravel Mix. Open the &lt;code&gt;webpack.mix.js&lt;/code&gt; file (located at the root of your application) and include &lt;code&gt;tailwindcss&lt;/code&gt;  as a postCss plugin. This is how your &lt;code&gt;mix.js&lt;/code&gt; definition should look like when you're finished:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;webpack.mix.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;mix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resources/js/app.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public/js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postCss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resources/css/app.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public/css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tailwindcss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you should update your &lt;code&gt;tailwind.config.js&lt;/code&gt; file to include the paths to all your template resources. The following example will include all blade templates and JS files in your &lt;code&gt;resources&lt;/code&gt; folder:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;tailwind.config.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./resources/**/*.blade.php&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./resources/**/*.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to import all &lt;code&gt;@tailwindcss&lt;/code&gt; component layers into your application's CSS. Open the &lt;code&gt;resources/css/app.css&lt;/code&gt; file and include the following content:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;resources/css/app.css&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The configuration is done. You can now run the command that will watch for changes in your frontend resources and build assets in real time while you develop your application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./sail npm run watch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will block your terminal. You can stop it at any time with &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;C&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-creating-a-basic-blog-template"&gt;
  &lt;/a&gt;
  2. Creating a basic blog template
&lt;/h2&gt;

&lt;p&gt;Now that your setup is complete, you can start building the frontend of your application. For this demo, we're building a basic blog template with a main column and a sidebar on the right.&lt;/p&gt;

&lt;p&gt;A good idea to get started is to search for a &lt;a href="https://www.sitepoint.com/a-basic-html5-template/"&gt;basic HTML5 boilerplate code / template&lt;/a&gt; and build from there.&lt;/p&gt;

&lt;p&gt;After some experimentation, we built the following template during the &lt;a href="https://twitch.tv/sourcegraph"&gt;livestreaming session&lt;/a&gt;. Save this content to a file named &lt;code&gt;index.blade.php&lt;/code&gt; in your &lt;code&gt;resources/views&lt;/code&gt; folder:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;resources/views/index.blade.php&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My DEV Blog&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"My DEV Blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Sourcegraph"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"A headless blog in Laravel"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://github.com/sourcegraph-community/laravel-dev-blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"A demo Laravel blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ asset('css/app.css') }}"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-gradient-to-r from-blue-600 via-pink-500 to-purple-900"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container text-white mx-auto mt-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid grid-cols-3 gap-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-3xl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My DEV Blog&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-span-2 text-right"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                menu
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container mx-auto px-6 py-10 bg-gray-100 my-10 text-gray-600 rounded-md shadow-md"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid grid-cols-4 gap-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-span-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-10"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://picsum.photos/1000/420"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Post header image"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"rounded-lg my-4"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-3xl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is the title of my first post&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

                    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is the description bnablab alba lbal ablabla blab al.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-10"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://picsum.photos/1000/420?sjdj"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Post header image"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"rounded-lg my-4"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-3xl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is the title of my second post&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

                    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is the description bnablab alba lbal ablabla blab al.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-gray-400 text-xl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Categories&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Linux&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;PHP&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Development&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Devops&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Career&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see from the code, apart from the &lt;code&gt;asset&lt;/code&gt; call, the rest is purely HTML and CSS styled with TailwindCSS descriptive classes.&lt;/p&gt;

&lt;p&gt;After saving the template, open your &lt;code&gt;routes/web.php&lt;/code&gt; file and update your main route definition so that it renders your new template instead of the default Laravel welcome page. This is how the file should look like once you're done:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;routes/web.php&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the file. If you reload your browser now, you should see a page like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pvr_0sbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54zmfaypzgtry344muso.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pvr_0sbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54zmfaypzgtry344muso.png" alt="screenshot application with basic blog template built with tailwind css" width="880" height="677"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a later part of this series, we'll turn this skeleton into an actual dynamic template, using more advanced Blade features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Installing TailwindCSS 3.0 within a Laravel project requires a few configuration steps, but once you get the build command running, you can greatly speed up your frontend development process by making use of the advanced features of Tailwind 3, including just-in-time processing for super fast build times, as well as many other &lt;a href="https://tailwindcss.com/blog/tailwindcss-v3"&gt;features included in the newest version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next part of this series, we'll move to the backend and create an Artisan command to import posts from a DEV user profile.&lt;/p&gt;

&lt;p&gt;You can follow &lt;a href="https://twitch.tv/sourcegraph"&gt;Sourcegraph on Twitch&lt;/a&gt; to be notified when we go live.&lt;/p&gt;

</description>
      <category>css</category>
      <category>php</category>
      <category>laravel</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Windows 11 Taskbar sucks [Solved]</title>
      <author>Costin Manda</author>
      <pubDate>Wed, 15 Dec 2021 15:27:28 +0000</pubDate>
      <link>https://dev.to/costinmanda/windows-11-taskbar-sucks-solved-1jo2</link>
      <guid>https://dev.to/costinmanda/windows-11-taskbar-sucks-solved-1jo2</guid>
      <description>&lt;p&gt;Original post at: &lt;a href="https://siderite.dev/blog/windows-11-taskbar-sucks-solved"&gt;https://siderite.dev/blog/windows-11-taskbar-sucks-solved&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today I saw a Windows Update message that I can install Windows 11 on my computer. Great! I let it install and all went without a hitch. I don't see any problems with it, my software works fine, the only problem is that the taskbar icons are in the middle of the screen rather than to the left and it has that default setting of huge annoying icons instead of text, grouping all windows of the same type and so on. Simple, just go to settings, right?&lt;/p&gt;

&lt;p&gt;Wrong! Windows 11 now comes with a taskbar with LESS options than before. If you continue using it you will have to live with grouped apps under huge icons, with no recourse whatsoever!&lt;/p&gt;

&lt;p&gt;Luckily, &lt;a href="https://www.pcworld.com/article/549576/the-windows-11-taskbar-is-an-annoying-step-backward.html"&gt;Michael Crider from PcWorld&lt;/a&gt; to the rescue. Just download the &lt;a href="https://github.com/valinet/ExplorerPatcher/releases/latest/download/ep_setup.exe"&gt;setup&lt;/a&gt; to &lt;a href="https://github.com/valinet/ExplorerPatcher"&gt;Explorer Patcher&lt;/a&gt; from GitHub and run it. The Windows 10 taskbar will be back. Just right click on it and select &lt;em&gt;Properties&lt;/em&gt; and you can customize it even better than the old one! Cheers, Michael!&lt;/p&gt;

</description>
      <category>software</category>
      <category>misc</category>
    </item>
  </channel>
</rss>
