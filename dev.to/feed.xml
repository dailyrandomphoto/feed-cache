<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To Automate App Releases using Fastlane and SemVer for Hybrid Applications</title>
      <author>Jeiman Jeya</author>
      <pubDate>Tue, 10 Aug 2021 13:22:23 +0000</pubDate>
      <link>https://dev.to/jeiman/how-to-automate-app-releases-using-fastlane-and-semver-for-hybrid-applications-24m0</link>
      <guid>https://dev.to/jeiman/how-to-automate-app-releases-using-fastlane-and-semver-for-hybrid-applications-24m0</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sWrwbzO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q875yqvd5hutjcw5ws6b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sWrwbzO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q875yqvd5hutjcw5ws6b.png" alt="Placeholder image for article"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This tool/implementation is useful for when you have both iOS and Android binary applications residing within the same repository (usually a &lt;strong&gt;React Native application&lt;/strong&gt;) or hybrid app development tools which produce iOS and Android apps. However, it can be customisable to your needs with a little re-configuration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#the-story"&gt;
  &lt;/a&gt;
  The Story
&lt;/h1&gt;

&lt;p&gt;Imagine if we could automate the entire app versioning process for our mobile applications by just typing in whether you want to bump it by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Major&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minor&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;or &lt;strong&gt;Patch&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Imagine if you don’t have to worry about the app versioning process of knowing what is already in production and what version we need to bump it to?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lo and behold, the App Release Management (ARM) tool.&lt;/strong&gt; 🎉&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Semantic versioning MAJOR, MINOR, and PATCH is the de facto standard you use to version your applications. Please refer to this &lt;a href="https://semver.org/"&gt;link&lt;/a&gt; to find out more about SemVer standards.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#fancy-word-but-what-does-it-actually-do"&gt;
  &lt;/a&gt;
  Fancy word, but what does it actually do?
&lt;/h1&gt;

&lt;p&gt;It pretty much does what is mentioned above. The process is as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It will fetch the latest versions from TestFlight and Google Play Console respectively.&lt;/li&gt;
&lt;li&gt;It will show you a summary of what the versions are.&lt;/li&gt;
&lt;li&gt;If both Android and iOS match, the tool will select either one of them to use as the base of bumping the version.&lt;/li&gt;
&lt;li&gt;The tool will prompt you whether you would like to bump it based on major, minor, or patch&lt;/li&gt;
&lt;li&gt;Based on the input, the tool will run a SemVer operation in calculating the next iteration in the version and display the results for you.&lt;/li&gt;
&lt;li&gt;If you’re happy with the result, you may press yes to proceed.&lt;/li&gt;
&lt;li&gt;It will update the following files for you:

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;android/app/build.gradle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ios/ProjectName.xcodeproj/project.pbxproj&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Operation completed!&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#it-all-looks-fancy-but-why-this-approach"&gt;
  &lt;/a&gt;
  It all looks fancy, but why this approach?
&lt;/h1&gt;

&lt;p&gt;Well, imagine if you are a product owner or a new engineer who is new to the application code and is required to manage the App Releases. This tool will aid them in completing their task with ease, without worrying about configuring the wrong version code bump by accident.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ok-cool-how-do-i-set-it-up"&gt;
  &lt;/a&gt;
  Ok cool, how do I set it up?
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Please refer to the &lt;a href="https://github.com/jeiman/devops-fun/tree/main/development/app-release-management-tool"&gt;documentation README&lt;/a&gt; file for detailed instructions on how to set up the tool.&lt;/li&gt;
&lt;li&gt;Clone the &lt;a href="https://github.com/jeiman/devops-fun"&gt;devops-fun&lt;/a&gt; repository.&lt;/li&gt;
&lt;li&gt;Once completed, navigate to &lt;strong&gt;development &amp;gt; app-release-management-tool&lt;/strong&gt; folder.&lt;/li&gt;
&lt;li&gt;Ensure that the &lt;code&gt;.env&lt;/code&gt; file is present before proceeding any further. Refer to the README file for more information.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;fastlane&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;Choose Option 1.&lt;/li&gt;
&lt;li&gt;The rest are pretty self-explanatory thereafter.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#what-if-i-want-to-manually-bump-the-version-via-a-tool"&gt;
  &lt;/a&gt;
  What if I want to manually bump the version via a tool?
&lt;/h1&gt;

&lt;p&gt;You may run the &lt;code&gt;bump-version.sh&lt;/code&gt; and pass in a version code as an argument: &lt;code&gt;./development/app-release-management-tool/bump-version.sh 3.2.0&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-does-it-look-like"&gt;
  &lt;/a&gt;
  What does it look like?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pJUYffuX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56d2r8lq56xqfaxan4gd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJUYffuX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56d2r8lq56xqfaxan4gd.png" alt="CLI tool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Based on the image above, the following actions occur:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It will do a check against your iOS TestFlight build number and Google App Version and identify if the versions match (&lt;em&gt;Please refer to the &lt;a href="https://github.com/jeiman/devops-fun/blob/main/development/app-release-management-tool/README.md"&gt;README.md&lt;/a&gt; file on how to set up a service connection to the respective stores in order to retrieve the app details programmatically&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;If they do, it will display your current version in the App stores and will ask you for input, whether you want to bump the &lt;strong&gt;major&lt;/strong&gt;, &lt;strong&gt;minor,&lt;/strong&gt; or &lt;strong&gt;patch&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Based on your input, it will use the &lt;code&gt;semver.sh&lt;/code&gt; script to perform the necessary version bump according to the Semantic Versioning standards.&lt;/li&gt;
&lt;li&gt;If they don't match up, you'll be defaulted to using the &lt;code&gt;bump-version.sh&lt;/code&gt; which requires manual input of your SemVer for your application - ie &lt;code&gt;./bump-version.sh 2.2.0&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this article has proven beneficial and useful to your release management process. If you have any inquiries, please reach out to me. Happy automating your release process! Do leave a comment or recommendations on improving the tool.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jeiman/devops-fun"&gt;https://github.com/jeiman/devops-fun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jeiman/devops-fun/tree/main/development"&gt;https://github.com/jeiman/devops-fun/tree/main/development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semver.org/"&gt;https://semver.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jontejada.com/blog/assets/semver02.png"&gt;https://jontejada.com/blog/assets/semver02.png&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fsaintjacques/semver-tool"&gt;https://github.com/fsaintjacques/semver-tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>fastlane</category>
      <category>reactnative</category>
      <category>automation</category>
      <category>hybridapps</category>
    </item>
    <item>
      <title>Add Sign in with Apple to your React App!</title>
      <author>Ali Spittel</author>
      <pubDate>Tue, 10 Aug 2021 13:22:21 +0000</pubDate>
      <link>https://dev.to/aspittel/add-sign-in-with-apple-to-your-react-app-2occ</link>
      <guid>https://dev.to/aspittel/add-sign-in-with-apple-to-your-react-app-2occ</guid>
      <description>&lt;p&gt;AWS Amplify added support for implementing Sign in with Apple to your apps! In this tutorial we'll start from zero by creating an Apple Developer account, then enable Sign in with Apple using the Amplify Admin UI, finally we'll add it to a React app!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BxNpGkMyGes"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.apple.com/programs/"&gt;Create an Apple Developer account&lt;/a&gt; - note that this costs $99 and takes up to 48 hours! You also may need to create a &lt;a href="https://developer.apple.com/support/certificates/"&gt;development certificate&lt;/a&gt; in your account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to the &lt;a href="https://console.aws.amazon.com/amplify"&gt;AWS Amplify Console&lt;/a&gt; and create a new backend app. Choose a name for your project, and then open up the Admin UI once your project is initialized.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click "Enable authentication" in the Admin UI. Under "Add a Login Mechanism" choose "Sign in with Apple". Don't fill anything out yet though!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, go back to the &lt;a href="https://developer.apple.com/account/resources/identifiers/list"&gt;Apple Developer Portal&lt;/a&gt; and under your profile choose "Certificates, Identifiers &amp;amp; Profiles." Go to the identifiers page through the left-hand navigation bar and then click the plus button.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the "Register a new identifier" page, keep the selection on "App IDs", then click continue. Then choose "App" on the next page and continue again. Choose a description for your app, for example "Amplify Sign in with Apple Practice App" and then use one of your domains under the Bundle ID, for example &lt;code&gt;com.welearncode.siwa&lt;/code&gt;. Scroll down and select "Sign in with Apple". Then "Continue". Finally, review and register.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, we'll register a service ID. Go back to the Identifiers page, then on the righthand dropdown choose "Services IDs" and click the plus button. On the next page, keep "Services IDs" selected, then click "Continue". Choose a description for your service, for example "Amplify Sign in with Apple Practice App". Under "Identifier" use what you used for Bundle ID above, but this time with a .sid at the end - for example &lt;code&gt;com.welearncode.siwa.sid&lt;/code&gt;. Then click register on the next page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go back to the "Services IDs" page (you should be redirected there!) and click on your created service ID. Check the box under "Enabled", then click the "Configure" button. On your Amplify Admin UI page where you're configuring Sign in with Apple, you should see a redirect URL. Copy and paste it into both "Domains and Subdomains" and "Return URLs". In the first box, "Domains and Subdomains" remove the "https://" and "/oauth2/idpresponse" from the url, just leaving the subdomains and amazoncognito.com. Then click "Next" and "Done".&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--__-T04QH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/siwa/admin-ui-url.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--__-T04QH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/siwa/admin-ui-url.png" alt="The Admin UI interface with URL"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2i13P6ME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/siwa/siwa-form.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2i13P6ME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/siwa/siwa-form.png" alt="The sign in with Apple interface with correct urls"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Last thing to register on the Apple side -- a Key! Select "Key" on the left-hand dropdown and then click the plus button. Name your key and select "Sign in with Apple" below. Click the "configure" button next to "Sign in with Apple". Choose your App ID, then click save. Then continue, and register. Download the key and save it to a place you'll remember, because we'll need to use it in the future!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now we'll go back to the Admin UI. We'll now fill out the form here! Your Team ID is the App ID you created -- if you go to the "Identifiers" page and select your app, choose the App ID Prefix on your app's page. Your Key ID can be found by navigating to the Key page, selecting your key, and then it will be under "Key ID". Finally your Private Key certificate is that file you downloaded in the last step -- go ahead and upload that. Finally choose a redirect URL -- in development "&lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;" or similar for your chosen port should work! Then deploy!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now you can integrate Sign in with Apple into your app. We'll create a very bare bones React app for the sake of this tutorial. First, create a React app.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app siwa-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, install the AWS Amplify libraries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i aws-amplify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pull down your Amplify app -- you can find the command to do this for your app on the upper right-hand side of the Admin UI under "Local setup instructions".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;amplify pull --appId your-app-id --envName staging
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may be asked some questions about your app which you should be able to answer with all the defaults!&lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;index.js&lt;/code&gt; file, add the following in order to configure your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// index.js
import awsconfig from './aws-exports'
import Amplify from 'aws-amplify'
Amplify.configure(awsconfig)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, clear out the default &lt;code&gt;App.js&lt;/code&gt; file, and replace it with an empty React component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import './App.css'
import { useEffect, useState } from 'react'

function App () {
  return &amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;
}

export default App
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's implement the UI first: we'll add a conditional based on if a user is signed in or not and render either a sign in or sign out button. We'll import &lt;code&gt;Auth&lt;/code&gt; from 'aws-amplify' which will help us implement the functionality.&lt;/p&gt;

&lt;p&gt;We'll create a user in state that's set to null to start out. Then if that user is signed in, we'll add a sign out button and render information about that user. If there isn't a user, we'll render a sign in button. We'll use Amplify's &lt;code&gt;federatedSignIn&lt;/code&gt; with &lt;code&gt;SignInWithApple&lt;/code&gt;. Right now we aren't setting a user, but you can go ahead and sign in with just this code!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import './App.css'
import { useState, useEffect } from 'react'
import { Auth } from 'aws-amplify'

function App () {
  const [user, setUser] = useState(null)

  if (user) {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;User: {JSON.stringify(user.attributes)}&amp;lt;/p&amp;gt;
        &amp;lt;button onClick={() =&amp;gt; Auth.signOut()}&amp;gt;Sign Out&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  } else {
    return (
      &amp;lt;button onClick={() =&amp;gt; Auth.federatedSignIn({
        provider: 'SignInWithApple'
      })}
      &amp;gt;
        Sign In with Apple
      &amp;lt;/button&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, above the returns we'll add two more functions above the conditional. First, a &lt;code&gt;getUser&lt;/code&gt; function that returns the current user. Second, inside a &lt;code&gt;useEffect&lt;/code&gt; we'll listen for auth to change, for example if someone signs in or out. If the user signs in using the hosted UI, then we'll get the user and set state with it.&lt;/p&gt;

&lt;p&gt;If they sign out, we'll set the user back to null.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function getUser () {
 return Auth.currentAuthenticatedUser()
}

useEffect(() =&amp;gt; {
 Hub.listen('auth', ({ payload: { event, data } }) =&amp;gt; {
   if (event === 'cognitoHostedUI') {
     getUser().then(userData =&amp;gt; setUser(userData))
   } else if (event === 'signOut') {
     setUser(null)
   } else if (event === 'cognitoHostedUI_failure') {
     console.error('Sign in failure')
   }
 })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we've implemented Sign in with Apple on a React app using Amplify 🍎✨!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>aws</category>
    </item>
    <item>
      <title>A JSON Based Serverless Quasi-Static Platform</title>
      <author>Arif Amirani</author>
      <pubDate>Tue, 10 Aug 2021 13:16:28 +0000</pubDate>
      <link>https://dev.to/arifamirani/a-json-based-serverless-quasi-static-platform-ha5</link>
      <guid>https://dev.to/arifamirani/a-json-based-serverless-quasi-static-platform-ha5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I've been working with large NGOs to architect their multi-faceted systems. These systems are responsible for information dissemination, data collection, analysis, and sources &amp;amp; sinks to other systems. Our near term goal was to build an information platform (IP). The MDP was narrowed down to the following feature set.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#target-persona"&gt;
  &lt;/a&gt;
  Target persona
&lt;/h3&gt;

&lt;p&gt;The IP was intended for 3 main personas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Villagers

&lt;ul&gt;
&lt;li&gt;Direct consumers&lt;/li&gt;
&lt;li&gt;Low tech capability&lt;/li&gt;
&lt;li&gt;Language barriers&lt;/li&gt;
&lt;li&gt;Varied devices - sizes and capabilities&lt;/li&gt;
&lt;li&gt;Irregular bandwidth&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Ops team

&lt;ul&gt;
&lt;li&gt;Responsible for training using the content&lt;/li&gt;
&lt;li&gt;Submitting feedback for content from users&lt;/li&gt;
&lt;li&gt;Updates to content (limited)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Content team

&lt;ul&gt;
&lt;li&gt;Primarily responsible for content&lt;/li&gt;
&lt;li&gt;Regular content updates&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#media-support"&gt;
  &lt;/a&gt;
  Media support
&lt;/h4&gt;

&lt;p&gt;The portal has to support different media types which includes but not limited to; video, digital books, images, audio (podcast). The content is generated by a marketing and education team which is then uploaded to a public repository for downloads. All content is in the public domain.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#multilingual-and-region-support"&gt;
  &lt;/a&gt;
  Multilingual and region support
&lt;/h4&gt;

&lt;p&gt;The content itself is versatile. The information and instructions change based on the local language, diet, and availability of resources. The portal has to support reuse of content as well as specific content for a particular region. Ease of management of the portal data by the content team was paramount.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#interval-based-updates"&gt;
  &lt;/a&gt;
  Interval based updates
&lt;/h4&gt;

&lt;p&gt;The content team updates the data several times a day. However there was no need to do real-time updates. New content can show up within the hour.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#analytics"&gt;
  &lt;/a&gt;
  Analytics
&lt;/h4&gt;

&lt;p&gt;Measurement is core to any successful deployment, especially for large and diverse ones. We factored in the need of granular measurement for clicks, bounces, playback, skips right from day one.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3rd-party-api"&gt;
  &lt;/a&gt;
  3rd Party API
&lt;/h4&gt;

&lt;p&gt;The content for the portal has to be made available to 3rd party applications for their internal consumption. The interesting part here is that the content over the API is the same as the website, however the 3rd party applications must be throttled to avoid proxy or overuse of our endpoint.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-architecture"&gt;
  &lt;/a&gt;
  Final Architecture
&lt;/h2&gt;

&lt;p&gt;Apart from the requirements above, we also were tasked to ensure cost-effectiveness along with speed of delivery. The obvious choice was a typical three tier architecture that would achieve most of the objectives. The team also had the right experience. However I decided to go a different route. In the recent past I had deployed a JSON based architecture that had scaled well with up to 20 million visitors but nowhere close to the complexity.&lt;/p&gt;

&lt;p&gt;I made a few changes and architected the solution loosely on CQRS - Command Query Responsibility Segregation pattern. All the data that was needed to be displayed (read path) were based on JSON files that were continously refreshed via a fleet of Lambda functions. On the other hand the write path were served by API Gateway (HTTP).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vHD5ZKtw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8mucfqifjruu9x1g9c3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vHD5ZKtw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8mucfqifjruu9x1g9c3.png" alt="Architecture Overview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#origin-database"&gt;
  &lt;/a&gt;
  Origin Database
&lt;/h3&gt;

&lt;p&gt;These are the primary sources of information. They can be a Google Sheet, Airtable, RDBMS data sources. They provide the actual content metadata and rules of transformation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pull-lambda-fleet"&gt;
  &lt;/a&gt;
  Pull Lambda Fleet
&lt;/h3&gt;

&lt;p&gt;PLF run either on a reactive or schedule basis. They fetch data from the data sources and merge them based on rules. The output is split based on language, region, content, and use case. They generate JSON files at the end of the process and upload them to an S3 bucket using a convention that the webapp can understand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#information-portal-ip"&gt;
  &lt;/a&gt;
  Information Portal (IP)
&lt;/h3&gt;

&lt;p&gt;Built on React and Tailwind CSS, the IP delivers the content to users. It is a lightweight, responsive PWA. Can work with limited bandwidth and works across all device display sizes. Once it loads, it pulls the appropriate JSON from the server via CloudFront, depending on the region and language setting. All UI actions such as filtering, and search are done on the client side. The size of each JSON is manageable and uses aggressive compression to deliver data quickly. The auto reload mechanism in React (ReactSWR), ensures that the client refetches the JSON every 15 mins or on reload of page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#api-clients"&gt;
  &lt;/a&gt;
  API Clients
&lt;/h3&gt;

&lt;p&gt;For the content 3rd party API, we use the main API Gateway (APIGW). Using the APIGW method, we can connect directly the GET method to an S3 resource. This requires no glue code or handling. It is seamlessly handled by APIGW.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x81UG--q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/li4f2zq2zkgl0nqp4q3x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x81UG--q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/li4f2zq2zkgl0nqp4q3x.png" alt="API Gateway S3 Connect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using API Keys &amp;amp; Usage Plans, we ensured only authenticated clients got access to data and also rate limited their API calls.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--egBgUUus--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf3lkpbxsbmiuv21eerj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--egBgUUus--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf3lkpbxsbmiuv21eerj.png" alt="API Gateway Rate Limit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#analytics-amp-read"&gt;
  &lt;/a&gt;
  Analytics &amp;amp; Read
&lt;/h3&gt;

&lt;p&gt;All of the write paths use the main API Gateway (APIGW) and Lambda functions to write to DynamoDB. We capture all granular events such as playback, download, visit, and batch them up to the server. Partial data loss is ok with the volume we expected.&lt;/p&gt;

&lt;p&gt;We created an internal portal to create a feedback loop of usage which was based on the data in DynamoDB. The web app used the HTTP API endpoints within the same APIGW to fetch data from DynamoDB.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aggregator-lambda"&gt;
  &lt;/a&gt;
  Aggregator Lambda
&lt;/h3&gt;

&lt;p&gt;To monitor and analyse the content changes, we deployed a cron based lambda functions that pulled the current JSON in the data bucket and created a snapshot of it. The snapshots were aggregated over a time interval and uploaded to reporting S3 bucket. A webapp fetched the latest aggregate data and charted it for the admin to review.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#results-and-conclusion"&gt;
  &lt;/a&gt;
  Results and Conclusion
&lt;/h2&gt;

&lt;p&gt;The entire setup took about 1.5 months to build. Once deployed, we never breached the free tier of many services for processing. Our biggest cost center was data transfer. We had also enabled all edge nodes for Cloudfront which cost us a bit more. The latency issues were non existent. Our DR was pretty self solved due to S3 becoming our primary data store and DynamoDB was highly available but not in the critical path.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final notes
&lt;/h2&gt;

&lt;p&gt;We had a specific use case that was served quite well with our design choices. This may not be the most optimal architecture for more demanding and real-time applications.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>serverless</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Top 3 Instagram Influencers You Must Follow in 2021</title>
      <author>WyattRoberts14</author>
      <pubDate>Tue, 10 Aug 2021 13:15:55 +0000</pubDate>
      <link>https://dev.to/wyattroberts5/top-3-instagram-influencers-you-must-follow-in-2021-5g0n</link>
      <guid>https://dev.to/wyattroberts5/top-3-instagram-influencers-you-must-follow-in-2021-5g0n</guid>
      <description>&lt;p&gt;In this day and age, the most influential people are on social media, even from presidents of countries, to scientists, successful businessmen, to be honest almost everyone.&lt;/p&gt;

&lt;p&gt;So in a world where everyone uses social media, there’s no surprise that certain people have huge influences on other people. Starting from the world’s biggest stars like Ariana Grande, Justin Bieber, Dwayne Johnson with a combined following of 1 billion people, to smaller influencers with more than 50k they all have a certain influence on their audience.&lt;/p&gt;

&lt;p&gt;This means that we choose, who we get the influence from, and this is more important than we think. Having in mind that the average time people spend on a social media platform like Instagram for example is 45 minutes per day. That’s why it’s important that we choose what we see and soak in in those 45 minutes.&lt;/p&gt;

&lt;p&gt;It would be way better for your quality of life if you choose wisely and decide to follow people that will inspire you, teach you something to improve your life, or even teach you how to be happier.&lt;/p&gt;

&lt;p&gt;Believing in that, I decided to make a list of the best 3 Instagram influencers that you must follow. Let’s take a look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Bradford Haynes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may have already seen him on your screens because he has featured on major network TV series and films.&lt;/p&gt;

&lt;p&gt;Some of his films on Amazon Prime include “Five Blocks Away” and “Best Summer Ever”.&lt;/p&gt;

&lt;p&gt;Bradford is also an admirable family man—being husband and father of two beautiful girls.&lt;/p&gt;

&lt;p&gt;On his Instagram profile, Bradford’s followers are charmed into his fascinating world of films. From moments captured between takes, film release updates, to heart-warming family posts.    &lt;a href="https://www.instagram.com/bradfordhaynes12/?hl=en"&gt;Bradford&lt;/a&gt; shares both on-screen and off-screen highlights of his real life.&lt;/p&gt;

&lt;p&gt;His posts are often coupled with entertaining captions, great stories, and some charming wit. Based in California, USA, Bradford Haynes is a former professional baseball player turned actor. Yeah, Bradford’s talents shine through his social media content too.&lt;/p&gt;

&lt;p&gt;What is notable about his profile is that Bradford does have a community of actors that follow him. This is evident by the conversation highlights in his comments section.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Erik Bergman&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://great.com/erik/"&gt;Erik Bergman&lt;/a&gt; is a successful businessman who co-founded a company called Catena Media and sold it after a few successful years. This venture made Erik a multi-millionaire, with almost $50 million before turning 25.&lt;/p&gt;

&lt;p&gt;He then started an Online Casino Affiliate Program called Great.com. &lt;a href="https://great.com/"&gt;Great&lt;/a&gt; now donates all of its profits to the fight against climate change.&lt;/p&gt;

&lt;p&gt;Besides all of the success, Erik also has a podcast called Becoming Great, and a wide audience on Instagram, counting more than 410k followers. He brings good vibes and happiness to another level, with a contagious positivity and smile. His Instagram account is called &lt;a href="https://www.instagram.com/smilingerik/?hl=en"&gt;smilingerik&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.Katrina Julia&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On her personal Instagram profile, she shares a wealth of video content around topics such as how to create courses, how to create content like a boss, how influencers do marketing, and how to build a lifestyle brand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/katrinajuliafit/?hl=en"&gt;Katrina&lt;/a&gt; keeps it real as she shares highlights of her travels – recently to Mexico and Bulgaria. Katrina Julia is the lifestyle entrepreneur that will inspire you to create the health, wealth, and business that you desire for yourself.&lt;/p&gt;

&lt;p&gt;Katrina is a transformation coach and creator of &lt;a href="https://www.fitlifecreation.com/"&gt;Fit Life Creation&lt;/a&gt; – a lifestyle community designed to equip her followers to succeed in their transformation journey.&lt;/p&gt;

&lt;p&gt;She has built a community of followers that are enthusiastic about changing their lives. Of course, giving her followers some wellness inspo along the way – like bicycling your way through your travel adventures as a great solution to your fitness needs.&lt;/p&gt;

&lt;p&gt;Being a speaker, author, athlete, host, videographer, philanthropist, and an amazing community creator – Katrina is certainly an inspiring social butterfly that will pull all her skills out to create uplifting social campaigns.&lt;/p&gt;

</description>
      <category>instagram</category>
      <category>2021</category>
      <category>inspirational</category>
      <category>educational</category>
    </item>
    <item>
      <title>Doctave.com opens to public beta</title>
      <author>Nik Begley</author>
      <pubDate>Tue, 10 Aug 2021 12:45:19 +0000</pubDate>
      <link>https://dev.to/doctave/doctave-com-opens-to-public-beta-1p7p</link>
      <guid>https://dev.to/doctave/doctave-com-opens-to-public-beta-1p7p</guid>
      <description>&lt;p&gt;We are excited to announce that Doctave.com is now in public beta. Doctave.com is the best place to host your docs-as-code documentation, and it’s available for everyone starting today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-doctavecom"&gt;
  &lt;/a&gt;
  What is Doctave.com?
&lt;/h2&gt;

&lt;p&gt;At the end of last year we created &lt;a href="https://www.github.com/Doctave/doctave"&gt;Doctave&lt;/a&gt;, a batteries-included static site generator. But there are many features that a documentation site generator cannot provide that are important for larger teams. If you have 50 different repositories, you would end up with 50 disconnected documentation websites to manage and configure. No standardization, nothing to link the docs together.&lt;/p&gt;

&lt;p&gt;Today we are making available &lt;a href="https://www.doctave.com"&gt;Doctave.com&lt;/a&gt; to solve these issues, making it the best place to host your technical documentation.&lt;/p&gt;

&lt;p&gt;By using Doctave.com for your documentation you get:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A private space for all your organization’s documentation&lt;/li&gt;
&lt;li&gt;Visual diffs of changes&lt;/li&gt;
&lt;li&gt;GitHub Pull-Request integration&lt;/li&gt;
&lt;li&gt;Search across all projects at once&lt;/li&gt;
&lt;li&gt;Option for public-facing documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And most importantly: no lock-in. Your docs are just Markdown files in your Git repository, rendered by Doctave.com.&lt;/p&gt;

&lt;p&gt;Let’s take a look at some of these features closer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visual-diffs"&gt;
  &lt;/a&gt;
  Visual diffs
&lt;/h2&gt;

&lt;p&gt;One piece of feedback we heard many times was that it was hard to see what actually changed in the documentation looking at a raw Git diff. People wanted to see a visual diff of the documentation rendered normally.&lt;/p&gt;

&lt;p&gt;So we built it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S-dSqpql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/icwoqyfqi7nupr6r50zn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S-dSqpql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/icwoqyfqi7nupr6r50zn.png" alt="visual diff preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a preview of changes for our &lt;a href="https://docs.doctave.com/Doctave/Doctave/"&gt;public-facing&lt;/a&gt; documentation. For each pull request you can see exactly what changed, rendered on Doctave.com.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-integration"&gt;
  &lt;/a&gt;
  GitHub integration
&lt;/h2&gt;

&lt;p&gt;For many software engineering teams a lot of our work happens on GitHub. This is why it was important for us to make sure Doctave.com works well with Pull Requests. When you push your documentation to Doctave.com, we annotate your commits with links to preview your updated docs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_vciOL_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwx7ak76qq06w964945f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_vciOL_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwx7ak76qq06w964945f.png" alt="doctave github integration example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your documentation deserves the same attention as your tests, and Doctave.com helps you to never forget to update the docs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#were-just-getting-started"&gt;
  &lt;/a&gt;
  We’re just getting started
&lt;/h2&gt;

&lt;p&gt;We have a long list of features we are excited to build to make writing and maintaining quality documentation even easier. Here’s a quick sneak preview of things we are planning:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Documentation linters that verify your docs on every push&lt;/li&gt;
&lt;li&gt;Analytics to help you see what docs people are reading&lt;/li&gt;
&lt;li&gt;Feedback mechanisms to help improve your documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And much more…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-try-it-out"&gt;
  &lt;/a&gt;
  Want to try it out?
&lt;/h2&gt;

&lt;p&gt;Sign up for a free trial &lt;a href="https://docs.doctave.com"&gt;here&lt;/a&gt;. No credit card required. If you have any questions, feel free to email me at &lt;a href="mailto:nik@doctave.com"&gt;nik@doctave.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy documenting!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>writing</category>
      <category>agile</category>
    </item>
    <item>
      <title>🎬Clock App | Vanilla JavaScript⏱️</title>
      <author>Robson Muniz</author>
      <pubDate>Tue, 10 Aug 2021 12:43:28 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/clock-app-vanilla-javascript-3g34</link>
      <guid>https://dev.to/robsonmuniz16/clock-app-vanilla-javascript-3g34</guid>
      <description>&lt;p&gt;Hey DEVs In today's episode, we will create from scratch a “Clock App | Vanilla JavaScript”,  will also are gonna use this new and popular trend Glassmorphism on it…&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-youtube-kcltsfaqgl8-"&gt;
  &lt;/a&gt;
  &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/KcLTSfAqGl8"&gt;
&lt;/iframe&gt;

&lt;/h2&gt;




&lt;p&gt;Essentially, the main aspect of this trend is simple: we have a semi-transparent background, with a sublime shadow and border.&lt;br&gt;
We also have a blur on it so that whatever is behind the background is beautifully "morphed" into the element itself.&lt;/p&gt;

&lt;p&gt;It’s a quite simple project to do, but at the same time it will teach you a lot of cool things in css and also JavaScript.&lt;/p&gt;




&lt;p&gt;📚Resources&lt;br&gt;
Sound | Fonts | Pics used in this Project:&lt;br&gt;
&lt;a href="https://bit.ly/3rHKDPl"&gt;https://bit.ly/3rHKDPl&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Nhost - open source Firebase alternative with GraphQL</title>
      <author>Tomek Poniatowicz</author>
      <pubDate>Tue, 10 Aug 2021 12:19:10 +0000</pubDate>
      <link>https://dev.to/tomekponiat/nhost-open-source-firebase-alternative-with-graphql-90b</link>
      <guid>https://dev.to/tomekponiat/nhost-open-source-firebase-alternative-with-graphql-90b</guid>
      <description>&lt;p&gt;Most devs are probably at least somewhat familiar with Firebase, Google’s out of the box backend-solution for mobile &amp;amp; web apps. It's been a few years since Google bought it and as usual the community has provided us with a growing number of alternatives. Although Firebase does work with GraphQL that connection can always be improved to give us more and that is exactly where Nhost comes in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nhost-postgresql-hasuras-graphql-engine-hasura-backend-plus"&gt;
  &lt;/a&gt;
  Nhost = PostgreSQL + Hasura's GraphQL Engine + Hasura Backend Plus
&lt;/h2&gt;

&lt;p&gt;I touched a bit recently on combining technologies to get the most out of them when talking about the GRAND Stack, well this will be a bit of a deja vu as Nhost is also a stack. It's basically PostgreSQL combined with Hasura's GraphQL Engine and Hasura Backend Plus, this together creates an open source Backend as a Service. Nhost uses them to get you everything you need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;out of the box backend with a relational database,&lt;/li&gt;
&lt;li&gt;user authentication&lt;/li&gt;
&lt;li&gt;data storage,&lt;/li&gt;
&lt;li&gt;serverless fucntions,&lt;/li&gt;
&lt;li&gt;GraphQL API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aJ3O_bAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62ley12ca3pzded4rtik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aJ3O_bAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62ley12ca3pzded4rtik.png" alt="Nhost"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#source-nhostio"&gt;
  &lt;/a&gt;
  Source: &lt;a href="https://nhost.io/"&gt;nhost.io&lt;/a&gt;
&lt;/h5&gt;

&lt;h2&gt;
  &lt;a href="#the-main-draw"&gt;
  &lt;/a&gt;
  The main draw
&lt;/h2&gt;

&lt;p&gt;Well that’s just the inner workings and if it's supposed to be an alternative to Firebase the most interesting part is obviously the features. After all no one gets interested in a tool based just on how it works but rather what it can do for them, so let's dive into that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;out of the box:&lt;/strong&gt; provides you with a solid base for starting a project, database, storage, scalability, authentication, user management and API,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;customization and versatility&lt;/strong&gt;: aside from the defaults it can be customized and works well with others. Hasura Backend Plus supports customisable storage rules on any S3-compatible instance and works with third party Open Authentication providers like GitHub, Google, Facebook, Twitter and others,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;performance&lt;/strong&gt;: PostgreSQL and Hasura GraphQL Engine are preconfigured to work as fast as possible,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;subscriptions&lt;/strong&gt;: one often voiced complaint about GraphQL is the lack of a good subscription solution and manual query updates. No worries there, Nhost handles all that for you via Hasura,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dart and Flutter support&lt;/strong&gt;: provides easy to use software development kit packages for Flutter devs (beta).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S4DV2kzc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8l8uuxk5c8yvl3plqg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S4DV2kzc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8l8uuxk5c8yvl3plqg1.png" alt="Nhost dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#source-nhostio"&gt;
  &lt;/a&gt;
  Source: &lt;a href="https://nhost.io/"&gt;nhost.io&lt;/a&gt;
&lt;/h5&gt;

&lt;h2&gt;
  &lt;a href="#who-is-it-for"&gt;
  &lt;/a&gt;
  Who is it for?
&lt;/h2&gt;

&lt;p&gt;Well you the reader, right? Well to be exact it's geared towards indie devs, startups and small to medium teams, at least for now according to the developers. The project has raised 3 million dollars for its next stage of development with prominent investors including the founders of GitHub, Netlify and WorkOS. &lt;br&gt;
So you can bank on it growing quite a bit in the near future and if it doesn't sound convincing to you yet, it might soon as they add new features. For now it's already a useful tool which provides you with a great base out of the box for starting your project. Even if you’re already using Firebase, Strapi or Openbase it's always good to check out an alternative and see if it does something better, after all its open source.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;A guest blog post for &lt;a href="https://blog.graphqleditor.com/"&gt;GraphQL Editor blog&lt;/a&gt; by Michał Tyszkiewicz&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#speed-up-your-graphql-api-development"&gt;
  &lt;/a&gt;
  Speed up your GraphQL API development
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GraphQL Editor&lt;/strong&gt; is a supportive tool for both advanced GraphQL users as well as those taking their first steps with GraphQL APIs. Our all-in-one development environment for GraphQL will help you build, manage &amp;amp; deploy your GraphQL API much faster. &lt;strong&gt;&lt;a href="https://graphqleditor.com"&gt;Try GraphQL Editor for free!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh8ZaRkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hz2iv2u1073dy9orexxf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh8ZaRkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hz2iv2u1073dy9orexxf.gif" alt="New features of GraphQL Editor gif"&gt;&lt;/a&gt; &lt;/p&gt;

</description>
      <category>graphql</category>
      <category>beginners</category>
      <category>database</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React Style Guide Collection</title>
      <author>Kumar Nitesh</author>
      <pubDate>Tue, 10 Aug 2021 12:07:42 +0000</pubDate>
      <link>https://dev.to/knitesh/react-style-guide-collection-4p42</link>
      <guid>https://dev.to/knitesh/react-style-guide-collection-4p42</guid>
      <description>&lt;p&gt;I am in process of creating style guide for my react projects, and started looking online for already popular ones to get inspiration. Here are collection of all that I think are really good and will be helpful for developers like me looking for React style guide.&lt;/p&gt;

&lt;p&gt;Please comment If I am missing any or if you had a preferred one that I should look into.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#khan-react-style-guid"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/Khan/style-guides/blob/master/style/react.md"&gt;KHAN : React Style Guid&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uh4Z9yYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yfo6tc0rujr7p3rg4th.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uh4Z9yYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yfo6tc0rujr7p3rg4th.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#pagarme-react-code-style-guide"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/pagarme/react-style-guide"&gt;PAGARME: React Code Style Guide&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cfz5L15i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f055iwfm0jgwq1qt4qj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cfz5L15i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f055iwfm0jgwq1qt4qj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#airbnb-reactjsx-style-guide"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/airbnb/javascript/tree/master/react"&gt;AIRBNB: React/JSX Style Guide&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4kFGzafY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp7qrkl9wz5dyxd8v99p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4kFGzafY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp7qrkl9wz5dyxd8v99p.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#csstricks-react-code-style-guide"&gt;
  &lt;/a&gt;
  &lt;a href="https://css-tricks.com/react-code-style-guide/"&gt;CSS-TRICKS: React Code Style Guide&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J1dzD95X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hul1kdx4hb9runcxajim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J1dzD95X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hul1kdx4hb9runcxajim.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#airbnb-issue-discussion-around-es62015"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/airbnb/javascript/issues/247"&gt;AIRBNB: Issue discussion around ES6/2015&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Really a good read.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wIfAnIRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yw7osd8cbg9tkwossrv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wIfAnIRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yw7osd8cbg9tkwossrv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#google-javascript-guide"&gt;
  &lt;/a&gt;
  &lt;a href="https://google.github.io/styleguide/jsguide.html"&gt;Google: JavaScript Guide&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A general JS style guide.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tZNiHCv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwgc61j4d5igl48yq5yl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tZNiHCv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwgc61j4d5igl48yq5yl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#reactjsorg-file-structure"&gt;
  &lt;/a&gt;
  &lt;a href="https://reactjs.org/docs/faq-structure.html"&gt;ReactJs.org: File Structure&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F1GSYQIq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n2p23i3dxcblvrklnxf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F1GSYQIq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n2p23i3dxcblvrklnxf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Also, if interested, &lt;a href="https://dev.to/knitesh/react-project-folder-structure-30cm"&gt;here&lt;/a&gt; you can read about my preferred folder structure.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lessonly-engineering-react-styleguide"&gt;
  &lt;/a&gt;
  &lt;a href="https://about.lessonly.engineering/styleguide/react/"&gt;Lessonly Engineering: React Styleguide&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2it-Pz-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2f8brtz0jhs5ds54cjf3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2it-Pz-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2f8brtz0jhs5ds54cjf3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;ps: I will soon write a blog post detailing my style guide.&lt;/p&gt;

&lt;p&gt;Thanks&lt;br&gt;
Kumar Nitesh&lt;br&gt;
&lt;a href="https://twitter.com/imknitesh"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>styleguide</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Reactjs perfect tools🛠️💥</title>
      <author>KR Tirtho</author>
      <pubDate>Tue, 10 Aug 2021 12:00:07 +0000</pubDate>
      <link>https://dev.to/krtirtho/reactjs-perfect-tools-56jg</link>
      <guid>https://dev.to/krtirtho/reactjs-perfect-tools-56jg</guid>
      <description>&lt;p&gt;React is awesome &amp;amp; one of the most wanted &amp;amp; most used JavaScript frameworks according to &lt;a href="https://insights.stackoverflow.com/survey/2021#most-popular-technologies-webframe"&gt;StackOverflow survey 2021&lt;/a&gt;. With React simplest to complex applications can be done easily. But there are so many reactjs based libraries that we often find "finding libraries" an overwhelming task. Many times, we can't even remember/guess the term related to that library making it way harder to find. So I present you all the perfect tools for perfect the use cases of React&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm not going into full detail here. Just a simple introduction to the libraries that I mentioned or not at all. You'll find their docs more useful than this post/article/blog&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#state-management"&gt;
  &lt;/a&gt;
  State Management
&lt;/h3&gt;

&lt;p&gt;A major part of React is state management. But there are 2 types of state management done in frontend UI libraries:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;UI state (e.g. UI schemes, light/dark mode, etc..)&lt;/li&gt;
&lt;li&gt;Data fetching/Async-data state (e.g. request-response caching, WebSocket event caching, etc..)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Many people don't even know that these 2 types of state management exist. They just give one solution Redux/Mobx/XState etc.  But these are only UI state managers. Though some of 'em (e.g Redux) has Data fetching support through other packages/middlewares (e.g rtk-query) or have started recently, still it isn't complete&lt;/p&gt;

&lt;p&gt;Data fetching/Network response caching requires caching, invalidation of outdated data, memoization, garbage collection, etc.. which are extremely hard to do manually through a UI state manager. Doing this with UI state managers can often lead to memory leak/high resource usage &amp;amp; other issues&lt;/p&gt;

&lt;p&gt;Client-side state managers:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://zustand.surge.sh/"&gt;zustand&lt;/a&gt;&lt;/strong&gt;: A real simple, scalable, bearbones (barebone) state manager with no boilerplate but using the same FLUX principal. It's completely hooks-based &amp;amp; follows a single-store pattern. Though multiple stores can be created, all of them will be individual from each other. It's lightweight, fast, supports redux devtools, can be integrated with another awesome state-management pattern library &lt;a href="https://immerjs.github.io/immer/"&gt;&lt;code&gt;immer&lt;/code&gt;&lt;/a&gt; &amp;amp; it supports middleware for stores. It's like the perfect state manager that React was missing&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt;&lt;/strong&gt;: The God of state managers. Every UI framework including Dart's Flutter is even supported by it. The pioneer library to implement the FLUX pattern. Redux changed the way of state management. Its performant, configurable, production-ready &amp;amp; provides robust API. Always proved its worth while being in larger production applications. But its boilerplate is overwhelming. Even being so great &amp;amp; useful, many people still hate it because of its huge boilerplate. Though redux-toolkit tried to mitigate that problem. But once you get off the first phase (boilerplate), I can guarantee you'll never regret that you used Redux&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://mobx.js.org/"&gt;MobX&lt;/a&gt;&lt;/strong&gt;: Simple, scalable state manager &amp;amp; its framework agnostic. MobX even has Dart support. Its architectural freedom really lets one organize their state any way one wants. Just like Redux, it's battle-tested &amp;amp; production-proven. Its also store based &amp;amp; it mainly provides reactivity through Observables. Also, it's so much transparent &amp;amp; exposes the way it works to the end-user which is really uncommon compared to other libraries'&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://recoiljs.org/"&gt;recoil&lt;/a&gt;&lt;/strong&gt;: Experimental warning! This state manager is from Facebook. It creates a graph for state attached to the React's tree &amp;amp; state changes flow from roots of this graph (which they call atom) through pure functions known as selectors &amp;amp; into components. It's boilerplate-free, simple, lightweight, compatible with Concurrent React (when this feature in react will be available) &amp;amp; provides ease of usability. It closes the gap that React's Context API can't do&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://jotai.pmnd.rs/"&gt;jotai&lt;/a&gt;&lt;/strong&gt;: An awesome state-manager based on individual state pattern. Instead of creating a central store, it allows to create/manage state using individual atoms. And yeah, those states are called Atom. It's primitive, flexible, lightweight &amp;amp; super performant. It's from the same creator of &lt;code&gt;zustand&lt;/code&gt; but with a different mental model. It's more close to &lt;code&gt;recoil&lt;/code&gt; where &lt;code&gt;zustand&lt;/code&gt; is close to Redux/MobX&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://xstate.js.org/"&gt;XState&lt;/a&gt;&lt;/strong&gt;: An unique state management solution that uses the &lt;em&gt;Finite State machine's&lt;/em&gt; concept.&lt;em&gt;"A finite state machine is a mathematical model of computation that describes the behavior of a system that can be in only one state at any given time".&lt;/em&gt; At first glance, xstate can be confusing but it'd all make sense once you get there. It's a neat state manager&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Data fetching/Async-data management libraries:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://react-query.tanstack.com/"&gt;react-query&lt;/a&gt;&lt;/strong&gt;: The missing data-fetching library for React, but in more technical terms, it makes fetching, caching, synchronizing, and updating server state in your React applications a breeze. Before react-query synchronizing with server state &amp;amp; caching was a neck-breaking job. Especially when you get only UI state managers. It removes the pain of managing memory, memoization, caching &amp;amp; outdated data invalidating manually. It's available for react-native too. It's one of the reasons why many developers choose React over other frontend frameworks&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://swr.vercel.app/"&gt;swr&lt;/a&gt;&lt;/strong&gt;: It's pretty similar to react-query. Provides hooks for data fetching &amp;amp; lightweight, supports JAM stack. Also transport &amp;amp; protocol agnostic. It provides fast page navigation, polling on intervals, data dependency, revalidation of cached data on focus, pagination/scroll position recovery &amp;amp; many more. It's from the same team of &lt;em&gt;Nextjs &amp;amp; vercel&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://www.apollographql.com/docs/react/"&gt;apollo-client&lt;/a&gt;&lt;/strong&gt;: A comprehensive state management library that enables one to manage both local and remote data with GraphQL. Can be used to fetch, cache, and modify application data, all while automatically updating your UI. It's like react-query but for GraphQL. Shares the same hook names too. But it's cross-framework compatible thanks to its community. It's the best Data-fetching library specifically for GraphQL&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://redux-toolkit.js.org/tutorials/rtk-query/"&gt;rtk-query&lt;/a&gt;&lt;/strong&gt;: It's from &lt;code&gt;redux-toolkit&lt;/code&gt; &amp;amp; it's the best match if you're using Redux/redux-toolkit as your UI state manager. It's simple &amp;amp; lightweight. Unlike others, it's store-based. So all requests are individual. As it is from Redux, you can expect production-grade performance too&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#styling"&gt;
  &lt;/a&gt;
  Styling
&lt;/h3&gt;

&lt;p&gt;Component styling is a very important part of any frontend project. The best way is of course with brae minimum CSS but time's most valuable so using some kind of framework or pre-built library is always a plus point&lt;/p&gt;

&lt;p&gt;Styling using JavaScript is a new option too though it has an extra runtime cost but provides high customizability. Its called CSS in JS&lt;/p&gt;

&lt;p&gt;Another way to keep the customizability freedom but cut off the runtime cost is to use CSS pre-processors. These're highly modular, customizable, offer easy-to-use syntax. And these finally get compiled to functioning CSS&lt;/p&gt;

&lt;p&gt;CSS based:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://tailwindcss.com/"&gt;tailwindcss&lt;/a&gt;&lt;/strong&gt;: Highly modular/configurable, utility first CSS framework. Has its own jit(Just in time) compiler to cut off unused CSS &amp;amp; push CSS styles on the fly in development. In production, can cut off 100% of unused CSS using &lt;code&gt;purgecss&lt;/code&gt;. Almost anything that can be done through CSS can be done using tailwindcss classes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://getbootstrap.com/"&gt;bootstrap&lt;/a&gt;&lt;/strong&gt;: Twitter's bootstrap is one of the best CSS component frameworks. For being over 10 years in the game, it's the most mature CSS framework. Best for quickly building user interfaces. Provides robust CSS classes that can be used to build any component. Bootstrap provides they're own component set. Also, there are tons of libraries built for bootstrap. So you'll never run out of custom component libraries&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://sass-lang.com/"&gt;scss&lt;/a&gt;&lt;/strong&gt;: scss/sass is a CSS pre-processor that allows doing all cool stuff with a fairly easy syntax. Previously Sass's compiler was written in Ruby but later it was re-written in Dart. Scss/Sass is also the main building block of bootstrap where previously bootstrap was completely CSS-based&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://create-react-app.dev/docs/adding-a-css-modules-stylesheet/"&gt;css modules&lt;/a&gt;&lt;/strong&gt;: Simply, CSS files in which all class names and animation names are scoped locally by default. It keeps the class names of that CSS file completely unique using UUID at the end of each class at build time. It's the best way to keep your component's styles individual from other's&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CSS in JS  based:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt;&lt;/strong&gt;: One of the best CSS in JS library. It allows styling using JS's new tag template function syntax. Allows theming, supports style inheritance, editor's CSS IntelliSense support, cross-compatible with other CSS frameworks &amp;amp; allows passing/accessing props through style functions/arguments&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://emotion.sh/"&gt;emotion&lt;/a&gt;&lt;/strong&gt;: Another CSS-in-JS library but its framework-agnostic. Offers high performance &amp;amp; ease of usability. It supports styling with both object &amp;amp; string. Emotion is really developer friendly &amp;amp; thus many bigger UI component libraries use it&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://xstyled.dev/"&gt;xstyled&lt;/a&gt;&lt;/strong&gt;: It's a utility-first CSS-in-JS framework built for React. It makes it easy to consistent design system and scale it over time. Unlike other CSS-in-JS libraries, it allows one to style via passing props. It matches React's declarative term perfectly. Provides theming support. It's like tailwindcss but made with CSS-in-JS. But it isn't a complete CSS-in-JS library. It requires either &lt;code&gt;styled-component&lt;/code&gt; or &lt;code&gt;@emotion/react @emotion/styled&lt;/code&gt; as it uses them under the hood&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://cssinjs.org/"&gt;JSS&lt;/a&gt;&lt;/strong&gt;: Another framework-agnostic CSS-in-JS library. It's simple, minimal &amp;amp; provides all the basic &amp;amp; barebones without any bloat &amp;amp; has a plugin system. It's a major choice for bigger UI component frameworks as it can do a lot if one can define it. Its also very lightweight&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#ui-components"&gt;
  &lt;/a&gt;
  UI components
&lt;/h3&gt;

&lt;p&gt;UI components are simply pre-built components that can be configured/tweaked for other design foundations. UI components save a lot of developer time &amp;amp; make the development easier. Also, its managed by so many people that they're often more secure &amp;amp; performant comparing to components built manually&lt;/p&gt;

&lt;p&gt;So many UI component libraries are available. Many of them are completely individual &amp;amp; many are based on the philosophy &amp;amp; design pattern of bigger design systems&lt;/p&gt;

&lt;p&gt;Here is the list:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://chakra-ui.com/"&gt;chakra-ui&lt;/a&gt;:&lt;/strong&gt; Modular component library. It's like the tailwindcss of React but made with style as props pattern. Highly configurable theming support. Can be configured to look like anything &amp;amp; has a huge component library&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://material-ui.com/"&gt;material-ui&lt;/a&gt;:&lt;/strong&gt; The most famous UI component library in React ecosystem. Provides 200+ components, highly configurable &amp;amp; based on google's material-design principal. But currently, it's suffering from a Typescript type-related bug that makes the tsserver super slow to determine types. But it'll be fixed in the next major update v5 which is already in beta. This bug can slow down low-spec PCs easily but if you've got a mid-high spec PC then don't stop, use it. Also awesome if you're not using Typescript in your project&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://react-bootstrap.github.io/"&gt;react-bootstrap&lt;/a&gt;:&lt;/strong&gt; React implementation of famous CSS framework bootstrap&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://ant.design/docs/react/introduce"&gt;ant-design react&lt;/a&gt;:&lt;/strong&gt; A UI component framework provided by ant-design for React based on the ant-design system. Highly customizable, supports theming &amp;amp; provides a huge number of components.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://v2.grommet.io/"&gt;grommet&lt;/a&gt;:&lt;/strong&gt; Responsive, mobile-first, carefully designed UI component library for react. Has a large number of components. And their design is just beautiful. Simple, minimal &amp;amp; highly responsive&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://evergreen.segment.com/"&gt;evergreen&lt;/a&gt;:&lt;/strong&gt; A flexible, contributor-friendly, sensible-default style providing UI component framework. Its foundation is super beautiful, provides a minimal design system &amp;amp; is unique among all&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Info!&lt;/strong&gt;: I'm building a UI component library based on &lt;strong&gt;tailwindcss&lt;/strong&gt; which is gonna be a cross-framework library. At the start, react &amp;amp; vue support will be provided &amp;amp; svelte support is planned too. Its name is &lt;strong&gt;revind.&lt;/strong&gt; &lt;em&gt;And the project needs more contributors.&lt;/em&gt; If you want to contribute, head to &lt;a href="https://github.com/FotieMConstant/revind"&gt;https://github.com/FotieMConstant/revind&lt;/a&gt; or contact me via &lt;a href="https://twitter.com/KrTirtho"&gt;Twitter&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#form-handlers"&gt;
  &lt;/a&gt;
  Form handlers
&lt;/h3&gt;

&lt;p&gt;Handling Forms is a hard thing in react. Controlling, validating input, reset state on successful submit, checking whether the input was touched, etc.. are a lot of work to do. But luckily, there are form handling libraries that make it a breeze&lt;/p&gt;

&lt;p&gt;List of form handlers:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://formik.org/"&gt;formik&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://react-hook-form.com/"&gt;react-hook-form&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://final-form.org/react/"&gt;react-final-form&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#graphql"&gt;
  &lt;/a&gt;
  GraphQL
&lt;/h3&gt;

&lt;p&gt;The graph query language provides a way to fetch only required data saving both user's &amp;amp; server's bandwidth. A technology by Facebook that sits on top of HTTP to work. It only uses the HTTP POST verb to transfer data. It's modern &amp;amp; makes HTTP connections more eco-friendly&lt;/p&gt;

&lt;p&gt;Popular graphql libraries for React are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.apollographql.com/docs/react/"&gt;Apollo Client&lt;/a&gt; by Apollo Server&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://relay.dev/"&gt;Relay&lt;/a&gt; by facebook&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://formidable.com/open-source/urql"&gt;urql&lt;/a&gt; - universal react query library&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#essential-ui-helper-componentshook"&gt;
  &lt;/a&gt;
  Essential UI helper components/hook
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;Tables&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tables are most often needed for data-driven applications. But handling this amount of dynamic text manually can be a hazard. But these React Table libraries saves the day&lt;/p&gt;

&lt;p&gt;List of table libraries:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://material-table.com"&gt;material-table&lt;/a&gt;&lt;/strong&gt; (best if using material-ui)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://react-table.tanstack.com/"&gt;react-table&lt;/a&gt;&lt;/strong&gt; (from the creator of react-query)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://www.material-ui-datatables.com/"&gt;MUI-Datatables&lt;/a&gt;&lt;/strong&gt; (another best match for material-ui)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://bvaughn.github.io/react-virtualized"&gt;react-virtualized&lt;/a&gt;&lt;/strong&gt; (awesome for being framework-agnostic)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;2. Animation libraries&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Animations are now a modern trend. Every website/app has some kind of animations to make the end user's experience amazing. But creating such awesome animations isn't easy, it includes mathematics, algorithms &amp;amp; sometimes GPU acceleration too. But following react animation libraries made that work easy...&lt;/p&gt;

&lt;p&gt;List of animation libraries:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://react-spring.io/"&gt;react-spring&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.framer.com/motion/"&gt;framer-motion&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.remotion.dev/"&gt;remotion&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://react-move-docs.netlify.app/"&gt;react-move&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; &lt;strong&gt;Loaders/Skeleton/Progress-bar&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Always need a fallback when data is being fetched from the server, right? Showing loaders/skeleton/progress-bar makes it easier for users to wait &amp;amp; gives your site fewer "go away at first click" scores&lt;/p&gt;

&lt;p&gt;Below are awesome loader libraries that can be used with React:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://skeletonreact.com/"&gt;react-content-loader&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/mhnpd/react-loader-spinner"&gt;react-loader-spinner&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.davidhu.io/react-spinners/"&gt;react-spinners&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/tanem/react-nprogress"&gt;@tenem/react-nprogress&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/dvtng/react-loading-skeleton"&gt;react-loading-skeleton&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://klendi.github.io/react-top-loading-bar/"&gt;react-top-loading-bar&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;4. Infinite Scroll&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pagination is becoming an older way. Because of the increasing amount of smartphone users, it's now more convenient to use infinite scroll to get more data or an infinite amount of data. But doing so involves a lot of DOM manipulation via &lt;em&gt;refs&lt;/em&gt; thus doing it manually is kind of a hazard. So infinite scroll component/hook libraries exist&lt;/p&gt;

&lt;p&gt;List of infinite scroll component/hook libraries:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/civiccc/react-waypoint"&gt;react-waypoint&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://danbovey.uk/react-infinite-scroller/"&gt;react-infinite-scroller&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/caseywebdev/react-list"&gt;react-list&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/ankeetmaini/react-infinite-scroll-component"&gt;react-infinite-scroll-component&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/jaredpalmer/react-simple-infinite-scroll"&gt;react-simple-infinite-scroll&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/streamich/libreact"&gt;Libreact&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another awesome react library is &lt;a href="https://github.com/streamich/libreact"&gt;&lt;code&gt;libreact&lt;/code&gt;&lt;/a&gt;. It's an awesome collection of all misc. react components that we don't need very often but sometimes become essential. &lt;code&gt;libreact&lt;/code&gt; provides these components separately or as a collection. But either way, it almost contains all less essential components at the perfect time when we need 'em&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to do a subsearch in Splunk?</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 10 Aug 2021 11:57:05 +0000</pubDate>
      <link>https://dev.to/adaendra/how-to-do-a-subsearch-in-splunk-3n56</link>
      <guid>https://dev.to/adaendra/how-to-do-a-subsearch-in-splunk-3n56</guid>
      <description>&lt;p&gt;When we debug an application, we may need to do some data aggregation to know what happened. So, like in SQL, we can do some sub-searches in Splunk to quickly retrieve a lot of information.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#simple-search"&gt;
  &lt;/a&gt;
  Simple search
&lt;/h1&gt;

&lt;p&gt;First, we will check how to do a simple search and how the data is retrieved.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For what happened next, we will use the following example :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an api that always log the transaction id [&lt;strong&gt;transaction_id&lt;/strong&gt;] and a generic error code [&lt;strong&gt;error_code&lt;/strong&gt;] &lt;em&gt;(if the transaction was incorrect)&lt;/em&gt; before to answer to the user&lt;/li&gt;
&lt;li&gt;a log with the transaction id [&lt;strong&gt;transaction_id&lt;/strong&gt;] and with the exception content [&lt;strong&gt;exception&lt;/strong&gt;] if a field was missing&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;So here, with simple searches, we can search which transactions failed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;error_code=* | table transaction_id
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;transaction_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;or search an error log&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;transaction_id="1" AND exception=* | table timestamp, transaction_id, exception
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;timestamp&lt;/th&gt;
&lt;th&gt;transaction_id&lt;/th&gt;
&lt;th&gt;exception&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2021-01-01 00:00:00.000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Missing field&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h1&gt;
  &lt;a href="#subsearch"&gt;
  &lt;/a&gt;
  Subsearch
&lt;/h1&gt;

&lt;p&gt;Now that we see what we can do with simple searches, we will be able to combine them to retrieve all the transaction_id with an exception!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-how-do-we-do-a-subsearch"&gt;
  &lt;/a&gt;
  So how do we do a subsearch?
&lt;/h3&gt;

&lt;p&gt;In your Splunk search, you just have to add&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[ search &lt;em&gt;[subsearch content]&lt;/em&gt; ]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;example&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ search transaction_id="1" ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So in our example, the search that we need is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[search error_code=* | table transaction_id ] AND exception=* | table timestamp, transaction_id, exception
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we will have&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;timestamp&lt;/th&gt;
&lt;th&gt;transaction_id&lt;/th&gt;
&lt;th&gt;exception&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2021-01-01 00:00:00.000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Missing field&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021-01-03 00:00:00.000&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Auth failed&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The transaction_id 2 is missing because it wasn't a transaction with an error.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#but-how-does-it-works"&gt;
  &lt;/a&gt;
  But how does it works?
&lt;/h3&gt;

&lt;p&gt;It's quite simple! In my example, I did a simple search that returns only one information per log.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;error_code=* | table transaction_id
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;transaction_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;So when you are doing this kind of search as a subsearch, Splunk transforms it to &lt;strong&gt;OR&lt;/strong&gt; condition for each line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[search error_code=* | table transaction_id ] AND exception=*

becomes

(transaction_id = "1" OR transaction_id = "2" OR transaction_id = "3") AND exception=*
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if you are retrieving more than one info in your subsearch, Splunk will transform it as an if condition, where each tuple is a matching case. &lt;em&gt;(The condition to be valid is to match all values from the same line.)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[search error_code=* | table transaction_id, timestamp ] AND exception=*

becomes

(
  (transaction_id = "1" AND timestamp = "2021-01-01 00:00:00.000") OR  
  (transaction_id = "2" AND timestamp = "2021-01-02 00:00:00.000") OR
  (transaction_id = "3" AND timestamp = "2021-01-03 00:00:00.000") 
) AND exception=*
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#splunk-documentation"&gt;
  &lt;/a&gt;
  Splunk documentation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;"Use a subsearch" : &lt;a href="https://docs.splunk.com/Documentation/Splunk/8.2.1/SearchTutorial/Useasubsearch"&gt;https://docs.splunk.com/Documentation/Splunk/8.2.1/SearchTutorial/Useasubsearch&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;"About subsearches" : &lt;a href="https://docs.splunk.com/Documentation/Splunk/8.2.1/Search/Aboutsubsearches"&gt;https://docs.splunk.com/Documentation/Splunk/8.2.1/Search/Aboutsubsearches&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;And that's it! You've learned how to do subsearches in Splunk!&lt;/p&gt;

&lt;p&gt;I hope you enjoyed it and it will help you! 🍺&lt;/p&gt;

</description>
      <category>devops</category>
      <category>sre</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>How to convert Float to int in Python?</title>
      <author>hrishikesh1990</author>
      <pubDate>Tue, 10 Aug 2021 11:47:36 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-convert-float-to-int-in-python-5785</link>
      <guid>https://dev.to/hrishikesh1990/how-to-convert-float-to-int-in-python-5785</guid>
      <description>&lt;p&gt;In this short tutorial, we learn how to convert float to int Python. We look at all the various methods and discuss their pros and cons. &lt;/p&gt;

&lt;p&gt;In case you are looking only for a safe solution to use in your application, I would recommend the second solution. However, if you are interested in the various methods available please follow along. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-float-to-int-python"&gt;
  &lt;/a&gt;
  Table of Contents - Float to Int Python
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-convert-float-to-int-in-python"&gt;Why convert float to int in Python?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#solution-1-using-int"&gt;Solution 1 - Using int()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#solution-2-using-the-math-module"&gt;Solution 2 - Using the math module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limitations-amp-caveats-float-to-int-python"&gt;Limitations &amp;amp; Caveats - Float to Int Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-convert-float-to-int-in-python"&gt;
  &lt;/a&gt;
  Why convert float to int in Python?
&lt;/h2&gt;

&lt;p&gt;Converting data types is a common practice and Python comes with a few in-built methods to achieve this. However, converting Float to int in Python must be dealt with more caution; we talk more about this later in the article.  &lt;/p&gt;

&lt;p&gt;A common use case of converting a float to int is to display a floating value as a number or a percentage. Since int values are immutable the values can be displayed as integer values without changing the original data type. &lt;/p&gt;

&lt;p&gt;Apart from all this, when it comes to the efficiency of calculations, integer values are always preferred.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-1-using-int"&gt;
  &lt;/a&gt;
  Solution 1 - Using int():
&lt;/h2&gt;

&lt;p&gt;This method of converting float to int in Python uses the int() method to convert float to int. However, this method is prone to data loss and hence isn't recommended.&lt;/p&gt;

&lt;p&gt;The below example would give you a better understanding:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;float_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;
&lt;span class="n"&gt;float_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;
&lt;span class="n"&gt;float_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.9&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#Output - 1
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#Output - 1
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#Output - 1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, Python converts all the values into 1 which is an integer value. The data loss here may not seem significant unless you are dealing with currency values. In that case, the inefficient rounding of the float values can cause monetary losses.&lt;/p&gt;

&lt;p&gt;Due to this, as a common practice, this method of conversion is not recommended.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-2-using-the-math-module"&gt;
  &lt;/a&gt;
  Solution 2 - Using the math module:
&lt;/h2&gt;

&lt;p&gt;The math module provides access to a lot of additional mathematical functions and among them, we make use of the ‘math.ceil’ and ‘math.floor’ functions.&lt;/p&gt;

&lt;p&gt;The ‘math.ceil’ takes a floating value as a parameter and returns the smallest integer value that is greater than or equal to the argument. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-of-mathceil"&gt;
  &lt;/a&gt;
  Syntax of math.ceil:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ‘math.floor’ function does the opposite of ‘ceil’ and returns the largest integer less than or equal to the argument.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-of-mathfloor"&gt;
  &lt;/a&gt;
  Syntax of math.floor
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since both methods return an integer value, this second method can also be used to convert float to Int in Python. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parameter"&gt;
  &lt;/a&gt;
  Parameter:
&lt;/h3&gt;

&lt;p&gt;x - Required, the number that you are looking to convert &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-amp-explanation"&gt;
  &lt;/a&gt;
  Code &amp;amp; Explanation:
&lt;/h3&gt;

&lt;p&gt;Since both the above-mentioned methods are part of the math module, it needs to be imported before we use them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="n"&gt;float_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;
&lt;span class="n"&gt;float_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;
&lt;span class="n"&gt;float_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.9&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#Output - 1
#Output - 2
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#Output - 1
#Output - 2
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#Output - 1
#Output - 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the above code snippet, the values can be converted based on your preference reducing data loss. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitations-amp-caveats-float-to-int-python"&gt;
  &lt;/a&gt;
  Limitations &amp;amp; Caveats - Float to Int Python
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Although the int() method works, it is not recommended as there could be data loss. However, it can be used if you are just looking to understand the concept and not working on anything significant.&lt;/li&gt;
&lt;li&gt;The math methods prevent data loss while converting float to int in Python; however, you could still cause a loss if the correct function is not used. I would recommend practicing it a few times to ensure you have a better understanding.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Setup Tailwind CSS in your Vanilla HTML Project</title>
      <author>Nacho Iacovino ⚡</author>
      <pubDate>Tue, 10 Aug 2021 11:45:55 +0000</pubDate>
      <link>https://dev.to/nacho/how-to-setup-tailwind-css-in-your-vanilla-html-project-47d8</link>
      <guid>https://dev.to/nacho/how-to-setup-tailwind-css-in-your-vanilla-html-project-47d8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this tutorial, I'm gonna explain how to setup Tailwind in the easiest way possible into your static HTML project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#required-tools"&gt;
  &lt;/a&gt;
  Required tools
&lt;/h2&gt;

&lt;p&gt;We are gonna need Node.js for this tutorial, if you don't have it, you can download it &lt;a href="https://nodejs.org/en/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should get the "Recommended" version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Create a folder for your project, open a terminal inside and do&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; tailwindcss autoprefixer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, you initialize a new node project (the -y flag is to say yes to all prompts automatically) and install the required dependencies, in this case, Tailwind CSS and Autoprefixer, which is a dependency of Tailwind itself.&lt;/p&gt;

&lt;p&gt;After that, we're gonna create a new folder called &lt;code&gt;src&lt;/code&gt; and add a new file called &lt;code&gt;tailwind.css&lt;/code&gt; inside of it.&lt;/p&gt;

&lt;p&gt;Then, we'll add these three lines to the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we need to add a couple of scripts to our &lt;code&gt;package.json&lt;/code&gt;, &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;build&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tailwind-css-in-vanilla-html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tailwindcss build -i ./src/tailwind.css -o ./public/tailwind.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NODE_ENV=production npm run dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keywords&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;license&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ISC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;devDependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;autoprefixer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^10.3.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tailwindcss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^2.2.7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's explain what's going on here, in the &lt;code&gt;dev&lt;/code&gt; script, we're calling tailwindcss to build, and we're giving it an input file with -i, the &lt;code&gt;.src/tailwind.css&lt;/code&gt; we just created in the previous step. Then, we're giving it an output file with -o, and that's gonna be &lt;code&gt;.public/tailwind.css&lt;/code&gt;, which would be all Tailwind CSS classes after the build process.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;build&lt;/code&gt; script, we're calling the &lt;code&gt;dev&lt;/code&gt; but with &lt;code&gt;NODE_ENV=production&lt;/code&gt; in front of it, we're gonna use this to create an optimized version of our Tailwind CSS file with only the classes we need for our project.&lt;/p&gt;

&lt;p&gt;We can now run this command to generate the Tailwind CSS file in development mode, which will include all classes that Tailwind has available.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also creates a &lt;code&gt;public&lt;/code&gt; folder for us. Now let's create an &lt;code&gt;index.html&lt;/code&gt; file inside that same folder.&lt;/p&gt;

&lt;p&gt;Inside, add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Tailwind CSS in Vanilla HTML!&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"tailwind.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-blue-600"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;hello!&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a basic HTML structure but take important notice on line 8, where we're linking our &lt;code&gt;tailwind.css&lt;/code&gt; file, it's important to realize this file is the one inside &lt;code&gt;public&lt;/code&gt;, and not the one inside &lt;code&gt;src&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we can customize Tailwind a little bit better, we need to create a &lt;code&gt;tailwind.config.js&lt;/code&gt;, we can do it automatically with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, to know exactly which files Tailwind need to look at to create an optimized version of the output in the build process, we need to tell it where to look. Go to &lt;code&gt;tailwind.config.js&lt;/code&gt; and modify the &lt;code&gt;purge&lt;/code&gt; line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;purge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./public/**/*.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// or 'media' or 'class'&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with this, you're set! You have successfully setup Tailwind CSS in your project and you're ready to create your amazing app.&lt;/p&gt;

&lt;p&gt;If you have enjoyed this tutorial and you would like to learn more, I'm creating a Tailwind CSS course called Windcourse, in which I have a video of this exact process and I'll be also going deep into how to use Tailwind with React and Next.js.&lt;/p&gt;

&lt;p&gt;If you are interested, &lt;a href="https://app.slip.so/presale/windcourse"&gt;you can pre-order it here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to follow me on Twitter for daily tech-related content &lt;a href="https://twitter.com/nachoiacovino"&gt;@nachoiacovino&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;This article was originally published in my blog,  &lt;a href="https://nachoiacovino.com/blog/how-to-setup-tailwind-css-in-a-vanilla-html-project?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=tailwind_vanilla"&gt;nachoiacovino.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>tailwindcss</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
