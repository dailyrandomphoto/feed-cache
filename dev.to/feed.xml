<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Building a Tailwind CSS badge component</title>
      <author>Zolt√°n Sz≈ëgy√©nyi</author>
      <pubDate>Mon, 27 Sep 2021 11:22:36 +0000</pubDate>
      <link>https://dev.to/themesberg/how-to-build-a-badge-component-in-tailwind-css-5bc4</link>
      <guid>https://dev.to/themesberg/how-to-build-a-badge-component-in-tailwind-css-5bc4</guid>
      <description>&lt;p&gt;I've been using Tailwind CSS in a lot of my projects lately and one of the disadvantages that I've found that it does not come with a base set of components that you can use right away.&lt;/p&gt;

&lt;p&gt;I've started a series of tutorials on how to build commonly used components with Tailwind CSS and today I want to show you how you can build a badge element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jRuYm-39--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buiz23y45q3mo8ttur0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jRuYm-39--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buiz23y45q3mo8ttur0i.png" alt="Tailwind CSS badge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-badge-component"&gt;
  &lt;/a&gt;
  Tailwind CSS badge component
&lt;/h2&gt;

&lt;p&gt;First of all, let's start with the HTML markup. I recommend using a simple &lt;code&gt;span&lt;/code&gt; element for the badge so that it can easily be added inside other elements as an inline element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span&amp;gt;Badge text&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up we should make it look like a badge by adding a padding, background color and text color:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span class="bg-blue-100 text-blue-800 px-2.5 py-0.5"&amp;gt;Default&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's also set the text size and font weight of the badge:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5"&amp;gt;Default&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can make it look nicer by also adding a border radius:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-md"&amp;gt;Default&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! Now we have created a badge element. However, what if you want to create a slightly larger badge? No problem, all you need to do is increase the padding and font size of the badge.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span class="bg-blue-100 text-blue-800 text-sm font-medium mr-2 px-2.5 py-0.5 rounded-md"&amp;gt;Default&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#badge-as-a-link"&gt;
  &lt;/a&gt;
  Badge as a link
&lt;/h2&gt;

&lt;p&gt;You can also easily change the badge component to become a link by changing the &lt;code&gt;span&lt;/code&gt; element to an anchor tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="#" class="bg-blue-100 hover:bg-blue-200 text-blue-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded-md"&amp;gt;Default&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#badge-with-icon"&gt;
  &lt;/a&gt;
  Badge with icon
&lt;/h2&gt;

&lt;p&gt;Sometimes adding an icon can improve a lot in terms of UI and even usability. I recommend using SVG icons for better performance. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span class="bg-gray-100 text-gray-800 text-xs font-medium inline-flex items-center px-2.5 py-0.5 rounded-md mr-2"&amp;gt;
  &amp;lt;svg class="w-3 h-3 mr-1 text-gray-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
  3 days ago
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope this tutorial helps you in your journey with Tailwind and your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-components-library-flowbite"&gt;
  &lt;/a&gt;
  Tailwind CSS Components Library - Flowbite
&lt;/h2&gt;

&lt;p&gt;This &lt;a href="https://flowbite.com/docs/components/badge/"&gt;Tailwind badge component&lt;/a&gt; is part of a larger Tailwind CSS components library that I helped develop. It is open source under the MIT license and it is also published on &lt;a href="https://github.com/themesberg/flowbite"&gt;Github&lt;/a&gt; and NPM.&lt;/p&gt;

&lt;p&gt;Learn more about Flowbite, a &lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;Tailwind CSS components library&lt;/a&gt; by following the quickstart guide.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>tutorial</category>
      <category>opensource</category>
    </item>
    <item>
      <title>üí≠ How to make clear &amp; pretty error messages from the Go backend to your frontend?</title>
      <author>Vic Sh√≥stak</author>
      <pubDate>Mon, 27 Sep 2021 11:19:49 +0000</pubDate>
      <link>https://dev.to/koddr/how-to-make-clear-pretty-error-messages-from-the-go-backend-to-your-frontend-21b2</link>
      <guid>https://dev.to/koddr/how-to-make-clear-pretty-error-messages-from-the-go-backend-to-your-frontend-21b2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hey-hey, awesome DEV people! üòâ&lt;/p&gt;

&lt;p&gt;How about a little time in the company of an article that teaches you how to better communicate with the frontend developers on your team? Intrigued, but don't know what it's about? Don't worry, I'll explain it all now!&lt;/p&gt;

&lt;p&gt;üëÄ I often notice an interesting trend in my work: the backend developer sends error statuses and explanations to the frontend, which are not always clear how to handle and output to the user in the application. As a result, the frontend developer spends precious time understanding what's going on and implementing borderline cases in the code.&lt;/p&gt;

&lt;p&gt;üí° But, what if I told you that errors from the backend can be not just readable to the developer, but understandable even to the user? Yes, that's accurately what this article will talk about! &lt;/p&gt;

&lt;p&gt;We will take a look at package &lt;a href="https://github.com/go-playground/validator"&gt;go-playground/validator&lt;/a&gt; &lt;code&gt;v10&lt;/code&gt;, which is almost the number one choice for such problems in Go.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  üìù Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#model-to-validate"&gt;Model to validate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vanilla-representation-of-the-error-from-package"&gt;Vanilla representation of the error from package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#recreate-validator"&gt;Recreate validator&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#function-to-check-the-validation-error"&gt;Function to check the validation error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#custom-validation-tag"&gt;Custom validation tag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#override-error-message"&gt;Override error message&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#model-to-validate"&gt;
  &lt;/a&gt;
  Model to validate
&lt;/h2&gt;

&lt;p&gt;Imagine we need to implement backend validation of incoming data from &lt;code&gt;POST&lt;/code&gt; request to REST API endpoint of new project creation. Can you imagine? Okay, now let's describe this structure in Go code.&lt;/p&gt;

&lt;p&gt;Besides the standard attributes &lt;code&gt;db:"..."&lt;/code&gt; and &lt;code&gt;json:"..."&lt;/code&gt;, we need to add a new attribute &lt;code&gt;validate:"..."&lt;/code&gt; with the required validation tag from the &lt;code&gt;go-playground/validator&lt;/code&gt; package to each structure field that we need to validate.&lt;/p&gt;

&lt;p&gt;It only sounds very complicated, in fact, everything is much simpler. Look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./app/models/project_model.go&lt;/span&gt;

&lt;span class="c"&gt;// Project struct to describe project.&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Project&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`db:"title" json:"title" validate:"required,lte=25"`&lt;/span&gt; 
    &lt;span class="c"&gt;// --&amp;gt; verify that the field exists and is less than or equal to 25 characters&lt;/span&gt;

    &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`db:"description" json:"description" validate:"required"`&lt;/span&gt;
    &lt;span class="c"&gt;// --&amp;gt; verify that the field exists&lt;/span&gt;

    &lt;span class="n"&gt;WebsiteURL&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`db:"website_url" json:"website_url" validate:"uri"`&lt;/span&gt;
    &lt;span class="c"&gt;// --&amp;gt; verify that the field is correct URL string&lt;/span&gt;

    &lt;span class="n"&gt;Tags&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`db:"tags" json:"tags" validate:"len=3"`&lt;/span&gt;
    &lt;span class="c"&gt;// --&amp;gt; verify that the field contains exactly three elements&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è &lt;strong&gt;Note:&lt;/strong&gt; These are not all the parameters by which you can configure field validation for your structures! You can find the full list &lt;a href="https://github.com/go-playground/validator#baked-in-validations"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An interesting thing is that if we specify a validator to check, for example, if the URL validated, then we don't need to specify the &lt;code&gt;required&lt;/code&gt; validation tag anymore. This happens because an empty string is not a valid URL. &lt;/p&gt;

&lt;p&gt;In other words, almost any validation tag will also include a mandatory non-empty value (&lt;em&gt;empty string&lt;/em&gt;, &lt;em&gt;zero&lt;/em&gt;, &lt;em&gt;nil&lt;/em&gt;, ‚Ä¶) for the field.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vanilla-representation-of-the-error-from-package"&gt;
  &lt;/a&gt;
  Vanilla representation of the error from package
&lt;/h2&gt;

&lt;p&gt;Input JSON body (&lt;em&gt;here and below, we will work with these very input parameters for the JSON request body&lt;/em&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"website_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"not-valid-uri"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"two"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will display the resulting error response as plain text so that you can appreciate why this presentation option for the frontend would &lt;em&gt;not&lt;/em&gt; be good:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Key: 'Project.Title' Error:Field validation for 'Title' failed on the 'required' tag

Key: 'Project.Description' Error:Field validation for 'Description' failed on the 'required' tag

Key: 'Project.WebsiteURL' Error:Field validation for 'WebsiteURL' failed on the 'uri' tag

Key: 'Project.Tags' Error:Field validation for 'Tags' failed on the 'len' tag
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there are several important points that we want to improve right away.&lt;/p&gt;

&lt;p&gt;First, the frontend knows nothing about the structures and models in our application. If the backend returns an error in this form (&lt;em&gt;without specifying at least the field that failed validation&lt;/em&gt;), the frontend will not be able to make a visual output of the error for a particular field.&lt;/p&gt;

&lt;p&gt;Second, it's better to specify the exact names of the fields which the frontend works with ‚Äî not &lt;code&gt;WebsiteURL&lt;/code&gt; but &lt;code&gt;website_url&lt;/code&gt;, like in JSON.&lt;/p&gt;

&lt;p&gt;Third, the error description itself will not tell the user (or even the frontend developer) anything useful, except that something went wrong somewhere.&lt;/p&gt;

&lt;p&gt;Well, let's try to improve it! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è &lt;strong&gt;Note:&lt;/strong&gt; I will show you the way I do it on my projects. By the way, I'd be happy to get feedback and examples of how you customize error output for frontend in your projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recreate-validator"&gt;
  &lt;/a&gt;
  Recreate validator
&lt;/h2&gt;

&lt;p&gt;Great, we get rid of the fields with names, like in the structure. We just override their output, so that the validator looks at the &lt;code&gt;json:"..."&lt;/code&gt; parameter in the structure, not at its actual name.&lt;/p&gt;

&lt;p&gt;To complete this, we use the &lt;code&gt;RegisterTagNameFunc&lt;/code&gt; method built into the package with a little magic. I will put this in a different helper package (&lt;code&gt;./pkg/utilities/validator.go&lt;/code&gt;) so that there is more readable application code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./pkg/utilities/validator.go&lt;/span&gt;

&lt;span class="c"&gt;// NewValidator func for create a new validator for struct fields.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewValidator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Create a new validator.&lt;/span&gt;
    &lt;span class="n"&gt;validate&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Rename struct fields to JSON.&lt;/span&gt;
    &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterTagNameFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fl&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StructField&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SplitN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"json"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;","&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to avoid renaming any of the fields, add &lt;code&gt;,-&lt;/code&gt; (comma + dash) to the end of its JSON name, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;WebsiteURL&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`db:"website_url" json:"website_url,-" validate:"uri"`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, you got me right, this method opens up great possibilities to customize the error output itself. You can rely not on &lt;code&gt;json:"..."&lt;/code&gt; attribute in the field, but on your one, for example, &lt;code&gt;field_name:"..."&lt;/code&gt; or any other one you wish.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è &lt;strong&gt;Note:&lt;/strong&gt; To understand how it works, please follow &lt;a href="https://github.com/go-playground/validator/issues/258"&gt;this&lt;/a&gt; issue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#function-to-check-the-validation-error"&gt;
  &lt;/a&gt;
  Function to check the validation error
&lt;/h3&gt;

&lt;p&gt;Let's move on. It's time to make a nicer output of validation errors, so that the frontend developer on your team will thank you.&lt;/p&gt;

&lt;p&gt;I always use this practice when implementing a REST API in JSON format for internal use (&lt;em&gt;e.g., for &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/SPA"&gt;single-page applications&lt;/a&gt; aka SPA&lt;/em&gt;):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We return JSON in strictly consistent notation with the frontend, but relative to the interaction objects;&lt;/li&gt;
&lt;li&gt;The status code of the response from the backend is always &lt;code&gt;HTTP 200 OK&lt;/code&gt;, unless it concerns server errors (status code &lt;code&gt;5XX&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;The server response always contains the &lt;code&gt;status&lt;/code&gt; field (type &lt;code&gt;int&lt;/code&gt;) indicating the actual status code;&lt;/li&gt;
&lt;li&gt;If an error occurred (status code not &lt;code&gt;2–•–•&lt;/code&gt;), the server response always contains a field &lt;code&gt;msg&lt;/code&gt; (type &lt;code&gt;string&lt;/code&gt;) with a short indication of the cause of the error;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Furthermore, in the example below, I took code from my project written using the &lt;a href="https://gofiber.io/"&gt;Fiber&lt;/a&gt; web framework. So, some elements from its libraries are present there. Don't be scared, the main thing here is to understand the principle of validation itself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è &lt;strong&gt;Note:&lt;/strong&gt; If you want to learn more about Fiber, I have a &lt;a href="https://dev.to/koddr/series/14132"&gt;series of articles&lt;/a&gt; to help you do that. I'd be glad if you'd study it later, too.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Okay, my function to check for validation errors would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./pkg/utilities/validator.go&lt;/span&gt;

&lt;span class="c"&gt;// ...&lt;/span&gt;

&lt;span class="c"&gt;// CheckForValidationError func for checking validation errors in struct fields.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;CheckForValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errFunc&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;statusCode&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;errFunc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"msg"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"validation errors for the %s fields"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s"&gt;"fields"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ValidatorErrors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errFunc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The principle of this function is elementary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accept the Fiber context to have all the possibilities to work with the context that came;&lt;/li&gt;
&lt;li&gt;Accept the object with the validation error defined above;&lt;/li&gt;
&lt;li&gt;Accept the status code, which should return if the error occurs;&lt;/li&gt;
&lt;li&gt;Accept the name of the object (or model) we're currently checking, so we can output a more readable error message;&lt;/li&gt;
&lt;li&gt;Return the generated JSON with all the necessary errors and explanations or &lt;code&gt;nil&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I can now easily use the &lt;code&gt;CheckForValidationError&lt;/code&gt; function in the controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./app/controllers/project_controller.go&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/my-user/my-repo/pkg/utilities"&lt;/span&gt; 
    &lt;span class="c"&gt;// --&amp;gt; add local package `utilities`&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// CreateNewProject func for create a new project.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;CreateNewProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;// ...&lt;/span&gt;

    &lt;span class="c"&gt;// Create a new validator, using helper function.&lt;/span&gt;
    &lt;span class="n"&gt;validate&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewValidator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Validate all incomming fields for rules in Project struct.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Returning error in JSON format with status code 400 (Bad Request).&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CheckForValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"project"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-validation-tag"&gt;
  &lt;/a&gt;
  Custom validation tag
&lt;/h3&gt;

&lt;p&gt;Every so often, it happens that the built-in validation tags (or rather, the rules by which a particular field should be validated) are not always sufficient. To solve this problem, the authors of &lt;code&gt;go-playground/validator&lt;/code&gt; package provided a special method.&lt;/p&gt;

&lt;p&gt;Let's consider its use on a simple example üëá&lt;/p&gt;

&lt;p&gt;So, we have a field with type &lt;code&gt;uuid.UUID&lt;/code&gt; which we create with the package &lt;a href="https://github.com/google/uuid"&gt;google/uuid&lt;/a&gt;, which we want to check with the built-in validator &lt;code&gt;uuid.Parse()&lt;/code&gt; of that package. All we need to do is add a new &lt;code&gt;RegisterValidation&lt;/code&gt; method to the &lt;code&gt;NewValidator&lt;/code&gt; function (&lt;em&gt;described above&lt;/em&gt;) with simple logic code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./pkg/utilities/validator.go&lt;/span&gt;

&lt;span class="c"&gt;// NewValidator func for create a new validator for struct fields.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewValidator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Create a new validator.&lt;/span&gt;
    &lt;span class="n"&gt;validate&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// ...&lt;/span&gt;

    &lt;span class="c"&gt;// Custom validation for uuid.UUID fields.&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"uuid"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fl&lt;/span&gt; &lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FieldLevel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;// convert to string&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="c"&gt;// field has error&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt; &lt;span class="c"&gt;// field has no error&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c"&gt;// ...&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! If the field passed validation, it will return &lt;code&gt;false&lt;/code&gt; logical value, and if there are any errors it will return &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è &lt;strong&gt;Note:&lt;/strong&gt; The method &lt;code&gt;RegisterValidation&lt;/code&gt; should be read and understood like this: ‚Äú&lt;em&gt;please check if there is an error in the value of the field with the validation tag &lt;code&gt;uuid&lt;/code&gt;?&lt;/em&gt;‚Äù.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we can validate fields of this type like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./app/models/something_model.go&lt;/span&gt;

&lt;span class="c"&gt;// MyStruct struct to describe something.&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;MyStruct&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UUID&lt;/span&gt; &lt;span class="s"&gt;`db:"id" json:"id" validate:"uuid"`&lt;/span&gt; 
    &lt;span class="c"&gt;// --&amp;gt; verify that the field is a valid UUID&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cp_ZS6lB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5trc230d303imerg3k6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cp_ZS6lB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5trc230d303imerg3k6.jpg" alt="Override error message"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#override-error-message"&gt;
  &lt;/a&gt;
  Override error message
&lt;/h2&gt;

&lt;p&gt;And now for the best part. Overriding the validation error message itself. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è &lt;strong&gt;Note:&lt;/strong&gt; Follow comments in the code to better understand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This helper function will map all validation errors to each field and then simply pass that map to the &lt;code&gt;CheckForValidationError&lt;/code&gt; function (&lt;em&gt;which we described in the previous section&lt;/em&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./pkg/utilities/validator.go&lt;/span&gt;

&lt;span class="c"&gt;// ...&lt;/span&gt;

&lt;span class="c"&gt;// ValidatorErrors func for show validation errors for each invalid fields.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;ValidatorErrors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Define variable for error fields.&lt;/span&gt;
    &lt;span class="n"&gt;errFields&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="c"&gt;// Make error message for each invalid field.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ValidationErrors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Get name of the field's struct.&lt;/span&gt;
        &lt;span class="n"&gt;structName&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c"&gt;// --&amp;gt; first (0) element is the founded name&lt;/span&gt;

        &lt;span class="c"&gt;// Append error message to the map, where key is a field name,&lt;/span&gt;
        &lt;span class="c"&gt;// and value is an error description.&lt;/span&gt;
        &lt;span class="n"&gt;errFields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"failed '%s' tag check (value '%s' is not valid for %s struct)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;structName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errFields&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you may have noticed, to override the field error message, we operate on special variables (&lt;code&gt;err.Namespace()&lt;/code&gt;, &lt;code&gt;err.Field()&lt;/code&gt;, &lt;code&gt;err.Tag()&lt;/code&gt; and &lt;code&gt;err.Value()&lt;/code&gt;) which the authors of the &lt;code&gt;go-playground/validator&lt;/code&gt; package offer us.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è &lt;strong&gt;Note:&lt;/strong&gt; You can find a complete list of all available ones &lt;a href="https://github.com/go-playground/validator/blob/master/_examples/simple/main.go#L69"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, we will get this message when we make an invalid request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"validation errors for the project fields"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"fields"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"category"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"failed 'required' tag check (value '' is not valid for Project struct)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"failed 'required' tag check (value '' is not valid for Project struct)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"failed 'len' tag check (value '[one two]' is not valid for Project struct)"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"failed 'required' tag check (value '' is not valid for Project struct)"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"website_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"failed 'uri' tag check (value 'not-valid-uri' is not valid for Project struct)"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è &lt;strong&gt;Note:&lt;/strong&gt; After validation, all not valid fields are in alphabetical order, not in the order that was defined by the Go structure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hooray! üéâ We got what we wanted and no one got hurt. On the contrary, everyone is happy, both on the frontend and the backend.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Authors of the package &lt;code&gt;go-playground/validator&lt;/code&gt; feat. Vic Sh√≥stak&lt;/li&gt;
&lt;li&gt;Markus Spiske &lt;a href="https://unsplash.com/photos/IiEFmIXZWSw"&gt;https://unsplash.com/photos/IiEFmIXZWSw&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more articles like this on this blog, then post a comment below and subscribe to me. Thanks! üòò&lt;/p&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Neo4j GraphQL Library 2.0.0</title>
      <author>Tomek Poniatowicz</author>
      <pubDate>Mon, 27 Sep 2021 11:03:20 +0000</pubDate>
      <link>https://dev.to/tomekponiat/neo4j-graphql-library-2-0-0-3cec</link>
      <guid>https://dev.to/tomekponiat/neo4j-graphql-library-2-0-0-3cec</guid>
      <description>&lt;p&gt;A while ago I wrote a bit about the GRAND stack, an integration of GraphQL, React, Apollo and the Neo4j Database. While working with the stack carries numerous benefits (and hey if you‚Äôre curious about those head on over and &lt;a href="https://blog.graphqleditor.com/grandstack"&gt;read about them here&lt;/a&gt;) it can be a bit overwhelming to get straight into it if you‚Äôre just starting out. So this time let's just look at the integration of the ‚ÄòG‚Äô with the ‚ÄòN‚Äô and with good reason as there is quite a bit of new stuff to check out there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-grand-to-js"&gt;
  &lt;/a&gt;
  From GRAND to .js
&lt;/h2&gt;

&lt;p&gt;The GRAND stack has made use of combining the strengths of the Neo4j database with GraphQL for a while, but the team at Neo4j wasn't resting on their laurels and has been hard at work to improve on the benefits of combining the two technologies. In 2018 they released  a library neo4j-graphql.js, a GraphQL-to-Cypher based query execution layer for Neo4j and JavaScript GraphQL implementations. To put it short, something that gives you a fully functioning GraphQL API backed by Neo4j just by using type implementations from the GraphQL schema. The library was very useful and quite popular so it's not surprising they decided to build on that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beta-and-100"&gt;
  &lt;/a&gt;
  Beta and 1.0.0
&lt;/h2&gt;

&lt;p&gt;In early april of 2021 the Neo4j team announced that after a year of hard work they‚Äôre releasing a beta of the Neo4j GraphQL library. Since then they‚Äôve only picked up the pace with the full stable 1.0.0 release coming in that very same month. Even at just a glance the features look pretty enticing&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Automatic query and mutation generation for CRUD interactions&lt;/li&gt;
&lt;li&gt;Object Graph Mapper for programmatic interaction with your GraphQL API&lt;/li&gt;
&lt;li&gt;node and relationship properties support&lt;/li&gt;
&lt;li&gt;custom resolver support&lt;/li&gt;
&lt;li&gt;multiple pagination options&lt;/li&gt;
&lt;li&gt;authentication and authorisation options with additional access control options&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#onto-200"&gt;
  &lt;/a&gt;
  Onto 2.0.0
&lt;/h2&gt;

&lt;p&gt;Continuing with their blistering pace, neo4j dropped version 2.0.0 of their library on august tenth. While you could say that on the whole this library is a replacement or rather a continuation of the neo4j-graphql.js library with the sheer number of features it has far surpassed it. Aside from the usual stuff you can expect from a 2.0 update like bug fixes or performance improvements we have a few completely new features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;relationship properties&lt;/strong&gt;: This is the star of the show, adding relationships to your type definitions provides way more context for your data. This way when fetching data you will have a much clearer picture than you would with just disconnected nodes. This solution combines rich and interconnected data with the transparency of GraphQL letting you easily build apps even when using quite complex data sets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cursor-based pagination&lt;/strong&gt;: on relationship connected fields in your schema you‚Äôre able to use cursor-based pagination which is especially handy for infinitely scrolling apps&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Count queries&lt;/strong&gt;: if cursor based pagination is not your thing you can now use a simple query for counting all user nodes&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#graphql-easy-on-the-eye"&gt;
  &lt;/a&gt;
  GraphQL = easy on the eye
&lt;/h2&gt;

&lt;p&gt;That‚Äôs not all, the update also provides improvements to union relationship fields, more comprehensive validation of type definitions and various bug fixes. On the whole the key thing is still utilizing how good GraphQL is at displaying even complex data and relationships is probably the best way to take full advantage of that. Even if that doesn't convince you, with how quickly the development is going on this particular library, you can be sure a lot of additional features will be added very soon.&lt;/p&gt;

&lt;p&gt;Oh and make sure to check this video presenting Neo4j GraphQL Library in action:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Ww3XclhuaaU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;&lt;em&gt;A guest blog post for &lt;a href="https://blog.graphqleditor.com/"&gt;GraphQL Editor blog&lt;/a&gt; by Micha≈Ç Tyszkiewicz&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#speed-up-your-graphql-api-development"&gt;
  &lt;/a&gt;
  Speed up your GraphQL API development
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GraphQL Editor&lt;/strong&gt; is a supportive tool for both advanced GraphQL users as well as those taking their first steps with GraphQL APIs. Our all-in-one development environment for GraphQL will help you build, manage &amp;amp; deploy your GraphQL API much faster. &lt;strong&gt;&lt;a href="https://graphqleditor.com"&gt;Try GraphQL Editor for free!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Trying out Next.js for the first time ü§Ø</title>
      <author>Gourav Khunger</author>
      <pubDate>Mon, 27 Sep 2021 10:56:47 +0000</pubDate>
      <link>https://dev.to/gouravkhunger/trying-out-next-js-for-the-first-time-3k6g</link>
      <guid>https://dev.to/gouravkhunger/trying-out-next-js-for-the-first-time-3k6g</guid>
      <description>&lt;p&gt;You read the title right! I tried something other than Android this time :P&lt;/p&gt;

&lt;p&gt;I have always been wanting to learn web development. If you know my background, you probably know I first learned HTML, CSS, and really basic Javascript at first. If not, consider reading &lt;a href="https://genicsblog.com/3-years-of-blogging"&gt;this article&lt;/a&gt; to know more about my journey:&lt;/p&gt;

&lt;p&gt;But just learning that wasn't enough to make better websites. Technically we can make functional websites with them. But &lt;strong&gt;it isn't intuitive&lt;/strong&gt;. Using just HTML and CSS to make a good-looking website is a headache because files become too long to manage. At least that was the case for me :(&lt;/p&gt;

&lt;p&gt;Sure, you can use tools like Tailwind CSS, but neither was I aware of such tools nor did I knew there are frameworks like React, Angular, Vue, etc. which can make the process of building websites easy.&lt;/p&gt;

&lt;p&gt;It was obvious that I left web dev back then and that was when I turned to Android. I have been doing Android dev for more than 2 years now. And I recently realized - &lt;strong&gt;staying in a single domain while the tech world progresses will slow your progress&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I am not saying you should learn everything that comes out each day. But having a gist of other things won't be harming you. I have tried both things- sticking to a single tech and also trying different things. And I bet you, trying new things teaches more than repeating what you know again and again!&lt;/p&gt;

&lt;p&gt;For a long time, I wanted to try out web dev again, more because websites work on any device, and just knowing Android was limiting me to the devices I can make apps for.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://hashnode.com/bootcamp"&gt;Hashnode Bootcamp&lt;/a&gt;'s Day 5 task was a perfect moment I could try a new thing and write about it. And here I am writing about using Next.js for two really basic things I needed to work on. Here are the projects:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#birthday-wish-generator"&gt;
  &lt;/a&gt;
  Birthday Wish Generator
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://hbdwish.ml"&gt;Check it out&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub Repo: &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gouravkhunger"&gt;
        gouravkhunger
      &lt;/a&gt; / &lt;a href="https://github.com/gouravkhunger/nextjs-birthday-wish"&gt;
        nextjs-birthday-wish
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is a minimal Next.js app where you can create birthday wishes and share the link to anyone :)
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Happy Birthday Wisher&lt;/h1&gt;
&lt;p&gt;Check out the &lt;a href="https://hbdwish.ml" rel="nofollow"&gt;Live Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a simple &lt;a href="https://nextjs.org/" rel="nofollow"&gt;Next.js&lt;/a&gt; project where you can generate a birthday wish for someone.&lt;/p&gt;
&lt;p&gt;Just enter their name, press Go and share them the generated link :)&lt;/p&gt;
&lt;p&gt;Don't forget to ‚≠êÔ∏è this repository!&lt;/p&gt;
&lt;h2&gt;
Images&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/gouravkhunger/nextjs-birthday-wish/main/media/image.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pcKkPey0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/gouravkhunger/nextjs-birthday-wish/main/media/image.png" alt="Happy Birthday Wisher Home Page"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Local Setup&lt;/h2&gt;
&lt;p&gt;First, clone this repository:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/gouravkhunger/nextjs-birthday-wisher
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, run the development server:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm run dev
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn dev&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; with your browser to see the result.&lt;/p&gt;
&lt;p&gt;You can start editing the page by modifying &lt;code&gt;pages/index.js&lt;/code&gt;. The page auto-updates as you edit the file.&lt;/p&gt;
&lt;h2&gt;
Learn More&lt;/h2&gt;
&lt;p&gt;To learn more about Next.js, take a look at the following resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/docs" rel="nofollow"&gt;Next.js Documentation&lt;/a&gt; - learn about Next.js features and API.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/learn" rel="nofollow"&gt;Learn Next.js&lt;/a&gt; - an interactive Next.js tutorial.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can check out &lt;a href="https://github.com/vercel/next.js/"&gt;the Next.js GitHub repository&lt;/a&gt; - your feedback and contributions are welcome!&lt;/p&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;
&lt;pre&gt;&lt;code&gt;MIT License
Copyright (c) 2021 Gourav Khunger

Permission is hereby granted, free of&lt;/code&gt;&lt;/pre&gt;‚Ä¶&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/gouravkhunger/nextjs-birthday-wish"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;One of my friend's birthdays is near and I wanted to do something special for them. And looking at the Next.js, I quickly thought to make a simple page with some confetti popping in the background, and their name on the front.&lt;/p&gt;

&lt;p&gt;I quickly made the project with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app nextjs-birthday-wish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But this thought struck my mind: Since I am gonna deploy it to Vercel anyway, I can make a home page where anyone can enter the name of the person they want to send a wish, and then copy the generated link to be sent.&lt;/p&gt;

&lt;p&gt;Also, I could make it open source just to increase the number of reports on my profile so that I can flex on the count.&lt;/p&gt;

&lt;p&gt;I quickly created two pages, along with their CSS modules. Here are the screenshots:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#home-page"&gt;
  &lt;/a&gt;
  Home Page
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hgkq2cFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632674975999/NHbFfU1vZ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hgkq2cFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632674975999/NHbFfU1vZ.jpeg" alt="one.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#birthday-wish"&gt;
  &lt;/a&gt;
  Birthday Wish
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xCZb8ilw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632675120489/1uZ_YLvsn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCZb8ilw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632675120489/1uZ_YLvsn.jpeg" alt="two.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I completed the project in 3 hours, took so long because I had to test 7 different confetti libraries that work with Next.js üòÇ. Finally used &lt;code&gt;[confetti-js](https://www.npmjs.com/package/confetti-js)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I also spent some time on CSS and the routing stuff- because I don't know CSS that well, but I am improving day by day. The CSS design of this blog is done by me!&lt;/p&gt;

&lt;p&gt;But I think I did a pretty decent job. And it was fun trying next js for the first time, it's a great framework on top of React, so if you are learning Next.js you are learning concepts of React too. So it is a win-win case.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#s%CC%B6t%CC%B6r%CC%B6i%CC%B6k%CC%B6e%CC%B6d%CC%B6-%CC%B6t%CC%B6e%CC%B6x%CC%B6t%CC%B6-%CC%B6g%CC%B6e%CC%B6n%CC%B6e%CC%B6r%CC%B6a%CC%B6t%CC%B6o%CC%B6r%CC%B6"&gt;
  &lt;/a&gt;
  SÃ∂tÃ∂rÃ∂iÃ∂kÃ∂eÃ∂dÃ∂ Ã∂TÃ∂eÃ∂xÃ∂tÃ∂ Ã∂GÃ∂eÃ∂nÃ∂eÃ∂rÃ∂aÃ∂tÃ∂oÃ∂rÃ∂
&lt;/h2&gt;

&lt;p&gt;(The title for this section is generated with this tool üòÇ)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://strikeit.ml/"&gt;Check out the project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub repo:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gouravkhunger"&gt;
        gouravkhunger
      &lt;/a&gt; / &lt;a href="https://github.com/gouravkhunger/nextjs-strikeit"&gt;
        nextjs-strikeit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A simple site to get a striked through version of text.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
StrikeIt&lt;/h1&gt;
&lt;p&gt;Check out the &lt;a href="https://strikeit.ml" rel="nofollow"&gt;Live Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a simple &lt;a href="https://nextjs.org/" rel="nofollow"&gt;Next.js&lt;/a&gt; site to quickly get the striked through version of text copied to your keyboard.&lt;/p&gt;
&lt;p&gt;Don't forget to ‚≠êÔ∏è this repository!&lt;/p&gt;
&lt;h2&gt;
Images&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/gouravkhunger/nextjs-strikeit/main/media/one.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1HzQcCtc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/gouravkhunger/nextjs-strikeit/main/media/one.png" alt="StrikeIt Home Page"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/gouravkhunger/nextjs-strikeit/main/media/two.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jWLujVOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/gouravkhunger/nextjs-strikeit/main/media/two.png" alt="Striked Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Local Setup&lt;/h2&gt;
&lt;p&gt;First, clone this repository:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/gouravkhunger/nextjs-strikeit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; into the folder and then, run the development server:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm run dev
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn dev&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; with your browser to see the result.&lt;/p&gt;
&lt;p&gt;You can start editing the page by modifying &lt;code&gt;pages/index.js&lt;/code&gt;. The page auto-updates as you edit the file.&lt;/p&gt;
&lt;h2&gt;
Learn More&lt;/h2&gt;
&lt;p&gt;To learn more about Next.js, take a look at the following resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/docs" rel="nofollow"&gt;Next.js Documentation&lt;/a&gt; - learn about Next.js features and API.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/learn" rel="nofollow"&gt;Learn Next.js&lt;/a&gt; - an interactive Next.js tutorial.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can check out &lt;a href="https://github.com/vercel/next.js/"&gt;the Next.js GitHub repository&lt;/a&gt; - your feedback and contributions are welcome!&lt;/p&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;
&lt;pre&gt;&lt;code&gt;MIT License
Copyright (c) 2021 Gourav Khunger

Permission is hereby granted, free of charge, to any person obtaining a&lt;/code&gt;&lt;/pre&gt;‚Ä¶&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/gouravkhunger/nextjs-strikeit"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here are the images:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#home-page"&gt;
  &lt;/a&gt;
  Home Page
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tqnR1B5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632674734678/ik7IJW6Yt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tqnR1B5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632674734678/ik7IJW6Yt.jpeg" alt="one.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview-of-striked-text"&gt;
  &lt;/a&gt;
  Preview of striked text
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g_OzS5FB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632674743501/Wvr_3Y_om.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g_OzS5FB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632674743501/Wvr_3Y_om.jpeg" alt="two.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I needed this generator because I use Google Calendar to stay focused and plan the work I have for a day. &lt;/p&gt;

&lt;p&gt;I don't clutter my day with huge time boxes because that doesn't work for me and I need the flexibility to carry out my tasks.&lt;/p&gt;

&lt;p&gt;What I do is: I copy a template of three events for each day the day before it, and put the things I need to carry out in their respective category.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MdQLZvrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632672045301/bk9x2KLPn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MdQLZvrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632672045301/bk9x2KLPn.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This works well for me. But actually, the text in google calendar events cannot be striked through once it is completed- as you can do for tasks rather than events.&lt;/p&gt;

&lt;p&gt;I could have used many of the text formatting tools available online to cut my text and strike to check them off. But I generally forget random website names and the same would be the case with many üòÇ. Also, most free tools have ads and trackers, which isn't convenient.&lt;/p&gt;

&lt;p&gt;So, why not try to build this thing with Next.js? The thought of increasing repo count on GitHub profile still came üòú.&lt;/p&gt;

&lt;p&gt;I again quickly made a new Next.js  project, deleted the unnecessary blurb that comes by default then copied from the last project added the text box.&lt;/p&gt;

&lt;p&gt;This time I faced a new difficulty- to display the striked text preview in a paragraph below the input box. I could set an event listener when the input box's text changed, but didn't know what to do to get a reference of the paragraph below it, as we can't do the traditional &lt;code&gt;document.getElementById()&lt;/code&gt; in Next.js apps.&lt;/p&gt;

&lt;p&gt;With some research, I learned we can use &lt;code&gt;useRef&lt;/code&gt; to maintain a ref of elements, and it worked! I learned how &lt;a href="https://stackoverflow.com/a/53836006/9819031"&gt;this snippet&lt;/a&gt; gives you striked version of the text and then implemented it when input occurs.&lt;/p&gt;

&lt;p&gt;I learned how easy it is to copy something to the device clipboard using Next.js. This piece of snippet does the work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This will be copied!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It took me ~4 hours for this project because I wanted to make it responsive and I was struggling with the input box width for different screens, at the end made it work well with some hit and trial üòÜ&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h1&gt;

&lt;p&gt;I hope you liked the article, consider commenting to let me know what you think!&lt;/p&gt;

&lt;p&gt;It was my first experience with Next.js and I must admit it was really good. Though I got many errors and go to learn a lot in the meantime, it was worth it!&lt;/p&gt;

&lt;p&gt;Do check out the projects on GitHub and star them. And since you are going to star them, why not follow me there too? üòÜ&lt;/p&gt;

&lt;p&gt;I post resourceful content on this blog, consider subscribing to the newsletter by filling the form at the top of the article to get notified of the new content that I keep posting. Alternatively, &lt;a href="https://hashnode.com/@gouravkhunger/joinme"&gt;join Hashnode&lt;/a&gt; and &lt;a href="https://hashnode.com/@gouravkhunger"&gt;follow me&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://genicsblog.com/contact"&gt;Let's get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Originally posted on &lt;a href="https://genicsblog.com"&gt;genicsblog.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>nextjs</category>
      <category>webdev</category>
      <category>projects</category>
    </item>
    <item>
      <title>Integrate Authentication to your Android App with Auth0</title>
      <author>Gourav Khunger</author>
      <pubDate>Mon, 27 Sep 2021 10:40:51 +0000</pubDate>
      <link>https://dev.to/byteslash/integrate-authentication-to-your-android-app-with-auth0-2hcf</link>
      <guid>https://dev.to/byteslash/integrate-authentication-to-your-android-app-with-auth0-2hcf</guid>
      <description>&lt;p&gt;&lt;a href="https://auth0.com"&gt;Auth0&lt;/a&gt; is an amazing tool to easily integrate user authentication in any kind of app you are building. It has a great set of tools to enable auth in your app in a few really quick steps.&lt;/p&gt;

&lt;p&gt;Today, we are going to look into how to integrate Auth0 into your Android App! First, we'll set up the local project for integrating Auth0, and then we'll set up the app on the Auth0 dashboard.&lt;/p&gt;

&lt;p&gt;Check out this video to learn what we are going to build in this tutorial:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/obk3q1AaH6I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The code for this basic app that we are going to build is present here on GitHub, star it and follow me :)&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gouravkhunger"&gt;
        gouravkhunger
      &lt;/a&gt; / &lt;a href="https://github.com/gouravkhunger/auth0-demo-android"&gt;
        auth0-demo-android
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Demo implementation of Auth0 Authentication for Android
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Demo Implementation of Auth0&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://genicsblog.com/authentication-in-android-app-with-auth0" rel="nofollow"&gt;Read the article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Demo implementation of Auth0 Authentication for Android.&lt;/p&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;This project is &lt;a href="https://github.com/gouravkhunger/auth0-demo-android/blob/main/LICENSE"&gt;&lt;code&gt;MIT&lt;/code&gt;&lt;/a&gt; Licensed.&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;
&lt;pre&gt;&lt;code&gt;MIT License
Copyright (c) 2021 Gourav Khunger

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS&lt;/code&gt;&lt;/pre&gt;‚Ä¶&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/gouravkhunger/auth0-demo-android"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#android-app-setup"&gt;
  &lt;/a&gt;
  Android app setup
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#initialize-the-project"&gt;
  &lt;/a&gt;
  Initialize the project
&lt;/h2&gt;

&lt;p&gt;First, create a new Android Studio Project.  If you are just checking out Auth0, you can follow the steps mentioned in one of my previous articles on &lt;a href="https://genicsblog.com/how-to-create-your-first-android-app-using-android-studio"&gt;how to make a basic project using Android Studio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also use any existing project!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-view-binding"&gt;
  &lt;/a&gt;
  Set up view binding
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h3&gt;

&lt;p&gt;View binding is a new way of referencing views from XML layouts inside your java/kotlin classes. View Binding creates a Binding class for each XML layout resource which you can use to refer views without the hassle of using &lt;code&gt;findViewById()&lt;/code&gt; or using the deprecated kotlin synthetics.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enable-view-binding"&gt;
  &lt;/a&gt;
  Enable View Binding
&lt;/h3&gt;

&lt;p&gt;If you are reading this post in the future, chances are that view binding is supported right into new projects using Android Studio.&lt;/p&gt;

&lt;p&gt;If not, you can go into the App level &lt;code&gt;build.gradle&lt;/code&gt; file and add this piece of code anywhere inside the &lt;code&gt;android&lt;/code&gt; scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;&lt;span class="n"&gt;buildFeatures&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;viewBinding&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This image will give you a gist of where to add it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U2jk4djG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632594546418/IWp7Zd5Ju.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U2jk4djG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632594546418/IWp7Zd5Ju.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrate-auth0"&gt;
  &lt;/a&gt;
  Integrate Auth0
&lt;/h2&gt;

&lt;p&gt;To integrate Auth0 into our project, we need to do the following things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-auth0-dependencies"&gt;
  &lt;/a&gt;
  Add Auth0 dependencies
&lt;/h3&gt;

&lt;p&gt;In your app level &lt;code&gt;build.gradle&lt;/code&gt; dependencies section, add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;&lt;span class="k"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ... other dependencies&lt;/span&gt;

  &lt;span class="c1"&gt;// Auth0 Android SDK&lt;/span&gt;
  &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'com.auth0.android:auth0:2.4.0'&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kgAJKGMq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632596987895/ChRu2ueYY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kgAJKGMq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632596987895/ChRu2ueYY.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-manifest-placeholders"&gt;
  &lt;/a&gt;
  Add manifest placeholders
&lt;/h3&gt;

&lt;p&gt;You need to add one more simple line of code to the app level &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;&lt;span class="n"&gt;android&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;defaultConfig&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// ...&lt;/span&gt;

        &lt;span class="c1"&gt;// Add this&lt;/span&gt;
        &lt;span class="n"&gt;manifestPlaceholders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nl"&gt;auth0Domain:&lt;/span&gt; &lt;span class="s2"&gt;"@string/com_auth0_domain"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;auth0Scheme:&lt;/span&gt; &lt;span class="s2"&gt;"demo"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates an &lt;code&gt;intent-filter&lt;/code&gt; which is used by the library to open your app back once the login is done by the user. If this is not done you have to define an &lt;code&gt;intent-filter&lt;/code&gt; on your own. This method is easier than handling that.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The &lt;code&gt;@string/com_auth0_domain&lt;/code&gt; is actually a string resource, you need to declare it in your &lt;code&gt;strings.xml&lt;/code&gt; as follows:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"com_auth0_domain"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Your domain here&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNv0VXFK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632597709645/Q0e7v73bC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNv0VXFK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632597709645/Q0e7v73bC.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't worry if you don't have a domain like this yet, scroll below to find the auth0 dashboard setup, or you can skip this for now and come back to it later!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Press Sync Now on the notification bar to complete the finalize the above things&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SwlAAmOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632597868902/ZQFHTYOs_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SwlAAmOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632597868902/ZQFHTYOs_.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-internet-permissions-to-manifest"&gt;
  &lt;/a&gt;
  Add Internet Permissions to Manifest
&lt;/h3&gt;

&lt;p&gt;You would need to add the internet permission to the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file to allow network access, else the app may crash during login process.&lt;/p&gt;

&lt;p&gt;Add this line in your &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file as shown in the image below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.permission.INTERNET"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qpe9uI07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632598305357/oBXJKdYTY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qpe9uI07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632598305357/oBXJKdYTY.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-a-basic-ui"&gt;
  &lt;/a&gt;
  Make a basic UI
&lt;/h2&gt;

&lt;p&gt;Open the &lt;code&gt;res/layout/activity_main.xml&lt;/code&gt; file and replace the content with this layout:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;LinearLayout&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:app=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res-auto"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:tools=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/tools"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="na"&gt;android:orientation=&lt;/span&gt;&lt;span class="s"&gt;"vertical"&lt;/span&gt;
    &lt;span class="na"&gt;android:gravity=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;
    &lt;span class="na"&gt;tools:context=&lt;/span&gt;&lt;span class="s"&gt;".MainActivity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/nameTv"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_margin=&lt;/span&gt;&lt;span class="s"&gt;"10dp"&lt;/span&gt;
        &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;"30sp"&lt;/span&gt;
        &lt;span class="na"&gt;android:textColor=&lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"@string/john_doe"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/emailTv"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_marginBottom=&lt;/span&gt;&lt;span class="s"&gt;"28dp"&lt;/span&gt;
        &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;"18sp"&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"@string/email"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"@string/login"&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/loginBtn"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_marginTop=&lt;/span&gt;&lt;span class="s"&gt;"20dp"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"@string/logout"&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/logoutBtn"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_marginTop=&lt;/span&gt;&lt;span class="s"&gt;"10dp"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a simple layout that has the name and email text on top and two buttons to log-in and log-out. You'll have to create string resources for dummy name and email placeholder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oHP4VNki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632600993177/-UK3Y3RsZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oHP4VNki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632600993177/-UK3Y3RsZ.png" alt="Screenshot_1632600899.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-the-raw-mainactivity-endraw-"&gt;
  &lt;/a&gt;
  Coding the &lt;code&gt;MainActivity&lt;/code&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#initialize-view-binding"&gt;
  &lt;/a&gt;
  Initialize View Binding
&lt;/h3&gt;

&lt;p&gt;Create a &lt;code&gt;lateinit var&lt;/code&gt; for the view binding:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ActivityMainBinding&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inflate the binding the the &lt;code&gt;onCreate()&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;binding&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ActivityMainBinding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inflate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layoutInflater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, set the root element of the binding as the content view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what the &lt;code&gt;MainActivity.kt&lt;/code&gt; file looks like after doing the above changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="c1"&gt;// package name&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.github.gouravkhunger.auth0demo&lt;/span&gt;

&lt;span class="c1"&gt;// imports&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ActivityMainBinding&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;binding&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ActivityMainBinding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inflate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layoutInflater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#initialize-auth0"&gt;
  &lt;/a&gt;
  Initialize Auth0
&lt;/h3&gt;

&lt;p&gt;First, you'll need to create an instance of the Auth0 class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Imports&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// other vars ...&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Auth0&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// ...&lt;/span&gt;

        &lt;span class="c1"&gt;// Set up the account object with the Auth0 application details&lt;/span&gt;
        &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Auth0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"xljNBT32DCsVDN7sYDM1qEHMD2mA1fVp"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"auth0-demo-android.us.auth0.com"&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;This is the client id and domain of my sample app, replace it with yours to make it work.&lt;/em&gt; To get these parameters for your app, skip ahead to the setting up auth0 section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-login"&gt;
  &lt;/a&gt;
  Add Log-in
&lt;/h3&gt;

&lt;p&gt;Now, proceed to set the &lt;code&gt;onClickListener&lt;/code&gt; on the button. This will be triggered whenever the button will be clicked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loginBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;WebAuthProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withScheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"demo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withScope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"openid profile email"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="c1"&gt;// Launch the authentication passing the callback where the results will be received&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;Callback&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Credentials&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationException&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// Called when there is an authentication failure&lt;/span&gt;
                    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onFailure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationException&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;// Something went wrong!&lt;/span&gt;
                        &lt;span class="nc"&gt;Toast&lt;/span&gt;
                            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;makeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="nd"&gt;@MainActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Login Error: \n${error.message}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LENGTH_LONG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;

                    &lt;span class="c1"&gt;// Called when authentication completed successfully&lt;/span&gt;
                    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Credentials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;// Get the access token from the credentials object.&lt;/span&gt;
                        &lt;span class="c1"&gt;// This can be used to call APIs&lt;/span&gt;
                        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;accessToken&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accessToken&lt;/span&gt;
                        &lt;span class="nf"&gt;showUserProfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, once a user presses this button, the login process will start and they'll be asked to log in with their E-mail id. &lt;/p&gt;

&lt;p&gt;You can use any scheme name, here I used &lt;code&gt;demo&lt;/code&gt;. But I recommend not to use &lt;code&gt;https&lt;/code&gt; because it might conflict with the intent-filters internally. I got this error while building &lt;a href="https://genicsblog.com/introducing-jekyllex-android-app"&gt;JekyllEx&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once the login is successful, we can get the access token which can be used to retrieve the user profile. Let's make a function to get the user profile from the token:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;showUserProfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationAPIClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// With the access token, call `userInfo` and get the profile from Auth0.&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;Callback&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserProfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationException&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onFailure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationException&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Something went wrong!&lt;/span&gt;
                &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;makeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="nd"&gt;@MainActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;"Error getting profile \n${error.message}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LENGTH_LONG&lt;/span&gt;
                &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UserProfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// We have the user's profile!&lt;/span&gt;
                &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nameTv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
                &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emailTv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;
                &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;makeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="nd"&gt;@MainActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;"Login Successful!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LENGTH_SHORT&lt;/span&gt;
                &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-logout"&gt;
  &lt;/a&gt;
  Add Log-out
&lt;/h3&gt;

&lt;p&gt;Now, let's make a function that enables logging out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;WebAuthProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withScheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"demo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;Callback&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationException&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// The user has been logged out!&lt;/span&gt;
                    &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;makeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="nd"&gt;@MainActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;"Successfully logged out!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LENGTH_SHORT&lt;/span&gt;
                    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nameTv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;john_doe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emailTv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onFailure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationException&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;makeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="nd"&gt;@MainActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;"Couldn't Logout!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LENGTH_SHORT&lt;/span&gt;
                    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, our app is ready to handle log-in and logout. You can also &lt;a href="https://github.com/gouravkhunger/auth0-demo-android/blob/main/app/src/main/java/com/github/gouravkhunger/auth0demo/MainActivity.kt"&gt;checkout the content&lt;/a&gt; of the &lt;code&gt;MainActivity.kt&lt;/code&gt; file on the repo.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setting-up-auth0"&gt;
  &lt;/a&gt;
  Setting up Auth0
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#make-an-account"&gt;
  &lt;/a&gt;
  Make an account
&lt;/h2&gt;

&lt;p&gt;First, let's do the setup needed at the auth0 dashboard. &lt;/p&gt;

&lt;p&gt;Go to the official &lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt; site and press signup on the navigation bar. After making an account, you would be taken to the dashboard where you can create a tenant. Here, the tenant is what auth0 calls a project. A project can have a number of applications in it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All the applications in a single-tenant have the same user database and storage.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-the-tenant"&gt;
  &lt;/a&gt;
  Set up the tenant
&lt;/h2&gt;

&lt;p&gt;Create a new tenant. You can choose any domain name for your tenant, here I am choosing &lt;code&gt;auth0-demo-android&lt;/code&gt;. For now, this will be a subdomain, but you can customize it to your custom domain by upgrading your free plan.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oN6v_PGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632595285718/pzRUUPZSOX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oN6v_PGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632595285718/pzRUUPZSOX.png" alt="Screenshot 2021-09-26 at 12.10.19 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-new-app"&gt;
  &lt;/a&gt;
  Create a new app
&lt;/h2&gt;

&lt;p&gt;Go to the applications section and press create a new app. Since we are building an Android app, choose the native field and hit create.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aYCDa9O2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632595589796/u_K9yatlS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aYCDa9O2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632595589796/u_K9yatlS.png" alt="Screenshot 2021-09-26 at 12.15.19 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we are going to develop an app that will use this tenant, tag it in the &lt;code&gt;development&lt;/code&gt; phase.&lt;/p&gt;

&lt;p&gt;After creating your app, go to the app settings&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k8rJrnFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632648478901/D6LpFj98V.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k8rJrnFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632648478901/D6LpFj98V.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scroll down to the Application URIs section, there add callback URLs for login and logout. These are required to let Auth0 know what apps are authorized to perform these actions as these strings contain identifiers for our app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;demo://&amp;lt;tenant-domain&amp;gt;.us.auth0.com/android/PACKAGE_NAME/callback
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Replace the package name and tenant domain with that of your own app. If you have set a scheme other than &lt;code&gt;demo&lt;/code&gt;, change it here.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here's an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8K1Pxz86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632648617407/DJhXTcFJH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8K1Pxz86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632648617407/DJhXTcFJH.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DZVPS5y5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632648626448/y2zKRWq53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DZVPS5y5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632648626448/y2zKRWq53.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After adding them, scroll all the way to the bottom and save the changes.&lt;/p&gt;

&lt;p&gt;Now you can go ahead and replace the Client IDs and such things in the code, wherever necessary.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#congratulations"&gt;
  &lt;/a&gt;
  Congratulations ü•≥
&lt;/h1&gt;

&lt;p&gt;You have successfully added Auth0 to your Android app. Trust me, though this post was long, it is actually really easy if you try it on your own.&lt;/p&gt;

&lt;p&gt;If you stayed along till this far, I am really thankful to you! Please comment on your experience with Auth0 and this article.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://genicsblog.com/contact"&gt;Let's connect&lt;/a&gt; with each other :)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Originally published at &lt;a href="https://genicsblog.com"&gt;genicsblog.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>android</category>
      <category>authentication</category>
      <category>auth0</category>
    </item>
    <item>
      <title>TECH DISCUSS-WHAT IS METAVERSE? WHY THE METAVERSE PUBLIC BLOCKCHAIN CADUCEUS WITH UNLIMITED POTENTIAL?</title>
      <author>blockchainsharing</author>
      <pubDate>Mon, 27 Sep 2021 10:39:33 +0000</pubDate>
      <link>https://dev.to/blockchainsharing/tech-discuss-what-is-metaverse-why-the-metaverse-public-blockchain-caduceus-with-unlimited-potential-5348</link>
      <guid>https://dev.to/blockchainsharing/tech-discuss-what-is-metaverse-why-the-metaverse-public-blockchain-caduceus-with-unlimited-potential-5348</guid>
      <description>&lt;p&gt;What is the metaverse? Why the metaverse public blockchain Caduceus with unlimited potential?&lt;/p&gt;

&lt;p&gt;In 2021, with the hot concept of the metaverse, more and more people know and start to pay attention to this concept. The short video contents of TikTok also begin to frequently appear metaverse terms and elements such as identity, social, low latency, diversity, anytime, anywhere, economic system and civilization. Now there is a big kind of network, meta-universe you don't even know? Do you still have the nerve to talk about the development of the world and the direction of human existence?&lt;/p&gt;

&lt;p&gt;Of course, if some people still don't know what metaverse is, let's popularize it first. MetaVerse comes from the word MetaVerse, which means beyond the universe. The word MetaVerse first came from the science fiction novel "Snow Crash", which describes a world where people interact with various software in a three-dimensional space with virtual images. People use digital virtual identities to compete with each other improve their status. It seems that the novel describes the scene as still ahead of its time in the future world. Others have explained the metaverse in a descending way - "a virtual world parallels to the real world and highly interoperable", with a fully functioning economy, in which data, digital goods, content, and IP can pass, and in which individual users, institutions, and companies can Individual users, organizations, and companies can create content and goods to ensure that the metaverse can continue to grow.&lt;/p&gt;

&lt;p&gt;The six supporting technologies of the metaverse include blockchain technology, interactive technology, video game technology, artificial intelligence technology, network and computing technology and IoT technical, so it can be seen that digital technology is the primary means and support for the metaverse to establish a virtual space. At present, metaverse, which is in the very early stage of technology implementation, faces the embarrassing situation of polarized reputation. Supporters firmly believe that metaverse is the general trend of human technological development, and everything can be metaverse. In contrast, opponents believe that metaverse is full of speculation and bubbles, and most of the metaverse projects and products on the market are worthless.&lt;/p&gt;

&lt;p&gt;In the process of human society, the commodity society is the most important and fastest progressing. From offline transactions in places to online transactions on the internet and even virtual transactions in the future, digital changes are gradually unstoppable. Imagine buying and selling a house, a car. How long does it take in the real world? A week or half a month? But in the metaverse, it may take less than a minute. Of course, the metaverse is still in the early stage of industry development, whether it is the underlying technology or the application scenario, there is still a big gap compared with the mature form in the future, and it will take an extremely long process to subvert the change from physical possession to virtual acquisition completely. However, this also means that there is enormous space for the expansion of metaverse-related industries.&lt;/p&gt;

&lt;p&gt;In the crypto field, innovation and quality tracks mean low value. The concept of the metaverse and the demand for technology is highly compatible with the crypto field. Blockchain giants with multiple advantages want to hold the market. In contrast, crypto startups want to get a chance to bend and overtake the market, so they have come down to layout and even added to the metaverse track, and metaverse-type projects are springing up. According to the data previously released by Coingecko, the total market value of blockchain's meta-universe section has now exceeded $2.139 billion, among which most projects choose to rely on ethereum development. But ethereum is perfect enough for the meta-universe?&lt;/p&gt;

&lt;p&gt;The current status of the ethereum ecology is not perfect. With the rise of decentralized financial DeFi, NFT and chain tour, the block size limit, high gas fee, slow confirmation speed, and network bandwidth on ethereum are no longer enough to support the development of some projects. Not only that, the Ethernet network can no longer even host a decentralized application that can respond to a large number of user data requests on the chain quickly. On the other hand, the Layer 2 solution (Lauer 2) has not been the solution to the inefficient execution of Ether contracts. Just like the early internet that had no choice but to use terminals and text-based tools, today, blockchain has become a niche presence because of the lack of infrastructure that prevents many applications from being used by large-scale users. It is not realistic to pin all hopes on Ether and hope it can carry the meta-universe track on its own. At present, it seems that the wisest choice for the meta-universe way should be to gradually "escape" from Ether.&lt;/p&gt;

&lt;p&gt;At this stage, other public chains have already proposed new structures and ideas to solve the blockchain's usage problems and performance bottlenecks. As a new generation of distributed open-source blockchain platforms, it adopts the HashGraph consensus algorithm and has super high transaction processing speed, security, and maximum parallelism of transaction processing, with the peak transaction speed of a single chain reaching 100.000 transactions per second. It also implements EVM-compatible virtual machines and supports Solidity smart contracts and various development tools on EtherChip; it also has the functions of sub-account and sub-account authority management, GPU acceleration and voting dividends.&lt;/p&gt;

&lt;p&gt;In addition to the underlying blockchain technology, Caduceus also has built-in game ecology, network arithmetic and virtual presentation boards, respectively, from value interaction, content bearing, data network transmission and immersion, to build a meta-universe through presentation fusion.&lt;/p&gt;

&lt;p&gt;First of all, Caduceus technically provides a decentralized settlement platform and value transfer mechanism that can guarantee the value flow of the metaverse, protect the attribution of digital assets and guarantee the stability, efficiency and transparency of the economic system. The decentralized virtual assets can be transferred across platforms and away from the content itself, realizing the "decontextualization".&lt;/p&gt;

&lt;p&gt;Technology provides interaction methods for the metaverse, and UHD and AR/VR devices have achieved continuous iterative upgrades. Caduceus has also laid out the development and production of virtual appliances to ensure that its chain users can have a better experience in the metaverse in the future.&lt;/p&gt;

&lt;p&gt;As the moment of metaverse development in 2021, many people still can't imagine the value of metaverse or question its concept because it is too early. However, in the future of the digital world, the metaverse is a future worth exploring, and the emergence of Caduceus may further lay a solid foundation for the rapid development of metaverse.&lt;/p&gt;

&lt;p&gt;If you interested Caduceus, follow Caduceus on Twitter @CaduceusChain &lt;a href="https://twitter.com/CaduceusChain"&gt;https://twitter.com/CaduceusChain&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
    </item>
    <item>
      <title>Build a CSS Ruler</title>
      <author>Mads Stoumann</author>
      <pubDate>Mon, 27 Sep 2021 10:37:59 +0000</pubDate>
      <link>https://dev.to/madsstoumann/build-a-css-ruler-2opn</link>
      <guid>https://dev.to/madsstoumann/build-a-css-ruler-2opn</guid>
      <description>&lt;p&gt;I'm currently working on a project, where an editor can easily edit breakpoints, using a group of color-coded, stacked &lt;code&gt;&amp;lt;input type="range"&amp;gt;&lt;/code&gt;-controls, and a bit of JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0SmUfK2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p1qp07nrt67d3v1ew52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0SmUfK2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p1qp07nrt67d3v1ew52.png" alt="noruler"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While this works, it's easier to visualize the breakpoints, if combined with a ruler:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SbmjprSy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qkxqo8wj79cqbbutkwe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SbmjprSy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qkxqo8wj79cqbbutkwe.png" alt="breakpoints"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At first, I hardcoded a ruler, using pixels ‚Äî but then I thought: ‚ÄúWhat if the editor wants to define the breakpoints in &lt;code&gt;em&lt;/code&gt; or &lt;code&gt;ch&lt;/code&gt; ‚Äî or some other unit?‚Äù&lt;/p&gt;




&lt;p&gt;Let's look into how we can create a configurable ruler, using CSS &lt;code&gt;backround-image&lt;/code&gt;, a bunch of variables ‚Äî and only a tiny bit of JavaScript for a visual editor.&lt;/p&gt;

&lt;p&gt;Our ruler will have two sets of ‚Äúticks‚Äù ‚Äî low and tall (we'll look into the numbers later):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SY2dR7qW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkldpe7xtu17g55lmvy7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SY2dR7qW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkldpe7xtu17g55lmvy7.png" alt="ruler-num"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Both sets of ticks have some initial &lt;em&gt;Custom Properties:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.ruler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Low ticks */&lt;/span&gt;
  &lt;span class="py"&gt;--ruler1-bdw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--ruler1-c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;#BBB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--ruler1-h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--ruler1-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* Tall ticks */&lt;/span&gt;
  &lt;span class="py"&gt;--ruler2-bdw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--ruler2-c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;#BBB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--ruler2-h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--ruler2-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With these properties, we can create a dynamic &lt;code&gt;background-image&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.ruler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler1-c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler1-bdw&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler2-c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler2-bdw&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, without &lt;code&gt;background-repeat&lt;/code&gt; and &lt;code&gt;background-size&lt;/code&gt;, we're not seeing anything that resembles a ruler!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.ruler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat-x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler-unit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler1-space&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler1-h&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler-unit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler2-space&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler2-h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's almost it! We just need to add &lt;code&gt;background-attachment: fixed&lt;/code&gt;, so the ruler will stay in place, when we're scrolling!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#adding-numbers"&gt;
  &lt;/a&gt;
  Adding numbers:
&lt;/h2&gt;

&lt;p&gt;For the numbers, we'll create a list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"ruler-x"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- repeat --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each blank &lt;code&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/code&gt; will be a number in our ruler. The number will be aligned to the bottom of the &lt;em&gt;tall&lt;/em&gt; ‚Äúticks‚Äù:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.ruler-x&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler-num-c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;counter-reset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler-num-fz&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler2-h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;inset-block-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;inset-inline-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler-unit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler2-space&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler-x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll use a CSS &lt;code&gt;counter&lt;/code&gt; to fill out the numbers, based on the &lt;code&gt;--ruler2-space&lt;/code&gt;-property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.ruler-x&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;align-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;counter-increment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler2-space&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler-unit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler2-space&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.ruler-x&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;padding-inline-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--ruler-num-pi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#creating-an-editor"&gt;
  &lt;/a&gt;
  Creating an Editor
&lt;/h2&gt;

&lt;p&gt;Now, let's create a small editor for our ruler. &lt;/p&gt;

&lt;p&gt;We'll use a small JavaScript to update the &lt;em&gt;Custom Properties:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;checkbox&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checked&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;suffix&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;In HTML, add &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;s to &lt;code&gt;&amp;lt;form id="app"&amp;gt;&lt;/code&gt;, using &lt;code&gt;name&lt;/code&gt; for the property to set, &lt;code&gt;value&lt;/code&gt; for the value (surprise!) and &lt;code&gt;data-suffix&lt;/code&gt; to add any suffix to the value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"range"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"--ruler1-h"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"8"&lt;/span&gt; &lt;span class="na"&gt;data-suffix=&lt;/span&gt;&lt;span class="s"&gt;"px"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Repeat for all the properties, you want to be editable.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;Here's a Codepen, where I've added a vertical ruler and an editor, using the technique described above (if you're on iOS, open it full-screen to avoid iframe scrolling-issues):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/oNwQyxd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#bonus-righttoleft"&gt;
  &lt;/a&gt;
  Bonus: right-to-left
&lt;/h2&gt;

&lt;p&gt;If you want to use the &lt;code&gt;y-axis&lt;/code&gt;-ruler with &lt;code&gt;rtl&lt;/code&gt;, add a small snippet of CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"rtl"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="nc"&gt;.ruler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Cover-image from pexels.com&lt;/em&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Build an Ecommerce Application using React, MongoDB, Strapi and Socket.io</title>
      <author>Shada </author>
      <pubDate>Mon, 27 Sep 2021 10:27:47 +0000</pubDate>
      <link>https://dev.to/strapi/how-to-build-an-ecommerce-application-using-react-mongodb-strapi-and-socket-io-3ee4</link>
      <guid>https://dev.to/strapi/how-to-build-an-ecommerce-application-using-react-mongodb-strapi-and-socket-io-3ee4</guid>
      <description>&lt;p&gt;There are many ways to build e-commerce applications. This article will look at how to build an e-commerce application using React, MongoDB, Strapi, and Socket.io.&lt;/p&gt;

&lt;p&gt;We will use React for the frontend, MongoDB for the database, Strapi as our Content Management System (CMS, also serves as our backend tool), and Socket.io for real-time bi-directional communication between the client and the server.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Brief Overview of Strapi&lt;/li&gt;
&lt;li&gt;Brief Overview of Socket.io&lt;/li&gt;
&lt;li&gt;Building the E-commerce application

&lt;ul&gt;
&lt;li&gt;Setting up MongoDB&lt;/li&gt;
&lt;li&gt;Setting up a Strapi project&lt;/li&gt;
&lt;li&gt;Building the collections&lt;/li&gt;
&lt;li&gt;Building the frontend with React&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Integrating Sockets

&lt;ul&gt;
&lt;li&gt;Integrating Socket on the Backend&lt;/li&gt;
&lt;li&gt;Integrating Socket on the Frontend&lt;/li&gt;
&lt;li&gt;Adding products in real-time&lt;/li&gt;
&lt;li&gt;Adding reviews in real-time&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Conclusion.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h1&gt;

&lt;p&gt;In this article, you will learn how Socket.io works and how it is integrated into Strapi and frontend environments as well as how Strapi makes backend development seamless.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;To get the best of this tutorial, you need prior knowledge of the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Basic knowledge of JavaScript&lt;/li&gt;
&lt;li&gt;Basic knowledge of ReactJS&lt;/li&gt;
&lt;li&gt;Basic understanding of Strapi - &lt;a href="https://strapi.io/documentation/developer-docs/latest/getting-started/introduction.html"&gt;get started here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also, download and install &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; if you haven't already.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#brief-overview-of-strapi"&gt;
  &lt;/a&gt;
  Brief overview of Strapi?
&lt;/h1&gt;

&lt;p&gt;In a concise form, Strapi is a headless CMS. As the term headless implies, the CMS has no head. It's decoupled.&lt;/p&gt;

&lt;p&gt;If that doesn't make sense yet, think about WordPress. When using WordPress, they manage your frontend, backend, data, and, possibly your hosting too.&lt;/p&gt;

&lt;p&gt;With headless CMSs like Strapi, while managing your content, you choose where your data stays, decide where your application is hosted, and make up your frontend yourself‚Äîbasically giving you more control over how your application is structured.&lt;/p&gt;

&lt;p&gt;Strapi allows you to develop and manage your content using APIs (REST and GraphQL).&lt;/p&gt;

&lt;p&gt;Here's more information: &lt;a href="https://strapi.io/documentation/developer-docs/latest/getting-started/introduction.html"&gt;Strapi Developer Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#brief-overview-of-socketio"&gt;
  &lt;/a&gt;
  Brief Overview of Socket.io
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API"&gt;Websockets&lt;/a&gt; in web development is a technology that allows bi-directional and real-time communication between a client and a server.&lt;/p&gt;

&lt;p&gt;Socket.io is a library that makes working with Websockets easier on browsers and Node.js servers.&lt;/p&gt;

&lt;p&gt;The traditional way of building websites involves the client requesting resources from the server and responding to the client. After that response, the server cannot send any other response. It has to wait until there's a request.&lt;/p&gt;

&lt;p&gt;Websockets make things different. With them, servers and clients work together using events. The client emits an event, the server listens for that event and acts accordingly, and vice versa.&lt;/p&gt;

&lt;p&gt;This way, even when the client doesn't request data, the server can emit an event (at any time), and the client's listeners will handle the event.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-ecommerce-application"&gt;
  &lt;/a&gt;
  Building the E-commerce application
&lt;/h2&gt;

&lt;p&gt;The e-commerce application we'll be building has two collections‚Äîproducts and reviews. Each Product can have reviews. We'll show how to achieve this seamlessly using the above tools.&lt;/p&gt;

&lt;p&gt;The work of Socket.io here is to improve the interaction in the web application. Here are few things we'll see with Socket.io:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;notify other users when a product is added&lt;/li&gt;
&lt;li&gt;add a product in real-time to the products list&lt;/li&gt;
&lt;li&gt;add a product review in real-time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's get started building.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-mongodb"&gt;
  &lt;/a&gt;
  Setting up MongoDB
&lt;/h3&gt;

&lt;p&gt;Before starting with our project, we want to ensure our database is ready. Follow the instructions in this detailed article: &lt;a href="https://strapi.io/documentation/developer-docs/latest/setup-deployment-guides/configurations/databases/mongodb.html#_2-install-strapi-locally-with-mongodb"&gt;MongoDB - Strapi Developer Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-a-strapi-project"&gt;
  &lt;/a&gt;
  Setting up a Strapi project
&lt;/h3&gt;

&lt;p&gt;Setting up a Strapi project is pretty straightforward. Just like &lt;code&gt;create-react-app&lt;/code&gt;, &lt;code&gt;@vue/cli&lt;/code&gt;, and the rest of them, Strapi has &lt;a href="https://strapi.io/documentation/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project"&gt;create-strapi-app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    &lt;span class="nb"&gt;mkdir &lt;/span&gt;ecommerce
    npx create-strapi-app backend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we create a new directory for our frontend and backend application. Then using &lt;a href="https://www.npmjs.com/package/npx"&gt;npx&lt;/a&gt; (used for executing npm libraries without installing them, you can choose to install the &lt;code&gt;create-strapi-app&lt;/code&gt; globally and use directly), we set up the backend.&lt;/p&gt;

&lt;p&gt;While setting up, you'll be asked some questions. Here's one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQTlLgMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630997406784_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQTlLgMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630997406784_image.png" alt="Screenshot showing the installation type question"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this tutorial, we want to use MongoDB. Using Quickstart, the default database (SQLite) will be used. So, select custom.&lt;/p&gt;

&lt;p&gt;And the next question:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B32-LRJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630997506628_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B32-LRJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630997506628_image.png" alt="Screenshot showing some questions from the strapi CLI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Templates are not starters‚Äîthey are not apps. They are just already made with Strapi configurations, components, and plugins. Here's a list of them: &lt;a href="https://github.com/strapi/awesome-strapi#Templates"&gt;Strapi Templates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this tutorial, we won't be using them. To enter &lt;code&gt;n&lt;/code&gt; and press enter.&lt;/p&gt;

&lt;p&gt;Next question:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sBM-1OpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630997925030_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sBM-1OpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630997925030_image.png" alt="Screenshot showing the database client question"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You know what to select üòÖ &lt;/p&gt;

&lt;p&gt;With your mongo background service running, enter &lt;code&gt;eCommerce&lt;/code&gt; as the database name:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eUnv4m-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630997969185_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eUnv4m-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630997969185_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the remaining inputs, use the default, with the username and password empty.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SbDtT4H8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630998040227_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SbDtT4H8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630998040227_image.png" alt="Screenshot showing some questions and default answers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_gWOEr_i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631190814973_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_gWOEr_i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631190814973_image.png" alt="Screenshot showing some questions and default answers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the backend code (built with Strapi) exists in the backend directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-collections"&gt;
  &lt;/a&gt;
  Building the collections
&lt;/h2&gt;

&lt;p&gt;We will need two collection types for this tutorial. A Product Collection and the Review Collection will have a relationship with the Product.&lt;/p&gt;

&lt;p&gt;First, ensure you're in the backend directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    &lt;span class="nb"&gt;cd &lt;/span&gt;backend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, run &lt;code&gt;yarn develop&lt;/code&gt;. The admin UI will be built with the development configuration, and your browser will open the page at &lt;code&gt;http://localhost:1337/admin/auth/register-admin&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GiHbyoi_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631252971982_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GiHbyoi_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631252971982_image.png" alt="Strapi admin registration form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have to register as an administrator, so fill the form (take note of your credentials) and click on "Let's Start." And then you have this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vRHHpI6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253057851_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vRHHpI6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253057851_image.png" alt="Strapi admin dashboard panel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, for our first Content-Type, click on &lt;code&gt;Create your first Content-Type&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yPCEU6pZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630999719105_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yPCEU6pZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630999719105_image.png" alt="Collection Type Dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the Display name, enter &lt;code&gt;Product&lt;/code&gt;, then click Continue. Next, you're to enter some fields:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9tLrrTVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253125039_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9tLrrTVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253125039_image.png" alt="Collection fields dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select Text:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A15M4cMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253151869_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A15M4cMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253151869_image.png" alt="Collection fields dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Name field, enter &lt;code&gt;name&lt;/code&gt;, which will be the name of the &lt;strong&gt;Product&lt;/strong&gt;. Then, click on &lt;strong&gt;Advanced settings&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yh4ku2cy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253183339_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yh4ku2cy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253183339_image.png" alt="Collection field dialog for the name field"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the &lt;code&gt;Required field&lt;/code&gt; checkbox. With this selected, during creation (through the API), there would be a validation error if this field is not provided. You can also set a maximum or minimum length if you want.&lt;/p&gt;

&lt;p&gt;Then click &lt;code&gt;Add another field&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this second field, select Media, and use &lt;code&gt;images&lt;/code&gt; as the name. In the Advanced settings:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zBfqLfpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253281249_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zBfqLfpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253281249_image.png" alt="Collection field dialog for the images field"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Change the &lt;code&gt;allowed types of media&lt;/code&gt; to Images only and check the Required checkbox.&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;Add another field&lt;/code&gt; for the last field. Select text, and enter &lt;code&gt;description&lt;/code&gt; as the name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bD-6A5RW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253308890_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bD-6A5RW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253308890_image.png" alt="Collection field dialog for the description field"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, select &lt;code&gt;Long text&lt;/code&gt;. Go to the advanced settings again and make it required. And then click &lt;code&gt;Finish&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, click &lt;code&gt;Save&lt;/code&gt; at the top to add that collection. The server would restart with the new collection saved.&lt;/p&gt;

&lt;p&gt;Then we have to repeat the same process for the Review collection. Click on &lt;code&gt;Content-Types Builder&lt;/code&gt; from the left-side navigation, and click on &lt;code&gt;Create new collection type&lt;/code&gt; in the &lt;code&gt;Collection Types&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;The display name here would be &lt;code&gt;Review&lt;/code&gt;, and the fields here are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;reviewer_name&lt;/code&gt;, required, of short text&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;review&lt;/code&gt;, required, of long text&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the last field is of the &lt;code&gt;Relation&lt;/code&gt; type. The field name on the Review collection is &lt;code&gt;product&lt;/code&gt;, and the field name on the Product collection is &lt;code&gt;reviews&lt;/code&gt; with a Many to One relationship:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AtVB49tq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253666062_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtVB49tq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253666062_image.png" alt="Collection field dialog for the Review relation field"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means one Product can have many reviews. Then click Finish and Save.&lt;/p&gt;

&lt;p&gt;Our collections are ready. Under the &lt;code&gt;Collection Types&lt;/code&gt; in the navigation, we can select a collection and add data directly on the UI.&lt;/p&gt;

&lt;p&gt;Go to the Product collection, and add two products of your choice. Here's the information I'm using:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1yC55Ua9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631256385033_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1yC55Ua9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631256385033_image.png" alt="Dashboard for adding a product entry"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click Save and Publish.&lt;/p&gt;

&lt;p&gt;Repeat the same for another entry of your choice.&lt;/p&gt;

&lt;p&gt;Go to the &lt;code&gt;Review&lt;/code&gt; collection and add three reviews‚Äîtwo for one Product and one for the other.&lt;/p&gt;

&lt;p&gt;When adding reviews, you can select the &lt;code&gt;Product&lt;/code&gt; you're adding a review for because Reviews have a relationship with Products:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XvdhgWv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253984332_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XvdhgWv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253984332_image.png" alt="UI for adding a Relation entry"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's build our frontend and call the available APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-frontend-with-react"&gt;
  &lt;/a&gt;
  Building the Frontend with React
&lt;/h2&gt;

&lt;p&gt;We'll be building the Frontend app with React. You can use any other framework as this serves as the UI and then calling APIs.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;eCommerce&lt;/code&gt; directory, run the following in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npx create-react-app client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    cd client
    npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll have three pages. First page is to view all products, the second page is to view the detail of a particular product (with the reviews), and the third one to add a product.&lt;/p&gt;

&lt;p&gt;We need a &lt;code&gt;react-router&lt;/code&gt; set up for this. Do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm &lt;span class="nb"&gt;install &lt;/span&gt;react-router-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the &lt;code&gt;App.js&lt;/code&gt; file and replace the code there with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import React from 'react'
    import { BrowserRouter as Router, Switch, Route } from 'react-router-dom'
    import Home from './components/Home'

    export default function App() {
      return (
        &amp;lt;Router&amp;gt;
          &amp;lt;Switch&amp;gt;
            &amp;lt;Route exact path="/"&amp;gt;
              &amp;lt;Home /&amp;gt;
            &amp;lt;/Route&amp;gt;
            &amp;lt;Route path="/:product_id"&amp;gt;&amp;lt;/Route&amp;gt;
            &amp;lt;Route path="/add-product"&amp;gt;&amp;lt;/Route&amp;gt;
          &amp;lt;/Switch&amp;gt;
        &amp;lt;/Router&amp;gt;
      )
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a &lt;code&gt;components&lt;/code&gt; directory under &lt;code&gt;src&lt;/code&gt; and Add the &lt;code&gt;Home.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    export default function Home() {
      return &amp;lt;h1&amp;gt;Homepage&amp;lt;/h1&amp;gt;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when you go to &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;, you should see the Homepage heading.&lt;/p&gt;

&lt;p&gt;Now, let's fetch the products from the backend. To call the APIs on the backend, a user would need to be authenticated. Since that's not our focus, we can make some request methods public. &lt;/p&gt;

&lt;p&gt;To do this, go back to your &lt;code&gt;backend&lt;/code&gt; directory and run &lt;code&gt;yarn develop&lt;/code&gt;, and open the admin dashboard at &lt;a href="http://localhost:1337/admin"&gt;http://localhost:1337/admin&lt;/a&gt;. Then log in with your details.&lt;/p&gt;

&lt;p&gt;On the left navigation, go to Settings. Under &lt;code&gt;USERS &amp;amp; PERMISSIONS PLUGIN&lt;/code&gt;, click on Roles:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwGEjD8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631255642384_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwGEjD8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631255642384_image.png" alt="Setting Roles in the Strapi Admin dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click on Public. Scroll to Permissions and select all:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VPBi2-ON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631255978825_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VPBi2-ON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631255978825_image.png" alt="Setting permissions in the Strapi Admin dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click Save.&lt;/p&gt;

&lt;p&gt;Note that this isn't ideal for a public app. Users need to be authenticated.&lt;/p&gt;

&lt;p&gt;Install Axios on our frontend for calling the API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm &lt;span class="nb"&gt;install &lt;/span&gt;axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update &lt;code&gt;Home.js&lt;/code&gt; to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import axios from 'axios'
    import { useEffect, useState } from 'react'
    import './Home.css'
    import { Link } from 'react-router-dom'

    export default function Home() {
      const [products, setProducts] = useState([])
      useEffect(() =&amp;gt; {
        axios({
          method: 'get',
          url: 'http://localhost:1337/products',
        }).then((res) =&amp;gt; {
          setProducts(res.data)
        })
      }, [])

      return (
        &amp;lt;div className="container"&amp;gt;
          &amp;lt;h1&amp;gt;Products&amp;lt;/h1&amp;gt;
          &amp;lt;div className="products-container"&amp;gt;
            {products.map((product) =&amp;gt; (
              &amp;lt;Link className="product" to={`/${product.id}`}&amp;gt;
                &amp;lt;img src={`http://localhost:1337${product.images[0].url}`} /&amp;gt;
                &amp;lt;h2 className="product-name"&amp;gt;{product.name}&amp;lt;/h2&amp;gt;
                &amp;lt;p className="product-desc"&amp;gt;{product.description}&amp;lt;/p&amp;gt;
              &amp;lt;/Link&amp;gt;
            ))}
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      )
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The images field is an array because when setting up the collection, we accepted multiple media. And the &lt;code&gt;URL&lt;/code&gt; field on each image is in the form of &lt;code&gt;/uploads/‚Ä¶&lt;/code&gt; which means we have to append that to the backend's server's URL to get the complete URL.&lt;/p&gt;

&lt;p&gt;And also, add a &lt;code&gt;Home.css&lt;/code&gt; file in the same directory as &lt;code&gt;Home.js&lt;/code&gt;, with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    .products-container {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      grid-gap: 20px;
    }
    .product {
      text-decoration: none;
      border: 1px solid rgb(236, 235, 235);
    }
    .product-image img {
      height: 400px;
      color: rgb(229, 224, 224);
    }
    .product-details {
      padding: 15px;
    }
    .product-name {
      margin: 10px 0 0;
      color: rgb(103, 103, 103);
    }
    .product-desc {
      margin: 10px 0 0;
      color: rgb(187, 187, 187);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also add the &lt;code&gt;.container&lt;/code&gt; class in the &lt;code&gt;index.css&lt;/code&gt; file as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    .container {
      padding: 40px;
      max-width: 1000px;
      margin: 0 auto;
    }

    * {
      box-sizing: border-box;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, I have this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7F5H_2Cv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631256950372_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7F5H_2Cv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631256950372_image.png" alt="Screenshot of the built homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On clicking each Product, I expect to see a dedicated page for that Product with the reviews. So, create a &lt;code&gt;ProductDetail&lt;/code&gt; component at the components directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import axios from 'axios'
    import { useEffect, useState } from 'react'
    import { useParams } from 'react-router-dom'
    import './ProductDetail.css'

    export default function ProductDetail() {
      const { product_id } = useParams()
      const [product, setProduct] = useState(null)

      useEffect(() =&amp;gt; {
        axios({
          method: 'get',
          url: `http://localhost:1337/products/${product_id}`,
        }).then((res) =&amp;gt; {
          setProduct(res.data)
        })
      }, [])

      return (
        &amp;lt;div className="container"&amp;gt;
          {!product ? (
            &amp;lt;span&amp;gt;Loading...&amp;lt;/span&amp;gt;
          ) : (
            &amp;lt;div className="product-detail-container"&amp;gt;
              &amp;lt;h1&amp;gt;{product.name}&amp;lt;/h1&amp;gt;
              &amp;lt;div className="product-img-container"&amp;gt;
                &amp;lt;img src={`http://localhost:1337${product.images[0].url}`} /&amp;gt;
              &amp;lt;/div&amp;gt;
              &amp;lt;p&amp;gt;{product.description}&amp;lt;/p&amp;gt;
              &amp;lt;div className="product-reviews"&amp;gt;
                &amp;lt;h2&amp;gt;Reviews ({product.reviews.length})&amp;lt;/h2&amp;gt;
                {product.reviews.map((review) =&amp;gt; (
                  &amp;lt;div className="product-review"&amp;gt;
                    &amp;lt;h3&amp;gt;{review.reviewer_name}&amp;lt;/h3&amp;gt;
                    &amp;lt;p&amp;gt;{review.review}&amp;lt;/p&amp;gt;
                  &amp;lt;/div&amp;gt;
                ))}
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
          )}
        &amp;lt;/div&amp;gt;
      )
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And a &lt;code&gt;ProductDetail.css&lt;/code&gt; file at the same directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    .product-img-container {
      height: 500px;
      overflow: hidden;
    }
    .product-img-container img {
      object-fit: cover;
      width: 100%;
      height: 100%;
    }
    .product-reviews {
      padding-top: 20px;
      border-top: 1px solid #ccc;
    }
    .product-review {
      background-color: #eeecec;
      padding: 15px;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, go back to &lt;code&gt;App.js&lt;/code&gt; and update the second &lt;code&gt;Route&lt;/code&gt; component to this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...       
        &amp;lt;Route path="/:product_id"&amp;gt;
          &amp;lt;ProductDetail /&amp;gt;
        &amp;lt;/Route&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now when you click on a product, you get this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N9L5k3MU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631257970168_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N9L5k3MU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631257970168_image.png" alt="Screenshot of a product detail page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrating-sockets"&gt;
  &lt;/a&gt;
  Integrating Sockets
&lt;/h2&gt;

&lt;p&gt;As our application is currently, there is communication between the frontend and the backend. But we want this communication to be bi-directional and in real-time so let's integrate sockets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrating-socket-on-the-backend"&gt;
  &lt;/a&gt;
  Integrating Socket on the Backend
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm &lt;span class="nb"&gt;install &lt;/span&gt;socket.io
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://strapi.io/documentation/developer-docs/latest/setup-deployment-guides/configurations.html#functions"&gt;config/functions/bootstrap.js&lt;/a&gt; file is the starting point that Strapi uses when your development starts. So it's in here we integrate Sockets‚Äîour listeners and emitters and so on.&lt;/p&gt;

&lt;p&gt;Replace the bootstrap file with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    module.exports = () =&amp;gt; {
      const io = require("socket.io")(strapi.server, {
        cors: {
          origin: "http://localhost:3000",
          methods: ["GET", "POST"],
        },
      });
      io.on("connection", function (socket) {
        // send message on user connection
        socket.emit("hello", JSON.stringify({ message: "Welcome to my website" }));
      });
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've configured the &lt;code&gt;socket.io&lt;/code&gt; library to use Strapi's server, with some &lt;code&gt;cors&lt;/code&gt; permissions. When any client connects to the server, the &lt;code&gt;connection&lt;/code&gt; event is automatically emitted, and the server can listen to it and do whatever it wants.&lt;/p&gt;

&lt;p&gt;In this example, on &lt;code&gt;connection&lt;/code&gt;, the server emits the &lt;code&gt;hello&lt;/code&gt; event, and the client can listen to it and display the message.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrating-socket-on-the-frontend"&gt;
  &lt;/a&gt;
  Integrating Socket on the Frontend
&lt;/h2&gt;

&lt;p&gt;Install the socket.io client library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm i socket.io-client react-toastify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://www.npmjs.com/package/react-toastify"&gt;react-toastify&lt;/a&gt; library is used for adding notifications to our app.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;App.js&lt;/code&gt; file, add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    // other imports
    import { ToastContainer } from 'react-toastify'
    import 'react-toastify/dist/ReactToastify.css'

    ...
      &amp;lt;Router&amp;gt;
        &amp;lt;ToastContainer /&amp;gt;
        &amp;lt;Switch&amp;gt;...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new directory called &lt;code&gt;config&lt;/code&gt;, and in it, create a &lt;code&gt;socket.js&lt;/code&gt; file with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { io } from 'socket.io-client'

    export const socket = io('http://localhost:1337')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And back in the &lt;code&gt;Home.js&lt;/code&gt; file, update to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    // other imports
    import { socket } from '../config/socket'
    import { toast } from 'react-toastify'

    socket.on('hello', (res) =&amp;gt; {
      toast.success(res.message)
    })

    export default ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when you load the products page, you get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7zQvUPgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631259749208_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zQvUPgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631259749208_image.png" alt="Screenshot of the homepage with a notification saying welcome"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is indeed a socket connection.&lt;/p&gt;

&lt;p&gt;The next thing we want to do is emit an event when a product is added.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-products-in-realtime"&gt;
  &lt;/a&gt;
  Adding Products in Real-time
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs create the component--&lt;code&gt;AddProduct.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { useState } from 'react'
    import { toast } from 'react-toastify'
    import { socket } from '../config/socket'

    import './AddProduct.css'

    export default function AddProduct() {
      const [name, setName] = useState(null)
      const [description, setDescription] = useState(null)
      const [processing, setProcessing] = useState(false)

      const formSubmit = (e) =&amp;gt; {
        e.preventDefault()
        setProcessing(true)

        socket.emit('addProduct', { name, description }, (product) =&amp;gt; {
          setProcessing(false)
          toast.success('Product added successfully!')
          setTimeout(() =&amp;gt; {
            window.location.href = `/${product.id}`
          }, 1000)
        })
      }

      return (
        &amp;lt;div className="container"&amp;gt;
          &amp;lt;div className="add-product"&amp;gt;
            &amp;lt;h1&amp;gt;Add Product&amp;lt;/h1&amp;gt;
            &amp;lt;form onSubmit={formSubmit}&amp;gt;
              &amp;lt;div className="input-group"&amp;gt;
                &amp;lt;label htmlFor="name"&amp;gt;Name&amp;lt;/label&amp;gt;
                &amp;lt;input onChange={(e) =&amp;gt; setName(e.target.value)} /&amp;gt;
              &amp;lt;/div&amp;gt;
              &amp;lt;div className="input-group"&amp;gt;
                &amp;lt;label htmlFor="description"&amp;gt;Description&amp;lt;/label&amp;gt;
                &amp;lt;input onChange={(e) =&amp;gt; setDescription(e.target.value)} /&amp;gt;
              &amp;lt;/div&amp;gt;
              &amp;lt;button disabled={processing} type="submit"&amp;gt;
                {processing ? 'Processing' : 'Add Product'}
              &amp;lt;/button&amp;gt;
            &amp;lt;/form&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      )
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the form submit handler, we emit an event named &lt;code&gt;addProduct&lt;/code&gt; with an object of the Product's properties. Notice we aren't using Axios for the POST request? Because sockets do that already.&lt;/p&gt;

&lt;p&gt;We also add a callback function with the argument &lt;code&gt;product&lt;/code&gt;, which will be passed from the backend when created. Then we navigate to that Product's detail page after 1 second.&lt;/p&gt;

&lt;p&gt;And the &lt;code&gt;AddProduct.css file&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    .add-product h1 {
      text-align: center;
    }
    .add-product form {
      max-width: 600px;
      margin: 0 auto;
      border: 1px solid #ccc;
      padding: 15px;
    }
    .input-group {
      width: 100%;
      margin-bottom: 20px;
    }
    .input-group label {
      display: block;
      margin-bottom: 5px;
    }
    .input-group input {
      padding: 20px;
      width: 100%;
    }
    .add-product form button {
      width: 100%;
      padding: 20px;
      border: none;
      background: none;
      background-color: rgb(193, 251, 193);
      cursor: pointer;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After adding the AddProduct component in &lt;code&gt;App.js&lt;/code&gt; , &lt;code&gt;/add-product/&lt;/code&gt; gives us:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j-0g62dy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631271104313_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-0g62dy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631271104313_image.png" alt="Screenshot of the add product page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll leave adding the image for the Product on the Strapi admin dashboard. In the &lt;code&gt;img&lt;/code&gt; &lt;code&gt;src&lt;/code&gt; in the homepage and product detail page, change it to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;img
      src={
        product.images[0]
          ? `http://localhost:1337${product.images[0].url}`
          : '/empty-box.svg'
      }
    /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way, we check if there's an image, and if there isn't, we use a default image. In the public directory at the root, add an &lt;code&gt;empty-box.SVG&lt;/code&gt; file and paste the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"&amp;gt;
        &amp;lt;path fill="none" d="M0 0h24v24H0z" /&amp;gt;
        &amp;lt;path
            d="M3 10h18v10.004c0 .55-.445.996-.993.996H3.993A.994.994 0 0 1 3 20.004V10zm6 2v2h6v-2H9zM2 4c0-.552.455-1 .992-1h18.016c.548 0 .992.444.992 1v4H2V4z"
            fill="rgba(177,177,177,1)" /&amp;gt;
    &amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, go back to &lt;code&gt;Home.js&lt;/code&gt; and add listen to the product added event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ...
        socket.on('hello', (res) =&amp;gt; {
          toast.success(res.message)
        })

        socket.on('newProductAdded', (res) =&amp;gt; {
          toast.info('A new product has been added')
          setProducts((products) =&amp;gt; [res.product, ...products])
        })
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the backend emits this event, we can listen to it on the homepage (opened in another tab or window), show the toaster, and add the products to the existing products array.&lt;/p&gt;

&lt;p&gt;Now for the backend work. In the &lt;code&gt;config&lt;/code&gt; directory, create a &lt;code&gt;utils&lt;/code&gt; directory, and in it, create a &lt;code&gt;product-database.js&lt;/code&gt; file. In that file, paste the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    async function createProduct({ name, description }) {
      try {
        const product = await strapi.services.product.create({
          name,
          description,
        });
        return product;
      } catch (err) {
        console.log({ err });
        return "Product cannot be created. Try again";
      }
    }
    module.exports = {
      createProduct,
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we're using the Strapi product service to create the Product, which would add that to the database.&lt;/p&gt;

&lt;p&gt;Now, go back to the &lt;code&gt;bootstrap.js&lt;/code&gt; file and after the &lt;code&gt;hello&lt;/code&gt; emitted event, add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ...
        socket.on("addProduct", async ({ name, description }, callback) =&amp;gt; {
          try {
            const product = await createProduct({
              name,
              description,
            });
            if (product) {
              callback(product);
              socket.broadcast.emit("newProductAdded", { product });
            }
          } catch (err) {
            console.log({ err });
            callback({ type: "error", message: err });
            console.log("Error occured. Please try again");
          }
        });
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We listen to the &lt;code&gt;addProduct&lt;/code&gt; event, add the Product to the database, pass the Product as the argument to the client's callback, and emit the event &lt;code&gt;newProductAdded&lt;/code&gt; with the Product.&lt;/p&gt;

&lt;p&gt;Notice we aren't using a &lt;code&gt;socket.emit&lt;/code&gt; but &lt;code&gt;socket.broadcast.emit instead&lt;/code&gt; since &lt;code&gt;socket.emit&lt;/code&gt; emits the event to the client that emitted the &lt;code&gt;addProduct&lt;/code&gt; event. We don't want this because the client is currently on the add product page, which means the homepage will never listen to the event.&lt;/p&gt;

&lt;p&gt;But with &lt;code&gt;socket.broadcast.emit&lt;/code&gt;, we're emitting the event to every other connected event, except the client that sent the &lt;code&gt;addProduct&lt;/code&gt; event.&lt;/p&gt;

&lt;p&gt;Now, let's test what we have. I'm using two windows for this. Here are the two pages:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uQ6Zitcf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631271856592_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uQ6Zitcf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631271856592_image.png" alt="Screenshot of two windows: one for the home page and the other for the add product page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After adding a product, then this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dyoa2e6i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631271918675_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dyoa2e6i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631271918675_image.png" alt="Screenshot of two windows: one showing a new product was added and the other is the add product page after submission"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice in the homepage, the Product is added, and the toaster notifies the user? This is very similar to Twitter telling you, "New tweets available."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-reviews-in-realtime"&gt;
  &lt;/a&gt;
  Adding reviews in real-time
&lt;/h2&gt;

&lt;p&gt;The same thing can be done with reviews. The basic idea is to have a &lt;code&gt;ProductReviews&lt;/code&gt; component that has a form where users can enter reviews.&lt;/p&gt;

&lt;p&gt;On the same Product Reviews component, there'd be a listener for the &lt;code&gt;newReviewAdded&lt;/code&gt; event. And we can broadcast emit to other connected clients, letting them know of the newly added review.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VVF2xcx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631274166596_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VVF2xcx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631274166596_image.png" alt="Screenshot of two windows: one showing the reviews section after submission and the other showing a new review was added"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the screenshot above, the upper window was the client that sent the review. In contrast, the window below is just another client that is notified of an added review.&lt;/p&gt;

&lt;p&gt;Here‚Äôs the source code for the tutorial: &lt;a href="https://github.com/dillionmegida/ecommerce-socket-io-strapi"&gt;https://github.com/dillionmegida/ecommerce-socket-io-strapi&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-we-still-need-axios"&gt;
  &lt;/a&gt;
  Do we still need Axios?
&lt;/h2&gt;

&lt;p&gt;We don't. For getting the products initially, we can emit an event from the backend called &lt;code&gt;loadedProducts&lt;/code&gt; and listen to that event on the frontend to fetch and display the products.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we've seen how to create a full-stack e-commerce application with Strapi managing the backend and React for the frontend. We also saw how to integrate web sockets to improve the communication and interaction between the client and the server.&lt;/p&gt;

&lt;p&gt;For further reading, check out: &lt;a href="https://strapi.io/blog/how-to-build-a-real-time-chat-forum-using-strapi-socket-io-react-and-mongo-db"&gt;Real-time Chat Forum using Strapi, Socket.io, React, and MongoDB&lt;/a&gt;&lt;/p&gt;

</description>
      <category>socket</category>
      <category>mongodb</category>
      <category>strapi</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Deta Space - What is it and why is it the future?</title>
      <author>Anish De</author>
      <pubDate>Mon, 27 Sep 2021 09:55:27 +0000</pubDate>
      <link>https://dev.to/byteslash/deta-space-what-is-it-and-why-is-it-the-future-52fj</link>
      <guid>https://dev.to/byteslash/deta-space-what-is-it-and-why-is-it-the-future-52fj</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Disclaimer: This article is not sponsored or biased in any way. I liked the idea behind the product and hence wanted to write about it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.deta.sh/"&gt;Deta&lt;/a&gt; was a company founded just over 2 years ago and it has been providing free Cloud solutions since.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-deta-space"&gt;
  &lt;/a&gt;
  What is Deta Space?
&lt;/h1&gt;

&lt;p&gt;Deta Space is a new product from Deta which provides you with your personal cloud hosted by Deta where you can run sandboxed versions of certain apps. It is a relatively new concept but seems to have great potential. Here the developers don't have our data so they cannot sell it. Deta still has our data but in this case, we just need to trust one company rather than trusting a bunch of other companies or developers. You can see Deta's privacy policy &lt;a href="https://www.deta.sh/privacy"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h1&gt;

&lt;p&gt;Updates are on an opt-in basis so if you don't want to update to a newer version of an app, you can choose not to. There is no option to downgrade though but that can be added in the future and I hope they do so.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z4nzS8jI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632666001421/sATiXbC8w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z4nzS8jI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632666001421/sATiXbC8w.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also see all the data stored by an app on a per-app basis through Deta's dashboard. To do so, click on the 3-dot menu on the app's icon and click "My Data" and you will be redirected to a page where you can see all the stored data.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#for-developers"&gt;
  &lt;/a&gt;
  For Developers
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iB90cYU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632666204628/bBAjelQfY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iB90cYU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632666204628/bBAjelQfY.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deta Space also provides a marketplace for apps where developers can publish apps. Right now, there are only 5 but as this concept gets more popular and developers start to build more apps compatible with Deta Space, this marketplace is going to expand. You can see the marketplace &lt;a href="https://deta.space/discovery"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Deta aims to make it easy for developers to make applications for Deta Space by completely managing the infrastructure from servers, security, data to payments. You can learn more about it &lt;a href="https://www.deta.sh/space"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-deta-space-can-get-better"&gt;
  &lt;/a&gt;
  How Deta Space can get better
&lt;/h1&gt;

&lt;p&gt;I also see teams using Deta Space as a future use case. Deta Space only supports spaces for individual users now, but later it can be expanded to provide a space that multiple users can access. Also, only one instance of an app can be created currently but the ability to create multiple instances will be a dealbreaker for some.&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>discuss</category>
      <category>productivity</category>
    </item>
    <item>
      <title>My Journey into Technical Writing</title>
      <author>Anish De</author>
      <pubDate>Mon, 27 Sep 2021 09:47:51 +0000</pubDate>
      <link>https://dev.to/anishde12020/my-journey-into-technical-writing-6i</link>
      <guid>https://dev.to/anishde12020/my-journey-into-technical-writing-6i</guid>
      <description>&lt;h1&gt;
  &lt;a href="#before-i-started-writing"&gt;
  &lt;/a&gt;
  Before I started writing
&lt;/h1&gt;

&lt;p&gt;I was interested in tech in general from a very young age and have been expanding my knowledge from watching videos and reading articles for a long time. I used to read articles written across many technical news outlets like &lt;a href="https://www.gsmarena.com/"&gt;GSMArena&lt;/a&gt;, &lt;a href="https://www.xda-developers.com/"&gt;XDA Developers&lt;/a&gt;, and many more. Programming was something I started learning a few years back but I didn't read as many articles about it. About a year back, I found out &lt;a href="https://dev.to/"&gt;dev.to&lt;/a&gt; and that is when I started reading a lot of articles on programming. As a side note, I have a &lt;a href="https://www.youtube.com/channel/UCY-rVWTIsN-G7s81C89SzkA"&gt;YouTube channel&lt;/a&gt; which I started last year and it has been quite a good experience. I have not uploaded any videos for about 3 months now but I aim to resume sometime in the future.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#starting-with-technical-writing"&gt;
  &lt;/a&gt;
  Starting with technical writing
&lt;/h1&gt;

&lt;p&gt;I never wrote an article on DEV until I found out about Hashnode back in April of this year. Hashnode was a great place to start my blog so I made a publication and wrote &lt;a href="https://blog.anishde.dev/cryptography-with-python-using-fernet"&gt;my first article&lt;/a&gt;. I also cross-posted that article to DEV and I got quite a lot of views on that article. I liked it and then wrote &lt;a href="https://blog.anishde.dev/the-random-library-in-python"&gt;my second article&lt;/a&gt; a few days later. Note that I was still making videos on my YouTube channel at this time.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-more-interested"&gt;
  &lt;/a&gt;
  Getting more interested
&lt;/h1&gt;

&lt;p&gt;After writing those two articles, I didn't write any for a few months and that was because I didn't know what to write about and I was still not very confident if I would be able to do good. Things changed with the &lt;a href="https://townhall.hashnode.com/auth0-hackathon"&gt;August Hashnode x Auth0 BootCamp&lt;/a&gt; where I made an application and wrote &lt;a href="https://blog.anishde.dev/easy-comments"&gt;an article&lt;/a&gt; as a part of my submission. Suddenly, I got more interested in technical writing and I have written 8 blog posts in the last 3 weeks. Hashnode's &lt;a href="https://hashnode.com/challenge/2articles1week"&gt;2articles1week&lt;/a&gt; challenge has got me into writing consistently and the &lt;a href="https://hashnode.com/bootcamp"&gt;Technical Writing Bootcamp&lt;/a&gt; has taught me a lot about writing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h1&gt;

&lt;p&gt;I aim to write more articles about programming and tech from now on. I also plan on reviving my YouTube channel with videos about programming, let me know your thoughts in the comments section. I am also working on a portfolio site right now and will be working on more projects and learning more. &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt; is just 3 days away and I plan on participating in Hacktoberfest as well.&lt;/p&gt;

</description>
      <category>writing</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to estimate time and effort for a software development project as a developer</title>
      <author>Fora Soft</author>
      <pubDate>Mon, 27 Sep 2021 09:45:27 +0000</pubDate>
      <link>https://dev.to/forasoft/how-to-estimate-time-and-effort-for-a-software-development-project-as-a-developer-3jjf</link>
      <guid>https://dev.to/forasoft/how-to-estimate-time-and-effort-for-a-software-development-project-as-a-developer-3jjf</guid>
      <description>&lt;p&gt;Estimating IT projects is a pain. Whoever gave promises they couldn‚Äôt keep, only to work overtime just to meet the deadline they have set up for themselves?&lt;/p&gt;

&lt;p&gt;When I started my path and tried to estimate my time spent while being a developer, I always underestimated things. Every time there would appear a job I didn‚Äôt account for. Colleagues told me to multiply my estimates by 2, 3, the number Pi. Only it didn‚Äôt help to increase the estimation accuracy, just added other problems. For example, when I had to explain where the high numbers came from.&lt;/p&gt;

&lt;p&gt;16 years have passed since then. Over this time, I‚Äôve estimated over 250 projects, got a lot of experience, and now I‚Äôm willing to share my thoughts on the topic.&lt;/p&gt;

&lt;p&gt;Hopefully, this article will improve the quality of the estimations you‚Äôre giving.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-estimate"&gt;
  &lt;/a&gt;
  Why estimate?
&lt;/h2&gt;

&lt;p&gt;No more than 29% of projects end up in success, according to the research by The Standish Group, conducted in 2015. The other 71% either failed or exceeded the triple limitation system: deadline, functionality, budget.&lt;/p&gt;

&lt;p&gt;From these statistics, we can assume that project estimation is often not what it should be. Does it mean that this process is pointless? There‚Äôs even a movement on the Internet that invites you to not estimate anything and just write a code, so that whatever happens ‚Äì happens (search by #noestimates).&lt;/p&gt;

&lt;p&gt;Not having any estimations does sound appealing, but let me give you an example. Imagine that you come to a restaurant and order a steak and a bottle of wine but there are no prices on the menu. You ask a waiter: ‚Äúhow much?‚Äù, and he goes, ‚Äúdepends on how long it takes the chef to cook. Order, please. You‚Äôll get your food, you‚Äôll eat it and then we‚Äôll tell you how much it cost‚Äù.&lt;/p&gt;

&lt;p&gt;There can also be an Agile-like option: ‚ÄúThe chef will cook your meal, and you‚Äôll be paying as he proceeds. Do this, please, unless you‚Äôre out of money. When you have no more money, the chef will stop cooking. The steak won‚Äôt be ready, perhaps, or it will be just reaching the state when it‚Äôs edible. If it‚Äôs not edible, though.. Sorry, it‚Äôs your problem‚Äù.&lt;/p&gt;

&lt;p&gt;This is approximately how customers in the IT-sphere feel when they‚Äôre offered to start a job without estimations.&lt;/p&gt;

&lt;p&gt;In the example above we‚Äôd ideally like to get an exact price for the steak. At the very least, it‚Äôd be fine if we just got a price range. This way we can check whether we want to go to this restaurant, choose a cheaper one, go get a cheeseburger or stay home and cook a salad.&lt;/p&gt;

&lt;p&gt;Going to the restaurant without any understanding as to what to expect is not the decision that a person in the right mind will take.&lt;/p&gt;

&lt;p&gt;I hope I could convince you that estimation is an important part of a decision making process on any project. The estimation can be as close or far from reality as possible, but it‚Äôs needed nevertheless.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reasons-for-underestimation"&gt;
  &lt;/a&gt;
  Reasons for underestimation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ignoring-probability-theory"&gt;
  &lt;/a&gt;
  Ignoring probability theory
&lt;/h3&gt;

&lt;p&gt;Imagine the following situation. A developer is approached by a manager, and the manager would like to know how long it will take the developer to finish a task. The developer has done something like that in the past and can give the ‚Äúmost probable‚Äù estimation. Let it be 10 days. There‚Äôs a probability that the completion of the task will last for 12 days, but the chance is lower than that of 10 days. There‚Äôs also a chance that the task would be completed in 8 days but this probability is lower as well.&lt;/p&gt;

&lt;p&gt;It‚Äôs often assumed that estimation for a task or a project is distributed according to the normal distribution law &lt;a href="https://en.wikipedia.org/wiki/Normal_distribution"&gt;read more about it here&lt;/a&gt;. If you show estimation distributions as a graph, you‚Äôll get this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gWw3Szoc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yttidex8g217facxte0n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gWw3Szoc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yttidex8g217facxte0n.png" alt="it project estimation distributions" title="graph it estimation distributions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;X shows estimation while Y shows probabilities that the estimation will turn out to be correct and a task will consume the precise amount of time. In the center, you can see the point of the highest probability. It goes with our 10-day estimation.&lt;/p&gt;

&lt;p&gt;The area under the curve shows a probability of 100%. It means that if we go with the most probable estimation, we‚Äôll finish the project by the deadline with the 50% chance (the area under the graph before the 10-hour estimation is half of a figure, therefore it‚Äôs 50%). So, if we go with this principle, we‚Äôll be able to only miss 50% of the deadlines.&lt;/p&gt;

&lt;p&gt;This is only if the distribution of probabilities does go hand-in-hand with the normal distribution. In this case, the possibility of finishing a project earlier than a possible estimation equals to finishing it later than a possible estimation. However, it‚Äôs also normal that something goes wrong with the project, and we finish it later. Of course, a miracle can happen, and we finish earlier but what is the chance of that? In other words, the amount of negative possibilities is always higher than that of positive ones.&lt;/p&gt;

&lt;p&gt;If we go with this idea in mind, the distribution will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oYz2r7vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvw0bonx1qrwb3dbkoid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oYz2r7vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvw0bonx1qrwb3dbkoid.png" alt="it project estimation distributions with risks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this to be easier to read, let me represent this information as a cumulative graph. It will show a possibility of finishing the project earlier than a deadline or just in time:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oYz2r7vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvw0bonx1qrwb3dbkoid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oYz2r7vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvw0bonx1qrwb3dbkoid.png" alt="it project estimation with risks graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Turns out, if we take the ‚Äúmost possible‚Äù estimation in 10 days, the possibility of the task being completed in that period or earlier is less than 50%&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ignoring-the-current-level-of-uncertainty"&gt;
  &lt;/a&gt;
  Ignoring the current level of uncertainty
&lt;/h3&gt;

&lt;p&gt;As we work on a project/task, we keep learning new information. We get feedback from the manager, designer, tester, customer, and other team members. This knowledge keeps renewing. We don‚Äôt know much about the project from the beginning, but we learn more as we go along, and we can mention exactly how long it took us once we‚Äôve finished the project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9HQtWslb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/25us4m2k9it5sccwvguw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9HQtWslb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/25us4m2k9it5sccwvguw.png" alt="graph it project estimation over time"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What we know directly affects how precise our estimation is.&lt;/p&gt;

&lt;p&gt;Luiz Laranjeira‚Äôs (Ph.D., Associate Professor at The University of Brasilia) research also shows that the accuracy of estimating a software project depends on how clear the requirements are (Luiz Laranjeira, 1990). The clearer the requirements are ‚Äì the more accurate the estimation is. Usually, the estimation isn‚Äôt clear because the uncertainty is involved in the project/task. Therefore, the only way of reducing uncertainty is by reducing it in the project/task.&lt;/p&gt;

&lt;p&gt;Considering this research and common sense, as we decrease the uncertainty on a task/project, we increase the estimation accuracy.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--57Yc_nlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xei6k8e21z8np3178jpc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--57Yc_nlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xei6k8e21z8np3178jpc.png" alt="it project estimation reduce uncertainty"&gt;&lt;/a&gt;&lt;br&gt;
This graph is here to make it easier to understand. In reality, the most possible estimation may change as uncertainty decreases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependency-between-precise-estimation-and-the-project-stage"&gt;
  &lt;/a&gt;
  Dependency between precise estimation and the project stage
&lt;/h2&gt;

&lt;p&gt;Luiz Laranjeira went on with his research and figured out how numerically dependent estimation spread in on a project stage (level of uncertainty).&lt;/p&gt;

&lt;p&gt;Taking optimistic, pessimistic and the most possible estimations (optimistic estimation is the earliest period of finishing the project out of all, while pessimistic is vice versa, the latest) and show how their ratios change over time, from start to finish of the project, we‚Äôll get the following picture:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fuduer1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p31c82mgqpt080blohnq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fuduer1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p31c82mgqpt080blohnq.png" alt="project-estimation-spread-dependency-on-a-project-stage"&gt;&lt;/a&gt;&lt;br&gt;
This is called a cone of uncertainty. The horizontal axis stands for the time between the start and the finish of the project. The main project stages are mentioned there. The vertical axis shows a relative margin of error in the estimation.&lt;/p&gt;

&lt;p&gt;So, at the start of the initial concept, the most possible estimation may vary from the optimistic one by 400%. When the UI is ready, the spread of estimation goes between 0.8 and 1,25 relative to the most possible estimation.&lt;/p&gt;

&lt;p&gt;This data can be found in the table down below:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Life-cycle stage&lt;/th&gt;
&lt;th&gt;optimistic estimation&lt;/th&gt;
&lt;th&gt;pessimistic estimation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Initial concept&lt;/td&gt;
&lt;td&gt;0.25—Ö&lt;/td&gt;
&lt;td&gt;4—Ö&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Business requirements (agreed definition of the product)&lt;/td&gt;
&lt;td&gt;0.5—Ö&lt;/td&gt;
&lt;td&gt;2—Ö&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Functional and non-functional requirements&lt;/td&gt;
&lt;td&gt;0.67—Ö&lt;/td&gt;
&lt;td&gt;1.5—Ö&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;User Interface&lt;/td&gt;
&lt;td&gt;0.8—Ö&lt;/td&gt;
&lt;td&gt;1.25—Ö&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Thoroughly thought realization&lt;/td&gt;
&lt;td&gt;0.9—Ö&lt;/td&gt;
&lt;td&gt;1.15—Ö&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Finished product&lt;/td&gt;
&lt;td&gt;1—Ö&lt;/td&gt;
&lt;td&gt;1—Ö&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;It‚Äôs very important to note that the cone doesn‚Äôt get narrower as time goes by. For it to narrow, one needs to manage the project and take action to lower uncertainty. If one doesn‚Äôt do that, they‚Äôll get something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--29I8VWzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8vs3z7s9tk7hvbt12te.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--29I8VWzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8vs3z7s9tk7hvbt12te.png" alt="Cone-of-uncertainty-if-we-do-not-clarify-requirements"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The green area is called a cloud of uncertainty. The estimation is subject to major deviation up to the very end of the project.&lt;/p&gt;

&lt;p&gt;To move on the cone to the most-right point where there‚Äôs no uncertainty, we need to create a finished product :). So, as long as the product is not ready, there will always be uncertainty, and the estimation can‚Äôt be 100% precise. However, you can affect the estimation accuracy by lowering uncertainty. With this, &lt;strong&gt;any action targeted at lowering uncertainty also lowers the estimation spread.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This model is used in many companies, NASA included. Some adapt it to consider volatility in requirements. You can read about that in detail in ‚ÄúSoftware Estimation: Demystifying the Black Art‚Äù.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-good-estimation"&gt;
  &lt;/a&gt;
  What is a good estimation?
&lt;/h2&gt;

&lt;p&gt;There are plenty of options to answer this question. However, in reality, if the estimation deviates by more than 20%, the manager doesn‚Äôt have a room for maneuver. If the estimation is somewhere around 20%, the project can be finished successfully by managing functionality, deadlines, team size, etc. It does sound logical, so let‚Äôs stop at this definition of good estimation, for example. This decision has to be taken on the organizational level. Some risk and a 40-50% deviation is OK for them; others see 10% as a lot.&lt;/p&gt;

&lt;p&gt;So, if out estimation differs from the actual result by not more than 20%, we consider it good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#practice-estimating-a-project-on-various-stages"&gt;
  &lt;/a&gt;
  Practice. Estimating a project on various stages
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs imagine that a project manager has approached you and asked to estimate a function or a project.&lt;/p&gt;

&lt;p&gt;To start with, you have to study available requirements and figure out the life-cycle stage of a project definition.&lt;/p&gt;

&lt;p&gt;What you do next depends on the stage you‚Äôre on:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stage-1-initial-concept"&gt;
  &lt;/a&gt;
  Stage 1. Initial concept
&lt;/h3&gt;

&lt;p&gt;If a manager approaches you and asks how long it will take to create an app where doctors will consult patients, you are on Stage 1.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#when-does-it-make-sense-to-make-estimations-on-this-stage"&gt;
  &lt;/a&gt;
  When does it make sense to make estimations on this stage?
&lt;/h4&gt;

&lt;p&gt;On a pre-sale stage. When you need to realize whether it‚Äôs worth it to further discuss the project. All in all, it‚Äôs better to avoid estimations on this stage and try to lower the uncertainty as soon as possible. After that, we can move on to the next stage.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-do-you-need-to-estimate-on-this-stage"&gt;
  &lt;/a&gt;
  What do you need to estimate on this stage?
&lt;/h4&gt;

&lt;p&gt;Actual labor time data on a similar finished project.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-tools-are-the-most-suitable-for-this-stage"&gt;
  &lt;/a&gt;
  What tools are the most suitable for this stage?
&lt;/h4&gt;

&lt;p&gt;An estimation by analogy&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#estimation-algorithm"&gt;
  &lt;/a&gt;
  Estimation algorithm
&lt;/h4&gt;

&lt;p&gt;Actually, estimating the project on this stage is an impossible task. You can only see how long a similar project took to launch.&lt;/p&gt;

&lt;p&gt;For example, this is how you could put your estimation into words: ‚ÄúI don‚Äôt know how long this project will take as I lack data. However, project X which was similar to this one took Y time. To give at least an approximate estimation, it‚Äôs imperative to make requirements clearer‚Äù.&lt;/p&gt;

&lt;p&gt;If there‚Äôs no data from similar projects, then lowering the uncertainty and moving to the next stage is the only way to estimate here.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-move-to-the-next-stage"&gt;
  &lt;/a&gt;
  How to move to the next stage?
&lt;/h4&gt;

&lt;p&gt;For this to happen, the requirements must be clarified. You need to understand what the app is for and its functionality.&lt;/p&gt;

&lt;p&gt;Ideally, one should have skills in gathering and analyzing requirements.&lt;/p&gt;

&lt;p&gt;To improve that skill, it‚Äôs recommended to read ‚ÄúSoftware requirements‚Äù by Karl Wiegers and Joy Beatty.&lt;br&gt;
To gather preliminary requirements, you might use this questionnaire:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What‚Äôs the purpose of the app? What problems will it solve?&lt;/li&gt;
&lt;li&gt;What is the target audience? (for the task above that could be doctor, patient, administrator)&lt;/li&gt;
&lt;li&gt;What problems will each type of users solve in the app?&lt;/li&gt;
&lt;li&gt;What platforms is the app for?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After figuring these things out, you will have an image of the app in your head with all the necessary information. With this, we‚Äôre moving to Stage 2.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stage-2-an-agreed-definition-of-the-product"&gt;
  &lt;/a&gt;
  Stage 2. An agreed definition of the product
&lt;/h3&gt;

&lt;p&gt;We have an understanding here, although not very detailed, about what the app will do and what won‚Äôt.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#when-does-it-make-sense-to-make-estimations-on-this-stage"&gt;
  &lt;/a&gt;
  When does it make sense to make estimations on this stage?
&lt;/h4&gt;

&lt;p&gt;Again, on the pre-sale stage. Right when one needs to decide whether it‚Äôs worth it to complete the task or project, whether they have enough money, whether the deadlines are affordable. You need to check if the value that the project brings is worth the resources that need to be involved.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-do-you-need-to-estimate-on-this-stage"&gt;
  &lt;/a&gt;
  What do you need to estimate on this stage?
&lt;/h4&gt;

&lt;p&gt;Quite a few finished projects and their estimations OR huge experience in the area of development to which the project is related. These two combined would be even better!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-tools-are-the-most-suitable-for-this-stage"&gt;
  &lt;/a&gt;
  What tools are the most suitable for this stage?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;An estimation by analogy&lt;/li&gt;
&lt;li&gt;A top-to-bottom estimation&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#estimation-algorithm"&gt;
  &lt;/a&gt;
  Estimation algorithm
&lt;/h4&gt;

&lt;p&gt;If there was a project like this before, the approximate estimation would be the time spent on that project.&lt;/p&gt;

&lt;p&gt;If there is no data on projects like that, you need to split the project into the main functional units, then estimate every block according to those that were done on other projects.&lt;/p&gt;

&lt;p&gt;For example, with the app where the doctors would consult patients, we could have got something like that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Registration&lt;/li&gt;
&lt;li&gt;Appointment scheduling system&lt;/li&gt;
&lt;li&gt;Notification system&lt;/li&gt;
&lt;li&gt;Video consultation&lt;/li&gt;
&lt;li&gt;Feedback system&lt;/li&gt;
&lt;li&gt;Payment system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You could estimate the ‚Äúregistration‚Äù block by using something similar from another project and for the ‚Äúfeedback system‚Äù a block from a different project.&lt;/p&gt;

&lt;p&gt;If there are blocks that were never done before or they lack data, you can either compare the necessary labor time against other blocks or reduce uncertainty and use the estimation method from the next stage.&lt;/p&gt;

&lt;p&gt;For example, the ‚Äúfeedback system‚Äù module might seem twice as difficult as the ‚Äúregistration‚Äù module. Therefore, for the feedback, we could get an estimation twice as high as the registration.&lt;/p&gt;

&lt;p&gt;The method of comparing one block against the other is not exactly precise, and it‚Äôs better used in the situation where the number of the blocks that were never done isn‚Äôt higher than 20% of the blocks that do have historic data. Otherwise, it‚Äôs just a guess.&lt;/p&gt;

&lt;p&gt;After this, we summarize estimation of all blocks, and it will be the most possible one. The optimistic and pessimistic estimations can be calculated using the coefficients appropriate for the current stage ‚Äì x0,5 and x2 (check the coefficient sheet).&lt;/p&gt;

&lt;p&gt;Ideally, you should let your manager know what‚Äôs going on, and they will have to deal with it.&lt;/p&gt;

&lt;p&gt;If the manager can‚Äôt deal with it and asks for one, single number, there are ways to do that.&lt;/p&gt;

&lt;p&gt;How to calculate one estimation out of three? It will be answered down below in the corresponding chapter.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-move-to-the-next-stage"&gt;
  &lt;/a&gt;
  How to move to the next stage?
&lt;/h4&gt;

&lt;p&gt;Prepare a full list of requirements. There are quite a few documentation ways, but we‚Äôll look into a widely used one with a User Story.&lt;/p&gt;

&lt;p&gt;We need to understand who will be using each block and what they‚Äôll be doing with the blocks. &lt;/p&gt;

&lt;p&gt;For example, for the ‚Äúfeedback system‚Äù block we would end up with these bullet points  after gathering and analyzing requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A patient can check all feedback about the chosen doctor&lt;/li&gt;
&lt;li&gt;The patient can leave feedback for the doctor after a video consultation with him&lt;/li&gt;
&lt;li&gt;The doctor can see feedback from the patients&lt;/li&gt;
&lt;li&gt;The doctor can leave a comment on feedback&lt;/li&gt;
&lt;li&gt;An administrator can see all feedback&lt;/li&gt;
&lt;li&gt;The administrator can edit any feedback&lt;/li&gt;
&lt;li&gt;The administrator can delete feedback&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will also need to collect and write down all requirements that are not functionality-based. To do that, use this check-list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What platforms is it for?&lt;/li&gt;
&lt;li&gt;What operating systems need to be supported?&lt;/li&gt;
&lt;li&gt;What do you need to integrate with?&lt;/li&gt;
&lt;li&gt;How fast is it supposed to work?&lt;/li&gt;
&lt;li&gt;How many users at the same time can use the tool?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Clarifying this stage will move you to the next one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stage-3-the-requirements-are-gathered-and-analyzed"&gt;
  &lt;/a&gt;
  Stage 3. The requirements are gathered and analyzed
&lt;/h3&gt;

&lt;p&gt;This stage has a full list of what each user can do in the system. There is also a list of non-functional requirements.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#when-does-it-make-sense-to-make-estimations-on-this-stage"&gt;
  &lt;/a&gt;
  When does it make sense to make estimations on this stage?
&lt;/h4&gt;

&lt;p&gt;When you need to give an approximate estimation for the project before you begin working with the Time &amp;amp; Materials model. The estimation of tasks from this stage can be used to prioritize some of them on the project, to plan the release dates and the whole project budget. You can also use those to control the team‚Äôs efficiency on the project.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-do-you-need-to-estimate-on-this-stage"&gt;
  &lt;/a&gt;
  What do you need to estimate on this stage?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The list of functional requirements&lt;/li&gt;
&lt;li&gt;The list of non-functional requirements&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-tools-are-the-most-suitable-for-this-stage"&gt;
  &lt;/a&gt;
  What tools are the most suitable for this stage?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;An estimation by analogy&lt;/li&gt;
&lt;li&gt;A top-to-bottom estimation&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#estimation-algorithm"&gt;
  &lt;/a&gt;
  Estimation algorithm
&lt;/h4&gt;

&lt;p&gt;You need to decompose each task (split it into components). The smaller the components are, the more precise will the estimation be.&lt;/p&gt;

&lt;p&gt;To do it on the best of your abilities, you need to represent everything that needs to be done on paper.&lt;/p&gt;

&lt;p&gt;For example, for our User Story that goes like ‚Äúa patient can see all feedback about the chosen doctor‚Äù, we could get something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PpUJkMPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwx43m9ph4719z2k7hdz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PpUJkMPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwx43m9ph4719z2k7hdz.png" alt="Task-decomposition"&gt;&lt;/a&gt;&lt;br&gt;
We split the task here into three parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create infrastructure in the database&lt;/li&gt;
&lt;li&gt;Create the DAL level for data samples&lt;/li&gt;
&lt;li&gt;Create a UI where the feedback will appear&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you could, you can write down the UI functionality and approve it with whoever asks for estimation. It will eliminate lots of questions, make the estimation more precise, and be a good quality of life change.&lt;/p&gt;

&lt;p&gt;If you want to improve your interface design skills, it‚Äôs recommended to read two books: ‚ÄúThe Humane Interface‚Äù by Jef Raskin and ‚ÄúAbout Face. The essentials of interaction design‚Äù by Alan Cooper.&lt;/p&gt;

&lt;p&gt;Then you need to imagine what exactly will be done for each task and estimate how long it will take. Here you have to calculate time, not guess it. You have to know what you will do to finish each subtask.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N2Ch8u5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpzs3lobnedn1y6bieo7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N2Ch8u5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpzs3lobnedn1y6bieo7.png" alt="Task-decomposition-estimated"&gt;&lt;/a&gt;&lt;br&gt;
If there are tasks that take more than 8 hours, split them into subtasks.&lt;/p&gt;

&lt;p&gt;The estimation received after having done this can be considered optimistic as it most likely uses the shortest path from point A to point B, given that we haven‚Äôt forgotten anything.&lt;/p&gt;

&lt;p&gt;Now it‚Äôs about time we thought about things that we‚Äôve probably missed and correct the estimation accordingly. Usually, the checklist helps here. This is an example of such a list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;Test data creation&lt;/li&gt;
&lt;li&gt;Support for different screen resolutions&lt;/li&gt;
&lt;li&gt;‚Ä¶&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After completing this list, we have to add the tasks we might have missed to the task list:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jcv79ved--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi2ddx3rsxovut11yuz7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jcv79ved--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi2ddx3rsxovut11yuz7.png" alt="Task-decomposition-estimated-missed-stuff"&gt;&lt;/a&gt;&lt;br&gt;
Go through each task and subtask and think about what could go wrong, what is missed. Oftentimes, this analysis reveals things without which you can‚Äôt end up with a best-case scenario. Add them to your estimation:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZlMOYkov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzo3a97vhm78684egra0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZlMOYkov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzo3a97vhm78684egra0.png" alt="Task-decomposition-estimated-missed-stuff-what-can-go-wrong"&gt;&lt;/a&gt;&lt;br&gt;
After you calculate this, too, your estimation will be even closer to the optimistic one than to the most possible one. If we take a look at the cone, the estimation will be closer to its lowest line.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IhERw7KA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ic67f43q081rrmqtmts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IhERw7KA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ic67f43q081rrmqtmts.png" alt="Calculated-estimate-on-the-cone-of-uncertainty"&gt;&lt;/a&gt;&lt;br&gt;
The exception here might be if you‚Äôve done a similar task before and can speak with authority that you know how it‚Äôs done and how long it takes. In that case, your estimation would be called ‚Äúthe most possible‚Äù and it‚Äôd go along with the 1x line on the cone. Otherwise, your estimation is optimistic.&lt;/p&gt;

&lt;p&gt;The other two estimations can be calculated with the coefficients according to this stage: x0,67 and x1.5 (check out the coefficient table).&lt;/p&gt;

&lt;p&gt;If you calculate the estimation from the example above, we‚Äôll get this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Optimistic estimation: 14 hours&lt;/li&gt;
&lt;li&gt;The most possible estimation: 20 hours&lt;/li&gt;
&lt;li&gt;Pessimistic estimation: 31 hours&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#how-to-move-to-the-next-stage"&gt;
  &lt;/a&gt;
  How to move to the next stage?
&lt;/h4&gt;

&lt;p&gt;By designing the UI. Creating wireframes would be the best way to go.&lt;/p&gt;

&lt;p&gt;There are multiple programs for that but I‚Äôd recommend Balsamiq and Axure RP.&lt;/p&gt;

&lt;p&gt;Prototyping is another huge topic that is not for this article.&lt;/p&gt;

&lt;p&gt;Having a wireframe means that we‚Äôre on the next stage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stage-4-the-interface-is-designed"&gt;
  &lt;/a&gt;
  Stage 4. The interface is designed
&lt;/h3&gt;

&lt;p&gt;We have a wireframe here as well as the full list of what each user will do in the system. We also have a list of non-functional requirements.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#when-does-it-make-sense-to-make-estimations-on-this-stage"&gt;
  &lt;/a&gt;
  When does it make sense to make estimations on this stage?
&lt;/h4&gt;

&lt;p&gt;To create an exact estimation by the Fixed Price model. You can also do that for everything that was mentioned in the previous stage.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-do-you-need-to-estimate-on-this-stage"&gt;
  &lt;/a&gt;
  What do you need to estimate on this stage?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Prepared wireframes&lt;/li&gt;
&lt;li&gt;A list of functional requirements&lt;/li&gt;
&lt;li&gt;A list of non-functional requirements&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-tools-are-the-most-suitable-for-this-stage"&gt;
  &lt;/a&gt;
  What tools are the most suitable for this stage?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;An estimation by analogy&lt;/li&gt;
&lt;li&gt;A top-to-bottom estimation&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#estimation-algorithm"&gt;
  &lt;/a&gt;
  Estimation algorithm
&lt;/h4&gt;

&lt;p&gt;The same as in the previous stage. The difference is in accuracy. Having a planned interface, you won‚Äôt have to think as much and the possibility of missing something is lower.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-move-to-the-next-stage"&gt;
  &lt;/a&gt;
  How to move to the next stage?
&lt;/h4&gt;

&lt;p&gt;Design the app architecture and thoroughly think about the realization. We won‚Äôt check that option as it is used quite rarely. With that being said, the estimation algorithm after thinking about architecture won‚Äôt differ from one on this stage. The difference is, once again, in accuracy increase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#retrieving-one-estimation-from-the-range-of-estimations"&gt;
  &lt;/a&gt;
  Retrieving one estimation from the range of estimations
&lt;/h2&gt;

&lt;p&gt;If you have the three types of estimation ready, we can use the knowledge by Tom DeMarco to retrieve one estimation. In his book ‚ÄúWaltzing with bears‚Äù he mentioned that absolute possibility can be obtained by integrating the area under the curve (in the graph we had before). The original calculation template can be downloaded from &lt;a href="https://www.vistem.eu/"&gt;here&lt;/a&gt; or from &lt;a href="https://www.dropbox.com/s/ge38zuwwnm8yflz/Estimation%20template.xls?dl=0"&gt;here&lt;/a&gt; without registration. You need to insert three numbers in the template and receive a result as a list of estimations with their corresponding probabilities.&lt;/p&gt;

&lt;p&gt;For example, for our estimations of 14, 20, and 31 hours we‚Äôll have something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dGBT5aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rihp5o69thmm9cr3ugij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dGBT5aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rihp5o69thmm9cr3ugij.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
You can choose any probability you deem decent for your organization, but I‚Äôd recommend 85%.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-know-how-to-estimate-speak-up"&gt;
  &lt;/a&gt;
  Don‚Äôt know how to estimate? Speak up!
&lt;/h2&gt;

&lt;p&gt;If you don‚Äôt know what you‚Äôre asked or how to implement the functionality you need to estimate? Let your manager know, give him an approximate estimation, if that‚Äôs possible, and suggest actions that will make the estimation more precise.&lt;/p&gt;

&lt;p&gt;For example, if you don‚Äôt know whether the technology works to finish the task, ask for some time to create a prototype that will either confirm your estimation or show what you‚Äôve missed. If you are not sure that the task is doable, say that from the beginning. These things need to be confirmed before you‚Äôve put their weight on your shoulders.&lt;/p&gt;

&lt;p&gt;It‚Äôs very important to provide a manager with this information, otherwise, he can blindly trust you and have no idea that there‚Äôs a chance of missing the deadline by 500% of the time or simply not finish the product with the technology or requirements you have.&lt;/p&gt;

&lt;p&gt;A good manager will always be by your side. You and he are in the same boat, and sometimes his career depends on whether you‚Äôll finish on time even more than yours.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#doubts-dont-promise"&gt;
  &lt;/a&gt;
  Doubts? Don‚Äôt promise
&lt;/h2&gt;

&lt;p&gt;Many organizations and developers help their projects fail by taking on responsibilities too early on the cone of uncertainty. It‚Äôs risky as the possible result jumps between 100% and 1600%.&lt;/p&gt;

&lt;p&gt;Efficient organizations and developers postpone decision making up until the moment when the cone is narrower.&lt;/p&gt;

&lt;p&gt;Usually, this is normal for organizations that are on the more mature CMMI module level. Their actions to make the cone narrow down are clearly stated and are followed.&lt;/p&gt;

&lt;p&gt;You can see the quality of estimations and its increase in the projects of the U.S. Air Force when they moved to the more mature CMMI level:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DW8ICxUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eze6u7izt0n1lgmg83k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DW8ICxUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eze6u7izt0n1lgmg83k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
There‚Äôs something to think about here. Other companies‚Äô statistics confirm this correlation.&lt;/p&gt;

&lt;p&gt;Even here, accuracy of the estimations can‚Äôt be achieved only with estimation methods. It‚Äôs inextricably linked to the efficiency of project management. It doesn‚Äôt depend only on developers, but also on project managers and senior management.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It‚Äôs nearly impossible to give an absolutely correct estimation. You can, however, affect the range in which the estimation will fluctuate. To do that, try and lower the uncertainty level on the project&lt;/li&gt;
&lt;li&gt;Making estimation be more accurate can be achieved through splitting tasks into components. As you decompose things, you‚Äôll think what and how you will do things in details&lt;/li&gt;
&lt;li&gt;Use checklists to lower the possibility of missing something as you estimate&lt;/li&gt;
&lt;li&gt;Use the uncertainty cone to understand the range where your estimation will most probably fluctuate&lt;/li&gt;
&lt;li&gt;Always be comparing the given estimate with the time that was actually spent on a task. It will help you improve your estimation skill, understand what you‚Äôve missed, and use it as you move further.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#useful-books"&gt;
  &lt;/a&gt;
  Useful books
&lt;/h2&gt;

&lt;p&gt;There is a lot of literature on the topic but I‚Äôll recommend the two books that must be read.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Software Estimation: Demystifying the Black Art by Steve McConnell
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MH3w8S23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxzryf2i2kc0bots6gpg.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Waltzing With Bears: Managing Risks On Software Projects by Tom DeMarco and Timothy Lister.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kbJPkSoE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhiifpaja9yybk325c57.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Previously published at &lt;a href="https://forasoft.com/blog/article/how-to-estimate-time-and-effort-for-a-software-development-project-as-a-developer-95?ref=dev.to"&gt;Fora Soft blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article was written by Nikolay Sapunov, Fora Soft CEO &amp;amp; Founder&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Why and How of Websites for Writers</title>
      <author>Otis Anderson</author>
      <pubDate>Mon, 27 Sep 2021 09:13:02 +0000</pubDate>
      <link>https://dev.to/otisons/the-why-and-how-of-websites-for-writers-59de</link>
      <guid>https://dev.to/otisons/the-why-and-how-of-websites-for-writers-59de</guid>
      <description>&lt;h2&gt;
  &lt;a href="#provide-an-authors-shop-window-for-editors-clients-and-readers"&gt;
  &lt;/a&gt;
  Provide an Author's Shop Window for Editors, Clients and Readers
&lt;/h2&gt;

&lt;p&gt;Many writers feel that a professional website is too hard (to build themselves) or too expensive (to use a web designer). That might have been so once, but not any more.&lt;br&gt;
Readers, editors and clients are being conditioned to expect writers to have a website, and now it's fast becoming something that writers can't afford to leave for another day. Although they understand this, thousands of freelance writers or authors have put off creating &lt;a href="https://worldscholarshipforum.com/paper-writing-service/"&gt;paper writing service&lt;/a&gt; websites because of a seemingly insurmountable problem: they simply have no idea where to start. They know nothing about building a website ‚Äì and as for the other option, hiring a web designer to do it instead... isn't it prohibitively expensive to get a professional to do it?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--41QXpZbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60p8fnt4pzl0id6rw7ht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41QXpZbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60p8fnt4pzl0id6rw7ht.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#userfriendly-website-templates-xsitepro-and-wordpress"&gt;
  &lt;/a&gt;
  User-Friendly Website Templates: XSitePro and WordPress
&lt;/h2&gt;

&lt;p&gt;Luckily things have evolved to the stage where writers can actually have a good shot at building a professional-looking website on their own. This is thanks to software that provides well-designed templates, so the site doesn't have to have that 'home-made' look. One very easy website builder is XSitePro. This software has a great many more bells and whistles than a writer is likely to need, because it was created with internet marketers in mind. However, just ignore the 'extras' until they are needed (if ever) - the main thing that a writer needs to know is that by using this software, it's possible to come up with a nice-looking site in a very short time.&lt;/p&gt;

&lt;p&gt;The creators of XSitePro even offer a free header tool, XHeader, that anyone can use to create their own personalised site header graphic. It's worth downloading this just to play around with it - especially since writers can create all sorts of graphics for their sites with this tool. It's easy to export the results in standard image files like jpegs or gifs.&lt;/p&gt;

&lt;p&gt;XSitePro website design software will create a very professional-looking site for any writer, but the software is not free. On the other hand, writers on a tight budget will find that PageBreeze (which is free to download) has all the functionality they need to build a website, but the trade-off is that there is much more of a learning curve.&lt;/p&gt;

&lt;p&gt;What if an author wants to have a writer's website, but doesn't have the time or inclination to build a website themselves? There are two options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hire a web designer to build it, or&lt;/li&gt;
&lt;li&gt;use an online website builder (where the writer signs into a website then uses the tools on the host website to create pages and upload photos.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#consider-starting-a-blog"&gt;
  &lt;/a&gt;
  Consider Starting a Blog
&lt;/h2&gt;

&lt;p&gt;Lastly, a very easy and inexpensive way to make a start on becoming visible on the Internet is to start a blog. In fact, many writers have actually chosen to convert their original websites to a blog format. Why?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A blog allows interaction with readers and other writers; they can post comments.&lt;/li&gt;
&lt;li&gt;A blog can be customised to look like a website - writers can add extra pages and links at will.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/WordPress"&gt;WordPress blogs&lt;/a&gt; are easy to use, highly customisable, and there are lots of useful plug-ins available (to combat spam, upload photos, add links to popular social networking pages and so on). WordPress is easily customisable so that the site looks more like a traditional website than a blog.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#doityourself-website-or-pay-a-website-designer"&gt;
  &lt;/a&gt;
  Do-It-Yourself Website or Pay a Website Designer?
&lt;/h2&gt;

&lt;p&gt;For a writer who can see the benefits of having his or her own website, the first step is to decide how it is going to happen: DIY or use a designer. A few years ago it could become very expensive to have a website professionally designed and uploaded to the Internet. Now there are many website designers who will do this for a very reasonable fee. For example: website designer Gail Breese specalises in creating websites for writers. Her website shows a dozen or so of these sites, along with comments from clients. To find a website designer in your country, just do a search using a phrase like "website designer for writer's website" and see what comes up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plan-the-content-for-your-writers-website"&gt;
  &lt;/a&gt;
  Plan the Content for Your Writer's Website
&lt;/h2&gt;

&lt;p&gt;The next step is to plan the content. A good place to start is by spending a few hours looking at other writers' websites ‚Äì and there are thousands of them around. Check out their home pages, their 'about me' page, and the layout of the site. Look at sites that are based on a blog format as well as traditional websites.&lt;/p&gt;

&lt;p&gt;Bookmark any sites that appeal because of the colours, design, or content. This will be useful for writers who design their own sites as well as those to opt to use a website design service. Scroll to the bottom of the home page to see if the site designer has been credited ‚Äì if so, it's easy to look them up on the Web. Finally, don't be afraid to use the 'Contact Me' section of a website you like to ask the owner who built the site.&lt;/p&gt;

&lt;p&gt;For most writers, it is well worth taking the time ‚Äì and if necessary, investing some money - to create a professional Internet presence. Don't put it off any longer. Make a start today by investigating the various options for a writer's website, and tomorrow... that website might be a reality!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-find-other-good-websitebuilding-resources"&gt;
  &lt;/a&gt;
  To Find Other Good Website-Building Resources
&lt;/h2&gt;

&lt;p&gt;For other good website design software and resources for those creating their own paper writing &lt;a href="https://writemypaperbro.com/"&gt;website&lt;/a&gt; and blog, try entering terms like 'website design software' and 'graphics for websites' into a search engine. There are new programs being created all the time, and one of them might be exactly what is needed!&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
