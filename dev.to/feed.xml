<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>dev.to works for organic traffic to your repo</title>
      <author>domonic</author>
      <pubDate>Wed, 13 Oct 2021 12:46:48 +0000</pubDate>
      <link>https://dev.to/domonic/devto-works-for-organic-traffic-to-your-repo-5a3g</link>
      <guid>https://dev.to/domonic/devto-works-for-organic-traffic-to-your-repo-5a3g</guid>
      <description>&lt;p&gt;I've only posted one thing on here. but have 11 repo views in 2 weeks. so that's pretty decent for the low effort vs twitter which you have to do about 20 spammy tweets per repo view.&lt;/p&gt;

&lt;p&gt;pip install domonic --upgrade&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/byteface/domonic/"&gt;https://github.com/byteface/domonic/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;not sure quite how it works still. but here's another post. where do they go? what makes my feed? is it like twitter where you follow people?&lt;/p&gt;

</description>
      <category>python</category>
      <category>javascript</category>
      <category>html</category>
      <category>devops</category>
    </item>
    <item>
      <title>Divide and Conquer</title>
      <author>Amira Abdelhalim</author>
      <pubDate>Wed, 13 Oct 2021 12:23:58 +0000</pubDate>
      <link>https://dev.to/amiraabdelhalim/divide-and-conquer-p0d</link>
      <guid>https://dev.to/amiraabdelhalim/divide-and-conquer-p0d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#divide-and-conquer"&gt;
  &lt;/a&gt;
  Divide and Conquer
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;it is a well-known recursive technique for solving problems. D&amp;amp;C gives a new way to think about solving problem.&lt;br&gt;
To solve a problem using D&amp;amp;C technique, there are two steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;figure out the base case(the simplest possible case).&lt;/li&gt;
&lt;li&gt;divide the problem until it becomes the base case.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;D&amp;amp;C isn't a simple algorithm that is applied to a problem. it is a way of thinking about the problem.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If we want to know the sum of numbers in an array... let's think of the simplest base case we can have.&lt;br&gt;
The simplest case is to have an array of 0 or 1 item. so in each step we need to take our array closer to an empty array.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_NKJzEa9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xp9v0sd0o9opj7xmoqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_NKJzEa9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xp9v0sd0o9opj7xmoqg.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#quicksort"&gt;
  &lt;/a&gt;
  Quicksort
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Quicksort is one of the algorithms that is built on divide and conquer technique. It is a sorting algorithm faster than selection sort and it is frequently used in real life.&lt;br&gt;
let's say we want to sort an array using quicksort what are the steps we shall do to have a sorted array.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;pick an element from the array, this element is called the &lt;em&gt;pivot&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;find the elements smaller than the pivot then the elements greater than the pivot. &lt;code&gt;this process is called partitioning&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;[33, 10]&lt;/code&gt; &lt;code&gt;(33)&lt;/code&gt; &lt;code&gt;[50, 34]&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;if sub-arrays are sorted we just need to combine them together.&lt;/li&gt;
&lt;li&gt;if sub-arrays are not sorted then repeat the first 2 steps until having a sorted array.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>PSA:The Risks of Remote JDWP Debugging</title>
      <author>Shai Almog</author>
      <pubDate>Wed, 13 Oct 2021 12:20:37 +0000</pubDate>
      <link>https://dev.to/codenameone/psathe-risks-of-remote-jdwp-debugging-dbh</link>
      <guid>https://dev.to/codenameone/psathe-risks-of-remote-jdwp-debugging-dbh</guid>
      <description>&lt;p&gt;&lt;strong&gt;It isn't so much a security risk as it is a wide open door with everything labeled for anyone to take freely and matches to burn it all down...&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I teach or lecture and mention security I always love the analogy of security as an Onion. This is a common cliché yet it’s still a powerful analogy for people who are new to the concepts. The equivalent analogy I would pick for remote debugging is like leaving your front door open with all your valuables piled in easy to spot and well labeled boxes. Calling JDWP insecure doesn’t make any sense. It wasn’t designed to be secure so it isn’t...&lt;/p&gt;

&lt;p&gt;Java Debug Wire Protocol (AKA JDWP) was designed for testing internally. Over the past few years I’ve run into quite a few individuals that made the mistake of leaving it on even in production!&lt;/p&gt;

&lt;p&gt;That’s INSANE!&lt;/p&gt;

&lt;p&gt;Even internally it’s a HUGE risk with  &lt;a href="https://www.idwatchdog.com/insider-threats-and-data-breaches/"&gt;60% of breaches originating from inside the organization&lt;/a&gt; . Well...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tn6fMz09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634113444886/ChPfwGtMr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tn6fMz09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634113444886/ChPfwGtMr.jpeg" alt="drew-scream.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This isn’t just a security risk, that could essentially give every hacker the “keys” to your server and full access to your server code… It’s also a serious stability hazard that could easily crash your production servers. &lt;/p&gt;

&lt;p&gt;Even for staging this is a problematic case. Staging servers are sometimes exposed to the internet but might serve as a stepping stone to the internal servers (e.g. same host so they slide under the firewall rule). Hackers can easily “hop” into the “real” servers once they are able to hack (or enter an open door really) the remote debug protocol.&lt;/p&gt;

&lt;p&gt;Before I proceed I’d like to clarify my bias: I work for  &lt;a href="https://lightrun.com/"&gt;Lightrun&lt;/a&gt;. We implement a tool that in many respects is a replacement for a debugger designed to work securely in staging and production. Still, you should read this even if you have no intention of using Lightrun since the facts I list below are still applicable to anyone using remote debugging.&lt;/p&gt;

&lt;p&gt;Another thing I’d like to point out is that I’m not a security expert. I did read a few excellent articles on the subject from security experts such as  &lt;a href="https://blog.aquasec.com/jdwp-misconfiguration-container-images"&gt;Assaf Morag&lt;/a&gt; . I think they are great if you’re a security researcher or a devops. This article focuses on the perspective of developers.&lt;/p&gt;

&lt;p&gt;Notice you don’t need to be a security expert to understand these concepts and inherent flaws. In that sense this post is much simpler than the one from Assaf. This post is also heavily biased towards Java since that’s my main field of expertise, but the situation isn’t much better in other languages/platforms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#insecure-by-design"&gt;
  &lt;/a&gt;
  Insecure By Design
&lt;/h2&gt;

&lt;p&gt;Most remote debugging protocols such as JDWP are a product of a different era. An era that gave us telnet and HTTP. Most aren’t even encrypted by default. Just leaving JDWP enabled  &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2018-5486"&gt;warrants a CVE&lt;/a&gt; . &lt;/p&gt;

&lt;p&gt;JDWP effectively allows remote code execution. Lets you access all the bytecode of the server which is effectively almost the same as giving access to your full server source code. It lets attackers do almost anything since it wasn’t designed with security in mind. &lt;/p&gt;

&lt;p&gt;I won’t even get into the complexities of man in the middle attacks etc. That’s just insane.&lt;/p&gt;

&lt;p&gt;I think the best mitigation is to tunnel the connection over SSH. It doesn’t solve all the problems but it’s at least not a huge hole like we normally have. Instead of enabling remote debugging as you normally would in the past, just enable it to your servers localhost as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;java &lt;span class="nt"&gt;-agentlib&lt;/span&gt;:jdwp&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dt_socket,server&lt;span class="o"&gt;=&lt;/span&gt;y,address&lt;span class="o"&gt;=&lt;/span&gt;9000 ApplicationName
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To connect to this remotely you will need SSH access to the machine and execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ssh remoteUser@remoteHost &lt;span class="nt"&gt;-L&lt;/span&gt; 9000:127.0.0.1:9000 &lt;span class="nt"&gt;-N&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you need credentials for the command also add them there. This will open a tunnel between your local machine’s port 9000 and the remote one. You will be able to debug on localhost but it would work as a standard remote debugger. The only difference is that it wouldn’t be as bad in terms of security.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#crash-and-burn"&gt;
  &lt;/a&gt;
  Crash and Burn
&lt;/h2&gt;

&lt;p&gt;Unfortunately such workarounds don’t impact everything else that is broken in the debug protocols. Some operations in the debugger require more than one step in terms of the protocol. As a result you could send a request to the debuggee, lose your connection and the debuggee could be stuck in a problematic state. &lt;/p&gt;

&lt;p&gt;This is an inherent limitation of the JDWP protocol and can’t be worked around in a standard debugger.&lt;/p&gt;

&lt;p&gt;The problem is that even unintentional actions can demolish a server. A simple conditional breakpoint that invokes a method as part of the condition can demolish server performance and crash it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#information-sifting"&gt;
  &lt;/a&gt;
  Information Sifting
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ni7quZih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634113633044/LJZGiwg5X.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ni7quZih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634113633044/LJZGiwg5X.jpeg" alt="office-space.jpg"&gt;&lt;/a&gt;&lt;br&gt;
In the cult classic office space the heroes sift pennies from transactions. Big organizations block a lot of this access and rightly so. &lt;/p&gt;

&lt;p&gt;Imagine if all your colleagues had debug access to your server… All you need is one conditional breakpoint on the user login code and you have the password of a person you can hack. If you’re smart you’ll try that password on a different site without anyone knowing so it can't even be traced to you. &lt;/p&gt;

&lt;p&gt;Seriously don’t do that!&lt;/p&gt;

&lt;p&gt;This is a very real risk of placing JDWP on servers and something you need to keep in mind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-we-solved-these-issues-at-lightrun"&gt;
  &lt;/a&gt;
  How we Solved these Issues at Lightrun
&lt;/h2&gt;

&lt;p&gt;Pretty much all of those problems don’t exist in Lightrun. Before I go into that, Lightrun doesn’t just let you start debugging… You need to authenticate. There’s an access system with corporate compliance, user roles that provide specific permissions etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#insecure-by-design"&gt;
  &lt;/a&gt;
  Insecure By Design
&lt;/h3&gt;

&lt;p&gt;Lightrun doesn’t use JDWP and instead uses a custom agent. This means that there is no need to open an additional port to your service. &lt;/p&gt;

&lt;p&gt;The agent connects to a management server so information is always pulled, never pushed. Furthermore, connections use certificate pinning to block man in the middle attacks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crash-and-burn"&gt;
  &lt;/a&gt;
  Crash and Burn
&lt;/h3&gt;

&lt;p&gt;Operations on Lightrun are executed using a fail-safe mechanism and a Sandbox.&lt;/p&gt;

&lt;p&gt;Operations sent to the agent are atomic so a connection failure won’t impact the agent. &lt;/p&gt;

&lt;p&gt;Furthermore, conditions and expressions are sandboxed and checked. If too much CPU is used or a write operation is detected the operation is discarded or rate limited. You will get a printout that rate limiting occurred and your server will remain stable and performant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#information-sifting"&gt;
  &lt;/a&gt;
  Information Sifting
&lt;/h3&gt;

&lt;p&gt;Lightrun has PII reduction and blocklists. This means that Lightrun can detect problematic patterns in logs such as credit card numbers. It can then block those numbers from entering the logs.&lt;/p&gt;

&lt;p&gt;This is fully configurable per install so you can configure this for social security numbers etc.&lt;/p&gt;

&lt;p&gt;Blocklists let you define classes, files etc. that are blocked to debugging. Just exclude the authentication and authorization packages once you finish debugging the initial setup and a malicious developer won’t be able to place a snapshot there.&lt;/p&gt;

&lt;p&gt;Finally everything in Lightrun is audited. That means that even if you forgot to limit access this would all be logged. Any snapshot (breakpoint) or log added by the user is added to the audit log. So a malicious developer would leave a digital trail we can follow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Don’t use remote debugging unless you REALLY have to and then make sure no one can access your system… Even under those circumstances be vigilant and tunnel your connections via SSH.&lt;/p&gt;

&lt;p&gt;Be careful with conditional breakpoints and other similarly elaborate debugger features. They are a recipe for disaster in such situations. &lt;/p&gt;

&lt;p&gt;Be aware that you’re effectively giving every user who has access to the server the keys to the kingdom. Not just the source and the DB, access to all the encrypted data too such as passwords!&lt;/p&gt;

&lt;p&gt;I hope you found this useful and keep safe out there with your deployments. Follow me on  &lt;a href="https://twitter.com/debugagent"&gt;twitter.com/debugagent&lt;/a&gt;  for updates and more.&lt;/p&gt;

</description>
      <category>security</category>
      <category>devops</category>
      <category>java</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Open AI Codex - React</title>
      <author>Bhagvan Kommadi</author>
      <pubDate>Wed, 13 Oct 2021 12:18:23 +0000</pubDate>
      <link>https://dev.to/bhagvank/open-ai-codex-react-18im</link>
      <guid>https://dev.to/bhagvank/open-ai-codex-react-18im</guid>
      <description>&lt;p&gt;i tried generating code using openai codex. You can access the application at :&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bhagvank.pythonanywhere.com/"&gt;http://bhagvank.pythonanywhere.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Demo: &lt;a href="https://youtu.be/NcSr71kB17E"&gt;https://youtu.be/NcSr71kB17E&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can try the input below:&lt;br&gt;
//React component to show sentiment text inside a div&lt;/p&gt;

&lt;p&gt;const&lt;/p&gt;

</description>
      <category>openai</category>
      <category>react</category>
      <category>codex</category>
      <category>javascript</category>
    </item>
    <item>
      <title>JavaScript not equal and Comparison Operators Explained</title>
      <author>hrishikesh1990</author>
      <pubDate>Wed, 13 Oct 2021 11:37:47 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/javascript-not-equal-and-comparison-operators-explained-1d2i</link>
      <guid>https://dev.to/hrishikesh1990/javascript-not-equal-and-comparison-operators-explained-1d2i</guid>
      <description>&lt;p&gt;In this tutorial, you will learn about JavaScript not equal to operator, and the other Comparison operators along with examples.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-javascript-not-equal"&gt;
  &lt;/a&gt;
  Table of Contents - JavaScript Not Equal:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-are-comparison-operators-in-js"&gt;What are Comparison Operators in JS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-in-js"&gt;What is “!=” in JS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#other-comparison-operators"&gt;Other Comparison Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#closing-thoughts-javascript-not-equal"&gt;Closing thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-comparison-operators-in-js"&gt;
  &lt;/a&gt;
  What are Comparison Operators in JS?
&lt;/h2&gt;

&lt;p&gt;Comparison operators in programming languages are used to compare two values. These operators return a boolean value (true or false) based on the condition. Hence these operators are used in decision making or as conditional statements for loops.&lt;/p&gt;

&lt;p&gt;Given its vast usage, every developer should understand the functionality of each operator. This article is a good starting point for the same, however, we do emphasize more on the JavaScript not equal (!= &amp;amp; !==) operators.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-in-js"&gt;
  &lt;/a&gt;
  What is “!=” in JS?
&lt;/h2&gt;

&lt;p&gt;The JavaScript not equal or inequality operator (!=) checks whether two values are not equal and returns a boolean value. This operator tries to compare values irrespective of whether they are of different types.&lt;/p&gt;

&lt;p&gt;However, the “!==” or Strict inequality operator does not attempt to do so and returns false if the values are unequal or of different types.&lt;/p&gt;

&lt;p&gt;Both these operators solve different purposes and hence I would recommend practicing them to facilitate further understanding.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first case, it returned true as the values were different. In the second and third cases, it returned a false cause the values are the same. Do note that in the latter case even though we passed 10 as a string the operator was able to compare both the values.&lt;/p&gt;

&lt;p&gt;In the last case, we used the strict inequality operator and it returned true as the values were of different types.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-comparison-operators"&gt;
  &lt;/a&gt;
  Other Comparison Operators:
&lt;/h2&gt;

&lt;p&gt;Apart from the JavaScript not equal and Strict inequality operators, we have a few other operators that solve different use cases. We have added a brief about them below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Equal to (==) - Check if two values are equal&lt;/li&gt;
&lt;li&gt;Strict equal to (===) - Checks is two values are equal and of similar type&lt;/li&gt;
&lt;li&gt;Greater than (&amp;gt;) - Checks if the value on the left is greater than the value on the right&lt;/li&gt;
&lt;li&gt;Greater than or equal to (&amp;gt;=) - Checks if the value is greater than or equal to the value on the right&lt;/li&gt;
&lt;li&gt;Less than (&amp;lt;) - Checks if the value on the left is less than the value on the right&lt;/li&gt;
&lt;li&gt;Less than or equal to (&amp;lt;=) - Checks if the value is less than or equal to the value on the right&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#closing-thoughts-javascript-not-equal"&gt;
  &lt;/a&gt;
  Closing thoughts - JavaScript not equal:
&lt;/h2&gt;

&lt;p&gt;In this tutorial, we covered the JavaScript not equal and the other comparison operators. As a next step do spend some quality time practicing the operators understand how they differ from each other and also try breaking them.&lt;/p&gt;

&lt;p&gt;Once you are done with comparison operators do have a look at logical operators.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Webpack 5 : Guide for beginners</title>
      <author>anitaparmar26</author>
      <pubDate>Wed, 13 Oct 2021 11:31:53 +0000</pubDate>
      <link>https://dev.to/anitaparmar26/webpack-5-guide-for-beginners-314c</link>
      <guid>https://dev.to/anitaparmar26/webpack-5-guide-for-beginners-314c</guid>
      <description>&lt;p&gt;So many times heard from dev that they don't understand how to configure webpack because of the config file. Today we learn how to use webpack to set up bundle styles, JavaScript, images, and fonts for the web.&lt;/p&gt;

&lt;p&gt;The first time using webpack lots of questions would be whirling around, it can be difficult to understand how it works and how it should be used. My goal is to help you understand webpack.&lt;/p&gt;

&lt;p&gt;Let's dive into webpack Initialization.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-webpack-5"&gt;
  &lt;/a&gt;
  What is webpack 5?
&lt;/h4&gt;

&lt;p&gt;In short, &lt;a href="https://webpack.js.org/"&gt;webpack&lt;/a&gt; is a static module bundler for modern JavaScript applications. It’s impossible to mention all tools and it’s unnecessary for a beginner’s guide like this.&lt;/p&gt;

&lt;p&gt;Instead, I'll try to put a small core list to start.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basic Configuration &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Entry point &lt;/li&gt;
&lt;li&gt;Output&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Loaders&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Styles&lt;/li&gt;
&lt;li&gt;Images&lt;/li&gt;
&lt;li&gt;Fonts&lt;/li&gt;
&lt;li&gt;Babel (JavaScript)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Plugins&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML Template&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Mode&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Development&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#getting-started-with-webpack-basic-configuration"&gt;
  &lt;/a&gt;
  Getting started with Webpack Basic Configuration
&lt;/h5&gt;

&lt;p&gt;First, create a directory for your project to live and start the project. There before We will begin by creating the following directory structure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wbOCkgoP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwraey45nprkq7n61ijh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wbOCkgoP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwraey45nprkq7n61ijh.png" alt="Webpack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-create-project"&gt;
  &lt;/a&gt;
  1. Create Project
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir webpack-setup
cd webpack- setup
npm init -y # creates a default package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-webpack-setup"&gt;
  &lt;/a&gt;
  2. Webpack setup
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install webpack webpack-cli –-save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will make an src/app folder to contain all source files. I will start by creating a simple index.js file&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-basic-configuration"&gt;
  &lt;/a&gt;
  3. Basic Configuration
&lt;/h4&gt;

&lt;p&gt;Let’s create a webpack.config.js at the root of the project.&lt;br&gt;
Touch webpack.config.js&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#4-entry-amp-output"&gt;
  &lt;/a&gt;
  4. Entry &amp;amp; Output
&lt;/h4&gt;

&lt;p&gt;In this example, we'll set the entry point to the src/index.js. We'll have it output in the dist folder, which is where production code gets built. The [name] in the output will be main.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9YKUyNuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tt21bej5g6n6qoevc5u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9YKUyNuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tt21bej5g6n6qoevc5u.png" alt="Webpack"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#5-build-webpack"&gt;
  &lt;/a&gt;
  5. Build Webpack
&lt;/h4&gt;

&lt;p&gt;To run the script, we can make a build script that runs the webpack command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ku2Z16uS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc1xbzeku1tr4ou5zx6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ku2Z16uS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc1xbzeku1tr4ou5zx6z.png" alt="Webpack"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#6-now-you-can-run-it"&gt;
  &lt;/a&gt;
  6. Now you can run it.
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The dist folder has been created with main.bundle.js.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e9jcLxCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jz6iyht89lsmqga3l7mz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e9jcLxCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jz6iyht89lsmqga3l7mz.png" alt="Webpack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we now have webpack building successfully.&lt;/p&gt;

&lt;p&gt;We will start with &lt;strong&gt;Loaders&lt;/strong&gt; in our example&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1-styles"&gt;
  &lt;/a&gt;
  1. Styles
&lt;/h4&gt;

&lt;p&gt;For style, we will install style loader and SCSS, PostCSS, CSS loader packages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sass-loader – for SCSS and CSS compile&lt;/li&gt;
&lt;li&gt;node-sass – for node sass&lt;/li&gt;
&lt;li&gt;postcss-loader - Process CSS with PostCSS&lt;/li&gt;
&lt;li&gt;css-loader – resolve CSS imports&lt;/li&gt;
&lt;li&gt;style-loader – inject CSS into the Dom
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i sass-loader postcss-loader css-loader style-loader postcss-preset-env node-sass --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We will make postCSS.config.js file and add it to the root.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4mN8dmBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gk0wjhajebxxicx5n1f0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4mN8dmBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gk0wjhajebxxicx5n1f0.png" alt="Webpack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, add all loader in webpack config file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vky-uPrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpx6tebijaaxugbjveac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vky-uPrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpx6tebijaaxugbjveac.png" alt="Webpack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run to build, you'll see the Sass and PostCSS have been applied.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-images"&gt;
  &lt;/a&gt;
  2. Images
&lt;/h4&gt;

&lt;p&gt;Create src/images and add an image to it, then try to import it into your index.js file.&lt;/p&gt;

&lt;p&gt;Once load the file-loader configured in the webpack.config.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i file-loader --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SLFWBn07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53iu402gjlcjmsvit8u2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SLFWBn07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53iu402gjlcjmsvit8u2.png" alt="Webpack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will get an option for output files where we want the exact path (dist/assets/images/**.jpg).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-fonts"&gt;
  &lt;/a&gt;
  3. Fonts
&lt;/h4&gt;

&lt;p&gt;First, put your font files into one folder of your project's application. &lt;/p&gt;

&lt;p&gt;Need to load url-loader for features.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i --save-dev url-loader
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D56N8MsX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qu6aecqal6yvpxzzwy9c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D56N8MsX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qu6aecqal6yvpxzzwy9c.png" alt="Webpack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-javascript"&gt;
  &lt;/a&gt;
  4. Javascript
&lt;/h4&gt;

&lt;p&gt;We are using &lt;code&gt;babel-loader&lt;/code&gt; for js. Babel is next-generation JavaScript. There are a few additional dependencies for Babel as well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;babel-loader - Transpile files with webpack.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@babel/core"&gt;@babel/core&lt;/a&gt; - Backwards compatible JavaScript&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://babeljs.io/docs/en/babel-preset-env"&gt;@babel/preset-env&lt;/a&gt; - Smart defaults for Babel&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://babeljs.io/docs/en/babel-plugin-proposal-class-properties"&gt;@babel/plugin-proposal-class-properties&lt;/a&gt; - Custom Babel config
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -D babel-loader @babel/core @babel/preset-env @babel/preset-env @babel/plugin-proposal-class-properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will add some code for load js in webpack.config.js.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--21UaFtmp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5xazqm8iao8d6npkjix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--21UaFtmp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5xazqm8iao8d6npkjix.png" alt="Webpack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We create a .babelrc file in the root of the project for Babel Plugins. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4V1o9fLl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jip3n31mhxoy4pqcg6g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4V1o9fLl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jip3n31mhxoy4pqcg6g.png" alt="Webpack"&gt;&lt;/a&gt;&lt;br&gt;
Run npm build, all code set without any error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#5-plugins-for-html"&gt;
  &lt;/a&gt;
  5. Plugins for HTML
&lt;/h4&gt;

&lt;p&gt;How can configuring webpack to generate HTML with &lt;br&gt;
&lt;a href="https://webpack.js.org/plugins/html-webpack-plugin/"&gt;HtmlWebpackPlugin&lt;/a&gt; which create file from a template. First, install the plugin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install html-webpack-plugin --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a template.html file in the src folder. We can pass a hash of configuration '&lt;strong&gt;title&lt;/strong&gt;' options to html-webpack-plugin. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zQnTV6QX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6symboe77tntzihaoem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQnTV6QX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6symboe77tntzihaoem.png" alt="Webpack"&gt;&lt;/a&gt;&lt;br&gt;
And also add code in webpack config file to build HTML&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mofjmk1D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zchpdn9sj2w4kbkrc4fx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mofjmk1D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zchpdn9sj2w4kbkrc4fx.png" alt="Webpack"&gt;&lt;/a&gt;&lt;br&gt;
Now run a build again. See the dist folder now contains an &lt;br&gt;
index.html with the bundle.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#6-mode-of-development"&gt;
  &lt;/a&gt;
  6. Mode of Development
&lt;/h4&gt;

&lt;p&gt;To set up for development, we will install &lt;code&gt;webpack-dev-server&lt;/code&gt;. Webpack gives us the option to easily install a server with live &lt;br&gt;
reloading.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/webpack/webpack-dev-server"&gt;webpack-dev-server&lt;/a&gt; - Development server for webpack
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev webpack-dev-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Again add a line &lt;code&gt;mode:'development'&lt;/code&gt; to webpack.config.js file. and for run server add a script in package.json:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WJ-ieiIv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vll5vo6z6qg8dbbjyww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WJ-ieiIv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vll5vo6z6qg8dbbjyww.png" alt="Webpack"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z44afqlO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m25fpgqm6g8dbszfotjh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z44afqlO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m25fpgqm6g8dbszfotjh.png" alt="Webpack"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When running this command, a link to &lt;strong&gt;localhost:8080&lt;/strong&gt; will automatically pop up in your browser&lt;/p&gt;

&lt;p&gt;That shall be enough to get you to start with webpack! We've covered all (Basic,Plugins,Loaders) of the basic Webpack concepts. For further exploration of webpack’s capabilities we recommend official docs &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you like it guys here we end our Webpack basic setup! Thank you so much for reading the post.&lt;/p&gt;

&lt;p&gt;Happy Coding :)&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webpack</category>
      <category>webdev</category>
    </item>
    <item>
      <title>I built a dating site</title>
      <author>Sonam Shukla</author>
      <pubDate>Wed, 13 Oct 2021 11:29:18 +0000</pubDate>
      <link>https://dev.to/sonam_shukla_707cc1e27f23/i-built-a-dating-site-51fn</link>
      <guid>https://dev.to/sonam_shukla_707cc1e27f23/i-built-a-dating-site-51fn</guid>
      <description>&lt;p&gt;Hello! I used to be active here and on the Discord, and the stream of people making stuff gave me the impetus to get my head down and build something myself. So thank you all for being busy and infecting me with your enthusiasm.&lt;/p&gt;

&lt;p&gt;lovehabibi.com&lt;/p&gt;

&lt;p&gt;Yeah, all other domains taken. It's a dating site because the world needs more dating sites. I haven't posted the link anywhere else so don't expect to find your dreamboat. Unless your idea of a dreamboat is me.&lt;/p&gt;

&lt;p&gt;The premise is that photos are hidden by default. You have to strike up a conversation with someone before you can request to view their photos. When they accept, both users can see each others' photos. There is a toggle in settings to disable sharing at any time.&lt;/p&gt;

&lt;p&gt;Hopefully that will lead to lengthy profiles and a reduction in 'Hey' messages. Who knows.&lt;/p&gt;

&lt;p&gt;The main purpose for building the site is to get experience in tech I don't normally get to use - this is my first time with Node, Vue, post-css, uploads (without a plugin), websockets - and as such I tried to build as much of it myself as possible.&lt;/p&gt;

&lt;p&gt;Some tech:Postgresql, Node, Express, ws, Passport, multer, sharp.Vue, Vuex, and Vue plugins for sockets, validation, meta, and i18n (strings in but not switchable).&lt;/p&gt;

&lt;p&gt;CSS is all from scratch, as well the photo upload component (may be iffy...), photo viewer, the terms as you can probably tell.&lt;/p&gt;

&lt;p&gt;It has taken 18 months to get to this state and although that translates to between 0 and 8 hours a week, it feels like it has been such a long slog. My interest is starting to wane so I've decided to put it out there despite knowing there are bugs. And that really rankles but I need to get over it.&lt;/p&gt;

&lt;p&gt;I failed to appreciate just how big a project this would turn out to be. I thought along the lines of DB, forms, messaging, photos... ease! Nope.&lt;/p&gt;

&lt;p&gt;Thanks for taking a look&lt;/p&gt;

&lt;p&gt;P.S. I'm no designer. It is bare, I know.&lt;/p&gt;

&lt;p&gt;Regards:&lt;br&gt;
Sonam&lt;br&gt;
&lt;a href="https://www.reddit.com/user/MDrX/"&gt;https://www.reddit.com/user/MDrX/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://datingexpat.fun/"&gt;https://datingexpat.fun/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/sonam_shukla_707cc1e27f23"&gt;https://dev.to/sonam_shukla_707cc1e27f23&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>php</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Deploying a Kotlin App to Heroku</title>
      <author>Michael Bogan</author>
      <pubDate>Wed, 13 Oct 2021 11:24:52 +0000</pubDate>
      <link>https://dev.to/heroku/deploying-a-kotlin-app-to-heroku-5d0g</link>
      <guid>https://dev.to/heroku/deploying-a-kotlin-app-to-heroku-5d0g</guid>
      <description>&lt;p&gt;Since its earliest release, Java has touted itself as a "&lt;a href="https://en.wikipedia.org/wiki/Write_once,_run_anywhere"&gt;write once, run everywhere&lt;/a&gt;" programming language. The idea was that a programmer could develop an app in Java, have it compiled down to bytecode, and become an executable that can run on any platform, regardless of operating system or platform. It was able to do so in part by a runtime known as the Java Virtual Machine, or &lt;a href="https://en.wikipedia.org/wiki/Java_virtual_machine"&gt;JVM&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;To Java's credit, the JVM was (and still is!) an incredibly fine-tuned runtime that abstracted away a computer's underlying hardware. While Java as a programming language survives to this day, it is often viewed as cumbersome, stodgy, and representative of an outdated approach to implementing solutions. &lt;/p&gt;

&lt;p&gt;In the last 10 years, more and more languages that run on the JVM have developed, but look and feel nothing like Java. One such language is &lt;a href="https://en.wikipedia.org/wiki/Kotlin_(programming_language)"&gt;Kotlin&lt;/a&gt;. Because of the JVM, it has no real performance advantages over regular Java. Still, its strength lies in the fact that it prioritizes legibility in a way that Java does not. Consider, for example, printing a substring in Java:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Java
String input = "What is the answer to the Ultimate Question of Life, the Universe, and Everything? 42";
String answer = input.substring(input.indexOf("?") + 1);
System.out.println(answer);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You must first get the index of the character you want to be in the substring, add one (since strings are zero-indexed), and call &lt;code&gt;System.out.println&lt;/code&gt; to write to stdout.&lt;/p&gt;

&lt;p&gt;In Kotlin, this is much shorter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Kotlin
val input = "What is the answer to the Ultimate Question of Life, the Universe, and Everything? 42"
val answer = input.substringAfter("?")
println(answer)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Kotlin has garnered so much interest that&lt;a href="https://techcrunch.com/2019/05/07/kotlin-is-now-googles-preferred-language-for-android-app-development/"&gt; Google even recommends it over Java for developing Android apps&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In this post, we'll take a quick look at how to develop an app in Kotlin. We'll build a simple API with a PostgreSQL database and deploy it to Heroku to see it live.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before we begin, you'll need to make sure you've got the following software installed on your machine: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://signup.heroku.com/"&gt;An account on Heroku&lt;/a&gt;. This is completely free and doesn't require any payment information.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://devcenter.heroku.com/articles/heroku-cli#download-and-install"&gt;The Heroku CLI&lt;/a&gt;. Once your application is on Heroku, this will make managing it much easier.&lt;/li&gt;
&lt;li&gt;You'll need to have &lt;a href="https://kotlinlang.org/docs/command-line.html"&gt;Kotlin&lt;/a&gt; installed (&amp;gt;= 1.4).&lt;/li&gt;
&lt;li&gt;You'll also need &lt;a href="https://gradle.org/install/"&gt;Gradle&lt;/a&gt; installed (&amp;gt;= 7.0).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You will also need to be a little familiar with &lt;a href="https://git-scm.com"&gt;Git&lt;/a&gt; and have it installed on your machine.&lt;/p&gt;

&lt;p&gt;We’re going to be using &lt;a href="https://www.jetbrains.com/help/idea/get-started-with-kotlin.html"&gt;the IntelliJ&lt;/a&gt; IDE for this Kotlin app. Their documentation provides some guidance on how to create a new project. Make sure you select the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We want to create a Kotlin application that uses Gradle as a build system&lt;/li&gt;
&lt;li&gt;Set the name of the project to kotlin-api&lt;/li&gt;
&lt;li&gt;Set the JDK version to 16. If you don’t have this version installed, you can select &lt;strong&gt;Download JDK&lt;/strong&gt;… from the dropdown, then choose &lt;strong&gt;Oracle Open JDK&lt;/strong&gt; version 16&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the IDE sets everything up, you should have a directory structure that looks roughly like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kotlin-api
├── build.gradle.kts
└── src
    ├── main
    │   ├── kotlin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our Kotlin files will be kept in &lt;code&gt;src/main/kotlin&lt;/code&gt;, and our build logic will be in &lt;em&gt;build.gradle.kts&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;Gradle is a build tool for a variety of languages. It also acts as a dependency management tool, similar to Maven. You’ll already have some lines in your &lt;em&gt;build.gradle.kts&lt;/em&gt; file, which the IDE automatically added to be helpful. You can delete all of that, and paste in these lines instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;plugins {
    id("java")
    id("org.jetbrains.kotlin.jvm") version "1.5.10"
    id("org.springframework.boot") version "2.4.3"

    id("io.spring.dependency-management") version "1.0.11.RELEASE"
}

group "com.example"
version "0.0.1"

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib") 

    implementation("org.springframework.boot:spring-boot-starter-web")    
    implementation("org.springframework.boot:spring-boot-starter")

    developmentOnly("org.springframework.boot:spring-boot-devtools")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These lines specify our project's dependencies and where to find them. For example, we want to use  &lt;code&gt;[org.springframework.boot](https://plugins.gradle.org/plugin/org.springframework.boot)&lt;/code&gt; at version 2.4.3, which is why it's defined within the &lt;code&gt;plugins&lt;/code&gt; block. We point out the repositories where the packages can be found—at &lt;code&gt;mavenCentral()&lt;/code&gt;—and which exposed classes we want to use (&lt;code&gt;implementation( "org.springframework.boot:spring-boot-starter-web")&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Let's create two small files to test our setup. Create a file called &lt;code&gt;Application.kt&lt;/code&gt; in the &lt;em&gt;src/main/kotlin&lt;/em&gt; folder and paste in the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example

import org.springframework.boot.SpringApplication
import org.springframework.boot.autoconfigure.SpringBootApplication

@SpringBootApplication
open class Application

fun main(args: Array&amp;lt;String&amp;gt;) {
    SpringApplication.run(Application::class.java, *args)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This starts a default app using the Spring framework. The real magic happens in this next file, &lt;code&gt;Controller.kt&lt;/code&gt;, which you should create alongside &lt;code&gt;Application.kt&lt;/code&gt; in &lt;em&gt;src/main/kotlin&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example

import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.RestController

@RestController
class GreetingController {

    @GetMapping("/{name}")
    fun get(@PathVariable name: String) = "Hello, $name"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we define a route (&lt;code&gt;@GetMapping("/{name}")&lt;/code&gt;), where &lt;code&gt;{name}&lt;/code&gt; is a dynamic value. By placing this decorator over a Kotlin method (&lt;code&gt;fun get&lt;/code&gt;, or "a function named get"), we're able to match the route to whatever behavior we want—in this case, returning a greeting with the path name for a &lt;code&gt;GET&lt;/code&gt; request. &lt;/p&gt;

&lt;p&gt;In order for the IDE to know how to launch our application, we need to create &lt;a href="https://www.jetbrains.com/help/idea/run-debug-configuration.html"&gt;a run configuration&lt;/a&gt;. At the top of the IDE menu, click the button that says &lt;strong&gt;Add Configuration…&lt;/strong&gt;. Select &lt;strong&gt;Add new run configuration&lt;/strong&gt;, then choose Gradle from the list. For the Gradle project name, enter kotlin-api. In the Tasks field, type &lt;code&gt;bootRun&lt;/code&gt;. &lt;code&gt;&lt;a href="https://docs.spring.io/spring-boot/docs/2.5.0/gradle-plugin/reference/htmlsingle/#running-your-application"&gt;bootRun&lt;/a&gt;&lt;/code&gt; is a Gradle task provided by the Spring framework which will compile our code and start the server. Click &lt;strong&gt;Ok&lt;/strong&gt;; you should now have a green Play button in your IDE menu bar. When you click on this, the IDE will execute  &lt;code&gt;gradle bootRun&lt;/code&gt; to build this Kotlin app and start the server. When that finishes, navigate to &lt;code&gt;http:&lt;em&gt;//localhost:8080/world&lt;/em&gt;&lt;/code&gt;. You should see a nice greeting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interacting-with-the-database"&gt;
  &lt;/a&gt;
  Interacting with the database
&lt;/h2&gt;

&lt;p&gt;Now, let's get to the (somewhat) serious stuff. Suppose we wanted to attach a database to this project. In a Maven/Java world, we'd need to update an XML file and add a reference to a JAR file. In Gradle, we can get by with just adding a few lines to our &lt;code&gt;build.gradle.kts&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dependencies {
    # ...

    implementation("com.zaxxer:HikariCP:4.0.3")
    runtimeOnly("org.postgresql:postgresql")

    # ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we've included &lt;a href="https://github.com/brettwooldridge/HikariCP"&gt;HikariCP&lt;/a&gt; in our project, which is a popular database connection driver. We also indicate that we want to "load" the &lt;code&gt;org.postgresql&lt;/code&gt; library during runtime. With just these two lines, we've let our configuration know that we want to interact with a PostgreSQL database. If you already have a PostgreSQL database running locally, that's great. You'll be able to continue the rest of this guide locally and see the results when browsing localhost. If you don't have PostgreSQL, don't fret—we'll show you just how easy it is to deploy this app on Heroku, which will take care of the infrastructure for you. &lt;/p&gt;

&lt;p&gt;Head back to &lt;code&gt;Controller.kt&lt;/code&gt;, and replace it with the contents below. This takes some of what we had from before but adds to it. We'll go over the changes shortly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.RestController
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.http.MediaType
import com.zaxxer.hikari.HikariConfig
import com.zaxxer.hikari.HikariDataSource
import java.net.URI
import javax.sql.DataSource

@RestController
class GreetingController {

   val dataSource = dataSource()
   val connection = dataSource.connection

   @GetMapping("/{name}")

   fun get(@PathVariable name: String) = "Hello, $name"

   @PostMapping(value = ["/add-name"], consumes = [MediaType.TEXT_PLAIN_VALUE])
   fun post(@RequestBody requestBody: String) : String {
       initDb()
       val stmt = connection.createStatement()
       stmt.executeUpdate("INSERT INTO names values('$requestBody')")
       return "Added $requestBody"
   }

   @GetMapping("/everyone")

   fun getAll() : String {
       initDb()
       val stmt = connection.createStatement()
       val rs = stmt.executeQuery("SELECT name FROM names")
       val output = ArrayList&amp;lt;String&amp;gt;()
       while (rs.next()) {
           output.add(rs.getString("name"))
       }
       val names = output.joinToString(", ")
       return "Here are the names: $names"
   }

   internal fun initDb() {
       val stmt = connection.createStatement()
       stmt.executeUpdate("CREATE TABLE IF NOT EXISTS names (name text)")
   }

   internal fun dataSource(): HikariDataSource {
       val config = HikariConfig()
       var dbUri = URI(System.getenv("DATABASE_URL") ?: "postgresql://localhost:5432/")
       var dbUserInfo =  dbUri.getUserInfo()
       var username: String?; var password: String?;
       if (dbUserInfo != null) {
           username = dbUserInfo.split(":").get(0)
           password = dbUserInfo.split(":").get(1)
       } else {
           username = System.getenv("DATABASE_USERNAME") ?: null
           password = System.getenv("DATABASE_PASSWORD") ?: null
       }
       if (username != null) {
           config.setUsername(username)
       }
       if (password != null) {
           config.setPassword(password)
       }
       val dbUrl = "jdbc:postgresql://${dbUri.getHost()}:${dbUri.getPort()}${dbUri.getPath()}"
       config.setJdbcUrl(dbUrl)
       return HikariDataSource(config)
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's quite a lot going on here! Let's start from the bottom. We define a function called &lt;code&gt;dataSource&lt;/code&gt; which provides a connection to our database. Because we're building&lt;a href="https://12factor.net/config"&gt; a 12-Factor app&lt;/a&gt;, our database credentials are stored in an environment variable called &lt;code&gt;DATABASE_URL&lt;/code&gt;. We fetch that URL and pull out the username and password from it if one exists. If not, we check another two environment variables for that information—&lt;code&gt;DATABASE_USERNAME&lt;/code&gt; and &lt;code&gt;DATABASE_PASSWORD&lt;/code&gt;. We then put all that information together into a format that the database connector needs. The &lt;code&gt;initDb&lt;/code&gt; function creates a table called &lt;code&gt;names&lt;/code&gt;, with a single text column called &lt;code&gt;name&lt;/code&gt;. The &lt;code&gt;/everyone&lt;/code&gt; endpoint has a &lt;code&gt;@GetMapping&lt;/code&gt; decorator just like before. This defines a &lt;code&gt;GET /everyone&lt;/code&gt; route, which gets all the names from the database.&lt;/p&gt;

&lt;p&gt;Finally, we've added something rather new: a &lt;code&gt;@PostMapping&lt;/code&gt; decorator. Here, we need to define what types of content this &lt;code&gt;POST&lt;/code&gt; route can accept. In this case, it &lt;code&gt;consumes&lt;/code&gt; a &lt;code&gt;TEXT_PLAIN_VALUE&lt;/code&gt; media type (in other words, &lt;code&gt;"Content-Type: text/plain"&lt;/code&gt;). Whatever string of information we put in the request body will be added to the database. In just a few lines, we've built a small API that we can add to and query.&lt;/p&gt;

&lt;p&gt;If you start this server now—and if you have PostgreSQL running locally—you should be able to interact with it. Try making the following request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -H "Content-Type: text/plain" -X POST http://localhost:8080/add-name -d 'Frank'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you navigate to &lt;code&gt;http://localhost:8080/everyone&lt;/code&gt;, you'll see that &lt;code&gt;Frank&lt;/code&gt; was included.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-to-heroku"&gt;
  &lt;/a&gt;
  Deploying to Heroku
&lt;/h2&gt;

&lt;p&gt;It's time to see just how easy it is to get Kotlin running on Heroku. First, we need to create a file that's specific to Heroku:&lt;a href="https://devcenter.heroku.com/articles/procfile"&gt; the Procfile&lt;/a&gt;. This text file defines how our application should boot and run. &lt;/p&gt;

&lt;p&gt;Create a file named &lt;em&gt;Procfile&lt;/em&gt; in the root level directory, right next to your &lt;em&gt;build.gradle.kts&lt;/em&gt; file. Copy-paste the following lines into it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web: java -jar build/libs/kotlin-api.jar --server.port=$PORT
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we're saying that we want Heroku to run &lt;code&gt;java -jar build/libs/kotlin-api.jar&lt;/code&gt;. That JAR is packaged and built during the deployment process; Heroku will create it automatically for us because it knows how to execute the Gradle task to do so. We are also binding the &lt;code&gt;$PORT&lt;/code&gt; environment variable so that Heroku knows which port the server is listening to.&lt;/p&gt;

&lt;p&gt;Next, run the following Git commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git init
$ git add .
$ git commit -m "Preparing my first Kotlin app"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we have the Heroku CLI installed, we can &lt;a href="https://devcenter.heroku.com/articles/creating-apps"&gt;call heroku create on the command line to generate an app&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ heroku create
Creating app... done, ⬢ desolate-plains-67007
Created http://desolate-plains-67007.herokuapp.com/ | git@heroku.com:desolate-plains-67007.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your app will be assigned a random name—in this example, it's &lt;code&gt;desolate-plains-67007&lt;/code&gt;—as well as a publicly accessible URL.&lt;/p&gt;

&lt;p&gt;In order to provision a database, we use the &lt;code&gt;&lt;a href="https://devcenter.heroku.com/articles/heroku-cli-commands#heroku-addons-all-app-app"&gt;heroku addons&lt;/a&gt;&lt;/code&gt; command. Calling it without arguments will let us know if any exist:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ heroku addons
No add-ons for app desolate-plains-67007.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No add-ons exist for our app, which makes sense—we just created it! To add a PostgreSQL database, we can use the &lt;code&gt;addons:create&lt;/code&gt; command like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ heroku addons:create heroku-postgresql:hobby-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Heroku offers several tiers of PostgreSQL databases. &lt;code&gt;hobby-dev&lt;/code&gt; is the free tier, so we can play around with this without paying a dime.&lt;/p&gt;

&lt;p&gt;Your code is ready, your Heroku app is configured—you’re ready to deploy. This is the easy part! Just type out the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your code will be pushed to Heroku. From that point on, Heroku will take over. You'll see your build logs scrolling through your terminal. This will show you what Heroku is installing on your behalf and where you are in the build process. After it’s complete, you can visit your special URL in the browser (in this case, &lt;code&gt;https://desolate-plains-67007.herokuapp.com&lt;/code&gt;) and interact with the API on the internet!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-more"&gt;
  &lt;/a&gt;
  Learning more
&lt;/h2&gt;

&lt;p&gt;Kotlin's &lt;a href="https://blog.heroku.com/rise-of-kotlin"&gt;performant design and legible syntax&lt;/a&gt;—combined with the ease of Gradle—make it ideal for enterprises that need to rely on battle-tested Java packages. Because of its interoperability with Java, Kotlin is ideal as a transitional language; vast swaths of Java code can be converted into Kotlin while still maintaining a functional app. Deploying to Heroku is smooth, and I didn't even take advantage of the different ways to &lt;a href="https://devcenter.heroku.com/categories/java-support"&gt;fine-tune Java and JVM-based apps for deployment&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>kotlin</category>
      <category>architecture</category>
    </item>
    <item>
      <title>what is DeFi?</title>
      <author>arz digital</author>
      <pubDate>Wed, 13 Oct 2021 11:03:59 +0000</pubDate>
      <link>https://dev.to/zohaspotlight/what-is-defi-3la9</link>
      <guid>https://dev.to/zohaspotlight/what-is-defi-3la9</guid>
      <description>&lt;p&gt;DeFi draws inspiration from blockchain, the technology behind the digital currency bitcoin, which allows several entities to hold a copy of a history of transactions, meaning it isn't controlled by a single, central source. That's important because centralized systems and human gatekeepers can limit the speed and sophistication of transactions while offering users less direct control over their money. DeFi is distinct because it expands the use of blockchain from simple value transfer to more complex financial use cases.&lt;/p&gt;

&lt;p&gt;Bitcoin and many other digital-native assets stand out from legacy digital payment methods, such as those run by Visa and PayPal, in that they remove all middlemen from transactions. When you pay with a credit card for coffee at a cafe, a financial institution sits between you and the business, with control over the transaction, retaining the authority to stop or pause it and record it in its private ledger. With bitcoin, those institutions are cut out of the picture.&lt;/p&gt;

&lt;p&gt;Direct purchases aren't the only type of transaction or contract overseen by big companies; financial applications such as loans, insurance, crowdfunding, derivatives, betting and more are also in their control. Cutting out middlemen from all kinds of transactions is one of the primary advantages of DeFi.&lt;/p&gt;

&lt;p&gt;Before it was commonly known as decentralized finance, the idea of DeFi was often called "open finance."&lt;/p&gt;

</description>
      <category>blockchain</category>
    </item>
    <item>
      <title>Instagram clone</title>
      <author>Mayank Choudhary</author>
      <pubDate>Wed, 13 Oct 2021 10:50:52 +0000</pubDate>
      <link>https://dev.to/rado_mayank/instagram-clone-he8</link>
      <guid>https://dev.to/rado_mayank/instagram-clone-he8</guid>
      <description>&lt;p&gt;Build a frontend clone for Instagram using HTML, CSS, and JavaScript skills.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YSGorBb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1ng9pd71jvt2sco2fds.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YSGorBb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1ng9pd71jvt2sco2fds.png" alt="logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source code&lt;/strong&gt; - &lt;a href="https://github.com/mayankchaudhary26/Instagram-Clone-Project"&gt;https://github.com/mayankchaudhary26/Instagram-Clone-Project&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
You can use any tools you like to help you complete the challenge. So if you've got something you'd like to practice, feel free to give it a go.&lt;br&gt;
View the optimal layout for the site depending on their device's screen size See hover states for all interactive elements on the page Download the starter code and go through the README.md file. This will provide further details about the project. The style-guide.md file is where you'll find colors, fonts, etc.&lt;/p&gt;

&lt;p&gt;The designs are in image formats (sketch and figma designs coming soon).&lt;/p&gt;

&lt;p&gt;You will find all the required assets in the /assets folder. These include images, fonts, etc.&lt;/p&gt;

&lt;p&gt;There is also a style-guide.html file containing the information you'll need, such as color palette and font names. Make sure to open this in the browser to see the contents.&lt;br&gt;
Submit your solution on the platform for the rest of the community to see. Find this project on codedamn projects page for tips on how to do this.&lt;br&gt;
You will find all the required assets in the /assets folder. These include images, fonts, etc.&lt;/p&gt;

&lt;p&gt;Remember, if you're looking for feedback on your solution, be sure to ask questions when submitting it. The more specific and detailed you are with your questions, the higher the chance you'll get valuable feedback from the community.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Your project should:&lt;/p&gt;


&lt;li&gt; Be responsive for desktop and mobile phones
&lt;/li&gt;
&lt;li&gt; Have minimum functionalities and effects working
Style guide :

&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0SopUwac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efttp0k1zp6mffmcm73s.png" alt="image"&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Body&lt;/strong&gt;&lt;br&gt;
FONT FAMILY -apple-system, system-ui, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif&lt;/p&gt;




&lt;/li&gt;
&lt;li&gt; FONT SIZE
16px




&lt;/li&gt;
&lt;li&gt; FONT STYLE
normal




&lt;/li&gt;
&lt;li&gt; FONT HEIGHT
normal


&lt;p&gt;&lt;strong&gt;Final Output&lt;/strong&gt; - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g3301BdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4obmleyvgcscru9b0x86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g3301BdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4obmleyvgcscru9b0x86.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/li&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>First Week of The Hacktoberfest: 8 Top Questions Around Git</title>
      <author>Ayu Adiati</author>
      <pubDate>Wed, 13 Oct 2021 10:43:23 +0000</pubDate>
      <link>https://dev.to/adiatiayu/first-week-of-the-hacktoberfest-8-top-questions-around-git-5g70</link>
      <guid>https://dev.to/adiatiayu/first-week-of-the-hacktoberfest-8-top-questions-around-git-5g70</guid>
      <description>&lt;p&gt;Hello Fellow CodeNewbies 👋,&lt;/p&gt;

&lt;p&gt;The first week of &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest 2021&lt;/a&gt; has passed.&lt;br&gt;
This month, I'm participating in &lt;a href="https://virtualcoffee.io/newsletter/issues/2021-10/"&gt;Virtual Coffee's October monthly challenge&lt;/a&gt;. I also start collaborating with &lt;a href="https://the-collab-lab.codes/"&gt;The Collab Lab&lt;/a&gt;.&lt;br&gt;
These events give me lots of opportunities to learn git by doing.&lt;/p&gt;

&lt;p&gt;Along this journey, I made so many mistakes and got countless panic attacks 😆.&lt;br&gt;
But I also asked many questions and got a lot of help. &lt;/p&gt;

&lt;p&gt;In this article, I'm sharing with you the top 8 questions that I had around git. &lt;br&gt;
I hope they could help you as well if you have the same or similar questions as mine.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#%F0%9F%9B%A0-tools"&gt;
  &lt;/a&gt;
  🛠 Tools
&lt;/h2&gt;

&lt;p&gt;These are the tools that I'm using for working with git. If you have different tools, there could be different commands or steps to do.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows 10&lt;/li&gt;
&lt;li&gt;VSCode&lt;/li&gt;
&lt;li&gt;Integrated bash terminal on VSCode&lt;/li&gt;
&lt;li&gt;GitHub website on the browser&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#the-questions"&gt;
  &lt;/a&gt;
  ❓ The Questions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-why-do-we-want-to-raw-fork-endraw-a-repo"&gt;
  &lt;/a&gt;
  1. Why do we want to &lt;code&gt;fork&lt;/code&gt; a repo?
&lt;/h3&gt;

&lt;p&gt;Before we start working in an open-source, we do want to &lt;code&gt;fork&lt;/code&gt; the original repo. This forked repo would be the repo where we will make and push our changes to.&lt;/p&gt;

&lt;p&gt;But why do we want to &lt;code&gt;fork&lt;/code&gt; the original repo?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The open-source is no longer active/abandoned by its maintainers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's say we want to learn about something. Then we found a repo where we want to learn from. But then we realize that this repo is not updated for ages.&lt;br&gt;
There would be a big possibility that this repo is no longer maintained or deprecated. But we still want to try it out.&lt;br&gt;
One way to do that is to &lt;code&gt;fork&lt;/code&gt; the repo and work with this forked repo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;No authorization from maintainers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Most open sources don't give us the authorization to make changes and push directly to their repo.&lt;br&gt;
That's another reason why we want to &lt;code&gt;fork&lt;/code&gt; the original repo. &lt;br&gt;
After forking, we want to &lt;code&gt;clone&lt;/code&gt; this repo instead of the original one.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-what-do-raw-origin-endraw-and-raw-upstream-endraw-mean"&gt;
  &lt;/a&gt;
  2. What do &lt;code&gt;origin&lt;/code&gt; and &lt;code&gt;upstream&lt;/code&gt; mean?
&lt;/h3&gt;

&lt;p&gt;The naming in git is pretty much confusing (at least for me 😅).&lt;/p&gt;

&lt;p&gt;What is the difference between &lt;code&gt;origin&lt;/code&gt; and &lt;code&gt;upstream&lt;/code&gt;? Why there are commands such as &lt;code&gt;git fetch origin&lt;/code&gt; or &lt;code&gt;git fetch upstream&lt;/code&gt;? From where are we fetching?&lt;/p&gt;

&lt;p&gt;There are some opinions telling it's a matter of conventional naming. But they are pretty much the same. &lt;br&gt;
Both are remote repos, but &lt;em&gt;they are not the same&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;origin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It's our forked repo. This is the remote repo that we have from forking the original open-source repo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;upstream&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It refers to the original open-source repo.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-why-do-we-want-to-make-sure-to-update-our-main-and-feature-branches-before-we-push-our-changes"&gt;
  &lt;/a&gt;
  3. Why do we want to make sure to update our main and feature branches before we push our changes?
&lt;/h3&gt;

&lt;p&gt;Because we want to avoid our &lt;code&gt;pull request&lt;/code&gt; causing conflicts on the remote &lt;code&gt;main&lt;/code&gt; branch. Without updating, the remote &lt;code&gt;main&lt;/code&gt; branch could also lose some merged changes.&lt;/p&gt;

&lt;p&gt;Before we push our changes, make sure our &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;feature&lt;/code&gt; branches have the same updates with the &lt;code&gt;upstream&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-do-this"&gt;
  &lt;/a&gt;
  How to do this?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Go to our forked repo on GitHub.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will see a &lt;code&gt;Fetch upstream&lt;/code&gt; button on the right side.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7I3F0ZBH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634029522986/a0VnbiLN4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7I3F0ZBH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634029522986/a0VnbiLN4.jpeg" alt="github-fetch-upstream-button.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub makes it easy for us to fetch the updates from the &lt;code&gt;upstream&lt;/code&gt;. &lt;br&gt;
Click this button and we will get a dropdown menu. &lt;br&gt;
When the &lt;code&gt;Fetch and merge&lt;/code&gt; button is in inactive mode, it means that there is no update on the &lt;code&gt;upstream&lt;/code&gt;. If it's green, click it. &lt;/p&gt;

&lt;p&gt;Up until here, our &lt;code&gt;origin&lt;/code&gt; repo is having the same updates as the &lt;code&gt;upstream&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Go to our terminal.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to our local &lt;code&gt;main&lt;/code&gt; branch with the &lt;code&gt;git checkout main&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;Then run &lt;code&gt;git merge origin/main&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our &lt;code&gt;main&lt;/code&gt; branch is now having the same updates as the &lt;code&gt;origin&lt;/code&gt; and &lt;code&gt;upstream&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to our branch with &lt;code&gt;git checkout &amp;lt;branch-name&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;git merge main&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we can push our changes and create a pull request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-when-do-we-want-to-commit-our-changes"&gt;
  &lt;/a&gt;
  4. When do we want to commit our changes?
&lt;/h3&gt;

&lt;p&gt;I'm self-taught and use to code solo. I have a bad habit of not adding and committing my changes before I completely finish working.&lt;br&gt;
This habit can definitely be very bad when we work in a team. There are times when we want to go to other branches.&lt;/p&gt;

&lt;p&gt;When we don't add and commit our changes, whatever changes that we work on are carrying onto the branch that we go to.&lt;br&gt;
And we don't want that.&lt;/p&gt;

&lt;p&gt;That's being said, the best time to add and commit our changes is &lt;strong&gt;as soon as we finish making some changes&lt;/strong&gt; to our code. Doesn't matter how small it is.&lt;br&gt;
This way, we can safely go to another branch when it's necessary. Besides, we can have a good history of what we're doing step by step. &lt;/p&gt;

&lt;p&gt;Sometimes we want to save our changes but don't have an intention to commit it yet. In this case, we can run &lt;a href="https://www.atlassian.com/git/tutorials/saving-changes/git-stash"&gt;&lt;code&gt;git stash&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-im-merging-a-branch-now-i-get-conflict-how-can-i-resolve-this"&gt;
  &lt;/a&gt;
  5. I'm merging a branch, now I get conflict. How can I resolve this?
&lt;/h3&gt;

&lt;p&gt;I was merging a branch. Then I get some conflicts because someone else also worked in a same file.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k_wbnpCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634035872060/5MVJSKNTO.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k_wbnpCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634035872060/5MVJSKNTO.jpeg" alt="git conflict.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It gave me several options that I have to choose from on VSCode.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Accept current change&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To accept the changes that are already there at the beginning (HEAD).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Accept incoming changes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To accept the new changes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Accept both changes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To accept both current and incoming changes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Compare changes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To compare current and incoming changes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which one we need to choose depends on our discussion with our teammates.&lt;br&gt;
In case we need to merge it soon and we are not sure which one to choose, we can choose to &lt;code&gt;Accept both changes&lt;/code&gt; to be safe.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-how-to-delete-a-local-branch-and-pull-the-same-branch-from-the-remote-repo"&gt;
  &lt;/a&gt;
  6. How to delete a local branch and pull the same branch from the remote repo?
&lt;/h3&gt;

&lt;p&gt;One day when I worked on changes in a branch, it got so messed up. I wanted to delete this local branch and pull the branch from the remote repo to have a fresh branch.&lt;/p&gt;

&lt;p&gt;We can do so by running these commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git branch -D &amp;lt;feature-branch-name&amp;gt;&lt;/code&gt; to delete our local branch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git checkout &amp;lt;future-branch-name&amp;gt;&lt;/code&gt; to pull the branch on the remote repo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We don't need to create a new branch as in &lt;code&gt;git checkout -b &amp;lt;future-branch-name&amp;gt;&lt;/code&gt; when we want to pull an existing branch.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;git checkout &amp;lt;future-branch-name&amp;gt;&lt;/code&gt;, git will check if we have that branch in our local repo.&lt;br&gt;
When it can't find that branch, it will look for the branch on the &lt;code&gt;origin&lt;/code&gt; repo. And if it's founded, git will pull that branch to our local repo.&lt;/p&gt;

&lt;p&gt;We want to make sure that we enter the exact branch's name as in the &lt;code&gt;origin&lt;/code&gt; repo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-why-do-we-want-to-make-a-habit-of-running-raw-git-status-endraw-"&gt;
  &lt;/a&gt;
  7. Why do we want to make a habit of running &lt;code&gt;git status&lt;/code&gt;?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We can make sure in which branch we're currently in.&lt;/li&gt;
&lt;li&gt;We can be aware if there are any changes that we haven't added and/or committed.&lt;/li&gt;
&lt;li&gt;We can see warnings if our branch is ahead or behind the remote branch, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#8-why-do-we-want-to-avoid-anything-with-raw-force-endraw-such-as-raw-git-push-force-endraw-"&gt;
  &lt;/a&gt;
  8. Why do we want to avoid anything with &lt;code&gt;--force&lt;/code&gt; such as &lt;code&gt;git push --force&lt;/code&gt;?
&lt;/h3&gt;

&lt;p&gt;As straightforward as the name, &lt;code&gt;force&lt;/code&gt; means forcing any changes to a branch. It will ignore every warning.&lt;/p&gt;

&lt;p&gt;Once we do &lt;code&gt;git push --force&lt;/code&gt;, it will force push our changes and replace everything on remote with our changes. The bottom line, we are deleting all history on the remote repo and replace them with ours.&lt;br&gt;
When we work in a team, this can give trouble to the whole team.&lt;/p&gt;

&lt;p&gt;There are some rare circumstances where we need to do this.&lt;br&gt;
But beforehand, we have to make our team members aware that we will do it and go for it when everyone agrees.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;My key takeaways after these experiences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Always fork the original open-source repo before we start to work on it, and clone this forked repo.&lt;/li&gt;
&lt;li&gt;Do add and commit our changes even though we only do small changes. &lt;/li&gt;
&lt;li&gt;Do &lt;code&gt;git stash&lt;/code&gt; when we only want to save our changes and want to continue working on it later.&lt;/li&gt;
&lt;li&gt;Make a habit of running &lt;code&gt;git status&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Avoid running any command with &lt;code&gt;--force&lt;/code&gt; as much as possible.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thank you for reading!&lt;br&gt;
Last but not least, you can find me on &lt;a href="https://twitter.com/AdiatiAyu"&gt;Twitter&lt;/a&gt;. Let's connect! 😊&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>hacktoberfest</category>
      <category>github</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Day 5 of 100 Days of Code &amp; Scrum: Rejected, Mislead, and Distracted</title>
      <author>Rammina</author>
      <pubDate>Wed, 13 Oct 2021 10:36:05 +0000</pubDate>
      <link>https://dev.to/rammina/day-5-of-100-days-of-code-scrum-rejected-mislead-and-distracted-13c2</link>
      <guid>https://dev.to/rammina/day-5-of-100-days-of-code-scrum-rejected-mislead-and-distracted-13c2</guid>
      <description>&lt;p&gt;Good morning, everyone!&lt;/p&gt;

&lt;p&gt;Today wasn't as bad as yesterday. Or is it?&lt;/p&gt;

&lt;p&gt;Anyway, I got an email notification saying that I got rejected for my technical interview submission.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0LkJt-E_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76ddah7lxyyrecig52lm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0LkJt-E_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76ddah7lxyyrecig52lm.png" alt="Rejection Letter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ouch? It didn't really hurt as much as I thought it would.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fAGDWQMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4av0wf2cqwb6df7bsksy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fAGDWQMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4av0wf2cqwb6df7bsksy.png" alt="This is Fine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Firstly, it was kind of my fault for diving into a position in which I didn't know about GraphQL. The first time I used GraphQL was on this interview, and while I think I managed to solve the problem, my solution was not really the most appropriate and I just didn't stand out compared to the other candidates.&lt;/p&gt;

&lt;p&gt;Secondly, I apply to multiple companies at the same time. By doing so, each rejection hurts a lot less. I also recommend most people to do so unless they don't have the time to or if it's too stressful for them.&lt;/p&gt;

&lt;p&gt;It's kind of stupid, but the main reason why I'm studying GraphQL right now is because I got really upset about not doing well enough in my technical interview.&lt;/p&gt;

&lt;p&gt;And yes, I still apply to positions that are beyond my current experience level, just so I can learn a little bit about what is expected of more senior developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sending-a-thank-you-letter"&gt;
  &lt;/a&gt;
  Sending a Thank You Letter
&lt;/h2&gt;

&lt;p&gt;Moving on, I sent them back a &lt;code&gt;Thank You Letter&lt;/code&gt;, out of gratitude for letting me take a technical test for a job position that was way out of my current expertise. While &lt;code&gt;Thank You Letters&lt;/code&gt; are not mandatory, I do think it improves employers' perception of you, even if just a little bit. This makes it more likely that you're able to reapply in the future.    &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WCGd6oGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdzqqob0rerynbllfm51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WCGd6oGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdzqqob0rerynbllfm51.png" alt="Thank You Letter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh, and I had 2 interviews today which I managed to get through.&lt;/p&gt;

&lt;p&gt;I also had to deal with calls, emails, social media-related stuff, and so on. It was pretty distracting. I'm probably going to have to put my phone away from my desk when I'm coding next time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I learned how to organize my &lt;code&gt;graphql&lt;/code&gt; folders and files, and I learned how to perform query and mutation options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Today was fairly productive, I learned a lot and I managed to reach out to multiple people.&lt;/p&gt;

&lt;p&gt;Here are some of the things I've learned:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphql"&gt;
  &lt;/a&gt;
  GraphQL
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;setContext&lt;/code&gt; - takes in a function and returns an object or a promise (said promise will return an object that sets the new context of a request), it receives two arguments:

&lt;ul&gt;
&lt;li&gt;the first one being the GraphQL request being executed&lt;/li&gt;
&lt;li&gt;and the second is the previous context&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;ApolloClient enables a developer to read and write cache&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cache.readQuery&lt;/code&gt; - allows for directly executing a query from the cache. It takes in an object which contains the query and other properties.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cache.writeQuery&lt;/code&gt; - allows for directly writing data to the cache. It takes in an object which contains the query and a required data option.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;the Product Backlog will always exist as long as there is the product.&lt;/li&gt;
&lt;li&gt;the Product Backlog is dynamic, and will always be changed and refined as the development process continues.&lt;/li&gt;
&lt;li&gt;the Product Backlog will never run out of items, there is always something to add and work on.&lt;/li&gt;
&lt;li&gt;the Development Team is responsible for all estimates, and the Product Owner only influences the Development Team by helping it understand and choose trade-offs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OLEVrt6o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/auqvmwyndqd7ljopwywv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OLEVrt6o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/auqvmwyndqd7ljopwywv.jpg" alt="Sleepy Dog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.howtographql.com/"&gt;The Fullstack Tutorial for GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.apollographql.com/docs/"&gt;Apollo Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How is everyone doing in their learning journey? Feel free to chat with me in the comments and/via DM!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>100daysofcode</category>
      <category>graphql</category>
    </item>
  </channel>
</rss>
