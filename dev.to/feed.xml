<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Image To Text Conversion By Using Google Drive</title>
      <author>Imam Uddin</author>
      <pubDate>Sat, 13 Nov 2021 07:54:24 +0000</pubDate>
      <link>https://dev.to/imamuddinwp/image-to-text-conversion-by-using-google-drive-o8l</link>
      <guid>https://dev.to/imamuddinwp/image-to-text-conversion-by-using-google-drive-o8l</guid>
      <description>&lt;p&gt;Most of the time we need to&lt;b&gt; &lt;a href="https://brandfolder.com/workbench/extract-text-from-image"&gt;copy text from an image&lt;/a&gt;&lt;/b&gt;. Then we usually search this topic on Google or YouTube. But today I will show a very easy and simple way to get text from images like &lt;b&gt;&lt;a href="https://www.afb.org/node/16207/optical-character-recognition-systems"&gt;OCR (Optical Character Recognition)&lt;/a&gt;&lt;/b&gt;, jpg, png, and many more. So Let's start with '&lt;b&gt;&lt;a href="https://pdf.wondershare.com/pdf-software-comparison/google-docs-convert-scanned-pdf-text.html"&gt;image editable text with google drive&lt;/a&gt;&lt;/b&gt;'.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f-BXRos9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEhRUGykPApeyx5KJXrvoPJ_RlHUg9Jd3CGse3q0JcbPp3Vj6NqlSEG4nhKEej77xo5O36VUJsYJXPn_-QRmrc_ycxlbvQ0iapiaThIj_EysctMXuXSDbPY2keF9_GRnVIBy-_ubKrsrlsbD2fqz0_b_PdnA32c56nksTl8B9xBBWP9ZGpfJmZz9eoThUg" class="article-body-image-wrapper"&gt;&lt;img alt="image-to-text-by-using-google-drive-imamuddinwp" src="https://res.cloudinary.com/practicaldev/image/fetch/s--f-BXRos9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEhRUGykPApeyx5KJXrvoPJ_RlHUg9Jd3CGse3q0JcbPp3Vj6NqlSEG4nhKEej77xo5O36VUJsYJXPn_-QRmrc_ycxlbvQ0iapiaThIj_EysctMXuXSDbPY2keF9_GRnVIBy-_ubKrsrlsbD2fqz0_b_PdnA32c56nksTl8B9xBBWP9ZGpfJmZz9eoThUg" width="859" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;How can I convert image to text?&lt;/h2&gt;

&lt;p&gt;There are a lot of online tools to convert images to text. Just go to google or any other &lt;b&gt;&lt;a href="https://www.oberlo.com/blog/top-search-engines-world"&gt;popular search engine&lt;/a&gt;&lt;/b&gt; and type '&lt;b&gt;&lt;a href="https://www.google.com/search?q=image+to+text"&gt;image to text&lt;/a&gt;&lt;/b&gt;', You will definitely find many more free and premium / paid tools to &lt;b&gt;&lt;a href="https://www.oberlo.com/blog/top-search-engines-world"&gt;convert images to text&lt;/a&gt;&lt;/b&gt;. Choose your favorite one from your search list.  &lt;/p&gt;

&lt;p&gt;Know from Google Support page: &lt;a href="https://support.google.com/drive/answer/176692?hl=en&amp;amp;co=GENIE.Platform%3DDesktop"&gt;&lt;b&gt;Convert PDF and photo files to text&lt;/b&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;How can I convert picture to text free?&lt;/h3&gt;

&lt;p&gt;To covert picture to text for free, please follow the below steps;&lt;/p&gt; 

&lt;h3&gt;Six Easy Steps Of Convert Image To Editable Text By Using Google Drive&lt;/h3&gt;

&lt;p&gt; &lt;a href="https://www.thewindowsclub.com/google-drive-convert-image-to-text"&gt;Image editable text with google drive&lt;/a&gt;; Let us follow the below steps to get editable text from an image, screenshot, picture, photo, or etc. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Step #01:&lt;/b&gt; &lt;br&gt;
    Simply log in to your google drive by using your email account.
    &lt;b&gt;Step #02:&lt;/b&gt; &lt;br&gt;
    Then Upload your desired image from a directory. &lt;br&gt;
    &lt;b&gt;Step #03: &lt;/b&gt; &lt;br&gt;
    After completing the upload, Right Click on the uploaded image in google drive. &lt;br&gt;
    
    &lt;b&gt;Step #04:&lt;/b&gt;  &lt;br&gt;
    Then go to the option '&lt;b&gt;Open With&lt;/b&gt;' and then select '&lt;b&gt;Google Docs&lt;/b&gt;'. It will open in a new tab in your browser. Please see the below image for a better understanding: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LrYhc1rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEhCPGv2LR-h1F-9FJJXiUSLFqDkeIvuAP6dTj8LX354ofvabfxrr2za-1zlyP2t6EMi_IZvoO63Uxbgh9WXJjrdxVrCKpJRbalBm-ge4bCYRn9u97DSJO2Va1E4UFO3y_lrLoMmpNtnS2HAYKcrOwZxMf3ez7Ro-qKrn5UyBKjVv52O0yXbYIhM5Eg4XA" class="article-body-image-wrapper"&gt;&lt;img alt="image-to-text-google-drive-google-docs" src="https://res.cloudinary.com/practicaldev/image/fetch/s--LrYhc1rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEhCPGv2LR-h1F-9FJJXiUSLFqDkeIvuAP6dTj8LX354ofvabfxrr2za-1zlyP2t6EMi_IZvoO63Uxbgh9WXJjrdxVrCKpJRbalBm-ge4bCYRn9u97DSJO2Va1E4UFO3y_lrLoMmpNtnS2HAYKcrOwZxMf3ez7Ro-qKrn5UyBKjVv52O0yXbYIhM5Eg4XA" width="880" height="578"&gt;&lt;/a&gt;
    
    &lt;b&gt;Step #5:&lt;/b&gt; &lt;br&gt;
    All Done! This is the Final Step; Wait a little moment to &lt;b&gt;&lt;a href="https://smallseotools.com/image-to-text-converter/"&gt;convert your image into a text or word document&lt;/a&gt;&lt;/b&gt;. Here is the screenshot for downloadable file types:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---CO4JXKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEgADcqiGxcrdug6KXHk2945zDAJsAn_SeleHNMAGyZTCuSbj5-ev_spoSmv5GwgOQNvPqI1_biH5xdRsXNpr21i3T5sQKv8YYT25-tfmpI_8-XdEN6xfouvqikfGnvktrxo55PJuw4HGSuXz-rjRB8XETz11w_kyCTaxzJtmS5vUJz8gECcIKcMPW0vZg" class="article-body-image-wrapper"&gt;&lt;img alt="editable-downloadable-text-image-to-text-by-using-google-drive" src="https://res.cloudinary.com/practicaldev/image/fetch/s---CO4JXKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEgADcqiGxcrdug6KXHk2945zDAJsAn_SeleHNMAGyZTCuSbj5-ev_spoSmv5GwgOQNvPqI1_biH5xdRsXNpr21i3T5sQKv8YYT25-tfmpI_8-XdEN6xfouvqikfGnvktrxo55PJuw4HGSuXz-rjRB8XETz11w_kyCTaxzJtmS5vUJz8gECcIKcMPW0vZg" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;Now your image containing text is editable and copy able. And also it is downloadable in MS Word Format. You can simply copy the text and paste it into your desired location. &lt;/blockquote&gt;
 

&lt;h3&gt;How do I convert a picture to text in Word?&lt;/h3&gt;

&lt;p&gt;There is two easy and very simple way to get a text or copy text from an image or picture. &lt;b&gt;The First One&lt;/b&gt; is by online free tools and &lt;b&gt;The Second One&lt;/b&gt; is Google Drive. I  suggest my friends &lt;a href="https://www.wikihow.com/Convert-a-JPEG-Image-Into-an-Editable-Word-Document"&gt;use google drive to get editable text from a picture&lt;/a&gt; or image. Because it is very much easy way. In this way no need for any other software to convert images into words or text. &lt;/p&gt;

&lt;h3&gt;How Can I Convert An Image To Editable Text Without Any software?&lt;/h3&gt;

&lt;p&gt;You can easily convert an image of OCR, png, jpg, or any other format without any software. &lt;a href="https://www.google.com/drive/"&gt;Google Drive&lt;/a&gt; is a very interesting and amazing way to get a text from pictures. Here I have also attached a YouTube video. This video I have shown to get an editable and downloadable text from images by using google drive.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/embed/46L7dtVrk1M"&gt;https://www.youtube.com/embed/46L7dtVrk1M&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;Conclusion:&lt;/h4&gt;

&lt;p&gt;Thank you for reading this post. If you have more questions on &lt;b&gt;&lt;a href="https://imamuddinwp.blogspot.com/2021/11/image-to-text-conversion-by-using-google-drive.html"&gt;Image To Text By Using Google Drive&lt;/a&gt;&lt;/b&gt;, simply comment here. I'll try my best to reply.  &lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>webdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Digital Ocean the Best Cloud hosting?</title>
      <author>Web_Codr</author>
      <pubDate>Sat, 13 Nov 2021 07:37:27 +0000</pubDate>
      <link>https://dev.to/web_dev/digital-ocean-the-best-cloud-hosting-4fpd</link>
      <guid>https://dev.to/web_dev/digital-ocean-the-best-cloud-hosting-4fpd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Use this link and signup to digitalocean and get $100 credits for 60 days: &lt;a href="https://m.do.co/c/270b2fa5ab05"&gt;https://m.do.co/c/270b2fa5ab05&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.digitalocean.com/?refcode=270b2fa5ab05&amp;amp;utm_campaign=Referral_Invite&amp;amp;utm_medium=Referral_Program&amp;amp;utm_source=badge"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qPdCGF9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://web-platforms.sfo2.digitaloceanspaces.com/WWW/Badge%25202.svg" alt="DigitalOcean Referral Badge" width="200" height="65"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-digital-ocean"&gt;
  &lt;/a&gt;
  What is Digital Ocean?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://m.do.co/c/270b2fa5ab05"&gt;Digital Ocean&lt;/a&gt; is cloud hosting company that provides completely unmanaged VMs and if you are a developer you will just love it.&lt;/p&gt;

&lt;p&gt;The setup is easy as they have plenty of documentation for setting up the server, managing the server etc etc.&lt;/p&gt;

&lt;p&gt;I am using Digital Ocean for more than 6 months now and I have not face any performance issue till now. &lt;/p&gt;

&lt;p&gt;P.S: I have hosted my website &lt;a rel="nofollow" href="https://codewithbishal.com"&gt;Code With Bishal&lt;/a&gt; on Digital Ocean.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ease-of-use"&gt;
  &lt;/a&gt;
  Ease of use
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://m.do.co/c/270b2fa5ab05"&gt;Digital Ocean&lt;/a&gt; offers droplets of various OS such as Ubuntu, Debian, Cent OS, Rocky Linux, FreeBSD, Fedora which you can choose while creating the droplet or VM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h2&gt;

&lt;p&gt;Here comes the most important part of this article, the pricing. Digital Ocean provides a variety of pricing options starting from $5/month. You can choose your droplet based on your usage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.digitalocean.com/?refcode=270b2fa5ab05&amp;amp;utm_campaign=Referral_Invite&amp;amp;utm_medium=Referral_Program&amp;amp;utm_source=badge"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xmjq7Gsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay5yoibupzrf0vbdmskb.jpg" alt="DigitalOcean Pricing" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading this article, you can comment down below if you have any questions. If you want to checkout programming blogs you can checkout &amp;amp; &lt;a rel="nofollow" href="https://codewithbishal.com/signup-user/?next=/"&gt;signup&lt;/a&gt; to my website &lt;a rel="nofollow" href="https://codewithbishal.com"&gt;Code With Bishal&lt;/a&gt;&lt;/p&gt;

</description>
      <category>digitalocean</category>
      <category>deploy</category>
      <category>programming</category>
    </item>
    <item>
      <title>My first Hacktoberfest experience 2021 !!!</title>
      <author>Archana Gandhi</author>
      <pubDate>Sat, 13 Nov 2021 07:16:55 +0000</pubDate>
      <link>https://dev.to/archanagandhi/my-first-hacktoberfest-experience-2021--39po</link>
      <guid>https://dev.to/archanagandhi/my-first-hacktoberfest-experience-2021--39po</guid>
      <description>&lt;p&gt;It was 2020 and everyone is posting their hacktoberfest swags on Linkedin, That's how I came to know about hacktoberfest and open source contribution. I started learning Git &amp;amp; Github and participated in some open-source programs. But I always wanted to participate in hacktoberfest and it comes. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-first-pullrequest"&gt;
  &lt;/a&gt;
  The First Pull-Request
&lt;/h3&gt;

&lt;p&gt;The one thing I hate about hacktoberfest is there is a lot of excluded spam repositories. I never knew that. I was so excited that my first pr is merged but in the end, it's an excluded project 😂. So finding the right repository is challenging too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OedQHaNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br2cs0m6k8snzjtdgwii.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OedQHaNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br2cs0m6k8snzjtdgwii.png" alt="PR's" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learnings"&gt;
  &lt;/a&gt;
  Learnings
&lt;/h3&gt;

&lt;p&gt;Finally, I was able to complete 4+2 Pull requests in 15 days and it took 15 days to get accepted by hacktoberfest. &lt;/p&gt;

&lt;p&gt;I spent most of my extra time contributing and finding good projects. I learnt many things not only coding but also how to write good commit messages 😂&lt;/p&gt;

&lt;p&gt;The best and fun part is working in the command prompt as I feel like a hacker 😁&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;It was a very good start and was fun contributing to open source. Coming to the swags, It is going to be my first swag in my tech life and hactoberfest introduce me to DEV community and I am posting my experience here because of hactoberfest. &lt;/p&gt;

&lt;p&gt;Grateful 🌻&lt;/p&gt;

&lt;p&gt;I never wrote a blog before, This is my first blog too. (Please ignore my mistakes🥺🤞) Feedbacks are always welcomed 😊&lt;/p&gt;

&lt;p&gt;Bubye!! See you in the next post. Happy November ❤❤&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>beginners</category>
      <category>opensource</category>
      <category>git</category>
    </item>
    <item>
      <title>Building a Web3 App - Crypto Gas Tracker</title>
      <author>vigneshiyergithub</author>
      <pubDate>Sat, 13 Nov 2021 06:57:59 +0000</pubDate>
      <link>https://dev.to/vigneshiyergithub/building-a-web3-app-crypto-gas-tracker-54e1</link>
      <guid>https://dev.to/vigneshiyergithub/building-a-web3-app-crypto-gas-tracker-54e1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-this-post-about-"&gt;
  &lt;/a&gt;
  What is this post about ?
&lt;/h2&gt;

&lt;p&gt;Hello fellow humanoids. Blockchain has made it way one way or another in your life, if you have already dug deep in rabbit hole then you might know how expensive transaction fees can become on certain chains E.g: Ethereum.&lt;br&gt;
Check out the app here : &lt;a href="https://crypto-gas-tracker.vercel.app/"&gt;Crypto gas tracker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQXW9BGu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/en6fkk8lwgbo7nsfj28m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQXW9BGu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/en6fkk8lwgbo7nsfj28m.png" alt="Crypto Gas tracker" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Setup NextJS &lt;/li&gt;
&lt;li&gt;Get address from metamask&lt;/li&gt;
&lt;li&gt;Fetch transaction details&lt;/li&gt;
&lt;li&gt;Calculate Gas Fee&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets go deep dive into each one and explore how it was implemented.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup-nextjs"&gt;
  &lt;/a&gt;
  Setup NextJS
&lt;/h2&gt;

&lt;p&gt;Next JS is a framework (built on-top of React JS) that allows us to create pre-rendered React websites. Follow this &lt;a href="https://nextjs.org/docs/getting-started"&gt;link&lt;/a&gt; to get yourself started on the setup  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#get-address-from-metamask"&gt;
  &lt;/a&gt;
  Get address from metamask
&lt;/h2&gt;

&lt;p&gt;For this case we would be using metamask as our wallet. You can choose any as per your preference. Using Web3 apis we can connect to metamask and fetch the current network address of the user.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#fetch-transaction-details"&gt;
  &lt;/a&gt;
  Fetch transaction details
&lt;/h2&gt;

&lt;p&gt;For fetching transactions we would be using &lt;a href="https://docs.etherscan.io/"&gt;Etherscan API&lt;/a&gt; to fetch the transaction details for the given address&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#calculate-gas-fee"&gt;
  &lt;/a&gt;
  Calculate Gas Fee
&lt;/h2&gt;

&lt;p&gt;As per the API response the fields &lt;em&gt;gasUsed&lt;/em&gt; and &lt;em&gt;gasPrice&lt;/em&gt; are used to get the total eth spent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gasFee = gasUsed * gasPrice
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Since &lt;strong&gt;ETHUSD&lt;/strong&gt; pair price is very volatile, we would fetch the &lt;strong&gt;ETHUSD&lt;/strong&gt; on the date of the transaction using &lt;a href="https://www.coingecko.com/en/api/documentation"&gt;Coingecko api&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This app was made as part of learning Web3 apps. There might be bugs and enhancements on the way. Please feel free to provide feedback. &lt;br&gt;
Stay safe and lend a hand to another :) &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://crypto-gas-tracker.vercel.app/"&gt;Crypto Gas Tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vigneshiyer.netlify.app/"&gt;Vignesh Iyer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>web3</category>
    </item>
    <item>
      <title>My Experience on Fiverr</title>
      <author>Michael Myers</author>
      <pubDate>Sat, 13 Nov 2021 06:57:43 +0000</pubDate>
      <link>https://dev.to/devmoek/my-experience-on-fiverr-2pne</link>
      <guid>https://dev.to/devmoek/my-experience-on-fiverr-2pne</guid>
      <description>&lt;p&gt;Hey! It's Mike. Welcome to my new article. &lt;a href="https://devmoek.medium.com/aboutfiverr-99f68fc414db"&gt;I posted an article about Fiverr on Medium&lt;/a&gt;. This is a retake, I want to tell you about my experience on it, what I love and what I hate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#my-freelancing-experience"&gt;My experience&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-i-chose-fiverr"&gt;Why Fiverr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#i-told-my-friend-to-create-a-profile-on-fiverr"&gt;I told my friend to start freelancing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-highest-paying-side-hustles-on-fiverr"&gt;The highest paying jobs on Fiverr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-are-you-waiting-for"&gt;Referral link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pros-of-dollar5-services"&gt;Pros of Fiverr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cons-of-dollar5-services"&gt;Cons of Fiverr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips-for-new-sellers"&gt;Tips for new sellers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#overall"&gt;Overall&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#my-freelancing-experience"&gt;
  &lt;/a&gt;
  My freelancing experience
&lt;/h2&gt;

&lt;p&gt;I'm a freelancer since 2020. I make websites using CMS, website builders, and sometimes I develop websites from scratch. I have a full-time job and create websites from scratch on freelance is really hard for me at this moment, that's why I take orders on CMS like WordPress, Shopify. Sometimes people want a website on website builder like Webflow, Squarespace, Tilda, and I take it. I had a lot of questions when just started my freelancing journey like how to create a competitive profile, or another one, how to create a gig customers will buy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-i-chose-fiverr"&gt;
  &lt;/a&gt;
  Why I chose Fiverr?
&lt;/h3&gt;

&lt;p&gt;Today Fiverr is one of the largest freelance website. Fiverr offers a lot of jobs for people who try to find a project or post one. And I need to take small projects to complete them in 1-5 days. I spend 1-3 hours every day on a project, it's pretty comfortable for me. Fiverr it's like a side hustle for me. It's only 10% of my income. I think I can do more money on it. I'll tell you how it goes in the next articles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vvi5s3Bh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322723541/7_FTGNmG6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vvi5s3Bh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322723541/7_FTGNmG6.png" alt="Fiverr Data section" width="606" height="162"&gt;&lt;/a&gt;Fiverr Data section&lt;/p&gt;

&lt;p&gt;All you need is to take your niche. There are a lot of jobs you can pick. If you don't know what you like, take all and try. &lt;strong&gt;Be attention&lt;/strong&gt;, you can create only 7 gigs when your level is a new seller. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_vfkKUGC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322724997/2kSwp6ADV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_vfkKUGC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322724997/2kSwp6ADV.png" alt="Fiverr Lifestyle section" width="598" height="331"&gt;&lt;/a&gt; Fiverr Lifestyle section&lt;/p&gt;

&lt;p&gt;Are you creating games? You’ll find your customers.&lt;br&gt;
Are you creating websites? Okay, fine.&lt;br&gt;
Maybe are you just playing games? Awesome! You can coach someone or play together for $5 or more.&lt;/p&gt;

&lt;p&gt;What do you think about it? I think it's awesome!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-told-my-friend-to-create-a-profile-on-fiverr"&gt;
  &lt;/a&gt;
  I told my friend to create a profile on Fiverr
&lt;/h3&gt;

&lt;p&gt;I told my friend to create a profile on Fiverr to make music. He's a beatmaker and I love his beats so much. It was 1 year ago, he said like his music is a piece of shit and nobody will like it. I told him like he's not right. And couple days ago he texted me and said like can you help me, I want to create Fiverr profile and sell my beats after a full-time job. I was shocked and happy. It's all about your wish and DO NOT think that people will hate your product. You need to try to say that. By the way there are people who hate Apple (yes I know Apple and beatmaking it's a little bit different but still). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-highestpaying-side-hustles-on-fiverr"&gt;
  &lt;/a&gt;
  The highest-paying side hustles on Fiverr
&lt;/h3&gt;

&lt;p&gt;The most paying jobs on Fiverr right now are online assistant, website design, CV, Cover Letter and Resume Writing, etc. You can read more &lt;a href="https://www.cnbc.com/2021/06/18/highest-paying-online-side-hustles.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-you-waiting-for"&gt;
  &lt;/a&gt;
  What are you waiting for?
&lt;/h3&gt;

&lt;p&gt;If you are interested, &lt;a href="http://www.fiverr.com/s2/c01a98358c"&gt;sign up on Fiverr&lt;/a&gt; and get 10% off your first purchase (it's referral link, I will appreciate if you will sign up using my link).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros-of-5-services"&gt;
  &lt;/a&gt;
  Pros of $5 services
&lt;/h3&gt;

&lt;p&gt;Another pros of Fiverr is that all services started from $5. When Fiverr just started, all services cost $5, it was their Terms of Service.&lt;/p&gt;

&lt;p&gt;For example, you offer a logo. For $5 you create one logo sketch. For $15 you create several sketches. And for $30 logo colors variations + source file. Time going, this &lt;a href="https://www.fiverr.com/terms_of_service"&gt;Terms of Service&lt;/a&gt; go on the background and many new sellers don’t know about it, just put $30 for one logo sketch. Of course, if you are a professional and have many customers it’s pretty reasonable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cons-of-5-services"&gt;
  &lt;/a&gt;
  Cons of $5 services
&lt;/h3&gt;

&lt;p&gt;On the other hand, $5 services have cons. You should compete with more experienced freelancers. It sucks when you just started. BUT you don’t understand this freelancer put $5 because he is a new seller or just a professional who has original Terms of Service. It’s hard to understand who is a new seller and who is a professional. However, it’ll be a plus for someone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-for-new-sellers"&gt;
  &lt;/a&gt;
  Tips for new sellers
&lt;/h2&gt;

&lt;p&gt;What about new sellers? If you just started your way on Fiverr, put low cost and offer more than other freelancers. It’ll help you to find your first customer. However, it will takes time to get you first customer. I put $5 on all my gigs and still don’t have a customer. I have projects in my portfolio, catch eye cover image, video about each gig but still. All you need is to be patient. Don’ think about money when you just start you way. Your money is customers because they bring it to you. Your focus will be on how to get a customer, not how to get money. It’s the same thing as well but sounds different. You can &lt;a href="https://www.fiverr.com/devmoek"&gt;check my profile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After all, when you sign up, the first step will be to look at other freelancers. What do they offer for this price? Attach a photo of your smiling face. Write a seller description. Create gigs, more is better. gig — your offer for a customer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uCpM5pkF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322727166/70ZiErAmV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uCpM5pkF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322727166/70ZiErAmV.png" alt="fiverr gig" width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you creating gigs, use a correct cover image, write a description, attach some portfolio examples of this service, choose a price.&lt;/p&gt;

&lt;p&gt;On your first steps, it seems complex. But don’t give up. There are a lot of people out there. Just take your time. Upgrade your expertise every day and you’ll do it! If you understand what you do and what it gives you, success will come. Just wait.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#analyze-your-profile"&gt;
  &lt;/a&gt;
  Analyze your profile
&lt;/h3&gt;

&lt;p&gt;Analyze your profile several times in a month. What gigs have the most impressions? What gigs have the most clicks? If people clicking, why don’t make an order? Maybe you should rewrite your gig’s description, decrease or raise the price. Yes, sometimes low prices make an effect on a potential customer. Change the cover image, maybe it doesn’t hook. Change your portfolio, perhaps you created better works for it.&lt;/p&gt;

&lt;p&gt;If you read this post from start to finish I’m so happy. Let me know in the comments or message me on social media I’ll say thanks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#take-your-time"&gt;
  &lt;/a&gt;
  Take your time
&lt;/h3&gt;

&lt;p&gt;Just wait, time is your best friend.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#give-a-value"&gt;
  &lt;/a&gt;
  Give a value
&lt;/h3&gt;

&lt;p&gt;You can sell a piece of crap and people will buy it, but how many times you will sell before taking a lot of bad reviews? It's a question. &lt;/p&gt;

&lt;p&gt;Provide a value. Your first customer is so much important when you start your business, yes I think freelance is a business. You need to be so much pleasure with your customers and it will give you a nice back shot. People will recommend you, Fiverr will recommend you, all will recommend you. It's a nice feeling when a customer accept the revision and left a 5 star review. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ask-your-friends-to-help-you"&gt;
  &lt;/a&gt;
  Ask your friends to help you
&lt;/h3&gt;

&lt;p&gt;You have a friends right? Ask them to help you. Give them $5 and they will create an order for you. After that they will left a 5 star review and you're all in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-orders-first-money"&gt;
  &lt;/a&gt;
  First orders / first money
&lt;/h3&gt;

&lt;p&gt;I had my first review. It was a customer from Canada. After the first order the customer repeated the business. It was a good customer and I'm so happy I worked with him. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PckjAsBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636254338841/rFxenA07r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PckjAsBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636254338841/rFxenA07r.png" alt="I got first review on Fiverr" width="750" height="159"&gt;&lt;/a&gt;&lt;br&gt;
You can check more on &lt;a href="https://instagram.com/devmoek"&gt;my Instagram&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#take-orders-you-can-deliver-in-time"&gt;
  &lt;/a&gt;
  Take orders you can deliver in time
&lt;/h3&gt;

&lt;p&gt;A lot of people will text you and ask something you can't do or don't know how to do. If you think that a customer wants a task you can't do, tell that. Because people are do not understand how it works and it's okay.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overall"&gt;
  &lt;/a&gt;
  Overall
&lt;/h3&gt;

&lt;p&gt;Fiverr is a nice freelance website. It's free to starting, all you need is a wish. For my opinion everyone can create a profile on Fiverr and start freelancing, it's super fun (exclude when you got a lot of orders, it's a hell lol).&lt;/p&gt;

&lt;p&gt;Thank you for your attention. I appreciate that. Stay safe!&lt;/p&gt;

</description>
      <category>fiverr</category>
      <category>freelance</category>
      <category>tips</category>
      <category>workfromhome</category>
    </item>
    <item>
      <title>Measuring mutex, channel and waitGroup performance</title>
      <author>ynwd</author>
      <pubDate>Sat, 13 Nov 2021 06:45:06 +0000</pubDate>
      <link>https://dev.to/ynwd/measuring-mutex-channel-and-waitgroup-performance-47j3</link>
      <guid>https://dev.to/ynwd/measuring-mutex-channel-and-waitgroup-performance-47j3</guid>
      <description>&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;function&lt;/th&gt;
&lt;th&gt;concurrency&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;getText&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getTextWithChannel&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getTextWithWaitGroup&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getTextWithMutex&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Source code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"sync"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;getText&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"hi"&lt;/span&gt;

    &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;getTextWithWaitGroup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"hi"&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;waitgroup&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WaitGroup&lt;/span&gt;
    &lt;span class="n"&gt;waitgroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;
        &lt;span class="n"&gt;waitgroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="n"&gt;waitgroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;getTextWithChannel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"hi"&lt;/span&gt;
    &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;
        &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;getTextWithMutex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"hi"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;txt&lt;/span&gt;   &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;mutex&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mutex&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mutex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mutex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mutex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mutex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Benchmark test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"testing"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;BenchmarkGetText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;getText&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;BenchmarkGetTextWithChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;getTextWithChannel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;BenchmarkGetTextWithWaitGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;getTextWithWaitGroup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;BenchmarkGetTextWithMutex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;getTextWithMutex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Running tool: /usr/local/go/bin/go test -benchmem -run=^$ -coverprofile=/var/folders/43/sjvtz21j0kq56_7vc9nchb400000gq/T/vscode-goeIm86z/go-code-cover -bench . github.com/ynwd/monorepo/Documents/apps/cms/cmd

goos: darwin
goarch: amd64
pkg: github.com/ynwd/monorepo/Documents/apps/cms/cmd
cpu: Intel(R) Core(TM) i5-1038NG7 CPU @ 2.00GHz
BenchmarkGetText-8                  1000000000           0.5197 ns/op          0 B/op          0 allocs/op
BenchmarkGetTextWithChannel-8        1826163           644.4 ns/op       136 B/op          3 allocs/op
BenchmarkGetTextWithWaitGroup-8      1780219           670.9 ns/op        56 B/op          3 allocs/op
BenchmarkGetTextWithMutex-8          3833086           311.2 ns/op        40 B/op          2 allocs/op
PASS
coverage: 100.0% of statements
ok      github.com/ynwd/monorepo/Documents/apps/cms/cmd 6.332s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>benchmark</category>
      <category>go</category>
      <category>datarace</category>
      <category>concurrency</category>
    </item>
    <item>
      <title>OS themed profile</title>
      <author>Yash Datir</author>
      <pubDate>Sat, 13 Nov 2021 05:53:38 +0000</pubDate>
      <link>https://dev.to/yashdatir/os-themed-profile-4bf1</link>
      <guid>https://dev.to/yashdatir/os-themed-profile-4bf1</guid>
      <description>&lt;p&gt;Hey there, m up with one of my other mini project, making an OS clone for my profile. It has its own UI, CLI, formats etc. I feel this may have endless possibilities for its usage, also may come up with something creative. I would also like if any one can collaborate for the same. Currently it has all the data static, but arrangements have been made to make it dynamic using a backend. So, lets get in touch...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://yashdatir.github.io/profile-os/"&gt;https://yashdatir.github.io/profile-os/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>linux</category>
      <category>mac</category>
      <category>windows</category>
    </item>
    <item>
      <title>What I've Been Working On: Flask, REST APIs, Testing, and Projects.</title>
      <author>Zachary Niehoff</author>
      <pubDate>Sat, 13 Nov 2021 04:22:47 +0000</pubDate>
      <link>https://dev.to/bixxith/what-ive-been-working-on-flask-rest-apis-testing-and-projects-4de6</link>
      <guid>https://dev.to/bixxith/what-ive-been-working-on-flask-rest-apis-testing-and-projects-4de6</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-ive-been-up-to"&gt;
  &lt;/a&gt;
  What I've Been Up To
&lt;/h1&gt;

&lt;p&gt;I have been trying to grow and solidify my knowledge by watching videos/completing tutorials and then making my own projects using the knowledge I gained as practice. I have a list of skills I want to learn so I started working with a few of them simultaneously.  &lt;/p&gt;

&lt;p&gt;I watched a video on LinkedIn Learning about creating a college course website using Flask, REST APIs, and MongoDB.  I started coding along with the instructor but soon realized that I already knew or understood the concepts he was teaching.&lt;/p&gt;

&lt;p&gt;After all the work I've put into my portfolio website I have become quite accustomed with Django's syntax and how it works.  When it came to learning Flask it was a breeze.  I was able to translate the concepts I'd learned with Django and create a working app way quicker than before.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-project"&gt;
  &lt;/a&gt;
  My Project
&lt;/h2&gt;

&lt;p&gt;I finally found an interesting small project to work on.  I am creating a Python/Flask web application that makes small, unimportant decisions for you.  Like where to eat tonight? or What movie should I watch?  It isn't anything even remotely revolutionary but it's getting me valuable experience in Flask, Python, and using APIs.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#first-steps"&gt;
  &lt;/a&gt;
  First Steps
&lt;/h4&gt;

&lt;p&gt;It started off being an app to choose where to eat, but I decided I wanted more depth.  Right now, I only have the restaurant chooser app completed.  I plan to implement more soon.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#apis-used"&gt;
  &lt;/a&gt;
  APIs Used
&lt;/h4&gt;

&lt;p&gt;Creating this app I got a lot of experience using Google APIs.  Mainly geocoding, places, and Google map embed.  I also learned that some companies charge to use APIs and that is why I am not hosting my web app.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#html-and-css"&gt;
  &lt;/a&gt;
  HTML and CSS
&lt;/h4&gt;

&lt;p&gt;I love the concept of having templates being extended to generate pages.  It makes setting up new HTML pages for your project fast and simple.  This time around I decided not to go with Bootstrap and try my hand at CSS myself.  I don't think it went badly I just don't know how to make my website's pretty yet.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#virtual-environments"&gt;
  &lt;/a&gt;
  Virtual Environments
&lt;/h4&gt;

&lt;p&gt;One thing the video did teach me was how to setup and use a virtual environment in Visual Code.  I had never used a virtual environment before despite having heard quite a bit about them.  It was surprisingly easy and non-painful.  I can't believe I was using the command prompt so much before.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#unit-testing"&gt;
  &lt;/a&gt;
  Unit Testing
&lt;/h4&gt;

&lt;p&gt;Another concept I've been wanting to get into.  It wasn't covered in the video and my current project isn't a great one to implement tests into.  I currently have one test in my app and it is to make sure the restaurant chooser class functions properly.  I can't make the test 100% accurate because the API sometimes returns Subway and other silly things when you are searching for pizza.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading.
&lt;/h2&gt;

&lt;p&gt;I have been working hard on learning and building up to a career in Software Development.  This is my third project I feel will be worthy of showcasing and I'll hopefully have more to show off before the year is over. Also, in about a month I'll have my Associates Degree in Software Development and officially be halfway done with school! Maybe then I can finally get an Internship.&lt;/p&gt;

&lt;p&gt;The project can be found &lt;a href="https://github.com/Bixxith/Random-Chooser-App"&gt;here&lt;/a&gt; if you are interested in viewing it.&lt;/p&gt;

</description>
      <category>python</category>
      <category>flask</category>
      <category>testing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Learn CSS Grid in 5 minutes</title>
      <author>Sagar Barapatre</author>
      <pubDate>Sat, 13 Nov 2021 02:59:49 +0000</pubDate>
      <link>https://dev.to/sagarbarapatre/learn-css-grid-in-5-minutes-1j0n</link>
      <guid>https://dev.to/sagarbarapatre/learn-css-grid-in-5-minutes-1j0n</guid>
      <description>&lt;h3&gt;
  &lt;a href="#a-quick-tutorial-on-the-future-of-website-layouts"&gt;
  &lt;/a&gt;
  A quick tutorial on the future of website layouts.
&lt;/h3&gt;

&lt;p&gt;Grid layouts are fundamental to the design of websites, and the CSS Grid module is the most powerful and easiest tool for creating it. I personally think it’s a lot better than for example Bootstrap (read why &lt;a href="https://hackernoon.com/how-css-grid-beats-bootstrap-85d5881cf163"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The module has also gotten native support by the &lt;a href="https://caniuse.com/#feat=css-grid"&gt;major browsers&lt;/a&gt; (Safari, Chrome, Firefox, Edge) this year, so I believe that all front-end developer will have to learn this technology in the &lt;em&gt;not too distant&lt;/em&gt; future.&lt;/p&gt;

&lt;p&gt;In this article, I’ll take you through the very basics of CSS Grid as quickly as possible. I’ll be leaving out everything you shouldn’t care about until you’ve understood the basics.&lt;/p&gt;

&lt;p&gt;Now let’s jump into it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-first-grid-layout"&gt;
  &lt;/a&gt;
  Your first grid layout
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The two core ingredients of a CSS Grid are the wrapper&lt;/strong&gt; &lt;strong&gt;(parent) and the items (children). The wrapper is the actual&lt;/strong&gt; &lt;strong&gt;grid and the items are the content inside the grid.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here’s the markup for a wrapper with six items in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;5&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;6&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To turn our wrapper &lt;code&gt;div&lt;/code&gt; into a &lt;strong&gt;grid&lt;/strong&gt;, we simply give it a display of &lt;code&gt;grid&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, this doesn’t do anything yet, as we haven’t defined how we want our grid to look like. It’ll simply stacks 6 &lt;code&gt;div's&lt;/code&gt; on top of each other.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LiTBF34p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6xxe3ootqt2gjg0abf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LiTBF34p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6xxe3ootqt2gjg0abf5.png" alt="I’ve added a bit of styling, but that hasn’t got anything to do with CSS grid." width="700" height="206"&gt;&lt;/a&gt;&lt;br&gt;
I’ve added a bit of styling, but that hasn’t got anything to do with CSS grid.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#columns-and-rows"&gt;
  &lt;/a&gt;
  Columns and rows
&lt;/h3&gt;

&lt;p&gt;To make it two-dimensional, we’ll need to define the columns and rows. Let’s create three columns and two rows. We’ll use the &lt;code&gt;grid-template-row&lt;/code&gt; and &lt;code&gt;grid-template-column&lt;/code&gt; properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we’ve written three values for &lt;code&gt;grid-template-columns&lt;/code&gt;, we’ll get three columns. We’ll get two rows, as we’ve specified two values for the &lt;code&gt;grid-template-rows&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The values dictate how wide we want our columns to be (100px) and how tall we’d want our rows to be (50px). Here’s the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AVBYyF0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdbote8w1p98bk943oji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AVBYyF0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdbote8w1p98bk943oji.png" alt="Imagenckjnaj" width="700" height="159"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make sure you properly understand the relation between the values and how the grid looks, take a look at this example as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try to grasp the connection between the code and the layout.&lt;/p&gt;

&lt;p&gt;Here’s how it plays out:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m65cezaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cibtwix71o8dp5zq4l15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m65cezaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cibtwix71o8dp5zq4l15.png" alt="Imagekmkmlams" width="700" height="176"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#placing-the-items"&gt;
  &lt;/a&gt;
  Placing the items
&lt;/h3&gt;

&lt;p&gt;The next thing you’ll need to learn is how to place items on the grid. This is where you get superpowers, as it makes it dead simple to create layouts.&lt;/p&gt;

&lt;p&gt;Let’s create a 3x3 grid, using the same markup as before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will result in the following layout:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RpWArMim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb14oi4m6ftfl5bdbjpy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RpWArMim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb14oi4m6ftfl5bdbjpy.png" alt="Imagemalslkm" width="700" height="259"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Notice, we only see a 3x2 grid on the page, while we defined&lt;/code&gt; &lt;code&gt;it as a 3x3 grid. That’s because we only have six items to&lt;/code&gt; &lt;code&gt;fill the grid with. If we had three more, then the lowest row would be filled as well.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To position and resize the items we’ll target them and use the &lt;code&gt;grid-column&lt;/code&gt; and &lt;code&gt;grid-row&lt;/code&gt; properties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we’re saying here is that we want item1 to start on the first grid line and end on the fourth column line. In other words, it’ll take up the entire row. Here’s how that’ll play out on the screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KXabrSlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wk52uh7hnmnu69d33xv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KXabrSlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wk52uh7hnmnu69d33xv.png" alt="Imagoopido" width="700" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Are you confused why we have 4 column lines when we only have 3 columns. Take a look at this image, where I’ve drawn the column lines in black:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WCGTl6TQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgetu40i925spdja61bu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WCGTl6TQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgetu40i925spdja61bu.png" alt="Imagelmak" width="700" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that we’re now using all the rows in the grid. When we made the first item take up the entire first row, it pushed the rest of the items down.&lt;/p&gt;

&lt;p&gt;Finally, I’d like to show a simpler way of writing the syntax above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make sure you’ve understood this concept properly, let’s rearrange the items a little bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.item3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-row-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-row-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.item4&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s how that looks on the page. Try to wrap you head around why it looks like it does. It shouldn’t be too hard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s4WchxUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20l5in2ja63nxb81210s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s4WchxUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20l5in2ja63nxb81210s.png" alt="Imagsbajaks" width="700" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that was it!&lt;br&gt;
Thanks for reading! My name is Sagar Barapatre, and I often write about learning new stuff. Follow me on &lt;a href="https://twitter.com/sagar_sb_"&gt;Twitter&lt;/a&gt; if you want to keep in touch.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>codepen</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Here are the Dockerfile tips you can use to get your builds faster and safer</title>
      <author>Mateusz Cholewka</author>
      <pubDate>Sat, 13 Nov 2021 02:58:15 +0000</pubDate>
      <link>https://dev.to/mtk3d/here-are-the-dockerfile-tips-you-can-use-to-get-your-builds-faster-and-safer-4o1a</link>
      <guid>https://dev.to/mtk3d/here-are-the-dockerfile-tips-you-can-use-to-get-your-builds-faster-and-safer-4o1a</guid>
      <description>&lt;p&gt;Nowadays we are using docker a lot in web development. It's easy to use, great in scaling, and gives us an immutable environment for running your application from local development to deploy on production.&lt;br&gt;
To get the best experience with docker you should apply some practices to get fast and light builds of your docker images.&lt;/p&gt;

&lt;p&gt;In this article, I want to show you some of those practices based on this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; php:7-fpm&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; https://deb.nodesource.com/setup_12.x .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;bash setup_12.x

&lt;span class="k"&gt;RUN &lt;/span&gt;curl &lt;span class="nt"&gt;-sS&lt;/span&gt; https://getcomposer.org/installer | php &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;--install-dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/ &lt;span class="nt"&gt;--filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;composer

&lt;span class="k"&gt;RUN &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    curl &lt;span class="se"&gt;\
&lt;/span&gt;    git &lt;span class="se"&gt;\
&lt;/span&gt;    htop &lt;span class="se"&gt;\
&lt;/span&gt;    libicu-dev &lt;span class="se"&gt;\
&lt;/span&gt;    libgd-dev &lt;span class="se"&gt;\
&lt;/span&gt;    mariadb-client &lt;span class="se"&gt;\
&lt;/span&gt;    libonig-dev &lt;span class="se"&gt;\
&lt;/span&gt;    vim &lt;span class="se"&gt;\
&lt;/span&gt;    unzip &lt;span class="se"&gt;\
&lt;/span&gt;    nodejs

&lt;span class="k"&gt;RUN &lt;/span&gt;apt purge &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;--auto-remove&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; yarn

&lt;span class="k"&gt;RUN &lt;/span&gt;docker-php-ext-install &lt;span class="se"&gt;\
&lt;/span&gt;    exif &lt;span class="se"&gt;\
&lt;/span&gt;    gd &lt;span class="se"&gt;\
&lt;/span&gt;    intl &lt;span class="se"&gt;\
&lt;/span&gt;    mbstring &lt;span class="se"&gt;\
&lt;/span&gt;    mysqli &lt;span class="se"&gt;\
&lt;/span&gt;    opcache &lt;span class="se"&gt;\
&lt;/span&gt;    pdo_mysql &lt;span class="se"&gt;\
&lt;/span&gt;    sockets

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; COMPOSER_ALLOW_SUPERUSER 1&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;composer &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#base-your-builds-on-specific-image-version"&gt;
  &lt;/a&gt;
  Base your builds on specific image version
&lt;/h2&gt;

&lt;p&gt;The first thing to change is the base image tag. As you can see in this Dockerfile the PHP7 is used, but the tag name is not precise enough. Here is the first improvement that we can make.&lt;/p&gt;

&lt;p&gt;When you are using dependencies managers like yarn / composer, you probably use the lock files. Using them will keep exactly the same version of dependencies on every install. So why don't do it with all dependencies?&lt;/p&gt;

&lt;p&gt;So the first dependency is the image tag we base our image on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; php:7-fpm&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can change it to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; php:7.4.25-fpm&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should save you for situations where your image doesn't work after a few months because of differences in newer PHP versions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#copy-your-code-last"&gt;
  &lt;/a&gt;
  COPY your code last
&lt;/h2&gt;

&lt;p&gt;Docker images are built from layers. Every layer can be cached, and this cache can be reused for the next builds if nothing has been changed. Docker can use cache only if all of the previous layers are loaded from cache too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;...
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /app/&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should order your build steps by frequency of changes. Your application code is probably the thing that is changing most often, so you should put it as late as possible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; php:7.4.25-fpm&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="c"&gt;## remove COPY from here&lt;/span&gt;
...
## rest of commands
...
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="c"&gt;## final commands&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#do-not-use-add-for-remote-dependencies"&gt;
  &lt;/a&gt;
  Do not use ADD for remote dependencies
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ADD&lt;/code&gt; instruction in Dockerfile allows you to copy files from remote locations by URLs. This feature also can unpack the zip archives which is great, but it has one problem. It doesn't cache your files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; https://deb.nodesource.com/setup_12.x ./node_setup.bash&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;bash node_setup.bash &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nb"&gt;rm &lt;/span&gt;node_setup.bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, that's better.&lt;br&gt;&lt;br&gt;
The setup script file is undesirable, so it can be removed after the installation. But the problem is that the layers in Dockerfiles works like commits in git. When you put something to the repository using commit you can delete it with the next one, but because git works incrementally, both versions are kept in history, and the repository size increases.&lt;br&gt;
To avoid this in docker images, you should create and remove undesirable files in the same instruction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;curl &lt;span class="nt"&gt;-sS&lt;/span&gt; https://deb.nodesource.com/setup_12.x ./node_setup.bash &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    bash node_setup.bash &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nb"&gt;rm &lt;/span&gt;node_setup.bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Better, but still not the best.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;curl &lt;span class="nt"&gt;-sS&lt;/span&gt; https://deb.nodesource.com/setup_12.x ./node_setup.bash | bash -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can do all that things in one-line command using a pipe. In this example, the file content will be fetched and pushed directly to the bash that will execute it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-composer-in-dockerfile"&gt;
  &lt;/a&gt;
  Using composer in Dockerfile
&lt;/h2&gt;

&lt;p&gt;Here we have the composer installed in our container. It will be kept for all environments. It's not the best idea to keep it in final image, because it's not necessery and may add some vulnerabilities. There is a better option to use composer with multistage build that I want to describe in the next article.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;...
&lt;span class="k"&gt;RUN &lt;/span&gt;curl &lt;span class="nt"&gt;-sS&lt;/span&gt; https://getcomposer.org/installer | php &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;--install-dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/ &lt;span class="nt"&gt;--filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;composer
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This line is ok it will be cached, and do not leave any garbage.&lt;br&gt;
Maybe we should use the hash checking script that you can find in the official install script.&lt;br&gt;
You can also use this trick:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;...
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=composer:2.1.11 /usr/bin/composer /usr/bin/composer&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will copy the composer bin from the external official composer image.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-apt-packages"&gt;
  &lt;/a&gt;
  Installing apt packages
&lt;/h2&gt;

&lt;p&gt;Next, we have some packages installed using apt manager. Let's check if all of them are needed.&lt;br&gt;&lt;br&gt;
The git may be required for pulling packages or building some binaries from source. I can't see any reason to keep it. Let's remove it for now.&lt;br&gt;&lt;br&gt;
The htop may be useful for debugging, but not for the final image, we can install it when we really need it. Vim is useless too because you shouldn't make any changes in the working container. It's stateless, so your changes will disappear on a restart. Also mariadb-client is probably required only for development.&lt;/p&gt;

&lt;p&gt;The rest of the packages may be required, but there is one more problem. The docker is using layers for caching. Every layer is built from dingle instruction. The cache is invalidated if the instruction or previous instruction had changed. So in this case if you do not change this instruction, the newer packages could be never installed, and they may vary depends on build environment.&lt;br&gt;&lt;br&gt;
If you add a specific version of every package, you will be sure that every image built from this Dockerfile has the same versions of packages, and the cache will be invalidated correctly.&lt;br&gt;&lt;br&gt;
You can do this by specifying the version after the &lt;code&gt;=&lt;/code&gt; sign. To check which version you need to install, go to your current working container, or to the container that you build your image from, and check it with a list command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt list libonig-dev
Listing... Done
libonig-dev/stable,now 6.9.6-1.1 amd64 &lt;span class="o"&gt;[&lt;/span&gt;installed]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example the currently working version is &lt;code&gt;5.5.9999+default&lt;/code&gt;, so let's check the rest and specify them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    libicu-dev&lt;span class="o"&gt;=&lt;/span&gt;67.1-7 &lt;span class="se"&gt;\
&lt;/span&gt;    libgd-dev&lt;span class="o"&gt;=&lt;/span&gt;2.3.0-2 &lt;span class="se"&gt;\
&lt;/span&gt;    libonig-dev&lt;span class="o"&gt;=&lt;/span&gt;6.9.6-1.1 &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nv"&gt;unzip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;6.0-26 &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nv"&gt;nodejs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;12.22.7-deb-1nodesource1

&lt;span class="k"&gt;RUN &lt;/span&gt;apt purge &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;--auto-remove&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, you need to keep them up to date manually. It's good to check them frequently.&lt;/p&gt;

&lt;p&gt;There is one more thing to do. After the install command, there is a commend that's cleaning your system after installing instruction. It's very good that that is here, but this is done in the separated instruction. As we remember, if we remove something on another layer, that will still exist in the previous layers of our final image. So let's do the cleaning in the same command. That should decrease your final image size.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    libicu-dev&lt;span class="o"&gt;=&lt;/span&gt;67.1-7 &lt;span class="se"&gt;\
&lt;/span&gt;    libgd-dev&lt;span class="o"&gt;=&lt;/span&gt;2.3.0-2 &lt;span class="se"&gt;\
&lt;/span&gt;    libonig-dev&lt;span class="o"&gt;=&lt;/span&gt;6.9.6-1.1 &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nv"&gt;unzip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;6.0-26 &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nv"&gt;nodejs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;12.22.7-deb-1nodesource1 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt purge &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;--auto-remove&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#composer-dependencies"&gt;
  &lt;/a&gt;
  Composer dependencies
&lt;/h2&gt;

&lt;p&gt;Let's get to the next lines. There is another one &lt;code&gt;RUN&lt;/code&gt; instruction, that will install all of our composer dependencies. The first thing that is missed here is that we install all dependencies also with dev dependencies, that's are not necessary for the running environment. So let's put some flags here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;composer &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--optimize-autoloader&lt;/span&gt; &lt;span class="nt"&gt;--no-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Those flags will install all dependencies exclude dev, with autoloader optimization.&lt;/p&gt;

&lt;p&gt;As you remember, we have to move the &lt;code&gt;COPY&lt;/code&gt; instruction of our code from the beginning of this file as much as possible at the end. Here is the line where we need our project files. But do we need our entire codebase? How often do you change the dependencies in your project? For sure less often than your application code. So do we need to pull our dependencies every time when we change something in our code? Probably no 😃&lt;br&gt;&lt;br&gt;
So the only files that we need are the composer files there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; composer.json .&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; composer.lock .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;composer &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--no-dev&lt;/span&gt; &lt;span class="nt"&gt;--no-scripts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the cache will work for our composer depenencies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h2&gt;

&lt;p&gt;Ok, it's time when we need our code because there are the build steps. Let's paste our &lt;code&gt;COPY&lt;/code&gt; instruction from the beginning here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, we need to generate the autoloader file with all our project files&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;composer dumpautoload &lt;span class="nt"&gt;--optimize&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#node-dependencies"&gt;
  &lt;/a&gt;
  Node dependencies
&lt;/h2&gt;

&lt;p&gt;For a node there is the same situation as in composer. So first copy packages files and next install all dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do we need all dependencies or only non-dev dependencies? Maybe we don't need any node dependencies in the container because we use it only to build our frontend. So why not install everything and remove it after the build?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    yarn run build &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; node_modules &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    yarn cache clean
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And right now, we have no node dependencies that are not necessary. The problem here is that we cannot cache those dependencies. There are two ways to resolve this problem. The first one is the multistage build, but it's the topic for another article, which will be available soon. The second option will be to move entire frontend building to the nginx Dockerfile.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#values-for-now"&gt;
  &lt;/a&gt;
  Values for now
&lt;/h2&gt;

&lt;p&gt;Applying all those changes, let's check how much build process time we get.&lt;br&gt;&lt;br&gt;
Old image build 4m28s* 901MB&lt;br&gt;&lt;br&gt;
New image build 3m57s* 711MB&lt;br&gt;&lt;br&gt;
So we safe almost 200MB for final image. Our build time is not much better than before, but let's check how our cache is working now:&lt;br&gt;&lt;br&gt;
Old image with cache 4m35s*&lt;br&gt;&lt;br&gt;
New image with cache 25.1s*&lt;br&gt;&lt;br&gt;
So yea, the cache is working better for our new image.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#do-you-really-need-node-for-running-php-application"&gt;
  &lt;/a&gt;
  Do you really need node for running PHP application?
&lt;/h2&gt;

&lt;p&gt;In our example Dockerfile we are building our frontend app in the backend container, and then copy it to our frontend container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; nginx:latest&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=backend /app/public /app/public&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; docker/nginx/default.conf /etc/nginx/default.conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why to not build our app directly in the frontend image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; nginx:1.21.4&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; docker/nginx/default.conf /etc/nginx/default.conf&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;curl &lt;span class="nt"&gt;-sS&lt;/span&gt; https://deb.nodesource.com/setup_12.x ./node_setup.bash | bash -

&lt;span class="k"&gt;RUN &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;&lt;span class="nv"&gt;nodejs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;12.22.7-deb-1nodesource1 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt purge &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;--auto-remove&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; yarn

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    yarn run build &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; node_modules &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    yarn cache clean
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And our backend Dockerfile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; php:7.4.25-fpm&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=composer:2.1.11 /usr/bin/composer /usr/bin/composer&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    libicu-dev&lt;span class="o"&gt;=&lt;/span&gt;67.1-7 &lt;span class="se"&gt;\
&lt;/span&gt;    libgd-dev&lt;span class="o"&gt;=&lt;/span&gt;2.3.0-2 &lt;span class="se"&gt;\
&lt;/span&gt;    libonig-dev&lt;span class="o"&gt;=&lt;/span&gt;6.9.6-1.1 &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nv"&gt;unzip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;6.0-26 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt purge &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;--auto-remove&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;docker-php-ext-install &lt;span class="se"&gt;\
&lt;/span&gt;    exif &lt;span class="se"&gt;\
&lt;/span&gt;    gd &lt;span class="se"&gt;\
&lt;/span&gt;    intl &lt;span class="se"&gt;\
&lt;/span&gt;    mbstring &lt;span class="se"&gt;\
&lt;/span&gt;    mysqli &lt;span class="se"&gt;\
&lt;/span&gt;    opcache &lt;span class="se"&gt;\
&lt;/span&gt;    pdo_mysql &lt;span class="se"&gt;\
&lt;/span&gt;    sockets

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; COMPOSER_ALLOW_SUPERUSER 1&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; composer.json .&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; composer.lock .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;composer &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--no-dev&lt;/span&gt; &lt;span class="nt"&gt;--no-scripts&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;composer dumpautoload &lt;span class="nt"&gt;--optimize&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So right now our backend image without cache is building in 3m8s* and with cache in 6s*, and it weight is 597MB.&lt;br&gt;&lt;br&gt;
The frontend image is building 57s* and it weight is 310MB.&lt;br&gt;&lt;br&gt;
You can build them in parallel, so the final time could be the maximum time for one of the images.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multistage-builds"&gt;
  &lt;/a&gt;
  Multistage builds
&lt;/h2&gt;

&lt;p&gt;All of those changes may be even better with using feature called multistage builds.&lt;br&gt;
This topic should be available soon in the next article on my blog 😃&lt;/p&gt;




&lt;p&gt;*All the times that appear in this article, I got on my Mac with intel i5 and 16GB RAM environment.&lt;/p&gt;

&lt;p&gt;Please remember about using non root user in your docker images.&lt;/p&gt;

&lt;p&gt;Originally posted on &lt;a href="https://mateuszcholewka.com/post/dockerfile-refactoring/"&gt;mateuszcholewka.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>docker</category>
      <category>php</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Easy Conversion Tracking with PropelAuth</title>
      <author>propelauthblog</author>
      <pubDate>Sat, 13 Nov 2021 02:44:41 +0000</pubDate>
      <link>https://dev.to/propelauth/easy-conversion-tracking-with-propelauth-1e83</link>
      <guid>https://dev.to/propelauth/easy-conversion-tracking-with-propelauth-1e83</guid>
      <description>&lt;p&gt;Almost every advertising platform has a concept of "conversion tracking." When someone clicks on your ad, conversion tracking is a way to determine how valuable that click was. Did the user leave after 5 seconds? Did they sign up? Did they buy something?&lt;/p&gt;

&lt;p&gt;By providing answers to those questions to your advertiser, they can tune the ads to get the outcomes you want. Usually this is done by copying some javascript onto your site and triggering events on the actions you want to encourage.&lt;/p&gt;

&lt;p&gt;At &lt;a href="https://www.propelauth.com"&gt;PropelAuth&lt;/a&gt;, we strongly believe that your auth tool should take on as much as possible in order to get you back to building your product. PropelAuth does this by providing a fully configurable, hosted authentication service - complete with a UI, straightforward documentation, and easy to use libraries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9RIW3rwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro5l12p678xioahy1bge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9RIW3rwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro5l12p678xioahy1bge.png" alt="Screenshot of setting up conversion" width="880" height="704"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To further our mission of taking on as much of the work surrounding auth as possible, we're releasing support for signup conversion tracking. If you want your ads to optimize for user signups, just enter the ID supplied by your advertiser, and we handle the rest. From email/password to social signups, we'll automatically trigger the correct event for your advertiser.&lt;/p&gt;

&lt;p&gt;We currently support Google, Reddit, Facebook, and Twitter. Looking for a different advertiser? Let us know at &lt;a href="//mailto:support@propelauth.com"&gt;support@propelauth.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>marketing</category>
      <category>tooling</category>
      <category>startup</category>
      <category>advertising</category>
    </item>
    <item>
      <title>Data Access in F#</title>
      <author>Angel D. Munoz</author>
      <pubDate>Sat, 13 Nov 2021 02:27:40 +0000</pubDate>
      <link>https://dev.to/tunaxor/data-access-in-fsharp-3o6n</link>
      <guid>https://dev.to/tunaxor/data-access-in-fsharp-3o6n</guid>
      <description>&lt;p&gt;Hello there, this is the next entry in Simple Things F#.&lt;/p&gt;

&lt;p&gt;Today we'll talk about Database access. Databases are something we have to use very often after all it is where we store our data most common databases we use are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQL Databases&lt;/li&gt;
&lt;li&gt;NoSQL Databases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I won't dive deep into the differences between them, rather than that I will focus on how you can access these databases from F# code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As in previous entries I'll be using F# scripts which can be executed with the .NET CLI that comes in the .NET SDK which you can get from here: &lt;a href="https://get.dot.net"&gt;https://get.dot.net&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's review our options for today&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Dzoukr/Dapper.FSharp"&gt;Dapper.FSharp&lt;/a&gt; - Dapper Wrapper (i.e. anything that MSSQL, PostgreSQL, MySQL supports)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pimbrouwers/Donald"&gt;Donald&lt;/a&gt; - ADO.NET wapper (i.e MSSQL, PostgreSQL, SQLite, MySQL, and others)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/AngelMunoz/Mondocks"&gt;Mondocks&lt;/a&gt; - MongoDB DSL for the MongoDB .NET Driver&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will not complicate things and work with simple DB Schemas, and we will be using PostgreSQL since it's a pretty common database used around the world, but please keep in mind these solutions (and others that I will share at the end) work with MSSQL and MySQL as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have docker installed, spin up a postgresql instance&lt;/p&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -d \
 --name my-instance-name \
 -e POSTGRES_PASSWORD=Admin123 \
 -e POSTGRES_USER=admin
 -p 5432:5432 \
 postgres:alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;This will be our little schema, nothing fancy something just to get started with some F# code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="k"&gt;primary&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="k"&gt;primary&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;authorId&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="k"&gt;references&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can create the PostgreSQL database using any DB manager you already know. In case you don't have anything available you can use &lt;a href="https://dbeaver.io/"&gt;dbeaver&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you have your database cretated and have the schema in place let's begin with the cool stuff&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dapperfsharp"&gt;
  &lt;/a&gt;
  Dapper.FSharp
&lt;/h2&gt;

&lt;p&gt;If you like ORMs this is going to be a library for you, given that you can map records to tables so using them is seamless, also Dapper.FSharp adds a couple of F# types to make your life easier.&lt;/p&gt;

&lt;p&gt;Let's check what are our F# records going to be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we just did a 1-1 record translation, more complex schemas may differ from what your application is using you can use DTO's or anonymous records to work with these differences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// From F# 5.0 + you can "require" NuGet packages in F# scripts&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Npgsql"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Dapper.FSharp"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Npgsql&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FSharp&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;FSharp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PostgreSQL&lt;/span&gt;
&lt;span class="c1"&gt;// register our optional F# types&lt;/span&gt;
&lt;span class="nn"&gt;OptionTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// register our tables&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// we can use this function to match tables&lt;/span&gt;
    &lt;span class="c1"&gt;// with different names to our record definitions&lt;/span&gt;
    &lt;span class="n"&gt;table'&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inSchema&lt;/span&gt; &lt;span class="s2"&gt;"public"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connstring&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;"Host=192.168.100.5;Username=admin;Password=Admin123;Database=simple_fsharp"&lt;/span&gt;
&lt;span class="c1"&gt;/// In normal circunstances you would write&lt;/span&gt;
&lt;span class="c1"&gt;/// `use! conn = new NpgsqlConnection(connString)`&lt;/span&gt;
&lt;span class="c1"&gt;/// but inside F# scripts we're not allowed for top declarations like this,&lt;/span&gt;
&lt;span class="c1"&gt;/// so we use let instead&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NpgsqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Generate two different authors&lt;/span&gt;
&lt;span class="c1"&gt;// one with an optional handle to see how we can deal with null values&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Angel D. Munoz"&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"some@email.com"&lt;/span&gt;
        &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="s2"&gt;"angel_d_munoz"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Misterious Person"&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"mistery@email.com"&lt;/span&gt;
        &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// If you were to use ASP.NET core&lt;/span&gt;
&lt;span class="c1"&gt;// you would be running on a task or async method&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// the `!` here indicates that we will wait&lt;/span&gt;
    &lt;span class="c1"&gt;/// for the `InsertAsync` operation to finish&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="c1"&gt;// here's the Dapper.FSharp magical DSL&lt;/span&gt;
        &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt;
            &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;InsertAsync&lt;/span&gt;

    &lt;span class="c1"&gt;/// If all goes well you shoul'd see&lt;/span&gt;
    &lt;span class="c1"&gt;/// `Rows Affected: 2` in tour console&lt;/span&gt;
    &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Rows Affected: %i{result}"&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// we're inside a script hence why we need run it synchronously&lt;/span&gt;
&lt;span class="c1"&gt;// most of the time you don't need this&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AwaitTask&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunSynchronously&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you get a message like "warning FS3511: This state machine is not statically compilable." don't worry it is being tracked in &lt;a href="https://github.com/dotnet/fsharp/issues/12038"&gt;https://github.com/dotnet/fsharp/issues/12038&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cool! so far we have inserted two authors to our database from our mapping, now let's bring those folks back&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Dapper.FSharp"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Npgsql"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Npgsql&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FSharp&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;FSharp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PostgreSQL&lt;/span&gt;
&lt;span class="c1"&gt;// register our optional F# types&lt;/span&gt;
&lt;span class="nn"&gt;OptionTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;table'&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inSchema&lt;/span&gt; &lt;span class="s2"&gt;"public"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connstring&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;"Host=192.168.100.5;Username=admin;Password=Admin123;Database=simple_fsharp"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NpgsqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;allUsers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="n"&gt;selectAll&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SelectAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"Names: "&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;allUsers&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;%s{user.name}"&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;usersWithTwitterHandle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SelectAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"Twitter Handles:"&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;usersWithTwitterHandle&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="c1"&gt;// we use .Value because filter users whose handle is None&lt;/span&gt;
        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;%s{user.twitter_handle.Value}"&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// we're inside a script hence why we need run it synchronously&lt;/span&gt;
&lt;span class="c1"&gt;// most of the time you don't need this&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AwaitTask&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunSynchronously&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;you should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Names:
  Angel D. Munoz
  Misterious Person
Twitter Handles:
  angel_d_munoz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's check the update code, which to be honest is pretty similar, what do we update though? Our Mysterious user doesn't have a twitter handle, so let's add one&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Dapper.FSharp"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Npgsql"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Npgsql&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FSharp&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;FSharp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PostgreSQL&lt;/span&gt;
&lt;span class="c1"&gt;// register our optional F# types&lt;/span&gt;
&lt;span class="nn"&gt;OptionTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// register our tables&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;table'&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inSchema&lt;/span&gt; &lt;span class="s2"&gt;"public"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connstring&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;"Host=192.168.100.5;Username=admin;Password=Admin123;Database=simple_fsharp"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NpgsqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;noHandleUsers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SelectAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// let's try to get the first result from the result set&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;noHandleUsers&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tryHead&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="c1"&gt;// if there is one, let's update it&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="c1"&gt;// partially update the record of the user with&lt;/span&gt;
            &lt;span class="c1"&gt;// the F# record update syntax&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="s2"&gt;"mysterious_fsharper"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                    &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
                    &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;UpdateAsync&lt;/span&gt;

        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Users updated: %i{result}"&lt;/span&gt;
    &lt;span class="c1"&gt;// if we have run this script, our result set will be empty&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"No Users Without handle were Found"&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// we're inside a script hence why we need run it synchronously&lt;/span&gt;
&lt;span class="c1"&gt;// most of the time you don't need this&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AwaitTask&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunSynchronously&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;After the script is run, we should see&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Users updated: 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And if we run it for a second time we'll see&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No Users Without handle were Found&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And if we run the "select" script we'll should see the &lt;code&gt;mysterious_fsharper&lt;/code&gt; handle&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Twitter Handles:
  angel_d_munoz
  mysterious_fsharper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, things have been quite straight forward, but what if you don't like the ORM style? If you like to write SQL like a real programmer (&lt;em&gt;&lt;strong&gt;Which of course, it's sarcasm&lt;/strong&gt;&lt;/em&gt;.) or you simply like to write your SQL queries, let's then take a look at &lt;a href="https://github.com/pimbrouwers/Donald"&gt;Donald&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#donald"&gt;
  &lt;/a&gt;
  Donald
&lt;/h2&gt;

&lt;p&gt;Donald can help us to have a 1-1 mapping with our models just like &lt;a href="https://github.com/Dzoukr/Dapper.FSharp"&gt;Dapper.FSharp&lt;/a&gt; but it needs help from our side, it is quite flexible in some aspects and tedious in others let's see how can we add these helpers.&lt;/p&gt;

&lt;p&gt;For the Donald scripts we will modify our &lt;code&gt;Author&lt;/code&gt; and &lt;code&gt;Post&lt;/code&gt; records a little bit, we will add a static function called &lt;code&gt;DataReader&lt;/code&gt; which will take an &lt;code&gt;IDataReader&lt;/code&gt; and return the corresponding record&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Donald"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Data&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Donald&lt;/span&gt;

&lt;span class="c1"&gt;// Same Author model from before&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Add the DataReader&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="nc"&gt;DataReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IDataReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="c1"&gt;// the reader has some functions that help us map&lt;/span&gt;
        &lt;span class="c1"&gt;// existing columns from the database and their&lt;/span&gt;
        &lt;span class="c1"&gt;// data type to our record, this can be really great&lt;/span&gt;
        &lt;span class="c1"&gt;// when you need to work on a schema you don't own&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;
          &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt;
          &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"email"&lt;/span&gt;
          &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadStringOption&lt;/span&gt; &lt;span class="s2"&gt;"twitter_handle"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// We do the same with the Post record&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="nc"&gt;DataReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IDataReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;
          &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"title"&lt;/span&gt;
          &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"content"&lt;/span&gt;
          &lt;span class="n"&gt;authorId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"authorId"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are more patterns you can follow rather than attaching the static function directly to the Record, you could have a &lt;code&gt;module Author = ...&lt;/code&gt; which contains helper functions (like the data reader) but for simplicity we will attach it right there in the record.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/pimbrouwers/Donald"&gt;Donald&lt;/a&gt; offers two syntax styles when it comes to creating and manipulating queries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fluent Style&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The fluent style is an approach based on piping functions (i.e. using &lt;code&gt;|&amp;gt;&lt;/code&gt;), this is similar to other fluent APIs in other languages like &lt;code&gt;db.newCommand(cmd).setParams(params).execute()&lt;/code&gt; these are common in C#, in the case of F# we do something like that but using individual functions and partial application in some cases&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorsFluent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
      &lt;span class="n"&gt;conn&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newCommand&lt;/span&gt; &lt;span class="s2"&gt;"SELECT * FROM authors WHERE twitter_handle &amp;lt;&amp;gt; @handle"&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setParams&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"handle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Null&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="nn"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DataReader&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Expression Style&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Expression style, uses what in F# we call &lt;code&gt;Computation Expressions&lt;/code&gt; which you already used with &lt;a href="https://github.com/Dzoukr/Dapper.FSharp"&gt;Dapper.FSharp&lt;/a&gt;! Here's the same previous query with the expression style&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorsExpression&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
      &lt;span class="n"&gt;dbCommand&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;cmdText&lt;/span&gt; &lt;span class="s2"&gt;"SELECT * FROM authors WHERE twitter_handle &amp;lt;&amp;gt; @handle"&lt;/span&gt;
          &lt;span class="n"&gt;cmdParam&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"handle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Null&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="nn"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DataReader&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They are slightly different and depending on your background one might feel more comfortable than the other Feel free to choose the one you like the best, in my case I will continue the rest of the post with the Expression based one given that we already have some expression based code from &lt;a href="https://github.com/Dzoukr/Dapper.FSharp"&gt;Dapper.FSharp&lt;/a&gt;. Previously we added some authors, let's try to add Posts to those authors with &lt;a href="https://github.com/pimbrouwers/Donald"&gt;Donald&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Npgsql"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Donald"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Npgsql&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Donald&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Data&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="nc"&gt;DataReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IDataReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;
          &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt;
          &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"email"&lt;/span&gt;
          &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadStringOption&lt;/span&gt; &lt;span class="s2"&gt;"twitter_handle"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="nc"&gt;DataReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IDataReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;
          &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"title"&lt;/span&gt;
          &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"content"&lt;/span&gt;
          &lt;span class="n"&gt;authorId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"authorId"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connstring&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;"Host=192.168.100.5;Username=admin;Password=Admin123;Database=simple_fsharp"&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NpgsqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorsResult&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// let's query all of the authors&lt;/span&gt;
    &lt;span class="n"&gt;dbCommand&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;cmdText&lt;/span&gt; &lt;span class="s2"&gt;"SELECT * FROM authors"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="nn"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DataReader&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// authorsResult is a DbResult&amp;lt;Author list&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// that is a helper type&lt;/span&gt;
    &lt;span class="c1"&gt;// which help us successful and failed database operations&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;authorsResult&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="c1"&gt;// if the operation was successful return the authors&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;
    &lt;span class="c1"&gt;// otherwise print to the console what failed&lt;/span&gt;
    &lt;span class="c1"&gt;// and return an empty list&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"%O"&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
        &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;insertCommand&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="s2"&gt;"""INSERT INTO posts(id, title, content, authorId)
     VALUES(@id, @title, @content, @authorId)"""&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;postId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;dbCommand&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;cmdText&lt;/span&gt; &lt;span class="n"&gt;insertCommand&lt;/span&gt;

            &lt;span class="n"&gt;cmdParam&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;postId&lt;/span&gt;
                       &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"RandomPost: {postId}"&lt;/span&gt;
                       &lt;span class="s2"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="s2"&gt;"This is an extremely Long Post!..."&lt;/span&gt;
                       &lt;span class="s2"&gt;"authorId"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;

    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Inserted post with id: {postId}"&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Failed to insert post with id: {postId}... {err}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point we should have one post for each user in our database you can run it a couple times more to insert other posts if you wish, but I think these scripts show how you can do Database operations with these libraries&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-libraries"&gt;
  &lt;/a&gt;
  Other Libraries
&lt;/h2&gt;

&lt;p&gt;The F# ecosystem has several options that can appeal to developers of all kinds here are a few more that are worth looking at if you're looking for more alternatives&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RepoDB - &lt;a href="https://github.com/mikependon/RepoDB"&gt;https://github.com/mikependon/RepoDB&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RepoDB is a .NET micro ORM Database library that focuses on performance and has compatibility with many adapters&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dusty Tables - &lt;a href="https://github.com/Zaid-Ajaj/DustyTables"&gt;https://github.com/Zaid-Ajaj/DustyTables&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zaid is an F# OSS Beast, Dusty tables is a simple functional wrapper on top of the SqlClient ADO.NET adapter&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Npgsql.FSharp - &lt;a href="https://github.com/Zaid-Ajaj/Npgsql.FSharp"&gt;https://github.com/Zaid-Ajaj/Npgsql.FSharp&lt;/a&gt; , &lt;a href="https://github.com/Zaid-Ajaj/Npgsql.FSharp.Analyzer"&gt;https://github.com/Zaid-Ajaj/Npgsql.FSharp.Analyzer&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zaid once again showing us the F# OSS spirit, this time with Npgsql.FSharp which is a PostgreSQL focused wrapper which has a SQL analyzer that can type verify your queries against your database at compile time!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQLHydra - &lt;a href="https://github.com/JordanMarr/SqlHydra"&gt;https://github.com/JordanMarr/SqlHydra&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SQLHydra provides a CLI experience for record generation from an existing database Schema plus a SQL query builder similar to Dapper.FSharp, this is a more complete solution that works for Postgres, MSSQL and SQLite.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-elephant-in-the-room"&gt;
  &lt;/a&gt;
  The elephant in the Room...
&lt;/h3&gt;

&lt;p&gt;EntityFramework has always been unfriendly to F# given how it relies on inheritance and mutability which isn't bad, it is the most used ORM in C# after all but it provides some heavy friction with F#, recently C# added records to the language and even if they are not like F# ones, they can be immutable just like F# ones, so with these Records it might be on a better place but I haven't been able to try it nor have the excitement to test it to be honest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-mondocks"&gt;
  &lt;/a&gt;
  Bonus! Mondocks
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Time for some shameless plug (with some shame)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I know, I Know... .NET is not the most friendly towards mongodb databases given how schemaless it is, and with F# it is even worse! there's a lot of cases where you can have missing properties (which is the same as having a null or even worse some times) but if you control the Database or for some reason you need to interact with Mongo Databases (perhaps because you're migrating from Node.js or similar) I took some time to work out on a DSL that is quite similar to Node's MongoDB query language.&lt;/p&gt;

&lt;p&gt;The approach with Mondocks is somewhat different, with Mondocks ideally you want to work with anonymous records to shape your data and then once you have the information do the mapping to the corresponding Record or DTO&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Mondocks.Net"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: MongoDB.Driver"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;MongoDB&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;MongoDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Driver&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Mondocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Queries&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Mondocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Types&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;insertCmd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;documents&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
                      &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Angel D. Munoz"&lt;/span&gt;
                      &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"some@email.com"&lt;/span&gt;
                      &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="s2"&gt;"angel_d_munoz"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
                      &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Misterious Person"&lt;/span&gt;
                      &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"mistery@email.com"&lt;/span&gt;
                      &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mongodb://192.168.100.5/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"simple_fsharp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunCommand&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;InsertResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;JsonCommand&lt;/span&gt; &lt;span class="n"&gt;insertCmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Inserted: %i{result.n}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;To do an update it's a similar case, we will fetch the author first then we will update it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Mondocks.Net"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: MongoDB.Driver"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;MongoDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Bson&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;MongoDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Driver&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Mondocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Queries&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Mondocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Types&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mongodb://192.168.100.5/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"simple_fsharp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;findCmd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;{|&lt;/span&gt; &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="o"&gt;|}&lt;/span&gt;
        &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunCommand&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FindResult&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;JsonCommand&lt;/span&gt; &lt;span class="n"&gt;findCmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// check on the database result set if we have an author&lt;/span&gt;
&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstBatch&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tryHead&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;updateCmd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// query by author _id&lt;/span&gt;
            &lt;span class="n"&gt;updates&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{|&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;._&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;|}&lt;/span&gt;
                        &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
                          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
                              &lt;span class="c1"&gt;// set the updated handle&lt;/span&gt;
                              &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"mysterious_fsharper"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="n"&gt;multi&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt;
                        &lt;span class="n"&gt;upsert&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt;
                        &lt;span class="n"&gt;collation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
                        &lt;span class="n"&gt;arrayFilters&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
                        &lt;span class="n"&gt;hint&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunCommand&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UpdateResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;JsonCommand&lt;/span&gt; &lt;span class="n"&gt;updateCmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Updated: %i{result.n}"&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"No Author was found"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will also see that you lost a lot of safety doing these kinds of queries, given the nature of MongoDB it's hard to keep safety around it overall, however if you come from a dynamic runtime this DSL might feel a little bit more to what you're used to, there are some rough corners but I invite you to try it and log issues, if you're looking for an F# OSS project to dip your toes, it might be a great one :)&lt;/p&gt;

&lt;p&gt;Also, you can use the usual MongoDB Driver as well you can use both side by side to be honest I made it in a way that doesn't require you to jump out from a standard .NET Driver experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts...
&lt;/h2&gt;

&lt;p&gt;When it comes to SQL F# is a safe bet be it on the server, scripts and other environments F# can help you keep type safety between your database and your application, there are plenty of alternatives for you to try and I'm pretty sure you'll find what fits best for you.&lt;/p&gt;

&lt;p&gt;We'll catch ourselves on the next time!&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>sql</category>
      <category>mongodb</category>
      <category>dotnet</category>
    </item>
  </channel>
</rss>
