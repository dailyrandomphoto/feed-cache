<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Build a video call app with Svelte in an afternoon</title>
      <author>Jess Mitchell</author>
      <pubDate>Thu, 06 Jan 2022 13:34:49 +0000</pubDate>
      <link>https://dev.to/trydaily/build-a-video-call-app-with-svelte-in-an-afternoon-4h7b</link>
      <guid>https://dev.to/trydaily/build-a-video-call-app-with-svelte-in-an-afternoon-4h7b</guid>
      <description>&lt;p&gt;Daily's JavaScript library, &lt;a href="https://github.com/daily-co/daily-js"&gt;&lt;code&gt;daily-js&lt;/code&gt;&lt;/a&gt;, is compatible with any frontend framework, which means choosing your stack is really up to you. Today we'll be looking at one of our favourite frameworks at Daily...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/MZGH2MEUcfjVvIm2oR/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/MZGH2MEUcfjVvIm2oR/giphy.gif" alt="drumroll" width="480" height="480"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;! üéâ&lt;/p&gt;

&lt;p&gt;In today‚Äôs tutorial, we‚Äôll rebuild our Daily Prebuilt demo, already built in &lt;a href="https://github.com/daily-demos/prebuilt-ui"&gt;React&lt;/a&gt; and &lt;a href="https://github.com/daily-demos/vue-daily-prebuilt"&gt;Vue&lt;/a&gt;, but this time with Svelte! ‚ú®&lt;/p&gt;

&lt;p&gt;Specifically, we‚Äôll cover how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Embed &lt;a href="https://daily.co/prebuilt"&gt;Daily Prebuilt&lt;/a&gt; in a Svelte app&lt;/li&gt;
&lt;li&gt;Handle updating your components based on whether you‚Äôve joined a Daily call or not&lt;/li&gt;
&lt;li&gt;Manage your Daily Prebuilt call with a custom control panel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to test the completed version of the demo first, check out the &lt;a href="https://svelte-daily-prebuilt.netlify.app/"&gt;deployed version&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-exactly-is-svelte"&gt;
  &lt;/a&gt;
  What exactly is Svelte?
&lt;/h2&gt;

&lt;p&gt;Svelte is an open-source frontend component framework that can be used as an alternative to other frontend frameworks, like React or Vue. &lt;/p&gt;

&lt;p&gt;It differs from other frameworks based on how it updates your app‚Äôs UI. Instead of using a virtual DOM to handle app changes (like React uses), Svelte is instead a compiler that converts app components to JavaScript and inserts any UI changes directly into the DOM itself. &lt;/p&gt;

&lt;p&gt;Or, as the &lt;a href="https://svelte.dev/blog/svelte-3-rethinking-reactivity"&gt;Svelte docs&lt;/a&gt; put it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúSvelte runs at build time, converting your components into highly efficient imperative code that surgically updates the DOM. As a result, you're able to write ambitious applications with excellent performance characteristics.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#who-is-this-tutorial-for"&gt;
  &lt;/a&gt;
  Who is this tutorial for?
&lt;/h2&gt;

&lt;p&gt;Since this is a Svelte tutorial, the following content will be most helpful for anyone already familiar with Svelte. In case you‚Äôre not, we‚Äôll do our best to explain what is unique to Svelte. &lt;/p&gt;

&lt;p&gt;Thankfully, Svelte also has amazing documentation and &lt;a href="https://svelte.dev/tutorial/basics"&gt;interactive tutorials&lt;/a&gt; to learn the basics, and we highly recommend giving those a read!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;To get started locally, clone the &lt;a href="https://github.com/daily-demos/svelte-daily-prebuilt"&gt;Daily Prebuilt Svelte demo app&lt;/a&gt; and run the following commands in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i
npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will also need to &lt;a href="https://dashboard.daily.co/signup"&gt;create a Daily account&lt;/a&gt; and a &lt;a href="https://dashboard.daily.co/rooms/create"&gt;new Daily room&lt;/a&gt; for testing the demo. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: The &lt;a href="https://github.com/daily-demos/svelte-daily-prebuilt"&gt;demo README&lt;/a&gt; includes additional instructions for creating new Daily rooms locally via the app.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you have the app running locally, navigate to &lt;code&gt;http://localhost:5000&lt;/code&gt; in your browser of choice, and you should see the home page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AXoyQkeF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/size/w1600/2021/12/svelte-home-copy-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AXoyQkeF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/size/w1600/2021/12/svelte-home-copy-1.png" alt="home screen" width="880" height="436"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-appsvelte-endraw-determining-which-view-to-show"&gt;
  &lt;/a&gt;
  &lt;code&gt;App.svelte&lt;/code&gt;: Determining which view to show
&lt;/h2&gt;

&lt;p&gt;Our app is going to have two possible views:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Our home page, which includes a form to join a call&lt;/li&gt;
&lt;li&gt;The call UI, which includes the Daily Prebuilt embed and our custom call controls&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8o8F9A2o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/12/CleanShot-2021-12-16-at-15.32.50%402x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8o8F9A2o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/12/CleanShot-2021-12-16-at-15.32.50%402x.png" alt="2 possible views: call UI and home screen" width="880" height="933"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We know we'll need some logic to determine which view should show. To determine this, let‚Äôs take a look at our parent &lt;a href="https://github.com/daily-demos/svelte-daily-prebuilt/blob/main/src/App.svelte"&gt;&lt;code&gt;App&lt;/code&gt;&lt;/a&gt; component. &lt;code&gt;App&lt;/code&gt; will handle deciding whether the &lt;code&gt;Home&lt;/code&gt; or &lt;code&gt;Call&lt;/code&gt; component is rendered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.svelte&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Call&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./screens/Call.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Header.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./screens/Home.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentScreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//  || 'call'&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleJoinCall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;currentScreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;call&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="c1"&gt;// set component vars with form submission values&lt;/span&gt;
   &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="c1"&gt;// save in local storage&lt;/span&gt;
   &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte-prebuilt-url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte-prebuilt-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleLeaveCall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;currentScreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svelte&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;crossorigin&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://unpkg.com/@daily-co/daily-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svelte:head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;wrapper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;currentScreen&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleJoinCall&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;{:&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Call&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nl"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleLeaveCall&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sr"&gt;/if&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs step through this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the script tag, we start by importing the components we‚Äôll be using (&lt;code&gt;Call&lt;/code&gt;, &lt;code&gt;Home&lt;/code&gt;, and &lt;code&gt;Header&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Then, we declare variables that will be used in this component but are assigned later on.&lt;/li&gt;
&lt;li&gt;Next, we define &lt;code&gt;handleJoinCall&lt;/code&gt;, which we'll describe in more detail below. In short, it sets our &lt;code&gt;currentScreen&lt;/code&gt; variable to &lt;code&gt;call&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We then define &lt;code&gt;handleLeaveCall&lt;/code&gt;, which simply resets &lt;code&gt;currentScreen&lt;/code&gt; to &lt;code&gt;home&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Lastly, we import our &lt;code&gt;daily-js&lt;/code&gt; script tag to make the &lt;code&gt;daily-js&lt;/code&gt; library available to the rest of the app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let‚Äôs specifically look at the markdown in &lt;code&gt;App&lt;/code&gt; to see how we render our components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.svelte&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;wrapper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;currentScreen&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleJoinCall&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;{:&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Call&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nl"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleLeaveCall&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sr"&gt;/if&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Svelte, you can conditionally render components based on your JavaScript values using an &lt;a href="https://svelte.dev/tutorial/else-if-blocks"&gt;&lt;code&gt;if&lt;/code&gt; statement&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;We know we always want to render our &lt;code&gt;Header&lt;/code&gt;, but we only want to render the &lt;code&gt;Call&lt;/code&gt; component if the user is trying to join a call, i.e. the &lt;code&gt;currentScreen&lt;/code&gt; equals &lt;code&gt;call&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This is where we can use Svelte‚Äôs &lt;code&gt;if&lt;/code&gt; syntax:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;{#if currentScreen === "home"}&lt;/code&gt; to render the &lt;code&gt;Home&lt;/code&gt; screen&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;{:else}&lt;/code&gt; we can show the &lt;code&gt;Call&lt;/code&gt; component.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And don‚Äôt forget to close your &lt;code&gt;if&lt;/code&gt; block with &lt;code&gt;{/if}&lt;/code&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#listening-for-custom-events"&gt;
  &lt;/a&gt;
  Listening for custom events
&lt;/h3&gt;

&lt;p&gt;Another handy feature of Svelte is being able to dispatch &lt;a href="https://svelte.dev/tutorial/event-forwarding"&gt;custom events&lt;/a&gt; that can be forwarded to other components. &lt;/p&gt;

&lt;p&gt;Since the &lt;code&gt;Home&lt;/code&gt; component has a form to join calls, we want to call &lt;code&gt;handleJoinCall&lt;/code&gt; (defined in &lt;code&gt;App&lt;/code&gt;) when the form‚Äôs &lt;code&gt;submit&lt;/code&gt; event is dispatched. &lt;/p&gt;

&lt;p&gt;Similarly, when you‚Äôre in a call and go to leave the call, we want to listen for the custom &lt;code&gt;left&lt;/code&gt; event we'll define in &lt;code&gt;Call&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We handle both situations by adding a custom listener on each component, like so:&lt;br&gt;
&lt;code&gt;&amp;lt;Call on:left={handleLeaveCall} /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice how it says &lt;code&gt;on:left&lt;/code&gt;? This will listen for any &lt;code&gt;left&lt;/code&gt; events dispatched. To listen to other custom events you've defined, you can just update the event name, such as &lt;code&gt;on:fancy-event-name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One other thing to note is being able to pass variables to child components. In Svelte, we can pass the &lt;code&gt;userName&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; values as &lt;a href="https://svelte.dev/tutorial/declaring-props"&gt;props&lt;/a&gt; to the &lt;code&gt;Call&lt;/code&gt; component like so:&lt;br&gt;
 &lt;code&gt;&amp;lt;Call {userName} {url} /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Since the prop name and variable being passed use the same name, we can use the shorthand notation. That is to say, &lt;code&gt;{url}&lt;/code&gt; is shorthand for &lt;code&gt;url={url}&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These properties can then be made available in &lt;code&gt;Call&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Call.svelte&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#honey-im-raw-homesvelte-endraw-"&gt;
  &lt;/a&gt;
  Honey, I‚Äôm &lt;code&gt;Home.svelte&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x8sO0Ucr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/size/w1600/2021/12/svelte-home-copy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x8sO0Ucr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/size/w1600/2021/12/svelte-home-copy.png" alt="Home screen again" width="880" height="436"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;By default, &lt;code&gt;App&lt;/code&gt; will render the &lt;code&gt;Home&lt;/code&gt; component first. &lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;Home&lt;/code&gt; component contains the main content for our app‚Äôs home screen. The code for it is a bit longer than &lt;code&gt;App&lt;/code&gt; so we‚Äôll look at the most important sections.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Home.svelte&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createEventDispatcher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEventDispatcher&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the top of our component, we import Svelte‚Äôs &lt;a href="https://svelte.dev/tutorial/component-events"&gt;&lt;code&gt;createEventDispatcher&lt;/code&gt; method&lt;/a&gt; and assign it to the variable &lt;code&gt;dispatch&lt;/code&gt;. This method is what we‚Äôll use for dispatching our custom events discussed above. &lt;/p&gt;

&lt;p&gt;Now let‚Äôs jump to our HTML and focus on the &lt;code&gt;form&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Home.svelte&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;home-screen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Daily&lt;/span&gt; &lt;span class="nx"&gt;Prebuilt&lt;/span&gt; &lt;span class="nx"&gt;Svelte&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Start&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;unique&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;paste&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;own&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
‚Ä¶&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;goToCall&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt; &lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Daily&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
     &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
     &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
     &lt;span class="nx"&gt;required&lt;/span&gt;
     &lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://your-domain.daily.co/room-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Join call&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have a native HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element with the &lt;code&gt;submit&lt;/code&gt; handler using &lt;code&gt;goToCall&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;form on:submit={goToCall}&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: This is not a custom event since forms have a native &lt;code&gt;submit&lt;/code&gt; event.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The form has two inputs for a username and Daily room URL. To make each of these input values available in our component‚Äôs JavaScript, we can bind each value to a variable declared at the top of the component.&lt;/p&gt;

&lt;p&gt;For example, the username input value will be bound to the variable &lt;code&gt;name&lt;/code&gt;, which is declared at the top of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Home.svelte&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;goToCall&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt; &lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means when the form‚Äôs submit event occurs and the &lt;code&gt;goToCall&lt;/code&gt; method is called, we can use the input values via our bound variables (e.g &lt;code&gt;name&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;This also makes the input values available to forward to the &lt;code&gt;App&lt;/code&gt; component via the &lt;code&gt;dispatch&lt;/code&gt; method we defined before like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Home.svelte&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;goToCall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

   &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;goToCall&lt;/code&gt;, we first prevent the form from refreshing the page with &lt;code&gt;e.preventDefault()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we use our &lt;code&gt;dispatch&lt;/code&gt; method to &lt;a href="https://svelte.dev/tutorial/event-forwarding"&gt;forward&lt;/a&gt; the &lt;code&gt;submit&lt;/code&gt; event to our &lt;code&gt;App&lt;/code&gt; component. Both &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; (our variables bound to the inputs) are passed as options to make those values available to &lt;code&gt;App&lt;/code&gt;, as well. &lt;/p&gt;

&lt;p&gt;If you recall from &lt;code&gt;App&lt;/code&gt;, the &lt;code&gt;Home&lt;/code&gt; component has an event listener on it for &lt;code&gt;submit&lt;/code&gt;, which calls the &lt;code&gt;handleJoinCall&lt;/code&gt; method. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;Home on:submit={handleJoinCall} /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When our dispatched &lt;code&gt;submit&lt;/code&gt; event registers in &lt;code&gt;App&lt;/code&gt;, it will call &lt;code&gt;handleJoinCall&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.svelte&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleJoinCall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;currentScreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;call&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="c1"&gt;// set component vars with form submission values&lt;/span&gt;
   &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="c1"&gt;// save in local storage&lt;/span&gt;
   &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte-prebuilt-url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte-prebuilt-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;handleJoinCall&lt;/code&gt; we update &lt;code&gt;currentScreen&lt;/code&gt; to equal &lt;code&gt;call&lt;/code&gt;. This will cause the &lt;code&gt;Call&lt;/code&gt; component to show instead of &lt;code&gt;Home&lt;/code&gt;. We then set our &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;userName&lt;/code&gt; variables to the values passed from the form and save them in local storage, as well. &lt;/p&gt;

&lt;p&gt;Now that all the &lt;code&gt;Home&lt;/code&gt; form's information is shared with &lt;code&gt;App&lt;/code&gt; ‚Äî who also shares it with &lt;code&gt;Call&lt;/code&gt; ‚Äî we can move on to setting up our call UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#call-on-line-1-please"&gt;
  &lt;/a&gt;
  Call on line 1, please
&lt;/h2&gt;

&lt;p&gt;So far we‚Äôve set up our &lt;code&gt;App&lt;/code&gt; component and our &lt;code&gt;Home&lt;/code&gt; screen. Now let‚Äôs build our Daily call in &lt;a href="https://github.com/daily-demos/svelte-daily-prebuilt/blob/main/src/screens/Call.svelte"&gt;&lt;code&gt;Call.svelte&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YiEoEyqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/size/w1600/2021/12/svelte-call-copy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YiEoEyqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/size/w1600/2021/12/svelte-call-copy.png" alt="Diagram of how the Call component is split up" width="880" height="535"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs start with the &lt;code&gt;Call&lt;/code&gt; component's HTML markdown this time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Call.svelte&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
 &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meetingState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;joined-meeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;call-screen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;call-screen prejoin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Controls&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meetingState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nl"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleCamera&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nl"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;mic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleMic&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nl"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;share&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleScreenShare&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nl"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;fullscreen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;goFullscreen&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nl"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;local&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleLocalVideo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nl"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleRemoteVideo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a container &lt;code&gt;div&lt;/code&gt; with two children:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Another &lt;code&gt;div&lt;/code&gt;, which is where we‚Äôll embed Daily Prebuilt&lt;/li&gt;
&lt;li&gt;Our &lt;code&gt;Controls&lt;/code&gt; component, which receives the room &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;meetingState&lt;/code&gt;, and call &lt;code&gt;stats&lt;/code&gt; as props. It also has a list of custom event listeners added for each of the control‚Äôs buttons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs focus on the Daily call to start.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#embedding-daily-prebuilt-in-your-svelte-app"&gt;
  &lt;/a&gt;
  Embedding Daily Prebuilt in your Svelte app
&lt;/h3&gt;

&lt;p&gt;Svelte has a handy &lt;a href="https://svelte.dev/tutorial/onmount"&gt;&lt;code&gt;onMount&lt;/code&gt; lifecycle method&lt;/a&gt; that gets called when the component is first rendered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Call.svelte&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// assume if the Call component is showing, we should join&lt;/span&gt;
   &lt;span class="nx"&gt;initializeDaily&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We know the &lt;code&gt;Call&lt;/code&gt; component mounts when the form is submitted, so we want to initialize the call as soon as &lt;code&gt;Call&lt;/code&gt; renders. We can do this by calling &lt;code&gt;initializeDaily&lt;/code&gt; on mount.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Call.svelte&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initializeDaily&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="err"&gt;‚Ä¶&lt;/span&gt;
   &lt;span class="c1"&gt;// select container element to embed Daily iframe in&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="c1"&gt;// create Daily iframe&lt;/span&gt;
   &lt;span class="nx"&gt;callFrame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DailyIframe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;iframeStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IFRAME_OPTIONS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;showLeaveButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;

   &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;joining-meeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateMeetingState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;joined-meeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateMeetingState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left-meeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleLeftMeeting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateMeetingState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="c1"&gt;// set up interval for retrieving current network stats&lt;/span&gt;
   &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;getNetworkStats&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="c1"&gt;// let the local user join the call, which will cause&lt;/span&gt;
   &lt;span class="c1"&gt;// the call to be displayed in our app UI&lt;/span&gt;
   &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Stepping through this &lt;code&gt;initializeDaily&lt;/code&gt; function: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We first select our &lt;code&gt;div&lt;/code&gt; element that will be the Daily Prebuilt iframe‚Äôs container: &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;const container = document.getElementById("container");&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Next we create our Daily Prebuilt iframe with the &lt;a href="https://docs.daily.co/reference/daily-js/factory-methods/create-frame"&gt;&lt;code&gt;createFrame&lt;/code&gt; method&lt;/a&gt; via &lt;code&gt;daily-js&lt;/code&gt;, and pass the container &lt;code&gt;div&lt;/code&gt; and some call options to it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;window.DailyIframe.createFrame(container, options)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Recall: &lt;code&gt;window.DailyIframe&lt;/code&gt; exists because we imported the &lt;code&gt;daily-js&lt;/code&gt; script in &lt;code&gt;App&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Next, we add some Daily event listeners so we can update our UI if the local user joins a call, leaves, or there‚Äôs a critical error. We‚Äôll explain this a bit more below.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;e.g. &lt;code&gt;callFrame.on("joined-meeting", updateMeetingState);&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Then we set up an interval to get the call‚Äôs network stats every 5 seconds so we can display it in our &lt;code&gt;Control&lt;/code&gt; panel. (We won‚Äôt go into more detail about this, but &lt;a href="https://www.daily.co/contact/support"&gt;ask us if you need help&lt;/a&gt;!)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;interval = setInterval(() =&amp;gt; getNetworkStats(), 5000);&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;And, finally, we use Daily‚Äôs &lt;a href="https://docs.daily.co/reference/daily-js/instance-methods/join"&gt;&lt;code&gt;join&lt;/code&gt; method&lt;/a&gt; to actually join the call. üéâ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;await callFrame.join();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r6fm0i5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/12/CleanShot-2021-12-30-at-11.14.50.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r6fm0i5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/12/CleanShot-2021-12-30-at-11.14.50.gif" alt="Transitioning from the home screen to video call" width="800" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-our-custom-control-panel"&gt;
  &lt;/a&gt;
  Adding our custom control panel
&lt;/h2&gt;

&lt;p&gt;As Bruce Springsteen once said, ‚ÄúHoney, I want the heart, I want the soul, I want control right now,‚Äù so let‚Äôs do just that and add a little more control to our app.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;daily-js&lt;/code&gt; provides instance methods to programmatically do anything you can already do via Daily Prebuilt's UI. This gives a bit more flexibility to how you want to set up your own app‚Äôs UI.&lt;/p&gt;

&lt;p&gt;For example, if you want to add a big ‚ÄúMute‚Äù button to your UI, you can! Let‚Äôs take a look at how.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-a-mute-button-to-toggle-local-audio"&gt;
  &lt;/a&gt;
  Adding a Mute button to toggle local audio
&lt;/h3&gt;

&lt;p&gt;As mentioned, our &lt;code&gt;Call&lt;/code&gt; component has a bunch of custom event listeners added to &lt;a href="https://github.com/daily-demos/svelte-daily-prebuilt/blob/main/src/components/Controls.svelte"&gt;&lt;code&gt;Controls&lt;/code&gt;&lt;/a&gt;. This means all the actual Daily logic can stay contained in our &lt;code&gt;Call&lt;/code&gt; component. The &lt;code&gt;Controls&lt;/code&gt; component is basically just UI to dispatch the custom events.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Call.svelte&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Controls&lt;/span&gt;
   &lt;span class="err"&gt;‚Ä¶&lt;/span&gt;
   &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;mic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleMic&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;Controls&lt;/code&gt;, we have a button to mute the local user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Controls.svelte&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleToggleMicClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="nx"&gt;mic&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/images/mic.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Microphone&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On click, this button calls &lt;code&gt;handleToggleMicClick&lt;/code&gt;. That method will then dispatch our &lt;code&gt;toggle-mic&lt;/code&gt; custom event:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const handleToggleMicClick = () =&amp;gt;  dispatch("toggle-mic");&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Looping back to &lt;code&gt;Call&lt;/code&gt;, the &lt;code&gt;toggle-mic&lt;/code&gt; custom event that is forwarded calls &lt;code&gt;toggleMic&lt;/code&gt; (&lt;code&gt;on:toggle-mic={toggleMic}&lt;/code&gt;), a method defined in &lt;code&gt;Call&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;toggleMic&lt;/code&gt; method is what contains our &lt;code&gt;daily-js&lt;/code&gt; interaction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Call.svelte &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleMic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;logError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;noCallFrameError&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;localVideo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localAudio&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalAudio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;localVideo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If there is no Daily &lt;code&gt;callFrame&lt;/code&gt; ‚Äì defined in &lt;code&gt;initializeDaily&lt;/code&gt; ‚Äì we do nothing. This shouldn‚Äôt ever happen but, you know, bugs. üêõ&lt;/p&gt;

&lt;p&gt;Next, we get our current local audio state (muted or unmuted) via the &lt;a href="https://docs.daily.co/reference/daily-js/instance-methods/local-audio"&gt;&lt;code&gt;localAudio&lt;/code&gt; Daily method&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const localVideo = callFrame.localAudio();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Whatever the current value is, we want to make it the opposite. To do this, we can use the &lt;a href="https://docs.daily.co/reference/daily-js/instance-methods/set-local-audio"&gt;&lt;code&gt;setLocalAudio&lt;/code&gt; instance method&lt;/a&gt; and set our local audio to the inverse boolean value. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;callFrame.setLocalAudio(!localVideo);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once that‚Äôs called, your unmuted audio will mute, or vice versa! üí™&lt;/p&gt;

&lt;p&gt;We won‚Äôt cover all the buttons in the control panel since they all follow a similar pattern, but if you need help, &lt;a href="https://www.daily.co/contact/support"&gt;please let us know&lt;/a&gt;! ü§ó&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oXknzieW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/12/CleanShot-2021-12-30-at-11.20.49.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oXknzieW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/12/CleanShot-2021-12-30-at-11.20.49.gif" alt="Muting yourself with a custom Mute button" width="800" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appetite-for-call-destruction"&gt;
  &lt;/a&gt;
  Appetite for (call) destruction
&lt;/h2&gt;

&lt;p&gt;To understand how the Daily event listeners work a bit more, let‚Äôs use the &lt;a href="https://docs.daily.co/reference/daily-js/events/meeting-events#left-meeting"&gt;&lt;code&gt;left-meeting&lt;/code&gt; event&lt;/a&gt; as an example. &lt;/p&gt;

&lt;p&gt;In &lt;code&gt;Call&lt;/code&gt;, we added an event listener for &lt;code&gt;left-meeting&lt;/code&gt;, which calls a callback method (&lt;code&gt;handleLeftMeeting&lt;/code&gt;) when triggered:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Call.svelte&lt;/span&gt;

&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left-meeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleLeftMeeting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// in initializeDaily()&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleLeftMeeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;updateMeetingState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The callback, &lt;code&gt;handleLeftMeeting&lt;/code&gt;, gets called when the local user clicks the &lt;code&gt;Leave&lt;/code&gt; button via Daily Prebuilt‚Äôs UI. It then dispatches a custom event (&lt;code&gt;left&lt;/code&gt;) that &lt;code&gt;App&lt;/code&gt; is listening for. &lt;/p&gt;

&lt;p&gt;It does a couple other clean up tasks as well, but we won't worry about that for now. Essentially, it resets our app‚Äôs state.&lt;/p&gt;

&lt;p&gt;If you recall, &lt;code&gt;App&lt;/code&gt; has a listener on the &lt;code&gt;Call&lt;/code&gt; component for a custom &lt;code&gt;left&lt;/code&gt; event:&lt;br&gt;
&lt;code&gt;&amp;lt;Call {userName} {url} on:left={handleLeaveCall} /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;handleLeaveCall&lt;/code&gt; gets called, which resets our &lt;code&gt;currentScreen&lt;/code&gt; value to &lt;code&gt;home&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const handleLeaveCall = () =&amp;gt; currentScreen = "home";&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once &lt;code&gt;currentScreen&lt;/code&gt; gets reset to &lt;code&gt;home&lt;/code&gt;, &lt;code&gt;App&lt;/code&gt; will render the &lt;code&gt;Home&lt;/code&gt; component instead of &lt;code&gt;Call&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qf54yDTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/12/CleanShot-2021-12-30-at-11.24.41.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qf54yDTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/12/CleanShot-2021-12-30-at-11.24.41.gif" alt="Leaving the call and going back to the home screen" width="800" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We‚Äôve come full circle back home! üç©&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/tDJYUdv3osmDs5HlyU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/tDJYUdv3osmDs5HlyU/giphy.gif" alt="full circle" width="500" height="281"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cleaning-up-after-the-party"&gt;
  &lt;/a&gt;
  Cleaning up after the party
&lt;/h3&gt;

&lt;p&gt;Now that we have reset our state to get back to the home screen, we still have a little leftover clean up to do.&lt;/p&gt;

&lt;p&gt;If you recall, we added some Daily event listeners to our &lt;code&gt;callFrame&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;As a final step, we can turn off those event listeners and destroy our Daily &lt;code&gt;callFrame&lt;/code&gt;. It will be recreated when the next call is joined so we don't need it hanging around after leaving this call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Call.svelte&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onDestroy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// remove event listeners&lt;/span&gt;
      &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;joining-meeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateMeetingState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;joined-meeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateMeetingState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left-meeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleLeftMeeting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleError&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;// destroy Daily callframe after call ends&lt;/span&gt;
      &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Svelte provides an &lt;code&gt;onDestroy&lt;/code&gt; &lt;a href="https://svelte.dev/tutorial/ondestroy"&gt;lifecycle method&lt;/a&gt; that will be triggered when the &lt;code&gt;Call&lt;/code&gt; component is destroyed.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;onDestroy&lt;/code&gt;, we can turn off our Daily event listeners and destroy the &lt;code&gt;callFrame&lt;/code&gt; with Daily's &lt;a href="https://docs.daily.co/reference/daily-js/instance-methods/destroy"&gt;&lt;code&gt;destroy&lt;/code&gt; method&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;We hope this tutorial helps you get started with building your own Daily video apps in Svelte. To learn more about Daily Prebuilt, check out our &lt;a href="https://www.daily.co/blog/tag/daily-prebuilt/"&gt;other Daily Prebuilt blog posts&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you‚Äôd like to build something more custom, keep an eye out on &lt;a href="https://twitter.com/trydaily"&gt;Twitter&lt;/a&gt; for our next Svelte tutorial! üëÄ&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CSS transform : complete guide on CSS transform. Learn CSS with simple examples</title>
      <author>Modern Web</author>
      <pubDate>Thu, 06 Jan 2022 13:31:01 +0000</pubDate>
      <link>https://dev.to/kunaal438/css-transform-complete-guide-on-css-transform-everything-you-need-for-good-developer-841</link>
      <guid>https://dev.to/kunaal438/css-transform-complete-guide-on-css-transform-everything-you-need-for-good-developer-841</guid>
      <description>&lt;p&gt;If you struggle with CSS transform or don‚Äôt know what it is. This article is for you. In this article you‚Äôll not only learn what is CSS transform and how to use it. But you even see its properties and learn how you can make 3d objects. The video is very simple covering the topic for you. And at the end of the video you get 3 designs which are very amazing to make. I bet if you make those 3 design, you‚Äôll not feel you don‚Äôt know about transform anymore.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial
&lt;/h1&gt;

&lt;p&gt;You can watch video tutorial for better understanding with live example.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BEkE9lzpaKw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#who-am-i-"&gt;
  &lt;/a&gt;
  Who am I ?
&lt;/h1&gt;

&lt;p&gt;Before we start, if you don't know me. Well, I am Kunaal from India manage Modern Web YouTube channel. I make content on web development to master your web dev skills, I made tutorials on &lt;a href="https://www.youtube.com/playlist?list=PLqm86YkewF6S45smPYeNv01aFFKWZSgYD"&gt;Fullstack Ecom website&lt;/a&gt;,&lt;a href="https://www.youtube.com/playlist?list=PLqm86YkewF6QS_knm-9-dc4tTKgbQI-zZ"&gt;Personal Portfolios&lt;/a&gt;, &lt;a href="https://www.youtube.com/playlist?list=PLqm86YkewF6RU_k6jymVX7EavJ1w9i4VW"&gt;Fullstack Blogging website&lt;/a&gt;, &lt;a href="https://www.youtube.com/playlist?list=PLqm86YkewF6TEYXEoyVUdDmmIEJ1TzORZ"&gt;Amazing Headers Animations&lt;/a&gt; and much more. If that excites you, you can visit my &lt;a href="https://www.youtube.com/channel/UCoygqHsdILWZFlfI5RMC-dw/"&gt;channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So without wasting more time lets start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tansform"&gt;
  &lt;/a&gt;
  Tansform
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#so-what-is-css-transform-exactly"&gt;
  &lt;/a&gt;
  So what is CSS transform exactly.
&lt;/h3&gt;

&lt;p&gt;Well,CSS transform is used to change shapes, scale the element, rotate it and much more. Let's see some transform properties.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.element&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how we use css transform. Let's see some of it's value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#translate"&gt;
  &lt;/a&gt;
  Translate
&lt;/h3&gt;

&lt;p&gt;The first property of it is translate. Translate value is used to change element's position.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;tr&gt;
&lt;td&gt;translateX(px) &lt;/td&gt;
&lt;td&gt;it is used to place element in X axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;translateY(px) &lt;/td&gt;
&lt;td&gt;it is used to place element in Y axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;translateZ(px) &lt;/td&gt;
&lt;td&gt;it is used to place element in Z axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;translate(x,y) &lt;/td&gt;
&lt;td&gt;This is a short form for translateX and translateY&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;translate3d(x,y,z) &lt;/td&gt;
&lt;td&gt;This is a short form for translateX, translateY and translateZ&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt; 

&lt;h6&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PlbWbs7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkbkgh1fkc2ik20u1cw5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PlbWbs7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkbkgh1fkc2ik20u1cw5.png" alt="Frame 1 (2)" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scale"&gt;
  &lt;/a&gt;
  Scale
&lt;/h3&gt;

&lt;p&gt;Scale is used to scale element in x, y, z axis.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;tr&gt;
&lt;td&gt;scaleX(px) &lt;/td&gt;
&lt;td&gt;it is used to scale element in X axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleY(px) &lt;/td&gt;
&lt;td&gt;it is used to scale element in Y axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleZ(px) &lt;/td&gt;
&lt;td&gt;it is used to scale element in Z axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scale(x,y) &lt;/td&gt;
&lt;td&gt;This is a short form for scaleX and scaleY&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scale3d(x,y,z) &lt;/td&gt;
&lt;td&gt;This is a short form for scaleX, scaleY and scaleZ&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h6&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---D4l7eRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wvny7iwo0b1di1035qa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---D4l7eRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wvny7iwo0b1di1035qa.png" alt="Translate" width="880" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rotate"&gt;
  &lt;/a&gt;
  Rotate
&lt;/h3&gt;

&lt;p&gt;Rotate value is used to rotate element's position.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;tr&gt;
&lt;td&gt;rotate(deg) &lt;/td&gt;
&lt;td&gt;It is used to rotate element in 2d dimension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rotateX(deg) &lt;/td&gt;
&lt;td&gt;it is used to rotate element in X axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rotateY(deg) &lt;/td&gt;
&lt;td&gt;it is used to rotate element in Y axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rotate3d(x,y,z, angle) &lt;/td&gt;
&lt;td&gt;This is used to rotate element in 3d dimesion&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt; 

&lt;h6&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDOvrDOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3fqujn46uc3fmiwhryz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDOvrDOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3fqujn46uc3fmiwhryz.png" alt="Translate (2)" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;RotateX and RotateY value will behave like scale why is that we will talk at last.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#skew"&gt;
  &lt;/a&gt;
  Skew
&lt;/h3&gt;

&lt;p&gt;Skew value is used to slant the element.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;tr&gt;
&lt;td&gt;skewX(deg) &lt;/td&gt;
&lt;td&gt;it is used to skew element in X axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skewY(deg) &lt;/td&gt;
&lt;td&gt;it is used to skew element in Y axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skew(deg) &lt;/td&gt;
&lt;td&gt;it is a short form for skewX and skewY&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h6&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TI0yRKJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hiycml2q7h7e1ickxzsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TI0yRKJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hiycml2q7h7e1ickxzsp.png" alt="Translate (4)" width="880" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So these was some CSS transform properties. But we donhave some more properties. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#transform-origin"&gt;
  &lt;/a&gt;
  Transform Origin
&lt;/h1&gt;

&lt;p&gt;Well, all the things we learnt till now in this article was a value of &lt;code&gt;transform&lt;/code&gt; property. But &lt;code&gt;transform-origin&lt;/code&gt; is a property itself. And its value could be a numerical value like &lt;code&gt;100px | 10%&lt;/code&gt; or can simply be the corners name. &lt;/p&gt;

&lt;p&gt;Well, up until now, all the transform was happening from the elements centre, because it was the origin of the elements. But what if I want to rotate the div from &lt;code&gt;top left&lt;/code&gt; side. Fir exactly this purpose, we have &lt;code&gt;transform-origin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_LL3A7hv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8tbaf5u7z1bklrn2fr4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_LL3A7hv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8tbaf5u7z1bklrn2fr4.png" alt="CSs transform" width="880" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It let's you define the origin of transformation of the element.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#perspective"&gt;
  &lt;/a&gt;
  Perspective
&lt;/h1&gt;

&lt;p&gt;And the last we have perspective. Remember &lt;code&gt;rotateX&lt;/code&gt; and &lt;code&gt;rotateY&lt;/code&gt; was behaving like &lt;code&gt;scale&lt;/code&gt; that was because of this perspective.&lt;/p&gt;

&lt;p&gt;Perspective is a viewpoint or viewing angle. And this define a viewing angle which make the element 3d.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XfNUQ_DV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47a3uiugxtht26viib4x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XfNUQ_DV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47a3uiugxtht26viib4x.png" alt="CSS transform" width="880" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So if we rotate that div along X axis using perspective property like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;perspective&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.element&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll see something like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xAKpCJ3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbiunjvhcwnfg3gmfyuu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xAKpCJ3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbiunjvhcwnfg3gmfyuu.png" alt="Translate (3)" width="880" height="292"&gt;&lt;/a&gt;&lt;br&gt;
Now, it is 3d, right? So this was perspective. Remember we give this property to the parent element. because we set this to the element itself it will not affect because of the same viewing angles. And also the lesser the value of perspective, closer the element to the screen.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h1&gt;

&lt;p&gt;So, that's it. That was all about CSS Transform. If you liked the article and found it helpful, make sure sure to follow me and you can also show your appreciation by simply subscribing my youtube channel. I make awesome web dev content though üòâ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gs5zBA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jeitpawvax07cx7r9yoa.png" width="334" height="90"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, As I decided to make advance CSS series, then I will do it on my style. And according to me its not enough that I'll tell you how to use it. You also have to practice it. For that, I made 3 designs for you that you can make using CSS Transfom for practice. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://drive.google.com/file/d/1ujRNHdi2y6ET9VUXJyA0hB9C0jm7FSrE/view?usp=sharing"&gt;Design 1&lt;/a&gt;, &lt;a href="https://drive.google.com/file/d/195MMd9f5xkr4pdmDbpDT4JOUIQ4uzGGz/view?usp=sharing"&gt;Design 2&lt;/a&gt;, &lt;a href="https://drive.google.com/file/d/1fh3Dq7EsTEXijHzYSVCsTP5X8ferolhN/view?usp=sharing"&gt;Design 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, make sure you code the above designs, it will motivate me to continue this CSS series. And make sure to submit it to me by tagging me on my instagram &lt;code&gt;@modern_web_channel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you stuck anywhere, or have any doubt feel free to ask me. &lt;/p&gt;

&lt;p&gt;Thanks for reading üòä&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#articles-you-may-find-useful"&gt;
  &lt;/a&gt;
  Articles you may find Useful
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/css-the-best-css-effects-of-all-time-most-underrated-web-ux-2chj"&gt;Best CSS Effect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/quick-css-make-infinity-loading-animation-for-your-next-website-187k"&gt;Infinte CSS loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/how-to-create-disney-plus-clone-for-beginner-in-2021-html-css-js-m3p"&gt;Disney+ Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/create-working-youtube-clone-with-search-box-youtube-api-2a6e"&gt;Youtube API - Youtube Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/how-to-create-netflix-clone-netflix-clone-with-hmtl-css-js-989"&gt;TMDB - Netflix Clone&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>APIs for Beginners</title>
      <author>Ken Ahrens</author>
      <pubDate>Thu, 06 Jan 2022 13:28:25 +0000</pubDate>
      <link>https://dev.to/kenahrens/apis-for-beginners-50h9</link>
      <guid>https://dev.to/kenahrens/apis-for-beginners-50h9</guid>
      <description>&lt;p&gt;Are you looking to benefit from automation but lack the experience to leverage an API? To equip you with the tools you need to start utilizing APIs and automation, we‚Äôve put together these helpful Beginner FAQs covering common terminology, methods, and tools for testing APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-api"&gt;
  &lt;/a&gt;
  What is an API?
&lt;/h2&gt;

&lt;p&gt;API stands for Application Programming Interface. An API is a set of programming code that enables data transmission between one software product and another.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-an-api-work"&gt;
  &lt;/a&gt;
  How does an API Work?
&lt;/h2&gt;

&lt;p&gt;APIs sit between an application and the web server, acting as an intermediary layer that processes data transfer between systems. Here‚Äôs how an API works:&lt;/p&gt;

&lt;p&gt;A client appl&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ication initiates an API call to retrieve information‚Äîalso known as a request. This request is processed from an application to the web server via the API‚Äôs Uniform Resource Identifier (URI) and includes a request verb, headers, and sometimes, a request body.&lt;/li&gt;
&lt;li&gt;After receiving a valid request, the API makes a call to the external program or web server.&lt;/li&gt;
&lt;li&gt;The server sends a response to the API with the requested information.&lt;/li&gt;
&lt;li&gt;The API transfers the data to the initial requesting application.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-api-testing"&gt;
  &lt;/a&gt;
  What is API Testing?
&lt;/h2&gt;

&lt;p&gt;While there are many aspects of API testing, it generally consists of making requests to a single or sometimes multiple API endpoints and validating the response. The purpose of API testing is to determine if the API meets expectations for functionality, performance, and security.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-most-popular-kind-of-api"&gt;
  &lt;/a&gt;
  What is the most popular kind of API?
&lt;/h2&gt;

&lt;p&gt;The most used API is a RESTful API (Representational State Transfer API). RESTful APIs allow for interoperability between different types of applications and devices on the internet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-rest"&gt;
  &lt;/a&gt;
  What is REST?
&lt;/h2&gt;

&lt;p&gt;Representational State Transfer (REST) is a software architectural style that developers apply to web APIs. REST relies on HTTP to transfer information using requests, called ‚ÄòURLs‚Äô, to return specified data, called ‚Äòresources‚Äô, to the client. Resources can take many forms (images, text, data). At a basic level, REST is a call and response model for APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-rest-api"&gt;
  &lt;/a&gt;
  What is a REST API?
&lt;/h2&gt;

&lt;p&gt;A REST API conforms to the design principles of the REST, or representational state transfer architectural style. Restful APIs are extremely simple when it comes to building and scaling as compared to other types of APIs. When these types of APIs are put into action, they help facilitate client-server communications with ease. Because RESTful APIs are simple, they can be the perfect APIs for beginners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-rest-api-testing"&gt;
  &lt;/a&gt;
  What is REST API Testing?
&lt;/h2&gt;

&lt;p&gt;REST API Testing is a web automation testing technique for testing REST-based APIs for web applications without using the user interface. The purpose of REST API testing is to record the response of REST API by sending various HTTP requests to check if REST API is working correctly. You can test a REST API with GET, POST, PUT, PATCH and DELETE methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-most-popular-response-data-format"&gt;
  &lt;/a&gt;
  What is the most Popular Response Data Format?
&lt;/h2&gt;

&lt;p&gt;JSON is the most popular response data format amongst developers. JSON (JavaScript Object Notation) is a lightweight data-interchange format. It is easy for humans to read and write and it‚Äôs simple for machines to parse and generate. Plus, JSON is a is a text format that is completely language independent but uses conventions that are familiar to programmers of the C-family of languages, including C, C++, C#, Java, JavaScript, Perl, Python, and many others. JSON is widely used due to its lighter payloads, greater readability, reduced machine overhead for Serialization/Deserialization and easier consumption by JavaScript. These properties make JSON an ideal data-interchange language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-i-improve-my-api-testing-amp-performance"&gt;
  &lt;/a&gt;
  How Can I Improve My API Testing &amp;amp; Performance?
&lt;/h2&gt;

&lt;p&gt;Speedscale helps operation teams prevent costly incidents by validating how new code will perform under production-like workload conditions. Site Reliability Engineers use Speedscale to measure the golden signals of latency, throughput and errors before the code is released. Speedscale Traffic Replay is an alternative to legacy API testing approaches which take days or weeks to run and do not scale well for modern architectures.&lt;/p&gt;

&lt;p&gt;Now that you know some of the basics of APIs and API testing methods, you‚Äôre one step closer to being able to leverage the full power of API automation. &lt;a href="https://speedscale.com/api-testing/"&gt;Learn how Speedscale‚Äôs solutions can help improve your API testing &amp;amp; performance&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Reposted with permission from &lt;a href="https://speedscale.com/2021/08/17/api-for-beginners-faqs/"&gt;blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>api</category>
    </item>
    <item>
      <title>ES6 and Modern JavaScript</title>
      <author>Naftali Murgor</author>
      <pubDate>Thu, 06 Jan 2022 13:22:08 +0000</pubDate>
      <link>https://dev.to/naftalimurgor/es6-and-modern-javascript-4nje</link>
      <guid>https://dev.to/naftalimurgor/es6-and-modern-javascript-4nje</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;ES6 (ES2015) JavaScript version introduced major language features that have seen JavaScript gain a lot of popularity over the years.&lt;br&gt;
This has been a major language to the JavaScript language since 1997.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-introduced-in-es6-javascript"&gt;
  &lt;/a&gt;
  Features introduced in ES6 Javascript
&lt;/h2&gt;

&lt;p&gt;The following features were introduced in the new JavaScript version:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;let&lt;/code&gt; keyword&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;const&lt;/code&gt; keyword&lt;/li&gt;
&lt;li&gt;Arrow Functions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;For/of&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Map Objects&lt;/li&gt;
&lt;li&gt;Set Objects&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Symbol&lt;/li&gt;
&lt;li&gt;Default parameters&lt;/li&gt;
&lt;li&gt;Function Rest Parameters&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String.includes()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String.startsWith()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String.endsWith()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.keys()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.find()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.findIndex()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;JavaScript modules(better known as ES6 Modules)&lt;/li&gt;
&lt;li&gt;Iterables &lt;code&gt;Object.entries&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In our next article, we shall go through each feature in a summarized format and learn why leveraging on these features makes us better JavaScript developers.&lt;/p&gt;

&lt;p&gt;Until next week,&lt;br&gt;
Adios!&lt;/p&gt;

&lt;p&gt;Found this article helpful? You may follow my handle on twitter &lt;a href="https://twitter.com/nkmurgor"&gt;@nkmurgor&lt;/a&gt; where I tweet about interesting topics on web development.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>ndoejs</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>COVID Tracker App in  JS || 50 JS Project Challenge #3</title>
      <author>VECTOR3Studio</author>
      <pubDate>Thu, 06 Jan 2022 13:03:16 +0000</pubDate>
      <link>https://dev.to/vector3studio/covid-tracker-app-in-js-50-js-project-challenge-3-14bh</link>
      <guid>https://dev.to/vector3studio/covid-tracker-app-in-js-50-js-project-challenge-3-14bh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello"&gt;
  &lt;/a&gt;
  Hello üëã
&lt;/h2&gt;

&lt;p&gt;In this post I will show you how to make COVID Tracker App with COVID Tracking API.&lt;/p&gt;

&lt;p&gt;This is Part 3 of the 50 JS Project Challenge.&lt;/p&gt;

&lt;p&gt;So let's get into it.&lt;/p&gt;

&lt;p&gt;First, here is the video tutorial:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kMoi7uICisk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-lets-start-coding"&gt;
  &lt;/a&gt;
  So let's start coding.
&lt;/h3&gt;

&lt;p&gt;First, we need to create three files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;index.html&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;style.css&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;home.js&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we have those files created, we can start coding.&lt;/p&gt;

&lt;p&gt;Here is the code for index.html:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;COVID-19 in Slovakia&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container covid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Total Cases: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id = &lt;/span&gt;&lt;span class="s"&gt;"cases"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Total Deaths: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id = &lt;/span&gt;&lt;span class="s"&gt;"deaths"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Population: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id = &lt;/span&gt;&lt;span class="s"&gt;"population"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container covid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Vaccinations: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id = &lt;/span&gt;&lt;span class="s"&gt;"vaccinations"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Partially Vaccinated: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id = &lt;/span&gt;&lt;span class="s"&gt;"partially"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"home.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are just creating a header with the Logo and About button.&lt;br&gt;
We are creating a text with information about COVID-19.&lt;/p&gt;

&lt;p&gt;Now it's time for styling!. Open our style.css and write this code in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&amp;amp;display=swap')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Poppins'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;13%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f5f5f5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#e5e5e5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a font here declared, the font is Poopins.&lt;br&gt;
We are rewriting the default padding and margin and changing the font to Poopins. The other is just styling elements.&lt;/p&gt;

&lt;p&gt;Now let's move to the actual coding and fun part. So let's start programming in JavaScript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://covid-api.mmediagroup.fr/v1//cases?country=Slovakia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cases&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;confirmed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;deaths&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deaths&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;population&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;population&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So first, we need to decide, from what country we want the data. I'm fetching the Data from Slovakia. After Fetch, we need to take the response and write it to the JSON File as JS object. Then we need to take that JSON file and convert it into variable data so we can assign the variable to the actual text. So we are overwriting the numbers in the different elements.&lt;/p&gt;

&lt;p&gt;Now that we have COVID part done, let's move to the vaccination part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://covid-api.mmediagroup.fr/v1//vaccines?country=Slovakia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vaccinations&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;people_vaccinated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;partially&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;people_partially_vaccinated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are basically using the same method here, but assigning different elements.&lt;/p&gt;

&lt;p&gt;Now, we are done! Open your index.html and you should see results like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--la724nTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gndv9phsctb5q6lubifo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--la724nTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gndv9phsctb5q6lubifo.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it. You created your own COVID Tracking website with API. Congrats!&lt;/p&gt;

&lt;p&gt;Thanks for reading my post, and I hope I will see you next time. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Navigate the Web3 and Crypto Dev Scene with Kylee Fields (Nervos Network)</title>
      <author>Brian H. Hough</author>
      <pubDate>Thu, 06 Jan 2022 12:54:21 +0000</pubDate>
      <link>https://dev.to/brianhhough/how-to-navigate-the-web3-and-crypto-dev-scene-with-kylee-fields-nervos-network-19lm</link>
      <guid>https://dev.to/brianhhough/how-to-navigate-the-web3-and-crypto-dev-scene-with-kylee-fields-nervos-network-19lm</guid>
      <description>&lt;p&gt;From airdrops to DAOs to building full-stack decentralized applications on the blockchain, there are more opportunities than ever before to get involved in this decentralized future of tech in web3. &lt;/p&gt;

&lt;p&gt;In this episode of the &lt;a href="https://youtu.be/hFvGrvCpEsg"&gt;Tech Stack Playbook&lt;/a&gt;, I sit down with Kylee Fields (&lt;a class="mentioned-user" href="https://dev.to/kyleecodes"&gt;@kyleecodes&lt;/a&gt;), Tech &amp;amp; Community at Nervos Network, to break down all of the web3 excitement. Today's episode focuses on the web3 developer landscape, thoughts on the evolving blockchain space, some trending topics in crypto, and how anyone can get involved in the space right now.&lt;/p&gt;

&lt;p&gt;Since Kylee and I connected on Instagram a little over a year ago, I have been greatly impressed with her passion for tech, coding, and sharing her journey in STEM, blockchain, and software engineering. As a tech influencer and content creator, Kylee brings a unique and insightful experience to the tech industry, especially as someone who is heavily plugged into the blockchain space, so I was of course thrilled when we were finally able to do a LIVE for the Tech Stack Playbook.&lt;/p&gt;

&lt;p&gt;This episode is packed with value, so here's a glance at what you'll learn about below, and a series of sections further down in this blog post highlighting the important topics we discussed:&lt;/p&gt;

&lt;p&gt;Time stamps:&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=0s"&gt;00:00&lt;/a&gt; Welcoming &lt;a class="mentioned-user" href="https://dev.to/kyleecodes"&gt;@kyleecodes&lt;/a&gt; to the Tech Stack Playbook &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=55s"&gt;00:55&lt;/a&gt; Setting the scene of today's interview on web3&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=139s"&gt;02:19&lt;/a&gt; How Kylee &amp;amp; I became #devfriends on social media&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=228s"&gt;03:48&lt;/a&gt; Kylee's journey from biology to computer science&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=439s"&gt;07:19&lt;/a&gt; Self-taught developers are information seekers&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=555s"&gt;09:15&lt;/a&gt; The reason for blockchain, crypto, and NFTs current hype &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=693s"&gt;11:33&lt;/a&gt; Why 2021 web3 is so different from 2018 web3 &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=766s"&gt;12:46&lt;/a&gt; Comparing the Bill Gates Internet Interview to explaining blockchain&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=830s"&gt;13:50&lt;/a&gt; How crypto is making people question status quo's&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=896s"&gt;14:56&lt;/a&gt; Is crypto just about trading, or something more?&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=975s"&gt;16:15&lt;/a&gt; What digital ownership means&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=1100s"&gt;18:20&lt;/a&gt; Etherscan and information verification in a trust-less world&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=1254s"&gt;20:54&lt;/a&gt; Working on interoperability &amp;amp; crypto at Nervos Network&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=1375s"&gt;22:55&lt;/a&gt; How Nervos Network is solving important web3 challenges&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=1464s"&gt;24:24&lt;/a&gt; How Nervos is building for a multi-use web3 future&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=1585s"&gt;26:25&lt;/a&gt; What does DevRel (developer relations) look like in web3?&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=1895s"&gt;31:35&lt;/a&gt; Kylee's insights on how to build a career in tech&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=2060s"&gt;34:20&lt;/a&gt; Tech stacks for web3 + building on Nervos Network&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=2316s"&gt;38:36&lt;/a&gt; How can accessibility &amp;amp; inclusion get more people into tech?&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=2634s"&gt;43:54&lt;/a&gt; What should devs interested in blockchain look at to get started?&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=3042s"&gt;50:42&lt;/a&gt; The excitement of airdrops, DAOs, and $ENS governance tokens&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=3640s"&gt;01:00:40&lt;/a&gt; What's been the most rewarding experience learning how to code&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/a6-yniz3l1g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-is-kylee-codes"&gt;
  &lt;/a&gt;
  üë®‚Äçüíª Who is Kylee Codes?
&lt;/h2&gt;

&lt;p&gt;Kylee Fields (who goes by &lt;a class="mentioned-user" href="https://dev.to/kyleecodes"&gt;@kyleecodes&lt;/a&gt; on social media), started coding in 2018 and has since become a freelance developer, a tech influencer with thousands of followers on social media, and currently runs community at Nervos Network. &lt;/p&gt;

&lt;p&gt;Additionally, as a technical community manager, Kylee is studying community building and combining her technical knowledge to serve the ever-growing Nervos Network community. Through technical support, networking, community building events, public appearances, and more, Kylee is on the forefront of the rapidly evolving community management sector in the crypto world.&lt;/p&gt;

&lt;p&gt;She started her career off as a biology student and throughout her youth was a fan of tech and the sciences. Kylee found herself specifically fascinated by biology and evolutionary biology through school. However, when she got to college, she was immediately drawn to the flexibility that programmers had in terms of their work schedules and the value developers can bring to the world through their craft.&lt;/p&gt;

&lt;p&gt;Similar to STEM, software engineering careers allow you to also solve programs and "engineer" solutions to issues that exist in the world. She decided to align her career path towards computers, thinking it would be a great way to continue her journey into STEM along with a flexible career path. The fact that you can be self-taught was also a huge draw for her, along with the real guarantees of work placements after studying as well. Getting a job can be really difficult in any market, but coding is one that has one of the least barriers to entry for folks that are motivated, driven, and committed to growth, like Kylee has found.&lt;/p&gt;

&lt;p&gt;To build her skills and experience, she started freelancing as a WordPress developer. This later led to an internship for BF Products, a supply chain management company, and then most recently Red Hat, an IBM subsidiary software company that provides open source software products to enterprises. &lt;/p&gt;

&lt;p&gt;Currently, she manages community for a global blockchain company called Nervos Network. Nervos is an EVM compatible layer 2 solution on Ethereum, that provides a fast, scalable, and familiar platform for building decentralized applications on the blockchain. Overall, Nervos Network is a cutting-edge, interoperable solution for blockchain connectivity, from NFTs and digital assets to cryptocurrencies and tokens, to solve the blockchain ‚ÄúTrilemma.‚Äù To learn more about the blockchain ‚ÄúTrilemma‚Äù and how Nervos is solving this, check out this &lt;a href="https://medium.com/nervosnetwork/how-to-move-beyond-blockchains-trilemma-6a10ae034e9f"&gt;blog post here&lt;/a&gt; from Nervos Lead Engineer, Jan Xie.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-start-your-career-in-software-engineering"&gt;
  &lt;/a&gt;
  üë®‚Äçüíª How to start your career in software engineering
&lt;/h2&gt;

&lt;p&gt;Kylee's voyage into the web3 and crypto ether is one that I am sure a lot of readers will be interested in. Particularly because of her switch from an earth science (biology) to a computer science (software engineering). &lt;/p&gt;

&lt;p&gt;When Kylee and I met virtually during the COVID-19 lockdown, we were taking courses, leveling up our skills, and making networks and connections. However, there were many practical steps Kylee took to build her career and level up.&lt;/p&gt;

&lt;p&gt;When she started freelancing as a web developer, she began googling companies in her home town to identify which of their Google Pages had incorrect data, the wrong hours, was not optimized efficiently, and so on. Stringing together these types Freelance gigs led to making $50 at each establishment. This inner drive as a "tech hustler" propelled her to see how the web2, and eventually the web3, space could provide not only job security, but work that can truly make a difference in the world. &lt;/p&gt;

&lt;p&gt;This then led to making WordPress sites for local businesses, while she continued going to school and tangentially continued self-teaching. This then led to two internships, the first with BF Products, and then this past summer with Red Hat. She describes her internship with Red Hat as her first doorway into the corporate world where she not only learned so much about open source softwares at scale, but also that it rounded out all of her skillsets coming from a small business background. She had been a fan of open source and Linux products for years, so the chance to really see this up front at Red Hat was very rewarding for her. &lt;/p&gt;

&lt;p&gt;Now as a Technical Community Consultant for Nervos Network, Kylee helps to run one of the top crypto and web3 Twitter Spaces "Hashing It Out", as well as assists with the management and growth of Nervos Network's global community.&lt;/p&gt;

&lt;p&gt;One of the key takeaways from Kylee's journey into tech is that all the skills you learn at each company compounds. Warren Buffett refers to this as compound interest via learning: "If you are investing in your education and you are learning, you should do that as early as you possibly can, because then it will have time to compound over the longest period" (&lt;a href="https://www.goodreads.com/quotes/9594306-if-you-are-investing-in-your-education-and-you-are"&gt;GoodReads&lt;/a&gt;) With Kylee's experiences, they continue to get bigger and bigger in scope and scale, so no doubt, I am excited to see where her career continues to go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-your-hype-beasts-in-web3"&gt;
  &lt;/a&gt;
  üë®‚Äçüíª Finding your "Hype Beasts" in Web3
&lt;/h2&gt;

&lt;p&gt;Something that both Kylee and I can attest to is how warm and welcoming the web3 community has been for us and for many currently entering the space. When you are entering a new career, field, or embarking on a new journey in highly technical industry like blockchain, the path to get to where you want to go can seem quite daunting and intimidating. While entering any field can have its ebbs and flows, it's so important to find your "Hype Beasts" ‚Äî the people who pump you up, keep you motivated, peak your academic/technical interests, and keep you trudging through the unknown. &lt;/p&gt;

&lt;p&gt;The field of blockchain continues to be written as we speak, and by the time you read this blog post, there will undoubtedly be new tools, platforms, web3 integrations, frameworks, blockchains, NFTs, and tokens then when we did this live on Nov. 12. Forming a supportive network online is one the most important and most rewarding components of becoming a web3 developer.&lt;/p&gt;

&lt;p&gt;The beauty of having your inner community of "Hype Beasts" is that instead of going at it alone, you have a core community of people constantly fueling your drive to level up, be innovative, and show up to build (or BUIDL as they say).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-blockchain-development-is-getting-so-much-hype-right-now"&gt;
  &lt;/a&gt;
  üë®‚Äçüíª Why blockchain development is getting so much hype right now?
&lt;/h2&gt;

&lt;p&gt;First of all, we have to understand why this happening right now. To Kylee, she sees NFTs (Non-Fungible Tokens), DAOs (Decentralized Autonomous Organizations), "Flex Culture" now going mainstream, celebrities making NFT deals, and so on. "Blockchain [and crypto technologies and products] has reached mainstream. It's hard to ignore that. People want to get in on that now." Kylee said. &lt;/p&gt;

&lt;p&gt;What excites Kylee the most about these trends is the concept of "Digital Ownership." Digital Ownership is her favorite feature of blockchain technology, and while it has a ways to go, she sees this element as being vital to its long term prospects and longevity. As major corporations like EY, Sotheby's, Vayner Media, and more join into the NFT market, the hype cycle continues to promulgate. There are many big names in the space and their endorsement and utilization of blockchain and crypto technologies holds a great amount of weight in the in the global market, and in the traditional markets they usually play in.&lt;/p&gt;

&lt;p&gt;Personally, I often see a lot of parallels to web3's adoption with a &lt;a href="https://www.youtube.com/watch?v=gipL_CEw-fk"&gt;1995 interview with Bill Gates&lt;/a&gt; where he explains what the "Internet" is and why it is (and will be) so transformational to society. The obvious response for watching things on the internet at the time is, "ever hear of going outside?" or communicating with people in real time with "yea, ever hear of this thing called the Post Office?" Obviously this interview did not age well, but it is goes to show how important it is to stay on top of society-moving changes. Those who do not pick up technology skills or tools will be left back by those who push on and build the next foundation. This is happening right now with blockchain, crypto, and web3, so it is important to stay knowledgeable, learn, and build as Kylee does.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-crypto-just-trading-or-is-there-more-to-it"&gt;
  &lt;/a&gt;
  üë®‚Äçüíª Is crypto just trading, or is there more to it?
&lt;/h2&gt;

&lt;p&gt;As Kylee explains for us, there are cryptocurrencies (bucket #1), and blockchain technology - the umbrella term of cryptographic tools (bucket #2), which can be a physical item like an NFT or a coin like cryptocurrency.&lt;/p&gt;

&lt;p&gt;To frame this with the lens of digital ownership, Kylee makes a great point that you could create a "fake dollar bill" but there would be no way to actually verify the asset in question without intense analysis. Thanks to blockchain's open-varifiableness and authenticatable nature, we can analyze each transaction right down it's hash number. An incredible tool for blockchain research like this, as well as verifying transactions in general is &lt;a href="https://etherscan.io/"&gt;Etherscan&lt;/a&gt;. Thanks to tools like this, you can verify actions and legitimately prove the authenticity of the assets in question independent of "us."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#at-the-center-of-blockchain-and-crypto-at-nervos-what-is-kylee-focusing-on"&gt;
  &lt;/a&gt;
  üë®‚Äçüíª At the center of blockchain and crypto at Nervos, what is Kylee focusing on?
&lt;/h2&gt;

&lt;p&gt;Given the lack of connectedness with different blockchains today, Nervos is working on solving the interoperability conundrum.&lt;/p&gt;

&lt;p&gt;Comparatively speaking, as Kylee explains, Bitcoin is more of an asset storage layer, compared with a blockchain like Ethereum that has more transactional capabilities. "Where Nervos comes in with its CKB token is building a storage layer 2 on top of their token, to provide a storable digital object similar to Bitcoin with the capabilities of Ethereum on the second layer when it comes to how transactions are conducted. In a sense, they are combining the best of both Bitcoin and Ethereum into one CKB token for the world," as Kylee explained.&lt;/p&gt;

&lt;p&gt;As Kylee explained, Nervos uses RISC-V. Wasm was considered for Nervos, but RISC-V ultimately won out due to it's ability to meet the requirements from low-power micro processor to high-performance data center (DC) processor (given it's characteristics of transparency, simplicity, modularity, wide support and scalability!)&lt;/p&gt;

&lt;p&gt;The Nervos token, combining the best attributes of the two leading cryptocurrencies by market cap in the world will certainly make the network more future proof moving forward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-been-the-most-rewarding-experience-learning-how-to-code"&gt;
  &lt;/a&gt;
  üë®‚Äçüíª What's been the most rewarding experience learning how to code?
&lt;/h2&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;If you have any questions about the application process, please reach out over social media or drop a comment below and I will respond!&lt;/p&gt;

&lt;p&gt;Check out the full recording below:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/a6-yniz3l1g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let me know if you found this post helpful! And if you haven't yet, make sure to check out these free resources below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Follow my Instagram for more: &lt;a href="https://instagram.com/brianhhough"&gt;@BrianHHough&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Watch my latest &lt;a href="https://youtube.com/brianhhough"&gt;YouTube video for more&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Listen to my Podcast on &lt;a href="https://podcasts.apple.com/us/podcast/tech-stack-playbook/id1553712082"&gt;Apple Podcasts&lt;/a&gt; and &lt;a href="https://open.spotify.com/show/01bHbabSyBmPfbc3ORMZa9?si=av_16aPbQEqL_bVu3RnO0g"&gt;Spotify&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Join my FREE &lt;a href="https://facebook.com/groups/techstackplaybook"&gt;Tech Stack Playbook Facebook Group&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Join entrepreneurs and developers in the &lt;a href="https://bit.ly/HelpMeDevDiscordLink"&gt;HelpMeDev Discord Server&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's digitize the world together! üöÄ&lt;/p&gt;

&lt;p&gt;-- Brian&lt;/p&gt;

</description>
      <category>web3</category>
      <category>blockchain</category>
      <category>crypto</category>
      <category>nervos</category>
    </item>
    <item>
      <title>Day 72 of 100 Days of Code &amp; Scrum: Making a Page for Portfolio Project Details</title>
      <author>Rammina</author>
      <pubDate>Thu, 06 Jan 2022 12:43:35 +0000</pubDate>
      <link>https://dev.to/rammina/day-72-of-100-days-of-code-scrum-making-a-page-for-portfolio-project-details-31dj</link>
      <guid>https://dev.to/rammina/day-72-of-100-days-of-code-scrum-making-a-page-for-portfolio-project-details-31dj</guid>
      <description>&lt;p&gt;Hello there, everyone!&lt;/p&gt;

&lt;p&gt;I wasn't not productive today, but at least I finished the part I was working on for the &lt;a href="https://www.rammina.com"&gt;Rammina company website&lt;/a&gt;. What I completed was a component for a specific portfolio project page, which only requires a few properties filled in to turn into a separate page. Here is a sample, which is for my &lt;a href="https://www.rammina.com/portfolio/resto-fund"&gt;RestoFund project page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pY3sbGNc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpafgh1ben0yt7sbzqix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pY3sbGNc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpafgh1ben0yt7sbzqix.png" alt="Rammina resto fund homepage image" width="880" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;added individual portfolio project page component with details through properties (WIP).&lt;/li&gt;
&lt;li&gt;wasted some time creating a Modal component that I probably won't use for a while.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#company-website"&gt;
  &lt;/a&gt;
  Company Website
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;finished mobile and desktop designs for my specific portfolio project page component.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;read another article about Scrum, titled &lt;a href="https://www.scrum.org/resources/blog/myth-8-scrum-master-junior-agile-coach"&gt;The 2 Best Scrum Masters I Ever Worked With - The Master Of Coaching And Facilitation&lt;/a&gt; by &lt;a href="https://theliberators.com/"&gt;Barry Overeem&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;the article talked about an example of someone who was a great Scrum Master through observing someone who was in that role and embodying of their qualities.&lt;/li&gt;
&lt;li&gt;said person also didn't have much experience with Scrum/IT in general, but did a good job of helping his team come up with solutions (instead of telling them what to do) by facilitating interactions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#seo"&gt;
  &lt;/a&gt;
  SEO
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I watched a video from Ahrefs about &lt;a href="https://www.youtube.com/watch?v=cl1Ch9ARdQs"&gt;increasing Domain Authority rankings&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading! Have a good day!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Rammina Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.scrum.org/resources/blog/2-best-scrum-masters-i-ever-worked-master-coaching-and-facilitation"&gt;The 2 Best Scrum Masters I Ever Worked With - The Master Of Coaching And Facilitation | Scrum.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cl1Ch9ARdQs"&gt;How to Increase Domain Rating (Website Authority) | YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h2&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://www.rammina.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BK-zilS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1638444046/rammina-button-128_x9ginu.png" alt="Rammina Logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Should I ever have a role="button"?</title>
      <author>Vesa Piittinen</author>
      <pubDate>Thu, 06 Jan 2022 12:28:42 +0000</pubDate>
      <link>https://dev.to/merri/should-i-ever-have-a-rolebutton-4f3c</link>
      <guid>https://dev.to/merri/should-i-ever-have-a-rolebutton-4f3c</guid>
      <description>&lt;p&gt;The answer is no. You should always use &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However there exists &lt;strong&gt;one&lt;/strong&gt; valid niche use case. You have a design where you have an element that looks like a link inside other text. This means the element should wrap just like the text! So isn't this just a link? Well, there is a gotcha: for whatever reason the behavior of the element is not to navigate to another url but to do a button action.&lt;/p&gt;

&lt;p&gt;Now, you can argue that this is design gone bad, and you're right. However in real life it is hard to avoid this kind of issues since the process has to be good and people aware enough for this not to ever happen. So it keeps happening.&lt;/p&gt;

&lt;p&gt;How should we handle this use case?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-much-to-do"&gt;
  &lt;/a&gt;
  So much to do!
&lt;/h2&gt;

&lt;p&gt;The big problem when going ARIA route is the need to do so much to get things right. We have these considerations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Should visually behave like any other link would&lt;/li&gt;
&lt;li&gt;Should functionally behave like a button&lt;/li&gt;
&lt;li&gt;Should have focus indication&lt;/li&gt;
&lt;li&gt;Should be announced as button for a screen reader&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We would like to avoid all this. It would be so simple to just use &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; and style it as a link. But can we do that?&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#visually-as-a-link"&gt;
  &lt;/a&gt;
  Visually as a link
&lt;/h3&gt;

&lt;p&gt;You could go ahead and duplicate your link styles for this element. You might also think that using &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; element would be fine, just drop in &lt;code&gt;display: inline;&lt;/code&gt; and good to go, right?&lt;/p&gt;

&lt;p&gt;Well, the answer is &lt;strong&gt;no&lt;/strong&gt;. &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; will never respect your &lt;code&gt;display: inline;&lt;/code&gt; no matter how much &lt;code&gt;!important&lt;/code&gt; you throw at it. It won't budge: it'll always be a minimum of &lt;code&gt;display: inline-block;&lt;/code&gt;. That's a bummer. Shouldn't CSS have control over everything?&lt;/p&gt;

&lt;p&gt;There are likely good historical reasons for buttons not to respect &lt;code&gt;display: inline;&lt;/code&gt;. To me it is enough to know that it just doesn't work. And because our use case is a link that should wrap just like all the other text, well, &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; just simply can't meet that criteria.&lt;/p&gt;

&lt;p&gt;So what should we do then? Use a &lt;code&gt;&amp;lt;span /&amp;gt;&lt;/code&gt; element? It is a possibility. However I think it is easier to actually make use of the anchor element since this means you can handle the issue in your normal link styles! This kind of means "zero styles" necessary for a custom element, no need for &lt;code&gt;className&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;So what should our style rules look like?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Note: we support `&amp;lt;a role="button" /&amp;gt;` */&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* Provide your link color to anchor element. */&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;royalblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* Links have a pointer cursor. */&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* Links probably should always have underline. */&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There aren't really much use for anchors on the web these days so this shouldn't cause any undesired side effects on any modern website.&lt;/p&gt;

&lt;p&gt;The nice thing about this is that you get to handle the issue with rather minimal CSS, and it can happen in your &lt;code&gt;normalize.css&lt;/code&gt; or equivalent place where you handle default styles. It makes sense since ideally we'll be using the native anchor element directly in our code, not a component that renders an anchor.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#functionally-like-a-button"&gt;
  &lt;/a&gt;
  Functionally like a button
&lt;/h3&gt;

&lt;p&gt;We can do just &lt;code&gt;&amp;lt;a onClick={() =&amp;gt; {}} /&amp;gt;&lt;/code&gt; and call it a day, right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wrong!&lt;/strong&gt; You also need to add in keyboard functionality. And that means there are multiple related things that need to be done. First and foremost the element needs to become accessible by keyboard. For that we need &lt;code&gt;tabIndex&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;tabIndex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Looks like a link!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So are we done? We can now focus the element with a keyboard and get a default focus indication on it, too! However there is more to a &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; functionality. Links navigate when you press the enter key. Buttons do their action with enter. However buttons also do their action when you press the space key! And in this case we have an anchor element which reacts to neither, because &lt;strong&gt;anchor is not a link&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So we need to handle enter and space keys and add &lt;code&gt;onKeyDown&lt;/code&gt; handler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;KeyboardEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isDefaultPrevented&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;tabIndex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    Looks like a link!
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This event handler won't execute if &lt;code&gt;event.preventDefault()&lt;/code&gt; has been called by someone before this handler executes. It makes sense since we're implementing &lt;strong&gt;default behavior&lt;/strong&gt;. We are reimplementing how the web works so we also should behave similarly. So while it might be a rather edge case it is one potential future bug less when we respect the world of DOM, and give an option to skip the behavior.&lt;/p&gt;

&lt;p&gt;The other part of the first &lt;code&gt;if&lt;/code&gt; condition is to "make TypeScript happy".&lt;/p&gt;

&lt;p&gt;But hey, are we done?&lt;/p&gt;

&lt;p&gt;I'm happy to let you know that we are not done. There is one thing in Firefox: it lets you drag anchor elements. However we don't want this behavior and it is a bit annoying that element might start moving upon click, and then not click due to entering dragging mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
    &lt;span class="na"&gt;draggable&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;onDragStart&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DragEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;tabIndex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    Looks like a link!
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Darn it. How to remember all of that? You might be able to omit &lt;code&gt;draggable&lt;/code&gt; but it might be a safer bet to have it to let everything absolutely know that we don't want dragging on this element.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#announced-as-a-button"&gt;
  &lt;/a&gt;
  Announced as a button
&lt;/h3&gt;

&lt;p&gt;This is one more attribute, but this time we can get through with just one addition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
    &lt;span class="na"&gt;draggable&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;onDragStart&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DragEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;
    &lt;span class="na"&gt;tabIndex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    Looks like a link!
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that we are &lt;strong&gt;finally done&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;But... that is awful lot of code to repeat every single time we have a need for this, and it is too easy to forget something being done.&lt;/p&gt;

&lt;p&gt;One solution would be to make this a component. Call it a &lt;code&gt;TextLinkButton&lt;/code&gt; or something! However there is one gotcha with components: it hides the semantics of what we're doing. People also expect components to contain their own styles, but in this case we want to rely on default or generic styles. So by making this a component we break one ideal, or an expectation other developers might have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#utility-props"&gt;
  &lt;/a&gt;
  Utility props
&lt;/h2&gt;

&lt;p&gt;There is another way to deal with the issue of too many props: just provide an object to be shared!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// buttonRoleProps.ts&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;KeyboardEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isDefaultPrevented&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/** Usage: `&amp;lt;a {...buttonRoleProps} /&amp;gt;` */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buttonRoleProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTMLProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;draggable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;onDragStart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;tabIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These props have been designed so that references to functions remain always the same.&lt;/p&gt;

&lt;p&gt;There is of course one tradeoff being made here: if for whatever reason you need to customize &lt;code&gt;onKeyDown&lt;/code&gt; you have to re-implement the space and enter key support. However I feel like this is becoming such a niche case of a niche case that it is just better add documentation to the utility like "remember to handle space and enter keys if you use custom &lt;code&gt;onKeyDown&lt;/code&gt; handler" rather than solving the issue.&lt;/p&gt;

&lt;p&gt;With that we now have a rather complete solution with very few lines of additional CSS, and with minimal JavaScript code! All needs for basic button behavior and expectations have been tackled, and developer experience is very simple as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;This is text &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;buttonRoleProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;that has button looking like a link&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; within!&lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#but-solving-the-issue"&gt;
  &lt;/a&gt;
  But solving the issue
&lt;/h3&gt;

&lt;p&gt;Overkill mode is now active. In my opinion this is absolutely too much code for this issue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// buttonize.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;buttonRoleProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./buttonRoleProps&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;WeakMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buttonize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTMLProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTMLProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;buttonRoleProps&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;onKeyDown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onKeyDown&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;
        &lt;span class="c1"&gt;// having this memoize might also be overkill...&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;buttonRoleProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;buttonRoleProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValidElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;buttonize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;buttonRoleProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you can now do with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// use as props:&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;buttonize&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onKeyDown&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I can have focus&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// pass in element:&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;buttonize&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I can have focus&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// compared to (here onKeyDown would also have to handle enter &amp;amp; space):&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;buttonRoleProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I can have focus&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For some other use case this kind of helper utility might be worth it. But here? We're dealing with just one function callback that needs the default behavior to be available after a custom handler. Which is likely not needed, ever, in any project.&lt;/p&gt;

&lt;p&gt;Of course the code amount isn't &lt;strong&gt;that bad&lt;/strong&gt; but it's still something for something that isn't really needed.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#closing-it"&gt;
  &lt;/a&gt;
  Closing it
&lt;/h2&gt;

&lt;p&gt;So what did we learn here? Well, there are quite a bit of considerations to make an element work like a real button! Doesn't this highlight how much work the native web standards do for you that you might never wonder about yourself? Embrace the &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt;, always! It is a truly awesome little piece of code. Even if you probably have to write &lt;code&gt;&amp;lt;button type="button" /&amp;gt;&lt;/code&gt; way too often, because not every button is a submit button!&lt;/p&gt;

&lt;p&gt;There is still also one little consideration that occurred to me while making this article: &lt;code&gt;user-select: none;&lt;/code&gt;. This is how typical buttons behave regarding text selection. So why didn't I bring it up earlier? Because after thinking about it we're dealing with a &lt;strong&gt;text link&lt;/strong&gt;. You are supposed to be able to select the text, and should not disable it here. The button made here looks like it is part of the text so that is an expected behavior.&lt;/p&gt;

&lt;p&gt;But if at all possible, please avoid having a need for this in the first place! Yes, I know, it keeps happening to everyone. It always finds it's way in at some point when people develop websites. But maybe consider your design and development process and how it would make sure usability and tech specs are met in design?&lt;/p&gt;

&lt;p&gt;So that it would be noticed that "hey, this isn't really a link, it is a button, it shouldn't look like a link" can happen when features are still in the design pipeline and not during development when changing a design on-the-fly might be rather costly. And then we end up with anchor elements that look like links that are really buttons. Or something worse.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Telegram bot with Django</title>
      <author>UlugbekMuslitdinov</author>
      <pubDate>Thu, 06 Jan 2022 12:23:45 +0000</pubDate>
      <link>https://dev.to/ulugbekmuslitdinov/telegram-bot-with-django-8b2</link>
      <guid>https://dev.to/ulugbekmuslitdinov/telegram-bot-with-django-8b2</guid>
      <description>&lt;p&gt;Hi everyone. Recently I faced a problem with integrating the Telegram bot with Django. At first look, it looks very simple. There are several ways you can connect them. I think most of you will use API to integrate them. But it is a hard way of implementing this. Using this method you will need to open API in Django, make the authorization through REST API, write methods separately for Telegram bot and so more... It is an effective way if you have a simple Django application. But in my project, It would take much more time, because it was a complicated project. So I started looking for a simpler way of implementing it. After surfing the internet for several days and finding several wrong ways of it, I found the right method. And this method made my work much simpler, so I don't need to open the API from Django and write separate methods for the Telegram bot. The bot works directly from the Django server. It turns on when you start the Django server and turns off when you shut the server off. And I want to share this method with you.&lt;/p&gt;

&lt;p&gt;First, you should set a webhook for your bot, so Telegram knows where to send requests for your bot. In this step, you will need a production server set, because the localhost is not reachable for Telegram. If you want to set webhook with your local machine, I recommend you use &lt;a href="https://ngrok.com/"&gt;NGROK&lt;/a&gt;. It allows you to make your local server for public usage. After you configure your production server go to &lt;code&gt;https://api.telegram.org/botYOUR-TOKEN/setWebhook?url=YOUR-URL&lt;/code&gt; . This website should return a response like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"ok"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nl"&gt;"result"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Webhook was set"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the webhook is set, just copy the code from my &lt;a href="https://gist.github.com/UlugbekMuslitdinov/023482dcf264785109ea67c1577a8146"&gt;GitHub Gist&lt;/a&gt; and paste it to your Django project. And, of course, write your bot token in the appropriate place.&lt;/p&gt;

&lt;p&gt;I hope you will like this method.&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>telebot</category>
      <category>telegram</category>
    </item>
    <item>
      <title>Why is redux state immutable?</title>
      <author>SuperTokens</author>
      <pubDate>Thu, 06 Jan 2022 12:18:00 +0000</pubDate>
      <link>https://dev.to/supertokens/why-is-redux-state-immutable-5359</link>
      <guid>https://dev.to/supertokens/why-is-redux-state-immutable-5359</guid>
      <description>&lt;p&gt;For redux to work correctly, the state must be immutable. This means that whenever we update the redux state, we have to create a copy of the whole state and set values to fields we want to change. In code, this usually looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let newState = {
    ...oldState,
    field1: {
        ...oldState.field1,
        field2: "someNewValue"
    },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, we are modifying the oldState‚Äôs &lt;code&gt;field2&lt;/code&gt; value by creating a new state and setting a new value to &lt;code&gt;field2&lt;/code&gt;. The value and reference of &lt;code&gt;oldState&lt;/code&gt; remains the same.&lt;/p&gt;

&lt;p&gt;Before we get into why we must change redux state in this way, we should know the difference between ‚Äúvalue‚Äù and ‚Äúreference‚Äù&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#difference-between-value-and-reference"&gt;
  &lt;/a&gt;
  Difference between value and reference
&lt;/h2&gt;




&lt;p&gt;The value of a variable is the ‚Äúsemantic‚Äù meaning of what that variable holds. For example, in the example code below, the semantics of what is held by &lt;code&gt;var1&lt;/code&gt; and &lt;code&gt;var2&lt;/code&gt; are the same, therefore we can say that their values are the same. However, &lt;code&gt;var3&lt;/code&gt;‚Äôs value is different since the ‚Äúsemantics‚Äù of what it‚Äôs holding is different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let var1 = { name: "John", age: 20}
let var2 = { name: "John", age: 20}

let var3 = { name: "May", age: 30}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we talk about reference, we are referring (pun intended!) to the memory address of where something is stored. So in the above example, the memory address of the object referenced by &lt;code&gt;var1&lt;/code&gt;, is different from the memory address of the object referenced by &lt;code&gt;var2&lt;/code&gt;. In other words, &lt;code&gt;var1&lt;/code&gt; points to a different memory address than &lt;code&gt;var2&lt;/code&gt;. Therefore, their references are different, even though their values are the same!&lt;/p&gt;

&lt;p&gt;The only way two variables can have the same reference is when they are both pointing to the same memory address. So in the code below, &lt;code&gt;var4&lt;/code&gt; and &lt;code&gt;var5&lt;/code&gt; have the same reference:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let var4 = { name: "Jeremy",  age: 50}
let var5 = var4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we do &lt;code&gt;var5.name = ‚ÄúMary‚Äù&lt;/code&gt;, then the value of &lt;code&gt;var4.name&lt;/code&gt; will also be ‚ÄúMary‚Äù.&lt;/p&gt;

&lt;p&gt;Based on this understanding, we can conclude:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the value of two variables are the same, their reference may or may not be the same.&lt;/li&gt;
&lt;li&gt;If the values of two variables are different, then their references must be different.&lt;/li&gt;
&lt;li&gt;If the reference of two variables are the same, their values must be the same.&lt;/li&gt;
&lt;li&gt;If the reference of two variables are different, their values may or may not be the same.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#re-rendering-of-react-components"&gt;
  &lt;/a&gt;
  Re rendering of react components
&lt;/h2&gt;




&lt;p&gt;Coming back to redux and react, react will only want to re render a component if the value of the props or state has changed. To know if a value of these have changed, we must do a ‚Äúdeep comparison‚Äù - recursively check all the fields inside the state and prop to see if any of them have changed. &lt;/p&gt;

&lt;p&gt;Large applications usually have a very deep state structure when using redux - several nested levels (in the count of 100s or even 1000s). Doing a deep comparison here, perhaps several times every second, will slow down the UI. On the other hand, if we do a ‚Äúshallow comparison‚Äù (where we only check if the values of the first level fields have changed), it will be much quicker, but we may miss out on updates - breaking application logic. An example of how we might miss out on updates with shallow comparison is presented below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let oldState = {
    name: "John",
    age: 20,
    profession: {
        title: "Software Engineer",
        organization: "SuperTokens.io"
    }
}

let newState = oldState

newState.profession.title = "Senior Software Engineer"

// Shallow comparison. upto level one
if (newState !== oldState || oldState.name !== newState.name || oldState.age !== newState.age || oldState.profession !== newState.profession) {
    // Update UI
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#optimising-with-the-immutability-rule"&gt;
  &lt;/a&gt;
  Optimising with the immutability rule
&lt;/h2&gt;




&lt;p&gt;The problem of rerendering could be solved if we could somehow just do a shallow reference check, without missing out on updates. This would give us the performance we need and not break the application‚Äôs logic.&lt;/p&gt;

&lt;p&gt;Based on what we saw in the previous sections, we know that ‚Äúif the reference of two variables (state variables in this case) are different, their values may or may not be the same.‚Äù. What if we change this to ‚Äúif and only if the reference of two variables (state variables in this case) are different, we should assume that their values are different.‚Äù. What happens now?&lt;/p&gt;

&lt;p&gt;If the above change is enforced, then to know if a state‚Äôs value has changed, we can just do a reference check like &lt;code&gt;oldState === newState&lt;/code&gt; (if this is &lt;code&gt;false&lt;/code&gt;, then the reference has changed). If the reference has changed, then we can assume that the values must have changed and trigger a render. If not, then we do not rerender.&lt;/p&gt;

&lt;p&gt;To enforce this assumption, we must never directly change the fields inside &lt;code&gt;oldState&lt;/code&gt;. Instead, we must always create a new copy of &lt;code&gt;oldState&lt;/code&gt; (in &lt;code&gt;newState&lt;/code&gt;), just like we showed at the start of this article, and make modifications in &lt;code&gt;newState&lt;/code&gt;. Since &lt;code&gt;newState&lt;/code&gt; is a new object, its reference will always be different than that of &lt;code&gt;oldState&lt;/code&gt;. This is known as enforcing immutability of state - exactly what redux enforces its users to do!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;




&lt;p&gt;Immutability of redux state is necessary since it allows detecting redux state changes in an efficient manner. This implies that whenever we want to modify a redux state, we must create a new copy of it and do modifications to that copy - which then becomes the new redux state.&lt;/p&gt;

&lt;p&gt;Written by the Folks at &lt;a href="https://supertokens.io/blog/why-is-redux-state-immutable"&gt;SuperTokens&lt;/a&gt; ‚Äî hope you enjoyed! We are always available on our &lt;a href="https://supertokens.io/discord"&gt;Discord&lt;/a&gt; server. Join us if you have any questions or need any help.&lt;/p&gt;

</description>
      <category>security</category>
      <category>opensource</category>
      <category>redux</category>
      <category>javascript</category>
    </item>
    <item>
      <title>C√≥digo simples √© diferente de c√≥digo simplista: Elm vs JavaScript</title>
      <author>Marcio Frayze</author>
      <pubDate>Thu, 06 Jan 2022 11:51:27 +0000</pubDate>
      <link>https://dev.to/marciofrayze/codigo-simples-e-diferente-de-codigo-simplista-elm-vs-javascript-4cnf</link>
      <guid>https://dev.to/marciofrayze/codigo-simples-e-diferente-de-codigo-simplista-elm-vs-javascript-4cnf</guid>
      <description>&lt;p&gt;Existem linguagens, &lt;em&gt;frameworks&lt;/em&gt; e bibliotecas que se esfor√ßam para permitir que seja poss√≠vel realizar tarefas relativamente complexas escrevendo poucas linhas de c√≥digo. &lt;em&gt;JavaScript&lt;/em&gt; √© um bom exemplo. Para fazer uma chamada &lt;em&gt;http&lt;/em&gt; para uma p√°gina do meu site usando esta linguagem, basta escrever uma √∫nica linha:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://segunda.tech/sobre&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A maioria das pessoas provavelmente n√£o considera este c√≥digo √© dif√≠cil ou complexo, mas podem existir cen√°rios de erros escondidos que n√£o s√£o triviais de tratar. Para analisar isso, vou mostrar uma implementa√ß√£o de uma pequena p√°gina utilizando &lt;em&gt;JavaScript&lt;/em&gt; puro e discutir os potencias problemas. Em seguida vou mostrar como implementar a mesma solu√ß√£o utilizando a linguagem de programa√ß√£o &lt;em&gt;&lt;a href="https://elm-lang.org"&gt;Elm&lt;/a&gt;&lt;/em&gt; e analisar os mesmos pontos. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exerc%C3%ADcio-recuperando-os-nomes-dos-pok%C3%A9mons"&gt;
  &lt;/a&gt;
  Exerc√≠cio: recuperando os nomes dos Pok√©mons
&lt;/h2&gt;

&lt;p&gt;Para exemplificar o problema que quero discutir neste artigo, implementei em &lt;em&gt;html&lt;/em&gt; e &lt;em&gt;JavaScript&lt;/em&gt; puro (utilizando &lt;em&gt;Ajax&lt;/em&gt;) o m√≠nimo necess√°rio para exibir uma lista com nomes de Pok√©mons. Para isso utilizei a &lt;em&gt;API&lt;/em&gt; do site &lt;a href="https://pokeapi.co"&gt;Pok√©API&lt;/a&gt;. O &lt;em&gt;endpoint&lt;/em&gt; para recuperar a lista dos 5 primeiros Pok√©mons √© bem simples: basta acionar a &lt;em&gt;URL&lt;/em&gt; &lt;code&gt;https://pokeapi.co/api/v2/pokemon?limit=5&lt;/code&gt; e o retorno ser√° um &lt;em&gt;json&lt;/em&gt; contendo o resultado abaixo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"count"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1118&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"next"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://pokeapi.co/api/v2/pokemon?offset=5&amp;amp;limit=5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"previous"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"results"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"bulbasaur"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://pokeapi.co/api/v2/pokemon/1/"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ivysaur"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://pokeapi.co/api/v2/pokemon/2/"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"venusaur"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://pokeapi.co/api/v2/pokemon/3/"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"charmander"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://pokeapi.co/api/v2/pokemon/4/"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"charmeleon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://pokeapi.co/api/v2/pokemon/5/"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Neste exerc√≠cio o objetivo √© recuperar estes dados de forma ass√≠ncrona e listar na p√°gina &lt;em&gt;html&lt;/em&gt; apenas o conte√∫do do campo &lt;em&gt;name&lt;/em&gt; (que est√° dentro de &lt;em&gt;result&lt;/em&gt;). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementando-uma-solu%C3%A7%C3%A3o-utilizando-html-e-javascript-puro"&gt;
  &lt;/a&gt;
  Implementando uma solu√ß√£o utilizando &lt;em&gt;html&lt;/em&gt; e &lt;em&gt;JavaScript&lt;/em&gt; puro
&lt;/h2&gt;

&lt;p&gt;Existem v√°rias formas de se resolver este problema utilizando estas tecnologias. Abaixo apresento a minha implementa√ß√£o.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"pt-BR"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Lista de Pok√©mons em HTML e JavaScript&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Marcio Frayze David"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"loading-message"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Carregando lista de nomes dos Pok√©mons, aguarde...
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"pokemon-names-list"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://pokeapi.co/api/v2/pokemon?limit=5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataJson&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dataJson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;addNamesToDOM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

      &lt;span class="nx"&gt;hideLoadingMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="p"&gt;})();&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addNamesToDOM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pokemonNamesListElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pokemon-names-list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;addNameToDOM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokemonNamesListElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addNameToDOM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokemonNamesListElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newListElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;newListElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
      &lt;span class="nx"&gt;pokemonNamesListElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newListElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hideLoadingMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading-message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A ideia √© que ao finalizar a chamada &lt;em&gt;Ajax&lt;/em&gt;, a mensagem de carregamento deixe de aparecer e a lista contendo os nomes dos Pok√©mons seja carregada dentro da &lt;em&gt;tag&lt;/em&gt; com o &lt;em&gt;id&lt;/em&gt; &lt;em&gt;pokemons-names-list&lt;/em&gt;. Publiquei &lt;a href="https://jsfiddle.net/027p8sa9"&gt;esta p√°gina no editor &lt;em&gt;on-line&lt;/em&gt; &lt;em&gt;JSFiddle&lt;/em&gt;&lt;/a&gt; para que veja o comportamento esperado.&lt;/p&gt;

&lt;p&gt;Sei que dificilmente algu√©m escreveria um c√≥digo desta forma. N√£o usei nenhum &lt;em&gt;framework&lt;/em&gt; ou biblioteca externa e fiz algumas coisas que muitos considerariam m√°s pr√°ticas (como por exemplo colocar o c√≥digo &lt;em&gt;JavaScript&lt;/em&gt; direto no &lt;em&gt;html&lt;/em&gt;). Mas mesmo que tivesse implementado esta solu√ß√£o com tecnologias populares como &lt;em&gt;&lt;a href="https://pt-br.reactjs.org"&gt;React&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/JSX_(JavaScript)"&gt;JSX&lt;/a&gt;&lt;/em&gt; e &lt;em&gt;&lt;a href="https://axios-http.com"&gt;Axios&lt;/a&gt;&lt;/em&gt;, os potencias problemas que quero discutir aqui provavelmente ainda existiriam.&lt;/p&gt;

&lt;p&gt;Analisando o c√≥digo acima, as perguntas que gostaria que voc√™ tentasse responder s√£o:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O que vai acontecer caso ocorra um &lt;em&gt;timeout&lt;/em&gt; na chamada &lt;em&gt;Ajax&lt;/em&gt;? &lt;/li&gt;
&lt;li&gt;Se o servidor voltar um &lt;em&gt;status http&lt;/em&gt; de falha, o que vai acontecer?&lt;/li&gt;
&lt;li&gt;Se o servidor retornar um &lt;em&gt;status http&lt;/em&gt; de sucesso mas o formato do conte√∫do retornado for diferente do esperado, o que vai acontecer?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O c√≥digo acima n√£o responde nenhuma destas perguntas de forma clara. √â f√°cil visualizar o "caminho feliz", mas qualquer situa√ß√£o inesperada n√£o esta sendo tratada de forma expl√≠cita. E embora nunca dev√™ssemos colocar um c√≥digo em produ√ß√£o que n√£o trate estes cen√°rios, a linguagem &lt;em&gt;JavaScript&lt;/em&gt; n√£o nos &lt;strong&gt;obriga&lt;/strong&gt; a lidar com eles. Caso algu√©m do seu time esque√ßa de fazer o tratamento adequado para um desses potenciais problemas, o resultado ser√° um &lt;strong&gt;erro em tempo de execu√ß√£o&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Se o seu time tiver azar, talvez estes cen√°rios s√≥ apare√ßam quando o c√≥digo j√° estiver em produ√ß√£o. E quando isso inevitavelmente acontecer, √© bem prov√°vel que coloquem a culpa na pessoa desenvolvedora que implementou aquela parte do sistema.&lt;/p&gt;

&lt;p&gt;Mas se sabemos que este tipo de situa√ß√£o precisa obrigatoriamente ser tratada, &lt;strong&gt;por que as linguagens, &lt;em&gt;frameworks&lt;/em&gt; e bibliotecas permitem que este tipo de c√≥digo seja escrito?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-uma-solu%C3%A7%C3%A3o-simples"&gt;
  &lt;/a&gt;
  O que √© uma solu√ß√£o &lt;strong&gt;simples&lt;/strong&gt;?
&lt;/h2&gt;

&lt;p&gt;Existe uma diferen√ßa grande entre uma solu√ß√£o ser &lt;strong&gt;simples&lt;/strong&gt; e ser &lt;strong&gt;simplista&lt;/strong&gt;. Esta solu√ß√£o que escrevi em &lt;em&gt;JavaScript&lt;/em&gt; n√£o √© simples, mas simplista, j√° que ela ignora aspectos fundamentais do problema em quest√£o.&lt;/p&gt;

&lt;p&gt;J√° linguagens como &lt;em&gt;&lt;a href="https://elm-lang.org"&gt;Elm&lt;/a&gt;&lt;/em&gt;, por sua vez, tendem a nos &lt;strong&gt;obrigar&lt;/strong&gt; a pensar e implementar a solu√ß√£o para todos os potenciais cen√°rios de problemas. O c√≥digo final provavelmente ser√° maior, mas trar√° consigo a garantia de que n√£o vamos ter &lt;strong&gt;nenhum erro em tempo de execu√ß√£o&lt;/strong&gt;, j√° que o compilador verifica e imp√µe que a pessoa desenvolvedora trate todos os caminhos poss√≠veis, n√£o deixando espa√ßo para falhas previs√≠veis.&lt;/p&gt;

&lt;p&gt;Claro que isso n√£o significa que &lt;em&gt;webapps&lt;/em&gt; criadas nesta linguagem est√£o isentas de todo e qualquer tipo de erro. Podem ocorrer problemas na l√≥gica de neg√≥cio e a aplica√ß√£o ter um comportamento inesperado, ou aspectos visuais do sistema podem n√£o estar como gostar√≠amos. Mas aqueles erros previs√≠veis, que podem ser encontrados por um compilador, v√£o deixar de existir. Um bom exemplo √© o famoso &lt;em&gt;&lt;strong&gt;Undefined is not a function&lt;/strong&gt;&lt;/em&gt; do &lt;em&gt;JavaScript&lt;/em&gt;. J√° em &lt;em&gt;Elm&lt;/em&gt;, &lt;strong&gt;√© imposs√≠vel escrever um c√≥digo que resulte em qualquer erro de &lt;em&gt;runtime&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Outra vantagem desta abordagem √© que temos um c√≥digo realmente &lt;strong&gt;auto-documentado&lt;/strong&gt;. Deve ficar muito claro, por exemplo, qual o formato do retorno esperado, quais campos s√£o obrigat√≥rios e quais s√£o opcionais, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementando-a-mesma-solu%C3%A7%C3%A3o-em-elm"&gt;
  &lt;/a&gt;
  Implementando a mesma solu√ß√£o em &lt;em&gt;Elm&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Agora vamos analisar uma solu√ß√£o escrita em &lt;em&gt;&lt;a href="https://elm-lang.org"&gt;Elm&lt;/a&gt;&lt;/em&gt; para este mesmo problema. Se voc√™ n√£o conhece essa linguagem (ou alguma outra similar, como &lt;em&gt;&lt;a href="https://haskell.org"&gt;Haskell&lt;/a&gt;&lt;/em&gt; ou &lt;em&gt;&lt;a href="https://purescript.org"&gt;PureScript&lt;/a&gt;&lt;/em&gt;), provavelmente vai achar a sua sintaxe um pouco estranha. Mas n√£o se preocupe, voc√™ n√£o precisa entender totalmente este c√≥digo para compreender a proposta deste artigo.&lt;/p&gt;

&lt;p&gt;Primeiro precisamos de um arquivo &lt;em&gt;html&lt;/em&gt; simples, que ir√° hospedar nossa p√°gina. Esta abordagem √© bastante similar ao que √© feito quando utilizamos ferramentas como &lt;em&gt;&lt;a href="https://pt-br.reactjs.org"&gt;React&lt;/a&gt;&lt;/em&gt; ou &lt;em&gt;&lt;a href="https://br.vuejs.org"&gt;Vue&lt;/a&gt;&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"pt-BR"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Lista de Pok√©mons em HTML e Elm&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Marcio Frayze David"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Elm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Desta vez nosso &lt;em&gt;html&lt;/em&gt; quase n√£o tem l√≥gica. Ele apenas ir√° carregar a aplica√ß√£o escrita em &lt;em&gt;Elm&lt;/em&gt; (previamente compilada) e colocar seu conte√∫do dentro da &lt;em&gt;tag&lt;/em&gt; &lt;em&gt;main&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Agora sim a parte interessante: o c√≥digo escrito em &lt;em&gt;Elm&lt;/em&gt;. Vou primeiro listar o c√≥digo por completo e depois destacar e comentar algumas partes mais relevantes para o tema deste artigo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="kt"&gt;Main&lt;/span&gt; &lt;span class="k"&gt;exposing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Browser&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="k"&gt;exposing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Http&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt; &lt;span class="k"&gt;exposing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Decoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;-- MAIN&lt;/span&gt;


&lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;Browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subscriptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subscriptions&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;-- MODEL&lt;/span&gt;


&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Failure&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Loading&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Success&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Loading&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fetchPokemonNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;-- UPDATE&lt;/span&gt;


&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;FetchedPokemonNames&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Result&lt;/span&gt; &lt;span class="kt"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;

    &lt;span class="kt"&gt;FetchedPokemonNames&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
        &lt;span class="kt"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;pokemonsInfo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Success&lt;/span&gt; &lt;span class="n"&gt;pokemonsInfo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kt"&gt;Err&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Failure&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;-- SUBSCRIPTIONS&lt;/span&gt;


&lt;span class="n"&gt;subscriptions&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Sub&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="n"&gt;subscriptions&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;Sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;


&lt;span class="c1"&gt;-- VIEW&lt;/span&gt;


&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
    &lt;span class="kt"&gt;Failure&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Por alguma raz√£o, n√£o foi poss√≠vel carregar a lista com nome dos Pok√©mons. üòß"&lt;/span&gt;

    &lt;span class="kt"&gt;Loading&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Carregando lista de nomes dos Pok√©mons, aguarde..."&lt;/span&gt;

    &lt;span class="kt"&gt;Success&lt;/span&gt; &lt;span class="n"&gt;pokemonsInfo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;viewPokemonInfo&lt;/span&gt; &lt;span class="n"&gt;pokemonsInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 


&lt;span class="n"&gt;viewPokemonInfo&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="n"&gt;viewPokemonInfo&lt;/span&gt; &lt;span class="n"&gt;pokemonInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;pokemonInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="c1"&gt;-- HTTP&lt;/span&gt;


&lt;span class="n"&gt;fetchPokemonNames&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="n"&gt;fetchPokemonNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://pokeapi.co/api/v2/pokemon?limit=5"&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expectJson&lt;/span&gt; &lt;span class="kt"&gt;FetchedPokemonNames&lt;/span&gt; &lt;span class="n"&gt;decoder&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;pokemonInfoDecoder&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Decoder&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;
&lt;span class="n"&gt;pokemonInfoDecoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name"&lt;/span&gt; &lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;decoder&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Decoder&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="n"&gt;decoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;results"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;pokemonInfoDecoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Publiquei &lt;a href="https://ellie-app.com/gj4f6Cpw4XBa1"&gt;esta p√°gina no editor online &lt;em&gt;Ellie&lt;/em&gt;&lt;/a&gt; para que possa ver este &lt;em&gt;webapp&lt;/em&gt; em funcionamento. Recomendo que tente alterar o c√≥digo e veja o que acontece. √â uma √≥tima forma de come√ßar a experimentar a linguagem &lt;em&gt;Elm&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analisando-a-implementa%C3%A7%C3%A3o-em-elm"&gt;
  &lt;/a&gt;
  Analisando a implementa√ß√£o em &lt;em&gt;Elm&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;N√£o irei neste artigo explicar todo este c√≥digo e a arquitetura por tr√°s da linguagem &lt;em&gt;Elm&lt;/em&gt;. Mas queria destacar algumas partes importantes para o contexto da discuss√£o deste artigo, come√ßando pela defini√ß√£o dos nossos &lt;em&gt;types&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defini%C3%A7%C3%A3o-de-tipos"&gt;
  &lt;/a&gt;
  Defini√ß√£o de tipos
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Loading&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Failure&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Success&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No c√≥digo acima primeiro √© definido um &lt;em&gt;type alias&lt;/em&gt;, tornando mais claro para pessoa que est√° lendo o c√≥digo o que √© um &lt;em&gt;PokemonInfo&lt;/em&gt; (neste caso, uma estrutura com um campo chamado &lt;em&gt;name&lt;/em&gt; do tipo &lt;em&gt;String&lt;/em&gt;). Isso tamb√©m facilitar√° a vida do nosso compilador, permitindo que fa√ßa o tratamento de erro adequado quando necess√°rio e, durante a fase de compila√ß√£o, consiga emitir mensagens de erros mais informativas.&lt;/p&gt;

&lt;p&gt;Em seguida, definimos um &lt;em&gt;type&lt;/em&gt; chamado &lt;em&gt;Model&lt;/em&gt; que ser√° utilizado para representar o estado atual da nossa aplica√ß√£o. Neste exemplo, nossa &lt;em&gt;webapp&lt;/em&gt; pode estar em um (e apenas um) dos 3 poss√≠veis estados:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Loading&lt;/em&gt;: estado inicial da aplica√ß√£o, indicando que a requisi√ß√£o &lt;em&gt;http&lt;/em&gt; ainda est√° sendo processada.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Failure&lt;/em&gt;: representa um estado de falha, indicando que ocorreu algum problema ao realizar a chamada &lt;em&gt;http&lt;/em&gt; ao servidor (podendo ser &lt;em&gt;timeout&lt;/em&gt;, falha no &lt;em&gt;parsing&lt;/em&gt; da mensagem de retorno, etc).&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Success&lt;/em&gt;: indica que a requisi√ß√£o foi realizada e seu retorno convertido com sucesso.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dos tr√™s estados definidos, apenas o &lt;em&gt;Success&lt;/em&gt; possui uma informa√ß√£o extra associada a ele: uma lista contendo elementos do tipo &lt;em&gt;PokemonInfo&lt;/em&gt;. Note que isso n√£o deixa espa√ßo para ambiguidades. Se tivermos um estado de sucesso, &lt;strong&gt;obrigatoriamente&lt;/strong&gt; temos uma lista de &lt;em&gt;PokemonInfo&lt;/em&gt; definida e com uma estrutura v√°lida. E o contr√°rio tamb√©m: em caso de falha, a lista com os nomes dos Pok√©mons n√£o estar√° definida.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-constru%C3%A7%C3%A3o-da-p%C3%A1gina"&gt;
  &lt;/a&gt;
  A constru√ß√£o da p√°gina
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Elm&lt;/em&gt; foi uma das pioneiras em utilizar o conceito de &lt;em&gt;DOM&lt;/em&gt; virtual e programa√ß√£o declarativa no desenvolvimento de &lt;em&gt;webapp&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Na &lt;a href="https://guide.elm-lang.org/architecture"&gt;arquitetura do &lt;em&gt;Elm&lt;/em&gt;&lt;/a&gt;, existe uma separa√ß√£o bastante clara entre o &lt;strong&gt;estado&lt;/strong&gt; da nossa aplica√ß√£o e o que deve ser exibido na tela. √â responsabilidade da fun√ß√£o &lt;em&gt;view&lt;/em&gt; montar, a partir do estado atual da nossa aplica√ß√£o, uma representa√ß√£o da nossa &lt;em&gt;DOM&lt;/em&gt; virtual. E toda vez que o estado for alterado (quando, por exemplo, terminar de carregar os dados com nomes dos Pok√©mons) esta fun√ß√£o ser√° reavaliada e uma nova &lt;em&gt;DOM&lt;/em&gt; virtual criada. &lt;/p&gt;

&lt;p&gt;Em nosso exemplo, isso ocorre no seguinte trecho de c√≥digo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
    &lt;span class="kt"&gt;Failure&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Por alguma raz√£o, n√£o foi poss√≠vel carregar a lista com nome dos Pok√©mons. üòß"&lt;/span&gt;

    &lt;span class="kt"&gt;Loading&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Carregando lista de nomes dos Pok√©mons, aguarde..."&lt;/span&gt;

    &lt;span class="kt"&gt;Success&lt;/span&gt; &lt;span class="n"&gt;pokemonsInfo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;viewPokemonInfo&lt;/span&gt; &lt;span class="n"&gt;pokemonsInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 


&lt;span class="n"&gt;viewPokemonInfo&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="n"&gt;viewPokemonInfo&lt;/span&gt; &lt;span class="n"&gt;pokemonInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;pokemonInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Temos aqui a declara√ß√£o de 2 fun√ß√µes: a &lt;em&gt;view&lt;/em&gt; e uma fun√ß√£o auxiliar chamada &lt;em&gt;viewPokemonInfo&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Uma vantagem de utilizar &lt;em&gt;types&lt;/em&gt; para representa√ß√£o do estado da nossa aplica√ß√£o √© que &lt;strong&gt;sempre&lt;/strong&gt; que um trecho de c√≥digo for utilizar este &lt;em&gt;type&lt;/em&gt;, o compilador ir√° &lt;strong&gt;obrigar&lt;/strong&gt; a pessoa desenvolvedora a tratar todos os poss√≠veis estados. Neste caso: &lt;em&gt;Loading&lt;/em&gt;, &lt;em&gt;Failure&lt;/em&gt; e &lt;em&gt;Success&lt;/em&gt;. Se voc√™ remover o tratamento do &lt;em&gt;Loading&lt;/em&gt; da fun√ß√£o &lt;em&gt;view&lt;/em&gt; do nosso exemplo, receber√° uma mensagem de erro similar a esta ao tentar compilar a aplica√ß√£o:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Line 70, Column 3
This `case` does not have branches for all possibilities:

70|&amp;gt;  case model of
71|&amp;gt;    Failure -&amp;gt;
72|&amp;gt;        text "Por alguma raz√£o, n√£o foi poss√≠vel carregar a lista com nome dos Pok√©mons. üòß"
73|&amp;gt;
74|&amp;gt;    Success pokemonsInfo -&amp;gt;
75|&amp;gt;      ul []
76|&amp;gt;        (List.map viewPokemonInfo pokemonsInfo) 

Missing possibilities include:

    Loading

I would have to crash if I saw one of those. Add branches for them!

Hint: If you want to write the code for each branch later, use `Debug.todo` as a
placeholder. Read &amp;lt;https://elm-lang.org/0.19.1/missing-patterns&amp;gt; for more
guidance on this workflow.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isso traz mais seguran√ßa para a pessoa desenvolvedora refatorar o c√≥digo e incluir ou remover estados da aplica√ß√£o, tendo a certeza que n√£o vai deixar de tratar algum caso obscuro.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fazendo-uma-chamada-http"&gt;
  &lt;/a&gt;
  Fazendo uma chamada &lt;em&gt;http&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;O trecho de c√≥digo abaixo √© respons√°vel por fazer a chamada &lt;em&gt;http&lt;/em&gt; de forma ass√≠ncrona e realizar o &lt;em&gt;parse&lt;/em&gt; do retorno, transformando-o em uma lista de &lt;em&gt;PokemonInfo&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="n"&gt;fetchPokemonNames&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="n"&gt;fetchPokemonNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://pokeapi.co/api/v2/pokemon?limit=5"&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expectJson&lt;/span&gt; &lt;span class="kt"&gt;FetchedPokemonNames&lt;/span&gt; &lt;span class="n"&gt;decoder&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;pokemonInfoDecoder&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Decoder&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;
&lt;span class="n"&gt;pokemonInfoDecoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name"&lt;/span&gt; &lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;decoder&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Decoder&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="n"&gt;decoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;results"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;pokemonInfoDecoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imposs√≠vel negar que este c√≥digo √© maior do que uma chamada a uma fun√ß√£o &lt;em&gt;fetch&lt;/em&gt;. Mas note que este c√≥digo, al√©m de fazer a chamada de forma ass√≠ncrona, tamb√©m valida e transforma o retorno em uma &lt;em&gt;List PokemonInfo&lt;/em&gt;, eliminando a necessidade de qualquer valida√ß√£o por nossa parte.&lt;/p&gt;

&lt;p&gt;No final da execu√ß√£o da chamada ser√° emitida uma mensagem &lt;em&gt;FetchedPokemonNames&lt;/em&gt; junto com o resultado da opera√ß√£o: ou uma lista com nomes dos Pok√©mons j√° decodificados ou ent√£o um resultado representando que ocorreu um erro.&lt;/p&gt;

&lt;p&gt;Ser√° responsabilidade da fun√ß√£o &lt;em&gt;update&lt;/em&gt; receber esta mensagem e criar um novo estado para a aplica√ß√£o.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;

    &lt;span class="kt"&gt;FetchedPokemonNames&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
        &lt;span class="kt"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;pokemonsInfo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Success&lt;/span&gt; &lt;span class="n"&gt;pokemonsInfo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kt"&gt;Err&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Failure&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mais uma vez, somos obrigados a tratar todos os poss√≠veis cen√°rios. Neste exemplo, s√£o dois: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;caso o &lt;em&gt;result&lt;/em&gt; seja do tipo &lt;em&gt;Ok&lt;/em&gt;, significa que nossa requisi√ß√£o foi processada com sucesso. √â retornado ent√£o um novo estado para nossa aplica√ß√£o, alterando para &lt;em&gt;Success&lt;/em&gt;, junto com a lista contendo os nomes dos Pok√©mons.&lt;/li&gt;
&lt;li&gt;caso o &lt;em&gt;result&lt;/em&gt; seja do tipo &lt;em&gt;Err&lt;/em&gt;, ent√£o sabemos que ocorreu algum problema durante a requisi√ß√£o ou ao realizar o &lt;em&gt;parsing&lt;/em&gt; do &lt;em&gt;json&lt;/em&gt;. Um novo estado da aplica√ß√£o √© retornado, alterando-o para &lt;em&gt;Failure&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sempre que o retorno da fun√ß√£o &lt;em&gt;update&lt;/em&gt; for diferente do estado anterior, automaticamente a fun√ß√£o &lt;em&gt;view&lt;/em&gt; ser√° acionada novamente, ent√£o uma nova &lt;em&gt;DOM&lt;/em&gt; virtual ser√° criada e eventuais altera√ß√µes ser√£o aplicadas na tela. Para entender melhor este processo, voc√™ pode ler sobre a &lt;em&gt;The Elm Architecture&lt;/em&gt; &lt;a href="https://guide.elm-lang.org/architecture"&gt;nesta p√°gina&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%B5es"&gt;
  &lt;/a&gt;
  Conclus√µes
&lt;/h2&gt;

&lt;p&gt;Embora tenha focado exclusivamente nas requisi√ß√µes &lt;em&gt;http&lt;/em&gt; e no &lt;em&gt;JavaScript&lt;/em&gt;, os mesmos conceitos s√£o aplicados em muitos outros cen√°rios, bibliotecas, &lt;em&gt;frameworks&lt;/em&gt; e linguagens.&lt;/p&gt;

&lt;p&gt;Minha inten√ß√£o n√£o √© desmotivar o uso de &lt;em&gt;JavaScript&lt;/em&gt;. &lt;em&gt;&lt;a href="https://elm-lang.org"&gt;Elm&lt;/a&gt;&lt;/em&gt; √© uma linguagem maravilhosa, mas at√© hoje ainda uso &lt;em&gt;JavaScript&lt;/em&gt; e &lt;em&gt;TypeScript&lt;/em&gt; em alguns &lt;em&gt;webapps&lt;/em&gt; e este n√£o √© o ponto focal do problema. O que eu gostaria √© que quando voc√™ for consumir uma fun√ß√£o de sua linguagem preferida (seja uma fun√ß√£o nativa, seja de uma bibliotecas de terceiros), que voc√™ sempre reflita e responda para si mesma: existe algum cen√°rio que este c√≥digo est√° ignorando? Ou, em outras palavras, esta √© uma solu√ß√£o &lt;strong&gt;simples&lt;/strong&gt; ou &lt;strong&gt;simplista&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;E o mais importante: ao escrever uma nova fun√ß√£o, utilize uma interface de comunica√ß√£o que incentive a pessoa que for consumi-la a seguir as boas pr√°ticas. Mesmo que ela esteja seguindo o caminho do m√≠nimo esfor√ßo, deve ser capaz de se precaver de todos os cen√°rios poss√≠veis. Ou, em outras palavras, sempre siga o &lt;a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment"&gt;Princ√≠pio de menor espanto&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Gostou deste texto? Conhe√ßa meus outros artigos, podcasts e v√≠deos acessando: &lt;a href="https://segunda.tech"&gt;https://segunda.tech&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Why Remix üíø?</title>
      <author>Abdur-Rahman</author>
      <pubDate>Thu, 06 Jan 2022 11:50:58 +0000</pubDate>
      <link>https://dev.to/shafspecs/why-remix--5cm5</link>
      <guid>https://dev.to/shafspecs/why-remix--5cm5</guid>
      <description>&lt;p&gt;In the the &lt;a href="https://dev.to/shafspecs/intro-to-remix-41l7"&gt;first part&lt;/a&gt; of this post series (yes, it's now a series), we talked briefly about what Remix is and a little bit of what it adds to the web development eco-system as a whole. In this post, we will indulge ourselves more answering the question &lt;em&gt;Why Remix&lt;/em&gt;, and why you should start using it today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-remix-bring-to-the-table"&gt;
  &lt;/a&gt;
  &lt;u&gt;What does Remix üíø bring to the table?:&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;Remix is a server-side rendered (SSR) framework (&lt;em&gt;yes, just like Next.js and Sveltekit&lt;/em&gt;). This implies that both the backend and the frontend can be made using a single Remix app. Unlike vanilla React, where data is fetched on the frontend and then rendered on the screen, Remix fetches data on the backend and serves the HTML directly to the user (Remix has no static support hence it requires a server...) Hold up, what's so special about all this?&lt;br&gt;
&lt;strong&gt;Because there is so much more&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#routing-%F0%9F%96%87"&gt;
  &lt;/a&gt;
  Routing üñá:
&lt;/h3&gt;

&lt;p&gt;A number one advantage of Remix üíø in my opinion. I've used several JS frameworks including React, Next.js and a little bit of Vue with some spices of here and there with regard to frameworks, and I can say none comes even close to how Remix single-handedly (no external packages included) handles it's routing. Remix makes use of something known as nested routing that simply means embedding a component route in another (paren route) which leads to much faster loading times&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNFSlLXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfsf53mncd5c0e88ag5b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNFSlLXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfsf53mncd5c0e88ag5b.gif" alt="Remix GIF" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And with this nested routing comes another goodybag, even though these components are nested in one another, they are all seperate entities that handle their own state and data. This leads to an extra decrease in page loading time due to the dynamic handling and fetching of these "routes" by Remix üíø at the cost of nothing!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VjRlK5lM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpgwv70adn9pw7pfbs6x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VjRlK5lM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpgwv70adn9pw7pfbs6x.gif" alt="Remix Loading Time animated" width="880" height="317"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yea! Now that's what we're talking about üòÑ.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-boundaries-and-handling-"&gt;
  &lt;/a&gt;
  Error Boundaries and Handling üö´:
&lt;/h3&gt;

&lt;p&gt;I have written thousands of lines of code in React and Next.js mainly and I can say Error handling has always been a pain. It is something you don't always remember, breaks your entire site even if it's just a button component and even when you remember, it's just another hard task that's been added to your todos. &lt;/p&gt;

&lt;p&gt;With Remix, error handling is built-in. Wait a second, we actually have a framework where the maintainers realize errors would happen even in production stage? Hell, yeah!&lt;/p&gt;

&lt;p&gt;With Remix, your errors don't break your site so your page doesn't need to be refreshed. And Remix handles errors while Server Rendering. Errors while Client Rendering. Even errors in your server side data handling. All those nasty errors finally in your hands and you can plan ahead of how to handle them just fine. Ah, Remix üòå.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transitions-"&gt;
  &lt;/a&gt;
  Transitions üîÑ:
&lt;/h3&gt;

&lt;p&gt;Another advantage Remix has (&lt;em&gt;yes, there is so much more&lt;/em&gt; ü§§) is how it handles transition and loading states of your browser, this ia also handled single-handedly by Remix too! All you have to do is sit back and tell Remix what to do (or show) while your app is loading (&lt;em&gt;and grab a glass of iced tea to relax while you're at it&lt;/em&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#forms-forms-forms-"&gt;
  &lt;/a&gt;
  Forms, Forms, Forms üìù:
&lt;/h3&gt;

&lt;p&gt;Remeber those cringy moment when implementing forms, where for some weird reasons, &lt;code&gt;onClick&lt;/code&gt; event just did nothing or your form data getting hanged somewhere between the input and the server? Well, Remix üíø is here for that. By implementing functions to handle server-side operations (&lt;em&gt;known to some as &lt;code&gt;loader&lt;/code&gt; and &lt;code&gt;action&lt;/code&gt;&lt;/em&gt;), Remix is able to eaasily deal and harness your form data with no need for Javascript involvement. &lt;em&gt;Wait, what!&lt;/em&gt;, that's right, no Javascript is needed for your form to work. I guess this should be another segment of it's own but another thing Remix achieves is the fact that it totally removes that javascript-first motive that we have been seeing for a long time in our frameworks, hence, reducing the browser load tremendously leading to a happier user experience and a happier developer experience (&lt;em&gt;you might want to start by cutting down that outrageously long dependency list in your &lt;code&gt;package.json&lt;/code&gt;&lt;/em&gt;)&lt;/p&gt;




&lt;p&gt;What's next in store for Remix? I don't know exactly but I can say it's good. The thing that excites me is that this is v1 of Remix, first release, and we have a bunch ton of features and improvements to be excited for. Can't wait to see what the future holds for the Remix community. I hope you finally agree with me about &lt;em&gt;why remix&lt;/em&gt; and the good stuff that lay in store for it and web development as a whole. With that, I wish you happy reading and coding üëã. &lt;/p&gt;

</description>
      <category>remix</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
