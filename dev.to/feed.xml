<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Build a Serverless Subscription Site with Stripe</title>
      <author>Ali Spittel</author>
      <pubDate>Wed, 18 Aug 2021 14:01:50 +0000</pubDate>
      <link>https://dev.to/aspittel/build-a-serverless-subscription-site-with-stripe-48h1</link>
      <guid>https://dev.to/aspittel/build-a-serverless-subscription-site-with-stripe-48h1</guid>
      <description>&lt;p&gt;In this tutorial, we'll be building out a site that uses Stripe to create a checkout system, then that triggers an AWS Lambda Function provisioned through AWS Amplify which creates a user for the purchaser. Then, the user can log in and see paywalled content! This pattern would work for a membership or course site where you want a user to pay for access to content. You could slightly modify the code to send digital products to customers via email as well!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/DLGF8neT8d0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This tutorial assumes intermediate &lt;a href="https://welearncode.com/beginners-guide-react-2020/"&gt;React&lt;/a&gt;, &lt;a href="https://docs.amplify.aws/"&gt;AWS Amplify&lt;/a&gt;, and Node.js knowledge, though you could use the Node.js code with any frontend stack.&lt;/p&gt;

&lt;p&gt;The first step, is to create a &lt;a href="https://stripe.com/"&gt;Stripe account&lt;/a&gt; and confirm your email. You'll need this to generate an API Key. Also, at the bottom of the &lt;a href="https://dashboard.stripe.com/settings/checkout"&gt;Checkout Settings&lt;/a&gt; page enable client-only checkout. You could implement fullstack checkout if you want to build your own form and such, but this will allow you to move a little faster initially.&lt;/p&gt;

&lt;p&gt;Then, create a product using the Stripe dashboard. On the left-hand navigation, select "Products" then "+ Add product". Fill out the form! I made mine into a subscription that was $20/mo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TJu3BuuD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/stripe-amplify/stripe-product.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJu3BuuD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/stripe-amplify/stripe-product.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, create a React app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app membership-site
&lt;span class="nb"&gt;cd &lt;/span&gt;membership-site
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then install the Amplify libraries and Stripe's JavaScript SDK.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i aws-amplify @stripe/stripe.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clear out the App.js component's &lt;code&gt;return&lt;/code&gt; statement so that it just returns an empty &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; for now.&lt;/p&gt;

&lt;p&gt;Create two new empty React component files, one named &lt;code&gt;SignIn.js&lt;/code&gt; and one called &lt;code&gt;Subscribe.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's first implement &lt;code&gt;Subscribe.js&lt;/code&gt;. Import loadStripe from the Stripe SDK.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loadStripe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@stripe/stripe-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a button that fires an event listener on click.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Get Course Access&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside of that event listener, use the &lt;code&gt;loadStripe&lt;/code&gt; function with your Stripe Publishable key as an argument to it. You can find your Stripe Publishable key at the top of the home page under "Get your API Keys".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b1_vWdnB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/stripe-amplify/publishable-key.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b1_vWdnB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/stripe-amplify/publishable-key.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, run Stripe's &lt;code&gt;redirectToCheckout&lt;/code&gt; method with your information -- first the &lt;code&gt;lineItems&lt;/code&gt;. If you had multiple items that the user could choose from, you'd want to implement some sort of cart checkout that adds items and their quantities to this array. In this case, for a simple app, we'll set the quantity to one and use the price key for our item. You can find the price key by going to your product and then copying the API ID next to the price.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OYkOOZSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/stripe-amplify/price-id.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OYkOOZSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/stripe-amplify/price-id.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you made your item a subscription, put that as your mode, otherwise use "product" or whatever you created. Then have a success and cancel URL -- I redirected them back to home if they were successful! I didn't implement an error page, but you could.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;loadStripe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your_stripe_publishable_key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirectToCheckout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;lineItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
      &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;price_key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;subscription&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;successUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cancelUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000/cancel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Render this component within your App component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Subscribe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'App'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My Fancy Subscription Site&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Subscribe&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try this out -- you should be able to "buy" an item using this form! You can use the credit card number "4242 4242 4242 4242" to test Stripe without actually paying. Now we've implemented step one of this tutorial: checkout!&lt;/p&gt;

&lt;p&gt;Now let's move on to the webhook handler that will create a new user once the item is purchased.&lt;/p&gt;

&lt;p&gt;First, initialize Amplify for your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Press enter to accept the suggested configuration. Then we'll initialize auth.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify add auth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Press enter for each question that pops up to accept the default authentication setup. Now we'll add an API so that the webhook can make a request to a URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify add api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Answer the first few questions like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? Please &lt;span class="k"&gt;select &lt;/span&gt;from one of the below mentioned services: REST
? Would you like to add a new path to an existing REST API: No
? Provide a friendly name &lt;span class="k"&gt;for &lt;/span&gt;your resource to be used as a label &lt;span class="k"&gt;for &lt;/span&gt;this category &lt;span class="k"&gt;in &lt;/span&gt;the project: apib104bfb8
? Provide a path &lt;span class="o"&gt;(&lt;/span&gt;e.g., /book/&lt;span class="o"&gt;{&lt;/span&gt;isbn&lt;span class="o"&gt;})&lt;/span&gt;: /webhook
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll also create an AWS Lambda function. Answer this set of questions with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? Choose a Lambda &lt;span class="nb"&gt;source &lt;/span&gt;Create a new Lambda &lt;span class="k"&gt;function&lt;/span&gt;
? Provide an AWS Lambda &lt;span class="k"&gt;function &lt;/span&gt;name: stripedemofunction
? Choose the runtime that you want to use: NodeJS
? Choose the &lt;span class="k"&gt;function &lt;/span&gt;template that you want to use: Serverless ExpressJS &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Integration with
 API Gateway&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We &lt;strong&gt;do&lt;/strong&gt; want to enable advanced settings for this project. Answer yes to that question.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? Do you want to configure advanced settings? Yes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we'll want to access auth from our Lambda function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? Select the categories you want this &lt;span class="k"&gt;function &lt;/span&gt;to have access to. auth
? Select the operations you want to permit on stripedemo: create, &lt;span class="nb"&gt;read&lt;/span&gt;, update, delete
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Answer no to the following three questions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? Do you want to invoke this &lt;span class="k"&gt;function &lt;/span&gt;on a recurring schedule? No
? Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;Lambda layers &lt;span class="k"&gt;for &lt;/span&gt;this &lt;span class="k"&gt;function&lt;/span&gt;? No
? Do you want to configure environment variables &lt;span class="k"&gt;for &lt;/span&gt;this &lt;span class="k"&gt;function&lt;/span&gt;? No
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will; however, configure secret values that our function can access. For your secret name, choose "stripe_key" and then enter your Stripe secret key. This will be under where you found your Publishable key above -- you'll have to click "Reveal test key" to see it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? Enter a secret name &lt;span class="o"&gt;(&lt;/span&gt;this is the key used to look up the secret value&lt;span class="o"&gt;)&lt;/span&gt;: stripe_key
? Enter the value &lt;span class="k"&gt;for &lt;/span&gt;stripe_key: &lt;span class="o"&gt;[&lt;/span&gt;hidden]
? What &lt;span class="k"&gt;do &lt;/span&gt;you want to &lt;span class="k"&gt;do&lt;/span&gt;? I&lt;span class="s1"&gt;'m done
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run &lt;code&gt;amplify push&lt;/code&gt; to deploy all of your provisioned resources to the cloud!&lt;/p&gt;

&lt;p&gt;Change into the directory that your function is located in and install the AWS SDK and the Stripe Node SDK.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /amplify/backend/function/stripedemofunction/src
npm i aws-sdk stripe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we get to write the logic!&lt;/p&gt;

&lt;p&gt;First, delete everything &lt;strong&gt;below the comments&lt;/strong&gt; in your &lt;code&gt;app.js&lt;/code&gt; file for your Lambda function and then paste in the following. Most of this will already be in the file. It will set up Express for your serverless application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;awsServerlessExpressMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-serverless-express/middleware&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-sdk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// declare a new express app&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;awsServerlessExpressMiddleware&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventContext&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;// Enable CORS for all methods&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Access-Control-Allow-Headers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App started&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll write a function that will retrieve our Stripe secret key. If you look at the top of your &lt;code&gt;app.js&lt;/code&gt; file you'll see this already generated there!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStripeKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Parameters&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SSM&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getParameters&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;Names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stripe_key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secretName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;secretName&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
      &lt;span class="na"&gt;WithDecryption&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Parameters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll create a route that will handle a post request to the &lt;code&gt;/webhook&lt;/code&gt; route that we setup.&lt;/p&gt;

&lt;p&gt;First we'll get our Stripe key and then configure Stripe to use it. You would also want to make sure the request is &lt;a href="https://stripe.com/docs/webhooks/signatures"&gt;properly signed from Stripe&lt;/a&gt; in a production app.&lt;/p&gt;

&lt;p&gt;We'll use the customer id that's sent to us in Stripe's request body to get the customer's email.&lt;/p&gt;

&lt;p&gt;Then, we'll instantiate the AWS Cognito SDK and use it to create a user with the admin API. You can get your &lt;code&gt;UserPoolId&lt;/code&gt; in the comments at the top of your the &lt;code&gt;app.js&lt;/code&gt; file. It will be slightly different than the one in my code. Then, we'll make sure that the user account is sent via email and uses that email to create the account.&lt;/p&gt;

&lt;p&gt;If we're successful, we'll send a 200 response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/webhook&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripeKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getStripeKey&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stripe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;stripeKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stripeKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customer&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cognito&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CognitoIdentityServiceProvider&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2016-04-18&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;cognito&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;adminCreateUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;UserPoolId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AUTH_STRIPEDEMO1C66A4D4_USERPOOLID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;DesiredDeliveryMediums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;EMAIL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="na"&gt;UserAttributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userEmail&lt;/span&gt;
      &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="na"&gt;ValidationData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userEmail&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// an error occurred&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// successful response&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to trigger the Lambda function whenever a user completes a purchase. We'll first need the URL for the app. If you go into your &lt;code&gt;aws-exports.js&lt;/code&gt; file which is in your &lt;code&gt;src/&lt;/code&gt; directory, you'll see an &lt;code&gt;endpoint&lt;/code&gt; key. For example, mine looks like this "&lt;a href="https://rw7cx5fyn3.execute-api.us-east-1.amazonaws.com/dev%22"&gt;https://rw7cx5fyn3.execute-api.us-east-1.amazonaws.com/dev"&lt;/a&gt;. Also, add &lt;code&gt;/webhook&lt;/code&gt; to the end of the url, for example "&lt;a href="https://rw7cx5fyn3.execute-api.us-east-1.amazonaws.com/dev/webhook%22"&gt;https://rw7cx5fyn3.execute-api.us-east-1.amazonaws.com/dev/webhook"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, go into your &lt;a href="https://dashboard.stripe.com/test/developers"&gt;Stripe Dashboard&lt;/a&gt; and click "Developers" on the left-hand navigation. Then click "Webhooks" under that. Click the "+ Add endpoint" button on the top right. Paste in your URL from above and then choose "payment_intent.succeeded" as the event to listen for.&lt;/p&gt;

&lt;p&gt;Your event should work! Test out checkout again and then check your email for a login!&lt;/p&gt;

&lt;p&gt;Now for the presentational code -- let's add a sign in form and then render some paywalled content once they are!&lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;&amp;lt;SignIn&amp;gt;&lt;/code&gt; component, add the following React form that triggers Amplify's sign in method once submitted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Auth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-amplify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SignIn&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logIn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error signing in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logIn&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'text'&lt;/span&gt; &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt; &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'submit'&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'log in'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll finish up the App component! We'll create a &lt;code&gt;user&lt;/code&gt; state attribute that is updated once the user signs in. We'll render paywalled content if the user is signed in, otherwise we'll show the sign in form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Subscribe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SignIn&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./SignIn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Auth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-amplify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'App'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My Fancy Subscription Site&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Subscribe&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Paywalled content!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SignIn&lt;/span&gt; &lt;span class="na"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to take this demo down, you can run &lt;code&gt;amplify delete&lt;/code&gt; to deprovision the cloud resources!&lt;/p&gt;

&lt;p&gt;And we're done! In this tutorial we created a Stripe checkout system that triggers an account being created. Once signed in, a user can view paywalled content! If you have any feedback on AWS Amplify or this tutorial, please let me know!&lt;/p&gt;

</description>
      <category>react</category>
      <category>aws</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Node.JS DevOps: Simplify Your Life with GitHub Actions</title>
      <author>Daniele Fontani</author>
      <pubDate>Wed, 18 Aug 2021 13:51:31 +0000</pubDate>
      <link>https://dev.to/zeppaman/node-js-devops-simplify-your-life-with-github-actions-2o1c</link>
      <guid>https://dev.to/zeppaman/node-js-devops-simplify-your-life-with-github-actions-2o1c</guid>
      <description>&lt;p&gt;n this article, I will share with you the configuration that I have adopted for deploying &lt;a href="https://github.com/zeppaman/mongo-event-sourcing"&gt;MESS (MongoDB Event Sourcing System)&lt;/a&gt;, my first &lt;strong&gt;Node.js&lt;/strong&gt; opensource project. The configuration is a single YAML file that unlocks infinite powers to your GitHub repository.&lt;br&gt;
What I realized here is a simple configuration that satisfies all the basic needs of a nowadays enterprise application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;automatically version code &lt;/li&gt;
&lt;li&gt;run test on every release &lt;/li&gt;
&lt;li&gt;publish artefact to &lt;strong&gt;NPMJS&lt;/strong&gt; (in case you have a library or you are delivering through NPM)&lt;/li&gt;
&lt;li&gt;publish your docker container ready to go to a container repository&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these features may seem hard to be reached, but you will discover that will come more or less out of the box using &lt;br&gt;
&lt;strong&gt;GitHub&lt;/strong&gt; actions.&lt;br&gt;
&lt;a href="https://towardsdatascience.com/node-js-devops-github-actions-2a1b2be1741f?sk=cc0e3c8069e2447c975f639ae6e099a6"&gt;Read the full article and learn how :)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>npm</category>
      <category>github</category>
      <category>devops</category>
    </item>
    <item>
      <title>Grow Your Brand as a Developer</title>
      <author>Mikhail Karan</author>
      <pubDate>Wed, 18 Aug 2021 13:42:52 +0000</pubDate>
      <link>https://dev.to/mikhailkaran/grow-your-brand-as-a-developer-2a</link>
      <guid>https://dev.to/mikhailkaran/grow-your-brand-as-a-developer-2a</guid>
      <description>&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/1udjWPhW3Yr4vKMXi7HjxN"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-html-all-the-things"&gt;
  &lt;/a&gt;
  What is HTML All The Things
&lt;/h2&gt;

&lt;p&gt;HTML All The Things is a &lt;a href="https://podcast.htmlallthethings.com/"&gt;web development podcast&lt;/a&gt; and &lt;a href="https://discord.com/invite/jweMCx9"&gt;discord community&lt;/a&gt; which was started by Matt and Mike, developers based in Ontario, Canada. &lt;/p&gt;

&lt;p&gt;The podcast speaks to web development topics as well as running a small business, self-employment and time management. You can join them for both their successes and their struggles as they try to manage expanding their Web Development business without stretching themselves too thin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-this-one-about"&gt;
  &lt;/a&gt;
  What's This One About?
&lt;/h2&gt;

&lt;p&gt;In this episode Matt and Mike sit down with Dylan Redekop to discuss all things creators, marketing, and branding. Many people and businesses these days rely on Twitter, Facebook, and other social media platforms to bring their message and products to prospective clients. Even if you're not into becoming an influencer, many individuals use social media to find job opportunities and connect with their professional community. Social media, however, is not easy to grow on and that's where Dylan can help!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#guest-introduction"&gt;
  &lt;/a&gt;
  Guest Introduction
&lt;/h2&gt;

&lt;p&gt;Dylan is a growth marketer who tweets daily tips on branding and marketing for creators. His newsletter, growth currency, provides HIGH VALUE links to tools, courses, tips and resources to help you grow as a creator. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/growthcurrency"&gt;Dylan's Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://growthcurrency.substack.com/?utm_source=HTMLAllTheThinsg_Podcast_ShowNotes"&gt;Growth Currency Newsletter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://growth-currency.ck.page"&gt;How To Start, Optimize &amp;amp; Grow Your Newsletter For FREE&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-notes"&gt;
  &lt;/a&gt;
  Show Notes
&lt;/h2&gt;

&lt;p&gt;3:55 - The advantages of establishing your ‘brand’&lt;br&gt;
13:00 - How to get past the ‘self-promotion just feels weird’ mental barrier?&lt;br&gt;
20:00 - Social media is big and scary when first starting out. What advice do you have for someone stepping into the game for the first time?&lt;br&gt;
27:20 - What’s next after establishing yourself on social media?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key Takeaways
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Have self-belief, be genuine and get out of your own head&lt;/li&gt;
&lt;li&gt;80/20 rule for interesting content vs self promotion&lt;/li&gt;
&lt;li&gt;Find your community first, see where they are it and start to integrate yourself into it&lt;/li&gt;
&lt;li&gt;You don't need a ton of different types of content to succeed. Keep it simple. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h2&gt;

&lt;p&gt;If you're enjoying the podcast consider giving us a review on &lt;a href="https://podcasts.apple.com/us/podcast/html-all-things-web-development-web-design-small-business/id1412209136"&gt;Apple Podcasts&lt;/a&gt; or checking out our Patreon to get a shoutout on the podcast. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.patreon.com/htmlallthethings"&gt;Support us on Patreon&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can find us on all the podcast platforms out there as well as&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/htmlallthethings/"&gt;Instagram (@htmlallthethings)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/htmleverything"&gt;Twitter (@htmleverything)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.tiktok.com/@htmlallthethings"&gt;TikTok (Html All The Things)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>podcast</category>
    </item>
    <item>
      <title>Top 10 Atom packages for 2021</title>
      <author>Daniel Dominguez</author>
      <pubDate>Wed, 18 Aug 2021 13:05:40 +0000</pubDate>
      <link>https://dev.to/dominguezdaniel/top-10-atom-packages-for-2021-37h9</link>
      <guid>https://dev.to/dominguezdaniel/top-10-atom-packages-for-2021-37h9</guid>
      <description>&lt;p&gt;Continuing with my previous post "&lt;a href="https://dev.to/dominguezdaniel/atom-the-hackable-text-editor-3a8m"&gt;Atom, the hackable text editor&lt;/a&gt;" here's a list with the top packages of 2021. There are many other packages out there, but this list will give you a good entry point and a good overview of what is available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build&lt;/strong&gt;&lt;br&gt;
Build is a package that enables build processes to be run by command from within Atom. There is a long list of build providers available such as Java, C++, Ruby, and AppleScript. But if the included providers don’t meet your needs, you can define your own using JSON, CSON, YAML, or JS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tabnine&lt;/strong&gt;&lt;br&gt;
Atom comes with an auto-complete feature, but it isn’t very smart. With Tabnine’s all-language auto-complete, you will find you have to click the down arrow on the dropdown a lot less, as its AI-backed algorithm does much more than provide all relevant options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minimap&lt;/strong&gt;&lt;br&gt;
Minimap shows your file structure to the side of the editor. This addition makes the file structure easily digestible and allows scrolling to the location you’re looking for easier. Particularly useful if you tend to work on large files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linter&lt;/strong&gt;&lt;br&gt;
A code linter is a static code analysis tool that provides immediate feedback about errors in your code without needing to run a build. You’ll also need to install language support for any language you use. Among the long list of supported languages are Java, C++, HTML, JSON, and Kubernetes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Atom Beautify&lt;/strong&gt;&lt;br&gt;
Atom Beautify provides a quick and easy way to format your code. It changes spacing and structure to conform to code formatting standards.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TeleType&lt;/strong&gt;&lt;br&gt;
TeleType allows multiple authors to simultaneously edit a file, much like how editing works in Google Docs, but with a code editor. This is a feature that Atom advertises on its front page and is a big selling point for Atom.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git Plus&lt;/strong&gt;&lt;br&gt;
While Atom comes with built-in Git integration, it has its limitations. Sometimes you’ll need to do some more complex commands, and for that, you’d need to open a terminal window. Unless you have Git-plus installed, then you can do it from within Atom.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Highlight Selected&lt;/strong&gt;&lt;br&gt;
A text highlighter that makes it easier to find all instances of the exact text. Basic, but saves time using Ctrl+F.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File Icons&lt;/strong&gt;&lt;br&gt;
File Icons is a simple icons package to help with the readability of the file tree.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ZenTabs&lt;/strong&gt;&lt;br&gt;
Some people like having a lot of tabs open. Personally, that stresses me out. ZenTabs keeps the tab count below a maximum, closing the oldest tab first.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do you have any other recommended package? Let me know in the comments!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>atom</category>
      <category>ide</category>
    </item>
    <item>
      <title>Speak it like you're playing a video game</title>
      <author>Beatriz Oliveira</author>
      <pubDate>Wed, 18 Aug 2021 13:04:29 +0000</pubDate>
      <link>https://dev.to/beatrizoliveira/speak-it-like-you-re-playing-a-video-game-86o</link>
      <guid>https://dev.to/beatrizoliveira/speak-it-like-you-re-playing-a-video-game-86o</guid>
      <description>&lt;p&gt;Recently I faced problems to develop my learning in the English language and luckily (or by chance) I came across this wonderful talk by teacher Marianna Pascal, and I found it interesting to talk about it.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Ge7c7otG2mk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Teacher Mariana Pascal teaches Malaysian students to improve their English, and dealing with several students she noticed something in common.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VRk203bg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsgod94jlllwf24p2zsi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VRk203bg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsgod94jlllwf24p2zsi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;She noticed a difference that made one student do very well at communicating and others not, some with a high level of English but couldn't communicate and others with a low level of English but great at expressing themselves.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--09f-F2VP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyutha3ecrfmprwc7ij1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--09f-F2VP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyutha3ecrfmprwc7ij1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The reason for this was that students with a low level of English were focused only on the person they were practicing the conversation with and on its outcome, others were too concerned about what mistakes not to make, or whether they were going to be judged. &lt;/p&gt;

&lt;p&gt;The idea that is passed on that we should sound like a well-spoken English (high level), causes excessive concern, overthink stresses the brain, scares us and we get stuck, all because the main focus is not being communication.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---FAfuYo6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zlleiiqybb6bixjxk70.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---FAfuYo6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zlleiiqybb6bixjxk70.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We should practice learning as if we were playing video games, even though we suck at that game, we don't care if other players are judging us, we are just having fun and focused on moving to the next level and winning the game.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rU1nkSPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8yhs33ijen6p3r7lf6v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rU1nkSPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8yhs33ijen6p3r7lf6v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The teacher also brings data that shows that for every 1 native speaker in English there are 5 non-native speakers, which reinforces that you should not worry so much about making mistakes but about fulfilling your objective, which is to communicate and be understood.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A language is not an art to be mastered, but a tool to achieve your results.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>reflections</category>
      <category>learning</category>
      <category>english</category>
    </item>
    <item>
      <title>The modern way of setting up IndexedDB</title>
      <author>Thor Würtzner</author>
      <pubDate>Wed, 18 Aug 2021 13:04:12 +0000</pubDate>
      <link>https://dev.to/thorwurtzner/the-modern-way-of-setting-up-indexeddb-5bm</link>
      <guid>https://dev.to/thorwurtzner/the-modern-way-of-setting-up-indexeddb-5bm</guid>
      <description>&lt;p&gt;&lt;em&gt;Updated for Aug 2021&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Look! What is that? Is it a plane? is it localStorage?&lt;br&gt;
No, it's IndexedDB - an unnecessarily complicated low-level API for client-side storage of lots of structured data.&lt;br&gt;
I would like to meet the person who instantly understands how to implement it into their project, because he might have the ability to crack this modern version of the Enigma Code.&lt;/p&gt;

&lt;p&gt;Pathetic jokes aside; I was required to use this pretty cool way of storing data for a school project, and decided to document how I made it work. For my future self, and any other frustrated developer who has also started yelling at their rubber ducky for not giving the answer.&lt;/p&gt;

&lt;p&gt;To make it very clear, I know very little of what goes on behind the API, but simply how I personally made it work - and how you, future Thor, might also need to.&lt;br&gt;
SO! Let's get started.&lt;/p&gt;

&lt;p&gt;IndexedDB isn't exactly a normal SQL-based relational database, but more of a javascript-based object oriented one. Ever seen this type of data before? &lt;br&gt;
&lt;code&gt;key: "value"&lt;/code&gt;&lt;br&gt;
That's what we're working with, and it's great for simple applications like the Movie PWA I was building.&lt;br&gt;
Right out the box the API works by events, but I recommend ditching that and instead installing Jake Archibald's 'IndexedDB Promised Library', which pretty much mirrors the API, and uses... you guessed it. Promises.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;Many tutorials like the one by Google, use an old version of the library, and will &lt;strong&gt;not&lt;/strong&gt; work if you follow it. Ask me how I figured that out.&lt;/p&gt;

&lt;p&gt;To understand how IndexedDB works, you first need to know the different ways of handling data therein.&lt;br&gt;
Before anything can be done, the database has to be 'opened'. I'm putting that in quotes, because you actually also need to 'open' it to create it, so you're kind of doing both at the same time.&lt;br&gt;
The way you'll probably see it imported in online tutorials is like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;idb&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;idb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You would use it like &lt;code&gt;idb.open()&lt;/code&gt;&lt;br&gt;
but since becoming a module we're instead required to import it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;openDB&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;idb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#highest-level"&gt;
  &lt;/a&gt;
  Highest Level
&lt;/h3&gt;

&lt;p&gt;To start the whole process we'll open/create the actual database&lt;br&gt;
For that create an async function somewhere and write this inside.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myDatabase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;openDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Database_name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the highest level of the database.&lt;br&gt;
You can create as many as you want, but usually there's only one of these per app.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-object-store"&gt;
  &lt;/a&gt;
  The Object Store
&lt;/h3&gt;

&lt;p&gt;This is one of the buckets that we're gonna store our data in, it's like a table in traditional relational databases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;openDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Database_name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;upgrade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name_of_store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;keyPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id_of_the_thing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
     &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need the &lt;code&gt;upgrade&lt;/code&gt; if this version of the database hasn't been opened before, which it hasn't... I don't think.&lt;br&gt;
Honestly I would look this up if you need to, because the methods of IndexedDB are quite weirdly named and you might not need it in your project. But for the sake of not breaking mine, I'm keeping it for now.&lt;/p&gt;

&lt;p&gt;Inside of that, we're creating the &lt;em&gt;store&lt;/em&gt;, also called a bucket, or table. Well, It's where we &lt;em&gt;store&lt;/em&gt; our data. Ha.&lt;br&gt;
If your project breaks, or you need a random ID for your stuff, add an autoIncrement like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name_of_store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;keyPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id_of_the_thing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;autoIncrement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#test-time"&gt;
  &lt;/a&gt;
  Test time!
&lt;/h4&gt;

&lt;p&gt;Whenever or however you call your async function, an IndexedDB should show up in your browsers dev tools. You'll find it in the application tab, right next to localStorage.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cKWY001m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df5pwyswgmb3dt0uwyt9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cKWY001m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df5pwyswgmb3dt0uwyt9.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Cool. We have a database, and a store/bucket/table ready to receive our stuff.&lt;/p&gt;

&lt;p&gt;To add our first item to the store, stay inside our &lt;code&gt;async function&lt;/code&gt;, and write like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name_of_store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;delicious&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in the broswer:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1AlfGlV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uivdqiywmvgpjl6z5m98.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1AlfGlV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uivdqiywmvgpjl6z5m98.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
We have our first piece of data!&lt;/p&gt;

&lt;p&gt;But... how do you get the thing back you ask?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myThing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name_of_store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The 1 is the id of our apple in the store. If you specified it to be something specific instead of an auto incremented one, you of course use that instead.&lt;br&gt;
The variable &lt;code&gt;myThing&lt;/code&gt; now has an object ready to be used!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bM7cNdsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvr03d4jgxyewokw029m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bM7cNdsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvr03d4jgxyewokw029m.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-code"&gt;
  &lt;/a&gt;
  Full code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myDatabase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// It's a good idea to have this error handling just in case&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;indexedDB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This browser doesn&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;t support IndexedDB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;openDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Database_name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;upgrade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name_of_store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="na"&gt;keyPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id_of_the_thing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;

   &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name_of_store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;delicious&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;

   &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myThing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name_of_store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myThing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So that kind of ends this simple setup.&lt;br&gt;
It's incredible how little help you're able to find online regarding all of this, so hopefully this will help myself in the future, and maybe some lost soul will stumble upon it as well.&lt;br&gt;
There's loads of other features that can be used, but I won't get into that right now.&lt;br&gt;
You can find more examples on Jake Archibald's library readme:&lt;br&gt;
&lt;a href="https://github.com/jakearchibald/idb"&gt;https://github.com/jakearchibald/idb&lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>webdev</category>
      <category>indexeddb</category>
      <category>storage</category>
    </item>
    <item>
      <title>Enterprise use cases for AWS Lambda</title>
      <author>Taavi Rehemägi</author>
      <pubDate>Wed, 18 Aug 2021 12:56:09 +0000</pubDate>
      <link>https://dev.to/dashbird/enterprise-use-cases-for-aws-lambda-6cp</link>
      <guid>https://dev.to/dashbird/enterprise-use-cases-for-aws-lambda-6cp</guid>
      <description>&lt;p&gt;Recently, we covered the &lt;a href="https://dashbird.io/blog/biggest-serverless-pain-points/"&gt;top enterprise serverless use cases&lt;/a&gt; for AWS Lambda. To refresh our memory, according to the &lt;a href="https://www.itopstimes.com/cloud/10-use-cases-for-serverless/"&gt;CNCF (Cloud Native Computing Foundation)&lt;/a&gt;, most commonly AWS Lambda is used for REST APIs, multimedia/image processing, CRON jobs, and stream processing. Today I'd like to cover some more complex ways some of our enterprise customers use Lambdas.&lt;/p&gt;

&lt;p&gt;During the AWS re:Invent back in 2017 &lt;a href="https://www.linkedin.com/in/raghu-chandra-bb1a861/"&gt;Raghu Chandra&lt;/a&gt;, the Global Delivery Leader for Cognizant Technology Solutions presented the six most popular use cases they implemented with their customers over the years. We're going to look into three of them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ItU5lat--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2020/10/image1-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ItU5lat--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2020/10/image1-1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data lakes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Today, many companies are implementing AWS just for the data lake situation. Amazon S3 provides an optimal foundation for a data lake because of its virtually unlimited scalability.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WhKOQca0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2020/10/image3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WhKOQca0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2020/10/image3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's look into the sample data lake's architecture above. When copying the files to the S3 from the on-premises data sources, you would want to set up a Lambda function to check the file size that has just come in before sending it to the staging layer through either DataPipeline or S3 upload. The second lambda will be used to bring up the EMR clusters to process the data to do the normalization and ETL (extract, transform, load) before we persist that into a DynamoDB or AuroraDB.&lt;/p&gt;

&lt;p&gt;So a very classic use case -- two lambda functions in a data lake scenario to detect the source file and to work with the EMR clusters or any other ETL jobs that we want to invoke to process the data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Microservices&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The second sample architectural pattern for enterprises is microservices. Depending on the certain use case, the services can be short running or long running. For a long-running service, you can deploy it onto a container on ECS but for a short running service, you can use the Lambda through an API Gateway. The REST API endpoints can be managed by API Gateway which can invoke those services on Lambda.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u4nvHaMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2020/10/image2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4nvHaMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2020/10/image2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disaster recovery&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are several ways to leverage AWS Lambda to construct a DR plan. Often when making changes to primary data center configuration like changing code, jar files or database tables it's recommended to do a backup and restore. Lambdas can be used to automate tasks like EBS snapshot and AMI creation to backup your resources to S3 when configuring EC2 instances. As in every disaster recovery scenario, you would have a primary and a secondary data center, so once the new code is available in S3 you would want to have a Lambda function to copy that code into a secondary data center and to invoke the CloudFormation scripts build the AMI and deploy it on the secondary data center.&lt;/p&gt;

&lt;p&gt;So in the fewest possible words, lambda is used to listen to the events of changes in code (in our use case S3) and in a database and to sync both with the secondary data center.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9yH2z2Q2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2020/10/image4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9yH2z2Q2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2020/10/image4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we know, serverless can never replace the whole stack when dealing with larger enterprises -- it just isn't reasonable, but it can bring a whole lot of value when combining Lambdas and other serverless services with the infrastructure in the right way. To make sure these Lambdas won't fail when doing a critical job, &lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt; can help you to ensure reliability by providing end to end observability into your stack.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>devops</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Fiction Writing Prompts: the way to Master Creative Thought</title>
      <author>lindabancher</author>
      <pubDate>Wed, 18 Aug 2021 12:43:25 +0000</pubDate>
      <link>https://dev.to/lindabancher/fiction-writing-prompts-the-way-to-master-creative-thought-23</link>
      <guid>https://dev.to/lindabancher/fiction-writing-prompts-the-way-to-master-creative-thought-23</guid>
      <description>&lt;p&gt;Fiction Writing Prompts: the way to Master Creative Thought&lt;br&gt;
An exercise in fiction writing will be rather more demanding than the other task that students usually face. If you have got never worked on such assignments before, you most likely need some fiction writing prompts and tips. So, take a glance at this text, because it'll provide you with many useful recommendations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fiction-writing-prompts-trying-to-find-ideas"&gt;
  &lt;/a&gt;
  Fiction Writing Prompts: trying to find Ideas
&lt;/h2&gt;

&lt;p&gt;The so-called writer’s block is familiar to several people. In many cases, people cannot find a decent subject for his or her short stories or novels. Sometimes, they can't come up with words that best describe their thoughts and feelings. So, the subsequent creative writing prompts will facilitate you're overcome the writer’s block:&lt;/p&gt;

&lt;p&gt;Think of something that seems fairly important, amusing, or interesting to you.&lt;/p&gt;

&lt;p&gt;Recall real-life examples that produced a powerful impression on you. Remember that you simply mustn't write on a topic that you don’t feel anything, because the readers will surely feel your indifference. This is often probably the foremost important fiction writing prompt to recollect.&lt;/p&gt;

&lt;p&gt;Don’t try and torture yourself into &lt;a href="https://essaywriter.nyc/"&gt;college essay writing service&lt;/a&gt;. If you think that that you just have to select a walk to relax a touch, do it.&lt;/p&gt;

&lt;p&gt;Write down every concept you've got in a notebook. Remember that a pen or a pencil should be your loyal companion. many folks believe that they'll easily remember good ideas that when occurred to them. Yet, forgetting is additionally an inherent part of our mind, and one shouldn’t rely an excessive amount only on memory.&lt;/p&gt;

&lt;p&gt;Read the books of other writers. Certainly, you shouldn’t slavishly emulate them, but you'll be able to learn from them what good writing is.&lt;/p&gt;

&lt;p&gt;If you propose indeed to jot down, then sit down and write. Internet or video games won’t help with writing a brief story or a poem.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_wI-3deh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duai9auwj8e3mm9n09x8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_wI-3deh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duai9auwj8e3mm9n09x8.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fiction-writing-prompts-interacting-with-readers"&gt;
  &lt;/a&gt;
  Fiction Writing Prompts: Interacting with Readers
&lt;/h2&gt;

&lt;p&gt;Some students seek prompts for fiction writing because they require to specific their ideas in a better way. If this can be your case here are several suggestions that you just should take into account:&lt;/p&gt;

&lt;p&gt;Don’t start your text with an outline of nature. Only a few writers are ready to successfully incorporate such descriptions into their text and reader often skip them anyway.&lt;/p&gt;

&lt;p&gt;Pay attention to the length of your paragraphs. Confirm that they're not too long, because otherwise, readers may simply lose track of the story.&lt;/p&gt;

&lt;p&gt;Use punctuation marks properly and don’t attempt to emulate writers like writers who could write &lt;a href="https://essaywriter.nyc/different-types-of-intellectual-property-protection-in-the-united-states/"&gt;different types of intellectual property protection in the united states&lt;/a&gt; without employing a single period. Such experiments are seldom appreciated by people, especially readers.&lt;/p&gt;

&lt;p&gt;Read your text aloud. This can be probably the most effective thanks to identifying awkward sentences and clichés.&lt;/p&gt;

&lt;p&gt;Don’t be afraid to get rid of sentences, or maybe passages if they don’t quite fit the story.&lt;/p&gt;

&lt;p&gt;Surely, there's no universal fiction writing prompt that will help an individual write a superb story or novel. However, the information offered here will allow you to avoid many mistakes that beginners usually make.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#education-definition-a-fancy-concept-in-simplest-terms"&gt;
  &lt;/a&gt;
  Education Definition: a fancy Concept in Simplest Terms
&lt;/h2&gt;

&lt;p&gt;What is education? Most of you'll readily answer that education is defined because of the knowledge and skills received at schools, colleges, and universities. However, it's a false start. Let’s check these education definitions to grasp the various meanings of the complex concept of “education”.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#education-definition-in-a-very-broad-sense"&gt;
  &lt;/a&gt;
  Education definition in a very broad sense
&lt;/h2&gt;

&lt;p&gt;In a broad sense, education is an enlightening experience. for instance, speech to your parents, reading a book, watching a movie or perhaps wandering the net can all be considered sorts of education, because these experiences are enlightening and affect the way you think that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#education-definition-during-a-narrow-sense"&gt;
  &lt;/a&gt;
  Education definition during a narrow sense
&lt;/h2&gt;

&lt;p&gt;In a narrow sense, education is defined as:&lt;/p&gt;

&lt;p&gt;the process of giving or receiving knowledge and skills at specialized institutions (also referred to as formal education);&lt;/p&gt;

&lt;p&gt;the knowledge and skills received at specialized institutions (measured by various certificates, diplomas, and degrees);&lt;/p&gt;

&lt;p&gt;the field of study that prepares teachers for his or her work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#education-definition-within-the-digital-era"&gt;
  &lt;/a&gt;
  Education definition within the digital era
&lt;/h2&gt;

&lt;p&gt;The education definitions offered by Einstein, Wilde, and Douglas are relevant today. within the era of knowledge and internet technologies, new discoveries are made a day. College curricula cannot cover everything you wish to grasp for your professional career. Even the foremost prominent instructors cannot teach you absolutely everything like &lt;a href="https://essaywriter.nyc/how-to-study-a-chapter-efficiently/"&gt;how to study a chapter efficiently&lt;/a&gt;. the aim of education within the present is to show you the way to be told, find and evaluate the required information. Therefore, you badly have to pay more attention to self-education.&lt;/p&gt;

&lt;p&gt;So, it's not that easy to offer a definition of education. In general, education is defined because of the process, results, content, and theories of teaching-learning processes allotted at institutions or on your own.&lt;/p&gt;

</description>
      <category>writing</category>
    </item>
    <item>
      <title>Build an Article Recommendation Engine With AI/ML</title>
      <author>Tyler Hawkins</author>
      <pubDate>Wed, 18 Aug 2021 12:39:13 +0000</pubDate>
      <link>https://dev.to/thawkin3/build-an-article-recommendation-engine-with-ai-ml-omc</link>
      <guid>https://dev.to/thawkin3/build-an-article-recommendation-engine-with-ai-ml-omc</guid>
      <description>&lt;p&gt;Content platforms thrive on suggesting related content to their users. The more relevant items the platform can provide, the longer the user will stay on the site, which often translates to increased ad revenue for the company.&lt;/p&gt;

&lt;p&gt;If you’ve ever visited a news website, online publication, or blogging platform, you’ve likely been exposed to a recommendation engine. Each of these takes input based on your reading history and then suggests more content you might like.&lt;/p&gt;

&lt;p&gt;As a simple solution, a platform might implement a tag-based recommendation engine — you read a “Business” article, so here are five more articles tagged “Business.” However, an even better approach to building a recommendation engine is to use &lt;strong&gt;similarity search and a machine learning algorithm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this article, we’ll build a Python Flask app that uses &lt;a href="https://www.pinecone.io/"&gt;Pinecone&lt;/a&gt; — a similarity search service — to create our very own article recommendation engine.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#demo-app-overview"&gt;
  &lt;/a&gt;
  Demo App Overview
&lt;/h2&gt;

&lt;p&gt;Below, you can see a brief animation of how our demo app works. Ten articles are initially displayed on the page. The user can choose any combination of those 10 articles to represent their reading history. When the user clicks the Submit button, the reading history is used as input to query the article database, and then 10 more related articles are displayed to the user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jCuMg-JS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4igohqgreys8pn5gx1m9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jCuMg-JS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4igohqgreys8pn5gx1m9.gif" alt="Demo app — article recommendation engine"&gt;&lt;/a&gt;&lt;/p&gt;
Demo app — article recommendation engine



&lt;p&gt;As you can see, the related articles returned are exceptionally accurate! There are 1,024 possible combinations of reading history that can be used as input in this example, and every combination produces meaningful results.&lt;/p&gt;

&lt;p&gt;So, how did we do it?&lt;/p&gt;

&lt;p&gt;In building the app, we first found a &lt;a href="https://www.kaggle.com/snapcrack/all-the-news"&gt;dataset of news articles&lt;/a&gt; from Kaggle. This dataset contains 143,000 news articles from 15 major publications, but we’re just using the first 20,000. (The full dataset that this one is derived from contains over two million articles!)&lt;/p&gt;

&lt;p&gt;We then cleaned up the dataset by renaming a couple columns and dropping those that are unnecessary. Next, we ran the articles through an embedding model to create &lt;a href="https://www.pinecone.io/learn/vector-embeddings/"&gt;vector embeddings&lt;/a&gt; — that’s metadata for machine learning algorithms to determine similarities between various inputs. We used the &lt;a href="https://nlp.stanford.edu/projects/glove/"&gt;Average Word Embeddings Model&lt;/a&gt;. We then inserted these vector embeddings into a &lt;a href="https://www.pinecone.io/learn/vector-database/"&gt;vector index&lt;/a&gt; managed by Pinecone.&lt;/p&gt;

&lt;p&gt;With the vector embeddings added to the index, we’re ready to start finding related content. When users submit their reading history, a request is made to an API endpoint that uses Pinecone’s SDK to query the index of vector embeddings. The endpoint returns 10 similar news articles and displays them in the app’s UI. That’s it! Simple enough, right?&lt;/p&gt;

&lt;p&gt;If you’d like to try it out for yourself, you can &lt;a href="https://github.com/thawkin3/article-recommendation-service"&gt;find the code for this app on GitHub&lt;/a&gt;. The &lt;code&gt;README&lt;/code&gt; contains instructions for how to run the app locally on your own machine.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#demo-app-code-walkthrough"&gt;
  &lt;/a&gt;
  Demo App Code Walkthrough
&lt;/h2&gt;

&lt;p&gt;We’ve gone through the inner workings of the app, but how did we actually build it? As noted earlier, this is a Python Flask app that utilizes the Pinecone SDK. The HTML uses a template file, and the rest of the frontend is built using static CSS and JS assets. To keep things simple, all of the backend code is found in the &lt;code&gt;app.py&lt;/code&gt; file, which we’ve reproduced in full below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Let’s go over the important parts of the &lt;code&gt;app.py&lt;/code&gt; file so that we understand it.&lt;/p&gt;

&lt;p&gt;On lines 1–14, we import our app’s dependencies. Our app relies on the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;dotenv&lt;/code&gt; for reading environment variables from the &lt;code&gt;.env&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;flask&lt;/code&gt; for the web application setup&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;json&lt;/code&gt; for working with JSON&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;os&lt;/code&gt; also for getting environment variables&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pandas&lt;/code&gt; for working with the dataset&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pinecone&lt;/code&gt; for working with the Pinecone SDK&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;re&lt;/code&gt; for working with regular expressions (RegEx)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;requests&lt;/code&gt; for making API requests to download our dataset&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;statistics&lt;/code&gt; for some handy stats methods&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sentence_transformers&lt;/code&gt; for our embedding model&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;swifter&lt;/code&gt; for working with the pandas dataframe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On line 16, we provide some boilerplate code to tell Flask the name of our app.&lt;/p&gt;

&lt;p&gt;On lines 18–20, we define some constants that will be used in the app. These include the name of our Pinecone index, the file name of the dataset, and the number of rows to read from the CSV file.&lt;/p&gt;

&lt;p&gt;On lines 22–25, our &lt;code&gt;initialize_pinecone&lt;/code&gt; method gets our API key from the &lt;code&gt;.env&lt;/code&gt; file and uses it to initialize Pinecone.&lt;/p&gt;

&lt;p&gt;On lines 27–29, our &lt;code&gt;delete_existing_pinecone_index&lt;/code&gt; method searches our Pinecone instance for indexes with the same name as the one we’re using (“article-recommendation-service”). If an existing index is found, we delete it.&lt;/p&gt;

&lt;p&gt;On lines 31–35, our &lt;code&gt;create_pinecone_index&lt;/code&gt; method creates a new index using the name we chose (“article-recommendation-service”), the “cosine” proximity metric, and only one shard.&lt;/p&gt;

&lt;p&gt;On lines 37–40, our &lt;code&gt;create_model&lt;/code&gt; method uses the &lt;code&gt;sentence_transformers&lt;/code&gt; library to work with the Average Word Embeddings Model. We’ll encode our vector embeddings using this model later.&lt;/p&gt;

&lt;p&gt;On lines 62–68, our &lt;code&gt;process_file&lt;/code&gt; method reads the CSV file and then calls the &lt;code&gt;prepare_data&lt;/code&gt; and &lt;code&gt;upload_items&lt;/code&gt; methods on it. Those two methods are described next.&lt;/p&gt;

&lt;p&gt;On lines 42–56, our &lt;code&gt;prepare_data&lt;/code&gt; method adjusts the dataset by renaming the first “id” column and dropping the “date” column. It then grabs the first four lines of each article and combines them with the article title to create a new field that serves as the data to encode. We could create vector embeddings based on the entire body of the article, but four lines will suffice in order to speed up the encoding process.&lt;/p&gt;

&lt;p&gt;On lines 58–60, our &lt;code&gt;upload_items&lt;/code&gt; method creates a vector embedding for each article by encoding it using our model. The vector embeddings are then inserted into the Pinecone index.&lt;/p&gt;

&lt;p&gt;On lines 70–74, our &lt;code&gt;map_titles&lt;/code&gt; and &lt;code&gt;map_publications&lt;/code&gt; methods create some dictionaries of the titles and publication names to make it easier to find articles by their IDs later.&lt;/p&gt;

&lt;p&gt;Each of the methods we’ve described so far is called on lines 98–104 when the backend app is started. This work prepares us for the final step of actually querying the Pinecone index based on user input.&lt;/p&gt;

&lt;p&gt;On lines 106–116, we define two routes for our app: one for the home page and one for the API endpoint. The home page serves up the &lt;code&gt;index.html&lt;/code&gt; template file along with the JS and CSS assets, and the API endpoint provides the search functionality for querying the Pinecone index.&lt;/p&gt;

&lt;p&gt;Finally, on lines 76–96, our &lt;code&gt;query_pinecone&lt;/code&gt; method takes the user’s reading history input, converts it into a vector embedding, and then queries the Pinecone index to find similar articles. This method is called when the &lt;code&gt;/api/search&lt;/code&gt; endpoint is hit, which occurs any time the user submits a new search query.&lt;/p&gt;

&lt;p&gt;For the visual learners out there, here’s a diagram outlining how the app works:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RnqHTj7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucbyjqyvu49vcivme2j1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RnqHTj7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucbyjqyvu49vcivme2j1.png" alt="App architecture and user experience"&gt;&lt;/a&gt;&lt;/p&gt;
App architecture and user experience






&lt;h2&gt;
  &lt;a href="#example-scenarios"&gt;
  &lt;/a&gt;
  Example Scenarios
&lt;/h2&gt;

&lt;p&gt;So, putting this all together, what does the user experience look like? Let’s look at three scenarios: a user interested in sports, a user interested in technology, and a user interested in politics.&lt;/p&gt;

&lt;p&gt;The sports user selects the first two articles about Serena Williams and Andy Murray, two famous tennis players, to use as their reading history. After they submit their choices, the app responds with articles about Wimbledon, the US Open, Roger Federer, and Rafael Nadal. Spot on!&lt;/p&gt;

&lt;p&gt;The technology user selects articles about Samsung and Apple. After they submit their choices, the app responds with articles about Samsung, Apple, Google, Intel, and iPhones. Great recommendations again!&lt;/p&gt;

&lt;p&gt;The politics user selects a single article about voter fraud. After they submit their choice, the app responds with articles about voter ID, the US 2020 election, voter turnout, and claims of illegal voting (and why they don’t hold up).&lt;/p&gt;

&lt;p&gt;Three for three! Our recommendation engine is proving to be incredibly useful.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We’ve now created a simple Python app to solve a real-world problem. If content sites can recommend relevant content to their users, users will enjoy the content more and will spend more time on the site, resulting in more revenue for the company. Everyone wins!&lt;/p&gt;

&lt;p&gt;Similarity search helps provide better suggestions for your users. And Pinecone, as a similarity search service, makes it easy for you to provide recommendations to your users so that you can focus on what you do best — building an engaging platform filled with content worth reading.&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Webix File Manager. A worthy web counterpart of a desktop application</title>
      <author>Serhii Pylypchuk</author>
      <pubDate>Wed, 18 Aug 2021 12:02:36 +0000</pubDate>
      <link>https://dev.to/serhiipylypchuk1991/webix-file-manager-a-worthy-web-counterpart-of-a-desktop-application-62i</link>
      <guid>https://dev.to/serhiipylypchuk1991/webix-file-manager-a-worthy-web-counterpart-of-a-desktop-application-62i</guid>
      <description>&lt;p&gt;The tendencies of recent years show that the age of desktop apps, in their classical sense, is running out. Just as at one time floppies were superseded by CD/DVDs, and the last ones were replaced by flashcards and cloud technologies, so the desktop programs will gradually be replaced by their more modern and practical web counterparts.&lt;/p&gt;

&lt;p&gt;If you develop your own web application that implies working with files, then you will need a good file manager. And here you have to decide between two reasonable options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;either create a widget from scratch, which in any case will require a lot of your time and resources&lt;/li&gt;
&lt;li&gt;or use a ready-made solution and just integrate it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, the proponents of the first option, for whom the development of an effective file system is not a difficult task, may familiarize themselves with an unconventional solution to the issue by other developers.&lt;/p&gt;

&lt;p&gt;The adherents of the second option, for whom the efficiency and result are more precious than the thorny path of achieving it, will open up for themselves a very useful and flexible tool. Further, we will talk about a complex widget for managing files from the Webix team. Let's see what they offer to us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-webix-file-manager"&gt;
  &lt;/a&gt;
  What is Webix File Manager
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://webix.com/filemanager/"&gt;&lt;strong&gt;Webix File Manager&lt;/strong&gt;&lt;/a&gt; is a JavaScript file system management solution. The widget is based on the components of the &lt;em&gt;Webix UI&lt;/em&gt; library and the &lt;em&gt;Webix Jet&lt;/em&gt; microframework. Besides the interface for working with file systems, it includes the ready-made Node JS and Golang backend solutions, as well as a service for previewing text files and pictures. For such a significant bonus, we can give the widget a big plus.&lt;/p&gt;

&lt;p&gt;The File Manager functionality is not inferior to the related desktop app. In particular, the widget allows you to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create new files/folders&lt;/li&gt;
&lt;li&gt;upload local files&lt;/li&gt;
&lt;li&gt;download files&lt;/li&gt;
&lt;li&gt;edit text files using a special editor&lt;/li&gt;
&lt;li&gt;play audio and video files using a built-in player&lt;/li&gt;
&lt;li&gt;move, sort, rename, cut, paste, copy and delete files/folders.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above-mentioned functionality is implemented through the convenient and stylish interface that displays the structure of files and folders received from the server. Visually the widget consist of 3 parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Toolbar&lt;/li&gt;
&lt;li&gt;Left panel&lt;/li&gt;
&lt;li&gt;Right panel.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tEIy94yS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nh4vhzr14mkp3h8axreb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tEIy94yS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nh4vhzr14mkp3h8axreb.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;left panel&lt;/em&gt; of the application displays the main directory tree. Here you can look through the tree structure of folders, as well as create or upload new folders and files using the button at the very top of the panel. &lt;/p&gt;

&lt;p&gt;If you select any folder in the directory tree, its content will be displayed on the &lt;em&gt;right panel&lt;/em&gt;. There you can work with files and folders via the context menu, sort and move them, play audio and video files, edit text files, as well as navigate through the directory tree using the navigation bar. Besides, you can establish a convenient display mode.&lt;/p&gt;

&lt;p&gt;It is worth noting here that the widget allows you to display the folder content as a table and cards. But if you're feeling nostalgic for the classic Total Commander interface, you can use the special &lt;em&gt;old-school&lt;/em&gt; mode, which splits the &lt;em&gt;right panel&lt;/em&gt; into two separate parts. This is very comfortable when you need to work with two directories at the same time. There are corresponding buttons on the Toolbar to switch between these display modes.&lt;/p&gt;

&lt;p&gt;Among other things, you can search for the items you need via the search bar and apply a preview mode of a specific file using the related control. Both of them are also on the Toolbar.&lt;/p&gt;

&lt;p&gt;But the most important thing is that you can customize the basic functionality and interface, change it, add your own, or remove those features and components that are not needed. We can give the widget one more point for its flexibility and customization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-the-widget-with-basic-functionality"&gt;
  &lt;/a&gt;
  How to Create the Widget with Basic Functionality
&lt;/h2&gt;

&lt;p&gt;Like other &lt;a href="https://webix.com/widget/complex-widgets/"&gt;complex widgets&lt;/a&gt;, File Manager is an advanced extension of the Webix UI library. It is distributed with the Pro version of the library but is not included in it. The component can be purchased as a part of one of the &lt;a href="https://webix.com/filemanager/#licensing"&gt;license packages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But you can &lt;a href="https://webix.com/filemanager/download.html"&gt;download&lt;/a&gt; the trial Pro version with all complex widgets and use it for free for 30 days. This will allow you to try in practice all the advantages and flexibility of working with the File Manager and decide whether it suits you or not. As for me, that is a rhetorical question.&lt;/p&gt;

&lt;p&gt;Since the File Manager is a library extension, for using it you need first connect the Webix resources. After the library is connected, you have to specify the corresponding &lt;strong&gt;&lt;em&gt;.js&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;.css&lt;/em&gt;&lt;/strong&gt; files of the widget itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Webix Library --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"codebase/webix.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"codebase/webix.css"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- File Manager Widget --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"codebase/filemanager.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"codebase/filemanager.css"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you should call the widget' constructor wrapped into the &lt;code&gt;webix.ready(…)&lt;/code&gt; method, to start executing the code only after the page is fully loaded.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;webix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt; &lt;span class="nx"&gt;Manager&lt;/span&gt; &lt;span class="nx"&gt;Constructor&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
         &lt;span class="nx"&gt;webix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;filemanager&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;some_backend&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
         &lt;span class="p"&gt;});&lt;/span&gt;
       &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, to connect the file manager all you need to do is write a few lines of code. Now you can manage the files and folders via the user-friendly interface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-configure-the-widget"&gt;
  &lt;/a&gt;
  How to Configure the Widget
&lt;/h2&gt;

&lt;p&gt;File Manager is a complex widget. It is like a constructor that consists of many separate Webix components. Each of them has its own API, with which you can set its view and behavior. In addition to the nested component settings, the widget includes its own configuration.&lt;/p&gt;

&lt;p&gt;It is worth clarifying here that for configuring the widget plain and convenient JSON syntax is used. All you need to do is to specify the necessary values for the related properties.&lt;/p&gt;

&lt;p&gt;When configuring the app, you need to provide a link to the server script (your own or built-in), to load the data for visualizing the file system. For this, the widget has the &lt;strong&gt;&lt;em&gt;url&lt;/em&gt;&lt;/strong&gt; property. It is worth noting here that the widget won't download all the data at once, but only the main directory and the initially opened folder. The content of other directories will be loaded as needed (upon opening) and cached.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;filemanager&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your_backend&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// your server script&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you do not need to edit text files and play audio/video files, you can just disable the built-in editor and player. For this, you have to use the corresponding &lt;strong&gt;&lt;em&gt;editor&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;player&lt;/em&gt;&lt;/strong&gt; properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;filemanager&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your_backend&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// disable built-in editor&lt;/span&gt;
  &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;// disable built-in player&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, files and folders are displayed as a table. But you can display the current folder content as cards using the &lt;strong&gt;&lt;em&gt;mode&lt;/em&gt;&lt;/strong&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;filemanager&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your_backend&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// ID for access the widget&lt;/span&gt;
  &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cards&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// default display mode&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Besides the main parameters, the widget has reactive properties. They store the application state and allow changing it dynamically. Here are some of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;mode&lt;/em&gt;&lt;/strong&gt; (string) - stores the current display mode&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;path&lt;/em&gt;&lt;/strong&gt; (string) - stores the path to the currently open folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For working with app state the library provides the &lt;code&gt;getState()&lt;/code&gt; method. With its help, you can get an object with reactive properties and change its values if needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// returns an object with the current state of the File manager&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can change the default &lt;em&gt;“cards”&lt;/em&gt; mode to the &lt;em&gt;“grid”&lt;/em&gt; mode for displaying the files and folders as a table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// switch the widget to the "grid" mode&lt;/span&gt;
&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you know how to configure the widget and manage its state. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-localize-the-widget"&gt;
  &lt;/a&gt;
  How to Localize the Widget
&lt;/h2&gt;

&lt;p&gt;Localization is a nice bonus provided by the file manager. By default, all widget labels are displayed in English. But you can easily add your own and switch between them if needed.&lt;/p&gt;

&lt;p&gt;To translate labels into the desired language, you can create your own locale and specify the necessary translations inside of its object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fileManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locales&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;custom_ru&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Files&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Add New&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Add new&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My Files&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My files&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the custom locale is ready, you can apply it to the entire application. For this, you need to use the &lt;strong&gt;&lt;em&gt;locale&lt;/em&gt;&lt;/strong&gt; property. In the object of this property, you can set your locale value to the &lt;strong&gt;&lt;em&gt;lang&lt;/em&gt;&lt;/strong&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;webix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ui&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;filemanager&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your_backend&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
      &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;custom_ru&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But that's not all. You can also create several locales and switch between them dynamically. To do this, you need to access the built-in &lt;strong&gt;&lt;em&gt;locale&lt;/em&gt;&lt;/strong&gt; service using the &lt;code&gt;getService()&lt;/code&gt; method, and call the &lt;code&gt;setLang()&lt;/code&gt; method for it. The method takes the name of the required locale as a parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;locale&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLang&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* desired locale */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ru, en, ua …&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all the magic. It should be borne in mind that Webix developers don’t provide ready-made files with locales. But the library has a special platform where users can share their locales. These translations can be found on the &lt;a href="https://github.com/webix-hub/locales"&gt;webix-hub&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;You can also share your work by pushing it to the related repository on this platform. And we can give the widget one more huge plus for the localization and its simplicity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-customize-file-manager"&gt;
  &lt;/a&gt;
  How to Customize File Manager
&lt;/h2&gt;

&lt;p&gt;If you are not quite satisfied with the abilities of the basic setting, you can customize the widget on your own (change some part of the interface or add/remove any functionality). But for this, you need to understand how the app code works.&lt;/p&gt;

&lt;p&gt;The widget structure is built as an SPA application based on the &lt;em&gt;MV*&lt;/em&gt; pattern of the &lt;em&gt;Webix Jet&lt;/em&gt; framework. The app interface (&lt;em&gt;View&lt;/em&gt;) is separated from its business logic (&lt;em&gt;Model&lt;/em&gt;). Each element of the interface is an independent component of the Webix library (&lt;em&gt;button, datatable, toolbar,&lt;/em&gt; and others). Significant parts of the interface (&lt;em&gt;toolbar, left panel,&lt;/em&gt; and others), consisting of the components mentioned above, are stored in the separated classes inherited from the &lt;em&gt;JetView&lt;/em&gt; class. And the logic (model) is also stored separately in classes named &lt;strong&gt;“services”&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;To change the widget interface and functionality, you have to be ready to dig a little in its code. And for this, you should understand at least the main aspects of working with the Webix Jet framework. If you are familiar with JavaScript, you won’t have much difficulty.&lt;/p&gt;

&lt;p&gt;Read the "&lt;a href="https://webix-ui.medium.com/webix-jet-framework-through-the-eyes-of-a-freshman-part-1-composition-and-navigation-60976f86d74a"&gt;&lt;strong&gt;Webix Jet framework through the eyes of a freshman&lt;/strong&gt;&lt;/a&gt;" article to find out the basic principles of working with the framework or refer to the documentation for more detailed information.&lt;/p&gt;

&lt;p&gt;Since you will need to learn a new framework, we can give the widget a small minus for this little complication. But in any case, such knowledge will not be superfluous and only expand the range of your competencies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-interface-customization"&gt;
  &lt;/a&gt;
  The Interface Customization
&lt;/h3&gt;

&lt;p&gt;Now let's get down to practice. As I mentioned above, each element of the interface is an independent component, and each significant part of the interface is a separate class consisting of these components. With this in mind, you can easily set, customize, add new, or even remove that part of the interface (or its component) you don’t need.&lt;/p&gt;

&lt;p&gt;Let's say you want to remove the buttons for switching display modes placed on the Toolbar.&lt;/p&gt;

&lt;p&gt;First, you need to create a new class by inheriting it from the class that stores the toolbar interface. Then, you should hide the buttons using the &lt;code&gt;hide()&lt;/code&gt; method. It should be borne in mind here that the developers don’t recommend removing "unnecessary" components. They can be related to the internal logic of the app and their removal may lead to the error.&lt;/p&gt;

&lt;p&gt;All manipulations with the interface need to be done inside the &lt;code&gt;init()&lt;/code&gt; method. It is inherited from the &lt;em&gt;JetView&lt;/em&gt; class and is responsible for displaying items when initializing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CustomTopBar&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;fileManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;topbar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;// default logic&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// removing a component can lead to the errors&lt;/span&gt;
    &lt;span class="c1"&gt;// hiding a component is more safety&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you need to replace the parent class you inherited from with a new one instead. This can be done using the &lt;strong&gt;&lt;em&gt;override&lt;/em&gt;&lt;/strong&gt; property in the widget constructor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;filemanager&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...,&lt;/span&gt;
    &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cards&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// display mode by default&lt;/span&gt;
    &lt;span class="nx"&gt;override&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="nx"&gt;fileManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;topbar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CustomTopBar&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how you can change the widget interface. In my opinion, there is nothing supernatural here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-logic-customization"&gt;
  &lt;/a&gt;
  The Logic Customization
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;Webix Jet&lt;/em&gt; services are separate classes, which consist of methods for controlling the widget logic. Unlike the &lt;em&gt;View&lt;/em&gt; classes of the interface, the service methods are available for the entire application. Such a method can be called both by the interface itself and by other services. You can customize any service by changing its methods or adding new ones.&lt;/p&gt;

&lt;p&gt;Let's assume that you have your own server-side logic, where the URL and API for working with data are different from the built-in ones. In this case, you need to make some changes to a special &lt;em&gt;Backend&lt;/em&gt; service.&lt;/p&gt;

&lt;p&gt;By default, the request for uploading files of the selected folder includes the &lt;strong&gt;&lt;em&gt;files&lt;/em&gt;&lt;/strong&gt; segment and looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.webix.com/filemanager-backend/files?Id=%2FNewFolder"&gt;https://docs.webix.com/filemanager-backend/files?Id=%2FNewFolder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The value of the &lt;strong&gt;id&lt;/strong&gt; parameter in the query string is the &lt;strong&gt;id&lt;/strong&gt; of the folder in which you want to load the data.&lt;/p&gt;

&lt;p&gt;But since you have your own backend, the segment may differ from the built-in one and will look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.webix.com/filemanager-backend/custom_segment?Id=%2FNewFolder"&gt;https://docs.webix.com/filemanager-backend/custom_segment?Id=%2FNewFolder&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To change this segment, you should slightly modify the &lt;code&gt;files()&lt;/code&gt; method of the &lt;em&gt;Backend&lt;/em&gt; service.&lt;/p&gt;

&lt;p&gt;First, you need to create a new class by inheriting it from the class of the Backend service. Then you should change the &lt;code&gt;files()&lt;/code&gt; method by passing to it the desired segment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CustomBackendService&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;filemanager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;custom_segment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, as in the case with the interface, you need to replace the parent class you inherited from with a new one. This can be done using the well-known &lt;strong&gt;&lt;em&gt;override&lt;/em&gt;&lt;/strong&gt; property in the widget constructor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;webix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;filemanager&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your_backend&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;override&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="nx"&gt;filemanager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CustomBackendService&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Redefining the inner classes in this way, you can change the widget interface and logic on your own. You can find out more information with related samples on the &lt;a href="https://docs.webix.com/filemanager__howto.html"&gt;how-to&lt;/a&gt; page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, I have introduced you to the File Manager widget and its main features. As you can see, it is a very flexible and functional component. You can set and customize it as well as integrate it into any framework or library you prefer. &lt;/p&gt;

&lt;p&gt;It is also worth mentioning here that the widget is distributed along with the more advanced &lt;a href="https://webix.com/widgets/document-manager/"&gt;Document Manager&lt;/a&gt; solution. Both widgets are very similar in design and capabilities, but the latter one has several additional benefits. For example, the document manager allows you to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;comment on the documents&lt;/li&gt;
&lt;li&gt;mark the documents as favorites&lt;/li&gt;
&lt;li&gt;view the history of recently opened documents&lt;/li&gt;
&lt;li&gt;share the documents with others&lt;/li&gt;
&lt;li&gt;remove the documents to the trash.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you prefer to use more advanced functionality, you can choose the &lt;em&gt;Document Manager&lt;/em&gt; widget. But if this functionality is not required, you may give preference to the simplified &lt;em&gt;File Manager&lt;/em&gt; widget. In any case, the final word is yours.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>Page Object Model in Cypress</title>
      <author>Dilpreet Johal</author>
      <pubDate>Wed, 18 Aug 2021 11:45:16 +0000</pubDate>
      <link>https://dev.to/automationbro/page-object-model-in-cypress-h9i</link>
      <guid>https://dev.to/automationbro/page-object-model-in-cypress-h9i</guid>
      <description>&lt;p&gt;In this tutorial, we will cover how to setup Page Object Model in Cypress. We will also cover why Cypress team suggests not to use Page Object Model.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-page-object-model-pom"&gt;
  &lt;/a&gt;
  What is Page Object Model (POM)
&lt;/h3&gt;

&lt;p&gt;POM is a popular design pattern that helps in reducing code duplication and improves test maintenance. You do that by storing page related elements in a separate file which gets called by your tests.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#why-not-to-use-pom-per-cypress"&gt;
  &lt;/a&gt;
  Why NOT to use POM per Cypress?
&lt;/h3&gt;

&lt;p&gt;In an &lt;a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/"&gt;article&lt;/a&gt; published by Cypress team back in 2019, they pointed out that instead of using POM you should rather use App Actions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are App Actions?&lt;/strong&gt;&lt;br&gt;
Instead of interacting through the UI, App Actions lets you dispatch actions directly through the application internal logic by using the &lt;code&gt;window.Cypress&lt;/code&gt; object. This way you end up saving a lot more time by setting your app in a certain state rather than getting to that state via UI. &lt;/p&gt;

&lt;p&gt;For ex: Use App actions to set your app in a logged in state if you need a user that needs to do something after it's logged in. Traditionally, you would use UI to first login and then execute your test.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#my-opinion"&gt;
  &lt;/a&gt;
  My Opinion
&lt;/h3&gt;

&lt;p&gt;I personally feel you can use both, use Page objects to store page related details and also access Application code to speed up your tests as well (if that is an option for you). &lt;br&gt;
 &lt;br&gt;
Cypress works best if you have access to your code base and you are testing application in the pre-PROD mode (dev/qa/stage). For example, in my &lt;a href="https://practice.automationbro.com/"&gt;test app&lt;/a&gt;, it’s a Wordpress application and I don’t have access to the application code so I cant use App actions but I can still go ahead and use POM. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#how-to-setup-pom-in-cypress"&gt;
  &lt;/a&gt;
  How to setup POM in Cypress?
&lt;/h3&gt;

&lt;p&gt;Setting up POM in Cypress is pretty straightforward, you just need to setup a class that contains your web elements and page methods. Let's take a look at an example - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F8UecdP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scmyszi0vsddszhzdmb8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F8UecdP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scmyszi0vsddszhzdmb8.png" alt="Cypress Page Class"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the screenshot above, I have created a &lt;code&gt;HomePage&lt;/code&gt; class with getter functions that are calling the web elements using &lt;code&gt;Cy.get()&lt;/code&gt;. And, it also has a page method that is going to the base url of the website. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calling Page class in the tests&lt;/strong&gt;&lt;br&gt;
Now, to access the Page related elements and methods, you can simply import it your test file and call the relevant method.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HomePage.visitPage()&lt;/code&gt;&lt;br&gt;
&lt;code&gt;HomePage.getStartedBtn.click()&lt;/code&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Setting up POM is a common design pattern in the test automation industry, so as long as you implement it correctly I personally don't see any harm in NOT using POM. At the same time, I agree with Cypress team regarding App Actions as that can significantly improve your tests speed as well as stability.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#check-out-the-video-below-to-learn-more-about-how-to-setup-pom-in-cypress%E2%80%8A%E2%80%8A"&gt;
  &lt;/a&gt;
  Check out the video below to learn more about how to setup POM in Cypress - 
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uPoyTy11lPE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;📧 Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this as well as free access to a Private Facebook community&lt;/p&gt;

&lt;p&gt;👍 You can follow my content here as well - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/automationbro"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/company/automation-bro"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;I love coffees! And, if this post helped you out and you would like to support my work, you can do that by clicking on the button below and buying me a cup of coffee -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/automationbro"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUHFj71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4aw2ub3f4qkyjk0ivwt4.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also support me by liking and sharing this content.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>testing</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>3 methods for testing JavaScript Lambda functions</title>
      <author>K</author>
      <pubDate>Wed, 18 Aug 2021 11:45:12 +0000</pubDate>
      <link>https://dev.to/dashbird/3-methods-for-testing-javascript-lambda-functions-19po</link>
      <guid>https://dev.to/dashbird/3-methods-for-testing-javascript-lambda-functions-19po</guid>
      <description>&lt;p&gt;&lt;em&gt;This article will discuss the different options for testing your AWS Lambda functions; the focus will be on JavaScript.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/what-is-faas-function-as-a-service/"&gt;Function as a service&lt;/a&gt; (FaaS) offerings like AWS Lambda are a blessing for software development. They &lt;strong&gt;remove many of the issues&lt;/strong&gt; that come with the setup and maintenance of backend infrastructure. With much of the upfront work taken out of the process, they also &lt;strong&gt;lower the barrier to start a new service&lt;/strong&gt; and encourage modularization and encapsulation of software systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testing distributed systems&lt;/strong&gt; and &lt;strong&gt;serverless cloud infrastructures&lt;/strong&gt; specifically is always a source of long discussions. Some people prefer the &lt;strong&gt;local approach&lt;/strong&gt; of emulating everything around your own code because it gives you fast iterations. Others say it gives you a false sense of safety because you're not really testing the actual services involved later when you deploy into your production environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-needs-to-be-tested"&gt;
  &lt;/a&gt;
  What Needs to be Tested?
&lt;/h2&gt;

&lt;p&gt;First of all, &lt;strong&gt;your own code&lt;/strong&gt;, obviously.&lt;/p&gt;

&lt;p&gt;But the main part in the architecture where FaaS really shines is &lt;strong&gt;integration code&lt;/strong&gt;. Lambda can be seen as versatile glue between all the managed services AWS, and other vendors, have to offer. So, the &lt;strong&gt;main focus of tests isn't just your code&lt;/strong&gt; but also how it &lt;strong&gt;integrates with different services&lt;/strong&gt;. Having a Lambda that just reads an event and writes an output will be a rare occasion; usually, it will access one or multiple other services like S3, Step Functions, or RDS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#smoke-tests"&gt;
  &lt;/a&gt;
  Smoke Tests
&lt;/h2&gt;

&lt;p&gt;Smoke tests are a &lt;strong&gt;straightforward type of test&lt;/strong&gt;. They only check that your &lt;strong&gt;code doesn't crash when you try to run it&lt;/strong&gt;. This means smoke tests &lt;strong&gt;don't check if your code works correctly&lt;/strong&gt;. It could be that you have a bug in some if-branch anywhere that isn't executed with the test. It doesn't test for logic issues either.&lt;/p&gt;

&lt;p&gt;In terms of a &lt;strong&gt;web server&lt;/strong&gt;, a smoke test would mean starting the server. No request gets sent to the server; just starting the server and see if it crashes. This is easy to do, and if it fails, you can save time running any other test.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;Lambda&lt;/strong&gt;, the action of starting and handling an event is the same because Lambdas only run when they handle an event and get frozen or retired right after they did their work. This means a smoke test would mean &lt;strong&gt;sending an event to the Lambda function&lt;/strong&gt; to see if it throws an error. The simplest even you think your Lambda function should be able to handle would do. &lt;/p&gt;

&lt;p&gt;A smoke test can be done via the AWS CLI with the following command:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PXderMnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kodn3matj7kp48pup9cf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PXderMnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kodn3matj7kp48pup9cf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find the copyable code snippets, &lt;a href="https://dashbird.io/blog/test-javascript-lambda-functions/"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For automation purposes, you can add such CLI commands to a bash script and simply execute it before every other test runs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unit-tests"&gt;
  &lt;/a&gt;
  Unit Tests
&lt;/h2&gt;

&lt;p&gt;Unit tests are a bit more &lt;strong&gt;complex&lt;/strong&gt; than smoke tests because they actually &lt;strong&gt;test the logic of your function&lt;/strong&gt;. Since most errors usually happen when integrating your code with other services, they don't bring that much value compared to integration tests.&lt;/p&gt;

&lt;p&gt;But sometimes, you have very complex logic inside a Lambda function that doesn't need to access other services. If it does access other services, the interaction with them is very basic.&lt;/p&gt;

&lt;p&gt;To get unit tests going, your first step is &lt;strong&gt;extracting the logic you want to test&lt;/strong&gt; into a JavaScript module. &lt;/p&gt;

&lt;p&gt;Let's look at the following example of a Lambda function that adds or substracts two numbers depending on an operation argument.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TPtGFcBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4gdbu7534wyt7l0nrud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TPtGFcBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4gdbu7534wyt7l0nrud.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find the copyable code snippets, &lt;a href="https://dashbird.io/blog/test-javascript-lambda-functions/"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is a contrived example, but still, the function is harder to test than it needs to be. We would have to create an event object containing the &lt;code&gt;queryStringParameters&lt;/code&gt; field, which would require an &lt;code&gt;operation&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, and &lt;code&gt;y&lt;/code&gt; fields to be present.&lt;/p&gt;

&lt;p&gt;If we encapsulate this logic in a plain JavaScript function that only requires three arguments, things would be simpler. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ESgOtM9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnuyl2rdnd04vtvizdim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESgOtM9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnuyl2rdnd04vtvizdim.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find the copyable code snippets, &lt;a href="https://dashbird.io/blog/test-javascript-lambda-functions/"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this refactored example, we can now test the logic independently from the Lambda handler function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integration-tests"&gt;
  &lt;/a&gt;
  Integration Tests
&lt;/h2&gt;

&lt;p&gt;Integration tests are the &lt;strong&gt;most important part of testing FaaS&lt;/strong&gt;. I said it before, and I will repeat it, &lt;strong&gt;AWS Lambda&lt;/strong&gt; is mostly used to &lt;strong&gt;glue together managed cloud services&lt;/strong&gt;, and the parts where your Lambda function interacts with other services are the &lt;strong&gt;most crucial test targets&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, there are two main ways of integration testing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Test with real infrastructure&lt;/li&gt;
&lt;li&gt;  Test by emulating that infrastructure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They both have their &lt;strong&gt;pros and cons&lt;/strong&gt;. For example, if testing with &lt;strong&gt;mocked-up&lt;/strong&gt; infrastructure is &lt;strong&gt;faster and cheaper&lt;/strong&gt;, but if your mocks are wrong, you're tests are wrong too. Testing with &lt;strong&gt;real infrastructure&lt;/strong&gt; gives you &lt;strong&gt;more confidence but costs more money&lt;/strong&gt; and can be quite &lt;strong&gt;slow&lt;/strong&gt; if you need to provide it for each test run.&lt;/p&gt;

&lt;p&gt;Also, there is "no free lunch" in writing integration tests. The time you might save when you don't have to meddle with real infrastructure will sink into keeping your mocked-up infrastructure up-to-date. &lt;strong&gt;Martin Fowler&lt;/strong&gt; wrote &lt;a href="https://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs"&gt;an awesome article&lt;/a&gt; about everything that goes into mock tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-with-real-infrastructure"&gt;
  &lt;/a&gt;
  Testing with Real Infrastructure
&lt;/h2&gt;

&lt;p&gt;Testing with real infrastructure only makes sense when you are &lt;strong&gt;using infrastructure as code&lt;/strong&gt; (IaC) tool. Otherwise, you &lt;strong&gt;waste too much time&lt;/strong&gt; provisioning your resources manually. Especially serverless applications are prone to contain many small services.&lt;/p&gt;

&lt;p&gt;AWS offers multiple IaC tools: &lt;a href="https://aws.amazon.com/cloudformation/"&gt;CloudFormation&lt;/a&gt;, &lt;a href="https://aws.amazon.com/serverless/sam/"&gt;SAM&lt;/a&gt;, and &lt;a href="https://aws.amazon.com/cdk/"&gt;the CDK&lt;/a&gt; are a few of them that are very well integrated with the AWS ecosystem. &lt;/p&gt;

&lt;p&gt;When you have your tool of choice ready, you can then use it to deploy to test and production with one IaC definition. This way, you can be sure your testing environment matches production.&lt;/p&gt;

&lt;p&gt;Now, the tests would check the inputs and outputs of your Lambda functions.&lt;/p&gt;

&lt;p&gt;For a &lt;strong&gt;synchronous invocation of Lambda&lt;/strong&gt;, which happens with API-Gateway, for example, this means the events that go into your Lambda function and the response that function returns. For &lt;strong&gt;asynchronous invocations&lt;/strong&gt;, there are no values returned.&lt;/p&gt;

&lt;p&gt;The more interesting part of these tests is &lt;strong&gt;how your function accesses other services&lt;/strong&gt;. If your function reads some data from DynamoDB for authentication, before it does its work, you need to check that that data is accessible and correct*&lt;em&gt; before running the test&lt;/em&gt;&lt;em&gt;. If you write to S3, you must access S3 to check if everything went right&lt;/em&gt;&lt;em&gt; after running the test&lt;/em&gt;*.&lt;/p&gt;

&lt;p&gt;You can use the same &lt;a href="https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/installing-jssdk.html"&gt;AWS SDK for JavaScript&lt;/a&gt; to check these services inside your tests. If you choose to run your tests on AWS Lambda, too, it will even be preinstalled.&lt;/p&gt;

&lt;p&gt;Let's look at how such an integration test could look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DVHiKGCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux6f3qap1b8gov1sorsy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DVHiKGCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux6f3qap1b8gov1sorsy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find the copyable code snippets, &lt;a href="https://dashbird.io/blog/test-javascript-lambda-functions/"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This example is a &lt;strong&gt;Lambda function&lt;/strong&gt; &lt;strong&gt;that tests another Lambda function&lt;/strong&gt;. It creates a user document in a DynamoDB table with admin permissions. Then it invokes a Lambda function with event arguments. After the function was invoked, it checks that a file in S3 was created. And finally, it cleans up all the test-related data.&lt;/p&gt;

&lt;p&gt;This is only a basic implementation, including &lt;a href="https://www.npmjs.com/package/tape"&gt;a testing framework like tape&lt;/a&gt; to make things more convenient. But it illustrates what even a simple integration test requires to work.&lt;/p&gt;

&lt;p&gt;You can test, retest applications all you want but once that baby goes Live, s*#@ will happen. It's just how it is. You'll be able to use &lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt;'s function view to see exactly how your application is behaving and when the app goes sideways, you'll be able to use the Incident management platform you can see exactly what broke and where.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kp5Ry-dE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2021/08/errorview-2019.02.13-1-1024x492.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kp5Ry-dE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2021/08/errorview-2019.02.13-1-1024x492.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This article only talked about &lt;strong&gt;three basic methods to test your functions&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  smoke tests&lt;/li&gt;
&lt;li&gt;  unit tests&lt;/li&gt;
&lt;li&gt;  integration tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are even more test types out there that have a much bigger scope, like E2E tests or test specific behavior of your functions like performance tests.&lt;/p&gt;

&lt;p&gt;To get started, you should be good to go with &lt;strong&gt;smoke and integration tests&lt;/strong&gt;. Make sure your Lambda doesn't crash right at the start of an invocation and then test that it actually accurately uses other services.&lt;/p&gt;

&lt;p&gt;If you have very complex Lambda functions used for specific logic and not just to integrate multiple services, try to encapsulate that logic and run unit tests. This way, you can iterate faster and cheaper.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Further reading:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/how-to-test-serverless-applications/"&gt;How to test serverless applications?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/log-based-monitoring-for-aws-lambda/"&gt;Log-based monitoring for AWS Lambda&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/sizing-cloud-resources-mistakes/"&gt;10 mistakes to avoid when sizing your cloud resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/why-serverless-apps-fail-and-how-to-design-resilient-architectures/"&gt;Why serverless apps fail and how to design resilient architectures?&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
