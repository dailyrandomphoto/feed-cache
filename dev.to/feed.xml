<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 ü•∞üò≥Trending projects on GitHub for web developersüíï</title>
      <author>Code</author>
      <pubDate>Mon, 11 Oct 2021 04:57:36 +0000</pubDate>
      <link>https://dev.to/coderzs/10-trending-projects-on-github-for-web-developers-24a1</link>
      <guid>https://dev.to/coderzs/10-trending-projects-on-github-for-web-developers-24a1</guid>
      <description>&lt;p&gt;¬†&lt;span&gt;Ultra is a web framework that leans hard into your browser's native features. Embrace the future of ES Modules, Import Maps, and Web Streams. All while supporting some of the non-standards that many normal people love for some reason (JSX and TypeScript).¬†&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More : &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/15-trending-projects-on-github-for-web-developers/&amp;amp;ved=2ahUKEwjAv-Onx8HzAhXJ4jgGHXQoBbAQFnoECAQQBQ&amp;amp;usg=AOvVaw1tzvt3qcNHOwLUl5Faka7s"&gt;10 Trending projects on GitHub for web developers&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 üòç Magical JavaScript Tips for Every Web Developer</title>
      <author>Code</author>
      <pubDate>Mon, 11 Oct 2021 04:51:50 +0000</pubDate>
      <link>https://dev.to/coderzs/10-magical-javascript-tips-for-every-web-developer-12l7</link>
      <guid>https://dev.to/coderzs/10-magical-javascript-tips-for-every-web-developer-12l7</guid>
      <description>&lt;p&gt;&lt;span&gt;In this article, we will discuss the 10 useful JavaScript tips for every web developer to save their valuable and precious time.¬†&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/magical-javascript-tips-for-every-web-developer/&amp;amp;ved=2ahUKEwiBo9Ppz73zAhWIzDgGHcXSCrAQFnoECAQQBQ&amp;amp;usg=AOvVaw1v-MANPn9WvzeIHX7EYsM8"&gt;10 Magical JavaScript Tips for Every Web Developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 Awesome üòç Github Repos Every Web Developer Should Know</title>
      <author>Code</author>
      <pubDate>Mon, 11 Oct 2021 04:51:11 +0000</pubDate>
      <link>https://dev.to/coderzs/10-awesome-github-repos-every-web-developer-should-know-fb</link>
      <guid>https://dev.to/coderzs/10-awesome-github-repos-every-web-developer-should-know-fb</guid>
      <description>&lt;p&gt;&lt;span&gt;Here I list 10 excellent JavaScript based GitHub resources that will help you to understand the language better and help you to write clean code. This list is based on my personal preference.¬†&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ReadUI&amp;amp;quot More: &lt;b&gt;&lt;a href="https://news.google.com/articles/CAIiEHRNZDbK-6L3wLhhd1mvgX8qGQgEKhAIACoHCAow7-ynCzDc978DMKOIlgc?hl=en-US&amp;amp;gl=US&amp;amp;ceid=US%3Aen"&gt;10 Awesome Github Repos Every Web Developer Should Know&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>18 amazing ü§© GitHub repositories that will help you ü™Ñ make a Beautiful Project</title>
      <author>Code</author>
      <pubDate>Mon, 11 Oct 2021 04:43:42 +0000</pubDate>
      <link>https://dev.to/coderzs/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-100p</link>
      <guid>https://dev.to/coderzs/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-100p</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Today I would like to give examples of good GitHub repositories that will help you implement complex animations, as well as useful functions in your projects.&lt;/p&gt;
&lt;p&gt;So let's get started¬†&lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/10-awesome-github-repos-every-web-developer-should-know/&amp;amp;ved=2ahUKEwiw1e_qpqbzAhU78HMBHVvBAWkQFnoECBAQAQ&amp;amp;usg=AOvVaw1YdY91hlP3suK6HGMF0MXW"&gt;18 amazing ü§© GitHub repositories that will help you ü™Ñ make a Beautiful Project&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 VS Code extensions every Frontend Developer should use</title>
      <author>Code</author>
      <pubDate>Mon, 11 Oct 2021 04:43:08 +0000</pubDate>
      <link>https://dev.to/coderzs/10-vs-code-extensions-every-frontend-developer-should-use-dge</link>
      <guid>https://dev.to/coderzs/10-vs-code-extensions-every-frontend-developer-should-use-dge</guid>
      <description>&lt;p&gt;Hello everyone, my name is Vansh and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code. Let's Jump in!¬†&lt;/p&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>Thank you to over 9000 #golang followers</title>
      <author>Stefan Wuthrich</author>
      <pubDate>Mon, 11 Oct 2021 04:34:59 +0000</pubDate>
      <link>https://dev.to/golangch/thank-you-to-over-9000-golang-followers-131k</link>
      <guid>https://dev.to/golangch/thank-you-to-over-9000-golang-followers-131k</guid>
      <description>&lt;p&gt;Yesterday I reached 9000 Followers for my &lt;a href="https://twitter.com/golangch"&gt;@golangch&lt;/a&gt; Twitter account.&lt;/p&gt;

&lt;p&gt;Some asked me, how I reached this number.&lt;br&gt;
Well, there is no strategy or trick. I tweet since Jan 2017, as a human (there are a lot of bots out there...) about Go related stuff, mainly libs/packages/apps written in/for Golang and interesting articles about Go.&lt;br&gt;
Rarely I use it to promote Go related Jobs from my Golang based &lt;a href="https://golangjob.xyz"&gt;Golang Job Board&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to all Gophers following me.&lt;/p&gt;

</description>
      <category>go</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Lambda Expressions in Java</title>
      <author>Josh</author>
      <pubDate>Mon, 11 Oct 2021 02:00:16 +0000</pubDate>
      <link>https://dev.to/jryther/lambda-expressions-in-java-5gme</link>
      <guid>https://dev.to/jryther/lambda-expressions-in-java-5gme</guid>
      <description>&lt;p&gt;This week we are going to go over something I have ran across but didn‚Äôt really understand until recently, lambda expressions!  Lambda expressions are Java dipping its toes into functional programming.  It takes parameters and applies it to an expression or code block.  Below is a basic example of the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(parameter1, parameter2) =&amp;gt; expression
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(parameter1, parameter2) =&amp;gt; {code block}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lambda expressions are extremely limited and must immediately return a value if it isn‚Äôt void.  They can‚Äôt use keywords such as if or for to maintain simplicity.  If more lines of code are needed then you can use a code block instead.&lt;/p&gt;

&lt;p&gt;Now when implementing lambdas you can‚Äôt only use the expression.  Lambdas are implementations of functional interfaces.  A functional interface is an interface that only has one abstract method.  The benefits of lambdas are that they allow you to implement the method without having to implement the interface‚Äôs class and instantiate an object.  An example of this is below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface FuncInterface
{
    // An abstract function
    void abstractFun(int x);

    // A non-abstract (or default) function
    default void normalFun()
    {
       System.out.println("Hello");
    }
}

class Test
{
    public static void main(String args[])
    {
        // lambda expression to implement above
        // functional interface. This interface
        // by default implements abstractFun()
        FuncInterface fobj = (int x)-&amp;gt;System.out.println(2*x);

        // This calls above lambda expression and prints 10.
        fobj.abstractFun(5);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lambda expressions are often used as parameters to a function.  To increase readability you can also store lambda expressions in a variable as long as the type is an interface that only has one method, the same number of parameters, and the same return type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import java.util.ArrayList;
import java.util.function.Consumer;

public class Main {
  public static void main(String[] args) {
    ArrayList&amp;lt;Integer&amp;gt; numbers = new ArrayList&amp;lt;Integer&amp;gt;();
    numbers.add(5);
    numbers.add(9);
    numbers.add(8);
    numbers.add(1);
    Consumer&amp;lt;Integer&amp;gt; method = (n) -&amp;gt; { System.out.println(n); };
    numbers.forEach( method );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A common use for lambdas are creating threads.  Here is an example of implementing a Runnable object with a lambda code block for the thread to execute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Lambda Runnable
Runnable task2 = () -&amp;gt; { System.out.println("Task #2 is running"); };

// start the thread
new Thread(task2).start();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most of us as beginners have been taught to program using OOP concepts so it can be a bit jarring to use a different paradigm like functional programming.  I myself am still learning to wrap my head around these concepts.  Anyway, I hope you all were able to learn something today.  If you have more questions or want to deep dive into this topic check out the links below that I used to write this post.  The code examples I pulled are also from there.  Have a great week!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/java/java_lambda.asp"&gt;https://www.w3schools.com/java/java_lambda.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codejava.net/java-core/the-java-language/java-8-lambda-runnable-example"&gt;https://www.codejava.net/java-core/the-java-language/java-8-lambda-runnable-example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/lambda-expressions-java-8/"&gt;https://www.geeksforgeeks.org/lambda-expressions-java-8/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.developer.com/microsoft/start-using-java-lambda-expressions/"&gt;https://www.developer.com/microsoft/start-using-java-lambda-expressions/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>computerscience</category>
      <category>programming</category>
    </item>
    <item>
      <title>JavaScript -Array.prototype.filter()</title>
      <author>Jasper Sun</author>
      <pubDate>Mon, 11 Oct 2021 01:40:03 +0000</pubDate>
      <link>https://dev.to/sun00120/javascript-array-prototype-filter-12b9</link>
      <guid>https://dev.to/sun00120/javascript-array-prototype-filter-12b9</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Array.filter()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JavaScript is one of the most important parts of web development. Today we are taking a look at the &lt;code&gt;filter()&lt;/code&gt; method in JavaScript.&lt;/p&gt;

&lt;p&gt;So how do we use the &lt;code&gt;filter()&lt;/code&gt; method?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-is-a-simply-example"&gt;
  &lt;/a&gt;
  Here is a simply example:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fig&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pear&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blueberry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;watermelon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// find out fruit name that has six or more letters&lt;/span&gt;
&lt;span class="c1"&gt;//expected output: [ 'banana', 'blueberry', 'watermelon' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simply add &lt;code&gt;.filter()&lt;/code&gt; after the array wants to be filtered.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;array.filter(functionName(currentValue, index, arr), thisValue)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;function&lt;/em&gt;
&lt;code&gt;function&lt;/code&gt; is used to test each element in the array by pass or not.
If it is &lt;code&gt;true&lt;/code&gt;, it will keep the element and build a new array. If it is &lt;code&gt;false&lt;/code&gt; which did not pass the test, it won't add the element to the new array.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-raw-function-endraw-has-3-arguments"&gt;
  &lt;/a&gt;
  The &lt;code&gt;function&lt;/code&gt; has 3 arguments:
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Arguments&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Value/element&lt;/td&gt;
&lt;td&gt;&amp;lt;&lt;strong&gt;required&lt;/strong&gt;&amp;gt;  The &lt;strong&gt;element(s)&lt;/strong&gt; now processed in the array.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Index&lt;/td&gt;
&lt;td&gt;&amp;lt;&lt;strong&gt;optional&lt;/strong&gt;&amp;gt;  The &lt;strong&gt;index of element(s)&lt;/strong&gt; now processed in the array.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Array&lt;/td&gt;
&lt;td&gt;&amp;lt;&lt;strong&gt;optional&lt;/strong&gt;&amp;gt;  The &lt;strong&gt;array&lt;/strong&gt; filter now processed.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;thisValue&lt;/em&gt; &amp;lt;&lt;strong&gt;optional&lt;/strong&gt;&amp;gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;value&lt;/strong&gt; &lt;code&gt;this&lt;/code&gt; when executing &lt;code&gt;callback&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#notice"&gt;
  &lt;/a&gt;
  Notice:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;filter()&lt;/code&gt; will return a &lt;strong&gt;new&lt;/strong&gt; array, only elements that pass the test will add to the new array. If &lt;strong&gt;no&lt;/strong&gt; elements pass the test, it still will return an &lt;strong&gt;empty&lt;/strong&gt; array.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;filter()&lt;/code&gt; &lt;strong&gt;doesn't change&lt;/strong&gt; the original array. &lt;/li&gt;
&lt;li&gt;The &lt;code&gt;filter()&lt;/code&gt; doesn't work with the function for the &lt;strong&gt;empty array&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#more-examples"&gt;
  &lt;/a&gt;
  More examples
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;93&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;checkAge&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//find age in the array that 50 years and older&lt;/span&gt;
&lt;span class="c1"&gt;//expected output: [ 57, 61, 68, 79, 93 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;overZero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;overZero&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// find the number in an array that is over 0.&lt;/span&gt;
&lt;span class="c1"&gt;//expected output: [ 3, 9, 12, 15 ]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;un&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;un&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// find all numbers that is a number.&lt;/span&gt;
&lt;span class="c1"&gt;//expected output: [ -9, -2, -1, 3, 9, 12, 15 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#notice"&gt;
  &lt;/a&gt;
  Notice:
&lt;/h4&gt;

&lt;p&gt;0 and undefined are equal to false in JavaScript. Therefore, it won't be printed out.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to learn more about the filter method or even more about JavaScript.&lt;br&gt;
Here is a very helpful youtube channel created by Steve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WrB_--bVbbs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Card Web Component</title>
      <author>ndesanno</author>
      <pubDate>Mon, 11 Oct 2021 01:33:24 +0000</pubDate>
      <link>https://dev.to/ndesanno/card-web-component-551</link>
      <guid>https://dev.to/ndesanno/card-web-component-551</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0D3wPTPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m16z78rh2o52s2512vhv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0D3wPTPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m16z78rh2o52s2512vhv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  Development
&lt;/h1&gt;

&lt;p&gt;My team and I are currently developing a card for websites like the one above. There are many elements that are a part of this card, but for this project we are focusing on four of them. They include icon, banner, scaffold, and the card itself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#roadblocks"&gt;
  &lt;/a&gt;
  Roadblocks
&lt;/h2&gt;

&lt;p&gt;Some potential roadblocks we could face when developing the card with the provided elements is properly designing the styling of the elements to work together. We want the card to be very changeable with the elements working together. We also need to take into account the size of the webpage to be able to have the card properly display the data in a way that makes sense for all web page sizes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-development"&gt;
  &lt;/a&gt;
  Managing development
&lt;/h2&gt;

&lt;p&gt;When considering working on a team with developers of all skill sets, documentation and communication of coding is key to project success. We will need to learn new skills in css and html to provide something that is workable and looks good.&lt;/p&gt;

&lt;p&gt;repo: &lt;a href="https://github.com/runtimeErrorsMadeEasy/project2"&gt;https://github.com/runtimeErrorsMadeEasy/project2&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Three Protocols you should know as a web developer
</title>
      <author>Mahmoud EL-kariouny</author>
      <pubDate>Mon, 11 Oct 2021 01:02:01 +0000</pubDate>
      <link>https://dev.to/mahmoudessa/three-protocols-you-should-know-as-a-web-developer-270</link>
      <guid>https://dev.to/mahmoudessa/three-protocols-you-should-know-as-a-web-developer-270</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-does-protocol-mean"&gt;
  &lt;/a&gt;
  What Does Protocol Mean?
&lt;/h3&gt;

&lt;p&gt;A protocol is a set of rules and guidelines for communicating data.&lt;/p&gt;

&lt;p&gt;Rules are defined for each step and process during communication between two or more computers.&lt;/p&gt;

&lt;p&gt;Networks have to follow these rules to successfully transmit data.&lt;/p&gt;

&lt;p&gt;1- HTTP:&lt;/p&gt;

&lt;p&gt;The Hypertext Transfer Protocol(HTTP) is used by the browser to tell the host computer what file it wants to retrieve.&lt;/p&gt;

&lt;p&gt;2- IP:&lt;/p&gt;

&lt;p&gt;The Internet Protocol (IP) is used for routing IP packets between logan's computer and the server based on IP addresses. &lt;/p&gt;

&lt;p&gt;3- TCP:&lt;/p&gt;

&lt;p&gt;The Transmission Control Protocol(TCP) is used for making sure the IP packets all arrive correctly and in order.&lt;/p&gt;

&lt;p&gt;Read More:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:the-internet/xcae6f4a7ff015e7d:web-protocols/a/the-world-wide-web"&gt;The World Wide Web&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:the-internet/xcae6f4a7ff015e7d:web-protocols/a/domain-name-system-dns"&gt;Domain Name System (DNS)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:the-internet/xcae6f4a7ff015e7d:web-protocols/a/hypertext-transfer-protocol-http"&gt;Hypertext Transfer Protocol (HTTP)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Five thousand processing cores?</title>
      <author>Darth Espressius</author>
      <pubDate>Mon, 11 Oct 2021 00:46:46 +0000</pubDate>
      <link>https://dev.to/_aadidev/five-thousand-processing-cores-2035</link>
      <guid>https://dev.to/_aadidev/five-thousand-processing-cores-2035</guid>
      <description>&lt;p&gt;Even if you're not in the 'tech' industry, in today's computing age you may have heard the term 'CPU' tossed around. A CPU or &lt;em&gt;Central Processing Unit&lt;/em&gt; is a general term for the 'brain' of today's computers. (I use the term computer here very loosely to refer to any sort of desktop, laptop, server, etc without attempting to fully encapsulate the infinite array of microprocessing units in our fridges, watches, and elevator controls). &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-a-cpu-works"&gt;
  &lt;/a&gt;
  How a CPU Works
&lt;/h1&gt;

&lt;p&gt;A CPU may divide a series of tasks by time; where any given slot (or series of slots) may be dedicated to a given task or series of tasks. These tasks are assigned to a single computational unit (also known as a core, technically known as a floating point unit) at any given point in time, and the single core is freed to move on to its next task once the previously-running task has completed. &lt;/p&gt;

&lt;p&gt;The issue with this model is readily apparent: what if I want two tasks to happen at the same time? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rtos"&gt;
  &lt;/a&gt;
  RTOS
&lt;/h2&gt;

&lt;p&gt;Since the 1980's, the &lt;em&gt;real-time operating system&lt;/em&gt; or &lt;strong&gt;RTOS&lt;/strong&gt; was the only way by which a single CPU could achieve, or at least appear to achieve, some sort of concurrent operation. However, this "appear to achieve" is a bit of a gotcha, since the &lt;strong&gt;real-time&lt;/strong&gt; in RTOS translates to &lt;em&gt;finishing within a predetermined time-interval&lt;/em&gt;. This is achieved by some sort of scheduling algorithm, and a series of programming constructs for holding resources (mutexes), signalling (semaphores) and a host of other methods by which some sort of deterministic behaviour is effected.&lt;/p&gt;

&lt;p&gt;This is &lt;strong&gt;not&lt;/strong&gt; purely concurrent, there is no way to actually carry out simultaneous operations, say, on a large chunk of data&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-multicore-processor"&gt;
  &lt;/a&gt;
  The Multi-Core Processor
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aP-mPoPy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59uo7wmwegsx7bm6dsz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aP-mPoPy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59uo7wmwegsx7bm6dsz4.png" alt="IBM 100 Power 4"&gt;&lt;/a&gt;&lt;em&gt;IBM 100 Power 4&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.ibm.com/ibm/history/ibm100/us/en/icons/power4/#:~:text=In%202001%2C%20IBM%20introduced%20the,more%20than%20170%20million%20transistors"&gt;first&lt;/a&gt; multi-core processor was the POWER4, however the first commercially available desktop processor accessible as a familiar socket-mounted package was the Intel Celeron for home consumer usage, and the AMD Opeteron for server usage. This took the single-core idea and solved the "I want to do two things at once" problem in the most brute-force way possible: if you want to do to (or more things) at once, then you need two (or more) cores.&lt;/p&gt;

&lt;p&gt;This wasn't (and still isn't) an absurdly irrational concept, as the proliferation of &lt;a href="https://www.supermicro.com/products/motherboard/Xeon7000/7300/X7QC3.cfm"&gt;multi-socket motherboards&lt;/a&gt; prior to the multi-core era demonstrated the desire for concurrency in the enterprise space.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6yHjVS4Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26kw1euitnb822qczgpn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6yHjVS4Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26kw1euitnb822qczgpn.jpeg" alt="Multi-Socket Motherboard"&gt;&lt;/a&gt;&lt;em&gt;Multi-Socket Motherboard&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The main limitation before the introduction of the first multi-core CPUs was (and still is) power delivery. Having to power two cores in a single package introduces complications and adds additional heating requirements. Moreover, having the introduced overhead for core synchronization and memory sharing not outweigh the benefits of multi-core has seen many creative solutions over the years, the most recent of which is AMD's &lt;a href="https://en.wikichip.org/wiki/amd/infinity_fabric"&gt;Infinity Fabric&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;When the first multi-core processors came out, the issue was fitting enough transistors on a chip to build more than one core. The issue regarding transistor size has for more or less disappeared, as we approach the opposite problem in transistor design: as transistors shrink below the 1-2nm mark, new quantum effects such as tunneling introduce an entirely new class of nondeterminism into chips' operation. &lt;/p&gt;

&lt;p&gt;Okay, so now you understand where CPUs came from, and how being able to do more than to things at once was physically achieved, but where do GPUs come in?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-cuda-core"&gt;
  &lt;/a&gt;
  The CUDA Core!!
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#or-streaming-processor"&gt;
  &lt;/a&gt;
  or streaming processor?
&lt;/h4&gt;

&lt;p&gt;Okay I love NVIDIA and AMD, but their definition of a 'core' is a bit, err...ambitious? On the CPU side of things, a 'core' should be able to fetch instructions, load the necessary data required to perform this instruction into memory, perform the said data operation as indicated by the instruction, and return the complete, processed data at the end of the operation. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--unx6N_oA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgtslgq5a1a0h41veyzc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--unx6N_oA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgtslgq5a1a0h41veyzc.jpg" alt="Ampere Architecture"&gt;&lt;/a&gt;&lt;em&gt;Layout of the latest 3000-series GPUs&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;CUDA core&lt;/strong&gt; or (Stream processor depending on which colour flag you're currently waving, for me it's currently green, so we'd stick with "CUDA Core" for now), is simply a floating-point unit. It receives data, performs some operation, and returns it. It does &lt;strong&gt;not&lt;/strong&gt; independently handle fetching instructions and loading data into memory. &lt;/p&gt;

&lt;p&gt;Terminology out of the way, modern-day GPUs have &lt;em&gt;thousands&lt;/em&gt; of CUDA cores, the GA104 in my NVIDIA RTX 3060ti has nearly &lt;strong&gt;five thousand&lt;/strong&gt; CUDA cores. Heck, the measly mobile GTX1060M in my laptop has over a thousand, and that launched &lt;em&gt;five years&lt;/em&gt; ago. GPUs are essentially a set of floating point processors bundled nicely into a well-powered, nicely ventilated chip which makes GPUs incredibly versatile for huge levels of parallelism. &lt;/p&gt;

&lt;p&gt;GPUs have been used for &lt;a href="https://www.usenix.org/legacy/events/atc11/tech/final_files/atc11_proceedings.pdf#page=27"&gt;real-time scheduling&lt;/a&gt;, &lt;a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.418.233&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;graph algorithms&lt;/a&gt;, &lt;a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.61.3825&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;HPC&lt;/a&gt;, &lt;a href="https://arxiv.org/pdf/1811.05588.pdf"&gt;object detection using neural networks&lt;/a&gt;, and the list goes on. This is due in no small part to the nature of machine-learning applications, and the ability of neural networks to be split across multiple processing cores. Major Deep Learning frameworks such as &lt;a href="https://www.tensorflow.org/install/gpu"&gt;TensorFlow&lt;/a&gt; and &lt;a href="https://pytorch.org/docs/stable/notes/cuda.html"&gt;PyTorch&lt;/a&gt; now offer GPU support by default (once the CUDA toolkit and cuDNN is installed). &lt;/p&gt;

&lt;p&gt;With respect to purely cost, GPUs have higher instruction throughput and memory bandwidth when compared to CPUs. Additionally, GPUs tend to have significantly higher raw arithmetic capabilities than CPUs, and is centered around a large number of fine-grained parallel processors.&lt;/p&gt;

&lt;p&gt;I could go on and on about the wonders of GPUs and where there are used, and probably do some more hand-wavy stuff in an attempt to convince you that GPUs are really cool, but I'd rather go in a bit more detail into how exactly GPUs do what they do, and the thinking that goes into developing a GPU program.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;From here forward, most of the technical details are NVIDIA-specific, however they can for the most part be ported to AMD/ATI GPUs&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-programming-model"&gt;
  &lt;/a&gt;
  The Programming Model
&lt;/h1&gt;

&lt;p&gt;GPUs work on the &lt;strong&gt;SIMD&lt;/strong&gt; model, or the &lt;em&gt;single-instruction-multiple-data&lt;/em&gt; idea, where a single operation is to be carried out on multiple data points in parallel. These operations must be independent, as there is no data-sharing between these operations. This is in direct contrast to the &lt;strong&gt;MIMD&lt;/strong&gt; model of the CPU (or &lt;em&gt;multi-instruction-multi-data&lt;/em&gt;, where CPUs possess inherent complexity to be able to handle multiple types of different tasks). &lt;br&gt;
GPUs are more general purpose, as their floating-point units can be adapted to a wider range of applications by means of a programming interface (such as CUDA). &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QPFE0I9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntmf9tmmdt937qgrys0t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QPFE0I9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntmf9tmmdt937qgrys0t.png" alt="Block of Threads"&gt;&lt;/a&gt;&lt;em&gt;How Threads are grouped into blocks which are grouped into grids&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;streaming multiprocessor&lt;/strong&gt; or an SM,  in NVIDIA-land could be thought of as a multithreaded CPU core, with its own shared memory, with a set of 32-bit registers (think of this as the GPU equivalent of L1 cache), and contains a set of floating point units. A collection of &lt;strong&gt;threads&lt;/strong&gt; called a &lt;em&gt;block&lt;/em&gt; runs on an SM and executes a custom GPU function called a &lt;strong&gt;kernel&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;That's a lot of terminology, the important bit to note is that current GPUs have a limit of 1024 threads per block, and this number is further limited by the available memory requirements of your specific kernel. For a more in-depth explanation of this, see &lt;a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#thread-hierarchy"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinking-about-problems"&gt;
  &lt;/a&gt;
  Thinking About Problems
&lt;/h2&gt;

&lt;p&gt;The GPU architecture is centered around fine-grained parallelism (or &lt;em&gt;thread-based&lt;/em&gt; parallelism). This is where a problem is partitioned into coarse sub-problems solved independently by blocks of threads, where each sub-problem is split into finer pieces that may be solved cooperatively in parallel by &lt;strong&gt;all&lt;/strong&gt; threads in a block.&lt;/p&gt;

&lt;p&gt;There can be a few issues here however, where bad branching in your custom GPU program or &lt;em&gt;kernel&lt;/em&gt; results in massive overhead induced by the GPUs limitation to tell a block of threads to do only &lt;em&gt;one&lt;/em&gt; thing. For example, if your kernel needs all the even-numbered threads to do one thing, and the odd-numbered threads to do another thing, there will always be one set of threads waiting on the other to complete its task, which effectively &lt;strong&gt;doubles&lt;/strong&gt; the processing time for your given task (or set of tasks).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sharing-is-caring"&gt;
  &lt;/a&gt;
  Sharing is Caring
&lt;/h2&gt;

&lt;p&gt;Remember where I said that each thread can work only on independent data points? Well in theory this may seem feasible, but in practice this idea falls apart. Think of the simplest case of needing to first calculate the square of a series of numbers, followed by finding a sum of these numbers. Every "square" mathematical operation can happen on a separate thread, however when needing to sum the output, the threads need to talk to each other, or at least have some central repository by which to sync their outputs. This is where &lt;strong&gt;shared memory&lt;/strong&gt; comes in. (This is one of the main types of memory available in the CUDA programming model, along with &lt;em&gt;global&lt;/em&gt;, &lt;em&gt;texture&lt;/em&gt; and &lt;em&gt;host&lt;/em&gt; memory). &lt;/p&gt;

&lt;p&gt;Shared memory is a memory that can accessed all threads within a block, and is orders of magnitude times faster than system memory, with significantly lower latency. (It can be thought of programmer-controlled L1 cache). The CUDA programming model introduces a special keyword &lt;code&gt;__syncthreads()&lt;/code&gt; to ensure no race conditions occur. &lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;race condition&lt;/strong&gt; is where two processes need to access a single memory location, and one of both threads attempts to read from/write to the memory location before the other is done with its own operation. This can lead to failed reads and corrupt writes. &lt;/p&gt;

&lt;p&gt;This is a very basic introduction to why GPUs are useful, and how they function on a high-level basis. If you have any questions, feel free to contact my via the email listed in the profile, and happy reading!&lt;/p&gt;

</description>
      <category>gpu</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Thoughts on 10x Developers</title>
      <author>Nested Software</author>
      <pubDate>Mon, 11 Oct 2021 00:34:18 +0000</pubDate>
      <link>https://dev.to/nestedsoftware/thoughts-on-10x-developers-1iom</link>
      <guid>https://dev.to/nestedsoftware/thoughts-on-10x-developers-1iom</guid>
      <description>&lt;p&gt;The concept of the 10x developer was popularized by &lt;a href="https://en.wikipedia.org/wiki/Steve_McConnell"&gt;Steve McConnell&lt;/a&gt; in his book, Rapid Development, published in the 1990s. Steve highlighted some research into software engineering that suggested top developers could offer an order-of-magnitude improvement in productivity over average performers. &lt;/p&gt;

&lt;p&gt;It is not easy to draw firm conclusions from this type of research. It is difficult to generalize the meaning of the results beyond the particular tasks associated with a specific study. Nonetheless, I would say these results are roughly consistent with my own anecdotal experience. In any field, there are outliers who can make things look easy that would be very hard for the average practitioner. This is accomplished both by dint of experience and great effort put in over years, but also because some people have the good fortune of being supremely talented. &lt;/p&gt;

&lt;p&gt;Software development is no different from any other field. I've encountered brilliant programmers who would be several times as productive as I can be for many kinds of tasks. Also, such people can solve problems that may be entirely beyond my capabilities. Reasonable people can disagree about the 10x number, but I dare say we can all agree that brilliant people do exist. &lt;/p&gt;

&lt;p&gt;I think the trouble started when "10x developer" increasingly became a buzzword in the tech industry in the 2000s. It became associated with the image of a kind of toxic and abrasive male tech-bro. I believe it also came to be used as justification to dismiss the need for diversification in software engineering. I completely reject this kind of idea. Human potential comes in many forms, and we can nurture and cultivate talent from many different backgrounds. &lt;/p&gt;

&lt;p&gt;However, I do sense something in the zeitgeist that, as part of the rejection of this idea that 10x developers must be arrogant, male, white, Stanford grads, there is this train of thought that 10x developers simply don't exist - or that any apparent increase in productivity comes only from cutting corners. That's also not true, and I believe it does a disservice to the reality of individual differences.&lt;/p&gt;

&lt;p&gt;The simple truth is that there are two axes to consider. On one axis, we have talent level. On the other, there are positive vs. negative personality traits. The two axes  are somewhat independent. Talented (and untalented) jerks exist. But many talented people are also modest and kind. I believe that somehow the myth of the arrogant 10x developer came from some high profile examples - people like John Carmack and Bill Gates in their youth do fit the profile. However, these stereotypes are not representative. We tend to notice these cases because people who are both exceptional and jerks tend to stand out, but that doesn't mean it is something to celebrate or emulate. &lt;/p&gt;

</description>
      <category>10xdeveloper</category>
      <category>discuss</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
